
uart_isr_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007340  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007600  08007600  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08007600  08007600  00017600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007608  08007608  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007608  08007608  00017608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800760c  0800760c  0001760c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08007684  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08007724  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005210  200001b4  080077c4  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200053c4  080077c4  000253c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023874  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003fa5  00000000  00000000  00043a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a20  00000000  00000000  00047a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000018a8  00000000  00000000  00049420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004346  00000000  00000000  0004acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001dcbf  00000000  00000000  0004f00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010dd94  00000000  00000000  0006cccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0017aa61  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000726c  00000000  00000000  0017aab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08007528 	.word	0x08007528

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08007528 	.word	0x08007528

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fdbf 	bl	80010ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f820 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f99c 	bl	800088c <MX_GPIO_Init>
  MX_ETH_Init();
 8000554:	f000 f88e 	bl	8000674 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000558:	f000 f93a 	bl	80007d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055c:	f000 f968 	bl	8000830 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8000560:	f000 f8d6 	bl	8000710 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000564:	f000 f904 	bl	8000770 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000568:	f004 f8e8 	bl	800473c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800056c:	4a05      	ldr	r2, [pc, #20]	; (8000584 <main+0x40>)
 800056e:	2100      	movs	r1, #0
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <main+0x44>)
 8000572:	f004 f94d 	bl	8004810 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <main+0x48>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f004 f912 	bl	80047a4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x3c>
 8000582:	bf00      	nop
 8000584:	08007564 	.word	0x08007564
 8000588:	080009d1 	.word	0x080009d1
 800058c:	20000958 	.word	0x20000958

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2234      	movs	r2, #52	; 0x34
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f006 fef8 	bl	8007394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b4:	f001 fcf0 	bl	8001f98 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	4b2c      	ldr	r3, [pc, #176]	; (800066c <SystemClock_Config+0xdc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a2b      	ldr	r2, [pc, #172]	; (800066c <SystemClock_Config+0xdc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <SystemClock_Config+0xdc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <SystemClock_Config+0xe0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d8:	4a25      	ldr	r2, [pc, #148]	; (8000670 <SystemClock_Config+0xe0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <SystemClock_Config+0xe0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000604:	2360      	movs	r3, #96	; 0x60
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fd1d 	bl	8002058 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000624:	f000 f9ee 	bl	8000a04 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000628:	f001 fcc6 	bl	8001fb8 <HAL_PWREx_EnableOverDrive>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000632:	f000 f9e7 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2103      	movs	r1, #3
 8000652:	4618      	mov	r0, r3
 8000654:	f001 ffae 	bl	80025b4 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800065e:	f000 f9d1 	bl	8000a04 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ETH_Init+0x84>)
 800067a:	4a20      	ldr	r2, [pc, #128]	; (80006fc <MX_ETH_Init+0x88>)
 800067c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <MX_ETH_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_ETH_Init+0x8c>)
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_ETH_Init+0x8c>)
 800068c:	22e1      	movs	r2, #225	; 0xe1
 800068e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_ETH_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_ETH_Init+0x8c>)
 8000698:	2200      	movs	r2, #0
 800069a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_ETH_Init+0x8c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_ETH_Init+0x84>)
 80006a4:	4a16      	ldr	r2, [pc, #88]	; (8000700 <MX_ETH_Init+0x8c>)
 80006a6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_ETH_Init+0x84>)
 80006aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006ae:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ETH_Init+0x84>)
 80006b2:	4a14      	ldr	r2, [pc, #80]	; (8000704 <MX_ETH_Init+0x90>)
 80006b4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_ETH_Init+0x84>)
 80006b8:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_ETH_Init+0x94>)
 80006ba:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_ETH_Init+0x84>)
 80006be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006c2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <MX_ETH_Init+0x84>)
 80006c6:	f000 fe33 	bl	8001330 <HAL_ETH_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006d0:	f000 f998 	bl	8000a04 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006d4:	2238      	movs	r2, #56	; 0x38
 80006d6:	2100      	movs	r1, #0
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <MX_ETH_Init+0x98>)
 80006da:	f006 fe5b 	bl	8007394 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_ETH_Init+0x98>)
 80006e0:	2221      	movs	r2, #33	; 0x21
 80006e2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_ETH_Init+0x98>)
 80006e6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006ea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_ETH_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000208 	.word	0x20000208
 80006fc:	40028000 	.word	0x40028000
 8000700:	2000095c 	.word	0x2000095c
 8000704:	20000114 	.word	0x20000114
 8000708:	20000074 	.word	0x20000074
 800070c:	200001d0 	.word	0x200001d0

08000710 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_UART4_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_UART4_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_UART4_Init+0x58>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_UART4_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_UART4_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_UART4_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_UART4_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_UART4_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_UART4_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_UART4_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_UART4_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_UART4_Init+0x58>)
 8000754:	f003 f88e 	bl	8003874 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f951 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200002b8 	.word	0x200002b8
 800076c:	40004c00 	.word	0x40004c00

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <MX_USART2_UART_Init+0x5c>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007b4:	f003 f85e 	bl	8003874 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f921 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000340 	.word	0x20000340
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <MX_USART3_UART_Init+0x5c>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART3_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART3_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART3_UART_Init+0x58>)
 8000814:	f003 f82e 	bl	8003874 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f8f1 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200003c8 	.word	0x200003c8
 800082c:	40004800 	.word	0x40004800

08000830 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800083a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083e:	2206      	movs	r2, #6
 8000840:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000844:	2202      	movs	r2, #2
 8000846:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000850:	2202      	movs	r2, #2
 8000852:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2201      	movs	r2, #1
 8000858:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2201      	movs	r2, #1
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	f001 fa47 	bl	8001d06 <HAL_PCD_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800087e:	f000 f8c1 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000450 	.word	0x20000450

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b47      	ldr	r3, [pc, #284]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a46      	ldr	r2, [pc, #280]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b44      	ldr	r3, [pc, #272]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	4b41      	ldr	r3, [pc, #260]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a40      	ldr	r2, [pc, #256]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b3b      	ldr	r3, [pc, #236]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a3a      	ldr	r2, [pc, #232]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b38      	ldr	r3, [pc, #224]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b35      	ldr	r3, [pc, #212]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a34      	ldr	r2, [pc, #208]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b32      	ldr	r3, [pc, #200]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a2e      	ldr	r2, [pc, #184]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000908:	f043 0308 	orr.w	r3, r3, #8
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0308 	and.w	r3, r3, #8
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091a:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a28      	ldr	r2, [pc, #160]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f244 0181 	movw	r1, #16513	; 0x4081
 8000938:	4822      	ldr	r0, [pc, #136]	; (80009c4 <MX_GPIO_Init+0x138>)
 800093a:	f001 f9cb 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2140      	movs	r1, #64	; 0x40
 8000942:	4821      	ldr	r0, [pc, #132]	; (80009c8 <MX_GPIO_Init+0x13c>)
 8000944:	f001 f9c6 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	481b      	ldr	r0, [pc, #108]	; (80009cc <MX_GPIO_Init+0x140>)
 8000960:	f001 f80c 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000964:	f244 0381 	movw	r3, #16513	; 0x4081
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4811      	ldr	r0, [pc, #68]	; (80009c4 <MX_GPIO_Init+0x138>)
 800097e:	f000 fffd 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000982:	2340      	movs	r3, #64	; 0x40
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <MX_GPIO_Init+0x13c>)
 800099a:	f000 ffef 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_GPIO_Init+0x13c>)
 80009b2:	f000 ffe3 	bl	800197c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b6:	bf00      	nop
 80009b8:	3730      	adds	r7, #48	; 0x30
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020400 	.word	0x40020400
 80009c8:	40021800 	.word	0x40021800
 80009cc:	40020800 	.word	0x40020800

080009d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009d8:	2001      	movs	r0, #1
 80009da:	f003 ffbf 	bl	800495c <osDelay>
 80009de:	e7fb      	b.n	80009d8 <StartDefaultTask+0x8>

080009e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009f2:	f000 fb77 	bl	80010e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40001000 	.word	0x40001000

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a10      	ldr	r2, [pc, #64]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	210f      	movs	r1, #15
 8000a4a:	f06f 0001 	mvn.w	r0, #1
 8000a4e:	f000 fc45 	bl	80012dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	; 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a4e      	ldr	r2, [pc, #312]	; (8000bb8 <HAL_ETH_MspInit+0x158>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	f040 8096 	bne.w	8000bb0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a84:	4b4d      	ldr	r3, [pc, #308]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	4a4c      	ldr	r2, [pc, #304]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000a8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a90:	4b4a      	ldr	r3, [pc, #296]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a98:	623b      	str	r3, [r7, #32]
 8000a9a:	6a3b      	ldr	r3, [r7, #32]
 8000a9c:	4b47      	ldr	r3, [pc, #284]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a46      	ldr	r2, [pc, #280]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000aa2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ab0:	61fb      	str	r3, [r7, #28]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a40      	ldr	r2, [pc, #256]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000aba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	4b3b      	ldr	r3, [pc, #236]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a3a      	ldr	r2, [pc, #232]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b38      	ldr	r3, [pc, #224]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a34      	ldr	r2, [pc, #208]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a2e      	ldr	r2, [pc, #184]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000b02:	f043 0302 	orr.w	r3, r3, #2
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
 8000b08:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b14:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <HAL_ETH_MspInit+0x15c>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b2c:	2332      	movs	r3, #50	; 0x32
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b3c:	230b      	movs	r3, #11
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	481e      	ldr	r0, [pc, #120]	; (8000bc0 <HAL_ETH_MspInit+0x160>)
 8000b48:	f000 ff18 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b4c:	2386      	movs	r3, #134	; 0x86
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b5c:	230b      	movs	r3, #11
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	4619      	mov	r1, r3
 8000b66:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <HAL_ETH_MspInit+0x164>)
 8000b68:	f000 ff08 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7e:	230b      	movs	r3, #11
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	480f      	ldr	r0, [pc, #60]	; (8000bc8 <HAL_ETH_MspInit+0x168>)
 8000b8a:	f000 fef7 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba0:	230b      	movs	r3, #11
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4808      	ldr	r0, [pc, #32]	; (8000bcc <HAL_ETH_MspInit+0x16c>)
 8000bac:	f000 fee6 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3738      	adds	r7, #56	; 0x38
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40028000 	.word	0x40028000
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020800 	.word	0x40020800
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40021800 	.word	0x40021800

08000bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0b4      	sub	sp, #208	; 0xd0
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bec:	2290      	movs	r2, #144	; 0x90
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f006 fbcf 	bl	8007394 <memset>
  if(huart->Instance==UART4)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a85      	ldr	r2, [pc, #532]	; (8000e10 <HAL_UART_MspInit+0x240>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d15e      	bne.n	8000cbe <HAL_UART_MspInit+0xee>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 ff28 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c1a:	f7ff fef3 	bl	8000a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c1e:	4b7d      	ldr	r3, [pc, #500]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a7c      	ldr	r2, [pc, #496]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b7a      	ldr	r3, [pc, #488]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c34:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b77      	ldr	r3, [pc, #476]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a76      	ldr	r2, [pc, #472]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b74      	ldr	r3, [pc, #464]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	4b71      	ldr	r3, [pc, #452]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a70      	ldr	r2, [pc, #448]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b6e      	ldr	r3, [pc, #440]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	623b      	str	r3, [r7, #32]
 8000c64:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4863      	ldr	r0, [pc, #396]	; (8000e18 <HAL_UART_MspInit+0x248>)
 8000c8c:	f000 fe76 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000caa:	2308      	movs	r3, #8
 8000cac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4859      	ldr	r0, [pc, #356]	; (8000e1c <HAL_UART_MspInit+0x24c>)
 8000cb8:	f000 fe60 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cbc:	e0a3      	b.n	8000e06 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a57      	ldr	r2, [pc, #348]	; (8000e20 <HAL_UART_MspInit+0x250>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d15c      	bne.n	8000d82 <HAL_UART_MspInit+0x1b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 fec5 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8000ce0:	f7ff fe90 	bl	8000a04 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce4:	4b4b      	ldr	r3, [pc, #300]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	4a4a      	ldr	r2, [pc, #296]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cee:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf0:	4b48      	ldr	r3, [pc, #288]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b45      	ldr	r3, [pc, #276]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a44      	ldr	r2, [pc, #272]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	61bb      	str	r3, [r7, #24]
 8000d12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d14:	4b3f      	ldr	r3, [pc, #252]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4a3e      	ldr	r2, [pc, #248]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d20:	4b3c      	ldr	r3, [pc, #240]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d44:	2307      	movs	r3, #7
 8000d46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4831      	ldr	r0, [pc, #196]	; (8000e18 <HAL_UART_MspInit+0x248>)
 8000d52:	f000 fe13 	bl	800197c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d56:	2320      	movs	r3, #32
 8000d58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d6e:	2307      	movs	r3, #7
 8000d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d74:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000d78:	4619      	mov	r1, r3
 8000d7a:	482a      	ldr	r0, [pc, #168]	; (8000e24 <HAL_UART_MspInit+0x254>)
 8000d7c:	f000 fdfe 	bl	800197c <HAL_GPIO_Init>
}
 8000d80:	e041      	b.n	8000e06 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <HAL_UART_MspInit+0x258>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d13c      	bne.n	8000e06 <HAL_UART_MspInit+0x236>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 fe62 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8000da6:	f7ff fe2d 	bl	8000a04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_UART_MspInit+0x244>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df4:	2307      	movs	r3, #7
 8000df6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4808      	ldr	r0, [pc, #32]	; (8000e24 <HAL_UART_MspInit+0x254>)
 8000e02:	f000 fdbb 	bl	800197c <HAL_GPIO_Init>
}
 8000e06:	bf00      	nop
 8000e08:	37d0      	adds	r7, #208	; 0xd0
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40004c00 	.word	0x40004c00
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	40004400 	.word	0x40004400
 8000e24:	40020c00 	.word	0x40020c00
 8000e28:	40004800 	.word	0x40004800

08000e2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0ae      	sub	sp, #184	; 0xb8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2290      	movs	r2, #144	; 0x90
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f006 faa1 	bl	8007394 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e5a:	d159      	bne.n	8000f10 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e60:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 fdf9 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e78:	f7ff fdc4 	bl	8000a04 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <HAL_PCD_MspInit+0xec>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	4a25      	ldr	r2, [pc, #148]	; (8000f18 <HAL_PCD_MspInit+0xec>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6313      	str	r3, [r2, #48]	; 0x30
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <HAL_PCD_MspInit+0xec>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e94:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000eae:	230a      	movs	r3, #10
 8000eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4818      	ldr	r0, [pc, #96]	; (8000f1c <HAL_PCD_MspInit+0xf0>)
 8000ebc:	f000 fd5e 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4810      	ldr	r0, [pc, #64]	; (8000f1c <HAL_PCD_MspInit+0xf0>)
 8000edc:	f000 fd4e 	bl	800197c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_PCD_MspInit+0xec>)
 8000ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee4:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <HAL_PCD_MspInit+0xec>)
 8000ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eea:	6353      	str	r3, [r2, #52]	; 0x34
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_PCD_MspInit+0xec>)
 8000eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <HAL_PCD_MspInit+0xec>)
 8000efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_PCD_MspInit+0xec>)
 8000efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f02:	6453      	str	r3, [r2, #68]	; 0x44
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_PCD_MspInit+0xec>)
 8000f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f10:	bf00      	nop
 8000f12:	37b8      	adds	r7, #184	; 0xb8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000

08000f20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08e      	sub	sp, #56	; 0x38
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f30:	4b33      	ldr	r3, [pc, #204]	; (8001000 <HAL_InitTick+0xe0>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	4a32      	ldr	r2, [pc, #200]	; (8001000 <HAL_InitTick+0xe0>)
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3c:	4b30      	ldr	r3, [pc, #192]	; (8001000 <HAL_InitTick+0xe0>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f48:	f107 0210 	add.w	r2, r7, #16
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 fd54 	bl	8002a00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d103      	bne.n	8000f6a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f62:	f001 fd25 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 8000f66:	6378      	str	r0, [r7, #52]	; 0x34
 8000f68:	e004      	b.n	8000f74 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f6a:	f001 fd21 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f76:	4a23      	ldr	r2, [pc, #140]	; (8001004 <HAL_InitTick+0xe4>)
 8000f78:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7c:	0c9b      	lsrs	r3, r3, #18
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <HAL_InitTick+0xe8>)
 8000f84:	4a21      	ldr	r2, [pc, #132]	; (800100c <HAL_InitTick+0xec>)
 8000f86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <HAL_InitTick+0xe8>)
 8000f8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f8e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f90:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <HAL_InitTick+0xe8>)
 8000f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f94:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_InitTick+0xe8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <HAL_InitTick+0xe8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_InitTick+0xe8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000fa8:	4817      	ldr	r0, [pc, #92]	; (8001008 <HAL_InitTick+0xe8>)
 8000faa:	f002 f983 	bl	80032b4 <HAL_TIM_Base_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000fb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d11b      	bne.n	8000ff4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000fbc:	4812      	ldr	r0, [pc, #72]	; (8001008 <HAL_InitTick+0xe8>)
 8000fbe:	f002 f9db 	bl	8003378 <HAL_TIM_Base_Start_IT>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000fc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d111      	bne.n	8000ff4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fd0:	2036      	movs	r0, #54	; 0x36
 8000fd2:	f000 f99f 	bl	8001314 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d808      	bhi.n	8000fee <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	2036      	movs	r0, #54	; 0x36
 8000fe2:	f000 f97b 	bl	80012dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0xf0>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e002      	b.n	8000ff4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ff4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3738      	adds	r7, #56	; 0x38
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	431bde83 	.word	0x431bde83
 8001008:	20000964 	.word	0x20000964
 800100c:	40001000 	.word	0x40001000
 8001010:	20000004 	.word	0x20000004

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <NMI_Handler+0x4>

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <TIM6_DAC_IRQHandler+0x10>)
 8001046:	f002 fa0f 	bl	8003468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000964 	.word	0x20000964

08001054 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001094:	4c0b      	ldr	r4, [pc, #44]	; (80010c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a2:	f7ff ffd7 	bl	8001054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f006 f941 	bl	800732c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fa4b 	bl	8000544 <main>
  bx  lr    
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010bc:	08007610 	.word	0x08007610
  ldr r2, =_sbss
 80010c0:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 80010c4:	200053c4 	.word	0x200053c4

080010c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>

080010ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ce:	2003      	movs	r0, #3
 80010d0:	f000 f8f9 	bl	80012c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d4:	200f      	movs	r0, #15
 80010d6:	f7ff ff23 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010da:	f7ff fc99 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008
 8001108:	200009b0 	.word	0x200009b0

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200009b0 	.word	0x200009b0

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffde 	bl	800110c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <__NVIC_SetPriorityGrouping+0x40>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	4313      	orrs	r3, r2
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x40>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00
 80011b0:	05fa0000 	.word	0x05fa0000

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <__NVIC_EnableIRQ+0x38>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ff4c 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ee:	f7ff ff61 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 80012f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	6978      	ldr	r0, [r7, #20]
 80012fa:	f7ff ffb1 	bl	8001260 <NVIC_EncodePriority>
 80012fe:	4602      	mov	r2, r0
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff80 	bl	800120c <__NVIC_SetPriority>
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff54 	bl	80011d0 <__NVIC_EnableIRQ>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e06a      	b.n	8001418 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001348:	2b00      	cmp	r3, #0
 800134a:	d106      	bne.n	800135a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2223      	movs	r2, #35	; 0x23
 8001350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff fb83 	bl	8000a60 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <HAL_ETH_Init+0xf0>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a30      	ldr	r2, [pc, #192]	; (8001420 <HAL_ETH_Init+0xf0>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <HAL_ETH_Init+0xf0>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001372:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <HAL_ETH_Init+0xf4>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4a2b      	ldr	r2, [pc, #172]	; (8001424 <HAL_ETH_Init+0xf4>)
 8001378:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800137c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <HAL_ETH_Init+0xf4>)
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	4927      	ldr	r1, [pc, #156]	; (8001424 <HAL_ETH_Init+0xf4>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <HAL_ETH_Init+0xf4>)
 800138e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a8:	f7ff feb0 	bl	800110c <HAL_GetTick>
 80013ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013ae:	e011      	b.n	80013d4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013b0:	f7ff feac 	bl	800110c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013be:	d909      	bls.n	80013d4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2204      	movs	r2, #4
 80013c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	22e0      	movs	r2, #224	; 0xe0
 80013cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e021      	b.n	8001418 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1e4      	bne.n	80013b0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f958 	bl	800169c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f9ff 	bl	80017f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fa55 	bl	80018a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	461a      	mov	r2, r3
 80013fe:	2100      	movs	r1, #0
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 f9bd 	bl	8001780 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2210      	movs	r2, #16
 8001412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40013800 	.word	0x40013800

08001428 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4b51      	ldr	r3, [pc, #324]	; (8001584 <ETH_SetMACConfig+0x15c>)
 800143e:	4013      	ands	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	7c1b      	ldrb	r3, [r3, #16]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <ETH_SetMACConfig+0x28>
 800144a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800144e:	e000      	b.n	8001452 <ETH_SetMACConfig+0x2a>
 8001450:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	7c5b      	ldrb	r3, [r3, #17]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <ETH_SetMACConfig+0x38>
 800145a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800145e:	e000      	b.n	8001462 <ETH_SetMACConfig+0x3a>
 8001460:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001462:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001468:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	7fdb      	ldrb	r3, [r3, #31]
 800146e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001470:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001476:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	7f92      	ldrb	r2, [r2, #30]
 800147c:	2a00      	cmp	r2, #0
 800147e:	d102      	bne.n	8001486 <ETH_SetMACConfig+0x5e>
 8001480:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001484:	e000      	b.n	8001488 <ETH_SetMACConfig+0x60>
 8001486:	2200      	movs	r2, #0
                        macconf->Speed |
 8001488:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	7f1b      	ldrb	r3, [r3, #28]
 800148e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001490:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001496:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	791b      	ldrb	r3, [r3, #4]
 800149c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800149e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014a6:	2a00      	cmp	r2, #0
 80014a8:	d102      	bne.n	80014b0 <ETH_SetMACConfig+0x88>
 80014aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ae:	e000      	b.n	80014b2 <ETH_SetMACConfig+0x8a>
 80014b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	7bdb      	ldrb	r3, [r3, #15]
 80014b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014ca:	4313      	orrs	r3, r2
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f7ff fe1e 	bl	8001124 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001506:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800150e:	2a00      	cmp	r2, #0
 8001510:	d101      	bne.n	8001516 <ETH_SetMACConfig+0xee>
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	e000      	b.n	8001518 <ETH_SetMACConfig+0xf0>
 8001516:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001518:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800151e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001526:	2a01      	cmp	r2, #1
 8001528:	d101      	bne.n	800152e <ETH_SetMACConfig+0x106>
 800152a:	2208      	movs	r2, #8
 800152c:	e000      	b.n	8001530 <ETH_SetMACConfig+0x108>
 800152e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001530:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001538:	2a01      	cmp	r2, #1
 800153a:	d101      	bne.n	8001540 <ETH_SetMACConfig+0x118>
 800153c:	2204      	movs	r2, #4
 800153e:	e000      	b.n	8001542 <ETH_SetMACConfig+0x11a>
 8001540:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001542:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800154a:	2a01      	cmp	r2, #1
 800154c:	d101      	bne.n	8001552 <ETH_SetMACConfig+0x12a>
 800154e:	2202      	movs	r2, #2
 8001550:	e000      	b.n	8001554 <ETH_SetMACConfig+0x12c>
 8001552:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001554:	4313      	orrs	r3, r2
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800156c:	2001      	movs	r0, #1
 800156e:	f7ff fdd9 	bl	8001124 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	619a      	str	r2, [r3, #24]
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	ff20810f 	.word	0xff20810f

08001588 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <ETH_SetDMAConfig+0x110>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	7b1b      	ldrb	r3, [r3, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <ETH_SetDMAConfig+0x2c>
 80015ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015b2:	e000      	b.n	80015b6 <ETH_SetDMAConfig+0x2e>
 80015b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	7b5b      	ldrb	r3, [r3, #13]
 80015ba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015bc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	7f52      	ldrb	r2, [r2, #29]
 80015c2:	2a00      	cmp	r2, #0
 80015c4:	d102      	bne.n	80015cc <ETH_SetDMAConfig+0x44>
 80015c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015ca:	e000      	b.n	80015ce <ETH_SetDMAConfig+0x46>
 80015cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	7b9b      	ldrb	r3, [r3, #14]
 80015d4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015d6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	7f1b      	ldrb	r3, [r3, #28]
 80015e2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80015e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	7f9b      	ldrb	r3, [r3, #30]
 80015ea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015ec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015fa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015fc:	4313      	orrs	r3, r2
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160c:	461a      	mov	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800161e:	2001      	movs	r0, #1
 8001620:	f7ff fd80 	bl	8001124 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162c:	461a      	mov	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	791b      	ldrb	r3, [r3, #4]
 8001636:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800163c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001642:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001648:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001650:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001652:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800165a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001660:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800166a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800166e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff fd51 	bl	8001124 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	f8de3f23 	.word	0xf8de3f23

0800169c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b0a6      	sub	sp, #152	; 0x98
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80016aa:	2301      	movs	r3, #1
 80016ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80016b0:	2300      	movs	r3, #0
 80016b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016d8:	2300      	movs	r3, #0
 80016da:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001702:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001704:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001708:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001710:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001714:	4619      	mov	r1, r3
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fe86 	bl	8001428 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800171c:	2301      	movs	r3, #1
 800171e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001720:	2301      	movs	r3, #1
 8001722:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001724:	2301      	movs	r3, #1
 8001726:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800172a:	2301      	movs	r3, #1
 800172c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001742:	2301      	movs	r3, #1
 8001744:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001748:	2301      	movs	r3, #1
 800174a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800174c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001750:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001752:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001756:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800175c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800175e:	2301      	movs	r3, #1
 8001760:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001764:	2300      	movs	r3, #0
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	4619      	mov	r1, r3
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ff08 	bl	8001588 <ETH_SetDMAConfig>
}
 8001778:	bf00      	nop
 800177a:	3798      	adds	r7, #152	; 0x98
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3305      	adds	r3, #5
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	3204      	adds	r2, #4
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	4313      	orrs	r3, r2
 800179c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <ETH_MACAddressConfig+0x68>)
 80017a2:	4413      	add	r3, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3303      	adds	r3, #3
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	061a      	lsls	r2, r3, #24
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3302      	adds	r3, #2
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3301      	adds	r3, #1
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	4313      	orrs	r3, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <ETH_MACAddressConfig+0x6c>)
 80017d2:	4413      	add	r3, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	6013      	str	r3, [r2, #0]
}
 80017da:	bf00      	nop
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40028040 	.word	0x40028040
 80017ec:	40028044 	.word	0x40028044

080017f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e03e      	b.n	800187c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68d9      	ldr	r1, [r3, #12]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2200      	movs	r2, #0
 800181a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	3206      	adds	r2, #6
 8001830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d80c      	bhi.n	8001860 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68d9      	ldr	r1, [r3, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	e004      	b.n	800186a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	461a      	mov	r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d9bd      	bls.n	80017fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001894:	611a      	str	r2, [r3, #16]
}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e046      	b.n	800193e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6919      	ldr	r1, [r3, #16]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2200      	movs	r2, #0
 80018cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2200      	movs	r2, #0
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80018f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001902:	68b9      	ldr	r1, [r7, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	3212      	adds	r2, #18
 800190a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d80c      	bhi.n	800192e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6919      	ldr	r1, [r3, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	440b      	add	r3, r1
 8001926:	461a      	mov	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	e004      	b.n	8001938 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	461a      	mov	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3301      	adds	r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d9b5      	bls.n	80018b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196e:	60da      	str	r2, [r3, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	e175      	b.n	8001c88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f040 8164 	bne.w	8001c82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d005      	beq.n	80019d2 <HAL_GPIO_Init+0x56>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d130      	bne.n	8001a34 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 0201 	and.w	r2, r3, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d017      	beq.n	8001a70 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d123      	bne.n	8001ac4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80be 	beq.w	8001c82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <HAL_GPIO_Init+0x324>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	4a65      	ldr	r2, [pc, #404]	; (8001ca0 <HAL_GPIO_Init+0x324>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b10:	6453      	str	r3, [r2, #68]	; 0x44
 8001b12:	4b63      	ldr	r3, [pc, #396]	; (8001ca0 <HAL_GPIO_Init+0x324>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b1e:	4a61      	ldr	r2, [pc, #388]	; (8001ca4 <HAL_GPIO_Init+0x328>)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	3302      	adds	r3, #2
 8001b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a58      	ldr	r2, [pc, #352]	; (8001ca8 <HAL_GPIO_Init+0x32c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d037      	beq.n	8001bba <HAL_GPIO_Init+0x23e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a57      	ldr	r2, [pc, #348]	; (8001cac <HAL_GPIO_Init+0x330>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d031      	beq.n	8001bb6 <HAL_GPIO_Init+0x23a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a56      	ldr	r2, [pc, #344]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d02b      	beq.n	8001bb2 <HAL_GPIO_Init+0x236>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a55      	ldr	r2, [pc, #340]	; (8001cb4 <HAL_GPIO_Init+0x338>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d025      	beq.n	8001bae <HAL_GPIO_Init+0x232>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a54      	ldr	r2, [pc, #336]	; (8001cb8 <HAL_GPIO_Init+0x33c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d01f      	beq.n	8001baa <HAL_GPIO_Init+0x22e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a53      	ldr	r2, [pc, #332]	; (8001cbc <HAL_GPIO_Init+0x340>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d019      	beq.n	8001ba6 <HAL_GPIO_Init+0x22a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a52      	ldr	r2, [pc, #328]	; (8001cc0 <HAL_GPIO_Init+0x344>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d013      	beq.n	8001ba2 <HAL_GPIO_Init+0x226>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a51      	ldr	r2, [pc, #324]	; (8001cc4 <HAL_GPIO_Init+0x348>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00d      	beq.n	8001b9e <HAL_GPIO_Init+0x222>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a50      	ldr	r2, [pc, #320]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d007      	beq.n	8001b9a <HAL_GPIO_Init+0x21e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4f      	ldr	r2, [pc, #316]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_GPIO_Init+0x21a>
 8001b92:	2309      	movs	r3, #9
 8001b94:	e012      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001b96:	230a      	movs	r3, #10
 8001b98:	e010      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001b9a:	2308      	movs	r3, #8
 8001b9c:	e00e      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	e00c      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	e00a      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001ba6:	2305      	movs	r3, #5
 8001ba8:	e008      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001baa:	2304      	movs	r3, #4
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e004      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f002 0203 	and.w	r2, r2, #3
 8001bc2:	0092      	lsls	r2, r2, #2
 8001bc4:	4093      	lsls	r3, r2
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bcc:	4935      	ldr	r1, [pc, #212]	; (8001ca4 <HAL_GPIO_Init+0x328>)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfe:	4a34      	ldr	r2, [pc, #208]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c04:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c28:	4a29      	ldr	r2, [pc, #164]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2e:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c52:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3301      	adds	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	f67f ae86 	bls.w	800199c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40013800 	.word	0x40013800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40020800 	.word	0x40020800
 8001cb4:	40020c00 	.word	0x40020c00
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40021400 	.word	0x40021400
 8001cc0:	40021800 	.word	0x40021800
 8001cc4:	40021c00 	.word	0x40021c00
 8001cc8:	40022000 	.word	0x40022000
 8001ccc:	40022400 	.word	0x40022400
 8001cd0:	40013c00 	.word	0x40013c00

08001cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cf0:	e003      	b.n	8001cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	041a      	lsls	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	619a      	str	r2, [r3, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d08:	b08f      	sub	sp, #60	; 0x3c
 8001d0a:	af0a      	add	r7, sp, #40	; 0x28
 8001d0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e116      	b.n	8001f46 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff f87a 	bl	8000e2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f002 fa4c 	bl	80041f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	687e      	ldr	r6, [r7, #4]
 8001d64:	466d      	mov	r5, sp
 8001d66:	f106 0410 	add.w	r4, r6, #16
 8001d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d7a:	1d33      	adds	r3, r6, #4
 8001d7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7e:	6838      	ldr	r0, [r7, #0]
 8001d80:	f002 f9e0 	bl	8004144 <USB_CoreInit>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0d7      	b.n	8001f46 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 fa3a 	bl	8004216 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	e04a      	b.n	8001e3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	333d      	adds	r3, #61	; 0x3d
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	333c      	adds	r3, #60	; 0x3c
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	b298      	uxth	r0, r3
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	3344      	adds	r3, #68	; 0x44
 8001de4:	4602      	mov	r2, r0
 8001de6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	3340      	adds	r3, #64	; 0x40
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	3348      	adds	r3, #72	; 0x48
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	334c      	adds	r3, #76	; 0x4c
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	3354      	adds	r3, #84	; 0x54
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3af      	bcc.n	8001da8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e044      	b.n	8001ed8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d3b5      	bcc.n	8001e4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	687e      	ldr	r6, [r7, #4]
 8001eea:	466d      	mov	r5, sp
 8001eec:	f106 0410 	add.w	r4, r6, #16
 8001ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f00:	1d33      	adds	r3, r6, #4
 8001f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f04:	6838      	ldr	r0, [r7, #0]
 8001f06:	f002 f9d3 	bl	80042b0 <USB_DevInit>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e014      	b.n	8001f46 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d102      	bne.n	8001f3a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f80b 	bl	8001f50 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 fb91 	bl	8004666 <USB_DevDisconnect>

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001f50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_PCDEx_ActivateLPM+0x44>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	10000003 	.word	0x10000003

08001f98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40007000 	.word	0x40007000

08001fb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	4b23      	ldr	r3, [pc, #140]	; (8002050 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a22      	ldr	r2, [pc, #136]	; (8002050 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fe6:	f7ff f891 	bl	800110c <HAL_GetTick>
 8001fea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fec:	e009      	b.n	8002002 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fee:	f7ff f88d 	bl	800110c <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ffc:	d901      	bls.n	8002002 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e022      	b.n	8002048 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200e:	d1ee      	bne.n	8001fee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800201c:	f7ff f876 	bl	800110c <HAL_GetTick>
 8002020:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002022:	e009      	b.n	8002038 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002024:	f7ff f872 	bl	800110c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002032:	d901      	bls.n	8002038 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e007      	b.n	8002048 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002044:	d1ee      	bne.n	8002024 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40023800 	.word	0x40023800
 8002054:	40007000 	.word	0x40007000

08002058 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e29b      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8087 	beq.w	800218a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800207c:	4b96      	ldr	r3, [pc, #600]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b04      	cmp	r3, #4
 8002086:	d00c      	beq.n	80020a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002088:	4b93      	ldr	r3, [pc, #588]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d112      	bne.n	80020ba <HAL_RCC_OscConfig+0x62>
 8002094:	4b90      	ldr	r3, [pc, #576]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a0:	d10b      	bne.n	80020ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a2:	4b8d      	ldr	r3, [pc, #564]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d06c      	beq.n	8002188 <HAL_RCC_OscConfig+0x130>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d168      	bne.n	8002188 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e275      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x7a>
 80020c4:	4b84      	ldr	r3, [pc, #528]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a83      	ldr	r2, [pc, #524]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	e02e      	b.n	8002130 <HAL_RCC_OscConfig+0xd8>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x9c>
 80020da:	4b7f      	ldr	r3, [pc, #508]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a7e      	ldr	r2, [pc, #504]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b7c      	ldr	r3, [pc, #496]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7b      	ldr	r2, [pc, #492]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01d      	b.n	8002130 <HAL_RCC_OscConfig+0xd8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0xc0>
 80020fe:	4b76      	ldr	r3, [pc, #472]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a75      	ldr	r2, [pc, #468]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b73      	ldr	r3, [pc, #460]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a72      	ldr	r2, [pc, #456]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0xd8>
 8002118:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a6e      	ldr	r2, [pc, #440]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b6c      	ldr	r3, [pc, #432]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6b      	ldr	r2, [pc, #428]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7fe ffe8 	bl	800110c <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002140:	f7fe ffe4 	bl	800110c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e229      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b61      	ldr	r3, [pc, #388]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0xe8>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe ffd4 	bl	800110c <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7fe ffd0 	bl	800110c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e215      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x110>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d069      	beq.n	800226a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002196:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a2:	4b4d      	ldr	r3, [pc, #308]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d11c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x190>
 80021ae:	4b4a      	ldr	r3, [pc, #296]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_RCC_OscConfig+0x17a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e1e9      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	493d      	ldr	r1, [pc, #244]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	e040      	b.n	800226a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d023      	beq.n	8002238 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a38      	ldr	r2, [pc, #224]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe ff86 	bl	800110c <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002204:	f7fe ff82 	bl	800110c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1c7      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4929      	ldr	r1, [pc, #164]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
 8002236:	e018      	b.n	800226a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a26      	ldr	r2, [pc, #152]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe ff62 	bl	800110c <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224c:	f7fe ff5e 	bl	800110c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1a3      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d038      	beq.n	80022e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d019      	beq.n	80022b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002282:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228a:	f7fe ff3f 	bl	800110c <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002292:	f7fe ff3b 	bl	800110c <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e180      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80022a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x23a>
 80022b0:	e01a      	b.n	80022e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80022b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b6:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022be:	f7fe ff25 	bl	800110c <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c6:	f7fe ff21 	bl	800110c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d903      	bls.n	80022dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e166      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
 80022d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	4b92      	ldr	r3, [pc, #584]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80022de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1ee      	bne.n	80022c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a4 	beq.w	800243e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f6:	4b8c      	ldr	r3, [pc, #560]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	4b89      	ldr	r3, [pc, #548]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a88      	ldr	r2, [pc, #544]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b86      	ldr	r3, [pc, #536]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231a:	2301      	movs	r3, #1
 800231c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231e:	4b83      	ldr	r3, [pc, #524]	; (800252c <HAL_RCC_OscConfig+0x4d4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d118      	bne.n	800235c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800232a:	4b80      	ldr	r3, [pc, #512]	; (800252c <HAL_RCC_OscConfig+0x4d4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a7f      	ldr	r2, [pc, #508]	; (800252c <HAL_RCC_OscConfig+0x4d4>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002336:	f7fe fee9 	bl	800110c <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233e:	f7fe fee5 	bl	800110c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b64      	cmp	r3, #100	; 0x64
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e12a      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002350:	4b76      	ldr	r3, [pc, #472]	; (800252c <HAL_RCC_OscConfig+0x4d4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x31a>
 8002364:	4b70      	ldr	r3, [pc, #448]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a6f      	ldr	r2, [pc, #444]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
 8002370:	e02d      	b.n	80023ce <HAL_RCC_OscConfig+0x376>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x33c>
 800237a:	4b6b      	ldr	r3, [pc, #428]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800237c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237e:	4a6a      	ldr	r2, [pc, #424]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	6713      	str	r3, [r2, #112]	; 0x70
 8002386:	4b68      	ldr	r3, [pc, #416]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238a:	4a67      	ldr	r2, [pc, #412]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800238c:	f023 0304 	bic.w	r3, r3, #4
 8002390:	6713      	str	r3, [r2, #112]	; 0x70
 8002392:	e01c      	b.n	80023ce <HAL_RCC_OscConfig+0x376>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d10c      	bne.n	80023b6 <HAL_RCC_OscConfig+0x35e>
 800239c:	4b62      	ldr	r3, [pc, #392]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	4a61      	ldr	r2, [pc, #388]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023a2:	f043 0304 	orr.w	r3, r3, #4
 80023a6:	6713      	str	r3, [r2, #112]	; 0x70
 80023a8:	4b5f      	ldr	r3, [pc, #380]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	4a5e      	ldr	r2, [pc, #376]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6713      	str	r3, [r2, #112]	; 0x70
 80023b4:	e00b      	b.n	80023ce <HAL_RCC_OscConfig+0x376>
 80023b6:	4b5c      	ldr	r3, [pc, #368]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	4a5b      	ldr	r2, [pc, #364]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	6713      	str	r3, [r2, #112]	; 0x70
 80023c2:	4b59      	ldr	r3, [pc, #356]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	4a58      	ldr	r2, [pc, #352]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023c8:	f023 0304 	bic.w	r3, r3, #4
 80023cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d015      	beq.n	8002402 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7fe fe99 	bl	800110c <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7fe fe95 	bl	800110c <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0d8      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f4:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ee      	beq.n	80023de <HAL_RCC_OscConfig+0x386>
 8002400:	e014      	b.n	800242c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002402:	f7fe fe83 	bl	800110c <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7fe fe7f 	bl	800110c <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f241 3288 	movw	r2, #5000	; 0x1388
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0c2      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002420:	4b41      	ldr	r3, [pc, #260]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1ee      	bne.n	800240a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d105      	bne.n	800243e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002432:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	4a3c      	ldr	r2, [pc, #240]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80ae 	beq.w	80025a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002448:	4b37      	ldr	r3, [pc, #220]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d06d      	beq.n	8002530 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d14b      	bne.n	80024f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245c:	4b32      	ldr	r3, [pc, #200]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a31      	ldr	r2, [pc, #196]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7fe fe50 	bl	800110c <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe fe4c 	bl	800110c <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e091      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002482:	4b29      	ldr	r3, [pc, #164]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	3b01      	subs	r3, #1
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	061b      	lsls	r3, r3, #24
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	071b      	lsls	r3, r3, #28
 80024ba:	491b      	ldr	r1, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a18      	ldr	r2, [pc, #96]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80024c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe fe1e 	bl	800110c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d4:	f7fe fe1a 	bl	800110c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e05f      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x47c>
 80024f2:	e057      	b.n	80025a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80024fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fe04 	bl	800110c <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe fe00 	bl	800110c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e045      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251a:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x4b0>
 8002526:	e03d      	b.n	80025a4 <HAL_RCC_OscConfig+0x54c>
 8002528:	40023800 	.word	0x40023800
 800252c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_RCC_OscConfig+0x558>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d030      	beq.n	80025a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d129      	bne.n	80025a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d122      	bne.n	80025a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002560:	4013      	ands	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002566:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002568:	4293      	cmp	r3, r2
 800256a:	d119      	bne.n	80025a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d10f      	bne.n	80025a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0d0      	b.n	800276e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025cc:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d910      	bls.n	80025fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b67      	ldr	r3, [pc, #412]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 020f 	bic.w	r2, r3, #15
 80025e2:	4965      	ldr	r1, [pc, #404]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b63      	ldr	r3, [pc, #396]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0b8      	b.n	800276e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002614:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a58      	ldr	r2, [pc, #352]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 800261a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800261e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800262c:	4b53      	ldr	r3, [pc, #332]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a52      	ldr	r2, [pc, #328]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002636:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	4b50      	ldr	r3, [pc, #320]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	494d      	ldr	r1, [pc, #308]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d040      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d115      	bne.n	8002696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e07f      	b.n	800276e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e073      	b.n	800276e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002686:	4b3d      	ldr	r3, [pc, #244]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e06b      	b.n	800276e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002696:	4b39      	ldr	r3, [pc, #228]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f023 0203 	bic.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4936      	ldr	r1, [pc, #216]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a8:	f7fe fd30 	bl	800110c <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b0:	f7fe fd2c 	bl	800110c <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e053      	b.n	800276e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 020c 	and.w	r2, r3, #12
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d1eb      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d210      	bcs.n	8002708 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 020f 	bic.w	r2, r3, #15
 80026ee:	4922      	ldr	r1, [pc, #136]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e032      	b.n	800276e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4916      	ldr	r1, [pc, #88]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	490e      	ldr	r1, [pc, #56]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002746:	f000 f821 	bl	800278c <HAL_RCC_GetSysClockFreq>
 800274a:	4602      	mov	r2, r0
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	490a      	ldr	r1, [pc, #40]	; (8002780 <HAL_RCC_ClockConfig+0x1cc>)
 8002758:	5ccb      	ldrb	r3, [r1, r3]
 800275a:	fa22 f303 	lsr.w	r3, r2, r3
 800275e:	4a09      	ldr	r2, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1d0>)
 8002760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_RCC_ClockConfig+0x1d4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fbda 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40023c00 	.word	0x40023c00
 800277c:	40023800 	.word	0x40023800
 8002780:	08007588 	.word	0x08007588
 8002784:	20000000 	.word	0x20000000
 8002788:	20000004 	.word	0x20000004

0800278c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800278c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002790:	b094      	sub	sp, #80	; 0x50
 8002792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	647b      	str	r3, [r7, #68]	; 0x44
 8002798:	2300      	movs	r3, #0
 800279a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800279c:	2300      	movs	r3, #0
 800279e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027a4:	4b79      	ldr	r3, [pc, #484]	; (800298c <HAL_RCC_GetSysClockFreq+0x200>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d00d      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x40>
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	f200 80e1 	bhi.w	8002978 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x34>
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d003      	beq.n	80027c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027be:	e0db      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027c0:	4b73      	ldr	r3, [pc, #460]	; (8002990 <HAL_RCC_GetSysClockFreq+0x204>)
 80027c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027c4:	e0db      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c6:	4b73      	ldr	r3, [pc, #460]	; (8002994 <HAL_RCC_GetSysClockFreq+0x208>)
 80027c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027ca:	e0d8      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027cc:	4b6f      	ldr	r3, [pc, #444]	; (800298c <HAL_RCC_GetSysClockFreq+0x200>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027d6:	4b6d      	ldr	r3, [pc, #436]	; (800298c <HAL_RCC_GetSysClockFreq+0x200>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d063      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e2:	4b6a      	ldr	r3, [pc, #424]	; (800298c <HAL_RCC_GetSysClockFreq+0x200>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	099b      	lsrs	r3, r3, #6
 80027e8:	2200      	movs	r2, #0
 80027ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80027ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
 80027f6:	2300      	movs	r3, #0
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
 80027fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027fe:	4622      	mov	r2, r4
 8002800:	462b      	mov	r3, r5
 8002802:	f04f 0000 	mov.w	r0, #0
 8002806:	f04f 0100 	mov.w	r1, #0
 800280a:	0159      	lsls	r1, r3, #5
 800280c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002810:	0150      	lsls	r0, r2, #5
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4621      	mov	r1, r4
 8002818:	1a51      	subs	r1, r2, r1
 800281a:	6139      	str	r1, [r7, #16]
 800281c:	4629      	mov	r1, r5
 800281e:	eb63 0301 	sbc.w	r3, r3, r1
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002830:	4659      	mov	r1, fp
 8002832:	018b      	lsls	r3, r1, #6
 8002834:	4651      	mov	r1, sl
 8002836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800283a:	4651      	mov	r1, sl
 800283c:	018a      	lsls	r2, r1, #6
 800283e:	4651      	mov	r1, sl
 8002840:	ebb2 0801 	subs.w	r8, r2, r1
 8002844:	4659      	mov	r1, fp
 8002846:	eb63 0901 	sbc.w	r9, r3, r1
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800285a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800285e:	4690      	mov	r8, r2
 8002860:	4699      	mov	r9, r3
 8002862:	4623      	mov	r3, r4
 8002864:	eb18 0303 	adds.w	r3, r8, r3
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	462b      	mov	r3, r5
 800286c:	eb49 0303 	adc.w	r3, r9, r3
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800287e:	4629      	mov	r1, r5
 8002880:	024b      	lsls	r3, r1, #9
 8002882:	4621      	mov	r1, r4
 8002884:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002888:	4621      	mov	r1, r4
 800288a:	024a      	lsls	r2, r1, #9
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002892:	2200      	movs	r2, #0
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
 8002896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800289c:	f7fd fcd0 	bl	8000240 <__aeabi_uldivmod>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4613      	mov	r3, r2
 80028a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028a8:	e058      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028aa:	4b38      	ldr	r3, [pc, #224]	; (800298c <HAL_RCC_GetSysClockFreq+0x200>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	099b      	lsrs	r3, r3, #6
 80028b0:	2200      	movs	r2, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	4611      	mov	r1, r2
 80028b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028ba:	623b      	str	r3, [r7, #32]
 80028bc:	2300      	movs	r3, #0
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
 80028c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028c4:	4642      	mov	r2, r8
 80028c6:	464b      	mov	r3, r9
 80028c8:	f04f 0000 	mov.w	r0, #0
 80028cc:	f04f 0100 	mov.w	r1, #0
 80028d0:	0159      	lsls	r1, r3, #5
 80028d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d6:	0150      	lsls	r0, r2, #5
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4641      	mov	r1, r8
 80028de:	ebb2 0a01 	subs.w	sl, r2, r1
 80028e2:	4649      	mov	r1, r9
 80028e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028fc:	ebb2 040a 	subs.w	r4, r2, sl
 8002900:	eb63 050b 	sbc.w	r5, r3, fp
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	00eb      	lsls	r3, r5, #3
 800290e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002912:	00e2      	lsls	r2, r4, #3
 8002914:	4614      	mov	r4, r2
 8002916:	461d      	mov	r5, r3
 8002918:	4643      	mov	r3, r8
 800291a:	18e3      	adds	r3, r4, r3
 800291c:	603b      	str	r3, [r7, #0]
 800291e:	464b      	mov	r3, r9
 8002920:	eb45 0303 	adc.w	r3, r5, r3
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002932:	4629      	mov	r1, r5
 8002934:	028b      	lsls	r3, r1, #10
 8002936:	4621      	mov	r1, r4
 8002938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800293c:	4621      	mov	r1, r4
 800293e:	028a      	lsls	r2, r1, #10
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002946:	2200      	movs	r2, #0
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	61fa      	str	r2, [r7, #28]
 800294c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002950:	f7fd fc76 	bl	8000240 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4613      	mov	r3, r2
 800295a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_GetSysClockFreq+0x200>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	3301      	adds	r3, #1
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800296c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800296e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002976:	e002      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_RCC_GetSysClockFreq+0x204>)
 800297a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800297c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002980:	4618      	mov	r0, r3
 8002982:	3750      	adds	r7, #80	; 0x50
 8002984:	46bd      	mov	sp, r7
 8002986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800
 8002990:	00f42400 	.word	0x00f42400
 8002994:	007a1200 	.word	0x007a1200

08002998 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_RCC_GetHCLKFreq+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000000 	.word	0x20000000

080029b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029b4:	f7ff fff0 	bl	8002998 <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	0a9b      	lsrs	r3, r3, #10
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4903      	ldr	r1, [pc, #12]	; (80029d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	08007598 	.word	0x08007598

080029d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029dc:	f7ff ffdc 	bl	8002998 <HAL_RCC_GetHCLKFreq>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	0b5b      	lsrs	r3, r3, #13
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	4903      	ldr	r1, [pc, #12]	; (80029fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ee:	5ccb      	ldrb	r3, [r1, r3]
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40023800 	.word	0x40023800
 80029fc:	08007598 	.word	0x08007598

08002a00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	220f      	movs	r2, #15
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_RCC_GetClockConfig+0x5c>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0203 	and.w	r2, r3, #3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_RCC_GetClockConfig+0x5c>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_RCC_GetClockConfig+0x5c>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_GetClockConfig+0x5c>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	08db      	lsrs	r3, r3, #3
 8002a3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <HAL_RCC_GetClockConfig+0x60>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 020f 	and.w	r2, r3, #15
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	601a      	str	r2, [r3, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40023c00 	.word	0x40023c00

08002a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d012      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a8c:	4b69      	ldr	r3, [pc, #420]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a68      	ldr	r2, [pc, #416]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a96:	6093      	str	r3, [r2, #8]
 8002a98:	4b66      	ldr	r3, [pc, #408]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	4964      	ldr	r1, [pc, #400]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d017      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002abe:	4b5d      	ldr	r3, [pc, #372]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	4959      	ldr	r1, [pc, #356]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d017      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002afa:	4b4e      	ldr	r3, [pc, #312]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	494a      	ldr	r1, [pc, #296]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b18:	d101      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 808b 	beq.w	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b48:	4b3a      	ldr	r3, [pc, #232]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	4a39      	ldr	r2, [pc, #228]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b52:	6413      	str	r3, [r2, #64]	; 0x40
 8002b54:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b60:	4b35      	ldr	r3, [pc, #212]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a34      	ldr	r2, [pc, #208]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6c:	f7fe face 	bl	800110c <HAL_GetTick>
 8002b70:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b74:	f7fe faca 	bl	800110c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e38f      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b86:	4b2c      	ldr	r3, [pc, #176]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b92:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d035      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d02e      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bb0:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bba:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a1a      	ldr	r2, [pc, #104]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bd2:	4a18      	ldr	r2, [pc, #96]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bd8:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d114      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe fa92 	bl	800110c <HAL_GetTick>
 8002be8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bea:	e00a      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f7fe fa8e 	bl	800110c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e351      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0ee      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c1a:	d111      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c2a:	400b      	ands	r3, r1
 8002c2c:	4901      	ldr	r1, [pc, #4]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40007000 	.word	0x40007000
 8002c3c:	0ffffcff 	.word	0x0ffffcff
 8002c40:	4bac      	ldr	r3, [pc, #688]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4aab      	ldr	r2, [pc, #684]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c46:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c4a:	6093      	str	r3, [r2, #8]
 8002c4c:	4ba9      	ldr	r3, [pc, #676]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c58:	49a6      	ldr	r1, [pc, #664]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d010      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c6a:	4ba2      	ldr	r3, [pc, #648]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c70:	4aa0      	ldr	r2, [pc, #640]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c7a:	4b9e      	ldr	r3, [pc, #632]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	499b      	ldr	r1, [pc, #620]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c98:	4b96      	ldr	r3, [pc, #600]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca6:	4993      	ldr	r1, [pc, #588]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cba:	4b8e      	ldr	r3, [pc, #568]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc8:	498a      	ldr	r1, [pc, #552]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cdc:	4b85      	ldr	r3, [pc, #532]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cea:	4982      	ldr	r1, [pc, #520]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cfe:	4b7d      	ldr	r3, [pc, #500]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4979      	ldr	r1, [pc, #484]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d20:	4b74      	ldr	r3, [pc, #464]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f023 0203 	bic.w	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4971      	ldr	r1, [pc, #452]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d42:	4b6c      	ldr	r3, [pc, #432]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d48:	f023 020c 	bic.w	r2, r3, #12
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d50:	4968      	ldr	r1, [pc, #416]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d64:	4b63      	ldr	r3, [pc, #396]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d72:	4960      	ldr	r1, [pc, #384]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d86:	4b5b      	ldr	r3, [pc, #364]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d94:	4957      	ldr	r1, [pc, #348]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002da8:	4b52      	ldr	r3, [pc, #328]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	494f      	ldr	r1, [pc, #316]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dca:	4b4a      	ldr	r3, [pc, #296]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd8:	4946      	ldr	r1, [pc, #280]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002dec:	4b41      	ldr	r3, [pc, #260]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfa:	493e      	ldr	r1, [pc, #248]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e0e:	4b39      	ldr	r3, [pc, #228]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1c:	4935      	ldr	r1, [pc, #212]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e30:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e3e:	492d      	ldr	r1, [pc, #180]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d011      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e52:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e60:	4924      	ldr	r1, [pc, #144]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e70:	d101      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e92:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea0:	4914      	ldr	r1, [pc, #80]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00b      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec4:	490b      	ldr	r1, [pc, #44]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00f      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ee8:	4902      	ldr	r1, [pc, #8]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ef0:	e002      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00b      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f04:	4b8a      	ldr	r3, [pc, #552]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	4986      	ldr	r1, [pc, #536]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00b      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f28:	4b81      	ldr	r3, [pc, #516]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f38:	497d      	ldr	r1, [pc, #500]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d006      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 80d6 	beq.w	8003100 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f54:	4b76      	ldr	r3, [pc, #472]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a75      	ldr	r2, [pc, #468]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f60:	f7fe f8d4 	bl	800110c <HAL_GetTick>
 8002f64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f68:	f7fe f8d0 	bl	800110c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e195      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f7a:	4b6d      	ldr	r3, [pc, #436]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d021      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d11d      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f9a:	4b65      	ldr	r3, [pc, #404]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa0:	0c1b      	lsrs	r3, r3, #16
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fa8:	4b61      	ldr	r3, [pc, #388]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fae:	0e1b      	lsrs	r3, r3, #24
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	019a      	lsls	r2, r3, #6
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	071b      	lsls	r3, r3, #28
 8002fce:	4958      	ldr	r1, [pc, #352]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d004      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d02e      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003000:	d129      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003002:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003010:	4b47      	ldr	r3, [pc, #284]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003016:	0f1b      	lsrs	r3, r3, #28
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	019a      	lsls	r2, r3, #6
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	041b      	lsls	r3, r3, #16
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	061b      	lsls	r3, r3, #24
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	071b      	lsls	r3, r3, #28
 8003036:	493e      	ldr	r1, [pc, #248]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800303e:	4b3c      	ldr	r3, [pc, #240]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003044:	f023 021f 	bic.w	r2, r3, #31
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	3b01      	subs	r3, #1
 800304e:	4938      	ldr	r1, [pc, #224]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d01d      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003062:	4b33      	ldr	r3, [pc, #204]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003068:	0e1b      	lsrs	r3, r3, #24
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003070:	4b2f      	ldr	r3, [pc, #188]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003076:	0f1b      	lsrs	r3, r3, #28
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	019a      	lsls	r2, r3, #6
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	431a      	orrs	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	061b      	lsls	r3, r3, #24
 8003090:	431a      	orrs	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	071b      	lsls	r3, r3, #28
 8003096:	4926      	ldr	r1, [pc, #152]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d011      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	019a      	lsls	r2, r3, #6
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	071b      	lsls	r3, r3, #28
 80030c6:	491a      	ldr	r1, [pc, #104]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030ce:	4b18      	ldr	r3, [pc, #96]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a17      	ldr	r2, [pc, #92]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030da:	f7fe f817 	bl	800110c <HAL_GetTick>
 80030de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030e2:	f7fe f813 	bl	800110c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b64      	cmp	r3, #100	; 0x64
 80030ee:	d901      	bls.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0d8      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030f4:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b01      	cmp	r3, #1
 8003104:	f040 80ce 	bne.w	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a08      	ldr	r2, [pc, #32]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800310e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003114:	f7fd fffa 	bl	800110c <HAL_GetTick>
 8003118:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800311a:	e00b      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800311c:	f7fd fff6 	bl	800110c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	; 0x64
 8003128:	d904      	bls.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e0bb      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003134:	4b5e      	ldr	r3, [pc, #376]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800313c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003140:	d0ec      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800315e:	2b00      	cmp	r3, #0
 8003160:	d02e      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d12a      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800316a:	4b51      	ldr	r3, [pc, #324]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003178:	4b4d      	ldr	r3, [pc, #308]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	0f1b      	lsrs	r3, r3, #28
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	019a      	lsls	r2, r3, #6
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	041b      	lsls	r3, r3, #16
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	061b      	lsls	r3, r3, #24
 8003198:	431a      	orrs	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	071b      	lsls	r3, r3, #28
 800319e:	4944      	ldr	r1, [pc, #272]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031a6:	4b42      	ldr	r3, [pc, #264]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	3b01      	subs	r3, #1
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	493d      	ldr	r1, [pc, #244]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d022      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031d4:	d11d      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031d6:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031dc:	0e1b      	lsrs	r3, r3, #24
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031e4:	4b32      	ldr	r3, [pc, #200]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	0f1b      	lsrs	r3, r3, #28
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	019a      	lsls	r2, r3, #6
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	041b      	lsls	r3, r3, #16
 80031fe:	431a      	orrs	r2, r3
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	061b      	lsls	r3, r3, #24
 8003204:	431a      	orrs	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	071b      	lsls	r3, r3, #28
 800320a:	4929      	ldr	r1, [pc, #164]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d028      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800321e:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	0e1b      	lsrs	r3, r3, #24
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800322c:	4b20      	ldr	r3, [pc, #128]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003232:	0c1b      	lsrs	r3, r3, #16
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	019a      	lsls	r2, r3, #6
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	041b      	lsls	r3, r3, #16
 8003244:	431a      	orrs	r2, r3
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	061b      	lsls	r3, r3, #24
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	071b      	lsls	r3, r3, #28
 8003252:	4917      	ldr	r1, [pc, #92]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800325c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003260:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	4911      	ldr	r1, [pc, #68]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003270:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0e      	ldr	r2, [pc, #56]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800327c:	f7fd ff46 	bl	800110c <HAL_GetTick>
 8003280:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003284:	f7fd ff42 	bl	800110c <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	; 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e007      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800329e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032a2:	d1ef      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3720      	adds	r7, #32
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800

080032b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e049      	b.n	800335a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f841 	bl	8003362 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3304      	adds	r3, #4
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f000 fa00 	bl	80036f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d001      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e054      	b.n	800343a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a26      	ldr	r2, [pc, #152]	; (8003448 <HAL_TIM_Base_Start_IT+0xd0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d022      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x80>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ba:	d01d      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x80>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a22      	ldr	r2, [pc, #136]	; (800344c <HAL_TIM_Base_Start_IT+0xd4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d018      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x80>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a21      	ldr	r2, [pc, #132]	; (8003450 <HAL_TIM_Base_Start_IT+0xd8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x80>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <HAL_TIM_Base_Start_IT+0xdc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00e      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x80>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <HAL_TIM_Base_Start_IT+0xe0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d009      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x80>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1c      	ldr	r2, [pc, #112]	; (800345c <HAL_TIM_Base_Start_IT+0xe4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x80>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <HAL_TIM_Base_Start_IT+0xe8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d115      	bne.n	8003424 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_TIM_Base_Start_IT+0xec>)
 8003400:	4013      	ands	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b06      	cmp	r3, #6
 8003408:	d015      	beq.n	8003436 <HAL_TIM_Base_Start_IT+0xbe>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003410:	d011      	beq.n	8003436 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003422:	e008      	b.n	8003436 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e000      	b.n	8003438 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003436:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800
 8003454:	40000c00 	.word	0x40000c00
 8003458:	40010400 	.word	0x40010400
 800345c:	40014000 	.word	0x40014000
 8003460:	40001800 	.word	0x40001800
 8003464:	00010007 	.word	0x00010007

08003468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b02      	cmp	r3, #2
 800347c:	d122      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b02      	cmp	r3, #2
 800348a:	d11b      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0202 	mvn.w	r2, #2
 8003494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f905 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f8f7 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f908 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d122      	bne.n	8003518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0204 	mvn.w	r2, #4
 80034e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f8db 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8cd 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f8de 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b08      	cmp	r3, #8
 8003524:	d122      	bne.n	800356c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b08      	cmp	r3, #8
 8003532:	d11b      	bne.n	800356c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0208 	mvn.w	r2, #8
 800353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2204      	movs	r2, #4
 8003542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8b1 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8a3 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f8b4 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b10      	cmp	r3, #16
 8003578:	d122      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b10      	cmp	r3, #16
 8003586:	d11b      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0210 	mvn.w	r2, #16
 8003590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2208      	movs	r2, #8
 8003596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f887 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 80035ac:	e005      	b.n	80035ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f879 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f88a 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d10e      	bne.n	80035ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d107      	bne.n	80035ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0201 	mvn.w	r2, #1
 80035e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd f9fa 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f6:	2b80      	cmp	r3, #128	; 0x80
 80035f8:	d10e      	bne.n	8003618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	d107      	bne.n	8003618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f91a 	bl	800384c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003626:	d10e      	bne.n	8003646 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b80      	cmp	r3, #128	; 0x80
 8003634:	d107      	bne.n	8003646 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800363e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f90d 	bl	8003860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d10e      	bne.n	8003672 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d107      	bne.n	8003672 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800366a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f838 	bl	80036e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b20      	cmp	r3, #32
 800367e:	d10e      	bne.n	800369e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b20      	cmp	r3, #32
 800368c:	d107      	bne.n	800369e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f06f 0220 	mvn.w	r2, #32
 8003696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f8cd 	bl	8003838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a40      	ldr	r2, [pc, #256]	; (800380c <TIM_Base_SetConfig+0x114>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003716:	d00f      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3d      	ldr	r2, [pc, #244]	; (8003810 <TIM_Base_SetConfig+0x118>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00b      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3c      	ldr	r2, [pc, #240]	; (8003814 <TIM_Base_SetConfig+0x11c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d007      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3b      	ldr	r2, [pc, #236]	; (8003818 <TIM_Base_SetConfig+0x120>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a3a      	ldr	r2, [pc, #232]	; (800381c <TIM_Base_SetConfig+0x124>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d108      	bne.n	800374a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2f      	ldr	r2, [pc, #188]	; (800380c <TIM_Base_SetConfig+0x114>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d02b      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d027      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2c      	ldr	r2, [pc, #176]	; (8003810 <TIM_Base_SetConfig+0x118>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d023      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2b      	ldr	r2, [pc, #172]	; (8003814 <TIM_Base_SetConfig+0x11c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01f      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <TIM_Base_SetConfig+0x120>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01b      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a29      	ldr	r2, [pc, #164]	; (800381c <TIM_Base_SetConfig+0x124>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d017      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a28      	ldr	r2, [pc, #160]	; (8003820 <TIM_Base_SetConfig+0x128>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a27      	ldr	r2, [pc, #156]	; (8003824 <TIM_Base_SetConfig+0x12c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00f      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a26      	ldr	r2, [pc, #152]	; (8003828 <TIM_Base_SetConfig+0x130>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00b      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a25      	ldr	r2, [pc, #148]	; (800382c <TIM_Base_SetConfig+0x134>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d007      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a24      	ldr	r2, [pc, #144]	; (8003830 <TIM_Base_SetConfig+0x138>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d003      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a23      	ldr	r2, [pc, #140]	; (8003834 <TIM_Base_SetConfig+0x13c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d108      	bne.n	80037bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a0a      	ldr	r2, [pc, #40]	; (800380c <TIM_Base_SetConfig+0x114>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d003      	beq.n	80037f0 <TIM_Base_SetConfig+0xf8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a0c      	ldr	r2, [pc, #48]	; (800381c <TIM_Base_SetConfig+0x124>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d103      	bne.n	80037f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	615a      	str	r2, [r3, #20]
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40010000 	.word	0x40010000
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00
 800381c:	40010400 	.word	0x40010400
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400
 8003828:	40014800 	.word	0x40014800
 800382c:	40001800 	.word	0x40001800
 8003830:	40001c00 	.word	0x40001c00
 8003834:	40002000 	.word	0x40002000

08003838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e040      	b.n	8003908 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd f99a 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2224      	movs	r2, #36	; 0x24
 80038a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f82c 	bl	8003910 <UART_SetConfig>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e022      	b.n	8003908 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa84 	bl	8003dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fb0b 	bl	8003f1c <UART_CheckIdleState>
 8003906:	4603      	mov	r3, r0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4ba6      	ldr	r3, [pc, #664]	; (8003bd4 <UART_SetConfig+0x2c4>)
 800393c:	4013      	ands	r3, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	6979      	ldr	r1, [r7, #20]
 8003944:	430b      	orrs	r3, r1
 8003946:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	430a      	orrs	r2, r1
 8003980:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a94      	ldr	r2, [pc, #592]	; (8003bd8 <UART_SetConfig+0x2c8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d120      	bne.n	80039ce <UART_SetConfig+0xbe>
 800398c:	4b93      	ldr	r3, [pc, #588]	; (8003bdc <UART_SetConfig+0x2cc>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b03      	cmp	r3, #3
 8003998:	d816      	bhi.n	80039c8 <UART_SetConfig+0xb8>
 800399a:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <UART_SetConfig+0x90>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039b1 	.word	0x080039b1
 80039a4:	080039bd 	.word	0x080039bd
 80039a8:	080039b7 	.word	0x080039b7
 80039ac:	080039c3 	.word	0x080039c3
 80039b0:	2301      	movs	r3, #1
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e150      	b.n	8003c58 <UART_SetConfig+0x348>
 80039b6:	2302      	movs	r3, #2
 80039b8:	77fb      	strb	r3, [r7, #31]
 80039ba:	e14d      	b.n	8003c58 <UART_SetConfig+0x348>
 80039bc:	2304      	movs	r3, #4
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e14a      	b.n	8003c58 <UART_SetConfig+0x348>
 80039c2:	2308      	movs	r3, #8
 80039c4:	77fb      	strb	r3, [r7, #31]
 80039c6:	e147      	b.n	8003c58 <UART_SetConfig+0x348>
 80039c8:	2310      	movs	r3, #16
 80039ca:	77fb      	strb	r3, [r7, #31]
 80039cc:	e144      	b.n	8003c58 <UART_SetConfig+0x348>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a83      	ldr	r2, [pc, #524]	; (8003be0 <UART_SetConfig+0x2d0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d132      	bne.n	8003a3e <UART_SetConfig+0x12e>
 80039d8:	4b80      	ldr	r3, [pc, #512]	; (8003bdc <UART_SetConfig+0x2cc>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b0c      	cmp	r3, #12
 80039e4:	d828      	bhi.n	8003a38 <UART_SetConfig+0x128>
 80039e6:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <UART_SetConfig+0xdc>)
 80039e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ec:	08003a21 	.word	0x08003a21
 80039f0:	08003a39 	.word	0x08003a39
 80039f4:	08003a39 	.word	0x08003a39
 80039f8:	08003a39 	.word	0x08003a39
 80039fc:	08003a2d 	.word	0x08003a2d
 8003a00:	08003a39 	.word	0x08003a39
 8003a04:	08003a39 	.word	0x08003a39
 8003a08:	08003a39 	.word	0x08003a39
 8003a0c:	08003a27 	.word	0x08003a27
 8003a10:	08003a39 	.word	0x08003a39
 8003a14:	08003a39 	.word	0x08003a39
 8003a18:	08003a39 	.word	0x08003a39
 8003a1c:	08003a33 	.word	0x08003a33
 8003a20:	2300      	movs	r3, #0
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e118      	b.n	8003c58 <UART_SetConfig+0x348>
 8003a26:	2302      	movs	r3, #2
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e115      	b.n	8003c58 <UART_SetConfig+0x348>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e112      	b.n	8003c58 <UART_SetConfig+0x348>
 8003a32:	2308      	movs	r3, #8
 8003a34:	77fb      	strb	r3, [r7, #31]
 8003a36:	e10f      	b.n	8003c58 <UART_SetConfig+0x348>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e10c      	b.n	8003c58 <UART_SetConfig+0x348>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a68      	ldr	r2, [pc, #416]	; (8003be4 <UART_SetConfig+0x2d4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d120      	bne.n	8003a8a <UART_SetConfig+0x17a>
 8003a48:	4b64      	ldr	r3, [pc, #400]	; (8003bdc <UART_SetConfig+0x2cc>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a52:	2b30      	cmp	r3, #48	; 0x30
 8003a54:	d013      	beq.n	8003a7e <UART_SetConfig+0x16e>
 8003a56:	2b30      	cmp	r3, #48	; 0x30
 8003a58:	d814      	bhi.n	8003a84 <UART_SetConfig+0x174>
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d009      	beq.n	8003a72 <UART_SetConfig+0x162>
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d810      	bhi.n	8003a84 <UART_SetConfig+0x174>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <UART_SetConfig+0x15c>
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d006      	beq.n	8003a78 <UART_SetConfig+0x168>
 8003a6a:	e00b      	b.n	8003a84 <UART_SetConfig+0x174>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e0f2      	b.n	8003c58 <UART_SetConfig+0x348>
 8003a72:	2302      	movs	r3, #2
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e0ef      	b.n	8003c58 <UART_SetConfig+0x348>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e0ec      	b.n	8003c58 <UART_SetConfig+0x348>
 8003a7e:	2308      	movs	r3, #8
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e0e9      	b.n	8003c58 <UART_SetConfig+0x348>
 8003a84:	2310      	movs	r3, #16
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e0e6      	b.n	8003c58 <UART_SetConfig+0x348>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a56      	ldr	r2, [pc, #344]	; (8003be8 <UART_SetConfig+0x2d8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d120      	bne.n	8003ad6 <UART_SetConfig+0x1c6>
 8003a94:	4b51      	ldr	r3, [pc, #324]	; (8003bdc <UART_SetConfig+0x2cc>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003aa0:	d013      	beq.n	8003aca <UART_SetConfig+0x1ba>
 8003aa2:	2bc0      	cmp	r3, #192	; 0xc0
 8003aa4:	d814      	bhi.n	8003ad0 <UART_SetConfig+0x1c0>
 8003aa6:	2b80      	cmp	r3, #128	; 0x80
 8003aa8:	d009      	beq.n	8003abe <UART_SetConfig+0x1ae>
 8003aaa:	2b80      	cmp	r3, #128	; 0x80
 8003aac:	d810      	bhi.n	8003ad0 <UART_SetConfig+0x1c0>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <UART_SetConfig+0x1a8>
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d006      	beq.n	8003ac4 <UART_SetConfig+0x1b4>
 8003ab6:	e00b      	b.n	8003ad0 <UART_SetConfig+0x1c0>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e0cc      	b.n	8003c58 <UART_SetConfig+0x348>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	77fb      	strb	r3, [r7, #31]
 8003ac2:	e0c9      	b.n	8003c58 <UART_SetConfig+0x348>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e0c6      	b.n	8003c58 <UART_SetConfig+0x348>
 8003aca:	2308      	movs	r3, #8
 8003acc:	77fb      	strb	r3, [r7, #31]
 8003ace:	e0c3      	b.n	8003c58 <UART_SetConfig+0x348>
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e0c0      	b.n	8003c58 <UART_SetConfig+0x348>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a44      	ldr	r2, [pc, #272]	; (8003bec <UART_SetConfig+0x2dc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d125      	bne.n	8003b2c <UART_SetConfig+0x21c>
 8003ae0:	4b3e      	ldr	r3, [pc, #248]	; (8003bdc <UART_SetConfig+0x2cc>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aee:	d017      	beq.n	8003b20 <UART_SetConfig+0x210>
 8003af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af4:	d817      	bhi.n	8003b26 <UART_SetConfig+0x216>
 8003af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afa:	d00b      	beq.n	8003b14 <UART_SetConfig+0x204>
 8003afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b00:	d811      	bhi.n	8003b26 <UART_SetConfig+0x216>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <UART_SetConfig+0x1fe>
 8003b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0a:	d006      	beq.n	8003b1a <UART_SetConfig+0x20a>
 8003b0c:	e00b      	b.n	8003b26 <UART_SetConfig+0x216>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	e0a1      	b.n	8003c58 <UART_SetConfig+0x348>
 8003b14:	2302      	movs	r3, #2
 8003b16:	77fb      	strb	r3, [r7, #31]
 8003b18:	e09e      	b.n	8003c58 <UART_SetConfig+0x348>
 8003b1a:	2304      	movs	r3, #4
 8003b1c:	77fb      	strb	r3, [r7, #31]
 8003b1e:	e09b      	b.n	8003c58 <UART_SetConfig+0x348>
 8003b20:	2308      	movs	r3, #8
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e098      	b.n	8003c58 <UART_SetConfig+0x348>
 8003b26:	2310      	movs	r3, #16
 8003b28:	77fb      	strb	r3, [r7, #31]
 8003b2a:	e095      	b.n	8003c58 <UART_SetConfig+0x348>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2f      	ldr	r2, [pc, #188]	; (8003bf0 <UART_SetConfig+0x2e0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d125      	bne.n	8003b82 <UART_SetConfig+0x272>
 8003b36:	4b29      	ldr	r3, [pc, #164]	; (8003bdc <UART_SetConfig+0x2cc>)
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b44:	d017      	beq.n	8003b76 <UART_SetConfig+0x266>
 8003b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b4a:	d817      	bhi.n	8003b7c <UART_SetConfig+0x26c>
 8003b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b50:	d00b      	beq.n	8003b6a <UART_SetConfig+0x25a>
 8003b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b56:	d811      	bhi.n	8003b7c <UART_SetConfig+0x26c>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <UART_SetConfig+0x254>
 8003b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b60:	d006      	beq.n	8003b70 <UART_SetConfig+0x260>
 8003b62:	e00b      	b.n	8003b7c <UART_SetConfig+0x26c>
 8003b64:	2301      	movs	r3, #1
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e076      	b.n	8003c58 <UART_SetConfig+0x348>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	77fb      	strb	r3, [r7, #31]
 8003b6e:	e073      	b.n	8003c58 <UART_SetConfig+0x348>
 8003b70:	2304      	movs	r3, #4
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e070      	b.n	8003c58 <UART_SetConfig+0x348>
 8003b76:	2308      	movs	r3, #8
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	e06d      	b.n	8003c58 <UART_SetConfig+0x348>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	77fb      	strb	r3, [r7, #31]
 8003b80:	e06a      	b.n	8003c58 <UART_SetConfig+0x348>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1b      	ldr	r2, [pc, #108]	; (8003bf4 <UART_SetConfig+0x2e4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d138      	bne.n	8003bfe <UART_SetConfig+0x2ee>
 8003b8c:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <UART_SetConfig+0x2cc>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003b96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b9a:	d017      	beq.n	8003bcc <UART_SetConfig+0x2bc>
 8003b9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ba0:	d82a      	bhi.n	8003bf8 <UART_SetConfig+0x2e8>
 8003ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba6:	d00b      	beq.n	8003bc0 <UART_SetConfig+0x2b0>
 8003ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bac:	d824      	bhi.n	8003bf8 <UART_SetConfig+0x2e8>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <UART_SetConfig+0x2aa>
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb6:	d006      	beq.n	8003bc6 <UART_SetConfig+0x2b6>
 8003bb8:	e01e      	b.n	8003bf8 <UART_SetConfig+0x2e8>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	77fb      	strb	r3, [r7, #31]
 8003bbe:	e04b      	b.n	8003c58 <UART_SetConfig+0x348>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	77fb      	strb	r3, [r7, #31]
 8003bc4:	e048      	b.n	8003c58 <UART_SetConfig+0x348>
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	77fb      	strb	r3, [r7, #31]
 8003bca:	e045      	b.n	8003c58 <UART_SetConfig+0x348>
 8003bcc:	2308      	movs	r3, #8
 8003bce:	77fb      	strb	r3, [r7, #31]
 8003bd0:	e042      	b.n	8003c58 <UART_SetConfig+0x348>
 8003bd2:	bf00      	nop
 8003bd4:	efff69f3 	.word	0xefff69f3
 8003bd8:	40011000 	.word	0x40011000
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40004400 	.word	0x40004400
 8003be4:	40004800 	.word	0x40004800
 8003be8:	40004c00 	.word	0x40004c00
 8003bec:	40005000 	.word	0x40005000
 8003bf0:	40011400 	.word	0x40011400
 8003bf4:	40007800 	.word	0x40007800
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e02c      	b.n	8003c58 <UART_SetConfig+0x348>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a72      	ldr	r2, [pc, #456]	; (8003dcc <UART_SetConfig+0x4bc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d125      	bne.n	8003c54 <UART_SetConfig+0x344>
 8003c08:	4b71      	ldr	r3, [pc, #452]	; (8003dd0 <UART_SetConfig+0x4c0>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c16:	d017      	beq.n	8003c48 <UART_SetConfig+0x338>
 8003c18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c1c:	d817      	bhi.n	8003c4e <UART_SetConfig+0x33e>
 8003c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c22:	d00b      	beq.n	8003c3c <UART_SetConfig+0x32c>
 8003c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c28:	d811      	bhi.n	8003c4e <UART_SetConfig+0x33e>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <UART_SetConfig+0x326>
 8003c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c32:	d006      	beq.n	8003c42 <UART_SetConfig+0x332>
 8003c34:	e00b      	b.n	8003c4e <UART_SetConfig+0x33e>
 8003c36:	2300      	movs	r3, #0
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e00d      	b.n	8003c58 <UART_SetConfig+0x348>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e00a      	b.n	8003c58 <UART_SetConfig+0x348>
 8003c42:	2304      	movs	r3, #4
 8003c44:	77fb      	strb	r3, [r7, #31]
 8003c46:	e007      	b.n	8003c58 <UART_SetConfig+0x348>
 8003c48:	2308      	movs	r3, #8
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e004      	b.n	8003c58 <UART_SetConfig+0x348>
 8003c4e:	2310      	movs	r3, #16
 8003c50:	77fb      	strb	r3, [r7, #31]
 8003c52:	e001      	b.n	8003c58 <UART_SetConfig+0x348>
 8003c54:	2310      	movs	r3, #16
 8003c56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c60:	d15b      	bne.n	8003d1a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003c62:	7ffb      	ldrb	r3, [r7, #31]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d828      	bhi.n	8003cba <UART_SetConfig+0x3aa>
 8003c68:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <UART_SetConfig+0x360>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003c95 	.word	0x08003c95
 8003c74:	08003c9d 	.word	0x08003c9d
 8003c78:	08003ca5 	.word	0x08003ca5
 8003c7c:	08003cbb 	.word	0x08003cbb
 8003c80:	08003cab 	.word	0x08003cab
 8003c84:	08003cbb 	.word	0x08003cbb
 8003c88:	08003cbb 	.word	0x08003cbb
 8003c8c:	08003cbb 	.word	0x08003cbb
 8003c90:	08003cb3 	.word	0x08003cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c94:	f7fe fe8c 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 8003c98:	61b8      	str	r0, [r7, #24]
        break;
 8003c9a:	e013      	b.n	8003cc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c9c:	f7fe fe9c 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
 8003ca0:	61b8      	str	r0, [r7, #24]
        break;
 8003ca2:	e00f      	b.n	8003cc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ca4:	4b4b      	ldr	r3, [pc, #300]	; (8003dd4 <UART_SetConfig+0x4c4>)
 8003ca6:	61bb      	str	r3, [r7, #24]
        break;
 8003ca8:	e00c      	b.n	8003cc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003caa:	f7fe fd6f 	bl	800278c <HAL_RCC_GetSysClockFreq>
 8003cae:	61b8      	str	r0, [r7, #24]
        break;
 8003cb0:	e008      	b.n	8003cc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cb6:	61bb      	str	r3, [r7, #24]
        break;
 8003cb8:	e004      	b.n	8003cc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	77bb      	strb	r3, [r7, #30]
        break;
 8003cc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d074      	beq.n	8003db4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	005a      	lsls	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	441a      	add	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b0f      	cmp	r3, #15
 8003ce4:	d916      	bls.n	8003d14 <UART_SetConfig+0x404>
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cec:	d212      	bcs.n	8003d14 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f023 030f 	bic.w	r3, r3, #15
 8003cf6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	89fb      	ldrh	r3, [r7, #14]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	89fa      	ldrh	r2, [r7, #14]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	e04f      	b.n	8003db4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	77bb      	strb	r3, [r7, #30]
 8003d18:	e04c      	b.n	8003db4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d1a:	7ffb      	ldrb	r3, [r7, #31]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d828      	bhi.n	8003d72 <UART_SetConfig+0x462>
 8003d20:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <UART_SetConfig+0x418>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d55 	.word	0x08003d55
 8003d30:	08003d5d 	.word	0x08003d5d
 8003d34:	08003d73 	.word	0x08003d73
 8003d38:	08003d63 	.word	0x08003d63
 8003d3c:	08003d73 	.word	0x08003d73
 8003d40:	08003d73 	.word	0x08003d73
 8003d44:	08003d73 	.word	0x08003d73
 8003d48:	08003d6b 	.word	0x08003d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f7fe fe30 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 8003d50:	61b8      	str	r0, [r7, #24]
        break;
 8003d52:	e013      	b.n	8003d7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d54:	f7fe fe40 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
 8003d58:	61b8      	str	r0, [r7, #24]
        break;
 8003d5a:	e00f      	b.n	8003d7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <UART_SetConfig+0x4c4>)
 8003d5e:	61bb      	str	r3, [r7, #24]
        break;
 8003d60:	e00c      	b.n	8003d7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d62:	f7fe fd13 	bl	800278c <HAL_RCC_GetSysClockFreq>
 8003d66:	61b8      	str	r0, [r7, #24]
        break;
 8003d68:	e008      	b.n	8003d7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6e:	61bb      	str	r3, [r7, #24]
        break;
 8003d70:	e004      	b.n	8003d7c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	77bb      	strb	r3, [r7, #30]
        break;
 8003d7a:	bf00      	nop
    }

    if (pclk != 0U)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d018      	beq.n	8003db4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	085a      	lsrs	r2, r3, #1
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	441a      	add	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b0f      	cmp	r3, #15
 8003d9a:	d909      	bls.n	8003db0 <UART_SetConfig+0x4a0>
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da2:	d205      	bcs.n	8003db0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	e001      	b.n	8003db4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003dc0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40007c00 	.word	0x40007c00
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	00f42400 	.word	0x00f42400

08003dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01a      	beq.n	8003eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed6:	d10a      	bne.n	8003eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  }
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f2c:	f7fd f8ee 	bl	800110c <HAL_GetTick>
 8003f30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d10e      	bne.n	8003f5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f831 	bl	8003fb6 <UART_WaitOnFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e027      	b.n	8003fae <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d10e      	bne.n	8003f8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f81b 	bl	8003fb6 <UART_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e011      	b.n	8003fae <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b09c      	sub	sp, #112	; 0x70
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	603b      	str	r3, [r7, #0]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc6:	e0a7      	b.n	8004118 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fce:	f000 80a3 	beq.w	8004118 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd2:	f7fd f89b 	bl	800110c <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d302      	bcc.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d13f      	bne.n	8004068 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004006:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004008:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800400c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e6      	bne.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3308      	adds	r3, #8
 8004020:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	663b      	str	r3, [r7, #96]	; 0x60
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3308      	adds	r3, #8
 8004038:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800403a:	64ba      	str	r2, [r7, #72]	; 0x48
 800403c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e5      	bne.n	800401a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e068      	b.n	800413a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d050      	beq.n	8004118 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004084:	d148      	bne.n	8004118 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800408e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	e853 3f00 	ldrex	r3, [r3]
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ae:	637b      	str	r3, [r7, #52]	; 0x34
 80040b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e6      	bne.n	8004090 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3308      	adds	r3, #8
 80040c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	613b      	str	r3, [r7, #16]
   return(result);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3308      	adds	r3, #8
 80040e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040e2:	623a      	str	r2, [r7, #32]
 80040e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	69f9      	ldr	r1, [r7, #28]
 80040e8:	6a3a      	ldr	r2, [r7, #32]
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e5      	bne.n	80040c2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e010      	b.n	800413a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	4013      	ands	r3, r2
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	429a      	cmp	r2, r3
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	429a      	cmp	r2, r3
 8004134:	f43f af48 	beq.w	8003fc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3770      	adds	r7, #112	; 0x70
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004144:	b084      	sub	sp, #16
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	f107 001c 	add.w	r0, r7, #28
 8004152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004158:	2b01      	cmp	r3, #1
 800415a:	d120      	bne.n	800419e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	4b20      	ldr	r3, [pc, #128]	; (80041f0 <USB_CoreInit+0xac>)
 800416e:	4013      	ands	r3, r2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004182:	2b01      	cmp	r3, #1
 8004184:	d105      	bne.n	8004192 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fa96 	bl	80046c4 <USB_CoreReset>
 8004198:	4603      	mov	r3, r0
 800419a:	73fb      	strb	r3, [r7, #15]
 800419c:	e010      	b.n	80041c0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fa8a 	bl	80046c4 <USB_CoreReset>
 80041b0:	4603      	mov	r3, r0
 80041b2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d10b      	bne.n	80041de <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f043 0206 	orr.w	r2, r3, #6
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f043 0220 	orr.w	r2, r3, #32
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041ea:	b004      	add	sp, #16
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	ffbdffbf 	.word	0xffbdffbf

080041f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f023 0201 	bic.w	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	460b      	mov	r3, r1
 8004220:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d115      	bne.n	8004264 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004244:	2001      	movs	r0, #1
 8004246:	f7fc ff6d 	bl	8001124 <HAL_Delay>
      ms++;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3301      	adds	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fa29 	bl	80046a8 <USB_GetMode>
 8004256:	4603      	mov	r3, r0
 8004258:	2b01      	cmp	r3, #1
 800425a:	d01e      	beq.n	800429a <USB_SetCurrentMode+0x84>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b31      	cmp	r3, #49	; 0x31
 8004260:	d9f0      	bls.n	8004244 <USB_SetCurrentMode+0x2e>
 8004262:	e01a      	b.n	800429a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d115      	bne.n	8004296 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004276:	2001      	movs	r0, #1
 8004278:	f7fc ff54 	bl	8001124 <HAL_Delay>
      ms++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3301      	adds	r3, #1
 8004280:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fa10 	bl	80046a8 <USB_GetMode>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <USB_SetCurrentMode+0x84>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b31      	cmp	r3, #49	; 0x31
 8004292:	d9f0      	bls.n	8004276 <USB_SetCurrentMode+0x60>
 8004294:	e001      	b.n	800429a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e005      	b.n	80042a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b32      	cmp	r3, #50	; 0x32
 800429e:	d101      	bne.n	80042a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042b0:	b084      	sub	sp, #16
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b086      	sub	sp, #24
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042ca:	2300      	movs	r3, #0
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	e009      	b.n	80042e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	3340      	adds	r3, #64	; 0x40
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	2200      	movs	r2, #0
 80042dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	3301      	adds	r3, #1
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b0e      	cmp	r3, #14
 80042e8:	d9f2      	bls.n	80042d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d11c      	bne.n	800432a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042fe:	f043 0302 	orr.w	r3, r3, #2
 8004302:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e005      	b.n	8004336 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800433c:	461a      	mov	r2, r3
 800433e:	2300      	movs	r3, #0
 8004340:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004348:	4619      	mov	r1, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004350:	461a      	mov	r2, r3
 8004352:	680b      	ldr	r3, [r1, #0]
 8004354:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	2b01      	cmp	r3, #1
 800435a:	d10c      	bne.n	8004376 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d104      	bne.n	800436c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004362:	2100      	movs	r1, #0
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f965 	bl	8004634 <USB_SetDevSpeed>
 800436a:	e008      	b.n	800437e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800436c:	2101      	movs	r1, #1
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f960 	bl	8004634 <USB_SetDevSpeed>
 8004374:	e003      	b.n	800437e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004376:	2103      	movs	r1, #3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f95b 	bl	8004634 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800437e:	2110      	movs	r1, #16
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f8f3 	bl	800456c <USB_FlushTxFifo>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f91f 	bl	80045d4 <USB_FlushRxFifo>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a6:	461a      	mov	r2, r3
 80043a8:	2300      	movs	r3, #0
 80043aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b2:	461a      	mov	r2, r3
 80043b4:	2300      	movs	r3, #0
 80043b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043be:	461a      	mov	r2, r3
 80043c0:	2300      	movs	r3, #0
 80043c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	e043      	b.n	8004452 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043e0:	d118      	bne.n	8004414 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	461a      	mov	r2, r3
 80043f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	e013      	b.n	8004426 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440a:	461a      	mov	r2, r3
 800440c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e008      	b.n	8004426 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004420:	461a      	mov	r2, r3
 8004422:	2300      	movs	r3, #0
 8004424:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004432:	461a      	mov	r2, r3
 8004434:	2300      	movs	r3, #0
 8004436:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004444:	461a      	mov	r2, r3
 8004446:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800444a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	3301      	adds	r3, #1
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	429a      	cmp	r2, r3
 8004458:	d3b7      	bcc.n	80043ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800445a:	2300      	movs	r3, #0
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	e043      	b.n	80044e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004476:	d118      	bne.n	80044aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	461a      	mov	r2, r3
 800448c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e013      	b.n	80044bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a0:	461a      	mov	r2, r3
 80044a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	e008      	b.n	80044bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b6:	461a      	mov	r2, r3
 80044b8:	2300      	movs	r3, #0
 80044ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c8:	461a      	mov	r2, r3
 80044ca:	2300      	movs	r3, #0
 80044cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044da:	461a      	mov	r2, r3
 80044dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	3301      	adds	r3, #1
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d3b7      	bcc.n	8004460 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004502:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004510:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f043 0210 	orr.w	r2, r3, #16
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699a      	ldr	r2, [r3, #24]
 8004528:	4b0e      	ldr	r3, [pc, #56]	; (8004564 <USB_DevInit+0x2b4>)
 800452a:	4313      	orrs	r3, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f043 0208 	orr.w	r2, r3, #8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004544:	2b01      	cmp	r3, #1
 8004546:	d105      	bne.n	8004554 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699a      	ldr	r2, [r3, #24]
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <USB_DevInit+0x2b8>)
 800454e:	4313      	orrs	r3, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004560:	b004      	add	sp, #16
 8004562:	4770      	bx	lr
 8004564:	803c3800 	.word	0x803c3800
 8004568:	40000004 	.word	0x40000004

0800456c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3301      	adds	r3, #1
 800457e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <USB_FlushTxFifo+0x64>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d901      	bls.n	800458c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e01b      	b.n	80045c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	daf2      	bge.n	800457a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	019b      	lsls	r3, r3, #6
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3301      	adds	r3, #1
 80045a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4a08      	ldr	r2, [pc, #32]	; (80045d0 <USB_FlushTxFifo+0x64>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e006      	b.n	80045c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d0f0      	beq.n	80045a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	00030d40 	.word	0x00030d40

080045d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4a11      	ldr	r2, [pc, #68]	; (8004630 <USB_FlushRxFifo+0x5c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e018      	b.n	8004624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	daf2      	bge.n	80045e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2210      	movs	r2, #16
 8004602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4a08      	ldr	r2, [pc, #32]	; (8004630 <USB_FlushRxFifo+0x5c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e006      	b.n	8004624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b10      	cmp	r3, #16
 8004620:	d0f0      	beq.n	8004604 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	00030d40 	.word	0x00030d40

08004634 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	68f9      	ldr	r1, [r7, #12]
 8004650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004654:	4313      	orrs	r3, r2
 8004656:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004666:	b480      	push	{r7}
 8004668:	b085      	sub	sp, #20
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004680:	f023 0303 	bic.w	r3, r3, #3
 8004684:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004694:	f043 0302 	orr.w	r3, r3, #2
 8004698:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f003 0301 	and.w	r3, r3, #1
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3301      	adds	r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a13      	ldr	r2, [pc, #76]	; (8004728 <USB_CoreReset+0x64>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e01b      	b.n	800471a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	daf2      	bge.n	80046d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f043 0201 	orr.w	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3301      	adds	r3, #1
 80046fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4a09      	ldr	r2, [pc, #36]	; (8004728 <USB_CoreReset+0x64>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d901      	bls.n	800470c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e006      	b.n	800471a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b01      	cmp	r3, #1
 8004716:	d0f0      	beq.n	80046fa <USB_CoreReset+0x36>

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	00030d40 	.word	0x00030d40

0800472c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004742:	f3ef 8305 	mrs	r3, IPSR
 8004746:	60bb      	str	r3, [r7, #8]
  return(result);
 8004748:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10f      	bne.n	800476e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800474e:	f3ef 8310 	mrs	r3, PRIMASK
 8004752:	607b      	str	r3, [r7, #4]
  return(result);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d105      	bne.n	8004766 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800475a:	f3ef 8311 	mrs	r3, BASEPRI
 800475e:	603b      	str	r3, [r7, #0]
  return(result);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <osKernelInitialize+0x3a>
 8004766:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <osKernelInitialize+0x64>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d103      	bne.n	8004776 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800476e:	f06f 0305 	mvn.w	r3, #5
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e00c      	b.n	8004790 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <osKernelInitialize+0x64>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d105      	bne.n	800478a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800477e:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <osKernelInitialize+0x64>)
 8004780:	2201      	movs	r2, #1
 8004782:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e002      	b.n	8004790 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800478a:	f04f 33ff 	mov.w	r3, #4294967295
 800478e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004790:	68fb      	ldr	r3, [r7, #12]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	200009b4 	.word	0x200009b4

080047a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047aa:	f3ef 8305 	mrs	r3, IPSR
 80047ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80047b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10f      	bne.n	80047d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b6:	f3ef 8310 	mrs	r3, PRIMASK
 80047ba:	607b      	str	r3, [r7, #4]
  return(result);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d105      	bne.n	80047ce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047c2:	f3ef 8311 	mrs	r3, BASEPRI
 80047c6:	603b      	str	r3, [r7, #0]
  return(result);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <osKernelStart+0x3a>
 80047ce:	4b0f      	ldr	r3, [pc, #60]	; (800480c <osKernelStart+0x68>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d103      	bne.n	80047de <osKernelStart+0x3a>
    stat = osErrorISR;
 80047d6:	f06f 0305 	mvn.w	r3, #5
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e010      	b.n	8004800 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80047de:	4b0b      	ldr	r3, [pc, #44]	; (800480c <osKernelStart+0x68>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d109      	bne.n	80047fa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80047e6:	f7ff ffa1 	bl	800472c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80047ea:	4b08      	ldr	r3, [pc, #32]	; (800480c <osKernelStart+0x68>)
 80047ec:	2202      	movs	r2, #2
 80047ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80047f0:	f001 f8ca 	bl	8005988 <vTaskStartScheduler>
      stat = osOK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e002      	b.n	8004800 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80047fa:	f04f 33ff 	mov.w	r3, #4294967295
 80047fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004800:	68fb      	ldr	r3, [r7, #12]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	200009b4 	.word	0x200009b4

08004810 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004810:	b580      	push	{r7, lr}
 8004812:	b090      	sub	sp, #64	; 0x40
 8004814:	af04      	add	r7, sp, #16
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004820:	f3ef 8305 	mrs	r3, IPSR
 8004824:	61fb      	str	r3, [r7, #28]
  return(result);
 8004826:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004828:	2b00      	cmp	r3, #0
 800482a:	f040 808f 	bne.w	800494c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800482e:	f3ef 8310 	mrs	r3, PRIMASK
 8004832:	61bb      	str	r3, [r7, #24]
  return(result);
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d105      	bne.n	8004846 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800483a:	f3ef 8311 	mrs	r3, BASEPRI
 800483e:	617b      	str	r3, [r7, #20]
  return(result);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <osThreadNew+0x3e>
 8004846:	4b44      	ldr	r3, [pc, #272]	; (8004958 <osThreadNew+0x148>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d07e      	beq.n	800494c <osThreadNew+0x13c>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d07b      	beq.n	800494c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004858:	2318      	movs	r3, #24
 800485a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800485c:	2300      	movs	r3, #0
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004860:	f04f 33ff 	mov.w	r3, #4294967295
 8004864:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d045      	beq.n	80048f8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <osThreadNew+0x6a>
        name = attr->name;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <osThreadNew+0x90>
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	2b38      	cmp	r3, #56	; 0x38
 8004892:	d805      	bhi.n	80048a0 <osThreadNew+0x90>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <osThreadNew+0x94>
        return (NULL);
 80048a0:	2300      	movs	r3, #0
 80048a2:	e054      	b.n	800494e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	089b      	lsrs	r3, r3, #2
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00e      	beq.n	80048da <osThreadNew+0xca>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2bbb      	cmp	r3, #187	; 0xbb
 80048c2:	d90a      	bls.n	80048da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d006      	beq.n	80048da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <osThreadNew+0xca>
        mem = 1;
 80048d4:	2301      	movs	r3, #1
 80048d6:	623b      	str	r3, [r7, #32]
 80048d8:	e010      	b.n	80048fc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10c      	bne.n	80048fc <osThreadNew+0xec>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d108      	bne.n	80048fc <osThreadNew+0xec>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d104      	bne.n	80048fc <osThreadNew+0xec>
          mem = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	623b      	str	r3, [r7, #32]
 80048f6:	e001      	b.n	80048fc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d110      	bne.n	8004924 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800490a:	9202      	str	r2, [sp, #8]
 800490c:	9301      	str	r3, [sp, #4]
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fe3f 	bl	800559c <xTaskCreateStatic>
 800491e:	4603      	mov	r3, r0
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	e013      	b.n	800494c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d110      	bne.n	800494c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	b29a      	uxth	r2, r3
 800492e:	f107 0310 	add.w	r3, r7, #16
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fe90 	bl	8005662 <xTaskCreate>
 8004942:	4603      	mov	r3, r0
 8004944:	2b01      	cmp	r3, #1
 8004946:	d001      	beq.n	800494c <osThreadNew+0x13c>
          hTask = NULL;
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800494c:	693b      	ldr	r3, [r7, #16]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3730      	adds	r7, #48	; 0x30
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	200009b4 	.word	0x200009b4

0800495c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004964:	f3ef 8305 	mrs	r3, IPSR
 8004968:	613b      	str	r3, [r7, #16]
  return(result);
 800496a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10f      	bne.n	8004990 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004970:	f3ef 8310 	mrs	r3, PRIMASK
 8004974:	60fb      	str	r3, [r7, #12]
  return(result);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d105      	bne.n	8004988 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800497c:	f3ef 8311 	mrs	r3, BASEPRI
 8004980:	60bb      	str	r3, [r7, #8]
  return(result);
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <osDelay+0x3c>
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <osDelay+0x58>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b02      	cmp	r3, #2
 800498e:	d103      	bne.n	8004998 <osDelay+0x3c>
    stat = osErrorISR;
 8004990:	f06f 0305 	mvn.w	r3, #5
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	e007      	b.n	80049a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 ffba 	bl	800591c <vTaskDelay>
    }
  }

  return (stat);
 80049a8:	697b      	ldr	r3, [r7, #20]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	200009b4 	.word	0x200009b4

080049b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a07      	ldr	r2, [pc, #28]	; (80049e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80049c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	4a06      	ldr	r2, [pc, #24]	; (80049e8 <vApplicationGetIdleTaskMemory+0x30>)
 80049ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2280      	movs	r2, #128	; 0x80
 80049d4:	601a      	str	r2, [r3, #0]
}
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	200009b8 	.word	0x200009b8
 80049e8:	20000a74 	.word	0x20000a74

080049ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <vApplicationGetTimerTaskMemory+0x2c>)
 80049fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4a06      	ldr	r2, [pc, #24]	; (8004a1c <vApplicationGetTimerTaskMemory+0x30>)
 8004a02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a0a:	601a      	str	r2, [r3, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	20000c74 	.word	0x20000c74
 8004a1c:	20000d30 	.word	0x20000d30

08004a20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f103 0208 	add.w	r2, r3, #8
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f04f 32ff 	mov.w	r2, #4294967295
 8004a38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f103 0208 	add.w	r2, r3, #8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f103 0208 	add.w	r2, r3, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	601a      	str	r2, [r3, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b085      	sub	sp, #20
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad8:	d103      	bne.n	8004ae2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	e00c      	b.n	8004afc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e002      	b.n	8004af0 <vListInsert+0x2e>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d2f6      	bcs.n	8004aea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	601a      	str	r2, [r3, #0]
}
 8004b28:	bf00      	nop
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6892      	ldr	r2, [r2, #8]
 8004b4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6852      	ldr	r2, [r2, #4]
 8004b54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d103      	bne.n	8004b68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	1e5a      	subs	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10c      	bne.n	8004bb6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	b672      	cpsid	i
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	b662      	cpsie	i
 8004bb0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bb2:	bf00      	nop
 8004bb4:	e7fe      	b.n	8004bb4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004bb6:	f002 f8a9 	bl	8006d0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bc6:	fb01 f303 	mul.w	r3, r1, r3
 8004bca:	441a      	add	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	3b01      	subs	r3, #1
 8004be8:	68f9      	ldr	r1, [r7, #12]
 8004bea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	441a      	add	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	22ff      	movs	r2, #255	; 0xff
 8004bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	22ff      	movs	r2, #255	; 0xff
 8004c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d114      	bne.n	8004c36 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01a      	beq.n	8004c4a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3310      	adds	r3, #16
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f001 f95d 	bl	8005ed8 <xTaskRemoveFromEventList>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d012      	beq.n	8004c4a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <xQueueGenericReset+0xd0>)
 8004c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	e009      	b.n	8004c4a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3310      	adds	r3, #16
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff fef0 	bl	8004a20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3324      	adds	r3, #36	; 0x24
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff feeb 	bl	8004a20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c4a:	f002 f893 	bl	8006d74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c4e:	2301      	movs	r3, #1
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08e      	sub	sp, #56	; 0x38
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10c      	bne.n	8004c8a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	b672      	cpsid	i
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	b662      	cpsie	i
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10c      	bne.n	8004caa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	b672      	cpsid	i
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	b662      	cpsie	i
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <xQueueGenericCreateStatic+0x5a>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <xQueueGenericCreateStatic+0x5e>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <xQueueGenericCreateStatic+0x60>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10c      	bne.n	8004cda <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	b672      	cpsid	i
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	b662      	cpsie	i
 8004cd4:	623b      	str	r3, [r7, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	e7fe      	b.n	8004cd8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d102      	bne.n	8004ce6 <xQueueGenericCreateStatic+0x8a>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <xQueueGenericCreateStatic+0x8e>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e000      	b.n	8004cec <xQueueGenericCreateStatic+0x90>
 8004cea:	2300      	movs	r3, #0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10c      	bne.n	8004d0a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	b672      	cpsid	i
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	b662      	cpsie	i
 8004d04:	61fb      	str	r3, [r7, #28]
}
 8004d06:	bf00      	nop
 8004d08:	e7fe      	b.n	8004d08 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d0a:	2350      	movs	r3, #80	; 0x50
 8004d0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b50      	cmp	r3, #80	; 0x50
 8004d12:	d00c      	beq.n	8004d2e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	b672      	cpsid	i
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	b662      	cpsie	i
 8004d28:	61bb      	str	r3, [r7, #24]
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00d      	beq.n	8004d56 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f805 	bl	8004d60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3730      	adds	r7, #48	; 0x30
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d103      	bne.n	8004d7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e002      	b.n	8004d82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d8e:	2101      	movs	r1, #1
 8004d90:	69b8      	ldr	r0, [r7, #24]
 8004d92:	f7ff fef9 	bl	8004b88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	78fa      	ldrb	r2, [r7, #3]
 8004d9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08e      	sub	sp, #56	; 0x38
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10c      	bne.n	8004dde <xQueueGenericSend+0x36>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	b672      	cpsid	i
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	b662      	cpsie	i
 8004dd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d103      	bne.n	8004dec <xQueueGenericSend+0x44>
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <xQueueGenericSend+0x48>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <xQueueGenericSend+0x4a>
 8004df0:	2300      	movs	r3, #0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10c      	bne.n	8004e10 <xQueueGenericSend+0x68>
	__asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfa:	b672      	cpsid	i
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	b662      	cpsie	i
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e0c:	bf00      	nop
 8004e0e:	e7fe      	b.n	8004e0e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d103      	bne.n	8004e1e <xQueueGenericSend+0x76>
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <xQueueGenericSend+0x7a>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <xQueueGenericSend+0x7c>
 8004e22:	2300      	movs	r3, #0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10c      	bne.n	8004e42 <xQueueGenericSend+0x9a>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	b672      	cpsid	i
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	b662      	cpsie	i
 8004e3c:	623b      	str	r3, [r7, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e42:	f001 fa13 	bl	800626c <xTaskGetSchedulerState>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <xQueueGenericSend+0xaa>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <xQueueGenericSend+0xae>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <xQueueGenericSend+0xb0>
 8004e56:	2300      	movs	r3, #0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10c      	bne.n	8004e76 <xQueueGenericSend+0xce>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	b672      	cpsid	i
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	b662      	cpsie	i
 8004e70:	61fb      	str	r3, [r7, #28]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e76:	f001 ff49 	bl	8006d0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d302      	bcc.n	8004e8c <xQueueGenericSend+0xe4>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d129      	bne.n	8004ee0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	68b9      	ldr	r1, [r7, #8]
 8004e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e92:	f000 fa15 	bl	80052c0 <prvCopyDataToQueue>
 8004e96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d010      	beq.n	8004ec2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	3324      	adds	r3, #36	; 0x24
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f001 f817 	bl	8005ed8 <xTaskRemoveFromEventList>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d013      	beq.n	8004ed8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004eb0:	4b3f      	ldr	r3, [pc, #252]	; (8004fb0 <xQueueGenericSend+0x208>)
 8004eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	e00a      	b.n	8004ed8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ec8:	4b39      	ldr	r3, [pc, #228]	; (8004fb0 <xQueueGenericSend+0x208>)
 8004eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ed8:	f001 ff4c 	bl	8006d74 <vPortExitCritical>
				return pdPASS;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e063      	b.n	8004fa8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ee6:	f001 ff45 	bl	8006d74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e05c      	b.n	8004fa8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ef4:	f107 0314 	add.w	r3, r7, #20
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 f853 	bl	8005fa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004efe:	2301      	movs	r3, #1
 8004f00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f02:	f001 ff37 	bl	8006d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f06:	f000 fdb3 	bl	8005a70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f0a:	f001 feff 	bl	8006d0c <vPortEnterCritical>
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f14:	b25b      	sxtb	r3, r3
 8004f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1a:	d103      	bne.n	8004f24 <xQueueGenericSend+0x17c>
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f2a:	b25b      	sxtb	r3, r3
 8004f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f30:	d103      	bne.n	8004f3a <xQueueGenericSend+0x192>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f3a:	f001 ff1b 	bl	8006d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f3e:	1d3a      	adds	r2, r7, #4
 8004f40:	f107 0314 	add.w	r3, r7, #20
 8004f44:	4611      	mov	r1, r2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f001 f842 	bl	8005fd0 <xTaskCheckForTimeOut>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d124      	bne.n	8004f9c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f54:	f000 faac 	bl	80054b0 <prvIsQueueFull>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d018      	beq.n	8004f90 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	3310      	adds	r3, #16
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	4611      	mov	r1, r2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 ff62 	bl	8005e30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f6e:	f000 fa37 	bl	80053e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f72:	f000 fd8b 	bl	8005a8c <xTaskResumeAll>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f47f af7c 	bne.w	8004e76 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <xQueueGenericSend+0x208>)
 8004f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	e772      	b.n	8004e76 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f92:	f000 fa25 	bl	80053e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f96:	f000 fd79 	bl	8005a8c <xTaskResumeAll>
 8004f9a:	e76c      	b.n	8004e76 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f9e:	f000 fa1f 	bl	80053e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fa2:	f000 fd73 	bl	8005a8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004fa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3738      	adds	r7, #56	; 0x38
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	e000ed04 	.word	0xe000ed04

08004fb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08e      	sub	sp, #56	; 0x38
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10c      	bne.n	8004fe6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd0:	b672      	cpsid	i
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	b662      	cpsie	i
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fe2:	bf00      	nop
 8004fe4:	e7fe      	b.n	8004fe4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d103      	bne.n	8004ff4 <xQueueGenericSendFromISR+0x40>
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <xQueueGenericSendFromISR+0x44>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <xQueueGenericSendFromISR+0x46>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10c      	bne.n	8005018 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	b672      	cpsid	i
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	b662      	cpsie	i
 8005012:	623b      	str	r3, [r7, #32]
}
 8005014:	bf00      	nop
 8005016:	e7fe      	b.n	8005016 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d103      	bne.n	8005026 <xQueueGenericSendFromISR+0x72>
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005022:	2b01      	cmp	r3, #1
 8005024:	d101      	bne.n	800502a <xQueueGenericSendFromISR+0x76>
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <xQueueGenericSendFromISR+0x78>
 800502a:	2300      	movs	r3, #0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10c      	bne.n	800504a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	b672      	cpsid	i
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	b662      	cpsie	i
 8005044:	61fb      	str	r3, [r7, #28]
}
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800504a:	f001 ff47 	bl	8006edc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800504e:	f3ef 8211 	mrs	r2, BASEPRI
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	b672      	cpsid	i
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	b662      	cpsie	i
 8005066:	61ba      	str	r2, [r7, #24]
 8005068:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800506a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	429a      	cmp	r2, r3
 8005078:	d302      	bcc.n	8005080 <xQueueGenericSendFromISR+0xcc>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d12c      	bne.n	80050da <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005090:	f000 f916 	bl	80052c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005094:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d112      	bne.n	80050c4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d016      	beq.n	80050d4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	3324      	adds	r3, #36	; 0x24
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 ff14 	bl	8005ed8 <xTaskRemoveFromEventList>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00e      	beq.n	80050d4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00b      	beq.n	80050d4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	e007      	b.n	80050d4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050c8:	3301      	adds	r3, #1
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	b25a      	sxtb	r2, r3
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050d4:	2301      	movs	r3, #1
 80050d6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80050d8:	e001      	b.n	80050de <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3738      	adds	r7, #56	; 0x38
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08c      	sub	sp, #48	; 0x30
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005100:	2300      	movs	r3, #0
 8005102:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10c      	bne.n	8005128 <xQueueReceive+0x34>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	b672      	cpsid	i
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	b662      	cpsie	i
 8005122:	623b      	str	r3, [r7, #32]
}
 8005124:	bf00      	nop
 8005126:	e7fe      	b.n	8005126 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d103      	bne.n	8005136 <xQueueReceive+0x42>
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <xQueueReceive+0x46>
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <xQueueReceive+0x48>
 800513a:	2300      	movs	r3, #0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10c      	bne.n	800515a <xQueueReceive+0x66>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	b672      	cpsid	i
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	b662      	cpsie	i
 8005154:	61fb      	str	r3, [r7, #28]
}
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800515a:	f001 f887 	bl	800626c <xTaskGetSchedulerState>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d102      	bne.n	800516a <xQueueReceive+0x76>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <xQueueReceive+0x7a>
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <xQueueReceive+0x7c>
 800516e:	2300      	movs	r3, #0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10c      	bne.n	800518e <xQueueReceive+0x9a>
	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	b672      	cpsid	i
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	b662      	cpsie	i
 8005188:	61bb      	str	r3, [r7, #24]
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800518e:	f001 fdbd 	bl	8006d0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01f      	beq.n	80051de <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051a2:	f000 f8f7 	bl	8005394 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	1e5a      	subs	r2, r3, #1
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00f      	beq.n	80051d6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	3310      	adds	r3, #16
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fe8c 	bl	8005ed8 <xTaskRemoveFromEventList>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051c6:	4b3d      	ldr	r3, [pc, #244]	; (80052bc <xQueueReceive+0x1c8>)
 80051c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051d6:	f001 fdcd 	bl	8006d74 <vPortExitCritical>
				return pdPASS;
 80051da:	2301      	movs	r3, #1
 80051dc:	e069      	b.n	80052b2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d103      	bne.n	80051ec <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051e4:	f001 fdc6 	bl	8006d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e062      	b.n	80052b2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051f2:	f107 0310 	add.w	r3, r7, #16
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fed4 	bl	8005fa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051fc:	2301      	movs	r3, #1
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005200:	f001 fdb8 	bl	8006d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005204:	f000 fc34 	bl	8005a70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005208:	f001 fd80 	bl	8006d0c <vPortEnterCritical>
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005212:	b25b      	sxtb	r3, r3
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d103      	bne.n	8005222 <xQueueReceive+0x12e>
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005228:	b25b      	sxtb	r3, r3
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522e:	d103      	bne.n	8005238 <xQueueReceive+0x144>
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005238:	f001 fd9c 	bl	8006d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800523c:	1d3a      	adds	r2, r7, #4
 800523e:	f107 0310 	add.w	r3, r7, #16
 8005242:	4611      	mov	r1, r2
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fec3 	bl	8005fd0 <xTaskCheckForTimeOut>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d123      	bne.n	8005298 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005252:	f000 f917 	bl	8005484 <prvIsQueueEmpty>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d017      	beq.n	800528c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	3324      	adds	r3, #36	; 0x24
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	4611      	mov	r1, r2
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fde3 	bl	8005e30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800526a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800526c:	f000 f8b8 	bl	80053e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005270:	f000 fc0c 	bl	8005a8c <xTaskResumeAll>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d189      	bne.n	800518e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800527a:	4b10      	ldr	r3, [pc, #64]	; (80052bc <xQueueReceive+0x1c8>)
 800527c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	e780      	b.n	800518e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800528c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800528e:	f000 f8a7 	bl	80053e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005292:	f000 fbfb 	bl	8005a8c <xTaskResumeAll>
 8005296:	e77a      	b.n	800518e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800529a:	f000 f8a1 	bl	80053e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800529e:	f000 fbf5 	bl	8005a8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a4:	f000 f8ee 	bl	8005484 <prvIsQueueEmpty>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f43f af6f 	beq.w	800518e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3730      	adds	r7, #48	; 0x30
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	e000ed04 	.word	0xe000ed04

080052c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10d      	bne.n	80052fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d14d      	bne.n	8005382 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 ffdc 	bl	80062a8 <xTaskPriorityDisinherit>
 80052f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	e043      	b.n	8005382 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d119      	bne.n	8005334 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6858      	ldr	r0, [r3, #4]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	461a      	mov	r2, r3
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	f002 f834 	bl	8007378 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	441a      	add	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	429a      	cmp	r2, r3
 8005328:	d32b      	bcc.n	8005382 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	e026      	b.n	8005382 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	68d8      	ldr	r0, [r3, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	461a      	mov	r2, r3
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	f002 f81a 	bl	8007378 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	425b      	negs	r3, r3
 800534e:	441a      	add	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d207      	bcs.n	8005370 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	425b      	negs	r3, r3
 800536a:	441a      	add	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d105      	bne.n	8005382 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	3b01      	subs	r3, #1
 8005380:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800538a:	697b      	ldr	r3, [r7, #20]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d018      	beq.n	80053d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	441a      	add	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d303      	bcc.n	80053c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68d9      	ldr	r1, [r3, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	461a      	mov	r2, r3
 80053d2:	6838      	ldr	r0, [r7, #0]
 80053d4:	f001 ffd0 	bl	8007378 <memcpy>
	}
}
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053e8:	f001 fc90 	bl	8006d0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053f4:	e011      	b.n	800541a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d012      	beq.n	8005424 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3324      	adds	r3, #36	; 0x24
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fd68 	bl	8005ed8 <xTaskRemoveFromEventList>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800540e:	f000 fe45 	bl	800609c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	3b01      	subs	r3, #1
 8005416:	b2db      	uxtb	r3, r3
 8005418:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800541a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800541e:	2b00      	cmp	r3, #0
 8005420:	dce9      	bgt.n	80053f6 <prvUnlockQueue+0x16>
 8005422:	e000      	b.n	8005426 <prvUnlockQueue+0x46>
					break;
 8005424:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	22ff      	movs	r2, #255	; 0xff
 800542a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800542e:	f001 fca1 	bl	8006d74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005432:	f001 fc6b 	bl	8006d0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800543c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800543e:	e011      	b.n	8005464 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d012      	beq.n	800546e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3310      	adds	r3, #16
 800544c:	4618      	mov	r0, r3
 800544e:	f000 fd43 	bl	8005ed8 <xTaskRemoveFromEventList>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005458:	f000 fe20 	bl	800609c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800545c:	7bbb      	ldrb	r3, [r7, #14]
 800545e:	3b01      	subs	r3, #1
 8005460:	b2db      	uxtb	r3, r3
 8005462:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005468:	2b00      	cmp	r3, #0
 800546a:	dce9      	bgt.n	8005440 <prvUnlockQueue+0x60>
 800546c:	e000      	b.n	8005470 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800546e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	22ff      	movs	r2, #255	; 0xff
 8005474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005478:	f001 fc7c 	bl	8006d74 <vPortExitCritical>
}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800548c:	f001 fc3e 	bl	8006d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005498:	2301      	movs	r3, #1
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e001      	b.n	80054a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054a2:	f001 fc67 	bl	8006d74 <vPortExitCritical>

	return xReturn;
 80054a6:	68fb      	ldr	r3, [r7, #12]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054b8:	f001 fc28 	bl	8006d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d102      	bne.n	80054ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054c8:	2301      	movs	r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	e001      	b.n	80054d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054d2:	f001 fc4f 	bl	8006d74 <vPortExitCritical>

	return xReturn;
 80054d6:	68fb      	ldr	r3, [r7, #12]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	e014      	b.n	800551a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054f0:	4a0f      	ldr	r2, [pc, #60]	; (8005530 <vQueueAddToRegistry+0x50>)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054fc:	490c      	ldr	r1, [pc, #48]	; (8005530 <vQueueAddToRegistry+0x50>)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005506:	4a0a      	ldr	r2, [pc, #40]	; (8005530 <vQueueAddToRegistry+0x50>)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	4413      	add	r3, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005512:	e006      	b.n	8005522 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3301      	adds	r3, #1
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b07      	cmp	r3, #7
 800551e:	d9e7      	bls.n	80054f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005520:	bf00      	nop
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	20001130 	.word	0x20001130

08005534 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005544:	f001 fbe2 	bl	8006d0c <vPortEnterCritical>
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800554e:	b25b      	sxtb	r3, r3
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d103      	bne.n	800555e <vQueueWaitForMessageRestricted+0x2a>
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005564:	b25b      	sxtb	r3, r3
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	d103      	bne.n	8005574 <vQueueWaitForMessageRestricted+0x40>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005574:	f001 fbfe 	bl	8006d74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	2b00      	cmp	r3, #0
 800557e:	d106      	bne.n	800558e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	3324      	adds	r3, #36	; 0x24
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fc77 	bl	8005e7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800558e:	6978      	ldr	r0, [r7, #20]
 8005590:	f7ff ff26 	bl	80053e0 <prvUnlockQueue>
	}
 8005594:	bf00      	nop
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08e      	sub	sp, #56	; 0x38
 80055a0:	af04      	add	r7, sp, #16
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10c      	bne.n	80055ca <xTaskCreateStatic+0x2e>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	b672      	cpsid	i
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	b662      	cpsie	i
 80055c4:	623b      	str	r3, [r7, #32]
}
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10c      	bne.n	80055ea <xTaskCreateStatic+0x4e>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	b672      	cpsid	i
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	b662      	cpsie	i
 80055e4:	61fb      	str	r3, [r7, #28]
}
 80055e6:	bf00      	nop
 80055e8:	e7fe      	b.n	80055e8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055ea:	23bc      	movs	r3, #188	; 0xbc
 80055ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2bbc      	cmp	r3, #188	; 0xbc
 80055f2:	d00c      	beq.n	800560e <xTaskCreateStatic+0x72>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	b672      	cpsid	i
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	b662      	cpsie	i
 8005608:	61bb      	str	r3, [r7, #24]
}
 800560a:	bf00      	nop
 800560c:	e7fe      	b.n	800560c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800560e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01e      	beq.n	8005654 <xTaskCreateStatic+0xb8>
 8005616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01b      	beq.n	8005654 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800561c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005624:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	2202      	movs	r2, #2
 800562a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800562e:	2300      	movs	r3, #0
 8005630:	9303      	str	r3, [sp, #12]
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	9302      	str	r3, [sp, #8]
 8005636:	f107 0314 	add.w	r3, r7, #20
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	68b9      	ldr	r1, [r7, #8]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f850 	bl	80056ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800564c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800564e:	f000 f8f5 	bl	800583c <prvAddNewTaskToReadyList>
 8005652:	e001      	b.n	8005658 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005658:	697b      	ldr	r3, [r7, #20]
	}
 800565a:	4618      	mov	r0, r3
 800565c:	3728      	adds	r7, #40	; 0x28
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005662:	b580      	push	{r7, lr}
 8005664:	b08c      	sub	sp, #48	; 0x30
 8005666:	af04      	add	r7, sp, #16
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	4613      	mov	r3, r2
 8005670:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4618      	mov	r0, r3
 8005678:	f001 fc74 	bl	8006f64 <pvPortMalloc>
 800567c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00e      	beq.n	80056a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005684:	20bc      	movs	r0, #188	; 0xbc
 8005686:	f001 fc6d 	bl	8006f64 <pvPortMalloc>
 800568a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	631a      	str	r2, [r3, #48]	; 0x30
 8005698:	e005      	b.n	80056a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800569a:	6978      	ldr	r0, [r7, #20]
 800569c:	f001 fd2c 	bl	80070f8 <vPortFree>
 80056a0:	e001      	b.n	80056a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d017      	beq.n	80056dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056b4:	88fa      	ldrh	r2, [r7, #6]
 80056b6:	2300      	movs	r3, #0
 80056b8:	9303      	str	r3, [sp, #12]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	9302      	str	r3, [sp, #8]
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	9301      	str	r3, [sp, #4]
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f80e 	bl	80056ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056d0:	69f8      	ldr	r0, [r7, #28]
 80056d2:	f000 f8b3 	bl	800583c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056d6:	2301      	movs	r3, #1
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	e002      	b.n	80056e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056dc:	f04f 33ff 	mov.w	r3, #4294967295
 80056e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056e2:	69bb      	ldr	r3, [r7, #24]
	}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3720      	adds	r7, #32
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	461a      	mov	r2, r3
 8005704:	21a5      	movs	r1, #165	; 0xa5
 8005706:	f001 fe45 	bl	8007394 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005714:	440b      	add	r3, r1
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	f023 0307 	bic.w	r3, r3, #7
 8005722:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00c      	beq.n	8005748 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	b672      	cpsid	i
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	b662      	cpsie	i
 8005742:	617b      	str	r3, [r7, #20]
}
 8005744:	bf00      	nop
 8005746:	e7fe      	b.n	8005746 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d01f      	beq.n	800578e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800574e:	2300      	movs	r3, #0
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	e012      	b.n	800577a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	4413      	add	r3, r2
 800575a:	7819      	ldrb	r1, [r3, #0]
 800575c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	4413      	add	r3, r2
 8005762:	3334      	adds	r3, #52	; 0x34
 8005764:	460a      	mov	r2, r1
 8005766:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	4413      	add	r3, r2
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d006      	beq.n	8005782 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	3301      	adds	r3, #1
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	2b0f      	cmp	r3, #15
 800577e:	d9e9      	bls.n	8005754 <prvInitialiseNewTask+0x68>
 8005780:	e000      	b.n	8005784 <prvInitialiseNewTask+0x98>
			{
				break;
 8005782:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800578c:	e003      	b.n	8005796 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	2b37      	cmp	r3, #55	; 0x37
 800579a:	d901      	bls.n	80057a0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800579c:	2337      	movs	r3, #55	; 0x37
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	2200      	movs	r2, #0
 80057b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	3304      	adds	r3, #4
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff f952 	bl	8004a60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	3318      	adds	r3, #24
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7ff f94d 	bl	8004a60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	2200      	movs	r2, #0
 80057e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	3354      	adds	r3, #84	; 0x54
 80057f0:	2260      	movs	r2, #96	; 0x60
 80057f2:	2100      	movs	r1, #0
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 fdcd 	bl	8007394 <memset>
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	4a0c      	ldr	r2, [pc, #48]	; (8005830 <prvInitialiseNewTask+0x144>)
 80057fe:	659a      	str	r2, [r3, #88]	; 0x58
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	4a0c      	ldr	r2, [pc, #48]	; (8005834 <prvInitialiseNewTask+0x148>)
 8005804:	65da      	str	r2, [r3, #92]	; 0x5c
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	4a0b      	ldr	r2, [pc, #44]	; (8005838 <prvInitialiseNewTask+0x14c>)
 800580a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	68f9      	ldr	r1, [r7, #12]
 8005810:	69b8      	ldr	r0, [r7, #24]
 8005812:	f001 f96b 	bl	8006aec <pxPortInitialiseStack>
 8005816:	4602      	mov	r2, r0
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005826:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005828:	bf00      	nop
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	080075c0 	.word	0x080075c0
 8005834:	080075e0 	.word	0x080075e0
 8005838:	080075a0 	.word	0x080075a0

0800583c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005844:	f001 fa62 	bl	8006d0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005848:	4b2d      	ldr	r3, [pc, #180]	; (8005900 <prvAddNewTaskToReadyList+0xc4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3301      	adds	r3, #1
 800584e:	4a2c      	ldr	r2, [pc, #176]	; (8005900 <prvAddNewTaskToReadyList+0xc4>)
 8005850:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005852:	4b2c      	ldr	r3, [pc, #176]	; (8005904 <prvAddNewTaskToReadyList+0xc8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d109      	bne.n	800586e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800585a:	4a2a      	ldr	r2, [pc, #168]	; (8005904 <prvAddNewTaskToReadyList+0xc8>)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005860:	4b27      	ldr	r3, [pc, #156]	; (8005900 <prvAddNewTaskToReadyList+0xc4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d110      	bne.n	800588a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005868:	f000 fc3c 	bl	80060e4 <prvInitialiseTaskLists>
 800586c:	e00d      	b.n	800588a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800586e:	4b26      	ldr	r3, [pc, #152]	; (8005908 <prvAddNewTaskToReadyList+0xcc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d109      	bne.n	800588a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005876:	4b23      	ldr	r3, [pc, #140]	; (8005904 <prvAddNewTaskToReadyList+0xc8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	429a      	cmp	r2, r3
 8005882:	d802      	bhi.n	800588a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005884:	4a1f      	ldr	r2, [pc, #124]	; (8005904 <prvAddNewTaskToReadyList+0xc8>)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800588a:	4b20      	ldr	r3, [pc, #128]	; (800590c <prvAddNewTaskToReadyList+0xd0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3301      	adds	r3, #1
 8005890:	4a1e      	ldr	r2, [pc, #120]	; (800590c <prvAddNewTaskToReadyList+0xd0>)
 8005892:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005894:	4b1d      	ldr	r3, [pc, #116]	; (800590c <prvAddNewTaskToReadyList+0xd0>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a0:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <prvAddNewTaskToReadyList+0xd4>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d903      	bls.n	80058b0 <prvAddNewTaskToReadyList+0x74>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	4a18      	ldr	r2, [pc, #96]	; (8005910 <prvAddNewTaskToReadyList+0xd4>)
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4a15      	ldr	r2, [pc, #84]	; (8005914 <prvAddNewTaskToReadyList+0xd8>)
 80058be:	441a      	add	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f7ff f8d7 	bl	8004a7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058cc:	f001 fa52 	bl	8006d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058d0:	4b0d      	ldr	r3, [pc, #52]	; (8005908 <prvAddNewTaskToReadyList+0xcc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00e      	beq.n	80058f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058d8:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <prvAddNewTaskToReadyList+0xc8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d207      	bcs.n	80058f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058e6:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <prvAddNewTaskToReadyList+0xdc>)
 80058e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20001644 	.word	0x20001644
 8005904:	20001170 	.word	0x20001170
 8005908:	20001650 	.word	0x20001650
 800590c:	20001660 	.word	0x20001660
 8005910:	2000164c 	.word	0x2000164c
 8005914:	20001174 	.word	0x20001174
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005924:	2300      	movs	r3, #0
 8005926:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d019      	beq.n	8005962 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800592e:	4b14      	ldr	r3, [pc, #80]	; (8005980 <vTaskDelay+0x64>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00c      	beq.n	8005950 <vTaskDelay+0x34>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	b672      	cpsid	i
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	b662      	cpsie	i
 800594a:	60bb      	str	r3, [r7, #8]
}
 800594c:	bf00      	nop
 800594e:	e7fe      	b.n	800594e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005950:	f000 f88e 	bl	8005a70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005954:	2100      	movs	r1, #0
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fd18 	bl	800638c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800595c:	f000 f896 	bl	8005a8c <xTaskResumeAll>
 8005960:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d107      	bne.n	8005978 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005968:	4b06      	ldr	r3, [pc, #24]	; (8005984 <vTaskDelay+0x68>)
 800596a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005978:	bf00      	nop
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	2000166c 	.word	0x2000166c
 8005984:	e000ed04 	.word	0xe000ed04

08005988 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08a      	sub	sp, #40	; 0x28
 800598c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800598e:	2300      	movs	r3, #0
 8005990:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005992:	2300      	movs	r3, #0
 8005994:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005996:	463a      	mov	r2, r7
 8005998:	1d39      	adds	r1, r7, #4
 800599a:	f107 0308 	add.w	r3, r7, #8
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff f80a 	bl	80049b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059a4:	6839      	ldr	r1, [r7, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	9202      	str	r2, [sp, #8]
 80059ac:	9301      	str	r3, [sp, #4]
 80059ae:	2300      	movs	r3, #0
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	2300      	movs	r3, #0
 80059b4:	460a      	mov	r2, r1
 80059b6:	4926      	ldr	r1, [pc, #152]	; (8005a50 <vTaskStartScheduler+0xc8>)
 80059b8:	4826      	ldr	r0, [pc, #152]	; (8005a54 <vTaskStartScheduler+0xcc>)
 80059ba:	f7ff fdef 	bl	800559c <xTaskCreateStatic>
 80059be:	4603      	mov	r3, r0
 80059c0:	4a25      	ldr	r2, [pc, #148]	; (8005a58 <vTaskStartScheduler+0xd0>)
 80059c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059c4:	4b24      	ldr	r3, [pc, #144]	; (8005a58 <vTaskStartScheduler+0xd0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059cc:	2301      	movs	r3, #1
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	e001      	b.n	80059d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d102      	bne.n	80059e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80059dc:	f000 fd2a 	bl	8006434 <xTimerCreateTimerTask>
 80059e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d11d      	bne.n	8005a24 <vTaskStartScheduler+0x9c>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	b672      	cpsid	i
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	b662      	cpsie	i
 80059fc:	613b      	str	r3, [r7, #16]
}
 80059fe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a00:	4b16      	ldr	r3, [pc, #88]	; (8005a5c <vTaskStartScheduler+0xd4>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3354      	adds	r3, #84	; 0x54
 8005a06:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <vTaskStartScheduler+0xd8>)
 8005a08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a0a:	4b16      	ldr	r3, [pc, #88]	; (8005a64 <vTaskStartScheduler+0xdc>)
 8005a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <vTaskStartScheduler+0xe0>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a18:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <vTaskStartScheduler+0xe4>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a1e:	f001 f8f7 	bl	8006c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a22:	e010      	b.n	8005a46 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2a:	d10c      	bne.n	8005a46 <vTaskStartScheduler+0xbe>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	b672      	cpsid	i
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	b662      	cpsie	i
 8005a40:	60fb      	str	r3, [r7, #12]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <vTaskStartScheduler+0xbc>
}
 8005a46:	bf00      	nop
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	0800754c 	.word	0x0800754c
 8005a54:	080060b5 	.word	0x080060b5
 8005a58:	20001668 	.word	0x20001668
 8005a5c:	20001170 	.word	0x20001170
 8005a60:	20000010 	.word	0x20000010
 8005a64:	20001664 	.word	0x20001664
 8005a68:	20001650 	.word	0x20001650
 8005a6c:	20001648 	.word	0x20001648

08005a70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a74:	4b04      	ldr	r3, [pc, #16]	; (8005a88 <vTaskSuspendAll+0x18>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	4a03      	ldr	r2, [pc, #12]	; (8005a88 <vTaskSuspendAll+0x18>)
 8005a7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005a7e:	bf00      	nop
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	2000166c 	.word	0x2000166c

08005a8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a9a:	4b43      	ldr	r3, [pc, #268]	; (8005ba8 <xTaskResumeAll+0x11c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10c      	bne.n	8005abc <xTaskResumeAll+0x30>
	__asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	b672      	cpsid	i
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	b662      	cpsie	i
 8005ab6:	603b      	str	r3, [r7, #0]
}
 8005ab8:	bf00      	nop
 8005aba:	e7fe      	b.n	8005aba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005abc:	f001 f926 	bl	8006d0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ac0:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <xTaskResumeAll+0x11c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	4a38      	ldr	r2, [pc, #224]	; (8005ba8 <xTaskResumeAll+0x11c>)
 8005ac8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aca:	4b37      	ldr	r3, [pc, #220]	; (8005ba8 <xTaskResumeAll+0x11c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d162      	bne.n	8005b98 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ad2:	4b36      	ldr	r3, [pc, #216]	; (8005bac <xTaskResumeAll+0x120>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d05e      	beq.n	8005b98 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ada:	e02f      	b.n	8005b3c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005adc:	4b34      	ldr	r3, [pc, #208]	; (8005bb0 <xTaskResumeAll+0x124>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3318      	adds	r3, #24
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff f823 	bl	8004b34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3304      	adds	r3, #4
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff f81e 	bl	8004b34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afc:	4b2d      	ldr	r3, [pc, #180]	; (8005bb4 <xTaskResumeAll+0x128>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d903      	bls.n	8005b0c <xTaskResumeAll+0x80>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	4a2a      	ldr	r2, [pc, #168]	; (8005bb4 <xTaskResumeAll+0x128>)
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4a27      	ldr	r2, [pc, #156]	; (8005bb8 <xTaskResumeAll+0x12c>)
 8005b1a:	441a      	add	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4619      	mov	r1, r3
 8005b22:	4610      	mov	r0, r2
 8005b24:	f7fe ffa9 	bl	8004a7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	4b23      	ldr	r3, [pc, #140]	; (8005bbc <xTaskResumeAll+0x130>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d302      	bcc.n	8005b3c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005b36:	4b22      	ldr	r3, [pc, #136]	; (8005bc0 <xTaskResumeAll+0x134>)
 8005b38:	2201      	movs	r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b3c:	4b1c      	ldr	r3, [pc, #112]	; (8005bb0 <xTaskResumeAll+0x124>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1cb      	bne.n	8005adc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b4a:	f000 fb6f 	bl	800622c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b4e:	4b1d      	ldr	r3, [pc, #116]	; (8005bc4 <xTaskResumeAll+0x138>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d010      	beq.n	8005b7c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b5a:	f000 f847 	bl	8005bec <xTaskIncrementTick>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005b64:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <xTaskResumeAll+0x134>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f1      	bne.n	8005b5a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005b76:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <xTaskResumeAll+0x138>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b7c:	4b10      	ldr	r3, [pc, #64]	; (8005bc0 <xTaskResumeAll+0x134>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b84:	2301      	movs	r3, #1
 8005b86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b88:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <xTaskResumeAll+0x13c>)
 8005b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b98:	f001 f8ec 	bl	8006d74 <vPortExitCritical>

	return xAlreadyYielded;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	2000166c 	.word	0x2000166c
 8005bac:	20001644 	.word	0x20001644
 8005bb0:	20001604 	.word	0x20001604
 8005bb4:	2000164c 	.word	0x2000164c
 8005bb8:	20001174 	.word	0x20001174
 8005bbc:	20001170 	.word	0x20001170
 8005bc0:	20001658 	.word	0x20001658
 8005bc4:	20001654 	.word	0x20001654
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <xTaskGetTickCount+0x1c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005bd8:	687b      	ldr	r3, [r7, #4]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	20001648 	.word	0x20001648

08005bec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bf6:	4b50      	ldr	r3, [pc, #320]	; (8005d38 <xTaskIncrementTick+0x14c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f040 808b 	bne.w	8005d16 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c00:	4b4e      	ldr	r3, [pc, #312]	; (8005d3c <xTaskIncrementTick+0x150>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c08:	4a4c      	ldr	r2, [pc, #304]	; (8005d3c <xTaskIncrementTick+0x150>)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d122      	bne.n	8005c5a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c14:	4b4a      	ldr	r3, [pc, #296]	; (8005d40 <xTaskIncrementTick+0x154>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00c      	beq.n	8005c38 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	b672      	cpsid	i
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	b662      	cpsie	i
 8005c32:	603b      	str	r3, [r7, #0]
}
 8005c34:	bf00      	nop
 8005c36:	e7fe      	b.n	8005c36 <xTaskIncrementTick+0x4a>
 8005c38:	4b41      	ldr	r3, [pc, #260]	; (8005d40 <xTaskIncrementTick+0x154>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	4b41      	ldr	r3, [pc, #260]	; (8005d44 <xTaskIncrementTick+0x158>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a3f      	ldr	r2, [pc, #252]	; (8005d40 <xTaskIncrementTick+0x154>)
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	4a3f      	ldr	r2, [pc, #252]	; (8005d44 <xTaskIncrementTick+0x158>)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	4b3e      	ldr	r3, [pc, #248]	; (8005d48 <xTaskIncrementTick+0x15c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3301      	adds	r3, #1
 8005c52:	4a3d      	ldr	r2, [pc, #244]	; (8005d48 <xTaskIncrementTick+0x15c>)
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	f000 fae9 	bl	800622c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c5a:	4b3c      	ldr	r3, [pc, #240]	; (8005d4c <xTaskIncrementTick+0x160>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d349      	bcc.n	8005cf8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c64:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <xTaskIncrementTick+0x154>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c6e:	4b37      	ldr	r3, [pc, #220]	; (8005d4c <xTaskIncrementTick+0x160>)
 8005c70:	f04f 32ff 	mov.w	r2, #4294967295
 8005c74:	601a      	str	r2, [r3, #0]
					break;
 8005c76:	e03f      	b.n	8005cf8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c78:	4b31      	ldr	r3, [pc, #196]	; (8005d40 <xTaskIncrementTick+0x154>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d203      	bcs.n	8005c98 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c90:	4a2e      	ldr	r2, [pc, #184]	; (8005d4c <xTaskIncrementTick+0x160>)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c96:	e02f      	b.n	8005cf8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe ff49 	bl	8004b34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d004      	beq.n	8005cb4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	3318      	adds	r3, #24
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fe ff40 	bl	8004b34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb8:	4b25      	ldr	r3, [pc, #148]	; (8005d50 <xTaskIncrementTick+0x164>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d903      	bls.n	8005cc8 <xTaskIncrementTick+0xdc>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	4a22      	ldr	r2, [pc, #136]	; (8005d50 <xTaskIncrementTick+0x164>)
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4a1f      	ldr	r2, [pc, #124]	; (8005d54 <xTaskIncrementTick+0x168>)
 8005cd6:	441a      	add	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4610      	mov	r0, r2
 8005ce0:	f7fe fecb 	bl	8004a7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <xTaskIncrementTick+0x16c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d3b8      	bcc.n	8005c64 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cf6:	e7b5      	b.n	8005c64 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cf8:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <xTaskIncrementTick+0x16c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfe:	4915      	ldr	r1, [pc, #84]	; (8005d54 <xTaskIncrementTick+0x168>)
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	440b      	add	r3, r1
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d907      	bls.n	8005d20 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e004      	b.n	8005d20 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d16:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <xTaskIncrementTick+0x170>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	4a0f      	ldr	r2, [pc, #60]	; (8005d5c <xTaskIncrementTick+0x170>)
 8005d1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d20:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <xTaskIncrementTick+0x174>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d2c:	697b      	ldr	r3, [r7, #20]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	2000166c 	.word	0x2000166c
 8005d3c:	20001648 	.word	0x20001648
 8005d40:	200015fc 	.word	0x200015fc
 8005d44:	20001600 	.word	0x20001600
 8005d48:	2000165c 	.word	0x2000165c
 8005d4c:	20001664 	.word	0x20001664
 8005d50:	2000164c 	.word	0x2000164c
 8005d54:	20001174 	.word	0x20001174
 8005d58:	20001170 	.word	0x20001170
 8005d5c:	20001654 	.word	0x20001654
 8005d60:	20001658 	.word	0x20001658

08005d64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d6a:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <vTaskSwitchContext+0xb4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d72:	4b2a      	ldr	r3, [pc, #168]	; (8005e1c <vTaskSwitchContext+0xb8>)
 8005d74:	2201      	movs	r2, #1
 8005d76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d78:	e048      	b.n	8005e0c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005d7a:	4b28      	ldr	r3, [pc, #160]	; (8005e1c <vTaskSwitchContext+0xb8>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d80:	4b27      	ldr	r3, [pc, #156]	; (8005e20 <vTaskSwitchContext+0xbc>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	e012      	b.n	8005dae <vTaskSwitchContext+0x4a>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10c      	bne.n	8005da8 <vTaskSwitchContext+0x44>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	b672      	cpsid	i
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	b662      	cpsie	i
 8005da2:	607b      	str	r3, [r7, #4]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <vTaskSwitchContext+0x42>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	491d      	ldr	r1, [pc, #116]	; (8005e24 <vTaskSwitchContext+0xc0>)
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	440b      	add	r3, r1
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0e2      	beq.n	8005d88 <vTaskSwitchContext+0x24>
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4a15      	ldr	r2, [pc, #84]	; (8005e24 <vTaskSwitchContext+0xc0>)
 8005dce:	4413      	add	r3, r2
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	3308      	adds	r3, #8
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d104      	bne.n	8005df2 <vTaskSwitchContext+0x8e>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	605a      	str	r2, [r3, #4]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	4a0b      	ldr	r2, [pc, #44]	; (8005e28 <vTaskSwitchContext+0xc4>)
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	4a08      	ldr	r2, [pc, #32]	; (8005e20 <vTaskSwitchContext+0xbc>)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e02:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <vTaskSwitchContext+0xc4>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3354      	adds	r3, #84	; 0x54
 8005e08:	4a08      	ldr	r2, [pc, #32]	; (8005e2c <vTaskSwitchContext+0xc8>)
 8005e0a:	6013      	str	r3, [r2, #0]
}
 8005e0c:	bf00      	nop
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	2000166c 	.word	0x2000166c
 8005e1c:	20001658 	.word	0x20001658
 8005e20:	2000164c 	.word	0x2000164c
 8005e24:	20001174 	.word	0x20001174
 8005e28:	20001170 	.word	0x20001170
 8005e2c:	20000010 	.word	0x20000010

08005e30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10c      	bne.n	8005e5a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	b672      	cpsid	i
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	b662      	cpsie	i
 8005e54:	60fb      	str	r3, [r7, #12]
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e5a:	4b07      	ldr	r3, [pc, #28]	; (8005e78 <vTaskPlaceOnEventList+0x48>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3318      	adds	r3, #24
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fe fe2d 	bl	8004ac2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e68:	2101      	movs	r1, #1
 8005e6a:	6838      	ldr	r0, [r7, #0]
 8005e6c:	f000 fa8e 	bl	800638c <prvAddCurrentTaskToDelayedList>
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20001170 	.word	0x20001170

08005e7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10c      	bne.n	8005ea8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	b672      	cpsid	i
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	b662      	cpsie	i
 8005ea2:	617b      	str	r3, [r7, #20]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <vTaskPlaceOnEventListRestricted+0x58>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3318      	adds	r3, #24
 8005eae:	4619      	mov	r1, r3
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7fe fde2 	bl	8004a7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	68b8      	ldr	r0, [r7, #8]
 8005ec6:	f000 fa61 	bl	800638c <prvAddCurrentTaskToDelayedList>
	}
 8005eca:	bf00      	nop
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20001170 	.word	0x20001170

08005ed8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10c      	bne.n	8005f08 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	b672      	cpsid	i
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	b662      	cpsie	i
 8005f02:	60fb      	str	r3, [r7, #12]
}
 8005f04:	bf00      	nop
 8005f06:	e7fe      	b.n	8005f06 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	3318      	adds	r3, #24
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fe fe11 	bl	8004b34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f12:	4b1e      	ldr	r3, [pc, #120]	; (8005f8c <xTaskRemoveFromEventList+0xb4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d11d      	bne.n	8005f56 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fe fe08 	bl	8004b34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f28:	4b19      	ldr	r3, [pc, #100]	; (8005f90 <xTaskRemoveFromEventList+0xb8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d903      	bls.n	8005f38 <xTaskRemoveFromEventList+0x60>
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	4a16      	ldr	r2, [pc, #88]	; (8005f90 <xTaskRemoveFromEventList+0xb8>)
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4a13      	ldr	r2, [pc, #76]	; (8005f94 <xTaskRemoveFromEventList+0xbc>)
 8005f46:	441a      	add	r2, r3
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f7fe fd93 	bl	8004a7a <vListInsertEnd>
 8005f54:	e005      	b.n	8005f62 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	3318      	adds	r3, #24
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	480e      	ldr	r0, [pc, #56]	; (8005f98 <xTaskRemoveFromEventList+0xc0>)
 8005f5e:	f7fe fd8c 	bl	8004a7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f66:	4b0d      	ldr	r3, [pc, #52]	; (8005f9c <xTaskRemoveFromEventList+0xc4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d905      	bls.n	8005f7c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f70:	2301      	movs	r3, #1
 8005f72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f74:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <xTaskRemoveFromEventList+0xc8>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	e001      	b.n	8005f80 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f80:	697b      	ldr	r3, [r7, #20]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	2000166c 	.word	0x2000166c
 8005f90:	2000164c 	.word	0x2000164c
 8005f94:	20001174 	.word	0x20001174
 8005f98:	20001604 	.word	0x20001604
 8005f9c:	20001170 	.word	0x20001170
 8005fa0:	20001658 	.word	0x20001658

08005fa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fac:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <vTaskInternalSetTimeOutState+0x24>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <vTaskInternalSetTimeOutState+0x28>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	605a      	str	r2, [r3, #4]
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	2000165c 	.word	0x2000165c
 8005fcc:	20001648 	.word	0x20001648

08005fd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10c      	bne.n	8005ffa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	b672      	cpsid	i
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	b662      	cpsie	i
 8005ff4:	613b      	str	r3, [r7, #16]
}
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10c      	bne.n	800601a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	b672      	cpsid	i
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	b662      	cpsie	i
 8006014:	60fb      	str	r3, [r7, #12]
}
 8006016:	bf00      	nop
 8006018:	e7fe      	b.n	8006018 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800601a:	f000 fe77 	bl	8006d0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800601e:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <xTaskCheckForTimeOut+0xc4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006036:	d102      	bne.n	800603e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006038:	2300      	movs	r3, #0
 800603a:	61fb      	str	r3, [r7, #28]
 800603c:	e023      	b.n	8006086 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4b15      	ldr	r3, [pc, #84]	; (8006098 <xTaskCheckForTimeOut+0xc8>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d007      	beq.n	800605a <xTaskCheckForTimeOut+0x8a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	429a      	cmp	r2, r3
 8006052:	d302      	bcc.n	800605a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006054:	2301      	movs	r3, #1
 8006056:	61fb      	str	r3, [r7, #28]
 8006058:	e015      	b.n	8006086 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	429a      	cmp	r2, r3
 8006062:	d20b      	bcs.n	800607c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	1ad2      	subs	r2, r2, r3
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff ff97 	bl	8005fa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006076:	2300      	movs	r3, #0
 8006078:	61fb      	str	r3, [r7, #28]
 800607a:	e004      	b.n	8006086 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006082:	2301      	movs	r3, #1
 8006084:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006086:	f000 fe75 	bl	8006d74 <vPortExitCritical>

	return xReturn;
 800608a:	69fb      	ldr	r3, [r7, #28]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3720      	adds	r7, #32
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20001648 	.word	0x20001648
 8006098:	2000165c 	.word	0x2000165c

0800609c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060a0:	4b03      	ldr	r3, [pc, #12]	; (80060b0 <vTaskMissedYield+0x14>)
 80060a2:	2201      	movs	r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
}
 80060a6:	bf00      	nop
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20001658 	.word	0x20001658

080060b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060bc:	f000 f852 	bl	8006164 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060c0:	4b06      	ldr	r3, [pc, #24]	; (80060dc <prvIdleTask+0x28>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d9f9      	bls.n	80060bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80060c8:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <prvIdleTask+0x2c>)
 80060ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060d8:	e7f0      	b.n	80060bc <prvIdleTask+0x8>
 80060da:	bf00      	nop
 80060dc:	20001174 	.word	0x20001174
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060ea:	2300      	movs	r3, #0
 80060ec:	607b      	str	r3, [r7, #4]
 80060ee:	e00c      	b.n	800610a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4a12      	ldr	r2, [pc, #72]	; (8006144 <prvInitialiseTaskLists+0x60>)
 80060fc:	4413      	add	r3, r2
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fe fc8e 	bl	8004a20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3301      	adds	r3, #1
 8006108:	607b      	str	r3, [r7, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b37      	cmp	r3, #55	; 0x37
 800610e:	d9ef      	bls.n	80060f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006110:	480d      	ldr	r0, [pc, #52]	; (8006148 <prvInitialiseTaskLists+0x64>)
 8006112:	f7fe fc85 	bl	8004a20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006116:	480d      	ldr	r0, [pc, #52]	; (800614c <prvInitialiseTaskLists+0x68>)
 8006118:	f7fe fc82 	bl	8004a20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800611c:	480c      	ldr	r0, [pc, #48]	; (8006150 <prvInitialiseTaskLists+0x6c>)
 800611e:	f7fe fc7f 	bl	8004a20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006122:	480c      	ldr	r0, [pc, #48]	; (8006154 <prvInitialiseTaskLists+0x70>)
 8006124:	f7fe fc7c 	bl	8004a20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006128:	480b      	ldr	r0, [pc, #44]	; (8006158 <prvInitialiseTaskLists+0x74>)
 800612a:	f7fe fc79 	bl	8004a20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800612e:	4b0b      	ldr	r3, [pc, #44]	; (800615c <prvInitialiseTaskLists+0x78>)
 8006130:	4a05      	ldr	r2, [pc, #20]	; (8006148 <prvInitialiseTaskLists+0x64>)
 8006132:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006134:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <prvInitialiseTaskLists+0x7c>)
 8006136:	4a05      	ldr	r2, [pc, #20]	; (800614c <prvInitialiseTaskLists+0x68>)
 8006138:	601a      	str	r2, [r3, #0]
}
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20001174 	.word	0x20001174
 8006148:	200015d4 	.word	0x200015d4
 800614c:	200015e8 	.word	0x200015e8
 8006150:	20001604 	.word	0x20001604
 8006154:	20001618 	.word	0x20001618
 8006158:	20001630 	.word	0x20001630
 800615c:	200015fc 	.word	0x200015fc
 8006160:	20001600 	.word	0x20001600

08006164 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800616a:	e019      	b.n	80061a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800616c:	f000 fdce 	bl	8006d0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006170:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <prvCheckTasksWaitingTermination+0x50>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3304      	adds	r3, #4
 800617c:	4618      	mov	r0, r3
 800617e:	f7fe fcd9 	bl	8004b34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006182:	4b0d      	ldr	r3, [pc, #52]	; (80061b8 <prvCheckTasksWaitingTermination+0x54>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3b01      	subs	r3, #1
 8006188:	4a0b      	ldr	r2, [pc, #44]	; (80061b8 <prvCheckTasksWaitingTermination+0x54>)
 800618a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800618c:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <prvCheckTasksWaitingTermination+0x58>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3b01      	subs	r3, #1
 8006192:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <prvCheckTasksWaitingTermination+0x58>)
 8006194:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006196:	f000 fded 	bl	8006d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f810 	bl	80061c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a0:	4b06      	ldr	r3, [pc, #24]	; (80061bc <prvCheckTasksWaitingTermination+0x58>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e1      	bne.n	800616c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061a8:	bf00      	nop
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20001618 	.word	0x20001618
 80061b8:	20001644 	.word	0x20001644
 80061bc:	2000162c 	.word	0x2000162c

080061c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3354      	adds	r3, #84	; 0x54
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 f8f7 	bl	80073c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d108      	bne.n	80061ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 ff89 	bl	80070f8 <vPortFree>
				vPortFree( pxTCB );
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 ff86 	bl	80070f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061ec:	e01a      	b.n	8006224 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d103      	bne.n	8006200 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 ff7d 	bl	80070f8 <vPortFree>
	}
 80061fe:	e011      	b.n	8006224 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006206:	2b02      	cmp	r3, #2
 8006208:	d00c      	beq.n	8006224 <prvDeleteTCB+0x64>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	b672      	cpsid	i
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	b662      	cpsie	i
 800621e:	60fb      	str	r3, [r7, #12]
}
 8006220:	bf00      	nop
 8006222:	e7fe      	b.n	8006222 <prvDeleteTCB+0x62>
	}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006232:	4b0c      	ldr	r3, [pc, #48]	; (8006264 <prvResetNextTaskUnblockTime+0x38>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d104      	bne.n	8006246 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <prvResetNextTaskUnblockTime+0x3c>)
 800623e:	f04f 32ff 	mov.w	r2, #4294967295
 8006242:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006244:	e008      	b.n	8006258 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006246:	4b07      	ldr	r3, [pc, #28]	; (8006264 <prvResetNextTaskUnblockTime+0x38>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	4a04      	ldr	r2, [pc, #16]	; (8006268 <prvResetNextTaskUnblockTime+0x3c>)
 8006256:	6013      	str	r3, [r2, #0]
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	200015fc 	.word	0x200015fc
 8006268:	20001664 	.word	0x20001664

0800626c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006272:	4b0b      	ldr	r3, [pc, #44]	; (80062a0 <xTaskGetSchedulerState+0x34>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800627a:	2301      	movs	r3, #1
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	e008      	b.n	8006292 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006280:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <xTaskGetSchedulerState+0x38>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d102      	bne.n	800628e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006288:	2302      	movs	r3, #2
 800628a:	607b      	str	r3, [r7, #4]
 800628c:	e001      	b.n	8006292 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800628e:	2300      	movs	r3, #0
 8006290:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006292:	687b      	ldr	r3, [r7, #4]
	}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	20001650 	.word	0x20001650
 80062a4:	2000166c 	.word	0x2000166c

080062a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d05a      	beq.n	8006374 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062be:	4b30      	ldr	r3, [pc, #192]	; (8006380 <xTaskPriorityDisinherit+0xd8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d00c      	beq.n	80062e2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	b672      	cpsid	i
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	b662      	cpsie	i
 80062dc:	60fb      	str	r3, [r7, #12]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10c      	bne.n	8006304 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	b672      	cpsid	i
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	b662      	cpsie	i
 80062fe:	60bb      	str	r3, [r7, #8]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006308:	1e5a      	subs	r2, r3, #1
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006316:	429a      	cmp	r2, r3
 8006318:	d02c      	beq.n	8006374 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631e:	2b00      	cmp	r3, #0
 8006320:	d128      	bne.n	8006374 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	3304      	adds	r3, #4
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fc04 	bl	8004b34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006344:	4b0f      	ldr	r3, [pc, #60]	; (8006384 <xTaskPriorityDisinherit+0xdc>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d903      	bls.n	8006354 <xTaskPriorityDisinherit+0xac>
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	4a0c      	ldr	r2, [pc, #48]	; (8006384 <xTaskPriorityDisinherit+0xdc>)
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4a09      	ldr	r2, [pc, #36]	; (8006388 <xTaskPriorityDisinherit+0xe0>)
 8006362:	441a      	add	r2, r3
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	3304      	adds	r3, #4
 8006368:	4619      	mov	r1, r3
 800636a:	4610      	mov	r0, r2
 800636c:	f7fe fb85 	bl	8004a7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006370:	2301      	movs	r3, #1
 8006372:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006374:	697b      	ldr	r3, [r7, #20]
	}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20001170 	.word	0x20001170
 8006384:	2000164c 	.word	0x2000164c
 8006388:	20001174 	.word	0x20001174

0800638c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006396:	4b21      	ldr	r3, [pc, #132]	; (800641c <prvAddCurrentTaskToDelayedList+0x90>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800639c:	4b20      	ldr	r3, [pc, #128]	; (8006420 <prvAddCurrentTaskToDelayedList+0x94>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3304      	adds	r3, #4
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fbc6 	bl	8004b34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d10a      	bne.n	80063c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d007      	beq.n	80063c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063b6:	4b1a      	ldr	r3, [pc, #104]	; (8006420 <prvAddCurrentTaskToDelayedList+0x94>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4619      	mov	r1, r3
 80063be:	4819      	ldr	r0, [pc, #100]	; (8006424 <prvAddCurrentTaskToDelayedList+0x98>)
 80063c0:	f7fe fb5b 	bl	8004a7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063c4:	e026      	b.n	8006414 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4413      	add	r3, r2
 80063cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063ce:	4b14      	ldr	r3, [pc, #80]	; (8006420 <prvAddCurrentTaskToDelayedList+0x94>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d209      	bcs.n	80063f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063de:	4b12      	ldr	r3, [pc, #72]	; (8006428 <prvAddCurrentTaskToDelayedList+0x9c>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4b0f      	ldr	r3, [pc, #60]	; (8006420 <prvAddCurrentTaskToDelayedList+0x94>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3304      	adds	r3, #4
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f7fe fb69 	bl	8004ac2 <vListInsert>
}
 80063f0:	e010      	b.n	8006414 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063f2:	4b0e      	ldr	r3, [pc, #56]	; (800642c <prvAddCurrentTaskToDelayedList+0xa0>)
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <prvAddCurrentTaskToDelayedList+0x94>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3304      	adds	r3, #4
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f7fe fb5f 	bl	8004ac2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006404:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	429a      	cmp	r2, r3
 800640c:	d202      	bcs.n	8006414 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800640e:	4a08      	ldr	r2, [pc, #32]	; (8006430 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6013      	str	r3, [r2, #0]
}
 8006414:	bf00      	nop
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20001648 	.word	0x20001648
 8006420:	20001170 	.word	0x20001170
 8006424:	20001630 	.word	0x20001630
 8006428:	20001600 	.word	0x20001600
 800642c:	200015fc 	.word	0x200015fc
 8006430:	20001664 	.word	0x20001664

08006434 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800643e:	f000 fb15 	bl	8006a6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006442:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <xTimerCreateTimerTask+0x84>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d021      	beq.n	800648e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006452:	1d3a      	adds	r2, r7, #4
 8006454:	f107 0108 	add.w	r1, r7, #8
 8006458:	f107 030c 	add.w	r3, r7, #12
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe fac5 	bl	80049ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	9202      	str	r2, [sp, #8]
 800646a:	9301      	str	r3, [sp, #4]
 800646c:	2302      	movs	r3, #2
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	2300      	movs	r3, #0
 8006472:	460a      	mov	r2, r1
 8006474:	4911      	ldr	r1, [pc, #68]	; (80064bc <xTimerCreateTimerTask+0x88>)
 8006476:	4812      	ldr	r0, [pc, #72]	; (80064c0 <xTimerCreateTimerTask+0x8c>)
 8006478:	f7ff f890 	bl	800559c <xTaskCreateStatic>
 800647c:	4603      	mov	r3, r0
 800647e:	4a11      	ldr	r2, [pc, #68]	; (80064c4 <xTimerCreateTimerTask+0x90>)
 8006480:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006482:	4b10      	ldr	r3, [pc, #64]	; (80064c4 <xTimerCreateTimerTask+0x90>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800648a:	2301      	movs	r3, #1
 800648c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10c      	bne.n	80064ae <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	b672      	cpsid	i
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	b662      	cpsie	i
 80064a8:	613b      	str	r3, [r7, #16]
}
 80064aa:	bf00      	nop
 80064ac:	e7fe      	b.n	80064ac <xTimerCreateTimerTask+0x78>
	return xReturn;
 80064ae:	697b      	ldr	r3, [r7, #20]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	200016a0 	.word	0x200016a0
 80064bc:	08007554 	.word	0x08007554
 80064c0:	08006605 	.word	0x08006605
 80064c4:	200016a4 	.word	0x200016a4

080064c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10c      	bne.n	80064fa <xTimerGenericCommand+0x32>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	b672      	cpsid	i
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	b662      	cpsie	i
 80064f4:	623b      	str	r3, [r7, #32]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80064fa:	4b1a      	ldr	r3, [pc, #104]	; (8006564 <xTimerGenericCommand+0x9c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d02a      	beq.n	8006558 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b05      	cmp	r3, #5
 8006512:	dc18      	bgt.n	8006546 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006514:	f7ff feaa 	bl	800626c <xTaskGetSchedulerState>
 8006518:	4603      	mov	r3, r0
 800651a:	2b02      	cmp	r3, #2
 800651c:	d109      	bne.n	8006532 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800651e:	4b11      	ldr	r3, [pc, #68]	; (8006564 <xTimerGenericCommand+0x9c>)
 8006520:	6818      	ldr	r0, [r3, #0]
 8006522:	f107 0110 	add.w	r1, r7, #16
 8006526:	2300      	movs	r3, #0
 8006528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652a:	f7fe fc3d 	bl	8004da8 <xQueueGenericSend>
 800652e:	6278      	str	r0, [r7, #36]	; 0x24
 8006530:	e012      	b.n	8006558 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006532:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <xTimerGenericCommand+0x9c>)
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	f107 0110 	add.w	r1, r7, #16
 800653a:	2300      	movs	r3, #0
 800653c:	2200      	movs	r2, #0
 800653e:	f7fe fc33 	bl	8004da8 <xQueueGenericSend>
 8006542:	6278      	str	r0, [r7, #36]	; 0x24
 8006544:	e008      	b.n	8006558 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006546:	4b07      	ldr	r3, [pc, #28]	; (8006564 <xTimerGenericCommand+0x9c>)
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	f107 0110 	add.w	r1, r7, #16
 800654e:	2300      	movs	r3, #0
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	f7fe fd2f 	bl	8004fb4 <xQueueGenericSendFromISR>
 8006556:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800655a:	4618      	mov	r0, r3
 800655c:	3728      	adds	r7, #40	; 0x28
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	200016a0 	.word	0x200016a0

08006568 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af02      	add	r7, sp, #8
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006572:	4b23      	ldr	r3, [pc, #140]	; (8006600 <prvProcessExpiredTimer+0x98>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	3304      	adds	r3, #4
 8006580:	4618      	mov	r0, r3
 8006582:	f7fe fad7 	bl	8004b34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	d024      	beq.n	80065de <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	699a      	ldr	r2, [r3, #24]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	18d1      	adds	r1, r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	6978      	ldr	r0, [r7, #20]
 80065a2:	f000 f8d3 	bl	800674c <prvInsertTimerInActiveList>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d021      	beq.n	80065f0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065ac:	2300      	movs	r3, #0
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	2300      	movs	r3, #0
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	2100      	movs	r1, #0
 80065b6:	6978      	ldr	r0, [r7, #20]
 80065b8:	f7ff ff86 	bl	80064c8 <xTimerGenericCommand>
 80065bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d115      	bne.n	80065f0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	b672      	cpsid	i
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	b662      	cpsie	i
 80065d8:	60fb      	str	r3, [r7, #12]
}
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065e4:	f023 0301 	bic.w	r3, r3, #1
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	6978      	ldr	r0, [r7, #20]
 80065f6:	4798      	blx	r3
}
 80065f8:	bf00      	nop
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20001698 	.word	0x20001698

08006604 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800660c:	f107 0308 	add.w	r3, r7, #8
 8006610:	4618      	mov	r0, r3
 8006612:	f000 f857 	bl	80066c4 <prvGetNextExpireTime>
 8006616:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4619      	mov	r1, r3
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f803 	bl	8006628 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006622:	f000 f8d5 	bl	80067d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006626:	e7f1      	b.n	800660c <prvTimerTask+0x8>

08006628 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006632:	f7ff fa1d 	bl	8005a70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006636:	f107 0308 	add.w	r3, r7, #8
 800663a:	4618      	mov	r0, r3
 800663c:	f000 f866 	bl	800670c <prvSampleTimeNow>
 8006640:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d130      	bne.n	80066aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <prvProcessTimerOrBlockTask+0x3c>
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	429a      	cmp	r2, r3
 8006654:	d806      	bhi.n	8006664 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006656:	f7ff fa19 	bl	8005a8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800665a:	68f9      	ldr	r1, [r7, #12]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff ff83 	bl	8006568 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006662:	e024      	b.n	80066ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d008      	beq.n	800667c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800666a:	4b13      	ldr	r3, [pc, #76]	; (80066b8 <prvProcessTimerOrBlockTask+0x90>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <prvProcessTimerOrBlockTask+0x50>
 8006674:	2301      	movs	r3, #1
 8006676:	e000      	b.n	800667a <prvProcessTimerOrBlockTask+0x52>
 8006678:	2300      	movs	r3, #0
 800667a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800667c:	4b0f      	ldr	r3, [pc, #60]	; (80066bc <prvProcessTimerOrBlockTask+0x94>)
 800667e:	6818      	ldr	r0, [r3, #0]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	4619      	mov	r1, r3
 800668a:	f7fe ff53 	bl	8005534 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800668e:	f7ff f9fd 	bl	8005a8c <xTaskResumeAll>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10a      	bne.n	80066ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006698:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <prvProcessTimerOrBlockTask+0x98>)
 800669a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	f3bf 8f6f 	isb	sy
}
 80066a8:	e001      	b.n	80066ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066aa:	f7ff f9ef 	bl	8005a8c <xTaskResumeAll>
}
 80066ae:	bf00      	nop
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	2000169c 	.word	0x2000169c
 80066bc:	200016a0 	.word	0x200016a0
 80066c0:	e000ed04 	.word	0xe000ed04

080066c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066cc:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <prvGetNextExpireTime+0x44>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <prvGetNextExpireTime+0x16>
 80066d6:	2201      	movs	r2, #1
 80066d8:	e000      	b.n	80066dc <prvGetNextExpireTime+0x18>
 80066da:	2200      	movs	r2, #0
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d105      	bne.n	80066f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066e8:	4b07      	ldr	r3, [pc, #28]	; (8006708 <prvGetNextExpireTime+0x44>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	e001      	b.n	80066f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066f8:	68fb      	ldr	r3, [r7, #12]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	20001698 	.word	0x20001698

0800670c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006714:	f7ff fa5a 	bl	8005bcc <xTaskGetTickCount>
 8006718:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800671a:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <prvSampleTimeNow+0x3c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	429a      	cmp	r2, r3
 8006722:	d205      	bcs.n	8006730 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006724:	f000 f93c 	bl	80069a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	e002      	b.n	8006736 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006736:	4a04      	ldr	r2, [pc, #16]	; (8006748 <prvSampleTimeNow+0x3c>)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800673c:	68fb      	ldr	r3, [r7, #12]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	200016a8 	.word	0x200016a8

0800674c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800675a:	2300      	movs	r3, #0
 800675c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	429a      	cmp	r2, r3
 8006770:	d812      	bhi.n	8006798 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	1ad2      	subs	r2, r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	429a      	cmp	r2, r3
 800677e:	d302      	bcc.n	8006786 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006780:	2301      	movs	r3, #1
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	e01b      	b.n	80067be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006786:	4b10      	ldr	r3, [pc, #64]	; (80067c8 <prvInsertTimerInActiveList+0x7c>)
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3304      	adds	r3, #4
 800678e:	4619      	mov	r1, r3
 8006790:	4610      	mov	r0, r2
 8006792:	f7fe f996 	bl	8004ac2 <vListInsert>
 8006796:	e012      	b.n	80067be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d206      	bcs.n	80067ae <prvInsertTimerInActiveList+0x62>
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d302      	bcc.n	80067ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067a8:	2301      	movs	r3, #1
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	e007      	b.n	80067be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067ae:	4b07      	ldr	r3, [pc, #28]	; (80067cc <prvInsertTimerInActiveList+0x80>)
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4619      	mov	r1, r3
 80067b8:	4610      	mov	r0, r2
 80067ba:	f7fe f982 	bl	8004ac2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067be:	697b      	ldr	r3, [r7, #20]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	2000169c 	.word	0x2000169c
 80067cc:	20001698 	.word	0x20001698

080067d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08e      	sub	sp, #56	; 0x38
 80067d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067d6:	e0d0      	b.n	800697a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	da1a      	bge.n	8006814 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067de:	1d3b      	adds	r3, r7, #4
 80067e0:	3304      	adds	r3, #4
 80067e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10c      	bne.n	8006804 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	b672      	cpsid	i
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	b662      	cpsie	i
 80067fe:	61fb      	str	r3, [r7, #28]
}
 8006800:	bf00      	nop
 8006802:	e7fe      	b.n	8006802 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800680a:	6850      	ldr	r0, [r2, #4]
 800680c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800680e:	6892      	ldr	r2, [r2, #8]
 8006810:	4611      	mov	r1, r2
 8006812:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	f2c0 80ae 	blt.w	8006978 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d004      	beq.n	8006832 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	3304      	adds	r3, #4
 800682c:	4618      	mov	r0, r3
 800682e:	f7fe f981 	bl	8004b34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006832:	463b      	mov	r3, r7
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff ff69 	bl	800670c <prvSampleTimeNow>
 800683a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b09      	cmp	r3, #9
 8006840:	f200 809b 	bhi.w	800697a <prvProcessReceivedCommands+0x1aa>
 8006844:	a201      	add	r2, pc, #4	; (adr r2, 800684c <prvProcessReceivedCommands+0x7c>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	08006875 	.word	0x08006875
 8006850:	08006875 	.word	0x08006875
 8006854:	08006875 	.word	0x08006875
 8006858:	080068ed 	.word	0x080068ed
 800685c:	08006901 	.word	0x08006901
 8006860:	0800694f 	.word	0x0800694f
 8006864:	08006875 	.word	0x08006875
 8006868:	08006875 	.word	0x08006875
 800686c:	080068ed 	.word	0x080068ed
 8006870:	08006901 	.word	0x08006901
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	18d1      	adds	r1, r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006894:	f7ff ff5a 	bl	800674c <prvInsertTimerInActiveList>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d06d      	beq.n	800697a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d062      	beq.n	800697a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	441a      	add	r2, r3
 80068bc:	2300      	movs	r3, #0
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	2300      	movs	r3, #0
 80068c2:	2100      	movs	r1, #0
 80068c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068c6:	f7ff fdff 	bl	80064c8 <xTimerGenericCommand>
 80068ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d153      	bne.n	800697a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	b672      	cpsid	i
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	b662      	cpsie	i
 80068e6:	61bb      	str	r3, [r7, #24]
}
 80068e8:	bf00      	nop
 80068ea:	e7fe      	b.n	80068ea <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068f2:	f023 0301 	bic.w	r3, r3, #1
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80068fe:	e03c      	b.n	800697a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006906:	f043 0301 	orr.w	r3, r3, #1
 800690a:	b2da      	uxtb	r2, r3
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006916:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10c      	bne.n	800693a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	b672      	cpsid	i
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	b662      	cpsie	i
 8006934:	617b      	str	r3, [r7, #20]
}
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	18d1      	adds	r1, r2, r3
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006948:	f7ff ff00 	bl	800674c <prvInsertTimerInActiveList>
					break;
 800694c:	e015      	b.n	800697a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d103      	bne.n	8006964 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800695c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800695e:	f000 fbcb 	bl	80070f8 <vPortFree>
 8006962:	e00a      	b.n	800697a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800696a:	f023 0301 	bic.w	r3, r3, #1
 800696e:	b2da      	uxtb	r2, r3
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006976:	e000      	b.n	800697a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006978:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800697a:	4b08      	ldr	r3, [pc, #32]	; (800699c <prvProcessReceivedCommands+0x1cc>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	1d39      	adds	r1, r7, #4
 8006980:	2200      	movs	r2, #0
 8006982:	4618      	mov	r0, r3
 8006984:	f7fe fbb6 	bl	80050f4 <xQueueReceive>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	f47f af24 	bne.w	80067d8 <prvProcessReceivedCommands+0x8>
	}
}
 8006990:	bf00      	nop
 8006992:	bf00      	nop
 8006994:	3730      	adds	r7, #48	; 0x30
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	200016a0 	.word	0x200016a0

080069a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b088      	sub	sp, #32
 80069a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069a6:	e04a      	b.n	8006a3e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069a8:	4b2e      	ldr	r3, [pc, #184]	; (8006a64 <prvSwitchTimerLists+0xc4>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b2:	4b2c      	ldr	r3, [pc, #176]	; (8006a64 <prvSwitchTimerLists+0xc4>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3304      	adds	r3, #4
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe f8b7 	bl	8004b34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d030      	beq.n	8006a3e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4413      	add	r3, r2
 80069e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d90e      	bls.n	8006a0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069fa:	4b1a      	ldr	r3, [pc, #104]	; (8006a64 <prvSwitchTimerLists+0xc4>)
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f7fe f85c 	bl	8004ac2 <vListInsert>
 8006a0a:	e018      	b.n	8006a3e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	2300      	movs	r3, #0
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	2100      	movs	r1, #0
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f7ff fd56 	bl	80064c8 <xTimerGenericCommand>
 8006a1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10c      	bne.n	8006a3e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	b672      	cpsid	i
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	b662      	cpsie	i
 8006a38:	603b      	str	r3, [r7, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	e7fe      	b.n	8006a3c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a3e:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <prvSwitchTimerLists+0xc4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1af      	bne.n	80069a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a48:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <prvSwitchTimerLists+0xc4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a4e:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <prvSwitchTimerLists+0xc8>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a04      	ldr	r2, [pc, #16]	; (8006a64 <prvSwitchTimerLists+0xc4>)
 8006a54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a56:	4a04      	ldr	r2, [pc, #16]	; (8006a68 <prvSwitchTimerLists+0xc8>)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	6013      	str	r3, [r2, #0]
}
 8006a5c:	bf00      	nop
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	20001698 	.word	0x20001698
 8006a68:	2000169c 	.word	0x2000169c

08006a6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a72:	f000 f94b 	bl	8006d0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a76:	4b15      	ldr	r3, [pc, #84]	; (8006acc <prvCheckForValidListAndQueue+0x60>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d120      	bne.n	8006ac0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a7e:	4814      	ldr	r0, [pc, #80]	; (8006ad0 <prvCheckForValidListAndQueue+0x64>)
 8006a80:	f7fd ffce 	bl	8004a20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a84:	4813      	ldr	r0, [pc, #76]	; (8006ad4 <prvCheckForValidListAndQueue+0x68>)
 8006a86:	f7fd ffcb 	bl	8004a20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a8a:	4b13      	ldr	r3, [pc, #76]	; (8006ad8 <prvCheckForValidListAndQueue+0x6c>)
 8006a8c:	4a10      	ldr	r2, [pc, #64]	; (8006ad0 <prvCheckForValidListAndQueue+0x64>)
 8006a8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a90:	4b12      	ldr	r3, [pc, #72]	; (8006adc <prvCheckForValidListAndQueue+0x70>)
 8006a92:	4a10      	ldr	r2, [pc, #64]	; (8006ad4 <prvCheckForValidListAndQueue+0x68>)
 8006a94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a96:	2300      	movs	r3, #0
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	4b11      	ldr	r3, [pc, #68]	; (8006ae0 <prvCheckForValidListAndQueue+0x74>)
 8006a9c:	4a11      	ldr	r2, [pc, #68]	; (8006ae4 <prvCheckForValidListAndQueue+0x78>)
 8006a9e:	2110      	movs	r1, #16
 8006aa0:	200a      	movs	r0, #10
 8006aa2:	f7fe f8db 	bl	8004c5c <xQueueGenericCreateStatic>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4a08      	ldr	r2, [pc, #32]	; (8006acc <prvCheckForValidListAndQueue+0x60>)
 8006aaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006aac:	4b07      	ldr	r3, [pc, #28]	; (8006acc <prvCheckForValidListAndQueue+0x60>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ab4:	4b05      	ldr	r3, [pc, #20]	; (8006acc <prvCheckForValidListAndQueue+0x60>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	490b      	ldr	r1, [pc, #44]	; (8006ae8 <prvCheckForValidListAndQueue+0x7c>)
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fd10 	bl	80054e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ac0:	f000 f958 	bl	8006d74 <vPortExitCritical>
}
 8006ac4:	bf00      	nop
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	200016a0 	.word	0x200016a0
 8006ad0:	20001670 	.word	0x20001670
 8006ad4:	20001684 	.word	0x20001684
 8006ad8:	20001698 	.word	0x20001698
 8006adc:	2000169c 	.word	0x2000169c
 8006ae0:	2000174c 	.word	0x2000174c
 8006ae4:	200016ac 	.word	0x200016ac
 8006ae8:	0800755c 	.word	0x0800755c

08006aec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3b04      	subs	r3, #4
 8006afc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3b04      	subs	r3, #4
 8006b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f023 0201 	bic.w	r2, r3, #1
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3b04      	subs	r3, #4
 8006b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b1c:	4a0c      	ldr	r2, [pc, #48]	; (8006b50 <pxPortInitialiseStack+0x64>)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3b14      	subs	r3, #20
 8006b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3b04      	subs	r3, #4
 8006b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f06f 0202 	mvn.w	r2, #2
 8006b3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3b20      	subs	r3, #32
 8006b40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b42:	68fb      	ldr	r3, [r7, #12]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	08006b55 	.word	0x08006b55

08006b54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b5e:	4b14      	ldr	r3, [pc, #80]	; (8006bb0 <prvTaskExitError+0x5c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b66:	d00c      	beq.n	8006b82 <prvTaskExitError+0x2e>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	b672      	cpsid	i
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	b662      	cpsie	i
 8006b7c:	60fb      	str	r3, [r7, #12]
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <prvTaskExitError+0x2c>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b86:	b672      	cpsid	i
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	b662      	cpsie	i
 8006b96:	60bb      	str	r3, [r7, #8]
}
 8006b98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b9a:	bf00      	nop
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0fc      	beq.n	8006b9c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ba2:	bf00      	nop
 8006ba4:	bf00      	nop
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	2000000c 	.word	0x2000000c
	...

08006bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006bc0:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <pxCurrentTCBConst2>)
 8006bc2:	6819      	ldr	r1, [r3, #0]
 8006bc4:	6808      	ldr	r0, [r1, #0]
 8006bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bca:	f380 8809 	msr	PSP, r0
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f04f 0000 	mov.w	r0, #0
 8006bd6:	f380 8811 	msr	BASEPRI, r0
 8006bda:	4770      	bx	lr
 8006bdc:	f3af 8000 	nop.w

08006be0 <pxCurrentTCBConst2>:
 8006be0:	20001170 	.word	0x20001170
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006be4:	bf00      	nop
 8006be6:	bf00      	nop

08006be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006be8:	4808      	ldr	r0, [pc, #32]	; (8006c0c <prvPortStartFirstTask+0x24>)
 8006bea:	6800      	ldr	r0, [r0, #0]
 8006bec:	6800      	ldr	r0, [r0, #0]
 8006bee:	f380 8808 	msr	MSP, r0
 8006bf2:	f04f 0000 	mov.w	r0, #0
 8006bf6:	f380 8814 	msr	CONTROL, r0
 8006bfa:	b662      	cpsie	i
 8006bfc:	b661      	cpsie	f
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	df00      	svc	0
 8006c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c0a:	bf00      	nop
 8006c0c:	e000ed08 	.word	0xe000ed08

08006c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c16:	4b37      	ldr	r3, [pc, #220]	; (8006cf4 <xPortStartScheduler+0xe4>)
 8006c18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	22ff      	movs	r2, #255	; 0xff
 8006c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	4b2f      	ldr	r3, [pc, #188]	; (8006cf8 <xPortStartScheduler+0xe8>)
 8006c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c3e:	4b2f      	ldr	r3, [pc, #188]	; (8006cfc <xPortStartScheduler+0xec>)
 8006c40:	2207      	movs	r2, #7
 8006c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c44:	e009      	b.n	8006c5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006c46:	4b2d      	ldr	r3, [pc, #180]	; (8006cfc <xPortStartScheduler+0xec>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	4a2b      	ldr	r2, [pc, #172]	; (8006cfc <xPortStartScheduler+0xec>)
 8006c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c5a:	78fb      	ldrb	r3, [r7, #3]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c62:	2b80      	cmp	r3, #128	; 0x80
 8006c64:	d0ef      	beq.n	8006c46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c66:	4b25      	ldr	r3, [pc, #148]	; (8006cfc <xPortStartScheduler+0xec>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f1c3 0307 	rsb	r3, r3, #7
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d00c      	beq.n	8006c8c <xPortStartScheduler+0x7c>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	b672      	cpsid	i
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	b662      	cpsie	i
 8006c86:	60bb      	str	r3, [r7, #8]
}
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c8c:	4b1b      	ldr	r3, [pc, #108]	; (8006cfc <xPortStartScheduler+0xec>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	4a1a      	ldr	r2, [pc, #104]	; (8006cfc <xPortStartScheduler+0xec>)
 8006c94:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c96:	4b19      	ldr	r3, [pc, #100]	; (8006cfc <xPortStartScheduler+0xec>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c9e:	4a17      	ldr	r2, [pc, #92]	; (8006cfc <xPortStartScheduler+0xec>)
 8006ca0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006caa:	4b15      	ldr	r3, [pc, #84]	; (8006d00 <xPortStartScheduler+0xf0>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a14      	ldr	r2, [pc, #80]	; (8006d00 <xPortStartScheduler+0xf0>)
 8006cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006cb4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006cb6:	4b12      	ldr	r3, [pc, #72]	; (8006d00 <xPortStartScheduler+0xf0>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a11      	ldr	r2, [pc, #68]	; (8006d00 <xPortStartScheduler+0xf0>)
 8006cbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006cc0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006cc2:	f000 f8dd 	bl	8006e80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <xPortStartScheduler+0xf4>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ccc:	f000 f8fc 	bl	8006ec8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006cd0:	4b0d      	ldr	r3, [pc, #52]	; (8006d08 <xPortStartScheduler+0xf8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a0c      	ldr	r2, [pc, #48]	; (8006d08 <xPortStartScheduler+0xf8>)
 8006cd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006cda:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006cdc:	f7ff ff84 	bl	8006be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ce0:	f7ff f840 	bl	8005d64 <vTaskSwitchContext>
	prvTaskExitError();
 8006ce4:	f7ff ff36 	bl	8006b54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	e000e400 	.word	0xe000e400
 8006cf8:	2000179c 	.word	0x2000179c
 8006cfc:	200017a0 	.word	0x200017a0
 8006d00:	e000ed20 	.word	0xe000ed20
 8006d04:	2000000c 	.word	0x2000000c
 8006d08:	e000ef34 	.word	0xe000ef34

08006d0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	b672      	cpsid	i
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	b662      	cpsie	i
 8006d26:	607b      	str	r3, [r7, #4]
}
 8006d28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d2a:	4b10      	ldr	r3, [pc, #64]	; (8006d6c <vPortEnterCritical+0x60>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	4a0e      	ldr	r2, [pc, #56]	; (8006d6c <vPortEnterCritical+0x60>)
 8006d32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d34:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <vPortEnterCritical+0x60>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d111      	bne.n	8006d60 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d3c:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <vPortEnterCritical+0x64>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00c      	beq.n	8006d60 <vPortEnterCritical+0x54>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	b672      	cpsid	i
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	b662      	cpsie	i
 8006d5a:	603b      	str	r3, [r7, #0]
}
 8006d5c:	bf00      	nop
 8006d5e:	e7fe      	b.n	8006d5e <vPortEnterCritical+0x52>
	}
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	2000000c 	.word	0x2000000c
 8006d70:	e000ed04 	.word	0xe000ed04

08006d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d7a:	4b13      	ldr	r3, [pc, #76]	; (8006dc8 <vPortExitCritical+0x54>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10c      	bne.n	8006d9c <vPortExitCritical+0x28>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	b672      	cpsid	i
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	b662      	cpsie	i
 8006d96:	607b      	str	r3, [r7, #4]
}
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <vPortExitCritical+0x54>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	4a09      	ldr	r2, [pc, #36]	; (8006dc8 <vPortExitCritical+0x54>)
 8006da4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006da6:	4b08      	ldr	r3, [pc, #32]	; (8006dc8 <vPortExitCritical+0x54>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d105      	bne.n	8006dba <vPortExitCritical+0x46>
 8006dae:	2300      	movs	r3, #0
 8006db0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	f383 8811 	msr	BASEPRI, r3
}
 8006db8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	2000000c 	.word	0x2000000c
 8006dcc:	00000000 	.word	0x00000000

08006dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006dd0:	f3ef 8009 	mrs	r0, PSP
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	4b15      	ldr	r3, [pc, #84]	; (8006e30 <pxCurrentTCBConst>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	f01e 0f10 	tst.w	lr, #16
 8006de0:	bf08      	it	eq
 8006de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dea:	6010      	str	r0, [r2, #0]
 8006dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006df4:	b672      	cpsid	i
 8006df6:	f380 8811 	msr	BASEPRI, r0
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	b662      	cpsie	i
 8006e04:	f7fe ffae 	bl	8005d64 <vTaskSwitchContext>
 8006e08:	f04f 0000 	mov.w	r0, #0
 8006e0c:	f380 8811 	msr	BASEPRI, r0
 8006e10:	bc09      	pop	{r0, r3}
 8006e12:	6819      	ldr	r1, [r3, #0]
 8006e14:	6808      	ldr	r0, [r1, #0]
 8006e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1a:	f01e 0f10 	tst.w	lr, #16
 8006e1e:	bf08      	it	eq
 8006e20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e24:	f380 8809 	msr	PSP, r0
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop

08006e30 <pxCurrentTCBConst>:
 8006e30:	20001170 	.word	0x20001170
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop

08006e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	b672      	cpsid	i
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	b662      	cpsie	i
 8006e52:	607b      	str	r3, [r7, #4]
}
 8006e54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e56:	f7fe fec9 	bl	8005bec <xTaskIncrementTick>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e60:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <SysTick_Handler+0x44>)
 8006e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	2300      	movs	r3, #0
 8006e6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	f383 8811 	msr	BASEPRI, r3
}
 8006e72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e74:	bf00      	nop
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	e000ed04 	.word	0xe000ed04

08006e80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e80:	b480      	push	{r7}
 8006e82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e84:	4b0b      	ldr	r3, [pc, #44]	; (8006eb4 <vPortSetupTimerInterrupt+0x34>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e8a:	4b0b      	ldr	r3, [pc, #44]	; (8006eb8 <vPortSetupTimerInterrupt+0x38>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e90:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <vPortSetupTimerInterrupt+0x3c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a0a      	ldr	r2, [pc, #40]	; (8006ec0 <vPortSetupTimerInterrupt+0x40>)
 8006e96:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9a:	099b      	lsrs	r3, r3, #6
 8006e9c:	4a09      	ldr	r2, [pc, #36]	; (8006ec4 <vPortSetupTimerInterrupt+0x44>)
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ea2:	4b04      	ldr	r3, [pc, #16]	; (8006eb4 <vPortSetupTimerInterrupt+0x34>)
 8006ea4:	2207      	movs	r2, #7
 8006ea6:	601a      	str	r2, [r3, #0]
}
 8006ea8:	bf00      	nop
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	e000e010 	.word	0xe000e010
 8006eb8:	e000e018 	.word	0xe000e018
 8006ebc:	20000000 	.word	0x20000000
 8006ec0:	10624dd3 	.word	0x10624dd3
 8006ec4:	e000e014 	.word	0xe000e014

08006ec8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ec8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ed8 <vPortEnableVFP+0x10>
 8006ecc:	6801      	ldr	r1, [r0, #0]
 8006ece:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ed2:	6001      	str	r1, [r0, #0]
 8006ed4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ed6:	bf00      	nop
 8006ed8:	e000ed88 	.word	0xe000ed88

08006edc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ee2:	f3ef 8305 	mrs	r3, IPSR
 8006ee6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b0f      	cmp	r3, #15
 8006eec:	d916      	bls.n	8006f1c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006eee:	4a19      	ldr	r2, [pc, #100]	; (8006f54 <vPortValidateInterruptPriority+0x78>)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ef8:	4b17      	ldr	r3, [pc, #92]	; (8006f58 <vPortValidateInterruptPriority+0x7c>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	7afa      	ldrb	r2, [r7, #11]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d20c      	bcs.n	8006f1c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	b672      	cpsid	i
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	b662      	cpsie	i
 8006f16:	607b      	str	r3, [r7, #4]
}
 8006f18:	bf00      	nop
 8006f1a:	e7fe      	b.n	8006f1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f1c:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <vPortValidateInterruptPriority+0x80>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f24:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <vPortValidateInterruptPriority+0x84>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d90c      	bls.n	8006f46 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	b672      	cpsid	i
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	b662      	cpsie	i
 8006f40:	603b      	str	r3, [r7, #0]
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <vPortValidateInterruptPriority+0x68>
	}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	e000e3f0 	.word	0xe000e3f0
 8006f58:	2000179c 	.word	0x2000179c
 8006f5c:	e000ed0c 	.word	0xe000ed0c
 8006f60:	200017a0 	.word	0x200017a0

08006f64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08a      	sub	sp, #40	; 0x28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f70:	f7fe fd7e 	bl	8005a70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f74:	4b5b      	ldr	r3, [pc, #364]	; (80070e4 <pvPortMalloc+0x180>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f7c:	f000 f91a 	bl	80071b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f80:	4b59      	ldr	r3, [pc, #356]	; (80070e8 <pvPortMalloc+0x184>)
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4013      	ands	r3, r2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f040 8092 	bne.w	80070b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d01f      	beq.n	8006fd4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006f94:	2208      	movs	r2, #8
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4413      	add	r3, r2
 8006f9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d016      	beq.n	8006fd4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f023 0307 	bic.w	r3, r3, #7
 8006fac:	3308      	adds	r3, #8
 8006fae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00c      	beq.n	8006fd4 <pvPortMalloc+0x70>
	__asm volatile
 8006fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbe:	b672      	cpsid	i
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	b662      	cpsie	i
 8006fce:	617b      	str	r3, [r7, #20]
}
 8006fd0:	bf00      	nop
 8006fd2:	e7fe      	b.n	8006fd2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d06b      	beq.n	80070b2 <pvPortMalloc+0x14e>
 8006fda:	4b44      	ldr	r3, [pc, #272]	; (80070ec <pvPortMalloc+0x188>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d866      	bhi.n	80070b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fe4:	4b42      	ldr	r3, [pc, #264]	; (80070f0 <pvPortMalloc+0x18c>)
 8006fe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006fe8:	4b41      	ldr	r3, [pc, #260]	; (80070f0 <pvPortMalloc+0x18c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fee:	e004      	b.n	8006ffa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	429a      	cmp	r2, r3
 8007002:	d903      	bls.n	800700c <pvPortMalloc+0xa8>
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1f1      	bne.n	8006ff0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800700c:	4b35      	ldr	r3, [pc, #212]	; (80070e4 <pvPortMalloc+0x180>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007012:	429a      	cmp	r2, r3
 8007014:	d04d      	beq.n	80070b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2208      	movs	r2, #8
 800701c:	4413      	add	r3, r2
 800701e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	1ad2      	subs	r2, r2, r3
 8007030:	2308      	movs	r3, #8
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	429a      	cmp	r2, r3
 8007036:	d921      	bls.n	800707c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4413      	add	r3, r2
 800703e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00c      	beq.n	8007064 <pvPortMalloc+0x100>
	__asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704e:	b672      	cpsid	i
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	b662      	cpsie	i
 800705e:	613b      	str	r3, [r7, #16]
}
 8007060:	bf00      	nop
 8007062:	e7fe      	b.n	8007062 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	1ad2      	subs	r2, r2, r3
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007076:	69b8      	ldr	r0, [r7, #24]
 8007078:	f000 f8fe 	bl	8007278 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800707c:	4b1b      	ldr	r3, [pc, #108]	; (80070ec <pvPortMalloc+0x188>)
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	4a19      	ldr	r2, [pc, #100]	; (80070ec <pvPortMalloc+0x188>)
 8007088:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800708a:	4b18      	ldr	r3, [pc, #96]	; (80070ec <pvPortMalloc+0x188>)
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	4b19      	ldr	r3, [pc, #100]	; (80070f4 <pvPortMalloc+0x190>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d203      	bcs.n	800709e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007096:	4b15      	ldr	r3, [pc, #84]	; (80070ec <pvPortMalloc+0x188>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a16      	ldr	r2, [pc, #88]	; (80070f4 <pvPortMalloc+0x190>)
 800709c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	4b11      	ldr	r3, [pc, #68]	; (80070e8 <pvPortMalloc+0x184>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	431a      	orrs	r2, r3
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070b2:	f7fe fceb 	bl	8005a8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	f003 0307 	and.w	r3, r3, #7
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00c      	beq.n	80070da <pvPortMalloc+0x176>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	b672      	cpsid	i
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	b662      	cpsie	i
 80070d4:	60fb      	str	r3, [r7, #12]
}
 80070d6:	bf00      	nop
 80070d8:	e7fe      	b.n	80070d8 <pvPortMalloc+0x174>
	return pvReturn;
 80070da:	69fb      	ldr	r3, [r7, #28]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3728      	adds	r7, #40	; 0x28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	200053ac 	.word	0x200053ac
 80070e8:	200053b8 	.word	0x200053b8
 80070ec:	200053b0 	.word	0x200053b0
 80070f0:	200053a4 	.word	0x200053a4
 80070f4:	200053b4 	.word	0x200053b4

080070f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d04c      	beq.n	80071a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800710a:	2308      	movs	r3, #8
 800710c:	425b      	negs	r3, r3
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4413      	add	r3, r2
 8007112:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	4b23      	ldr	r3, [pc, #140]	; (80071ac <vPortFree+0xb4>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4013      	ands	r3, r2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10c      	bne.n	8007140 <vPortFree+0x48>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	b672      	cpsid	i
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	b662      	cpsie	i
 800713a:	60fb      	str	r3, [r7, #12]
}
 800713c:	bf00      	nop
 800713e:	e7fe      	b.n	800713e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00c      	beq.n	8007162 <vPortFree+0x6a>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714c:	b672      	cpsid	i
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	b662      	cpsie	i
 800715c:	60bb      	str	r3, [r7, #8]
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	4b11      	ldr	r3, [pc, #68]	; (80071ac <vPortFree+0xb4>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4013      	ands	r3, r2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d019      	beq.n	80071a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d115      	bne.n	80071a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <vPortFree+0xb4>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	43db      	mvns	r3, r3
 8007182:	401a      	ands	r2, r3
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007188:	f7fe fc72 	bl	8005a70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	4b07      	ldr	r3, [pc, #28]	; (80071b0 <vPortFree+0xb8>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4413      	add	r3, r2
 8007196:	4a06      	ldr	r2, [pc, #24]	; (80071b0 <vPortFree+0xb8>)
 8007198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800719a:	6938      	ldr	r0, [r7, #16]
 800719c:	f000 f86c 	bl	8007278 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071a0:	f7fe fc74 	bl	8005a8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071a4:	bf00      	nop
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	200053b8 	.word	0x200053b8
 80071b0:	200053b0 	.word	0x200053b0

080071b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80071be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071c0:	4b27      	ldr	r3, [pc, #156]	; (8007260 <prvHeapInit+0xac>)
 80071c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00c      	beq.n	80071e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3307      	adds	r3, #7
 80071d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0307 	bic.w	r3, r3, #7
 80071da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	4a1f      	ldr	r2, [pc, #124]	; (8007260 <prvHeapInit+0xac>)
 80071e4:	4413      	add	r3, r2
 80071e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071ec:	4a1d      	ldr	r2, [pc, #116]	; (8007264 <prvHeapInit+0xb0>)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071f2:	4b1c      	ldr	r3, [pc, #112]	; (8007264 <prvHeapInit+0xb0>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	4413      	add	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007200:	2208      	movs	r2, #8
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0307 	bic.w	r3, r3, #7
 800720e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4a15      	ldr	r2, [pc, #84]	; (8007268 <prvHeapInit+0xb4>)
 8007214:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007216:	4b14      	ldr	r3, [pc, #80]	; (8007268 <prvHeapInit+0xb4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2200      	movs	r2, #0
 800721c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800721e:	4b12      	ldr	r3, [pc, #72]	; (8007268 <prvHeapInit+0xb4>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	1ad2      	subs	r2, r2, r3
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007234:	4b0c      	ldr	r3, [pc, #48]	; (8007268 <prvHeapInit+0xb4>)
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	4a0a      	ldr	r2, [pc, #40]	; (800726c <prvHeapInit+0xb8>)
 8007242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	4a09      	ldr	r2, [pc, #36]	; (8007270 <prvHeapInit+0xbc>)
 800724a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800724c:	4b09      	ldr	r3, [pc, #36]	; (8007274 <prvHeapInit+0xc0>)
 800724e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007252:	601a      	str	r2, [r3, #0]
}
 8007254:	bf00      	nop
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	200017a4 	.word	0x200017a4
 8007264:	200053a4 	.word	0x200053a4
 8007268:	200053ac 	.word	0x200053ac
 800726c:	200053b4 	.word	0x200053b4
 8007270:	200053b0 	.word	0x200053b0
 8007274:	200053b8 	.word	0x200053b8

08007278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007280:	4b28      	ldr	r3, [pc, #160]	; (8007324 <prvInsertBlockIntoFreeList+0xac>)
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	e002      	b.n	800728c <prvInsertBlockIntoFreeList+0x14>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	429a      	cmp	r2, r3
 8007294:	d8f7      	bhi.n	8007286 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	4413      	add	r3, r2
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d108      	bne.n	80072ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	441a      	add	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	441a      	add	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d118      	bne.n	8007300 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	4b15      	ldr	r3, [pc, #84]	; (8007328 <prvInsertBlockIntoFreeList+0xb0>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d00d      	beq.n	80072f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	441a      	add	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e008      	b.n	8007308 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072f6:	4b0c      	ldr	r3, [pc, #48]	; (8007328 <prvInsertBlockIntoFreeList+0xb0>)
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	e003      	b.n	8007308 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	429a      	cmp	r2, r3
 800730e:	d002      	beq.n	8007316 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007316:	bf00      	nop
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	200053a4 	.word	0x200053a4
 8007328:	200053ac 	.word	0x200053ac

0800732c <__libc_init_array>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	4d0d      	ldr	r5, [pc, #52]	; (8007364 <__libc_init_array+0x38>)
 8007330:	4c0d      	ldr	r4, [pc, #52]	; (8007368 <__libc_init_array+0x3c>)
 8007332:	1b64      	subs	r4, r4, r5
 8007334:	10a4      	asrs	r4, r4, #2
 8007336:	2600      	movs	r6, #0
 8007338:	42a6      	cmp	r6, r4
 800733a:	d109      	bne.n	8007350 <__libc_init_array+0x24>
 800733c:	4d0b      	ldr	r5, [pc, #44]	; (800736c <__libc_init_array+0x40>)
 800733e:	4c0c      	ldr	r4, [pc, #48]	; (8007370 <__libc_init_array+0x44>)
 8007340:	f000 f8f2 	bl	8007528 <_init>
 8007344:	1b64      	subs	r4, r4, r5
 8007346:	10a4      	asrs	r4, r4, #2
 8007348:	2600      	movs	r6, #0
 800734a:	42a6      	cmp	r6, r4
 800734c:	d105      	bne.n	800735a <__libc_init_array+0x2e>
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	f855 3b04 	ldr.w	r3, [r5], #4
 8007354:	4798      	blx	r3
 8007356:	3601      	adds	r6, #1
 8007358:	e7ee      	b.n	8007338 <__libc_init_array+0xc>
 800735a:	f855 3b04 	ldr.w	r3, [r5], #4
 800735e:	4798      	blx	r3
 8007360:	3601      	adds	r6, #1
 8007362:	e7f2      	b.n	800734a <__libc_init_array+0x1e>
 8007364:	08007608 	.word	0x08007608
 8007368:	08007608 	.word	0x08007608
 800736c:	08007608 	.word	0x08007608
 8007370:	0800760c 	.word	0x0800760c

08007374 <__retarget_lock_acquire_recursive>:
 8007374:	4770      	bx	lr

08007376 <__retarget_lock_release_recursive>:
 8007376:	4770      	bx	lr

08007378 <memcpy>:
 8007378:	440a      	add	r2, r1
 800737a:	4291      	cmp	r1, r2
 800737c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007380:	d100      	bne.n	8007384 <memcpy+0xc>
 8007382:	4770      	bx	lr
 8007384:	b510      	push	{r4, lr}
 8007386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800738a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800738e:	4291      	cmp	r1, r2
 8007390:	d1f9      	bne.n	8007386 <memcpy+0xe>
 8007392:	bd10      	pop	{r4, pc}

08007394 <memset>:
 8007394:	4402      	add	r2, r0
 8007396:	4603      	mov	r3, r0
 8007398:	4293      	cmp	r3, r2
 800739a:	d100      	bne.n	800739e <memset+0xa>
 800739c:	4770      	bx	lr
 800739e:	f803 1b01 	strb.w	r1, [r3], #1
 80073a2:	e7f9      	b.n	8007398 <memset+0x4>

080073a4 <cleanup_glue>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	460c      	mov	r4, r1
 80073a8:	6809      	ldr	r1, [r1, #0]
 80073aa:	4605      	mov	r5, r0
 80073ac:	b109      	cbz	r1, 80073b2 <cleanup_glue+0xe>
 80073ae:	f7ff fff9 	bl	80073a4 <cleanup_glue>
 80073b2:	4621      	mov	r1, r4
 80073b4:	4628      	mov	r0, r5
 80073b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073ba:	f000 b869 	b.w	8007490 <_free_r>
	...

080073c0 <_reclaim_reent>:
 80073c0:	4b2c      	ldr	r3, [pc, #176]	; (8007474 <_reclaim_reent+0xb4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4283      	cmp	r3, r0
 80073c6:	b570      	push	{r4, r5, r6, lr}
 80073c8:	4604      	mov	r4, r0
 80073ca:	d051      	beq.n	8007470 <_reclaim_reent+0xb0>
 80073cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80073ce:	b143      	cbz	r3, 80073e2 <_reclaim_reent+0x22>
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d14a      	bne.n	800746c <_reclaim_reent+0xac>
 80073d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073d8:	6819      	ldr	r1, [r3, #0]
 80073da:	b111      	cbz	r1, 80073e2 <_reclaim_reent+0x22>
 80073dc:	4620      	mov	r0, r4
 80073de:	f000 f857 	bl	8007490 <_free_r>
 80073e2:	6961      	ldr	r1, [r4, #20]
 80073e4:	b111      	cbz	r1, 80073ec <_reclaim_reent+0x2c>
 80073e6:	4620      	mov	r0, r4
 80073e8:	f000 f852 	bl	8007490 <_free_r>
 80073ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80073ee:	b111      	cbz	r1, 80073f6 <_reclaim_reent+0x36>
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 f84d 	bl	8007490 <_free_r>
 80073f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80073f8:	b111      	cbz	r1, 8007400 <_reclaim_reent+0x40>
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 f848 	bl	8007490 <_free_r>
 8007400:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007402:	b111      	cbz	r1, 800740a <_reclaim_reent+0x4a>
 8007404:	4620      	mov	r0, r4
 8007406:	f000 f843 	bl	8007490 <_free_r>
 800740a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800740c:	b111      	cbz	r1, 8007414 <_reclaim_reent+0x54>
 800740e:	4620      	mov	r0, r4
 8007410:	f000 f83e 	bl	8007490 <_free_r>
 8007414:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007416:	b111      	cbz	r1, 800741e <_reclaim_reent+0x5e>
 8007418:	4620      	mov	r0, r4
 800741a:	f000 f839 	bl	8007490 <_free_r>
 800741e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007420:	b111      	cbz	r1, 8007428 <_reclaim_reent+0x68>
 8007422:	4620      	mov	r0, r4
 8007424:	f000 f834 	bl	8007490 <_free_r>
 8007428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800742a:	b111      	cbz	r1, 8007432 <_reclaim_reent+0x72>
 800742c:	4620      	mov	r0, r4
 800742e:	f000 f82f 	bl	8007490 <_free_r>
 8007432:	69a3      	ldr	r3, [r4, #24]
 8007434:	b1e3      	cbz	r3, 8007470 <_reclaim_reent+0xb0>
 8007436:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007438:	4620      	mov	r0, r4
 800743a:	4798      	blx	r3
 800743c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800743e:	b1b9      	cbz	r1, 8007470 <_reclaim_reent+0xb0>
 8007440:	4620      	mov	r0, r4
 8007442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007446:	f7ff bfad 	b.w	80073a4 <cleanup_glue>
 800744a:	5949      	ldr	r1, [r1, r5]
 800744c:	b941      	cbnz	r1, 8007460 <_reclaim_reent+0xa0>
 800744e:	3504      	adds	r5, #4
 8007450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007452:	2d80      	cmp	r5, #128	; 0x80
 8007454:	68d9      	ldr	r1, [r3, #12]
 8007456:	d1f8      	bne.n	800744a <_reclaim_reent+0x8a>
 8007458:	4620      	mov	r0, r4
 800745a:	f000 f819 	bl	8007490 <_free_r>
 800745e:	e7ba      	b.n	80073d6 <_reclaim_reent+0x16>
 8007460:	680e      	ldr	r6, [r1, #0]
 8007462:	4620      	mov	r0, r4
 8007464:	f000 f814 	bl	8007490 <_free_r>
 8007468:	4631      	mov	r1, r6
 800746a:	e7ef      	b.n	800744c <_reclaim_reent+0x8c>
 800746c:	2500      	movs	r5, #0
 800746e:	e7ef      	b.n	8007450 <_reclaim_reent+0x90>
 8007470:	bd70      	pop	{r4, r5, r6, pc}
 8007472:	bf00      	nop
 8007474:	20000010 	.word	0x20000010

08007478 <__malloc_lock>:
 8007478:	4801      	ldr	r0, [pc, #4]	; (8007480 <__malloc_lock+0x8>)
 800747a:	f7ff bf7b 	b.w	8007374 <__retarget_lock_acquire_recursive>
 800747e:	bf00      	nop
 8007480:	200053bc 	.word	0x200053bc

08007484 <__malloc_unlock>:
 8007484:	4801      	ldr	r0, [pc, #4]	; (800748c <__malloc_unlock+0x8>)
 8007486:	f7ff bf76 	b.w	8007376 <__retarget_lock_release_recursive>
 800748a:	bf00      	nop
 800748c:	200053bc 	.word	0x200053bc

08007490 <_free_r>:
 8007490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007492:	2900      	cmp	r1, #0
 8007494:	d044      	beq.n	8007520 <_free_r+0x90>
 8007496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800749a:	9001      	str	r0, [sp, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f1a1 0404 	sub.w	r4, r1, #4
 80074a2:	bfb8      	it	lt
 80074a4:	18e4      	addlt	r4, r4, r3
 80074a6:	f7ff ffe7 	bl	8007478 <__malloc_lock>
 80074aa:	4a1e      	ldr	r2, [pc, #120]	; (8007524 <_free_r+0x94>)
 80074ac:	9801      	ldr	r0, [sp, #4]
 80074ae:	6813      	ldr	r3, [r2, #0]
 80074b0:	b933      	cbnz	r3, 80074c0 <_free_r+0x30>
 80074b2:	6063      	str	r3, [r4, #4]
 80074b4:	6014      	str	r4, [r2, #0]
 80074b6:	b003      	add	sp, #12
 80074b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074bc:	f7ff bfe2 	b.w	8007484 <__malloc_unlock>
 80074c0:	42a3      	cmp	r3, r4
 80074c2:	d908      	bls.n	80074d6 <_free_r+0x46>
 80074c4:	6825      	ldr	r5, [r4, #0]
 80074c6:	1961      	adds	r1, r4, r5
 80074c8:	428b      	cmp	r3, r1
 80074ca:	bf01      	itttt	eq
 80074cc:	6819      	ldreq	r1, [r3, #0]
 80074ce:	685b      	ldreq	r3, [r3, #4]
 80074d0:	1949      	addeq	r1, r1, r5
 80074d2:	6021      	streq	r1, [r4, #0]
 80074d4:	e7ed      	b.n	80074b2 <_free_r+0x22>
 80074d6:	461a      	mov	r2, r3
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	b10b      	cbz	r3, 80074e0 <_free_r+0x50>
 80074dc:	42a3      	cmp	r3, r4
 80074de:	d9fa      	bls.n	80074d6 <_free_r+0x46>
 80074e0:	6811      	ldr	r1, [r2, #0]
 80074e2:	1855      	adds	r5, r2, r1
 80074e4:	42a5      	cmp	r5, r4
 80074e6:	d10b      	bne.n	8007500 <_free_r+0x70>
 80074e8:	6824      	ldr	r4, [r4, #0]
 80074ea:	4421      	add	r1, r4
 80074ec:	1854      	adds	r4, r2, r1
 80074ee:	42a3      	cmp	r3, r4
 80074f0:	6011      	str	r1, [r2, #0]
 80074f2:	d1e0      	bne.n	80074b6 <_free_r+0x26>
 80074f4:	681c      	ldr	r4, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	6053      	str	r3, [r2, #4]
 80074fa:	4421      	add	r1, r4
 80074fc:	6011      	str	r1, [r2, #0]
 80074fe:	e7da      	b.n	80074b6 <_free_r+0x26>
 8007500:	d902      	bls.n	8007508 <_free_r+0x78>
 8007502:	230c      	movs	r3, #12
 8007504:	6003      	str	r3, [r0, #0]
 8007506:	e7d6      	b.n	80074b6 <_free_r+0x26>
 8007508:	6825      	ldr	r5, [r4, #0]
 800750a:	1961      	adds	r1, r4, r5
 800750c:	428b      	cmp	r3, r1
 800750e:	bf04      	itt	eq
 8007510:	6819      	ldreq	r1, [r3, #0]
 8007512:	685b      	ldreq	r3, [r3, #4]
 8007514:	6063      	str	r3, [r4, #4]
 8007516:	bf04      	itt	eq
 8007518:	1949      	addeq	r1, r1, r5
 800751a:	6021      	streq	r1, [r4, #0]
 800751c:	6054      	str	r4, [r2, #4]
 800751e:	e7ca      	b.n	80074b6 <_free_r+0x26>
 8007520:	b003      	add	sp, #12
 8007522:	bd30      	pop	{r4, r5, pc}
 8007524:	200053c0 	.word	0x200053c0

08007528 <_init>:
 8007528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752a:	bf00      	nop
 800752c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752e:	bc08      	pop	{r3}
 8007530:	469e      	mov	lr, r3
 8007532:	4770      	bx	lr

08007534 <_fini>:
 8007534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007536:	bf00      	nop
 8007538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800753a:	bc08      	pop	{r3}
 800753c:	469e      	mov	lr, r3
 800753e:	4770      	bx	lr
