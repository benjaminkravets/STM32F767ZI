   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main_boot.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "main_boot.c"
  18              		.align	1
  19              		.global	blink
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	blink:
  25              	.LFB191:
   1:main_boot.c   **** 
   2:main_boot.c   **** #include <stdint.h>
   3:main_boot.c   **** #include "stm32f767xx.h"
   4:main_boot.c   **** #include "system_stm32f7xx.h"
   5:main_boot.c   **** #include "usart.h"
   6:main_boot.c   **** 
   7:main_boot.c   **** #define LED_PIN 7
   8:main_boot.c   **** 
   9:main_boot.c   **** // linker variables must be accessed by their address (not value), using an array reference accompl
  10:main_boot.c   **** // https://stackoverflow.com/a/54728097/13745806
  11:main_boot.c   **** extern uint32_t __flash_app_start__[];
  12:main_boot.c   **** 
  13:main_boot.c   **** void blink()
  14:main_boot.c   **** {
  26              		.loc 1 14 1
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  15:main_boot.c   ****     GPIOB->ODR ^= (1 << LED_PIN);
  36              		.loc 1 15 10
  37 0004 044B     		ldr	r3, .L2
  38 0006 5B69     		ldr	r3, [r3, #20]
  39 0008 034A     		ldr	r2, .L2
  40              		.loc 1 15 16
  41 000a 83F08003 		eor	r3, r3, #128
  42 000e 5361     		str	r3, [r2, #20]
  16:main_boot.c   **** }
  43              		.loc 1 16 1
  44 0010 00BF     		nop
  45 0012 BD46     		mov	sp, r7
  46              		.cfi_def_cfa_register 13
  47              		@ sp needed
  48 0014 80BC     		pop	{r7}
  49              		.cfi_restore 7
  50              		.cfi_def_cfa_offset 0
  51 0016 7047     		bx	lr
  52              	.L3:
  53              		.align	2
  54              	.L2:
  55 0018 00040240 		.word	1073873920
  56              		.cfi_endproc
  57              	.LFE191:
  59              		.align	1
  60              		.global	GPIOB_init
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  65              	GPIOB_init:
  66              	.LFB192:
  17:main_boot.c   **** 
  18:main_boot.c   **** void GPIOB_init()
  19:main_boot.c   **** {
  67              		.loc 1 19 1
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 1, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  72 001c 80B4     		push	{r7}
  73              		.cfi_def_cfa_offset 4
  74              		.cfi_offset 7, -4
  75 001e 00AF     		add	r7, sp, #0
  76              		.cfi_def_cfa_register 7
  20:main_boot.c   ****     // GPIO port B RCC enable
  21:main_boot.c   ****     RCC->AHB1ENR |= (1 << RCC_AHB1ENR_GPIOBEN_Pos);
  77              		.loc 1 21 8
  78 0020 074B     		ldr	r3, .L5
  79 0022 1B6B     		ldr	r3, [r3, #48]
  80 0024 064A     		ldr	r2, .L5
  81              		.loc 1 21 18
  82 0026 43F00203 		orr	r3, r3, #2
  83 002a 1363     		str	r3, [r2, #48]
  22:main_boot.c   ****     // set pin 0 as mode general purpose output
  23:main_boot.c   ****     GPIOB->MODER |= (1 << GPIO_MODER_MODER7_Pos);
  84              		.loc 1 23 10
  85 002c 054B     		ldr	r3, .L5+4
  86 002e 1B68     		ldr	r3, [r3]
  87 0030 044A     		ldr	r2, .L5+4
  88              		.loc 1 23 18
  89 0032 43F48043 		orr	r3, r3, #16384
  90 0036 1360     		str	r3, [r2]
  24:main_boot.c   **** }
  91              		.loc 1 24 1
  92 0038 00BF     		nop
  93 003a BD46     		mov	sp, r7
  94              		.cfi_def_cfa_register 13
  95              		@ sp needed
  96 003c 80BC     		pop	{r7}
  97              		.cfi_restore 7
  98              		.cfi_def_cfa_offset 0
  99 003e 7047     		bx	lr
 100              	.L6:
 101              		.align	2
 102              	.L5:
 103 0040 00380240 		.word	1073887232
 104 0044 00040240 		.word	1073873920
 105              		.cfi_endproc
 106              	.LFE192:
 108              		.align	1
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 113              	start_app:
 114              	.LFB193:
  25:main_boot.c   **** 
  26:main_boot.c   **** static void start_app(uint32_t program_counter, uint32_t stack_ptr)
  27:main_boot.c   **** {
 115              		.loc 1 27 1
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 8
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120 0048 80B4     		push	{r7}
 121              		.cfi_def_cfa_offset 4
 122              		.cfi_offset 7, -4
 123 004a 83B0     		sub	sp, sp, #12
 124              		.cfi_def_cfa_offset 16
 125 004c 00AF     		add	r7, sp, #0
 126              		.cfi_def_cfa_register 7
 127 004e 7860     		str	r0, [r7, #4]
 128 0050 3960     		str	r1, [r7]
  28:main_boot.c   ****     asm("           \n\
 129              		.loc 1 28 5
 130              		.syntax unified
 131              	@ 28 "main_boot.c" 1
 132              		           
 133 0052 81F30888 	          msr msp, r1 /* load R1 (second argument) into MSP (Main Stack Pointer) */
 134 0056 0047     	          bx r0       /* branch to address in R0 (first argument)*/
 135              	    
 136              	@ 0 "" 2
  29:main_boot.c   ****           msr msp, r1 /* load R1 (second argument) into MSP (Main Stack Pointer) */\n\
  30:main_boot.c   ****           bx r0       /* branch to address in R0 (first argument)*/\n\
  31:main_boot.c   ****     ");
  32:main_boot.c   **** }
 137              		.loc 1 32 1
 138              		.thumb
 139              		.syntax unified
 140 0058 00BF     		nop
 141 005a 0C37     		adds	r7, r7, #12
 142              		.cfi_def_cfa_offset 4
 143 005c BD46     		mov	sp, r7
 144              		.cfi_def_cfa_register 13
 145              		@ sp needed
 146 005e 80BC     		pop	{r7}
 147              		.cfi_restore 7
 148              		.cfi_def_cfa_offset 0
 149 0060 7047     		bx	lr
 150              		.cfi_endproc
 151              	.LFE193:
 153              		.align	1
 154              		.global	main
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 159              	main:
 160              	.LFB194:
  33:main_boot.c   **** 
  34:main_boot.c   **** extern uint32_t isr_vector[];
  35:main_boot.c   **** int main(void)
  36:main_boot.c   **** {
 161              		.loc 1 36 1
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 24
 164              		@ frame_needed = 1, uses_anonymous_args = 0
 165 0062 80B5     		push	{r7, lr}
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 7, -8
 168              		.cfi_offset 14, -4
 169 0064 86B0     		sub	sp, sp, #24
 170              		.cfi_def_cfa_offset 32
 171 0066 00AF     		add	r7, sp, #0
 172              		.cfi_def_cfa_register 7
  37:main_boot.c   ****     GPIOB_init();
 173              		.loc 1 37 5
 174 0068 FFF7FEFF 		bl	GPIOB_init
 175              	.LBB2:
  38:main_boot.c   ****     for (uint32_t i = 0; i < 1; i++)
 176              		.loc 1 38 19
 177 006c 0023     		movs	r3, #0
 178 006e 7B61     		str	r3, [r7, #20]
 179              		.loc 1 38 5
 180 0070 0EE0     		b	.L9
 181              	.L12:
 182              	.LBB3:
  39:main_boot.c   ****     {
  40:main_boot.c   ****         for (uint32_t i = 0; i < 500000; i++)
 183              		.loc 1 40 23
 184 0072 0023     		movs	r3, #0
 185 0074 3B61     		str	r3, [r7, #16]
 186              		.loc 1 40 9
 187 0076 02E0     		b	.L10
 188              	.L11:
 189              		.loc 1 40 43 discriminator 3
 190 0078 3B69     		ldr	r3, [r7, #16]
 191 007a 0133     		adds	r3, r3, #1
 192 007c 3B61     		str	r3, [r7, #16]
 193              	.L10:
 194              		.loc 1 40 32 discriminator 1
 195 007e 3B69     		ldr	r3, [r7, #16]
 196 0080 104A     		ldr	r2, .L16
 197 0082 9342     		cmp	r3, r2
 198 0084 F8D9     		bls	.L11
 199              	.LBE3:
  41:main_boot.c   ****             ;
  42:main_boot.c   ****         blink();
 200              		.loc 1 42 9
 201 0086 FFF7FEFF 		bl	blink
  38:main_boot.c   ****     {
 202              		.loc 1 38 34 discriminator 2
 203 008a 7B69     		ldr	r3, [r7, #20]
 204 008c 0133     		adds	r3, r3, #1
 205 008e 7B61     		str	r3, [r7, #20]
 206              	.L9:
  38:main_boot.c   ****     {
 207              		.loc 1 38 28 discriminator 1
 208 0090 7B69     		ldr	r3, [r7, #20]
 209 0092 002B     		cmp	r3, #0
 210 0094 EDD0     		beq	.L12
 211              	.LBE2:
  43:main_boot.c   ****     }
  44:main_boot.c   **** 
  45:main_boot.c   ****     // get stack ptr and address of reset handler from app flash
  46:main_boot.c   ****     uint32_t app_stack_ptr = ((uint32_t *)__flash_app_start__)[0];
 212              		.loc 1 46 14
 213 0096 0C4B     		ldr	r3, .L16+4
 214 0098 1B68     		ldr	r3, [r3]
 215 009a BB60     		str	r3, [r7, #8]
  47:main_boot.c   ****     uint32_t app_entry = ((uint32_t *)__flash_app_start__)[1];
 216              		.loc 1 47 14
 217 009c 0A4B     		ldr	r3, .L16+4
 218 009e 5B68     		ldr	r3, [r3, #4]
 219 00a0 7B60     		str	r3, [r7, #4]
  48:main_boot.c   **** 
  49:main_boot.c   ****     start_app(app_entry, app_stack_ptr);
 220              		.loc 1 49 5
 221 00a2 B968     		ldr	r1, [r7, #8]
 222 00a4 7868     		ldr	r0, [r7, #4]
 223 00a6 FFF7CFFF 		bl	start_app
 224              	.L15:
 225              	.LBB4:
  50:main_boot.c   **** 
  51:main_boot.c   ****     while (1)
  52:main_boot.c   ****     {
  53:main_boot.c   ****         for (uint32_t i = 0; i < 500000; i++)
 226              		.loc 1 53 23
 227 00aa 0023     		movs	r3, #0
 228 00ac FB60     		str	r3, [r7, #12]
 229              		.loc 1 53 9
 230 00ae 02E0     		b	.L13
 231              	.L14:
 232              		.loc 1 53 43 discriminator 3
 233 00b0 FB68     		ldr	r3, [r7, #12]
 234 00b2 0133     		adds	r3, r3, #1
 235 00b4 FB60     		str	r3, [r7, #12]
 236              	.L13:
 237              		.loc 1 53 32 discriminator 1
 238 00b6 FB68     		ldr	r3, [r7, #12]
 239 00b8 024A     		ldr	r2, .L16
 240 00ba 9342     		cmp	r3, r2
 241 00bc F8D9     		bls	.L14
 242              	.LBE4:
  54:main_boot.c   ****             ;
  55:main_boot.c   ****         blink();
 243              		.loc 1 55 9
 244 00be FFF7FEFF 		bl	blink
  53:main_boot.c   ****             ;
 245              		.loc 1 53 9
 246 00c2 F2E7     		b	.L15
 247              	.L17:
 248              		.align	2
 249              	.L16:
 250 00c4 1FA10700 		.word	499999
 251 00c8 00000000 		.word	__flash_app_start__
 252              		.cfi_endproc
 253              	.LFE194:
 255              	.Letext0:
 256              		.file 2 "/home/ben/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-eabi/arm-none-eabi/include/machine/
 257              		.file 3 "/home/ben/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-eabi/arm-none-eabi/include/sys/_std
 258              		.file 4 "vendor/stm32f767xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main_boot.c
     /tmp/ccxBuqEn.s:18     .text:00000000 $t
     /tmp/ccxBuqEn.s:24     .text:00000000 blink
     /tmp/ccxBuqEn.s:55     .text:00000018 $d
     /tmp/ccxBuqEn.s:59     .text:0000001c $t
     /tmp/ccxBuqEn.s:65     .text:0000001c GPIOB_init
     /tmp/ccxBuqEn.s:103    .text:00000040 $d
     /tmp/ccxBuqEn.s:108    .text:00000048 $t
     /tmp/ccxBuqEn.s:113    .text:00000048 start_app
     /tmp/ccxBuqEn.s:159    .text:00000062 main
     /tmp/ccxBuqEn.s:250    .text:000000c4 $d
                           .group:00000000 wm4.0.b9144c81caf0c2c1ee9424d16d32a8e9
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.features.h.33.d554620bb17bd3b714c3fb5c268772bc
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.stm32f767xx.h.34.d0ba5a0a33e572d9abba2a69be3f047a
                           .group:00000000 wm4.cmsis_version.h.30.d128735bf87720f7436b74fefeb5043c
                           .group:00000000 wm4.core_cm7.h.67.c4fc7696682f9e831eac3dd54a48d9d5
                           .group:00000000 wm4.arm_acle.h.28.a0697f530ff2dbf8c463bef049b82760
                           .group:00000000 wm4.cmsis_gcc.h.39.eba7438bc45fd1a6e6376b63ffe44436
                           .group:00000000 wm4.cmsis_gcc_m.h.24.23847e2e684820077e61f12ca9bb647d
                           .group:00000000 wm4.core_cm7.h.182.bdcc4e50bcd2482b3ee7b3848e1c3d57
                           .group:00000000 wm4.armv7m_mpu.h.24.6a1cc6ec2305a465645532db695e36b9
                           .group:00000000 wm4.armv7m_cachel1.h.24.936dd92d6e204a8d0b17d5e4ea4a356e
                           .group:00000000 wm4.stm32f767xx.h.1291.96cbc8c974f635ff90f2e384fa7968c7
                           .group:00000000 wm4.stm32f7xx.h.38.be673aa88a778c9c25ecd83f19170569
                           .group:00000000 wm4.stm32f7xx.h.166.1a4552c215c7df501f12e87834ed026b

UNDEFINED SYMBOLS
__flash_app_start__
