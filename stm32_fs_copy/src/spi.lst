   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"spi.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "src/spi.c"
  18              		.align	1
  19              		.global	SPI_init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	SPI_init:
  25              	.LFB194:
   1:src/spi.c     **** #include "stm32f767xx.h"
   2:src/spi.c     **** #include "system_stm32f7xx.h"
   3:src/spi.c     **** #include "spi.h"
   4:src/spi.c     **** #include <stdio.h>
   5:src/spi.c     **** 
   6:src/spi.c     **** void SPI_init()
   7:src/spi.c     **** {
  26              		.loc 1 7 1
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 83B0     		sub	sp, sp, #12
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
   8:src/spi.c     ****     // checklist in 35.5.7
   9:src/spi.c     ****     //  SPI4 on PE11-14 (APB2)
  10:src/spi.c     ****     // enable SPI4 at RCC
  11:src/spi.c     ****     RCC->APB2ENR |= (1 << RCC_APB2ENR_SPI4EN_Pos);
  38              		.loc 1 11 8
  39 0006 234B     		ldr	r3, .L2
  40 0008 5B6C     		ldr	r3, [r3, #68]
  41 000a 224A     		ldr	r2, .L2
  42              		.loc 1 11 18
  43 000c 43F40053 		orr	r3, r3, #8192
  44 0010 5364     		str	r3, [r2, #68]
  12:src/spi.c     ****     volatile uint32_t a = RCC->APB2ENR;
  45              		.loc 1 12 30
  46 0012 204B     		ldr	r3, .L2
  47 0014 5B6C     		ldr	r3, [r3, #68]
  48              		.loc 1 12 23
  49 0016 7B60     		str	r3, [r7, #4]
  13:src/spi.c     ****     a = RCC->APB2ENR;
  50              		.loc 1 13 12
  51 0018 1E4B     		ldr	r3, .L2
  52 001a 5B6C     		ldr	r3, [r3, #68]
  53              		.loc 1 13 7
  54 001c 7B60     		str	r3, [r7, #4]
  14:src/spi.c     **** 
  15:src/spi.c     ****     // GPIO port E RCC enable
  16:src/spi.c     ****     RCC->AHB1ENR |= (1 << RCC_AHB1ENR_GPIOEEN_Pos);
  55              		.loc 1 16 8
  56 001e 1D4B     		ldr	r3, .L2
  57 0020 1B6B     		ldr	r3, [r3, #48]
  58 0022 1C4A     		ldr	r2, .L2
  59              		.loc 1 16 18
  60 0024 43F01003 		orr	r3, r3, #16
  61 0028 1363     		str	r3, [r2, #48]
  17:src/spi.c     ****     volatile uint32_t b = RCC->APB2ENR;
  62              		.loc 1 17 30
  63 002a 1A4B     		ldr	r3, .L2
  64 002c 5B6C     		ldr	r3, [r3, #68]
  65              		.loc 1 17 23
  66 002e 3B60     		str	r3, [r7]
  18:src/spi.c     ****     b = RCC->APB2ENR;
  67              		.loc 1 18 12
  68 0030 184B     		ldr	r3, .L2
  69 0032 5B6C     		ldr	r3, [r3, #68]
  70              		.loc 1 18 7
  71 0034 3B60     		str	r3, [r7]
  19:src/spi.c     **** 
  20:src/spi.c     ****     // reset input/output mode and set to alternate function (AF) mode
  21:src/spi.c     ****     GPIOE->MODER &= ~(GPIO_MODER_MODER11_Msk | GPIO_MODER_MODER12_Msk | GPIO_MODER_MODER13_Msk | GP
  72              		.loc 1 21 10
  73 0036 184B     		ldr	r3, .L2+4
  74 0038 1B68     		ldr	r3, [r3]
  75 003a 174A     		ldr	r2, .L2+4
  76              		.loc 1 21 18
  77 003c 23F07F53 		bic	r3, r3, #1069547520
  78 0040 1360     		str	r3, [r2]
  22:src/spi.c     ****     GPIOE->MODER |= (0b10 << GPIO_MODER_MODER11_Pos) | (0b10 << GPIO_MODER_MODER12_Pos) | (0b10 << 
  79              		.loc 1 22 10
  80 0042 154B     		ldr	r3, .L2+4
  81 0044 1B68     		ldr	r3, [r3]
  82 0046 144A     		ldr	r2, .L2+4
  83              		.loc 1 22 18
  84 0048 43F02A53 		orr	r3, r3, #713031680
  85 004c 1360     		str	r3, [r2]
  23:src/spi.c     **** 
  24:src/spi.c     ****     // reset GPIO AF selection (3 through 6 of high AF register are pins 11-14), then choose AF5 fo
  25:src/spi.c     ****     GPIOE->AFR[1] &= ~(GPIO_AFRH_AFRH3 | GPIO_AFRH_AFRH4 | GPIO_AFRH_AFRH5 | GPIO_AFRH_AFRH6);
  86              		.loc 1 25 10
  87 004e 124B     		ldr	r3, .L2+4
  88              		.loc 1 25 15
  89 0050 5A6A     		ldr	r2, [r3, #36]
  90              		.loc 1 25 10
  91 0052 1149     		ldr	r1, .L2+4
  92              		.loc 1 25 19
  93 0054 114B     		ldr	r3, .L2+8
  94 0056 1340     		ands	r3, r3, r2
  95 0058 4B62     		str	r3, [r1, #36]
  26:src/spi.c     ****     GPIOE->AFR[1] |= (0b101 << GPIO_AFRH_AFRH3_Pos) | (0b101 << GPIO_AFRH_AFRH4_Pos) | (0b101 << GP
  96              		.loc 1 26 10
  97 005a 0F4B     		ldr	r3, .L2+4
  98              		.loc 1 26 15
  99 005c 5A6A     		ldr	r2, [r3, #36]
 100              		.loc 1 26 10
 101 005e 0E49     		ldr	r1, .L2+4
 102              		.loc 1 26 19
 103 0060 0F4B     		ldr	r3, .L2+12
 104 0062 1343     		orrs	r3, r3, r2
 105 0064 4B62     		str	r3, [r1, #36]
  27:src/spi.c     **** 
  28:src/spi.c     ****     SPI4->CR1 |= SPI_CR1_MSTR;
 106              		.loc 1 28 9
 107 0066 0F4B     		ldr	r3, .L2+16
 108 0068 1B68     		ldr	r3, [r3]
 109 006a 0E4A     		ldr	r2, .L2+16
 110              		.loc 1 28 15
 111 006c 43F00403 		orr	r3, r3, #4
 112 0070 1360     		str	r3, [r2]
  29:src/spi.c     ****     SPI4->CR2 |= SPI_CR2_SSOE;
 113              		.loc 1 29 9
 114 0072 0C4B     		ldr	r3, .L2+16
 115 0074 5B68     		ldr	r3, [r3, #4]
 116 0076 0B4A     		ldr	r2, .L2+16
 117              		.loc 1 29 15
 118 0078 43F00403 		orr	r3, r3, #4
 119 007c 5360     		str	r3, [r2, #4]
  30:src/spi.c     **** 
  31:src/spi.c     ****     SPI4->CR1 |= SPI_CR1_SPE;
 120              		.loc 1 31 9
 121 007e 094B     		ldr	r3, .L2+16
 122 0080 1B68     		ldr	r3, [r3]
 123 0082 084A     		ldr	r2, .L2+16
 124              		.loc 1 31 15
 125 0084 43F04003 		orr	r3, r3, #64
 126 0088 1360     		str	r3, [r2]
  32:src/spi.c     **** }
 127              		.loc 1 32 1
 128 008a 00BF     		nop
 129 008c 0C37     		adds	r7, r7, #12
 130              		.cfi_def_cfa_offset 4
 131 008e BD46     		mov	sp, r7
 132              		.cfi_def_cfa_register 13
 133              		@ sp needed
 134 0090 80BC     		pop	{r7}
 135              		.cfi_restore 7
 136              		.cfi_def_cfa_offset 0
 137 0092 7047     		bx	lr
 138              	.L3:
 139              		.align	2
 140              	.L2:
 141 0094 00380240 		.word	1073887232
 142 0098 00100240 		.word	1073876992
 143 009c FF0F00F0 		.word	-268431361
 144 00a0 00505505 		.word	89477120
 145 00a4 00340140 		.word	1073820672
 146              		.cfi_endproc
 147              	.LFE194:
 149              		.section	.rodata
 150              		.align	2
 151              	.LC0:
 152 0000 2569200D 		.ascii	"%i \015\012\000"
 152      0A00
 153              		.text
 154              		.align	1
 155              		.global	SPI_write
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 160              	SPI_write:
 161              	.LFB195:
  33:src/spi.c     **** 
  34:src/spi.c     **** void SPI_write(SPI_TypeDef *tx_spi, uint8_t *tx_data, uint8_t *rx_data, uint32_t tx_len)
  35:src/spi.c     **** {
 162              		.loc 1 35 1
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 24
 165              		@ frame_needed = 1, uses_anonymous_args = 0
 166 00a8 80B5     		push	{r7, lr}
 167              		.cfi_def_cfa_offset 8
 168              		.cfi_offset 7, -8
 169              		.cfi_offset 14, -4
 170 00aa 86B0     		sub	sp, sp, #24
 171              		.cfi_def_cfa_offset 32
 172 00ac 00AF     		add	r7, sp, #0
 173              		.cfi_def_cfa_register 7
 174 00ae F860     		str	r0, [r7, #12]
 175 00b0 B960     		str	r1, [r7, #8]
 176 00b2 7A60     		str	r2, [r7, #4]
 177 00b4 3B60     		str	r3, [r7]
  36:src/spi.c     **** 
  37:src/spi.c     ****     printf("%i \r\n", tx_spi->SR);
 178              		.loc 1 37 29
 179 00b6 FB68     		ldr	r3, [r7, #12]
 180 00b8 9B68     		ldr	r3, [r3, #8]
 181              		.loc 1 37 5
 182 00ba 1946     		mov	r1, r3
 183 00bc 1D48     		ldr	r0, .L10
 184 00be FFF7FEFF 		bl	printf
  38:src/spi.c     **** 
  39:src/spi.c     ****     tx_spi->CR1 |= SPI_CR1_SPE;
 185              		.loc 1 39 11
 186 00c2 FB68     		ldr	r3, [r7, #12]
 187 00c4 1B68     		ldr	r3, [r3]
 188              		.loc 1 39 17
 189 00c6 43F04002 		orr	r2, r3, #64
 190 00ca FB68     		ldr	r3, [r7, #12]
 191 00cc 1A60     		str	r2, [r3]
  40:src/spi.c     **** 
  41:src/spi.c     ****     uint8_t *tx_data_cpy = tx_data;
 192              		.loc 1 41 14
 193 00ce BB68     		ldr	r3, [r7, #8]
 194 00d0 7B61     		str	r3, [r7, #20]
 195              	.LBB2:
  42:src/spi.c     **** 
  43:src/spi.c     ****     for (uint32_t i = 0; i < 4; i++)
 196              		.loc 1 43 19
 197 00d2 0023     		movs	r3, #0
 198 00d4 3B61     		str	r3, [r7, #16]
 199              		.loc 1 43 5
 200 00d6 11E0     		b	.L5
 201              	.L7:
  44:src/spi.c     ****     {
  45:src/spi.c     **** 
  46:src/spi.c     ****         while (!(tx_spi->SR & SPI_SR_TXE))
 202              		.loc 1 46 15
 203 00d8 00BF     		nop
 204              	.L6:
 205              		.loc 1 46 24 discriminator 1
 206 00da FB68     		ldr	r3, [r7, #12]
 207 00dc 9B68     		ldr	r3, [r3, #8]
 208              		.loc 1 46 29 discriminator 1
 209 00de 03F00203 		and	r3, r3, #2
 210              		.loc 1 46 16 discriminator 1
 211 00e2 002B     		cmp	r3, #0
 212 00e4 F9D0     		beq	.L6
  47:src/spi.c     ****         {
  48:src/spi.c     ****         }
  49:src/spi.c     ****         tx_spi->DR = *((uint16_t *)tx_data_cpy);
 213              		.loc 1 49 22
 214 00e6 7B69     		ldr	r3, [r7, #20]
 215 00e8 1B88     		ldrh	r3, [r3]
 216 00ea 1A46     		mov	r2, r3
 217              		.loc 1 49 20
 218 00ec FB68     		ldr	r3, [r7, #12]
 219 00ee DA60     		str	r2, [r3, #12]
  50:src/spi.c     **** 
  51:src/spi.c     ****         tx_data_cpy += 2;
 220              		.loc 1 51 21
 221 00f0 7B69     		ldr	r3, [r7, #20]
 222 00f2 0233     		adds	r3, r3, #2
 223 00f4 7B61     		str	r3, [r7, #20]
  43:src/spi.c     ****     {
 224              		.loc 1 43 34 discriminator 2
 225 00f6 3B69     		ldr	r3, [r7, #16]
 226 00f8 0133     		adds	r3, r3, #1
 227 00fa 3B61     		str	r3, [r7, #16]
 228              	.L5:
  43:src/spi.c     ****     {
 229              		.loc 1 43 28 discriminator 1
 230 00fc 3B69     		ldr	r3, [r7, #16]
 231 00fe 032B     		cmp	r3, #3
 232 0100 EAD9     		bls	.L7
 233              	.LBE2:
  52:src/spi.c     ****     }
  53:src/spi.c     **** 
  54:src/spi.c     ****     // wait for transmit FIFO to be empty
  55:src/spi.c     ****     while ((tx_spi->SR & SPI_SR_FTLVL))
 234              		.loc 1 55 11
 235 0102 00BF     		nop
 236              	.L8:
 237              		.loc 1 55 19 discriminator 1
 238 0104 FB68     		ldr	r3, [r7, #12]
 239 0106 9B68     		ldr	r3, [r3, #8]
 240              		.loc 1 55 24 discriminator 1
 241 0108 03F4C053 		and	r3, r3, #6144
 242              		.loc 1 55 12 discriminator 1
 243 010c 002B     		cmp	r3, #0
 244 010e F9D1     		bne	.L8
  56:src/spi.c     ****     {
  57:src/spi.c     ****     }
  58:src/spi.c     ****     // wait while SPI is busy
  59:src/spi.c     ****     while (tx_spi->SR & SPI_SR_BSY)
 245              		.loc 1 59 11
 246 0110 00BF     		nop
 247              	.L9:
 248              		.loc 1 59 18 discriminator 1
 249 0112 FB68     		ldr	r3, [r7, #12]
 250 0114 9B68     		ldr	r3, [r3, #8]
 251              		.loc 1 59 23 discriminator 1
 252 0116 03F08003 		and	r3, r3, #128
 253              		.loc 1 59 12 discriminator 1
 254 011a 002B     		cmp	r3, #0
 255 011c F9D1     		bne	.L9
  60:src/spi.c     ****     {
  61:src/spi.c     ****     }
  62:src/spi.c     **** 
  63:src/spi.c     ****     tx_spi->CR1 &= ~(SPI_CR1_SPE);
 256              		.loc 1 63 11
 257 011e FB68     		ldr	r3, [r7, #12]
 258 0120 1B68     		ldr	r3, [r3]
 259              		.loc 1 63 17
 260 0122 23F04002 		bic	r2, r3, #64
 261 0126 FB68     		ldr	r3, [r7, #12]
 262 0128 1A60     		str	r2, [r3]
  64:src/spi.c     ****     // tx_spi->CR1 &= ~(SPI_CR1_SSI);
  65:src/spi.c     **** }...
 263              		.loc 1 65 1
 264 012a 00BF     		nop
 265 012c 1837     		adds	r7, r7, #24
 266              		.cfi_def_cfa_offset 8
 267 012e BD46     		mov	sp, r7
 268              		.cfi_def_cfa_register 13
 269              		@ sp needed
 270 0130 80BD     		pop	{r7, pc}
 271              	.L11:
 272 0132 00BF     		.align	2
 273              	.L10:
 274 0134 00000000 		.word	.LC0
 275              		.cfi_endproc
 276              	.LFE195:
 278              	.Letext0:
 279              		.file 2 "/home/ben/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-eabi/arm-none-eabi/include/machine/
 280              		.file 3 "/home/ben/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-eabi/arm-none-eabi/include/sys/_std
 281              		.file 4 "vendor/stm32f767xx.h"
 282              		.file 5 "/home/ben/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-eabi/arm-none-eabi/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:00000000 spi.c
     /tmp/ccH1BaKf.s:18     .text:00000000 $t
     /tmp/ccH1BaKf.s:24     .text:00000000 SPI_init
     /tmp/ccH1BaKf.s:141    .text:00000094 $d
     /tmp/ccH1BaKf.s:150    .rodata:00000000 $d
     /tmp/ccH1BaKf.s:154    .text:000000a8 $t
     /tmp/ccH1BaKf.s:160    .text:000000a8 SPI_write
     /tmp/ccH1BaKf.s:274    .text:00000134 $d
                           .group:00000000 wm4.0.b9144c81caf0c2c1ee9424d16d32a8e9
                           .group:00000000 wm4.stm32f767xx.h.34.d0ba5a0a33e572d9abba2a69be3f047a
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.features.h.33.d554620bb17bd3b714c3fb5c268772bc
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.cmsis_version.h.30.d128735bf87720f7436b74fefeb5043c
                           .group:00000000 wm4.core_cm7.h.67.c4fc7696682f9e831eac3dd54a48d9d5
                           .group:00000000 wm4.arm_acle.h.28.a0697f530ff2dbf8c463bef049b82760
                           .group:00000000 wm4.cmsis_gcc.h.39.eba7438bc45fd1a6e6376b63ffe44436
                           .group:00000000 wm4.cmsis_gcc_m.h.24.23847e2e684820077e61f12ca9bb647d
                           .group:00000000 wm4.core_cm7.h.182.bdcc4e50bcd2482b3ee7b3848e1c3d57
                           .group:00000000 wm4.armv7m_mpu.h.24.6a1cc6ec2305a465645532db695e36b9
                           .group:00000000 wm4.armv7m_cachel1.h.24.936dd92d6e204a8d0b17d5e4ea4a356e
                           .group:00000000 wm4.stm32f767xx.h.1291.96cbc8c974f635ff90f2e384fa7968c7
                           .group:00000000 wm4.newlib.h.7.d92c3fcef74a31e0d5308877d46e9786
                           .group:00000000 wm4.ieeefp.h.77.b6f5ce903562917fbd9193ee87d4fa47
                           .group:00000000 wm4.config.h.224.88344135d9de3e7ea139102cd6493448
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.185.cbb642e1ccd385e8aa504b15cb7fb086
                           .group:00000000 wm4.cdefs.h.49.56fd742369e655e7e8a7e365e706e208
                           .group:00000000 wm4.stddef.h.39.6817658cc6bc4c7c8354d2009e4a5777
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.390de510207922ae4defb78c0f450fc3
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.reent.h.463.ea06f504d21c8c4258c6fe87e50d6d65
                           .group:00000000 wm4.stdio.h.67.0cf8a9c281ab0b348aef5c02e7e48825
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.87.408e5d973372126daeef099c555b2753

UNDEFINED SYMBOLS
printf
