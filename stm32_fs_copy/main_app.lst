   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main_app.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "main_app.c"
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  23              	__NVIC_SetPriority:
  24              	.LFB163:
  25              		.file 2 "vendor/core_cm7.h"
   1:vendor/core_cm7.h **** /*
   2:vendor/core_cm7.h ****  * Copyright (c) 2009-2024 Arm Limited. All rights reserved.
   3:vendor/core_cm7.h ****  *
   4:vendor/core_cm7.h ****  * SPDX-License-Identifier: Apache-2.0
   5:vendor/core_cm7.h ****  *
   6:vendor/core_cm7.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:vendor/core_cm7.h ****  * not use this file except in compliance with the License.
   8:vendor/core_cm7.h ****  * You may obtain a copy of the License at
   9:vendor/core_cm7.h ****  *
  10:vendor/core_cm7.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:vendor/core_cm7.h ****  *
  12:vendor/core_cm7.h ****  * Unless required by applicable law or agreed to in writing, software
  13:vendor/core_cm7.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:vendor/core_cm7.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:vendor/core_cm7.h ****  * See the License for the specific language governing permissions and
  16:vendor/core_cm7.h ****  * limitations under the License.
  17:vendor/core_cm7.h ****  */
  18:vendor/core_cm7.h **** 
  19:vendor/core_cm7.h **** /*
  20:vendor/core_cm7.h ****  * CMSIS Cortex-M7 Core Peripheral Access Layer Header File
  21:vendor/core_cm7.h ****  */
  22:vendor/core_cm7.h **** 
  23:vendor/core_cm7.h **** #if   defined ( __ICCARM__ )
  24:vendor/core_cm7.h ****   #pragma system_include                        /* treat file as system include file for MISRA chec
  25:vendor/core_cm7.h **** #elif defined (__clang__)
  26:vendor/core_cm7.h ****   #pragma clang system_header                   /* treat file as system include file */
  27:vendor/core_cm7.h **** #elif defined ( __GNUC__ )
  28:vendor/core_cm7.h ****   #pragma GCC diagnostic ignored "-Wpedantic"   /* disable pedantic warning due to unnamed structs/
  29:vendor/core_cm7.h **** #endif
  30:vendor/core_cm7.h **** 
  31:vendor/core_cm7.h **** #ifndef __CORE_CM7_H_GENERIC
  32:vendor/core_cm7.h **** #define __CORE_CM7_H_GENERIC
  33:vendor/core_cm7.h **** 
  34:vendor/core_cm7.h **** #include <stdint.h>
  35:vendor/core_cm7.h **** 
  36:vendor/core_cm7.h **** #ifdef __cplusplus
  37:vendor/core_cm7.h ****  extern "C" {
  38:vendor/core_cm7.h **** #endif
  39:vendor/core_cm7.h **** 
  40:vendor/core_cm7.h **** /**
  41:vendor/core_cm7.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:vendor/core_cm7.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:vendor/core_cm7.h **** 
  44:vendor/core_cm7.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:vendor/core_cm7.h ****      Function definitions in header files are used to allow 'inlining'.
  46:vendor/core_cm7.h **** 
  47:vendor/core_cm7.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:vendor/core_cm7.h ****      Unions are used for effective representation of core registers.
  49:vendor/core_cm7.h **** 
  50:vendor/core_cm7.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:vendor/core_cm7.h ****      Function-like macros are used to allow more efficient code.
  52:vendor/core_cm7.h ****  */
  53:vendor/core_cm7.h **** 
  54:vendor/core_cm7.h **** 
  55:vendor/core_cm7.h **** /*******************************************************************************
  56:vendor/core_cm7.h ****  *                 CMSIS definitions
  57:vendor/core_cm7.h ****  ******************************************************************************/
  58:vendor/core_cm7.h **** /**
  59:vendor/core_cm7.h ****   \ingroup Cortex_M7
  60:vendor/core_cm7.h ****   @{
  61:vendor/core_cm7.h ****  */
  62:vendor/core_cm7.h **** 
  63:vendor/core_cm7.h **** #include "cmsis_version.h"
  64:vendor/core_cm7.h **** 
  65:vendor/core_cm7.h **** /* CMSIS CM7 definitions */
  66:vendor/core_cm7.h **** 
  67:vendor/core_cm7.h **** #define __CORTEX_M                (7U)                                /*!< Cortex-M Core */
  68:vendor/core_cm7.h **** 
  69:vendor/core_cm7.h **** /** __FPU_USED indicates whether an FPU is used or not.
  70:vendor/core_cm7.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  71:vendor/core_cm7.h **** */
  72:vendor/core_cm7.h **** #if defined ( __CC_ARM )
  73:vendor/core_cm7.h ****   #if defined (__TARGET_FPU_VFP)
  74:vendor/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  75:vendor/core_cm7.h ****       #define __FPU_USED       1U
  76:vendor/core_cm7.h ****     #else
  77:vendor/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  78:vendor/core_cm7.h ****       #define __FPU_USED       0U
  79:vendor/core_cm7.h ****     #endif
  80:vendor/core_cm7.h ****   #else
  81:vendor/core_cm7.h ****     #define __FPU_USED         0U
  82:vendor/core_cm7.h ****   #endif
  83:vendor/core_cm7.h **** 
  84:vendor/core_cm7.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  85:vendor/core_cm7.h ****   #if defined (__ARM_FP)
  86:vendor/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  87:vendor/core_cm7.h ****       #define __FPU_USED       1U
  88:vendor/core_cm7.h ****     #else
  89:vendor/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  90:vendor/core_cm7.h ****       #define __FPU_USED       0U
  91:vendor/core_cm7.h ****     #endif
  92:vendor/core_cm7.h ****   #else
  93:vendor/core_cm7.h ****     #define __FPU_USED         0U
  94:vendor/core_cm7.h ****   #endif
  95:vendor/core_cm7.h **** 
  96:vendor/core_cm7.h **** #elif defined (__ti__)
  97:vendor/core_cm7.h ****   #if defined (__ARM_FP)
  98:vendor/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  99:vendor/core_cm7.h ****       #define __FPU_USED       1U
 100:vendor/core_cm7.h ****     #else
 101:vendor/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 102:vendor/core_cm7.h ****       #define __FPU_USED       0U
 103:vendor/core_cm7.h ****     #endif
 104:vendor/core_cm7.h ****   #else
 105:vendor/core_cm7.h ****     #define __FPU_USED         0U
 106:vendor/core_cm7.h ****   #endif
 107:vendor/core_cm7.h **** 
 108:vendor/core_cm7.h **** #elif defined ( __GNUC__ )
 109:vendor/core_cm7.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 110:vendor/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 111:vendor/core_cm7.h ****       #define __FPU_USED       1U
 112:vendor/core_cm7.h ****     #else
 113:vendor/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 114:vendor/core_cm7.h ****       #define __FPU_USED       0U
 115:vendor/core_cm7.h ****     #endif
 116:vendor/core_cm7.h ****   #else
 117:vendor/core_cm7.h ****     #define __FPU_USED         0U
 118:vendor/core_cm7.h ****   #endif
 119:vendor/core_cm7.h **** 
 120:vendor/core_cm7.h **** #elif defined ( __ICCARM__ )
 121:vendor/core_cm7.h ****   #if defined (__ARMVFP__)
 122:vendor/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 123:vendor/core_cm7.h ****       #define __FPU_USED       1U
 124:vendor/core_cm7.h ****     #else
 125:vendor/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 126:vendor/core_cm7.h ****       #define __FPU_USED       0U
 127:vendor/core_cm7.h ****     #endif
 128:vendor/core_cm7.h ****   #else
 129:vendor/core_cm7.h ****     #define __FPU_USED         0U
 130:vendor/core_cm7.h ****   #endif
 131:vendor/core_cm7.h **** 
 132:vendor/core_cm7.h **** #elif defined ( __TI_ARM__ )
 133:vendor/core_cm7.h ****   #if defined (__TI_VFP_SUPPORT__)
 134:vendor/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 135:vendor/core_cm7.h ****       #define __FPU_USED       1U
 136:vendor/core_cm7.h ****     #else
 137:vendor/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 138:vendor/core_cm7.h ****       #define __FPU_USED       0U
 139:vendor/core_cm7.h ****     #endif
 140:vendor/core_cm7.h ****   #else
 141:vendor/core_cm7.h ****     #define __FPU_USED         0U
 142:vendor/core_cm7.h ****   #endif
 143:vendor/core_cm7.h **** 
 144:vendor/core_cm7.h **** #elif defined ( __TASKING__ )
 145:vendor/core_cm7.h ****   #if defined (__FPU_VFP__)
 146:vendor/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 147:vendor/core_cm7.h ****       #define __FPU_USED       1U
 148:vendor/core_cm7.h ****     #else
 149:vendor/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 150:vendor/core_cm7.h ****       #define __FPU_USED       0U
 151:vendor/core_cm7.h ****     #endif
 152:vendor/core_cm7.h ****   #else
 153:vendor/core_cm7.h ****     #define __FPU_USED         0U
 154:vendor/core_cm7.h ****   #endif
 155:vendor/core_cm7.h **** 
 156:vendor/core_cm7.h **** #elif defined ( __CSMC__ )
 157:vendor/core_cm7.h ****   #if ( __CSMC__ & 0x400U)
 158:vendor/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 159:vendor/core_cm7.h ****       #define __FPU_USED       1U
 160:vendor/core_cm7.h ****     #else
 161:vendor/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 162:vendor/core_cm7.h ****       #define __FPU_USED       0U
 163:vendor/core_cm7.h ****     #endif
 164:vendor/core_cm7.h ****   #else
 165:vendor/core_cm7.h ****     #define __FPU_USED         0U
 166:vendor/core_cm7.h ****   #endif
 167:vendor/core_cm7.h **** 
 168:vendor/core_cm7.h **** #endif
 169:vendor/core_cm7.h **** 
 170:vendor/core_cm7.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 171:vendor/core_cm7.h **** 
 172:vendor/core_cm7.h **** 
 173:vendor/core_cm7.h **** #ifdef __cplusplus
 174:vendor/core_cm7.h **** }
 175:vendor/core_cm7.h **** #endif
 176:vendor/core_cm7.h **** 
 177:vendor/core_cm7.h **** #endif /* __CORE_CM7_H_GENERIC */
 178:vendor/core_cm7.h **** 
 179:vendor/core_cm7.h **** #ifndef __CMSIS_GENERIC
 180:vendor/core_cm7.h **** 
 181:vendor/core_cm7.h **** #ifndef __CORE_CM7_H_DEPENDANT
 182:vendor/core_cm7.h **** #define __CORE_CM7_H_DEPENDANT
 183:vendor/core_cm7.h **** 
 184:vendor/core_cm7.h **** #ifdef __cplusplus
 185:vendor/core_cm7.h ****  extern "C" {
 186:vendor/core_cm7.h **** #endif
 187:vendor/core_cm7.h **** 
 188:vendor/core_cm7.h **** /* check device defines and use defaults */
 189:vendor/core_cm7.h **** #if defined __CHECK_DEVICE_DEFINES
 190:vendor/core_cm7.h ****   #ifndef __CM7_REV
 191:vendor/core_cm7.h ****     #define __CM7_REV               0x0000U
 192:vendor/core_cm7.h ****     #warning "__CM7_REV not defined in device header file; using default!"
 193:vendor/core_cm7.h ****   #endif
 194:vendor/core_cm7.h **** 
 195:vendor/core_cm7.h ****   #ifndef __FPU_PRESENT
 196:vendor/core_cm7.h ****     #define __FPU_PRESENT             0U
 197:vendor/core_cm7.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 198:vendor/core_cm7.h ****   #endif
 199:vendor/core_cm7.h **** 
 200:vendor/core_cm7.h ****   #ifndef __MPU_PRESENT
 201:vendor/core_cm7.h ****     #define __MPU_PRESENT             0U
 202:vendor/core_cm7.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 203:vendor/core_cm7.h ****   #endif
 204:vendor/core_cm7.h **** 
 205:vendor/core_cm7.h ****   #ifndef __ICACHE_PRESENT
 206:vendor/core_cm7.h ****     #define __ICACHE_PRESENT          0U
 207:vendor/core_cm7.h ****     #warning "__ICACHE_PRESENT not defined in device header file; using default!"
 208:vendor/core_cm7.h ****   #endif
 209:vendor/core_cm7.h **** 
 210:vendor/core_cm7.h ****   #ifndef __DCACHE_PRESENT
 211:vendor/core_cm7.h ****     #define __DCACHE_PRESENT          0U
 212:vendor/core_cm7.h ****     #warning "__DCACHE_PRESENT not defined in device header file; using default!"
 213:vendor/core_cm7.h ****   #endif
 214:vendor/core_cm7.h **** 
 215:vendor/core_cm7.h ****   #ifndef __DTCM_PRESENT
 216:vendor/core_cm7.h ****     #define __DTCM_PRESENT            0U
 217:vendor/core_cm7.h ****     #warning "__DTCM_PRESENT        not defined in device header file; using default!"
 218:vendor/core_cm7.h ****   #endif
 219:vendor/core_cm7.h **** 
 220:vendor/core_cm7.h ****   #ifndef __VTOR_PRESENT
 221:vendor/core_cm7.h ****     #define __VTOR_PRESENT            1U
 222:vendor/core_cm7.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 223:vendor/core_cm7.h ****   #endif
 224:vendor/core_cm7.h **** 
 225:vendor/core_cm7.h ****   #ifndef __NVIC_PRIO_BITS
 226:vendor/core_cm7.h ****     #define __NVIC_PRIO_BITS          3U
 227:vendor/core_cm7.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 228:vendor/core_cm7.h ****   #endif
 229:vendor/core_cm7.h **** 
 230:vendor/core_cm7.h ****   #ifndef __Vendor_SysTickConfig
 231:vendor/core_cm7.h ****     #define __Vendor_SysTickConfig    0U
 232:vendor/core_cm7.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 233:vendor/core_cm7.h ****   #endif
 234:vendor/core_cm7.h **** #endif
 235:vendor/core_cm7.h **** 
 236:vendor/core_cm7.h **** /* IO definitions (access restrictions to peripheral registers) */
 237:vendor/core_cm7.h **** /**
 238:vendor/core_cm7.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 239:vendor/core_cm7.h **** 
 240:vendor/core_cm7.h ****     <strong>IO Type Qualifiers</strong> are used
 241:vendor/core_cm7.h ****     \li to specify the access to peripheral variables.
 242:vendor/core_cm7.h ****     \li for automatic generation of peripheral register debug information.
 243:vendor/core_cm7.h **** */
 244:vendor/core_cm7.h **** #ifdef __cplusplus
 245:vendor/core_cm7.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 246:vendor/core_cm7.h **** #else
 247:vendor/core_cm7.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 248:vendor/core_cm7.h **** #endif
 249:vendor/core_cm7.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 250:vendor/core_cm7.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 251:vendor/core_cm7.h **** 
 252:vendor/core_cm7.h **** /* following defines should be used for structure members */
 253:vendor/core_cm7.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 254:vendor/core_cm7.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 255:vendor/core_cm7.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 256:vendor/core_cm7.h **** 
 257:vendor/core_cm7.h **** /*@} end of group Cortex_M7 */
 258:vendor/core_cm7.h **** 
 259:vendor/core_cm7.h **** 
 260:vendor/core_cm7.h **** 
 261:vendor/core_cm7.h **** /*******************************************************************************
 262:vendor/core_cm7.h ****  *                 Register Abstraction
 263:vendor/core_cm7.h ****   Core Register contain:
 264:vendor/core_cm7.h ****   - Core Register
 265:vendor/core_cm7.h ****   - Core NVIC Register
 266:vendor/core_cm7.h ****   - Core SCB Register
 267:vendor/core_cm7.h ****   - Core SysTick Register
 268:vendor/core_cm7.h ****   - Core Debug Register
 269:vendor/core_cm7.h ****   - Core MPU Register
 270:vendor/core_cm7.h ****   - Core FPU Register
 271:vendor/core_cm7.h ****  ******************************************************************************/
 272:vendor/core_cm7.h **** /**
 273:vendor/core_cm7.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 274:vendor/core_cm7.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 275:vendor/core_cm7.h **** */
 276:vendor/core_cm7.h **** 
 277:vendor/core_cm7.h **** /**
 278:vendor/core_cm7.h ****   \ingroup    CMSIS_core_register
 279:vendor/core_cm7.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 280:vendor/core_cm7.h ****   \brief      Core Register type definitions.
 281:vendor/core_cm7.h ****   @{
 282:vendor/core_cm7.h ****  */
 283:vendor/core_cm7.h **** 
 284:vendor/core_cm7.h **** /**
 285:vendor/core_cm7.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 286:vendor/core_cm7.h ****  */
 287:vendor/core_cm7.h **** typedef union
 288:vendor/core_cm7.h **** {
 289:vendor/core_cm7.h ****   struct
 290:vendor/core_cm7.h ****   {
 291:vendor/core_cm7.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 292:vendor/core_cm7.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 293:vendor/core_cm7.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 294:vendor/core_cm7.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 295:vendor/core_cm7.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 296:vendor/core_cm7.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 297:vendor/core_cm7.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 298:vendor/core_cm7.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 299:vendor/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 300:vendor/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 301:vendor/core_cm7.h **** } APSR_Type;
 302:vendor/core_cm7.h **** 
 303:vendor/core_cm7.h **** /** \brief APSR Register Definitions */
 304:vendor/core_cm7.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 305:vendor/core_cm7.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 306:vendor/core_cm7.h **** 
 307:vendor/core_cm7.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 308:vendor/core_cm7.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 309:vendor/core_cm7.h **** 
 310:vendor/core_cm7.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 311:vendor/core_cm7.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 312:vendor/core_cm7.h **** 
 313:vendor/core_cm7.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 314:vendor/core_cm7.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 315:vendor/core_cm7.h **** 
 316:vendor/core_cm7.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 317:vendor/core_cm7.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 318:vendor/core_cm7.h **** 
 319:vendor/core_cm7.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 320:vendor/core_cm7.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 321:vendor/core_cm7.h **** 
 322:vendor/core_cm7.h **** 
 323:vendor/core_cm7.h **** /**
 324:vendor/core_cm7.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 325:vendor/core_cm7.h ****  */
 326:vendor/core_cm7.h **** typedef union
 327:vendor/core_cm7.h **** {
 328:vendor/core_cm7.h ****   struct
 329:vendor/core_cm7.h ****   {
 330:vendor/core_cm7.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 331:vendor/core_cm7.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 332:vendor/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 333:vendor/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:vendor/core_cm7.h **** } IPSR_Type;
 335:vendor/core_cm7.h **** 
 336:vendor/core_cm7.h **** /** \brief IPSR Register Definitions */
 337:vendor/core_cm7.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 338:vendor/core_cm7.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 339:vendor/core_cm7.h **** 
 340:vendor/core_cm7.h **** 
 341:vendor/core_cm7.h **** /**
 342:vendor/core_cm7.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 343:vendor/core_cm7.h ****  */
 344:vendor/core_cm7.h **** typedef union
 345:vendor/core_cm7.h **** {
 346:vendor/core_cm7.h ****   struct
 347:vendor/core_cm7.h ****   {
 348:vendor/core_cm7.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 349:vendor/core_cm7.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 350:vendor/core_cm7.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 351:vendor/core_cm7.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 352:vendor/core_cm7.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 353:vendor/core_cm7.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 354:vendor/core_cm7.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 355:vendor/core_cm7.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 356:vendor/core_cm7.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 357:vendor/core_cm7.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 358:vendor/core_cm7.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 359:vendor/core_cm7.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 360:vendor/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 361:vendor/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 362:vendor/core_cm7.h **** } xPSR_Type;
 363:vendor/core_cm7.h **** 
 364:vendor/core_cm7.h **** /** \brief xPSR Register Definitions */
 365:vendor/core_cm7.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 366:vendor/core_cm7.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 367:vendor/core_cm7.h **** 
 368:vendor/core_cm7.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 369:vendor/core_cm7.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 370:vendor/core_cm7.h **** 
 371:vendor/core_cm7.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 372:vendor/core_cm7.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 373:vendor/core_cm7.h **** 
 374:vendor/core_cm7.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 375:vendor/core_cm7.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 376:vendor/core_cm7.h **** 
 377:vendor/core_cm7.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 378:vendor/core_cm7.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 379:vendor/core_cm7.h **** 
 380:vendor/core_cm7.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 381:vendor/core_cm7.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 382:vendor/core_cm7.h **** 
 383:vendor/core_cm7.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 384:vendor/core_cm7.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 385:vendor/core_cm7.h **** 
 386:vendor/core_cm7.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 387:vendor/core_cm7.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 388:vendor/core_cm7.h **** 
 389:vendor/core_cm7.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 390:vendor/core_cm7.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 391:vendor/core_cm7.h **** 
 392:vendor/core_cm7.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 393:vendor/core_cm7.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 394:vendor/core_cm7.h **** 
 395:vendor/core_cm7.h **** 
 396:vendor/core_cm7.h **** /**
 397:vendor/core_cm7.h ****   \brief  Union type to access the Control Registers (CONTROL).
 398:vendor/core_cm7.h ****  */
 399:vendor/core_cm7.h **** typedef union
 400:vendor/core_cm7.h **** {
 401:vendor/core_cm7.h ****   struct
 402:vendor/core_cm7.h ****   {
 403:vendor/core_cm7.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 404:vendor/core_cm7.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 405:vendor/core_cm7.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 406:vendor/core_cm7.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 407:vendor/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 408:vendor/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 409:vendor/core_cm7.h **** } CONTROL_Type;
 410:vendor/core_cm7.h **** 
 411:vendor/core_cm7.h **** /** \brief CONTROL Register Definitions */
 412:vendor/core_cm7.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 413:vendor/core_cm7.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 414:vendor/core_cm7.h **** 
 415:vendor/core_cm7.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 416:vendor/core_cm7.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 417:vendor/core_cm7.h **** 
 418:vendor/core_cm7.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 419:vendor/core_cm7.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 420:vendor/core_cm7.h **** 
 421:vendor/core_cm7.h **** /*@} end of group CMSIS_CORE */
 422:vendor/core_cm7.h **** 
 423:vendor/core_cm7.h **** 
 424:vendor/core_cm7.h **** /**
 425:vendor/core_cm7.h ****   \ingroup    CMSIS_core_register
 426:vendor/core_cm7.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 427:vendor/core_cm7.h ****   \brief      Type definitions for the NVIC Registers
 428:vendor/core_cm7.h ****   @{
 429:vendor/core_cm7.h ****  */
 430:vendor/core_cm7.h **** 
 431:vendor/core_cm7.h **** /**
 432:vendor/core_cm7.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 433:vendor/core_cm7.h ****  */
 434:vendor/core_cm7.h **** typedef struct
 435:vendor/core_cm7.h **** {
 436:vendor/core_cm7.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 437:vendor/core_cm7.h ****         uint32_t RESERVED0[24U];
 438:vendor/core_cm7.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 439:vendor/core_cm7.h ****         uint32_t RESERVED1[24U];
 440:vendor/core_cm7.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 441:vendor/core_cm7.h ****         uint32_t RESERVED2[24U];
 442:vendor/core_cm7.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 443:vendor/core_cm7.h ****         uint32_t RESERVED3[24U];
 444:vendor/core_cm7.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 445:vendor/core_cm7.h ****         uint32_t RESERVED4[56U];
 446:vendor/core_cm7.h ****   __IOM uint8_t  IPR[240U];              /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 447:vendor/core_cm7.h ****         uint32_t RESERVED5[644U];
 448:vendor/core_cm7.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 449:vendor/core_cm7.h **** }  NVIC_Type;
 450:vendor/core_cm7.h **** 
 451:vendor/core_cm7.h **** /** \brief NVIC Software Triggered Interrupt Register Definitions */
 452:vendor/core_cm7.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 453:vendor/core_cm7.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 454:vendor/core_cm7.h **** 
 455:vendor/core_cm7.h **** /*@} end of group CMSIS_NVIC */
 456:vendor/core_cm7.h **** 
 457:vendor/core_cm7.h **** 
 458:vendor/core_cm7.h **** /**
 459:vendor/core_cm7.h ****   \ingroup  CMSIS_core_register
 460:vendor/core_cm7.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 461:vendor/core_cm7.h ****   \brief    Type definitions for the System Control Block Registers
 462:vendor/core_cm7.h ****   @{
 463:vendor/core_cm7.h ****  */
 464:vendor/core_cm7.h **** 
 465:vendor/core_cm7.h **** /**
 466:vendor/core_cm7.h ****   \brief  Structure type to access the System Control Block (SCB).
 467:vendor/core_cm7.h ****  */
 468:vendor/core_cm7.h **** typedef struct
 469:vendor/core_cm7.h **** {
 470:vendor/core_cm7.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 471:vendor/core_cm7.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 472:vendor/core_cm7.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 473:vendor/core_cm7.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 474:vendor/core_cm7.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 475:vendor/core_cm7.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 476:vendor/core_cm7.h ****   __IOM uint8_t  SHPR[12U];              /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 477:vendor/core_cm7.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 478:vendor/core_cm7.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 479:vendor/core_cm7.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 480:vendor/core_cm7.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 481:vendor/core_cm7.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 482:vendor/core_cm7.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 483:vendor/core_cm7.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 484:vendor/core_cm7.h ****   __IM  uint32_t ID_PFR[2U];             /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 485:vendor/core_cm7.h ****   __IM  uint32_t ID_DFR;                 /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 486:vendor/core_cm7.h ****   __IM  uint32_t ID_AFR;                 /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 487:vendor/core_cm7.h ****   __IM  uint32_t ID_MMFR[4U];            /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 488:vendor/core_cm7.h ****   __IM  uint32_t ID_ISAR[5U];            /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 489:vendor/core_cm7.h ****         uint32_t RESERVED0[1U];
 490:vendor/core_cm7.h ****   __IM  uint32_t CLIDR;                  /*!< Offset: 0x078 (R/ )  Cache Level ID register */
 491:vendor/core_cm7.h ****   __IM  uint32_t CTR;                    /*!< Offset: 0x07C (R/ )  Cache Type register */
 492:vendor/core_cm7.h ****   __IM  uint32_t CCSIDR;                 /*!< Offset: 0x080 (R/ )  Cache Size ID Register */
 493:vendor/core_cm7.h ****   __IOM uint32_t CSSELR;                 /*!< Offset: 0x084 (R/W)  Cache Size Selection Register */
 494:vendor/core_cm7.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 495:vendor/core_cm7.h ****         uint32_t RESERVED3[93U];
 496:vendor/core_cm7.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0x200 ( /W)  Software Triggered Interrupt Reg
 497:vendor/core_cm7.h ****         uint32_t RESERVED4[15U];
 498:vendor/core_cm7.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x240 (R/ )  Media and VFP Feature Register 0
 499:vendor/core_cm7.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x244 (R/ )  Media and VFP Feature Register 1
 500:vendor/core_cm7.h ****   __IM  uint32_t MVFR2;                  /*!< Offset: 0x248 (R/ )  Media and VFP Feature Register 2
 501:vendor/core_cm7.h ****         uint32_t RESERVED5[1U];
 502:vendor/core_cm7.h ****   __OM  uint32_t ICIALLU;                /*!< Offset: 0x250 ( /W)  I-Cache Invalidate All to PoU */
 503:vendor/core_cm7.h ****         uint32_t RESERVED6[1U];
 504:vendor/core_cm7.h ****   __OM  uint32_t ICIMVAU;                /*!< Offset: 0x258 ( /W)  I-Cache Invalidate by MVA to PoU
 505:vendor/core_cm7.h ****   __OM  uint32_t DCIMVAC;                /*!< Offset: 0x25C ( /W)  D-Cache Invalidate by MVA to PoC
 506:vendor/core_cm7.h ****   __OM  uint32_t DCISW;                  /*!< Offset: 0x260 ( /W)  D-Cache Invalidate by Set-way */
 507:vendor/core_cm7.h ****   __OM  uint32_t DCCMVAU;                /*!< Offset: 0x264 ( /W)  D-Cache Clean by MVA to PoU */
 508:vendor/core_cm7.h ****   __OM  uint32_t DCCMVAC;                /*!< Offset: 0x268 ( /W)  D-Cache Clean by MVA to PoC */
 509:vendor/core_cm7.h ****   __OM  uint32_t DCCSW;                  /*!< Offset: 0x26C ( /W)  D-Cache Clean by Set-way */
 510:vendor/core_cm7.h ****   __OM  uint32_t DCCIMVAC;               /*!< Offset: 0x270 ( /W)  D-Cache Clean and Invalidate by 
 511:vendor/core_cm7.h ****   __OM  uint32_t DCCISW;                 /*!< Offset: 0x274 ( /W)  D-Cache Clean and Invalidate by 
 512:vendor/core_cm7.h ****   __OM  uint32_t BPIALL;                 /*!< Offset: 0x278 ( /W)  Branch Predictor Invalidate All 
 513:vendor/core_cm7.h ****         uint32_t RESERVED7[5U];
 514:vendor/core_cm7.h ****   __IOM uint32_t ITCMCR;                 /*!< Offset: 0x290 (R/W)  Instruction Tightly-Coupled Memo
 515:vendor/core_cm7.h ****   __IOM uint32_t DTCMCR;                 /*!< Offset: 0x294 (R/W)  Data Tightly-Coupled Memory Cont
 516:vendor/core_cm7.h ****   __IOM uint32_t AHBPCR;                 /*!< Offset: 0x298 (R/W)  AHBP Control Register */
 517:vendor/core_cm7.h ****   __IOM uint32_t CACR;                   /*!< Offset: 0x29C (R/W)  L1 Cache Control Register */
 518:vendor/core_cm7.h ****   __IOM uint32_t AHBSCR;                 /*!< Offset: 0x2A0 (R/W)  AHB Slave Control Register */
 519:vendor/core_cm7.h ****         uint32_t RESERVED8[1U];
 520:vendor/core_cm7.h ****   __IOM uint32_t ABFSR;                  /*!< Offset: 0x2A8 (R/W)  Auxiliary Bus Fault Status Regis
 521:vendor/core_cm7.h **** } SCB_Type;
 522:vendor/core_cm7.h **** 
 523:vendor/core_cm7.h **** /** \brief SCB CPUID Register Definitions */
 524:vendor/core_cm7.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 525:vendor/core_cm7.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 526:vendor/core_cm7.h **** 
 527:vendor/core_cm7.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 528:vendor/core_cm7.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 529:vendor/core_cm7.h **** 
 530:vendor/core_cm7.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 531:vendor/core_cm7.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 532:vendor/core_cm7.h **** 
 533:vendor/core_cm7.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 534:vendor/core_cm7.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 535:vendor/core_cm7.h **** 
 536:vendor/core_cm7.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 537:vendor/core_cm7.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 538:vendor/core_cm7.h **** 
 539:vendor/core_cm7.h **** /** \brief SCB Interrupt Control State Register Definitions */
 540:vendor/core_cm7.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 541:vendor/core_cm7.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 542:vendor/core_cm7.h **** 
 543:vendor/core_cm7.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 544:vendor/core_cm7.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 545:vendor/core_cm7.h **** 
 546:vendor/core_cm7.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 547:vendor/core_cm7.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 548:vendor/core_cm7.h **** 
 549:vendor/core_cm7.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 550:vendor/core_cm7.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 551:vendor/core_cm7.h **** 
 552:vendor/core_cm7.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 553:vendor/core_cm7.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 554:vendor/core_cm7.h **** 
 555:vendor/core_cm7.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 556:vendor/core_cm7.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 557:vendor/core_cm7.h **** 
 558:vendor/core_cm7.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 559:vendor/core_cm7.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 560:vendor/core_cm7.h **** 
 561:vendor/core_cm7.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 562:vendor/core_cm7.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 563:vendor/core_cm7.h **** 
 564:vendor/core_cm7.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 565:vendor/core_cm7.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 566:vendor/core_cm7.h **** 
 567:vendor/core_cm7.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 568:vendor/core_cm7.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 569:vendor/core_cm7.h **** 
 570:vendor/core_cm7.h **** /** \brief SCB Vector Table Offset Register Definitions */
 571:vendor/core_cm7.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 572:vendor/core_cm7.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 573:vendor/core_cm7.h **** 
 574:vendor/core_cm7.h **** /** \brief SCB Application Interrupt and Reset Control Register Definitions */
 575:vendor/core_cm7.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 576:vendor/core_cm7.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 577:vendor/core_cm7.h **** 
 578:vendor/core_cm7.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 579:vendor/core_cm7.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 580:vendor/core_cm7.h **** 
 581:vendor/core_cm7.h **** #define SCB_AIRCR_ENDIANNESS_Pos           15U                                            /*!< SCB 
 582:vendor/core_cm7.h **** #define SCB_AIRCR_ENDIANNESS_Msk           (1UL << SCB_AIRCR_ENDIANNESS_Pos)              /*!< SCB 
 583:vendor/core_cm7.h **** 
 584:vendor/core_cm7.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 585:vendor/core_cm7.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 586:vendor/core_cm7.h **** 
 587:vendor/core_cm7.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 588:vendor/core_cm7.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 589:vendor/core_cm7.h **** 
 590:vendor/core_cm7.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 591:vendor/core_cm7.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 592:vendor/core_cm7.h **** 
 593:vendor/core_cm7.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 594:vendor/core_cm7.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 595:vendor/core_cm7.h **** 
 596:vendor/core_cm7.h **** /** \brief SCB System Control Register Definitions */
 597:vendor/core_cm7.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 598:vendor/core_cm7.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 599:vendor/core_cm7.h **** 
 600:vendor/core_cm7.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 601:vendor/core_cm7.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 602:vendor/core_cm7.h **** 
 603:vendor/core_cm7.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 604:vendor/core_cm7.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 605:vendor/core_cm7.h **** 
 606:vendor/core_cm7.h **** /** \brief SCB Configuration Control Register Definitions */
 607:vendor/core_cm7.h **** #define SCB_CCR_BP_Pos                      18U                                           /*!< SCB 
 608:vendor/core_cm7.h **** #define SCB_CCR_BP_Msk                     (1UL << SCB_CCR_BP_Pos)                        /*!< SCB 
 609:vendor/core_cm7.h **** 
 610:vendor/core_cm7.h **** #define SCB_CCR_IC_Pos                      17U                                           /*!< SCB 
 611:vendor/core_cm7.h **** #define SCB_CCR_IC_Msk                     (1UL << SCB_CCR_IC_Pos)                        /*!< SCB 
 612:vendor/core_cm7.h **** 
 613:vendor/core_cm7.h **** #define SCB_CCR_DC_Pos                      16U                                           /*!< SCB 
 614:vendor/core_cm7.h **** #define SCB_CCR_DC_Msk                     (1UL << SCB_CCR_DC_Pos)                        /*!< SCB 
 615:vendor/core_cm7.h **** 
 616:vendor/core_cm7.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 617:vendor/core_cm7.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 618:vendor/core_cm7.h **** 
 619:vendor/core_cm7.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 620:vendor/core_cm7.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 621:vendor/core_cm7.h **** 
 622:vendor/core_cm7.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 623:vendor/core_cm7.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 624:vendor/core_cm7.h **** 
 625:vendor/core_cm7.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 626:vendor/core_cm7.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 627:vendor/core_cm7.h **** 
 628:vendor/core_cm7.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 629:vendor/core_cm7.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 630:vendor/core_cm7.h **** 
 631:vendor/core_cm7.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 632:vendor/core_cm7.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 633:vendor/core_cm7.h **** 
 634:vendor/core_cm7.h **** /** \brief SCB System Handler Control and State Register Definitions */
 635:vendor/core_cm7.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 636:vendor/core_cm7.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 637:vendor/core_cm7.h **** 
 638:vendor/core_cm7.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 639:vendor/core_cm7.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 640:vendor/core_cm7.h **** 
 641:vendor/core_cm7.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 642:vendor/core_cm7.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 643:vendor/core_cm7.h **** 
 644:vendor/core_cm7.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 645:vendor/core_cm7.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 646:vendor/core_cm7.h **** 
 647:vendor/core_cm7.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 648:vendor/core_cm7.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 649:vendor/core_cm7.h **** 
 650:vendor/core_cm7.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 651:vendor/core_cm7.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 652:vendor/core_cm7.h **** 
 653:vendor/core_cm7.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 654:vendor/core_cm7.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 655:vendor/core_cm7.h **** 
 656:vendor/core_cm7.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 657:vendor/core_cm7.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 658:vendor/core_cm7.h **** 
 659:vendor/core_cm7.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 660:vendor/core_cm7.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 661:vendor/core_cm7.h **** 
 662:vendor/core_cm7.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 663:vendor/core_cm7.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 664:vendor/core_cm7.h **** 
 665:vendor/core_cm7.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 666:vendor/core_cm7.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 667:vendor/core_cm7.h **** 
 668:vendor/core_cm7.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 669:vendor/core_cm7.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 670:vendor/core_cm7.h **** 
 671:vendor/core_cm7.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 672:vendor/core_cm7.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 673:vendor/core_cm7.h **** 
 674:vendor/core_cm7.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 675:vendor/core_cm7.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 676:vendor/core_cm7.h **** 
 677:vendor/core_cm7.h **** /** \brief SCB Configurable Fault Status Register Definitions */
 678:vendor/core_cm7.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 679:vendor/core_cm7.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 680:vendor/core_cm7.h **** 
 681:vendor/core_cm7.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 682:vendor/core_cm7.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 683:vendor/core_cm7.h **** 
 684:vendor/core_cm7.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 685:vendor/core_cm7.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 686:vendor/core_cm7.h **** 
 687:vendor/core_cm7.h **** /** \brief SCB MemManage Fault Status Register Definitions (part of SCB Configurable Fault Status R
 688:vendor/core_cm7.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_CFSR_MEMFAULTSR_Pos + 7U)                 /*!< SCB 
 689:vendor/core_cm7.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 690:vendor/core_cm7.h **** 
 691:vendor/core_cm7.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_CFSR_MEMFAULTSR_Pos + 5U)                 /*!< SCB 
 692:vendor/core_cm7.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 693:vendor/core_cm7.h **** 
 694:vendor/core_cm7.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_CFSR_MEMFAULTSR_Pos + 4U)                 /*!< SCB 
 695:vendor/core_cm7.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 696:vendor/core_cm7.h **** 
 697:vendor/core_cm7.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_CFSR_MEMFAULTSR_Pos + 3U)                 /*!< SCB 
 698:vendor/core_cm7.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 699:vendor/core_cm7.h **** 
 700:vendor/core_cm7.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_CFSR_MEMFAULTSR_Pos + 1U)                 /*!< SCB 
 701:vendor/core_cm7.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 702:vendor/core_cm7.h **** 
 703:vendor/core_cm7.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_CFSR_MEMFAULTSR_Pos + 0U)                 /*!< SCB 
 704:vendor/core_cm7.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 705:vendor/core_cm7.h **** 
 706:vendor/core_cm7.h **** /** \brief SCB BusFault Status Register Definitions (part of SCB Configurable Fault Status Register
 707:vendor/core_cm7.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 708:vendor/core_cm7.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 709:vendor/core_cm7.h **** 
 710:vendor/core_cm7.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 711:vendor/core_cm7.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 712:vendor/core_cm7.h **** 
 713:vendor/core_cm7.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 714:vendor/core_cm7.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 715:vendor/core_cm7.h **** 
 716:vendor/core_cm7.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 717:vendor/core_cm7.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 718:vendor/core_cm7.h **** 
 719:vendor/core_cm7.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 720:vendor/core_cm7.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 721:vendor/core_cm7.h **** 
 722:vendor/core_cm7.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 723:vendor/core_cm7.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 724:vendor/core_cm7.h **** 
 725:vendor/core_cm7.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 726:vendor/core_cm7.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 727:vendor/core_cm7.h **** 
 728:vendor/core_cm7.h **** /** \brief SCB UsageFault Status Register Definitions (part of SCB Configurable Fault Status Regist
 729:vendor/core_cm7.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 730:vendor/core_cm7.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 731:vendor/core_cm7.h **** 
 732:vendor/core_cm7.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 733:vendor/core_cm7.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 734:vendor/core_cm7.h **** 
 735:vendor/core_cm7.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 736:vendor/core_cm7.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 737:vendor/core_cm7.h **** 
 738:vendor/core_cm7.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 739:vendor/core_cm7.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 740:vendor/core_cm7.h **** 
 741:vendor/core_cm7.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 742:vendor/core_cm7.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 743:vendor/core_cm7.h **** 
 744:vendor/core_cm7.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 745:vendor/core_cm7.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 746:vendor/core_cm7.h **** 
 747:vendor/core_cm7.h **** /** \brief SCB Hard Fault Status Register Definitions */
 748:vendor/core_cm7.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 749:vendor/core_cm7.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 750:vendor/core_cm7.h **** 
 751:vendor/core_cm7.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 752:vendor/core_cm7.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 753:vendor/core_cm7.h **** 
 754:vendor/core_cm7.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 755:vendor/core_cm7.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 756:vendor/core_cm7.h **** 
 757:vendor/core_cm7.h **** /** \brief SCB Debug Fault Status Register Definitions */
 758:vendor/core_cm7.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 759:vendor/core_cm7.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 760:vendor/core_cm7.h **** 
 761:vendor/core_cm7.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 762:vendor/core_cm7.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 763:vendor/core_cm7.h **** 
 764:vendor/core_cm7.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 765:vendor/core_cm7.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 766:vendor/core_cm7.h **** 
 767:vendor/core_cm7.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 768:vendor/core_cm7.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 769:vendor/core_cm7.h **** 
 770:vendor/core_cm7.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 771:vendor/core_cm7.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 772:vendor/core_cm7.h **** 
 773:vendor/core_cm7.h **** /** \brief SCB Cache Level ID Register Definitions */
 774:vendor/core_cm7.h **** #define SCB_CLIDR_LOUU_Pos                 27U                                            /*!< SCB 
 775:vendor/core_cm7.h **** #define SCB_CLIDR_LOUU_Msk                 (7UL << SCB_CLIDR_LOUU_Pos)                    /*!< SCB 
 776:vendor/core_cm7.h **** 
 777:vendor/core_cm7.h **** #define SCB_CLIDR_LOC_Pos                  24U                                            /*!< SCB 
 778:vendor/core_cm7.h **** #define SCB_CLIDR_LOC_Msk                  (7UL << SCB_CLIDR_LOC_Pos)                     /*!< SCB 
 779:vendor/core_cm7.h **** 
 780:vendor/core_cm7.h **** /** \brief SCB Cache Type Register Definitions */
 781:vendor/core_cm7.h **** #define SCB_CTR_FORMAT_Pos                 29U                                            /*!< SCB 
 782:vendor/core_cm7.h **** #define SCB_CTR_FORMAT_Msk                 (7UL << SCB_CTR_FORMAT_Pos)                    /*!< SCB 
 783:vendor/core_cm7.h **** 
 784:vendor/core_cm7.h **** #define SCB_CTR_CWG_Pos                    24U                                            /*!< SCB 
 785:vendor/core_cm7.h **** #define SCB_CTR_CWG_Msk                    (0xFUL << SCB_CTR_CWG_Pos)                     /*!< SCB 
 786:vendor/core_cm7.h **** 
 787:vendor/core_cm7.h **** #define SCB_CTR_ERG_Pos                    20U                                            /*!< SCB 
 788:vendor/core_cm7.h **** #define SCB_CTR_ERG_Msk                    (0xFUL << SCB_CTR_ERG_Pos)                     /*!< SCB 
 789:vendor/core_cm7.h **** 
 790:vendor/core_cm7.h **** #define SCB_CTR_DMINLINE_Pos               16U                                            /*!< SCB 
 791:vendor/core_cm7.h **** #define SCB_CTR_DMINLINE_Msk               (0xFUL << SCB_CTR_DMINLINE_Pos)                /*!< SCB 
 792:vendor/core_cm7.h **** 
 793:vendor/core_cm7.h **** #define SCB_CTR_IMINLINE_Pos                0U                                            /*!< SCB 
 794:vendor/core_cm7.h **** #define SCB_CTR_IMINLINE_Msk               (0xFUL /*<< SCB_CTR_IMINLINE_Pos*/)            /*!< SCB 
 795:vendor/core_cm7.h **** 
 796:vendor/core_cm7.h **** /** \brief SCB Cache Size ID Register Definitions */
 797:vendor/core_cm7.h **** #define SCB_CCSIDR_WT_Pos                  31U                                            /*!< SCB 
 798:vendor/core_cm7.h **** #define SCB_CCSIDR_WT_Msk                  (1UL << SCB_CCSIDR_WT_Pos)                     /*!< SCB 
 799:vendor/core_cm7.h **** 
 800:vendor/core_cm7.h **** #define SCB_CCSIDR_WB_Pos                  30U                                            /*!< SCB 
 801:vendor/core_cm7.h **** #define SCB_CCSIDR_WB_Msk                  (1UL << SCB_CCSIDR_WB_Pos)                     /*!< SCB 
 802:vendor/core_cm7.h **** 
 803:vendor/core_cm7.h **** #define SCB_CCSIDR_RA_Pos                  29U                                            /*!< SCB 
 804:vendor/core_cm7.h **** #define SCB_CCSIDR_RA_Msk                  (1UL << SCB_CCSIDR_RA_Pos)                     /*!< SCB 
 805:vendor/core_cm7.h **** 
 806:vendor/core_cm7.h **** #define SCB_CCSIDR_WA_Pos                  28U                                            /*!< SCB 
 807:vendor/core_cm7.h **** #define SCB_CCSIDR_WA_Msk                  (1UL << SCB_CCSIDR_WA_Pos)                     /*!< SCB 
 808:vendor/core_cm7.h **** 
 809:vendor/core_cm7.h **** #define SCB_CCSIDR_NUMSETS_Pos             13U                                            /*!< SCB 
 810:vendor/core_cm7.h **** #define SCB_CCSIDR_NUMSETS_Msk             (0x7FFFUL << SCB_CCSIDR_NUMSETS_Pos)           /*!< SCB 
 811:vendor/core_cm7.h **** 
 812:vendor/core_cm7.h **** #define SCB_CCSIDR_ASSOCIATIVITY_Pos        3U                                            /*!< SCB 
 813:vendor/core_cm7.h **** #define SCB_CCSIDR_ASSOCIATIVITY_Msk       (0x3FFUL << SCB_CCSIDR_ASSOCIATIVITY_Pos)      /*!< SCB 
 814:vendor/core_cm7.h **** 
 815:vendor/core_cm7.h **** #define SCB_CCSIDR_LINESIZE_Pos             0U                                            /*!< SCB 
 816:vendor/core_cm7.h **** #define SCB_CCSIDR_LINESIZE_Msk            (7UL /*<< SCB_CCSIDR_LINESIZE_Pos*/)           /*!< SCB 
 817:vendor/core_cm7.h **** 
 818:vendor/core_cm7.h **** /** \brief SCB Cache Size Selection Register Definitions */
 819:vendor/core_cm7.h **** #define SCB_CSSELR_LEVEL_Pos                1U                                            /*!< SCB 
 820:vendor/core_cm7.h **** #define SCB_CSSELR_LEVEL_Msk               (7UL << SCB_CSSELR_LEVEL_Pos)                  /*!< SCB 
 821:vendor/core_cm7.h **** 
 822:vendor/core_cm7.h **** #define SCB_CSSELR_IND_Pos                  0U                                            /*!< SCB 
 823:vendor/core_cm7.h **** #define SCB_CSSELR_IND_Msk                 (1UL /*<< SCB_CSSELR_IND_Pos*/)                /*!< SCB 
 824:vendor/core_cm7.h **** 
 825:vendor/core_cm7.h **** /** \brief SCB Software Triggered Interrupt Register Definitions */
 826:vendor/core_cm7.h **** #define SCB_STIR_INTID_Pos                  0U                                            /*!< SCB 
 827:vendor/core_cm7.h **** #define SCB_STIR_INTID_Msk                 (0x1FFUL /*<< SCB_STIR_INTID_Pos*/)            /*!< SCB 
 828:vendor/core_cm7.h **** 
 829:vendor/core_cm7.h **** /** \brief SCB D-Cache Invalidate by Set-way Register Definitions */
 830:vendor/core_cm7.h **** #define SCB_DCISW_WAY_Pos                  30U                                            /*!< SCB 
 831:vendor/core_cm7.h **** #define SCB_DCISW_WAY_Msk                  (3UL << SCB_DCISW_WAY_Pos)                     /*!< SCB 
 832:vendor/core_cm7.h **** 
 833:vendor/core_cm7.h **** #define SCB_DCISW_SET_Pos                   5U                                            /*!< SCB 
 834:vendor/core_cm7.h **** #define SCB_DCISW_SET_Msk                  (0x1FFUL << SCB_DCISW_SET_Pos)                 /*!< SCB 
 835:vendor/core_cm7.h **** 
 836:vendor/core_cm7.h **** /** \brief SCB D-Cache Clean by Set-way Register Definitions */
 837:vendor/core_cm7.h **** #define SCB_DCCSW_WAY_Pos                  30U                                            /*!< SCB 
 838:vendor/core_cm7.h **** #define SCB_DCCSW_WAY_Msk                  (3UL << SCB_DCCSW_WAY_Pos)                     /*!< SCB 
 839:vendor/core_cm7.h **** 
 840:vendor/core_cm7.h **** #define SCB_DCCSW_SET_Pos                   5U                                            /*!< SCB 
 841:vendor/core_cm7.h **** #define SCB_DCCSW_SET_Msk                  (0x1FFUL << SCB_DCCSW_SET_Pos)                 /*!< SCB 
 842:vendor/core_cm7.h **** 
 843:vendor/core_cm7.h **** /** \brief SCB D-Cache Clean and Invalidate by Set-way Register Definitions */
 844:vendor/core_cm7.h **** #define SCB_DCCISW_WAY_Pos                 30U                                            /*!< SCB 
 845:vendor/core_cm7.h **** #define SCB_DCCISW_WAY_Msk                 (3UL << SCB_DCCISW_WAY_Pos)                    /*!< SCB 
 846:vendor/core_cm7.h **** 
 847:vendor/core_cm7.h **** #define SCB_DCCISW_SET_Pos                  5U                                            /*!< SCB 
 848:vendor/core_cm7.h **** #define SCB_DCCISW_SET_Msk                 (0x1FFUL << SCB_DCCISW_SET_Pos)                /*!< SCB 
 849:vendor/core_cm7.h **** 
 850:vendor/core_cm7.h **** /** \brief SCB Instruction Tightly-Coupled Memory Control Register Definitions */
 851:vendor/core_cm7.h **** #define SCB_ITCMCR_SZ_Pos                   3U                                            /*!< SCB 
 852:vendor/core_cm7.h **** #define SCB_ITCMCR_SZ_Msk                  (0xFUL << SCB_ITCMCR_SZ_Pos)                   /*!< SCB 
 853:vendor/core_cm7.h **** 
 854:vendor/core_cm7.h **** #define SCB_ITCMCR_RETEN_Pos                2U                                            /*!< SCB 
 855:vendor/core_cm7.h **** #define SCB_ITCMCR_RETEN_Msk               (1UL << SCB_ITCMCR_RETEN_Pos)                  /*!< SCB 
 856:vendor/core_cm7.h **** 
 857:vendor/core_cm7.h **** #define SCB_ITCMCR_RMW_Pos                  1U                                            /*!< SCB 
 858:vendor/core_cm7.h **** #define SCB_ITCMCR_RMW_Msk                 (1UL << SCB_ITCMCR_RMW_Pos)                    /*!< SCB 
 859:vendor/core_cm7.h **** 
 860:vendor/core_cm7.h **** #define SCB_ITCMCR_EN_Pos                   0U                                            /*!< SCB 
 861:vendor/core_cm7.h **** #define SCB_ITCMCR_EN_Msk                  (1UL /*<< SCB_ITCMCR_EN_Pos*/)                 /*!< SCB 
 862:vendor/core_cm7.h **** 
 863:vendor/core_cm7.h **** /** \brief SCB Data Tightly-Coupled Memory Control Register Definitions */
 864:vendor/core_cm7.h **** #define SCB_DTCMCR_SZ_Pos                   3U                                            /*!< SCB 
 865:vendor/core_cm7.h **** #define SCB_DTCMCR_SZ_Msk                  (0xFUL << SCB_DTCMCR_SZ_Pos)                   /*!< SCB 
 866:vendor/core_cm7.h **** 
 867:vendor/core_cm7.h **** #define SCB_DTCMCR_RETEN_Pos                2U                                            /*!< SCB 
 868:vendor/core_cm7.h **** #define SCB_DTCMCR_RETEN_Msk               (1UL << SCB_DTCMCR_RETEN_Pos)                   /*!< SCB
 869:vendor/core_cm7.h **** 
 870:vendor/core_cm7.h **** #define SCB_DTCMCR_RMW_Pos                  1U                                            /*!< SCB 
 871:vendor/core_cm7.h **** #define SCB_DTCMCR_RMW_Msk                 (1UL << SCB_DTCMCR_RMW_Pos)                    /*!< SCB 
 872:vendor/core_cm7.h **** 
 873:vendor/core_cm7.h **** #define SCB_DTCMCR_EN_Pos                   0U                                            /*!< SCB 
 874:vendor/core_cm7.h **** #define SCB_DTCMCR_EN_Msk                  (1UL /*<< SCB_DTCMCR_EN_Pos*/)                 /*!< SCB 
 875:vendor/core_cm7.h **** 
 876:vendor/core_cm7.h **** /** \brief SCB AHBP Control Register Definitions */
 877:vendor/core_cm7.h **** #define SCB_AHBPCR_SZ_Pos                   1U                                            /*!< SCB 
 878:vendor/core_cm7.h **** #define SCB_AHBPCR_SZ_Msk                  (7UL << SCB_AHBPCR_SZ_Pos)                     /*!< SCB 
 879:vendor/core_cm7.h **** 
 880:vendor/core_cm7.h **** #define SCB_AHBPCR_EN_Pos                   0U                                            /*!< SCB 
 881:vendor/core_cm7.h **** #define SCB_AHBPCR_EN_Msk                  (1UL /*<< SCB_AHBPCR_EN_Pos*/)                 /*!< SCB 
 882:vendor/core_cm7.h **** 
 883:vendor/core_cm7.h **** /** \brief SCB L1 Cache Control Register Definitions */
 884:vendor/core_cm7.h **** #define SCB_CACR_FORCEWT_Pos                2U                                            /*!< SCB 
 885:vendor/core_cm7.h **** #define SCB_CACR_FORCEWT_Msk               (1UL << SCB_CACR_FORCEWT_Pos)                  /*!< SCB 
 886:vendor/core_cm7.h **** 
 887:vendor/core_cm7.h **** #define SCB_CACR_ECCDIS_Pos                 1U                                            /*!< SCB 
 888:vendor/core_cm7.h **** #define SCB_CACR_ECCDIS_Msk                (1UL << SCB_CACR_ECCDIS_Pos)                   /*!< SCB 
 889:vendor/core_cm7.h **** 
 890:vendor/core_cm7.h **** #define SCB_CACR_SIWT_Pos                   0U                                            /*!< SCB 
 891:vendor/core_cm7.h **** #define SCB_CACR_SIWT_Msk                  (1UL /*<< SCB_CACR_SIWT_Pos*/)                 /*!< SCB 
 892:vendor/core_cm7.h **** 
 893:vendor/core_cm7.h **** /** \brief SCB AHBS Control Register Definitions */
 894:vendor/core_cm7.h **** #define SCB_AHBSCR_INITCOUNT_Pos           11U                                            /*!< SCB 
 895:vendor/core_cm7.h **** #define SCB_AHBSCR_INITCOUNT_Msk           (0x1FUL << SCB_AHBSCR_INITCOUNT_Pos)           /*!< SCB 
 896:vendor/core_cm7.h **** 
 897:vendor/core_cm7.h **** #define SCB_AHBSCR_TPRI_Pos                 2U                                            /*!< SCB 
 898:vendor/core_cm7.h **** #define SCB_AHBSCR_TPRI_Msk                (0x1FFUL << SCB_AHBSCR_TPRI_Pos)               /*!< SCB 
 899:vendor/core_cm7.h **** 
 900:vendor/core_cm7.h **** #define SCB_AHBSCR_CTL_Pos                  0U                                            /*!< SCB 
 901:vendor/core_cm7.h **** #define SCB_AHBSCR_CTL_Msk                 (3UL /*<< SCB_AHBSCR_CTL_Pos*/)                /*!< SCB 
 902:vendor/core_cm7.h **** 
 903:vendor/core_cm7.h **** /** \brief SCB Auxiliary Bus Fault Status Register Definitions */
 904:vendor/core_cm7.h **** #define SCB_ABFSR_AXIMTYPE_Pos              8U                                            /*!< SCB 
 905:vendor/core_cm7.h **** #define SCB_ABFSR_AXIMTYPE_Msk             (3UL << SCB_ABFSR_AXIMTYPE_Pos)                /*!< SCB 
 906:vendor/core_cm7.h **** 
 907:vendor/core_cm7.h **** #define SCB_ABFSR_EPPB_Pos                  4U                                            /*!< SCB 
 908:vendor/core_cm7.h **** #define SCB_ABFSR_EPPB_Msk                 (1UL << SCB_ABFSR_EPPB_Pos)                    /*!< SCB 
 909:vendor/core_cm7.h **** 
 910:vendor/core_cm7.h **** #define SCB_ABFSR_AXIM_Pos                  3U                                            /*!< SCB 
 911:vendor/core_cm7.h **** #define SCB_ABFSR_AXIM_Msk                 (1UL << SCB_ABFSR_AXIM_Pos)                    /*!< SCB 
 912:vendor/core_cm7.h **** 
 913:vendor/core_cm7.h **** #define SCB_ABFSR_AHBP_Pos                  2U                                            /*!< SCB 
 914:vendor/core_cm7.h **** #define SCB_ABFSR_AHBP_Msk                 (1UL << SCB_ABFSR_AHBP_Pos)                    /*!< SCB 
 915:vendor/core_cm7.h **** 
 916:vendor/core_cm7.h **** #define SCB_ABFSR_DTCM_Pos                  1U                                            /*!< SCB 
 917:vendor/core_cm7.h **** #define SCB_ABFSR_DTCM_Msk                 (1UL << SCB_ABFSR_DTCM_Pos)                    /*!< SCB 
 918:vendor/core_cm7.h **** 
 919:vendor/core_cm7.h **** #define SCB_ABFSR_ITCM_Pos                  0U                                            /*!< SCB 
 920:vendor/core_cm7.h **** #define SCB_ABFSR_ITCM_Msk                 (1UL /*<< SCB_ABFSR_ITCM_Pos*/)                /*!< SCB 
 921:vendor/core_cm7.h **** 
 922:vendor/core_cm7.h **** /*@} end of group CMSIS_SCB */
 923:vendor/core_cm7.h **** 
 924:vendor/core_cm7.h **** 
 925:vendor/core_cm7.h **** /**
 926:vendor/core_cm7.h ****   \ingroup  CMSIS_core_register
 927:vendor/core_cm7.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 928:vendor/core_cm7.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 929:vendor/core_cm7.h ****   @{
 930:vendor/core_cm7.h ****  */
 931:vendor/core_cm7.h **** 
 932:vendor/core_cm7.h **** /**
 933:vendor/core_cm7.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 934:vendor/core_cm7.h ****  */
 935:vendor/core_cm7.h **** typedef struct
 936:vendor/core_cm7.h **** {
 937:vendor/core_cm7.h ****         uint32_t RESERVED0[1U];
 938:vendor/core_cm7.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 939:vendor/core_cm7.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 940:vendor/core_cm7.h **** } SCnSCB_Type;
 941:vendor/core_cm7.h **** 
 942:vendor/core_cm7.h **** /** \brief SCnSCB Interrupt Controller Type Register Definitions */
 943:vendor/core_cm7.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 944:vendor/core_cm7.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 945:vendor/core_cm7.h **** 
 946:vendor/core_cm7.h **** /** \brief SCnSCB Auxiliary Control Register Definitions */
 947:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISDYNADD_Pos         26U                                         /*!< ACTLR: 
 948:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISDYNADD_Msk         (1UL << SCnSCB_ACTLR_DISDYNADD_Pos)         /*!< ACTLR: 
 949:vendor/core_cm7.h **** 
 950:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISISSCH1_Pos         21U                                         /*!< ACTLR: 
 951:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISISSCH1_Msk         (0x1FUL << SCnSCB_ACTLR_DISISSCH1_Pos)      /*!< ACTLR: 
 952:vendor/core_cm7.h **** 
 953:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISDI_Pos             16U                                         /*!< ACTLR: 
 954:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISDI_Msk             (0x1FUL << SCnSCB_ACTLR_DISDI_Pos)          /*!< ACTLR: 
 955:vendor/core_cm7.h **** 
 956:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISCRITAXIRUR_Pos     15U                                         /*!< ACTLR: 
 957:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISCRITAXIRUR_Msk     (1UL << SCnSCB_ACTLR_DISCRITAXIRUR_Pos)     /*!< ACTLR: 
 958:vendor/core_cm7.h **** 
 959:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISBTACALLOC_Pos      14U                                         /*!< ACTLR: 
 960:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISBTACALLOC_Msk      (1UL << SCnSCB_ACTLR_DISBTACALLOC_Pos)      /*!< ACTLR: 
 961:vendor/core_cm7.h **** 
 962:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISBTACREAD_Pos       13U                                         /*!< ACTLR: 
 963:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISBTACREAD_Msk       (1UL << SCnSCB_ACTLR_DISBTACREAD_Pos)       /*!< ACTLR: 
 964:vendor/core_cm7.h **** 
 965:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISITMATBFLUSH_Pos    12U                                         /*!< ACTLR: 
 966:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISITMATBFLUSH_Msk    (1UL << SCnSCB_ACTLR_DISITMATBFLUSH_Pos)    /*!< ACTLR: 
 967:vendor/core_cm7.h **** 
 968:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISRAMODE_Pos         11U                                         /*!< ACTLR: 
 969:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISRAMODE_Msk         (1UL << SCnSCB_ACTLR_DISRAMODE_Pos)         /*!< ACTLR: 
 970:vendor/core_cm7.h **** 
 971:vendor/core_cm7.h **** #define SCnSCB_ACTLR_FPEXCODIS_Pos         10U                                         /*!< ACTLR: 
 972:vendor/core_cm7.h **** #define SCnSCB_ACTLR_FPEXCODIS_Msk         (1UL << SCnSCB_ACTLR_FPEXCODIS_Pos)         /*!< ACTLR: 
 973:vendor/core_cm7.h **** 
 974:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 975:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 976:vendor/core_cm7.h **** 
 977:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 978:vendor/core_cm7.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 979:vendor/core_cm7.h **** 
 980:vendor/core_cm7.h **** /*@} end of group CMSIS_SCnotSCB */
 981:vendor/core_cm7.h **** 
 982:vendor/core_cm7.h **** 
 983:vendor/core_cm7.h **** /**
 984:vendor/core_cm7.h ****   \ingroup  CMSIS_core_register
 985:vendor/core_cm7.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 986:vendor/core_cm7.h ****   \brief    Type definitions for the System Timer Registers.
 987:vendor/core_cm7.h ****   @{
 988:vendor/core_cm7.h ****  */
 989:vendor/core_cm7.h **** 
 990:vendor/core_cm7.h **** /**
 991:vendor/core_cm7.h ****   \brief  Structure type to access the System Timer (SysTick).
 992:vendor/core_cm7.h ****  */
 993:vendor/core_cm7.h **** typedef struct
 994:vendor/core_cm7.h **** {
 995:vendor/core_cm7.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 996:vendor/core_cm7.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 997:vendor/core_cm7.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 998:vendor/core_cm7.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 999:vendor/core_cm7.h **** } SysTick_Type;
1000:vendor/core_cm7.h **** 
1001:vendor/core_cm7.h **** /** \brief SysTick Control / Status Register Definitions */
1002:vendor/core_cm7.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
1003:vendor/core_cm7.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
1004:vendor/core_cm7.h **** 
1005:vendor/core_cm7.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
1006:vendor/core_cm7.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
1007:vendor/core_cm7.h **** 
1008:vendor/core_cm7.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
1009:vendor/core_cm7.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
1010:vendor/core_cm7.h **** 
1011:vendor/core_cm7.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
1012:vendor/core_cm7.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
1013:vendor/core_cm7.h **** 
1014:vendor/core_cm7.h **** /** \brief SysTick Reload Register Definitions */
1015:vendor/core_cm7.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
1016:vendor/core_cm7.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
1017:vendor/core_cm7.h **** 
1018:vendor/core_cm7.h **** /** \brief SysTick Current Register Definitions */
1019:vendor/core_cm7.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
1020:vendor/core_cm7.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
1021:vendor/core_cm7.h **** 
1022:vendor/core_cm7.h **** /** \brief SysTick Calibration Register Definitions */
1023:vendor/core_cm7.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
1024:vendor/core_cm7.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
1025:vendor/core_cm7.h **** 
1026:vendor/core_cm7.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
1027:vendor/core_cm7.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
1028:vendor/core_cm7.h **** 
1029:vendor/core_cm7.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
1030:vendor/core_cm7.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
1031:vendor/core_cm7.h **** 
1032:vendor/core_cm7.h **** /*@} end of group CMSIS_SysTick */
1033:vendor/core_cm7.h **** 
1034:vendor/core_cm7.h **** 
1035:vendor/core_cm7.h **** /**
1036:vendor/core_cm7.h ****   \ingroup  CMSIS_core_register
1037:vendor/core_cm7.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
1038:vendor/core_cm7.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
1039:vendor/core_cm7.h ****   @{
1040:vendor/core_cm7.h ****  */
1041:vendor/core_cm7.h **** 
1042:vendor/core_cm7.h **** /**
1043:vendor/core_cm7.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
1044:vendor/core_cm7.h ****  */
1045:vendor/core_cm7.h **** typedef struct
1046:vendor/core_cm7.h **** {
1047:vendor/core_cm7.h ****   __OM  union
1048:vendor/core_cm7.h ****   {
1049:vendor/core_cm7.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  Stimulus Port 8-bit */
1050:vendor/core_cm7.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  Stimulus Port 16-bit */
1051:vendor/core_cm7.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  Stimulus Port 32-bit */
1052:vendor/core_cm7.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  Stimulus Port Registers */
1053:vendor/core_cm7.h ****         uint32_t RESERVED0[864U];
1054:vendor/core_cm7.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  Trace Enable Register */
1055:vendor/core_cm7.h ****         uint32_t RESERVED1[15U];
1056:vendor/core_cm7.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  Trace Privilege Register */
1057:vendor/core_cm7.h ****         uint32_t RESERVED2[15U];
1058:vendor/core_cm7.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  Trace Control Register */
1059:vendor/core_cm7.h ****         uint32_t RESERVED3[32U];
1060:vendor/core_cm7.h ****         uint32_t RESERVED4[43U];
1061:vendor/core_cm7.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  Lock Access Register */
1062:vendor/core_cm7.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  Lock Status Register */
1063:vendor/core_cm7.h **** } ITM_Type;
1064:vendor/core_cm7.h **** 
1065:vendor/core_cm7.h **** /** \brief ITM Trace Privilege Register Definitions */
1066:vendor/core_cm7.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
1067:vendor/core_cm7.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
1068:vendor/core_cm7.h **** 
1069:vendor/core_cm7.h **** /** \brief ITM Trace Control Register Definitions */
1070:vendor/core_cm7.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
1071:vendor/core_cm7.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
1072:vendor/core_cm7.h **** 
1073:vendor/core_cm7.h **** #define ITM_TCR_TRACEBUSID_Pos             16U                                            /*!< ITM 
1074:vendor/core_cm7.h **** #define ITM_TCR_TRACEBUSID_Msk             (0x7FUL << ITM_TCR_TRACEBUSID_Pos)             /*!< ITM 
1075:vendor/core_cm7.h **** 
1076:vendor/core_cm7.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
1077:vendor/core_cm7.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
1078:vendor/core_cm7.h **** 
1079:vendor/core_cm7.h **** #define ITM_TCR_TSPRESCALE_Pos              8U                                            /*!< ITM 
1080:vendor/core_cm7.h **** #define ITM_TCR_TSPRESCALE_Msk             (3UL << ITM_TCR_TSPRESCALE_Pos)                /*!< ITM 
1081:vendor/core_cm7.h **** 
1082:vendor/core_cm7.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
1083:vendor/core_cm7.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
1084:vendor/core_cm7.h **** 
1085:vendor/core_cm7.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
1086:vendor/core_cm7.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
1087:vendor/core_cm7.h **** 
1088:vendor/core_cm7.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
1089:vendor/core_cm7.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
1090:vendor/core_cm7.h **** 
1091:vendor/core_cm7.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
1092:vendor/core_cm7.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
1093:vendor/core_cm7.h **** 
1094:vendor/core_cm7.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
1095:vendor/core_cm7.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
1096:vendor/core_cm7.h **** 
1097:vendor/core_cm7.h **** /** \brief ITM Lock Status Register Definitions */
1098:vendor/core_cm7.h **** #define ITM_LSR_BYTEACC_Pos                 2U                                            /*!< ITM 
1099:vendor/core_cm7.h **** #define ITM_LSR_BYTEACC_Msk                (1UL << ITM_LSR_BYTEACC_Pos)                   /*!< ITM 
1100:vendor/core_cm7.h **** 
1101:vendor/core_cm7.h **** #define ITM_LSR_ACCESS_Pos                  1U                                            /*!< ITM 
1102:vendor/core_cm7.h **** #define ITM_LSR_ACCESS_Msk                 (1UL << ITM_LSR_ACCESS_Pos)                    /*!< ITM 
1103:vendor/core_cm7.h **** 
1104:vendor/core_cm7.h **** #define ITM_LSR_PRESENT_Pos                 0U                                            /*!< ITM 
1105:vendor/core_cm7.h **** #define ITM_LSR_PRESENT_Msk                (1UL /*<< ITM_LSR_PRESENT_Pos*/)               /*!< ITM 
1106:vendor/core_cm7.h **** 
1107:vendor/core_cm7.h **** /*@}*/ /* end of group CMSIS_ITM */
1108:vendor/core_cm7.h **** 
1109:vendor/core_cm7.h **** 
1110:vendor/core_cm7.h **** /**
1111:vendor/core_cm7.h ****   \ingroup  CMSIS_core_register
1112:vendor/core_cm7.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
1113:vendor/core_cm7.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
1114:vendor/core_cm7.h ****   @{
1115:vendor/core_cm7.h ****  */
1116:vendor/core_cm7.h **** 
1117:vendor/core_cm7.h **** /**
1118:vendor/core_cm7.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
1119:vendor/core_cm7.h ****  */
1120:vendor/core_cm7.h **** typedef struct
1121:vendor/core_cm7.h **** {
1122:vendor/core_cm7.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
1123:vendor/core_cm7.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
1124:vendor/core_cm7.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
1125:vendor/core_cm7.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
1126:vendor/core_cm7.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
1127:vendor/core_cm7.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
1128:vendor/core_cm7.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
1129:vendor/core_cm7.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
1130:vendor/core_cm7.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
1131:vendor/core_cm7.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
1132:vendor/core_cm7.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
1133:vendor/core_cm7.h ****         uint32_t RESERVED0[1U];
1134:vendor/core_cm7.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
1135:vendor/core_cm7.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
1136:vendor/core_cm7.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
1137:vendor/core_cm7.h ****         uint32_t RESERVED1[1U];
1138:vendor/core_cm7.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
1139:vendor/core_cm7.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
1140:vendor/core_cm7.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
1141:vendor/core_cm7.h ****         uint32_t RESERVED2[1U];
1142:vendor/core_cm7.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
1143:vendor/core_cm7.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
1144:vendor/core_cm7.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
1145:vendor/core_cm7.h **** } DWT_Type;
1146:vendor/core_cm7.h **** 
1147:vendor/core_cm7.h **** /** \brief DWT Control Register Definitions */
1148:vendor/core_cm7.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
1149:vendor/core_cm7.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
1150:vendor/core_cm7.h **** 
1151:vendor/core_cm7.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
1152:vendor/core_cm7.h **** #define DWT_CTRL_NOTRCPKT_Msk              (1UL << DWT_CTRL_NOTRCPKT_Pos)              /*!< DWT CTR
1153:vendor/core_cm7.h **** 
1154:vendor/core_cm7.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
1155:vendor/core_cm7.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (1UL << DWT_CTRL_NOEXTTRIG_Pos)             /*!< DWT CTR
1156:vendor/core_cm7.h **** 
1157:vendor/core_cm7.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
1158:vendor/core_cm7.h **** #define DWT_CTRL_NOCYCCNT_Msk              (1UL << DWT_CTRL_NOCYCCNT_Pos)              /*!< DWT CTR
1159:vendor/core_cm7.h **** 
1160:vendor/core_cm7.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
1161:vendor/core_cm7.h **** #define DWT_CTRL_NOPRFCNT_Msk              (1UL << DWT_CTRL_NOPRFCNT_Pos)              /*!< DWT CTR
1162:vendor/core_cm7.h **** 
1163:vendor/core_cm7.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
1164:vendor/core_cm7.h **** #define DWT_CTRL_CYCEVTENA_Msk             (1UL << DWT_CTRL_CYCEVTENA_Pos)             /*!< DWT CTR
1165:vendor/core_cm7.h **** 
1166:vendor/core_cm7.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
1167:vendor/core_cm7.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (1UL << DWT_CTRL_FOLDEVTENA_Pos)            /*!< DWT CTR
1168:vendor/core_cm7.h **** 
1169:vendor/core_cm7.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
1170:vendor/core_cm7.h **** #define DWT_CTRL_LSUEVTENA_Msk             (1UL << DWT_CTRL_LSUEVTENA_Pos)             /*!< DWT CTR
1171:vendor/core_cm7.h **** 
1172:vendor/core_cm7.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
1173:vendor/core_cm7.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (1UL << DWT_CTRL_SLEEPEVTENA_Pos)           /*!< DWT CTR
1174:vendor/core_cm7.h **** 
1175:vendor/core_cm7.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
1176:vendor/core_cm7.h **** #define DWT_CTRL_EXCEVTENA_Msk             (1UL << DWT_CTRL_EXCEVTENA_Pos)             /*!< DWT CTR
1177:vendor/core_cm7.h **** 
1178:vendor/core_cm7.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
1179:vendor/core_cm7.h **** #define DWT_CTRL_CPIEVTENA_Msk             (1UL << DWT_CTRL_CPIEVTENA_Pos)             /*!< DWT CTR
1180:vendor/core_cm7.h **** 
1181:vendor/core_cm7.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
1182:vendor/core_cm7.h **** #define DWT_CTRL_EXCTRCENA_Msk             (1UL << DWT_CTRL_EXCTRCENA_Pos)             /*!< DWT CTR
1183:vendor/core_cm7.h **** 
1184:vendor/core_cm7.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
1185:vendor/core_cm7.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (1UL << DWT_CTRL_PCSAMPLENA_Pos)            /*!< DWT CTR
1186:vendor/core_cm7.h **** 
1187:vendor/core_cm7.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
1188:vendor/core_cm7.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
1189:vendor/core_cm7.h **** 
1190:vendor/core_cm7.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
1191:vendor/core_cm7.h **** #define DWT_CTRL_CYCTAP_Msk                (1UL << DWT_CTRL_CYCTAP_Pos)                /*!< DWT CTR
1192:vendor/core_cm7.h **** 
1193:vendor/core_cm7.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
1194:vendor/core_cm7.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
1195:vendor/core_cm7.h **** 
1196:vendor/core_cm7.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
1197:vendor/core_cm7.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
1198:vendor/core_cm7.h **** 
1199:vendor/core_cm7.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
1200:vendor/core_cm7.h **** #define DWT_CTRL_CYCCNTENA_Msk             (1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)         /*!< DWT CTR
1201:vendor/core_cm7.h **** 
1202:vendor/core_cm7.h **** /** \brief DWT CPI Count Register Definitions */
1203:vendor/core_cm7.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
1204:vendor/core_cm7.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
1205:vendor/core_cm7.h **** 
1206:vendor/core_cm7.h **** /** \brief DWT Exception Overhead Count Register Definitions */
1207:vendor/core_cm7.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1208:vendor/core_cm7.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1209:vendor/core_cm7.h **** 
1210:vendor/core_cm7.h **** /** \brief DWT Sleep Count Register Definitions */
1211:vendor/core_cm7.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1212:vendor/core_cm7.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1213:vendor/core_cm7.h **** 
1214:vendor/core_cm7.h **** /** \brief DWT LSU Count Register Definitions */
1215:vendor/core_cm7.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1216:vendor/core_cm7.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1217:vendor/core_cm7.h **** 
1218:vendor/core_cm7.h **** /** \brief DWT Folded-instruction Count Register Definitions */
1219:vendor/core_cm7.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1220:vendor/core_cm7.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1221:vendor/core_cm7.h **** 
1222:vendor/core_cm7.h **** /** \brief DWT Comparator Mask Register Definitions */
1223:vendor/core_cm7.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1224:vendor/core_cm7.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1225:vendor/core_cm7.h **** 
1226:vendor/core_cm7.h **** /** \brief DWT Comparator Function Register Definitions */
1227:vendor/core_cm7.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1228:vendor/core_cm7.h **** #define DWT_FUNCTION_MATCHED_Msk           (1UL << DWT_FUNCTION_MATCHED_Pos)           /*!< DWT FUN
1229:vendor/core_cm7.h **** 
1230:vendor/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1231:vendor/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1232:vendor/core_cm7.h **** 
1233:vendor/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1234:vendor/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1235:vendor/core_cm7.h **** 
1236:vendor/core_cm7.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1237:vendor/core_cm7.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1238:vendor/core_cm7.h **** 
1239:vendor/core_cm7.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1240:vendor/core_cm7.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (1UL << DWT_FUNCTION_LNK1ENA_Pos)           /*!< DWT FUN
1241:vendor/core_cm7.h **** 
1242:vendor/core_cm7.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1243:vendor/core_cm7.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (1UL << DWT_FUNCTION_DATAVMATCH_Pos)        /*!< DWT FUN
1244:vendor/core_cm7.h **** 
1245:vendor/core_cm7.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1246:vendor/core_cm7.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (1UL << DWT_FUNCTION_CYCMATCH_Pos)          /*!< DWT FUN
1247:vendor/core_cm7.h **** 
1248:vendor/core_cm7.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1249:vendor/core_cm7.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (1UL << DWT_FUNCTION_EMITRANGE_Pos)         /*!< DWT FUN
1250:vendor/core_cm7.h **** 
1251:vendor/core_cm7.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1252:vendor/core_cm7.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1253:vendor/core_cm7.h **** 
1254:vendor/core_cm7.h **** /*@}*/ /* end of group CMSIS_DWT */
1255:vendor/core_cm7.h **** 
1256:vendor/core_cm7.h **** 
1257:vendor/core_cm7.h **** /**
1258:vendor/core_cm7.h ****   \ingroup  CMSIS_core_register
1259:vendor/core_cm7.h ****   \defgroup CMSIS_TPIU    Trace Port Interface Unit (TPIU)
1260:vendor/core_cm7.h ****   \brief    Type definitions for the Trace Port Interface Unit (TPIU)
1261:vendor/core_cm7.h ****   @{
1262:vendor/core_cm7.h ****  */
1263:vendor/core_cm7.h **** 
1264:vendor/core_cm7.h **** /**
1265:vendor/core_cm7.h ****   \brief  Structure type to access the Trace Port Interface Unit Register (TPIU).
1266:vendor/core_cm7.h ****  */
1267:vendor/core_cm7.h **** typedef struct
1268:vendor/core_cm7.h **** {
1269:vendor/core_cm7.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1270:vendor/core_cm7.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1271:vendor/core_cm7.h ****         uint32_t RESERVED0[2U];
1272:vendor/core_cm7.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1273:vendor/core_cm7.h ****         uint32_t RESERVED1[55U];
1274:vendor/core_cm7.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1275:vendor/core_cm7.h ****         uint32_t RESERVED2[131U];
1276:vendor/core_cm7.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1277:vendor/core_cm7.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1278:vendor/core_cm7.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1279:vendor/core_cm7.h ****         uint32_t RESERVED3[759U];
1280:vendor/core_cm7.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1281:vendor/core_cm7.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1282:vendor/core_cm7.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1283:vendor/core_cm7.h ****         uint32_t RESERVED4[1U];
1284:vendor/core_cm7.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1285:vendor/core_cm7.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1286:vendor/core_cm7.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1287:vendor/core_cm7.h ****         uint32_t RESERVED5[39U];
1288:vendor/core_cm7.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1289:vendor/core_cm7.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1290:vendor/core_cm7.h ****         uint32_t RESERVED7[8U];
1291:vendor/core_cm7.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  Device Configuration Register */
1292:vendor/core_cm7.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  Device Type Identifier Register 
1293:vendor/core_cm7.h **** } TPIU_Type;
1294:vendor/core_cm7.h **** 
1295:vendor/core_cm7.h **** /** \brief TPIU Asynchronous Clock Prescaler Register Definitions */
1296:vendor/core_cm7.h **** #define TPIU_ACPR_PRESCALER_Pos             0U                                         /*!< TPIU AC
1297:vendor/core_cm7.h **** #define TPIU_ACPR_PRESCALER_Msk            (0x1FFFUL /*<< TPIU_ACPR_PRESCALER_Pos*/)   /*!< TPIU AC
1298:vendor/core_cm7.h **** 
1299:vendor/core_cm7.h **** /** \brief TPIU Selected Pin Protocol Register Definitions */
1300:vendor/core_cm7.h **** #define TPIU_SPPR_TXMODE_Pos                0U                                         /*!< TPIU SP
1301:vendor/core_cm7.h **** #define TPIU_SPPR_TXMODE_Msk               (0x3UL /*<< TPIU_SPPR_TXMODE_Pos*/)         /*!< TPIU SP
1302:vendor/core_cm7.h **** 
1303:vendor/core_cm7.h **** /** \brief TPIU Formatter and Flush Status Register Definitions */
1304:vendor/core_cm7.h **** #define TPIU_FFSR_FtNonStop_Pos             3U                                         /*!< TPIU FF
1305:vendor/core_cm7.h **** #define TPIU_FFSR_FtNonStop_Msk            (1UL << TPIU_FFSR_FtNonStop_Pos)            /*!< TPIU FF
1306:vendor/core_cm7.h **** 
1307:vendor/core_cm7.h **** #define TPIU_FFSR_TCPresent_Pos             2U                                         /*!< TPIU FF
1308:vendor/core_cm7.h **** #define TPIU_FFSR_TCPresent_Msk            (1UL << TPIU_FFSR_TCPresent_Pos)            /*!< TPIU FF
1309:vendor/core_cm7.h **** 
1310:vendor/core_cm7.h **** #define TPIU_FFSR_FtStopped_Pos             1U                                         /*!< TPIU FF
1311:vendor/core_cm7.h **** #define TPIU_FFSR_FtStopped_Msk            (1UL << TPIU_FFSR_FtStopped_Pos)            /*!< TPIU FF
1312:vendor/core_cm7.h **** 
1313:vendor/core_cm7.h **** #define TPIU_FFSR_FlInProg_Pos              0U                                         /*!< TPIU FF
1314:vendor/core_cm7.h **** #define TPIU_FFSR_FlInProg_Msk             (1UL /*<< TPIU_FFSR_FlInProg_Pos*/)         /*!< TPIU FF
1315:vendor/core_cm7.h **** 
1316:vendor/core_cm7.h **** /** \brief TPIU Formatter and Flush Control Register Definitions */
1317:vendor/core_cm7.h **** #define TPIU_FFCR_TrigIn_Pos                8U                                         /*!< TPIU FF
1318:vendor/core_cm7.h **** #define TPIU_FFCR_TrigIn_Msk               (1UL << TPIU_FFCR_TrigIn_Pos)               /*!< TPIU FF
1319:vendor/core_cm7.h **** 
1320:vendor/core_cm7.h **** #define TPIU_FFCR_EnFCont_Pos               1U                                         /*!< TPIU FF
1321:vendor/core_cm7.h **** #define TPIU_FFCR_EnFCont_Msk              (1UL << TPIU_FFCR_EnFCont_Pos)              /*!< TPIU FF
1322:vendor/core_cm7.h **** 
1323:vendor/core_cm7.h **** /** \brief TPIU TRIGGER Register Definitions */
1324:vendor/core_cm7.h **** #define TPIU_TRIGGER_TRIGGER_Pos            0U                                         /*!< TPIU TR
1325:vendor/core_cm7.h **** #define TPIU_TRIGGER_TRIGGER_Msk           (1UL /*<< TPIU_TRIGGER_TRIGGER_Pos*/)       /*!< TPIU TR
1326:vendor/core_cm7.h **** 
1327:vendor/core_cm7.h **** /** \brief TPIU Integration ETM Data Register Definitions (FIFO0) */
1328:vendor/core_cm7.h **** #define TPIU_FIFO0_ITM_ATVALID_Pos         29U                                         /*!< TPIU FI
1329:vendor/core_cm7.h **** #define TPIU_FIFO0_ITM_ATVALID_Msk         (1UL << TPIU_FIFO0_ITM_ATVALID_Pos)         /*!< TPIU FI
1330:vendor/core_cm7.h **** 
1331:vendor/core_cm7.h **** #define TPIU_FIFO0_ITM_bytecount_Pos       27U                                         /*!< TPIU FI
1332:vendor/core_cm7.h **** #define TPIU_FIFO0_ITM_bytecount_Msk       (0x3UL << TPIU_FIFO0_ITM_bytecount_Pos)     /*!< TPIU FI
1333:vendor/core_cm7.h **** 
1334:vendor/core_cm7.h **** #define TPIU_FIFO0_ETM_ATVALID_Pos         26U                                         /*!< TPIU FI
1335:vendor/core_cm7.h **** #define TPIU_FIFO0_ETM_ATVALID_Msk         (1UL << TPIU_FIFO0_ETM_ATVALID_Pos)         /*!< TPIU FI
1336:vendor/core_cm7.h **** 
1337:vendor/core_cm7.h **** #define TPIU_FIFO0_ETM_bytecount_Pos       24U                                         /*!< TPIU FI
1338:vendor/core_cm7.h **** #define TPIU_FIFO0_ETM_bytecount_Msk       (0x3UL << TPIU_FIFO0_ETM_bytecount_Pos)     /*!< TPIU FI
1339:vendor/core_cm7.h **** 
1340:vendor/core_cm7.h **** #define TPIU_FIFO0_ETM2_Pos                16U                                         /*!< TPIU FI
1341:vendor/core_cm7.h **** #define TPIU_FIFO0_ETM2_Msk                (0xFFUL << TPIU_FIFO0_ETM2_Pos)             /*!< TPIU FI
1342:vendor/core_cm7.h **** 
1343:vendor/core_cm7.h **** #define TPIU_FIFO0_ETM1_Pos                 8U                                         /*!< TPIU FI
1344:vendor/core_cm7.h **** #define TPIU_FIFO0_ETM1_Msk                (0xFFUL << TPIU_FIFO0_ETM1_Pos)             /*!< TPIU FI
1345:vendor/core_cm7.h **** 
1346:vendor/core_cm7.h **** #define TPIU_FIFO0_ETM0_Pos                 0U                                         /*!< TPIU FI
1347:vendor/core_cm7.h **** #define TPIU_FIFO0_ETM0_Msk                (0xFFUL /*<< TPIU_FIFO0_ETM0_Pos*/)         /*!< TPIU FI
1348:vendor/core_cm7.h **** 
1349:vendor/core_cm7.h **** /** \brief TPIU ITATBCTR2 Register Definitions */
1350:vendor/core_cm7.h **** #define TPIU_ITATBCTR2_ATREADY2_Pos         0U                                         /*!< TPIU IT
1351:vendor/core_cm7.h **** #define TPIU_ITATBCTR2_ATREADY2_Msk        (1UL /*<< TPIU_ITATBCTR2_ATREADY2_Pos*/)    /*!< TPIU IT
1352:vendor/core_cm7.h **** 
1353:vendor/core_cm7.h **** #define TPIU_ITATBCTR2_ATREADY1_Pos         0U                                         /*!< TPIU IT
1354:vendor/core_cm7.h **** #define TPIU_ITATBCTR2_ATREADY1_Msk        (1UL /*<< TPIU_ITATBCTR2_ATREADY1_Pos*/)    /*!< TPIU IT
1355:vendor/core_cm7.h **** 
1356:vendor/core_cm7.h **** /** \brief TPIU Integration ITM Data Register Definitions (FIFO1) */
1357:vendor/core_cm7.h **** #define TPIU_FIFO1_ITM_ATVALID_Pos         29U                                         /*!< TPIU FI
1358:vendor/core_cm7.h **** #define TPIU_FIFO1_ITM_ATVALID_Msk         (1UL << TPIU_FIFO1_ITM_ATVALID_Pos)         /*!< TPIU FI
1359:vendor/core_cm7.h **** 
1360:vendor/core_cm7.h **** #define TPIU_FIFO1_ITM_bytecount_Pos       27U                                         /*!< TPIU FI
1361:vendor/core_cm7.h **** #define TPIU_FIFO1_ITM_bytecount_Msk       (0x3UL << TPIU_FIFO1_ITM_bytecount_Pos)     /*!< TPIU FI
1362:vendor/core_cm7.h **** 
1363:vendor/core_cm7.h **** #define TPIU_FIFO1_ETM_ATVALID_Pos         26U                                         /*!< TPIU FI
1364:vendor/core_cm7.h **** #define TPIU_FIFO1_ETM_ATVALID_Msk         (1UL << TPIU_FIFO1_ETM_ATVALID_Pos)         /*!< TPIU FI
1365:vendor/core_cm7.h **** 
1366:vendor/core_cm7.h **** #define TPIU_FIFO1_ETM_bytecount_Pos       24U                                         /*!< TPIU FI
1367:vendor/core_cm7.h **** #define TPIU_FIFO1_ETM_bytecount_Msk       (0x3UL << TPIU_FIFO1_ETM_bytecount_Pos)     /*!< TPIU FI
1368:vendor/core_cm7.h **** 
1369:vendor/core_cm7.h **** #define TPIU_FIFO1_ITM2_Pos                16U                                         /*!< TPIU FI
1370:vendor/core_cm7.h **** #define TPIU_FIFO1_ITM2_Msk                (0xFFUL << TPIU_FIFO1_ITM2_Pos)             /*!< TPIU FI
1371:vendor/core_cm7.h **** 
1372:vendor/core_cm7.h **** #define TPIU_FIFO1_ITM1_Pos                 8U                                         /*!< TPIU FI
1373:vendor/core_cm7.h **** #define TPIU_FIFO1_ITM1_Msk                (0xFFUL << TPIU_FIFO1_ITM1_Pos)             /*!< TPIU FI
1374:vendor/core_cm7.h **** 
1375:vendor/core_cm7.h **** #define TPIU_FIFO1_ITM0_Pos                 0U                                         /*!< TPIU FI
1376:vendor/core_cm7.h **** #define TPIU_FIFO1_ITM0_Msk                (0xFFUL /*<< TPIU_FIFO1_ITM0_Pos*/)         /*!< TPIU FI
1377:vendor/core_cm7.h **** 
1378:vendor/core_cm7.h **** /** \brief TPIU ITATBCTR0 Register Definitions */
1379:vendor/core_cm7.h **** #define TPIU_ITATBCTR0_ATREADY2_Pos         0U                                         /*!< TPIU IT
1380:vendor/core_cm7.h **** #define TPIU_ITATBCTR0_ATREADY2_Msk        (1UL /*<< TPIU_ITATBCTR0_ATREADY2_Pos*/)    /*!< TPIU IT
1381:vendor/core_cm7.h **** 
1382:vendor/core_cm7.h **** #define TPIU_ITATBCTR0_ATREADY1_Pos         0U                                         /*!< TPIU IT
1383:vendor/core_cm7.h **** #define TPIU_ITATBCTR0_ATREADY1_Msk        (1UL /*<< TPIU_ITATBCTR0_ATREADY1_Pos*/)    /*!< TPIU IT
1384:vendor/core_cm7.h **** 
1385:vendor/core_cm7.h **** /** \brief TPIU Integration Mode Control Register Definitions */
1386:vendor/core_cm7.h **** #define TPIU_ITCTRL_Mode_Pos                0U                                         /*!< TPIU IT
1387:vendor/core_cm7.h **** #define TPIU_ITCTRL_Mode_Msk               (0x3UL /*<< TPIU_ITCTRL_Mode_Pos*/)         /*!< TPIU IT
1388:vendor/core_cm7.h **** 
1389:vendor/core_cm7.h **** /** \brief TPIU DEVID Register Definitions */
1390:vendor/core_cm7.h **** #define TPIU_DEVID_NRZVALID_Pos            11U                                         /*!< TPIU DE
1391:vendor/core_cm7.h **** #define TPIU_DEVID_NRZVALID_Msk            (1UL << TPIU_DEVID_NRZVALID_Pos)            /*!< TPIU DE
1392:vendor/core_cm7.h **** 
1393:vendor/core_cm7.h **** #define TPIU_DEVID_MANCVALID_Pos           10U                                         /*!< TPIU DE
1394:vendor/core_cm7.h **** #define TPIU_DEVID_MANCVALID_Msk           (1UL << TPIU_DEVID_MANCVALID_Pos)           /*!< TPIU DE
1395:vendor/core_cm7.h **** 
1396:vendor/core_cm7.h **** #define TPIU_DEVID_PTINVALID_Pos            9U                                         /*!< TPIU DE
1397:vendor/core_cm7.h **** #define TPIU_DEVID_PTINVALID_Msk           (1UL << TPIU_DEVID_PTINVALID_Pos)           /*!< TPIU DE
1398:vendor/core_cm7.h **** 
1399:vendor/core_cm7.h **** #define TPIU_DEVID_MinBufSz_Pos             6U                                         /*!< TPIU DE
1400:vendor/core_cm7.h **** #define TPIU_DEVID_MinBufSz_Msk            (0x7UL << TPIU_DEVID_MinBufSz_Pos)          /*!< TPIU DE
1401:vendor/core_cm7.h **** 
1402:vendor/core_cm7.h **** #define TPIU_DEVID_AsynClkIn_Pos            5U                                         /*!< TPIU DE
1403:vendor/core_cm7.h **** #define TPIU_DEVID_AsynClkIn_Msk           (1UL << TPIU_DEVID_AsynClkIn_Pos)           /*!< TPIU DE
1404:vendor/core_cm7.h **** 
1405:vendor/core_cm7.h **** #define TPIU_DEVID_NrTraceInput_Pos         0U                                         /*!< TPIU DE
1406:vendor/core_cm7.h **** #define TPIU_DEVID_NrTraceInput_Msk        (0x3FUL /*<< TPIU_DEVID_NrTraceInput_Pos*/) /*!< TPIU DE
1407:vendor/core_cm7.h **** 
1408:vendor/core_cm7.h **** /** \brief TPIU DEVTYPE Register Definitions */
1409:vendor/core_cm7.h **** #define TPIU_DEVTYPE_SubType_Pos            4U                                         /*!< TPIU DE
1410:vendor/core_cm7.h **** #define TPIU_DEVTYPE_SubType_Msk           (0xFUL /*<< TPIU_DEVTYPE_SubType_Pos*/)     /*!< TPIU DE
1411:vendor/core_cm7.h **** 
1412:vendor/core_cm7.h **** #define TPIU_DEVTYPE_MajorType_Pos          0U                                         /*!< TPIU DE
1413:vendor/core_cm7.h **** #define TPIU_DEVTYPE_MajorType_Msk         (0xFUL << TPIU_DEVTYPE_MajorType_Pos)       /*!< TPIU DE
1414:vendor/core_cm7.h **** 
1415:vendor/core_cm7.h **** /*@}*/ /* end of group CMSIS_TPIU */
1416:vendor/core_cm7.h **** 
1417:vendor/core_cm7.h **** 
1418:vendor/core_cm7.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1419:vendor/core_cm7.h **** /**
1420:vendor/core_cm7.h ****   \ingroup  CMSIS_core_register
1421:vendor/core_cm7.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1422:vendor/core_cm7.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1423:vendor/core_cm7.h ****   @{
1424:vendor/core_cm7.h ****  */
1425:vendor/core_cm7.h **** 
1426:vendor/core_cm7.h **** /**
1427:vendor/core_cm7.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1428:vendor/core_cm7.h ****  */
1429:vendor/core_cm7.h **** typedef struct
1430:vendor/core_cm7.h **** {
1431:vendor/core_cm7.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1432:vendor/core_cm7.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1433:vendor/core_cm7.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region Number Register */
1434:vendor/core_cm7.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1435:vendor/core_cm7.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1436:vendor/core_cm7.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1437:vendor/core_cm7.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1438:vendor/core_cm7.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1439:vendor/core_cm7.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1440:vendor/core_cm7.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1441:vendor/core_cm7.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1442:vendor/core_cm7.h **** } MPU_Type;
1443:vendor/core_cm7.h **** 
1444:vendor/core_cm7.h **** #define MPU_TYPE_RALIASES                  4U
1445:vendor/core_cm7.h **** 
1446:vendor/core_cm7.h **** /** \brief MPU Type Register Definitions */
1447:vendor/core_cm7.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1448:vendor/core_cm7.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1449:vendor/core_cm7.h **** 
1450:vendor/core_cm7.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1451:vendor/core_cm7.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1452:vendor/core_cm7.h **** 
1453:vendor/core_cm7.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1454:vendor/core_cm7.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1455:vendor/core_cm7.h **** 
1456:vendor/core_cm7.h **** /** \brief MPU Control Register Definitions */
1457:vendor/core_cm7.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1458:vendor/core_cm7.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1459:vendor/core_cm7.h **** 
1460:vendor/core_cm7.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1461:vendor/core_cm7.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1462:vendor/core_cm7.h **** 
1463:vendor/core_cm7.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1464:vendor/core_cm7.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1465:vendor/core_cm7.h **** 
1466:vendor/core_cm7.h **** /** \brief MPU Region Number Register Definitions */
1467:vendor/core_cm7.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1468:vendor/core_cm7.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1469:vendor/core_cm7.h **** 
1470:vendor/core_cm7.h **** /** \brief MPU Region Base Address Register Definitions */
1471:vendor/core_cm7.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1472:vendor/core_cm7.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1473:vendor/core_cm7.h **** 
1474:vendor/core_cm7.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1475:vendor/core_cm7.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1476:vendor/core_cm7.h **** 
1477:vendor/core_cm7.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1478:vendor/core_cm7.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1479:vendor/core_cm7.h **** 
1480:vendor/core_cm7.h **** /** \brief MPU Region Attribute and Size Register Definitions */
1481:vendor/core_cm7.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1482:vendor/core_cm7.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1483:vendor/core_cm7.h **** 
1484:vendor/core_cm7.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1485:vendor/core_cm7.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1486:vendor/core_cm7.h **** 
1487:vendor/core_cm7.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1488:vendor/core_cm7.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1489:vendor/core_cm7.h **** 
1490:vendor/core_cm7.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1491:vendor/core_cm7.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1492:vendor/core_cm7.h **** 
1493:vendor/core_cm7.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1494:vendor/core_cm7.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1495:vendor/core_cm7.h **** 
1496:vendor/core_cm7.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1497:vendor/core_cm7.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1498:vendor/core_cm7.h **** 
1499:vendor/core_cm7.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1500:vendor/core_cm7.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1501:vendor/core_cm7.h **** 
1502:vendor/core_cm7.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1503:vendor/core_cm7.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1504:vendor/core_cm7.h **** 
1505:vendor/core_cm7.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1506:vendor/core_cm7.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1507:vendor/core_cm7.h **** 
1508:vendor/core_cm7.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1509:vendor/core_cm7.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1510:vendor/core_cm7.h **** 
1511:vendor/core_cm7.h **** /*@} end of group CMSIS_MPU */
1512:vendor/core_cm7.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1513:vendor/core_cm7.h **** 
1514:vendor/core_cm7.h **** 
1515:vendor/core_cm7.h **** /**
1516:vendor/core_cm7.h ****   \ingroup  CMSIS_core_register
1517:vendor/core_cm7.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1518:vendor/core_cm7.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1519:vendor/core_cm7.h ****   @{
1520:vendor/core_cm7.h ****  */
1521:vendor/core_cm7.h **** 
1522:vendor/core_cm7.h **** /**
1523:vendor/core_cm7.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1524:vendor/core_cm7.h ****  */
1525:vendor/core_cm7.h **** typedef struct
1526:vendor/core_cm7.h **** {
1527:vendor/core_cm7.h ****         uint32_t RESERVED0[1U];
1528:vendor/core_cm7.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1529:vendor/core_cm7.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1530:vendor/core_cm7.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1531:vendor/core_cm7.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and VFP Feature Register 0
1532:vendor/core_cm7.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and VFP Feature Register 1
1533:vendor/core_cm7.h ****   __IM  uint32_t MVFR2;                  /*!< Offset: 0x018 (R/ )  Media and VFP Feature Register 2
1534:vendor/core_cm7.h **** } FPU_Type;
1535:vendor/core_cm7.h **** 
1536:vendor/core_cm7.h **** /** \brief FPU Floating-Point Context Control Register Definitions */
1537:vendor/core_cm7.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1538:vendor/core_cm7.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1539:vendor/core_cm7.h **** 
1540:vendor/core_cm7.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1541:vendor/core_cm7.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1542:vendor/core_cm7.h **** 
1543:vendor/core_cm7.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1544:vendor/core_cm7.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1545:vendor/core_cm7.h **** 
1546:vendor/core_cm7.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1547:vendor/core_cm7.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1548:vendor/core_cm7.h **** 
1549:vendor/core_cm7.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1550:vendor/core_cm7.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1551:vendor/core_cm7.h **** 
1552:vendor/core_cm7.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1553:vendor/core_cm7.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1554:vendor/core_cm7.h **** 
1555:vendor/core_cm7.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1556:vendor/core_cm7.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1557:vendor/core_cm7.h **** 
1558:vendor/core_cm7.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1559:vendor/core_cm7.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1560:vendor/core_cm7.h **** 
1561:vendor/core_cm7.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1562:vendor/core_cm7.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1563:vendor/core_cm7.h **** 
1564:vendor/core_cm7.h **** /** \brief FPU Floating-Point Context Address Register Definitions */
1565:vendor/core_cm7.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1566:vendor/core_cm7.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1567:vendor/core_cm7.h **** 
1568:vendor/core_cm7.h **** /** \brief FPU Floating-Point Default Status Control Register Definitions */
1569:vendor/core_cm7.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1570:vendor/core_cm7.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1571:vendor/core_cm7.h **** 
1572:vendor/core_cm7.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1573:vendor/core_cm7.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1574:vendor/core_cm7.h **** 
1575:vendor/core_cm7.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1576:vendor/core_cm7.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1577:vendor/core_cm7.h **** 
1578:vendor/core_cm7.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1579:vendor/core_cm7.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1580:vendor/core_cm7.h **** 
1581:vendor/core_cm7.h **** /** \brief FPU Media and VFP Feature Register 0 Definitions */
1582:vendor/core_cm7.h **** #define FPU_MVFR0_FPRound_Pos              28U                                            /*!< MVFR
1583:vendor/core_cm7.h **** #define FPU_MVFR0_FPRound_Msk              (0xFUL << FPU_MVFR0_FPRound_Pos)               /*!< MVFR
1584:vendor/core_cm7.h **** 
1585:vendor/core_cm7.h **** #define FPU_MVFR0_FPShortvec_Pos           24U                                            /*!< MVFR
1586:vendor/core_cm7.h **** #define FPU_MVFR0_FPShortvec_Msk          (0xFUL << FPU_MVFR0_FPShortvec_Pos)             /*!< MVFR
1587:vendor/core_cm7.h **** 
1588:vendor/core_cm7.h **** #define FPU_MVFR0_FPSqrt_Pos               20U                                            /*!< MVFR
1589:vendor/core_cm7.h **** #define FPU_MVFR0_FPSqrt_Msk               (0xFUL << FPU_MVFR0_FPSqrt_Pos)                /*!< MVFR
1590:vendor/core_cm7.h **** 
1591:vendor/core_cm7.h **** #define FPU_MVFR0_FPDivide_Pos             16U                                            /*!< MVFR
1592:vendor/core_cm7.h **** #define FPU_MVFR0_FPDivide_Msk             (0xFUL << FPU_MVFR0_FPDivide_Pos)              /*!< MVFR
1593:vendor/core_cm7.h **** 
1594:vendor/core_cm7.h **** #define FPU_MVFR0_FPExceptrap_Pos    12U                                                  /*!< MVFR
1595:vendor/core_cm7.h **** #define FPU_MVFR0_FPExceptrap_Msk    (0xFUL << FPU_MVFR0_FPExceptrap_Pos)                 /*!< MVFR
1596:vendor/core_cm7.h **** 
1597:vendor/core_cm7.h **** #define FPU_MVFR0_FPDP_Pos                  8U                                            /*!< MVFR
1598:vendor/core_cm7.h **** #define FPU_MVFR0_FPDP_Msk                 (0xFUL << FPU_MVFR0_FPDP_Pos)                  /*!< MVFR
1599:vendor/core_cm7.h **** 
1600:vendor/core_cm7.h **** #define FPU_MVFR0_FPSP_Pos                  4U                                            /*!< MVFR
1601:vendor/core_cm7.h **** #define FPU_MVFR0_FPSP_Msk                 (0xFUL << FPU_MVFR0_FPSP_Pos)                  /*!< MVFR
1602:vendor/core_cm7.h **** 
1603:vendor/core_cm7.h **** #define FPU_MVFR0_SIMDReg_Pos               0U                                            /*!< MVFR
1604:vendor/core_cm7.h **** #define FPU_MVFR0_SIMDReg_Msk              (0xFUL /*<< FPU_MVFR0_SIMDReg_Pos*/)           /*!< MVFR
1605:vendor/core_cm7.h **** 
1606:vendor/core_cm7.h **** /** \brief FPU Media and VFP Feature Register 1 Definitions */
1607:vendor/core_cm7.h **** #define FPU_MVFR1_FMAC_Pos                 28U                                            /*!< MVFR
1608:vendor/core_cm7.h **** #define FPU_MVFR1_FMAC_Msk                 (0xFUL << FPU_MVFR1_FMAC_Pos)                  /*!< MVFR
1609:vendor/core_cm7.h **** 
1610:vendor/core_cm7.h **** #define FPU_MVFR1_FPHP_Pos                 24U                                            /*!< MVFR
1611:vendor/core_cm7.h **** #define FPU_MVFR1_FPHP_Msk                 (0xFUL << FPU_MVFR1_FPHP_Pos)                  /*!< MVFR
1612:vendor/core_cm7.h **** 
1613:vendor/core_cm7.h **** #define FPU_MVFR1_FPDNaN_Pos                4U                                            /*!< MVFR
1614:vendor/core_cm7.h **** #define FPU_MVFR1_FPDNaN_Msk               (0xFUL << FPU_MVFR1_FPDNaN_Pos)                /*!< MVFR
1615:vendor/core_cm7.h **** 
1616:vendor/core_cm7.h **** #define FPU_MVFR1_FPFtZ_Pos                 0U                                            /*!< MVFR
1617:vendor/core_cm7.h **** #define FPU_MVFR1_FPFtZ_Msk                (0xFUL /*<< FPU_MVFR1_FPFtZ_Pos*/)             /*!< MVFR
1618:vendor/core_cm7.h **** 
1619:vendor/core_cm7.h **** /** \brief FPU Media and VFP Feature Register 2 Definitions */
1620:vendor/core_cm7.h **** #define FPU_MVFR2_FPMisc_Pos                4U                                            /*!< MVFR
1621:vendor/core_cm7.h **** #define FPU_MVFR2_FPMisc_Msk               (0xFUL << FPU_MVFR2_FPMisc_Pos)                /*!< MVFR
1622:vendor/core_cm7.h **** 
1623:vendor/core_cm7.h **** /*@} end of group CMSIS_FPU */
1624:vendor/core_cm7.h **** 
1625:vendor/core_cm7.h **** 
1626:vendor/core_cm7.h **** /**
1627:vendor/core_cm7.h ****   \ingroup  CMSIS_core_register
1628:vendor/core_cm7.h ****   \defgroup CMSIS_DCB       Debug Control Block
1629:vendor/core_cm7.h ****   \brief    Type definitions for the Debug Control Block Registers
1630:vendor/core_cm7.h ****   @{
1631:vendor/core_cm7.h ****  */
1632:vendor/core_cm7.h **** 
1633:vendor/core_cm7.h **** /**
1634:vendor/core_cm7.h ****   \brief  Structure type to access the Debug Control Block Registers (DCB).
1635:vendor/core_cm7.h ****  */
1636:vendor/core_cm7.h **** typedef struct
1637:vendor/core_cm7.h **** {
1638:vendor/core_cm7.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1639:vendor/core_cm7.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1640:vendor/core_cm7.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1641:vendor/core_cm7.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1642:vendor/core_cm7.h **** } DCB_Type;
1643:vendor/core_cm7.h **** 
1644:vendor/core_cm7.h **** /** \brief DCB Debug Halting Control and Status Register Definitions */
1645:vendor/core_cm7.h **** #define DCB_DHCSR_DBGKEY_Pos               16U                                            /*!< DCB 
1646:vendor/core_cm7.h **** #define DCB_DHCSR_DBGKEY_Msk               (0xFFFFUL << DCB_DHCSR_DBGKEY_Pos)             /*!< DCB 
1647:vendor/core_cm7.h **** 
1648:vendor/core_cm7.h **** #define DCB_DHCSR_S_RESET_ST_Pos           25U                                            /*!< DCB 
1649:vendor/core_cm7.h **** #define DCB_DHCSR_S_RESET_ST_Msk           (1UL << DCB_DHCSR_S_RESET_ST_Pos)              /*!< DCB 
1650:vendor/core_cm7.h **** 
1651:vendor/core_cm7.h **** #define DCB_DHCSR_S_RETIRE_ST_Pos          24U                                            /*!< DCB 
1652:vendor/core_cm7.h **** #define DCB_DHCSR_S_RETIRE_ST_Msk          (1UL << DCB_DHCSR_S_RETIRE_ST_Pos)             /*!< DCB 
1653:vendor/core_cm7.h **** 
1654:vendor/core_cm7.h **** #define DCB_DHCSR_S_LOCKUP_Pos             19U                                            /*!< DCB 
1655:vendor/core_cm7.h **** #define DCB_DHCSR_S_LOCKUP_Msk             (1UL << DCB_DHCSR_S_LOCKUP_Pos)                /*!< DCB 
1656:vendor/core_cm7.h **** 
1657:vendor/core_cm7.h **** #define DCB_DHCSR_S_SLEEP_Pos              18U                                            /*!< DCB 
1658:vendor/core_cm7.h **** #define DCB_DHCSR_S_SLEEP_Msk              (1UL << DCB_DHCSR_S_SLEEP_Pos)                 /*!< DCB 
1659:vendor/core_cm7.h **** 
1660:vendor/core_cm7.h **** #define DCB_DHCSR_S_HALT_Pos               17U                                            /*!< DCB 
1661:vendor/core_cm7.h **** #define DCB_DHCSR_S_HALT_Msk               (1UL << DCB_DHCSR_S_HALT_Pos)                  /*!< DCB 
1662:vendor/core_cm7.h **** 
1663:vendor/core_cm7.h **** #define DCB_DHCSR_S_REGRDY_Pos             16U                                            /*!< DCB 
1664:vendor/core_cm7.h **** #define DCB_DHCSR_S_REGRDY_Msk             (1UL << DCB_DHCSR_S_REGRDY_Pos)                /*!< DCB 
1665:vendor/core_cm7.h **** 
1666:vendor/core_cm7.h **** #define DCB_DHCSR_C_SNAPSTALL_Pos           5U                                            /*!< DCB 
1667:vendor/core_cm7.h **** #define DCB_DHCSR_C_SNAPSTALL_Msk          (1UL << DCB_DHCSR_C_SNAPSTALL_Pos)             /*!< DCB 
1668:vendor/core_cm7.h **** 
1669:vendor/core_cm7.h **** #define DCB_DHCSR_C_MASKINTS_Pos            3U                                            /*!< DCB 
1670:vendor/core_cm7.h **** #define DCB_DHCSR_C_MASKINTS_Msk           (1UL << DCB_DHCSR_C_MASKINTS_Pos)              /*!< DCB 
1671:vendor/core_cm7.h **** 
1672:vendor/core_cm7.h **** #define DCB_DHCSR_C_STEP_Pos                2U                                            /*!< DCB 
1673:vendor/core_cm7.h **** #define DCB_DHCSR_C_STEP_Msk               (1UL << DCB_DHCSR_C_STEP_Pos)                  /*!< DCB 
1674:vendor/core_cm7.h **** 
1675:vendor/core_cm7.h **** #define DCB_DHCSR_C_HALT_Pos                1U                                            /*!< DCB 
1676:vendor/core_cm7.h **** #define DCB_DHCSR_C_HALT_Msk               (1UL << DCB_DHCSR_C_HALT_Pos)                  /*!< DCB 
1677:vendor/core_cm7.h **** 
1678:vendor/core_cm7.h **** #define DCB_DHCSR_C_DEBUGEN_Pos             0U                                            /*!< DCB 
1679:vendor/core_cm7.h **** #define DCB_DHCSR_C_DEBUGEN_Msk            (1UL /*<< DCB_DHCSR_C_DEBUGEN_Pos*/)           /*!< DCB 
1680:vendor/core_cm7.h **** 
1681:vendor/core_cm7.h **** /** \brief DCB Debug Core Register Selector Register Definitions */
1682:vendor/core_cm7.h **** #define DCB_DCRSR_REGWnR_Pos               16U                                            /*!< DCB 
1683:vendor/core_cm7.h **** #define DCB_DCRSR_REGWnR_Msk               (1UL << DCB_DCRSR_REGWnR_Pos)                  /*!< DCB 
1684:vendor/core_cm7.h **** 
1685:vendor/core_cm7.h **** #define DCB_DCRSR_REGSEL_Pos                0U                                            /*!< DCB 
1686:vendor/core_cm7.h **** #define DCB_DCRSR_REGSEL_Msk               (0x7FUL /*<< DCB_DCRSR_REGSEL_Pos*/)           /*!< DCB 
1687:vendor/core_cm7.h **** 
1688:vendor/core_cm7.h **** /** \brief DCB Debug Core Register Data Register Definitions */
1689:vendor/core_cm7.h **** #define DCB_DCRDR_DBGTMP_Pos                0U                                            /*!< DCB 
1690:vendor/core_cm7.h **** #define DCB_DCRDR_DBGTMP_Msk               (0xFFFFFFFFUL /*<< DCB_DCRDR_DBGTMP_Pos*/)     /*!< DCB 
1691:vendor/core_cm7.h **** 
1692:vendor/core_cm7.h **** /** \brief DCB Debug Exception and Monitor Control Register Definitions */
1693:vendor/core_cm7.h **** #define DCB_DEMCR_TRCENA_Pos               24U                                            /*!< DCB 
1694:vendor/core_cm7.h **** #define DCB_DEMCR_TRCENA_Msk               (1UL << DCB_DEMCR_TRCENA_Pos)                  /*!< DCB 
1695:vendor/core_cm7.h **** 
1696:vendor/core_cm7.h **** #define DCB_DEMCR_MON_REQ_Pos              19U                                            /*!< DCB 
1697:vendor/core_cm7.h **** #define DCB_DEMCR_MON_REQ_Msk              (1UL << DCB_DEMCR_MON_REQ_Pos)                 /*!< DCB 
1698:vendor/core_cm7.h **** 
1699:vendor/core_cm7.h **** #define DCB_DEMCR_MON_STEP_Pos             18U                                            /*!< DCB 
1700:vendor/core_cm7.h **** #define DCB_DEMCR_MON_STEP_Msk             (1UL << DCB_DEMCR_MON_STEP_Pos)                /*!< DCB 
1701:vendor/core_cm7.h **** 
1702:vendor/core_cm7.h **** #define DCB_DEMCR_MON_PEND_Pos             17U                                            /*!< DCB 
1703:vendor/core_cm7.h **** #define DCB_DEMCR_MON_PEND_Msk             (1UL << DCB_DEMCR_MON_PEND_Pos)                /*!< DCB 
1704:vendor/core_cm7.h **** 
1705:vendor/core_cm7.h **** #define DCB_DEMCR_MON_EN_Pos               16U                                            /*!< DCB 
1706:vendor/core_cm7.h **** #define DCB_DEMCR_MON_EN_Msk               (1UL << DCB_DEMCR_MON_EN_Pos)                  /*!< DCB 
1707:vendor/core_cm7.h **** 
1708:vendor/core_cm7.h **** #define DCB_DEMCR_VC_HARDERR_Pos           10U                                            /*!< DCB 
1709:vendor/core_cm7.h **** #define DCB_DEMCR_VC_HARDERR_Msk           (1UL << DCB_DEMCR_VC_HARDERR_Pos)              /*!< DCB 
1710:vendor/core_cm7.h **** 
1711:vendor/core_cm7.h **** #define DCB_DEMCR_VC_INTERR_Pos             9U                                            /*!< DCB 
1712:vendor/core_cm7.h **** #define DCB_DEMCR_VC_INTERR_Msk            (1UL << DCB_DEMCR_VC_INTERR_Pos)               /*!< DCB 
1713:vendor/core_cm7.h **** 
1714:vendor/core_cm7.h **** #define DCB_DEMCR_VC_BUSERR_Pos             8U                                            /*!< DCB 
1715:vendor/core_cm7.h **** #define DCB_DEMCR_VC_BUSERR_Msk            (1UL << DCB_DEMCR_VC_BUSERR_Pos)               /*!< DCB 
1716:vendor/core_cm7.h **** 
1717:vendor/core_cm7.h **** #define DCB_DEMCR_VC_STATERR_Pos            7U                                            /*!< DCB 
1718:vendor/core_cm7.h **** #define DCB_DEMCR_VC_STATERR_Msk           (1UL << DCB_DEMCR_VC_STATERR_Pos)              /*!< DCB 
1719:vendor/core_cm7.h **** 
1720:vendor/core_cm7.h **** #define DCB_DEMCR_VC_CHKERR_Pos             6U                                            /*!< DCB 
1721:vendor/core_cm7.h **** #define DCB_DEMCR_VC_CHKERR_Msk            (1UL << DCB_DEMCR_VC_CHKERR_Pos)               /*!< DCB 
1722:vendor/core_cm7.h **** 
1723:vendor/core_cm7.h **** #define DCB_DEMCR_VC_NOCPERR_Pos            5U                                            /*!< DCB 
1724:vendor/core_cm7.h **** #define DCB_DEMCR_VC_NOCPERR_Msk           (1UL << DCB_DEMCR_VC_NOCPERR_Pos)              /*!< DCB 
1725:vendor/core_cm7.h **** 
1726:vendor/core_cm7.h **** #define DCB_DEMCR_VC_MMERR_Pos              4U                                            /*!< DCB 
1727:vendor/core_cm7.h **** #define DCB_DEMCR_VC_MMERR_Msk             (1UL << DCB_DEMCR_VC_MMERR_Pos)                /*!< DCB 
1728:vendor/core_cm7.h **** 
1729:vendor/core_cm7.h **** #define DCB_DEMCR_VC_CORERESET_Pos          0U                                            /*!< DCB 
1730:vendor/core_cm7.h **** #define DCB_DEMCR_VC_CORERESET_Msk         (1UL /*<< DCB_DEMCR_VC_CORERESET_Pos*/)        /*!< DCB 
1731:vendor/core_cm7.h **** 
1732:vendor/core_cm7.h **** /*@} end of group CMSIS_DCB */
1733:vendor/core_cm7.h **** 
1734:vendor/core_cm7.h **** 
1735:vendor/core_cm7.h **** /**
1736:vendor/core_cm7.h ****   \ingroup    CMSIS_core_register
1737:vendor/core_cm7.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1738:vendor/core_cm7.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1739:vendor/core_cm7.h ****   @{
1740:vendor/core_cm7.h ****  */
1741:vendor/core_cm7.h **** 
1742:vendor/core_cm7.h **** /**
1743:vendor/core_cm7.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1744:vendor/core_cm7.h ****   \param[in] field  Name of the register bit field.
1745:vendor/core_cm7.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1746:vendor/core_cm7.h ****   \return           Masked and shifted value.
1747:vendor/core_cm7.h **** */
1748:vendor/core_cm7.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1749:vendor/core_cm7.h **** 
1750:vendor/core_cm7.h **** /**
1751:vendor/core_cm7.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1752:vendor/core_cm7.h ****   \param[in] field  Name of the register bit field.
1753:vendor/core_cm7.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1754:vendor/core_cm7.h ****   \return           Masked and shifted bit field value.
1755:vendor/core_cm7.h **** */
1756:vendor/core_cm7.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1757:vendor/core_cm7.h **** 
1758:vendor/core_cm7.h **** /*@} end of group CMSIS_core_bitfield */
1759:vendor/core_cm7.h **** 
1760:vendor/core_cm7.h **** 
1761:vendor/core_cm7.h **** /**
1762:vendor/core_cm7.h ****   \ingroup    CMSIS_core_register
1763:vendor/core_cm7.h ****   \defgroup   CMSIS_core_base     Core Definitions
1764:vendor/core_cm7.h ****   \brief      Definitions for base addresses, unions, and structures.
1765:vendor/core_cm7.h ****   @{
1766:vendor/core_cm7.h ****  */
1767:vendor/core_cm7.h **** 
1768:vendor/core_cm7.h **** /* Memory mapping of Core Hardware */
1769:vendor/core_cm7.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1770:vendor/core_cm7.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1771:vendor/core_cm7.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1772:vendor/core_cm7.h **** #define TPIU_BASE           (0xE0040000UL)                            /*!< TPIU Base Address */
1773:vendor/core_cm7.h **** #define DCB_BASE            (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1774:vendor/core_cm7.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1775:vendor/core_cm7.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1776:vendor/core_cm7.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1777:vendor/core_cm7.h **** 
1778:vendor/core_cm7.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1779:vendor/core_cm7.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1780:vendor/core_cm7.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1781:vendor/core_cm7.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1782:vendor/core_cm7.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1783:vendor/core_cm7.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1784:vendor/core_cm7.h **** #define TPIU                ((TPIU_Type      *)     TPIU_BASE     )   /*!< TPIU configuration struc
1785:vendor/core_cm7.h **** #define DCB                 ((DCB_Type       *)     DCB_BASE      )   /*!< DCB configuration struct
1786:vendor/core_cm7.h **** 
1787:vendor/core_cm7.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1788:vendor/core_cm7.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1789:vendor/core_cm7.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1790:vendor/core_cm7.h **** #endif
1791:vendor/core_cm7.h **** 
1792:vendor/core_cm7.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1793:vendor/core_cm7.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1794:vendor/core_cm7.h **** 
1795:vendor/core_cm7.h **** /*@} */
1796:vendor/core_cm7.h **** 
1797:vendor/core_cm7.h **** 
1798:vendor/core_cm7.h **** /**
1799:vendor/core_cm7.h ****   \defgroup   CMSIS_deprecated_aliases     Backwards Compatibility Aliases
1800:vendor/core_cm7.h ****   \brief      Alias definitions present for backwards compatibility for deprecated symbols.
1801:vendor/core_cm7.h ****   @{
1802:vendor/core_cm7.h ****  */
1803:vendor/core_cm7.h **** 
1804:vendor/core_cm7.h **** #ifndef CMSIS_DISABLE_DEPRECATED
1805:vendor/core_cm7.h **** 
1806:vendor/core_cm7.h **** #define SCB_AIRCR_ENDIANESS_Pos            SCB_AIRCR_ENDIANNESS_Pos
1807:vendor/core_cm7.h **** #define SCB_AIRCR_ENDIANESS_Msk            SCB_AIRCR_ENDIANNESS_Msk
1808:vendor/core_cm7.h **** 
1809:vendor/core_cm7.h **** /* deprecated, CMSIS_5 backward compatibility */
1810:vendor/core_cm7.h **** typedef struct
1811:vendor/core_cm7.h **** {
1812:vendor/core_cm7.h ****   __IOM uint32_t DHCSR;
1813:vendor/core_cm7.h ****   __OM  uint32_t DCRSR;
1814:vendor/core_cm7.h ****   __IOM uint32_t DCRDR;
1815:vendor/core_cm7.h ****   __IOM uint32_t DEMCR;
1816:vendor/core_cm7.h **** } CoreDebug_Type;
1817:vendor/core_cm7.h **** 
1818:vendor/core_cm7.h **** /* Debug Halting Control and Status Register Definitions */
1819:vendor/core_cm7.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         DCB_DHCSR_DBGKEY_Pos
1820:vendor/core_cm7.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         DCB_DHCSR_DBGKEY_Msk
1821:vendor/core_cm7.h **** 
1822:vendor/core_cm7.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     DCB_DHCSR_S_RESET_ST_Pos
1823:vendor/core_cm7.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     DCB_DHCSR_S_RESET_ST_Msk
1824:vendor/core_cm7.h **** 
1825:vendor/core_cm7.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    DCB_DHCSR_S_RETIRE_ST_Pos
1826:vendor/core_cm7.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    DCB_DHCSR_S_RETIRE_ST_Msk
1827:vendor/core_cm7.h **** 
1828:vendor/core_cm7.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       DCB_DHCSR_S_LOCKUP_Pos
1829:vendor/core_cm7.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       DCB_DHCSR_S_LOCKUP_Msk
1830:vendor/core_cm7.h **** 
1831:vendor/core_cm7.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        DCB_DHCSR_S_SLEEP_Pos
1832:vendor/core_cm7.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        DCB_DHCSR_S_SLEEP_Msk
1833:vendor/core_cm7.h **** 
1834:vendor/core_cm7.h **** #define CoreDebug_DHCSR_S_HALT_Pos         DCB_DHCSR_S_HALT_Pos
1835:vendor/core_cm7.h **** #define CoreDebug_DHCSR_S_HALT_Msk         DCB_DHCSR_S_HALT_Msk
1836:vendor/core_cm7.h **** 
1837:vendor/core_cm7.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       DCB_DHCSR_S_REGRDY_Pos
1838:vendor/core_cm7.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       DCB_DHCSR_S_REGRDY_Msk
1839:vendor/core_cm7.h **** 
1840:vendor/core_cm7.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos    DCB_DHCSR_C_SNAPSTALL_Pos
1841:vendor/core_cm7.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    DCB_DHCSR_C_SNAPSTALL_Msk
1842:vendor/core_cm7.h **** 
1843:vendor/core_cm7.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos     DCB_DHCSR_C_MASKINTS_Pos
1844:vendor/core_cm7.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     DCB_DHCSR_C_MASKINTS_Msk
1845:vendor/core_cm7.h **** 
1846:vendor/core_cm7.h **** #define CoreDebug_DHCSR_C_STEP_Pos         DCB_DHCSR_C_STEP_Pos
1847:vendor/core_cm7.h **** #define CoreDebug_DHCSR_C_STEP_Msk         DCB_DHCSR_C_STEP_Msk
1848:vendor/core_cm7.h **** 
1849:vendor/core_cm7.h **** #define CoreDebug_DHCSR_C_HALT_Pos         DCB_DHCSR_C_HALT_Pos
1850:vendor/core_cm7.h **** #define CoreDebug_DHCSR_C_HALT_Msk         DCB_DHCSR_C_HALT_Msk
1851:vendor/core_cm7.h **** 
1852:vendor/core_cm7.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos      DCB_DHCSR_C_DEBUGEN_Pos
1853:vendor/core_cm7.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      DCB_DHCSR_C_DEBUGEN_Msk
1854:vendor/core_cm7.h **** 
1855:vendor/core_cm7.h **** /* Debug Core Register Selector Register Definitions */
1856:vendor/core_cm7.h **** #define CoreDebug_DCRSR_REGWnR_Pos         DCB_DCRSR_REGWnR_Pos
1857:vendor/core_cm7.h **** #define CoreDebug_DCRSR_REGWnR_Msk         DCB_DCRSR_REGWnR_Msk
1858:vendor/core_cm7.h **** 
1859:vendor/core_cm7.h **** #define CoreDebug_DCRSR_REGSEL_Pos         DCB_DCRSR_REGSEL_Pos
1860:vendor/core_cm7.h **** #define CoreDebug_DCRSR_REGSEL_Msk         DCB_DCRSR_REGSEL_Msk
1861:vendor/core_cm7.h **** 
1862:vendor/core_cm7.h **** /* Debug Exception and Monitor Control Register Definitions */
1863:vendor/core_cm7.h **** #define CoreDebug_DEMCR_TRCENA_Pos         DCB_DEMCR_TRCENA_Pos
1864:vendor/core_cm7.h **** #define CoreDebug_DEMCR_TRCENA_Msk         DCB_DEMCR_TRCENA_Msk
1865:vendor/core_cm7.h **** 
1866:vendor/core_cm7.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        DCB_DEMCR_MON_REQ_Pos
1867:vendor/core_cm7.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        DCB_DEMCR_MON_REQ_Msk
1868:vendor/core_cm7.h **** 
1869:vendor/core_cm7.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       DCB_DEMCR_MON_STEP_Pos
1870:vendor/core_cm7.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       DCB_DEMCR_MON_STEP_Msk
1871:vendor/core_cm7.h **** 
1872:vendor/core_cm7.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       DCB_DEMCR_MON_PEND_Pos
1873:vendor/core_cm7.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       DCB_DEMCR_MON_PEND_Msk
1874:vendor/core_cm7.h **** 
1875:vendor/core_cm7.h **** #define CoreDebug_DEMCR_MON_EN_Pos         DCB_DEMCR_MON_EN_Pos
1876:vendor/core_cm7.h **** #define CoreDebug_DEMCR_MON_EN_Msk         DCB_DEMCR_MON_EN_Msk
1877:vendor/core_cm7.h **** 
1878:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     DCB_DEMCR_VC_HARDERR_Pos
1879:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     DCB_DEMCR_VC_HARDERR_Msk
1880:vendor/core_cm7.h **** 
1881:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos      DCB_DEMCR_VC_INTERR_Pos
1882:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      DCB_DEMCR_VC_INTERR_Msk
1883:vendor/core_cm7.h **** 
1884:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos      DCB_DEMCR_VC_BUSERR_Pos
1885:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      DCB_DEMCR_VC_BUSERR_Msk
1886:vendor/core_cm7.h **** 
1887:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos     DCB_DEMCR_VC_STATERR_Pos
1888:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     DCB_DEMCR_VC_STATERR_Msk
1889:vendor/core_cm7.h **** 
1890:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos      DCB_DEMCR_VC_CHKERR_Pos
1891:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      DCB_DEMCR_VC_CHKERR_Msk
1892:vendor/core_cm7.h **** 
1893:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos     DCB_DEMCR_VC_NOCPERR_Pos
1894:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     DCB_DEMCR_VC_NOCPERR_Msk
1895:vendor/core_cm7.h **** 
1896:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos       DCB_DEMCR_VC_MMERR_Pos
1897:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       DCB_DEMCR_VC_MMERR_Msk
1898:vendor/core_cm7.h **** 
1899:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos   DCB_DEMCR_VC_CORERESET_Pos
1900:vendor/core_cm7.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   DCB_DEMCR_VC_CORERESET_Msk
1901:vendor/core_cm7.h **** 
1902:vendor/core_cm7.h **** #define CoreDebug           ((CoreDebug_Type *)     DCB_BASE)
1903:vendor/core_cm7.h **** 
1904:vendor/core_cm7.h **** #endif // CMSIS_DISABLE_DEPRECATED
1905:vendor/core_cm7.h **** 
1906:vendor/core_cm7.h **** /*@} */
1907:vendor/core_cm7.h **** 
1908:vendor/core_cm7.h **** 
1909:vendor/core_cm7.h **** /*******************************************************************************
1910:vendor/core_cm7.h ****  *                Hardware Abstraction Layer
1911:vendor/core_cm7.h ****   Core Function Interface contains:
1912:vendor/core_cm7.h ****   - Core NVIC Functions
1913:vendor/core_cm7.h ****   - Core SysTick Functions
1914:vendor/core_cm7.h ****   - Core Debug Functions
1915:vendor/core_cm7.h ****   - Core Register Access Functions
1916:vendor/core_cm7.h ****  ******************************************************************************/
1917:vendor/core_cm7.h **** /**
1918:vendor/core_cm7.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1919:vendor/core_cm7.h **** */
1920:vendor/core_cm7.h **** 
1921:vendor/core_cm7.h **** 
1922:vendor/core_cm7.h **** 
1923:vendor/core_cm7.h **** /* ##########################   NVIC functions  #################################### */
1924:vendor/core_cm7.h **** /**
1925:vendor/core_cm7.h ****   \ingroup  CMSIS_Core_FunctionInterface
1926:vendor/core_cm7.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1927:vendor/core_cm7.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1928:vendor/core_cm7.h ****   @{
1929:vendor/core_cm7.h ****  */
1930:vendor/core_cm7.h **** 
1931:vendor/core_cm7.h **** #ifdef CMSIS_NVIC_VIRTUAL
1932:vendor/core_cm7.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1933:vendor/core_cm7.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1934:vendor/core_cm7.h ****   #endif
1935:vendor/core_cm7.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1936:vendor/core_cm7.h **** #else
1937:vendor/core_cm7.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1938:vendor/core_cm7.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1939:vendor/core_cm7.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1940:vendor/core_cm7.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1941:vendor/core_cm7.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1942:vendor/core_cm7.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1943:vendor/core_cm7.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1944:vendor/core_cm7.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1945:vendor/core_cm7.h ****   #define NVIC_GetActive              __NVIC_GetActive
1946:vendor/core_cm7.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1947:vendor/core_cm7.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1948:vendor/core_cm7.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1949:vendor/core_cm7.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1950:vendor/core_cm7.h **** 
1951:vendor/core_cm7.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1952:vendor/core_cm7.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1953:vendor/core_cm7.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1954:vendor/core_cm7.h ****   #endif
1955:vendor/core_cm7.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1956:vendor/core_cm7.h **** #else
1957:vendor/core_cm7.h ****   #define NVIC_SetVector              __NVIC_SetVector
1958:vendor/core_cm7.h ****   #define NVIC_GetVector              __NVIC_GetVector
1959:vendor/core_cm7.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1960:vendor/core_cm7.h **** 
1961:vendor/core_cm7.h **** #define NVIC_USER_IRQ_OFFSET          16
1962:vendor/core_cm7.h **** 
1963:vendor/core_cm7.h **** 
1964:vendor/core_cm7.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1965:vendor/core_cm7.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1966:vendor/core_cm7.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1967:vendor/core_cm7.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1968:vendor/core_cm7.h **** #define EXC_RETURN_HANDLER_FPU     (0xFFFFFFE1UL)     /* return to Handler mode, uses MSP after ret
1969:vendor/core_cm7.h **** #define EXC_RETURN_THREAD_MSP_FPU  (0xFFFFFFE9UL)     /* return to Thread mode, uses MSP after retu
1970:vendor/core_cm7.h **** #define EXC_RETURN_THREAD_PSP_FPU  (0xFFFFFFEDUL)     /* return to Thread mode, uses PSP after retu
1971:vendor/core_cm7.h **** 
1972:vendor/core_cm7.h **** 
1973:vendor/core_cm7.h **** /**
1974:vendor/core_cm7.h ****   \brief   Set Priority Grouping
1975:vendor/core_cm7.h ****   \details Sets the priority grouping field using the required unlock sequence.
1976:vendor/core_cm7.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1977:vendor/core_cm7.h ****            Only values from 0..7 are used.
1978:vendor/core_cm7.h ****            In case of a conflict between priority grouping and available
1979:vendor/core_cm7.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1980:vendor/core_cm7.h ****   \param [in]      PriorityGroup  Priority grouping field.
1981:vendor/core_cm7.h ****  */
1982:vendor/core_cm7.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1983:vendor/core_cm7.h **** {
1984:vendor/core_cm7.h ****   uint32_t reg_value;
1985:vendor/core_cm7.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1986:vendor/core_cm7.h **** 
1987:vendor/core_cm7.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1988:vendor/core_cm7.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1989:vendor/core_cm7.h ****   reg_value  =  (reg_value                                   |
1990:vendor/core_cm7.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1991:vendor/core_cm7.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key a
1992:vendor/core_cm7.h ****   SCB->AIRCR =  reg_value;
1993:vendor/core_cm7.h **** }
1994:vendor/core_cm7.h **** 
1995:vendor/core_cm7.h **** 
1996:vendor/core_cm7.h **** /**
1997:vendor/core_cm7.h ****   \brief   Get Priority Grouping
1998:vendor/core_cm7.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1999:vendor/core_cm7.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
2000:vendor/core_cm7.h ****  */
2001:vendor/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
2002:vendor/core_cm7.h **** {
2003:vendor/core_cm7.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
2004:vendor/core_cm7.h **** }
2005:vendor/core_cm7.h **** 
2006:vendor/core_cm7.h **** 
2007:vendor/core_cm7.h **** /**
2008:vendor/core_cm7.h ****   \brief   Enable Interrupt
2009:vendor/core_cm7.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
2010:vendor/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
2011:vendor/core_cm7.h ****   \note    IRQn must not be negative.
2012:vendor/core_cm7.h ****  */
2013:vendor/core_cm7.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
2014:vendor/core_cm7.h **** {
2015:vendor/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2016:vendor/core_cm7.h ****   {
2017:vendor/core_cm7.h ****     __COMPILER_BARRIER();
2018:vendor/core_cm7.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2019:vendor/core_cm7.h ****     __COMPILER_BARRIER();
2020:vendor/core_cm7.h ****   }
2021:vendor/core_cm7.h **** }
2022:vendor/core_cm7.h **** 
2023:vendor/core_cm7.h **** 
2024:vendor/core_cm7.h **** /**
2025:vendor/core_cm7.h ****   \brief   Get Interrupt Enable status
2026:vendor/core_cm7.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
2027:vendor/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
2028:vendor/core_cm7.h ****   \return             0  Interrupt is not enabled.
2029:vendor/core_cm7.h ****   \return             1  Interrupt is enabled.
2030:vendor/core_cm7.h ****   \note    IRQn must not be negative.
2031:vendor/core_cm7.h ****  */
2032:vendor/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
2033:vendor/core_cm7.h **** {
2034:vendor/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2035:vendor/core_cm7.h ****   {
2036:vendor/core_cm7.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
2037:vendor/core_cm7.h ****   }
2038:vendor/core_cm7.h ****   else
2039:vendor/core_cm7.h ****   {
2040:vendor/core_cm7.h ****     return(0U);
2041:vendor/core_cm7.h ****   }
2042:vendor/core_cm7.h **** }
2043:vendor/core_cm7.h **** 
2044:vendor/core_cm7.h **** 
2045:vendor/core_cm7.h **** /**
2046:vendor/core_cm7.h ****   \brief   Disable Interrupt
2047:vendor/core_cm7.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
2048:vendor/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
2049:vendor/core_cm7.h ****   \note    IRQn must not be negative.
2050:vendor/core_cm7.h ****  */
2051:vendor/core_cm7.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
2052:vendor/core_cm7.h **** {
2053:vendor/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2054:vendor/core_cm7.h ****   {
2055:vendor/core_cm7.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2056:vendor/core_cm7.h ****     __DSB();
2057:vendor/core_cm7.h ****     __ISB();
2058:vendor/core_cm7.h ****   }
2059:vendor/core_cm7.h **** }
2060:vendor/core_cm7.h **** 
2061:vendor/core_cm7.h **** 
2062:vendor/core_cm7.h **** /**
2063:vendor/core_cm7.h ****   \brief   Get Pending Interrupt
2064:vendor/core_cm7.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
2065:vendor/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
2066:vendor/core_cm7.h ****   \return             0  Interrupt status is not pending.
2067:vendor/core_cm7.h ****   \return             1  Interrupt status is pending.
2068:vendor/core_cm7.h ****   \note    IRQn must not be negative.
2069:vendor/core_cm7.h ****  */
2070:vendor/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
2071:vendor/core_cm7.h **** {
2072:vendor/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2073:vendor/core_cm7.h ****   {
2074:vendor/core_cm7.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
2075:vendor/core_cm7.h ****   }
2076:vendor/core_cm7.h ****   else
2077:vendor/core_cm7.h ****   {
2078:vendor/core_cm7.h ****     return(0U);
2079:vendor/core_cm7.h ****   }
2080:vendor/core_cm7.h **** }
2081:vendor/core_cm7.h **** 
2082:vendor/core_cm7.h **** 
2083:vendor/core_cm7.h **** /**
2084:vendor/core_cm7.h ****   \brief   Set Pending Interrupt
2085:vendor/core_cm7.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
2086:vendor/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
2087:vendor/core_cm7.h ****   \note    IRQn must not be negative.
2088:vendor/core_cm7.h ****  */
2089:vendor/core_cm7.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
2090:vendor/core_cm7.h **** {
2091:vendor/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2092:vendor/core_cm7.h ****   {
2093:vendor/core_cm7.h ****     NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2094:vendor/core_cm7.h ****   }
2095:vendor/core_cm7.h **** }
2096:vendor/core_cm7.h **** 
2097:vendor/core_cm7.h **** 
2098:vendor/core_cm7.h **** /**
2099:vendor/core_cm7.h ****   \brief   Clear Pending Interrupt
2100:vendor/core_cm7.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
2101:vendor/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
2102:vendor/core_cm7.h ****   \note    IRQn must not be negative.
2103:vendor/core_cm7.h ****  */
2104:vendor/core_cm7.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
2105:vendor/core_cm7.h **** {
2106:vendor/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2107:vendor/core_cm7.h ****   {
2108:vendor/core_cm7.h ****     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2109:vendor/core_cm7.h ****   }
2110:vendor/core_cm7.h **** }
2111:vendor/core_cm7.h **** 
2112:vendor/core_cm7.h **** 
2113:vendor/core_cm7.h **** /**
2114:vendor/core_cm7.h ****   \brief   Get Active Interrupt
2115:vendor/core_cm7.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
2116:vendor/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
2117:vendor/core_cm7.h ****   \return             0  Interrupt status is not active.
2118:vendor/core_cm7.h ****   \return             1  Interrupt status is active.
2119:vendor/core_cm7.h ****   \note    IRQn must not be negative.
2120:vendor/core_cm7.h ****  */
2121:vendor/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
2122:vendor/core_cm7.h **** {
2123:vendor/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2124:vendor/core_cm7.h ****   {
2125:vendor/core_cm7.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
2126:vendor/core_cm7.h ****   }
2127:vendor/core_cm7.h ****   else
2128:vendor/core_cm7.h ****   {
2129:vendor/core_cm7.h ****     return(0U);
2130:vendor/core_cm7.h ****   }
2131:vendor/core_cm7.h **** }
2132:vendor/core_cm7.h **** 
2133:vendor/core_cm7.h **** 
2134:vendor/core_cm7.h **** /**
2135:vendor/core_cm7.h ****   \brief   Set Interrupt Priority
2136:vendor/core_cm7.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
2137:vendor/core_cm7.h ****            The interrupt number can be positive to specify a device specific interrupt,
2138:vendor/core_cm7.h ****            or negative to specify a processor exception.
2139:vendor/core_cm7.h ****   \param [in]      IRQn  Interrupt number.
2140:vendor/core_cm7.h ****   \param [in]  priority  Priority to set.
2141:vendor/core_cm7.h ****   \note    The priority cannot be set for every processor exception.
2142:vendor/core_cm7.h ****  */
2143:vendor/core_cm7.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
2144:vendor/core_cm7.h **** {
  26              		.loc 2 2144 1
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 83B0     		sub	sp, sp, #12
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  38 0006 0346     		mov	r3, r0
  39 0008 3960     		str	r1, [r7]
  40 000a FB71     		strb	r3, [r7, #7]
2145:vendor/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
  41              		.loc 2 2145 6
  42 000c 97F90730 		ldrsb	r3, [r7, #7]
  43 0010 002B     		cmp	r3, #0
  44 0012 0ADB     		blt	.L2
2146:vendor/core_cm7.h ****   {
2147:vendor/core_cm7.h ****     NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (
  45              		.loc 2 2147 49
  46 0014 3B68     		ldr	r3, [r7]
  47 0016 DAB2     		uxtb	r2, r3
  48              		.loc 2 2147 9
  49 0018 0C49     		ldr	r1, .L5
  50              		.loc 2 2147 16
  51 001a 97F90730 		ldrsb	r3, [r7, #7]
  52              		.loc 2 2147 49
  53 001e 1201     		lsls	r2, r2, #4
  54 0020 D2B2     		uxtb	r2, r2
  55              		.loc 2 2147 47
  56 0022 0B44     		add	r3, r3, r1
  57 0024 83F80023 		strb	r2, [r3, #768]
2148:vendor/core_cm7.h ****   }
2149:vendor/core_cm7.h ****   else
2150:vendor/core_cm7.h ****   {
2151:vendor/core_cm7.h ****     SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (
2152:vendor/core_cm7.h ****   }
2153:vendor/core_cm7.h **** }
  58              		.loc 2 2153 1
  59 0028 0AE0     		b	.L4
  60              	.L2:
2151:vendor/core_cm7.h ****   }
  61              		.loc 2 2151 49
  62 002a 3B68     		ldr	r3, [r7]
  63 002c DAB2     		uxtb	r2, r3
2151:vendor/core_cm7.h ****   }
  64              		.loc 2 2151 8
  65 002e 0849     		ldr	r1, .L5+4
2151:vendor/core_cm7.h ****   }
  66              		.loc 2 2151 33
  67 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  68 0032 03F00F03 		and	r3, r3, #15
2151:vendor/core_cm7.h ****   }
  69              		.loc 2 2151 41
  70 0036 043B     		subs	r3, r3, #4
2151:vendor/core_cm7.h ****   }
  71              		.loc 2 2151 49
  72 0038 1201     		lsls	r2, r2, #4
  73 003a D2B2     		uxtb	r2, r2
2151:vendor/core_cm7.h ****   }
  74              		.loc 2 2151 47
  75 003c 0B44     		add	r3, r3, r1
  76 003e 1A76     		strb	r2, [r3, #24]
  77              	.L4:
  78              		.loc 2 2153 1
  79 0040 00BF     		nop
  80 0042 0C37     		adds	r7, r7, #12
  81              		.cfi_def_cfa_offset 4
  82 0044 BD46     		mov	sp, r7
  83              		.cfi_def_cfa_register 13
  84              		@ sp needed
  85 0046 80BC     		pop	{r7}
  86              		.cfi_restore 7
  87              		.cfi_def_cfa_offset 0
  88 0048 7047     		bx	lr
  89              	.L6:
  90 004a 00BF     		.align	2
  91              	.L5:
  92 004c 00E100E0 		.word	-536813312
  93 0050 00ED00E0 		.word	-536810240
  94              		.cfi_endproc
  95              	.LFE163:
  97              		.align	1
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 102              	SysTick_Config:
 103              	.LFB190:
2154:vendor/core_cm7.h **** 
2155:vendor/core_cm7.h **** 
2156:vendor/core_cm7.h **** /**
2157:vendor/core_cm7.h ****   \brief   Get Interrupt Priority
2158:vendor/core_cm7.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
2159:vendor/core_cm7.h ****            The interrupt number can be positive to specify a device specific interrupt,
2160:vendor/core_cm7.h ****            or negative to specify a processor exception.
2161:vendor/core_cm7.h ****   \param [in]   IRQn  Interrupt number.
2162:vendor/core_cm7.h ****   \return             Interrupt Priority.
2163:vendor/core_cm7.h ****                       Value is aligned automatically to the implemented priority bits of the microc
2164:vendor/core_cm7.h ****  */
2165:vendor/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
2166:vendor/core_cm7.h **** {
2167:vendor/core_cm7.h **** 
2168:vendor/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2169:vendor/core_cm7.h ****   {
2170:vendor/core_cm7.h ****     return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
2171:vendor/core_cm7.h ****   }
2172:vendor/core_cm7.h ****   else
2173:vendor/core_cm7.h ****   {
2174:vendor/core_cm7.h ****     return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
2175:vendor/core_cm7.h ****   }
2176:vendor/core_cm7.h **** }
2177:vendor/core_cm7.h **** 
2178:vendor/core_cm7.h **** 
2179:vendor/core_cm7.h **** /**
2180:vendor/core_cm7.h ****   \brief   Encode Priority
2181:vendor/core_cm7.h ****   \details Encodes the priority for an interrupt with the given priority group,
2182:vendor/core_cm7.h ****            preemptive priority value, and subpriority value.
2183:vendor/core_cm7.h ****            In case of a conflict between priority grouping and available
2184:vendor/core_cm7.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
2185:vendor/core_cm7.h ****   \param [in]     PriorityGroup  Used priority group.
2186:vendor/core_cm7.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
2187:vendor/core_cm7.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
2188:vendor/core_cm7.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
2189:vendor/core_cm7.h ****  */
2190:vendor/core_cm7.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
2191:vendor/core_cm7.h **** {
2192:vendor/core_cm7.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
2193:vendor/core_cm7.h ****   uint32_t PreemptPriorityBits;
2194:vendor/core_cm7.h ****   uint32_t SubPriorityBits;
2195:vendor/core_cm7.h **** 
2196:vendor/core_cm7.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
2197:vendor/core_cm7.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
2198:vendor/core_cm7.h **** 
2199:vendor/core_cm7.h ****   return (
2200:vendor/core_cm7.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
2201:vendor/core_cm7.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2202:vendor/core_cm7.h ****          );
2203:vendor/core_cm7.h **** }
2204:vendor/core_cm7.h **** 
2205:vendor/core_cm7.h **** 
2206:vendor/core_cm7.h **** /**
2207:vendor/core_cm7.h ****   \brief   Decode Priority
2208:vendor/core_cm7.h ****   \details Decodes an interrupt priority value with a given priority group to
2209:vendor/core_cm7.h ****            preemptive priority value and subpriority value.
2210:vendor/core_cm7.h ****            In case of a conflict between priority grouping and available
2211:vendor/core_cm7.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
2212:vendor/core_cm7.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
2213:vendor/core_cm7.h ****   \param [in]     PriorityGroup  Used priority group.
2214:vendor/core_cm7.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
2215:vendor/core_cm7.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
2216:vendor/core_cm7.h ****  */
2217:vendor/core_cm7.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
2218:vendor/core_cm7.h **** {
2219:vendor/core_cm7.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
2220:vendor/core_cm7.h ****   uint32_t PreemptPriorityBits;
2221:vendor/core_cm7.h ****   uint32_t SubPriorityBits;
2222:vendor/core_cm7.h **** 
2223:vendor/core_cm7.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
2224:vendor/core_cm7.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
2225:vendor/core_cm7.h **** 
2226:vendor/core_cm7.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
2227:vendor/core_cm7.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
2228:vendor/core_cm7.h **** }
2229:vendor/core_cm7.h **** 
2230:vendor/core_cm7.h **** 
2231:vendor/core_cm7.h **** /**
2232:vendor/core_cm7.h ****   \brief   Set Interrupt Vector
2233:vendor/core_cm7.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
2234:vendor/core_cm7.h ****            The interrupt number can be positive to specify a device specific interrupt,
2235:vendor/core_cm7.h ****            or negative to specify a processor exception.
2236:vendor/core_cm7.h ****            VTOR must been relocated to SRAM before.
2237:vendor/core_cm7.h ****   \param [in]   IRQn      Interrupt number
2238:vendor/core_cm7.h ****   \param [in]   vector    Address of interrupt handler function
2239:vendor/core_cm7.h ****  */
2240:vendor/core_cm7.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
2241:vendor/core_cm7.h **** {
2242:vendor/core_cm7.h ****   uint32_t *vectors = (uint32_t *) ((uintptr_t) SCB->VTOR);
2243:vendor/core_cm7.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
2244:vendor/core_cm7.h ****   __DSB();
2245:vendor/core_cm7.h **** }
2246:vendor/core_cm7.h **** 
2247:vendor/core_cm7.h **** 
2248:vendor/core_cm7.h **** /**
2249:vendor/core_cm7.h ****   \brief   Get Interrupt Vector
2250:vendor/core_cm7.h ****   \details Reads an interrupt vector from interrupt vector table.
2251:vendor/core_cm7.h ****            The interrupt number can be positive to specify a device specific interrupt,
2252:vendor/core_cm7.h ****            or negative to specify a processor exception.
2253:vendor/core_cm7.h ****   \param [in]   IRQn      Interrupt number.
2254:vendor/core_cm7.h ****   \return                 Address of interrupt handler function
2255:vendor/core_cm7.h ****  */
2256:vendor/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
2257:vendor/core_cm7.h **** {
2258:vendor/core_cm7.h ****   uint32_t *vectors = (uint32_t *) ((uintptr_t) SCB->VTOR);
2259:vendor/core_cm7.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
2260:vendor/core_cm7.h **** }
2261:vendor/core_cm7.h **** 
2262:vendor/core_cm7.h **** 
2263:vendor/core_cm7.h **** /**
2264:vendor/core_cm7.h ****   \brief   System Reset
2265:vendor/core_cm7.h ****   \details Initiates a system reset request to reset the MCU.
2266:vendor/core_cm7.h ****  */
2267:vendor/core_cm7.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
2268:vendor/core_cm7.h **** {
2269:vendor/core_cm7.h ****   __DSB();                                                          /* Ensure all outstanding memor
2270:vendor/core_cm7.h ****                                                                        buffered write are completed
2271:vendor/core_cm7.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
2272:vendor/core_cm7.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
2273:vendor/core_cm7.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
2274:vendor/core_cm7.h ****   __DSB();                                                          /* Ensure completion of memory 
2275:vendor/core_cm7.h **** 
2276:vendor/core_cm7.h ****   for(;;)                                                           /* wait until reset */
2277:vendor/core_cm7.h ****   {
2278:vendor/core_cm7.h ****     __NOP();
2279:vendor/core_cm7.h ****   }
2280:vendor/core_cm7.h **** }
2281:vendor/core_cm7.h **** 
2282:vendor/core_cm7.h **** /*@} end of CMSIS_Core_NVICFunctions */
2283:vendor/core_cm7.h **** 
2284:vendor/core_cm7.h **** 
2285:vendor/core_cm7.h **** /* ##########################  MPU functions  #################################### */
2286:vendor/core_cm7.h **** 
2287:vendor/core_cm7.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
2288:vendor/core_cm7.h **** 
2289:vendor/core_cm7.h **** #include "m-profile/armv7m_mpu.h"
2290:vendor/core_cm7.h **** 
2291:vendor/core_cm7.h **** #endif
2292:vendor/core_cm7.h **** 
2293:vendor/core_cm7.h **** 
2294:vendor/core_cm7.h **** /* ##########################  FPU functions  #################################### */
2295:vendor/core_cm7.h **** /**
2296:vendor/core_cm7.h ****   \ingroup  CMSIS_Core_FunctionInterface
2297:vendor/core_cm7.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
2298:vendor/core_cm7.h ****   \brief    Function that provides FPU type.
2299:vendor/core_cm7.h ****   @{
2300:vendor/core_cm7.h ****  */
2301:vendor/core_cm7.h **** 
2302:vendor/core_cm7.h **** /**
2303:vendor/core_cm7.h ****   \brief   get FPU type
2304:vendor/core_cm7.h ****   \details returns the FPU type
2305:vendor/core_cm7.h ****   \returns
2306:vendor/core_cm7.h ****    - \b  0: No FPU
2307:vendor/core_cm7.h ****    - \b  1: Single precision FPU
2308:vendor/core_cm7.h ****    - \b  2: Double + Single precision FPU
2309:vendor/core_cm7.h ****  */
2310:vendor/core_cm7.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
2311:vendor/core_cm7.h **** {
2312:vendor/core_cm7.h ****   uint32_t mvfr0;
2313:vendor/core_cm7.h **** 
2314:vendor/core_cm7.h ****   mvfr0 = FPU->MVFR0;
2315:vendor/core_cm7.h ****   if      ((mvfr0 & (FPU_MVFR0_FPSP_Msk | FPU_MVFR0_FPDP_Msk)) == 0x220U)
2316:vendor/core_cm7.h ****   {
2317:vendor/core_cm7.h ****     return 2U;           /* Double + Single precision FPU */
2318:vendor/core_cm7.h ****   }
2319:vendor/core_cm7.h ****   else if ((mvfr0 & (FPU_MVFR0_FPSP_Msk | FPU_MVFR0_FPDP_Msk)) == 0x020U)
2320:vendor/core_cm7.h ****   {
2321:vendor/core_cm7.h ****     return 1U;           /* Single precision FPU */
2322:vendor/core_cm7.h ****   }
2323:vendor/core_cm7.h ****   else
2324:vendor/core_cm7.h ****   {
2325:vendor/core_cm7.h ****     return 0U;           /* No FPU */
2326:vendor/core_cm7.h ****   }
2327:vendor/core_cm7.h **** }
2328:vendor/core_cm7.h **** 
2329:vendor/core_cm7.h **** /*@} end of CMSIS_Core_FpuFunctions */
2330:vendor/core_cm7.h **** 
2331:vendor/core_cm7.h **** 
2332:vendor/core_cm7.h **** /* ##########################  Cache functions  #################################### */
2333:vendor/core_cm7.h **** 
2334:vendor/core_cm7.h **** #if ((defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)) || \
2335:vendor/core_cm7.h ****      (defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)))
2336:vendor/core_cm7.h ****   #include "m-profile/armv7m_cachel1.h"
2337:vendor/core_cm7.h **** #endif
2338:vendor/core_cm7.h **** 
2339:vendor/core_cm7.h **** 
2340:vendor/core_cm7.h **** /* ##################################    SysTick function  ########################################
2341:vendor/core_cm7.h **** /**
2342:vendor/core_cm7.h ****   \ingroup  CMSIS_Core_FunctionInterface
2343:vendor/core_cm7.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
2344:vendor/core_cm7.h ****   \brief    Functions that configure the System.
2345:vendor/core_cm7.h ****   @{
2346:vendor/core_cm7.h ****  */
2347:vendor/core_cm7.h **** 
2348:vendor/core_cm7.h **** #if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
2349:vendor/core_cm7.h **** 
2350:vendor/core_cm7.h **** /**
2351:vendor/core_cm7.h ****   \brief   System Tick Configuration
2352:vendor/core_cm7.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
2353:vendor/core_cm7.h ****            Counter is in free running mode to generate periodic interrupts.
2354:vendor/core_cm7.h ****   \param [in]  ticks  Number of ticks between two interrupts.
2355:vendor/core_cm7.h ****   \return          0  Function succeeded.
2356:vendor/core_cm7.h ****   \return          1  Function failed.
2357:vendor/core_cm7.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
2358:vendor/core_cm7.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
2359:vendor/core_cm7.h ****            must contain a vendor-specific implementation of this function.
2360:vendor/core_cm7.h ****  */
2361:vendor/core_cm7.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
2362:vendor/core_cm7.h **** {
 104              		.loc 2 2362 1
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 8
 107              		@ frame_needed = 1, uses_anonymous_args = 0
 108 0054 80B5     		push	{r7, lr}
 109              		.cfi_def_cfa_offset 8
 110              		.cfi_offset 7, -8
 111              		.cfi_offset 14, -4
 112 0056 82B0     		sub	sp, sp, #8
 113              		.cfi_def_cfa_offset 16
 114 0058 00AF     		add	r7, sp, #0
 115              		.cfi_def_cfa_register 7
 116 005a 7860     		str	r0, [r7, #4]
2363:vendor/core_cm7.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 117              		.loc 2 2363 14
 118 005c 7B68     		ldr	r3, [r7, #4]
 119 005e 013B     		subs	r3, r3, #1
 120              		.loc 2 2363 6
 121 0060 B3F1807F 		cmp	r3, #16777216
 122 0064 01D3     		bcc	.L8
2364:vendor/core_cm7.h ****   {
2365:vendor/core_cm7.h ****     return (1UL);                                                   /* Reload value impossible */
 123              		.loc 2 2365 12
 124 0066 0123     		movs	r3, #1
 125 0068 0FE0     		b	.L9
 126              	.L8:
2366:vendor/core_cm7.h ****   }
2367:vendor/core_cm7.h **** 
2368:vendor/core_cm7.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 127              		.loc 2 2368 10
 128 006a 0A4A     		ldr	r2, .L10
 129              		.loc 2 2368 20
 130 006c 7B68     		ldr	r3, [r7, #4]
 131 006e 013B     		subs	r3, r3, #1
 132              		.loc 2 2368 18
 133 0070 5360     		str	r3, [r2, #4]
2369:vendor/core_cm7.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
 134              		.loc 2 2369 3
 135 0072 0F21     		movs	r1, #15
 136 0074 4FF0FF30 		mov	r0, #-1
 137 0078 FFF7C2FF 		bl	__NVIC_SetPriority
2370:vendor/core_cm7.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 138              		.loc 2 2370 10
 139 007c 054B     		ldr	r3, .L10
 140              		.loc 2 2370 18
 141 007e 0022     		movs	r2, #0
 142 0080 9A60     		str	r2, [r3, #8]
2371:vendor/core_cm7.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 143              		.loc 2 2371 10
 144 0082 044B     		ldr	r3, .L10
 145              		.loc 2 2371 18
 146 0084 0722     		movs	r2, #7
 147 0086 1A60     		str	r2, [r3]
2372:vendor/core_cm7.h ****                    SysTick_CTRL_TICKINT_Msk   |
2373:vendor/core_cm7.h ****                    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTi
2374:vendor/core_cm7.h ****   return (0UL);                                                     /* Function successful */
 148              		.loc 2 2374 10
 149 0088 0023     		movs	r3, #0
 150              	.L9:
2375:vendor/core_cm7.h **** }
 151              		.loc 2 2375 1
 152 008a 1846     		mov	r0, r3
 153 008c 0837     		adds	r7, r7, #8
 154              		.cfi_def_cfa_offset 8
 155 008e BD46     		mov	sp, r7
 156              		.cfi_def_cfa_register 13
 157              		@ sp needed
 158 0090 80BD     		pop	{r7, pc}
 159              	.L11:
 160 0092 00BF     		.align	2
 161              	.L10:
 162 0094 10E000E0 		.word	-536813552
 163              		.cfi_endproc
 164              	.LFE190:
 166              		.global	ticks
 167              		.bss
 168              		.align	2
 171              	ticks:
 172 0000 00000000 		.space	4
 173              		.global	datavar
 174              		.data
 175              		.align	2
 178              	datavar:
 179 0000 01000000 		.word	1
 180              		.text
 181              		.align	1
 182              		.global	systick_handler
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 187              	systick_handler:
 188              	.LFB194:
   1:main_app.c    **** 
   2:main_app.c    **** #include <stdint.h>
   3:main_app.c    **** 
   4:main_app.c    **** // stdio.h has line extern int printf (const char *__restrict __format, ...);
   5:main_app.c    **** #include <stdio.h>
   6:main_app.c    **** #include "stm32f767xx.h"
   7:main_app.c    **** #include "system_stm32f7xx.h"
   8:main_app.c    **** #include "usart.h"
   9:main_app.c    **** #include "dma.h"
  10:main_app.c    **** #include "spi.h"
  11:main_app.c    **** #include "exti_gpio_irq.h"
  12:main_app.c    **** 
  13:main_app.c    **** #define LED_PIN 0 // 0 - green, 7 - blue, 14 - red
  14:main_app.c    **** 
  15:main_app.c    **** uint32_t ticks;
  16:main_app.c    **** uint32_t datavar = 1;
  17:main_app.c    **** void systick_handler()
  18:main_app.c    **** {
 189              		.loc 1 18 1
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 194 0098 80B4     		push	{r7}
 195              		.cfi_def_cfa_offset 4
 196              		.cfi_offset 7, -4
 197 009a 00AF     		add	r7, sp, #0
 198              		.cfi_def_cfa_register 7
  19:main_app.c    ****     ticks++;
 199              		.loc 1 19 10
 200 009c 044B     		ldr	r3, .L13
 201 009e 1B68     		ldr	r3, [r3]
 202 00a0 0133     		adds	r3, r3, #1
 203 00a2 034A     		ldr	r2, .L13
 204 00a4 1360     		str	r3, [r2]
  20:main_app.c    **** }
 205              		.loc 1 20 1
 206 00a6 00BF     		nop
 207 00a8 BD46     		mov	sp, r7
 208              		.cfi_def_cfa_register 13
 209              		@ sp needed
 210 00aa 80BC     		pop	{r7}
 211              		.cfi_restore 7
 212              		.cfi_def_cfa_offset 0
 213 00ac 7047     		bx	lr
 214              	.L14:
 215 00ae 00BF     		.align	2
 216              	.L13:
 217 00b0 00000000 		.word	ticks
 218              		.cfi_endproc
 219              	.LFE194:
 221              		.align	1
 222              		.global	delay_ms
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 227              	delay_ms:
 228              	.LFB195:
  21:main_app.c    **** 
  22:main_app.c    **** void delay_ms(uint32_t milliseconds)
  23:main_app.c    **** {
 229              		.loc 1 23 1
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 16
 232              		@ frame_needed = 1, uses_anonymous_args = 0
 233              		@ link register save eliminated.
 234 00b4 80B4     		push	{r7}
 235              		.cfi_def_cfa_offset 4
 236              		.cfi_offset 7, -4
 237 00b6 85B0     		sub	sp, sp, #20
 238              		.cfi_def_cfa_offset 24
 239 00b8 00AF     		add	r7, sp, #0
 240              		.cfi_def_cfa_register 7
 241 00ba 7860     		str	r0, [r7, #4]
  24:main_app.c    ****     uint32_t start = ticks;
 242              		.loc 1 24 14
 243 00bc 0E4B     		ldr	r3, .L20
 244 00be 1B68     		ldr	r3, [r3]
 245 00c0 FB60     		str	r3, [r7, #12]
  25:main_app.c    ****     uint32_t end = start + milliseconds;
 246              		.loc 1 25 14
 247 00c2 FA68     		ldr	r2, [r7, #12]
 248 00c4 7B68     		ldr	r3, [r7, #4]
 249 00c6 1344     		add	r3, r3, r2
 250 00c8 BB60     		str	r3, [r7, #8]
  26:main_app.c    ****     // if end time is less than start, wait until this is not the case (ticks will wrap around to 0
  27:main_app.c    ****     if (end < start)
 251              		.loc 1 27 8
 252 00ca BA68     		ldr	r2, [r7, #8]
 253 00cc FB68     		ldr	r3, [r7, #12]
 254 00ce 9A42     		cmp	r2, r3
 255 00d0 05D2     		bcs	.L19
  28:main_app.c    ****     {
  29:main_app.c    ****         while (ticks > start)
 256              		.loc 1 29 15
 257 00d2 00BF     		nop
 258              	.L17:
 259              		.loc 1 29 22 discriminator 1
 260 00d4 084B     		ldr	r3, .L20
 261 00d6 1B68     		ldr	r3, [r3]
 262 00d8 FA68     		ldr	r2, [r7, #12]
 263 00da 9A42     		cmp	r2, r3
 264 00dc FAD3     		bcc	.L17
 265              	.L19:
  30:main_app.c    ****             ;
  31:main_app.c    ****     }
  32:main_app.c    ****     // wait until end time is reached
  33:main_app.c    ****     while (ticks < end)
 266              		.loc 1 33 11
 267 00de 00BF     		nop
 268              	.L18:
 269              		.loc 1 33 18 discriminator 1
 270 00e0 054B     		ldr	r3, .L20
 271 00e2 1B68     		ldr	r3, [r3]
 272 00e4 BA68     		ldr	r2, [r7, #8]
 273 00e6 9A42     		cmp	r2, r3
 274 00e8 FAD8     		bhi	.L18
  34:main_app.c    ****         ;
  35:main_app.c    **** }
 275              		.loc 1 35 1
 276 00ea 00BF     		nop
 277 00ec 00BF     		nop
 278 00ee 1437     		adds	r7, r7, #20
 279              		.cfi_def_cfa_offset 4
 280 00f0 BD46     		mov	sp, r7
 281              		.cfi_def_cfa_register 13
 282              		@ sp needed
 283 00f2 80BC     		pop	{r7}
 284              		.cfi_restore 7
 285              		.cfi_def_cfa_offset 0
 286 00f4 7047     		bx	lr
 287              	.L21:
 288 00f6 00BF     		.align	2
 289              	.L20:
 290 00f8 00000000 		.word	ticks
 291              		.cfi_endproc
 292              	.LFE195:
 294              		.align	1
 295              		.global	blink
 296              		.syntax unified
 297              		.thumb
 298              		.thumb_func
 300              	blink:
 301              	.LFB196:
  36:main_app.c    **** 
  37:main_app.c    **** void blink()
  38:main_app.c    **** {
 302              		.loc 1 38 1
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 1, uses_anonymous_args = 0
 306              		@ link register save eliminated.
 307 00fc 80B4     		push	{r7}
 308              		.cfi_def_cfa_offset 4
 309              		.cfi_offset 7, -4
 310 00fe 00AF     		add	r7, sp, #0
 311              		.cfi_def_cfa_register 7
  39:main_app.c    ****     GPIOB->ODR ^= (1 << LED_PIN);
 312              		.loc 1 39 10
 313 0100 044B     		ldr	r3, .L23
 314 0102 5B69     		ldr	r3, [r3, #20]
 315 0104 034A     		ldr	r2, .L23
 316              		.loc 1 39 16
 317 0106 83F00103 		eor	r3, r3, #1
 318 010a 5361     		str	r3, [r2, #20]
  40:main_app.c    **** }
 319              		.loc 1 40 1
 320 010c 00BF     		nop
 321 010e BD46     		mov	sp, r7
 322              		.cfi_def_cfa_register 13
 323              		@ sp needed
 324 0110 80BC     		pop	{r7}
 325              		.cfi_restore 7
 326              		.cfi_def_cfa_offset 0
 327 0112 7047     		bx	lr
 328              	.L24:
 329              		.align	2
 330              	.L23:
 331 0114 00040240 		.word	1073873920
 332              		.cfi_endproc
 333              	.LFE196:
 335              		.align	1
 336              		.global	clock_init
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 341              	clock_init:
 342              	.LFB197:
  41:main_app.c    **** 
  42:main_app.c    **** void clock_init()
  43:main_app.c    **** {
 343              		.loc 1 43 1
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 1, uses_anonymous_args = 0
 347              		@ link register save eliminated.
 348 0118 80B4     		push	{r7}
 349              		.cfi_def_cfa_offset 4
 350              		.cfi_offset 7, -4
 351 011a 00AF     		add	r7, sp, #0
 352              		.cfi_def_cfa_register 7
  44:main_app.c    ****     // bypass oscillator with an external clock and enable the high speed external clock
  45:main_app.c    ****     RCC->CR |= RCC_CR_HSEBYP_Msk | RCC_CR_HSEON_Msk;
 353              		.loc 1 45 8
 354 011c 2A4B     		ldr	r3, .L29
 355 011e 1B68     		ldr	r3, [r3]
 356 0120 294A     		ldr	r2, .L29
 357              		.loc 1 45 13
 358 0122 43F4A023 		orr	r3, r3, #327680
 359 0126 1360     		str	r3, [r2]
  46:main_app.c    ****     // wait until HSE clock is ready
  47:main_app.c    ****     while (!(RCC->CR & RCC_CR_HSERDY_Msk))
 360              		.loc 1 47 11
 361 0128 00BF     		nop
 362              	.L26:
 363              		.loc 1 47 17 discriminator 1
 364 012a 274B     		ldr	r3, .L29
 365 012c 1B68     		ldr	r3, [r3]
 366              		.loc 1 47 22 discriminator 1
 367 012e 03F40033 		and	r3, r3, #131072
 368              		.loc 1 47 12 discriminator 1
 369 0132 002B     		cmp	r3, #0
 370 0134 F9D0     		beq	.L26
  48:main_app.c    ****         ;
  49:main_app.c    ****     // power interface clock enable to use power controller
  50:main_app.c    ****     RCC->APB1ENR |= RCC_APB1ENR_PWREN_Msk;
 371              		.loc 1 50 8
 372 0136 244B     		ldr	r3, .L29
 373 0138 1B6C     		ldr	r3, [r3, #64]
 374 013a 234A     		ldr	r2, .L29
 375              		.loc 1 50 18
 376 013c 43F08053 		orr	r3, r3, #268435456
 377 0140 1364     		str	r3, [r2, #64]
  51:main_app.c    **** 
  52:main_app.c    ****     // scale 1 mode (higher performance and power consumption)
  53:main_app.c    ****     PWR->CR1 |= (0b11 << PWR_CR1_VOS_Pos);
 378              		.loc 1 53 8
 379 0142 224B     		ldr	r3, .L29+4
 380 0144 1B68     		ldr	r3, [r3]
 381 0146 214A     		ldr	r2, .L29+4
 382              		.loc 1 53 14
 383 0148 43F44043 		orr	r3, r3, #49152
 384 014c 1360     		str	r3, [r2]
  54:main_app.c    **** 
  55:main_app.c    ****     // set # of wait states (clock cycles required between CPU flash read dispatch (CPU provides re
  56:main_app.c    ****     FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 385              		.loc 1 56 10
 386 014e 204B     		ldr	r3, .L29+8
 387 0150 1B68     		ldr	r3, [r3]
 388 0152 1F4A     		ldr	r2, .L29+8
 389              		.loc 1 56 16
 390 0154 43F00303 		orr	r3, r3, #3
 391 0158 1360     		str	r3, [r2]
  57:main_app.c    **** 
  58:main_app.c    ****     // reset then set m, n, and p to 4, 200, and 4 where HSE -> /M -> *N -> /P
  59:main_app.c    ****     RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM_Msk |
 392              		.loc 1 59 8
 393 015a 1B4B     		ldr	r3, .L29
 394 015c 5A68     		ldr	r2, [r3, #4]
 395 015e 1A49     		ldr	r1, .L29
 396              		.loc 1 59 18
 397 0160 1C4B     		ldr	r3, .L29+12
 398 0162 1340     		ands	r3, r3, r2
 399 0164 4B60     		str	r3, [r1, #4]
  60:main_app.c    ****                       RCC_PLLCFGR_PLLN_Msk |
  61:main_app.c    ****                       RCC_PLLCFGR_PLLP_Msk);
  62:main_app.c    **** 
  63:main_app.c    ****     RCC->PLLCFGR |= ((4 << RCC_PLLCFGR_PLLM_Pos) |
 400              		.loc 1 63 8
 401 0166 184B     		ldr	r3, .L29
 402 0168 5A68     		ldr	r2, [r3, #4]
 403 016a 1749     		ldr	r1, .L29
 404              		.loc 1 63 18
 405 016c 1A4B     		ldr	r3, .L29+16
 406 016e 1343     		orrs	r3, r3, r2
 407 0170 4B60     		str	r3, [r1, #4]
  64:main_app.c    ****                      (200 << RCC_PLLCFGR_PLLN_Pos) |
  65:main_app.c    ****                      (1 << RCC_PLLCFGR_PLLP_Pos) |
  66:main_app.c    ****                      (1 << RCC_PLLCFGR_PLLSRC_Pos));
  67:main_app.c    **** 
  68:main_app.c    ****     // APB1 clock prescalar = 4, APB2 clock prescalar = 4
  69:main_app.c    ****     RCC->CFGR |= (0b101 << RCC_CFGR_PPRE1_Pos);
 408              		.loc 1 69 8
 409 0172 154B     		ldr	r3, .L29
 410 0174 9B68     		ldr	r3, [r3, #8]
 411 0176 144A     		ldr	r2, .L29
 412              		.loc 1 69 15
 413 0178 43F4A053 		orr	r3, r3, #5120
 414 017c 9360     		str	r3, [r2, #8]
  70:main_app.c    ****     RCC->CFGR |= (0b110 << RCC_CFGR_PPRE2_Pos); // SPI
 415              		.loc 1 70 8
 416 017e 124B     		ldr	r3, .L29
 417 0180 9B68     		ldr	r3, [r3, #8]
 418 0182 114A     		ldr	r2, .L29
 419              		.loc 1 70 15
 420 0184 43F44043 		orr	r3, r3, #49152
 421 0188 9360     		str	r3, [r2, #8]
  71:main_app.c    **** 
  72:main_app.c    ****     // PLL on
  73:main_app.c    ****     RCC->CR |= RCC_CR_PLLON_Msk;
 422              		.loc 1 73 8
 423 018a 0F4B     		ldr	r3, .L29
 424 018c 1B68     		ldr	r3, [r3]
 425 018e 0E4A     		ldr	r2, .L29
 426              		.loc 1 73 13
 427 0190 43F08073 		orr	r3, r3, #16777216
 428 0194 1360     		str	r3, [r2]
  74:main_app.c    **** 
  75:main_app.c    ****     // wait until main PLL is ready
  76:main_app.c    ****     while (!(RCC->CR & RCC_CR_PLLRDY_Msk))
 429              		.loc 1 76 11
 430 0196 00BF     		nop
 431              	.L27:
 432              		.loc 1 76 17 discriminator 1
 433 0198 0B4B     		ldr	r3, .L29
 434 019a 1B68     		ldr	r3, [r3]
 435              		.loc 1 76 22 discriminator 1
 436 019c 03F00073 		and	r3, r3, #33554432
 437              		.loc 1 76 12 discriminator 1
 438 01a0 002B     		cmp	r3, #0
 439 01a2 F9D0     		beq	.L27
  77:main_app.c    ****         ;
  78:main_app.c    ****     // out of HSI, HSE, and PLL, use PLL
  79:main_app.c    ****     RCC->CFGR |= (RCC_CFGR_SW_PLL << RCC_CFGR_SW_Pos);
 440              		.loc 1 79 8
 441 01a4 084B     		ldr	r3, .L29
 442 01a6 9B68     		ldr	r3, [r3, #8]
 443 01a8 074A     		ldr	r2, .L29
 444              		.loc 1 79 15
 445 01aa 43F00203 		orr	r3, r3, #2
 446 01ae 9360     		str	r3, [r2, #8]
  80:main_app.c    **** 
  81:main_app.c    ****     // wait while PLL is not selected as the system clock
  82:main_app.c    ****     while (!(RCC->CFGR & RCC_CFGR_SWS_PLL))
 447              		.loc 1 82 11
 448 01b0 00BF     		nop
 449              	.L28:
 450              		.loc 1 82 17 discriminator 1
 451 01b2 054B     		ldr	r3, .L29
 452 01b4 9B68     		ldr	r3, [r3, #8]
 453              		.loc 1 82 24 discriminator 1
 454 01b6 03F00803 		and	r3, r3, #8
 455              		.loc 1 82 12 discriminator 1
 456 01ba 002B     		cmp	r3, #0
 457 01bc F9D0     		beq	.L28
  83:main_app.c    ****         ;
  84:main_app.c    **** }
 458              		.loc 1 84 1
 459 01be 00BF     		nop
 460 01c0 00BF     		nop
 461 01c2 BD46     		mov	sp, r7
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 01c4 80BC     		pop	{r7}
 465              		.cfi_restore 7
 466              		.cfi_def_cfa_offset 0
 467 01c6 7047     		bx	lr
 468              	.L30:
 469              		.align	2
 470              	.L29:
 471 01c8 00380240 		.word	1073887232
 472 01cc 00700040 		.word	1073770496
 473 01d0 003C0240 		.word	1073888256
 474 01d4 0080FCFF 		.word	-229376
 475 01d8 04324100 		.word	4272644
 476              		.cfi_endproc
 477              	.LFE197:
 479              		.align	1
 480              		.global	GPIOB_init
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 485              	GPIOB_init:
 486              	.LFB198:
  85:main_app.c    **** 
  86:main_app.c    **** void GPIOB_init()
  87:main_app.c    **** {
 487              		.loc 1 87 1
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 1, uses_anonymous_args = 0
 491              		@ link register save eliminated.
 492 01dc 80B4     		push	{r7}
 493              		.cfi_def_cfa_offset 4
 494              		.cfi_offset 7, -4
 495 01de 00AF     		add	r7, sp, #0
 496              		.cfi_def_cfa_register 7
  88:main_app.c    ****     // GPIO port B RCC enable
  89:main_app.c    ****     RCC->AHB1ENR |= (1 << RCC_AHB1ENR_GPIOBEN_Pos);
 497              		.loc 1 89 8
 498 01e0 074B     		ldr	r3, .L32
 499 01e2 1B6B     		ldr	r3, [r3, #48]
 500 01e4 064A     		ldr	r2, .L32
 501              		.loc 1 89 18
 502 01e6 43F00203 		orr	r3, r3, #2
 503 01ea 1363     		str	r3, [r2, #48]
  90:main_app.c    ****     // set pin 0 as mode general purpose output
  91:main_app.c    ****     GPIOB->MODER |= (1 << GPIO_MODER_MODER0_Pos);
 504              		.loc 1 91 10
 505 01ec 054B     		ldr	r3, .L32+4
 506 01ee 1B68     		ldr	r3, [r3]
 507 01f0 044A     		ldr	r2, .L32+4
 508              		.loc 1 91 18
 509 01f2 43F00103 		orr	r3, r3, #1
 510 01f6 1360     		str	r3, [r2]
  92:main_app.c    **** }
 511              		.loc 1 92 1
 512 01f8 00BF     		nop
 513 01fa BD46     		mov	sp, r7
 514              		.cfi_def_cfa_register 13
 515              		@ sp needed
 516 01fc 80BC     		pop	{r7}
 517              		.cfi_restore 7
 518              		.cfi_def_cfa_offset 0
 519 01fe 7047     		bx	lr
 520              	.L33:
 521              		.align	2
 522              	.L32:
 523 0200 00380240 		.word	1073887232
 524 0204 00040240 		.word	1073873920
 525              		.cfi_endproc
 526              	.LFE198:
 528              		.section	.rodata
 529              		.align	2
 530              	.LC0:
 531 0000 61626364 		.ascii	"abcdefedc\000"
 531      65666564 
 531      6300
 532              		.text
 533              		.align	1
 534              		.global	using_spi
 535              		.syntax unified
 536              		.thumb
 537              		.thumb_func
 539              	using_spi:
 540              	.LFB199:
  93:main_app.c    **** 
  94:main_app.c    **** void using_spi()
  95:main_app.c    **** {
 541              		.loc 1 95 1
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 16
 544              		@ frame_needed = 1, uses_anonymous_args = 0
 545 0208 80B5     		push	{r7, lr}
 546              		.cfi_def_cfa_offset 8
 547              		.cfi_offset 7, -8
 548              		.cfi_offset 14, -4
 549 020a 84B0     		sub	sp, sp, #16
 550              		.cfi_def_cfa_offset 24
 551 020c 00AF     		add	r7, sp, #0
 552              		.cfi_def_cfa_register 7
 553              	.L35:
 554              	.LBB5:
  96:main_app.c    ****     while (1)
  97:main_app.c    ****     {
  98:main_app.c    ****         uint8_t here[] = "abcdefedc";
 555              		.loc 1 98 17
 556 020e 084A     		ldr	r2, .L36
 557 0210 3B1D     		adds	r3, r7, #4
 558 0212 07CA     		ldm	r2, {r0, r1, r2}
 559 0214 03C3     		stmia	r3!, {r0, r1}
 560 0216 1A80     		strh	r2, [r3]	@ movhi
  99:main_app.c    ****         SPI_write(SPI4, here, 0, 0);
 561              		.loc 1 99 9
 562 0218 391D     		adds	r1, r7, #4
 563 021a 0023     		movs	r3, #0
 564 021c 0022     		movs	r2, #0
 565 021e 0548     		ldr	r0, .L36+4
 566 0220 FFF7FEFF 		bl	SPI_write
 100:main_app.c    ****         delay_ms(500);
 567              		.loc 1 100 9
 568 0224 4FF4FA70 		mov	r0, #500
 569 0228 FFF7FEFF 		bl	delay_ms
 570              	.LBE5:
  97:main_app.c    ****         uint8_t here[] = "abcdefedc";
 571              		.loc 1 97 5
 572 022c 00BF     		nop
 573 022e EEE7     		b	.L35
 574              	.L37:
 575              		.align	2
 576              	.L36:
 577 0230 00000000 		.word	.LC0
 578 0234 00340140 		.word	1073820672
 579              		.cfi_endproc
 580              	.LFE199:
 582              		.align	1
 583              		.global	init_BKPSRAM
 584              		.syntax unified
 585              		.thumb
 586              		.thumb_func
 588              	init_BKPSRAM:
 589              	.LFB200:
 101:main_app.c    ****     }
 102:main_app.c    **** }
 103:main_app.c    **** 
 104:main_app.c    **** void init_BKPSRAM()
 105:main_app.c    **** {
 590              		.loc 1 105 1
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 1, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 595 0238 80B4     		push	{r7}
 596              		.cfi_def_cfa_offset 4
 597              		.cfi_offset 7, -4
 598 023a 00AF     		add	r7, sp, #0
 599              		.cfi_def_cfa_register 7
 106:main_app.c    ****     // 4.1.5
 107:main_app.c    ****     // Enable power interface clock
 108:main_app.c    ****     RCC->APB1ENR |= RCC_APB1ENR_PWREN_Msk;
 600              		.loc 1 108 8
 601 023c 0A4B     		ldr	r3, .L39
 602 023e 1B6C     		ldr	r3, [r3, #64]
 603 0240 094A     		ldr	r2, .L39
 604              		.loc 1 108 18
 605 0242 43F08053 		orr	r3, r3, #268435456
 606 0246 1364     		str	r3, [r2, #64]
 109:main_app.c    ****     // enable Disable Backup Domain write protection
 110:main_app.c    ****     PWR->CR1 |= PWR_CR1_DBP_Msk;
 607              		.loc 1 110 8
 608 0248 084B     		ldr	r3, .L39+4
 609 024a 1B68     		ldr	r3, [r3]
 610 024c 074A     		ldr	r2, .L39+4
 611              		.loc 1 110 14
 612 024e 43F48073 		orr	r3, r3, #256
 613 0252 1360     		str	r3, [r2]
 111:main_app.c    ****     // enable backup SRAM interface clock
 112:main_app.c    ****     RCC->AHB1ENR |= RCC_AHB1ENR_BKPSRAMEN_Msk;
 614              		.loc 1 112 8
 615 0254 044B     		ldr	r3, .L39
 616 0256 1B6B     		ldr	r3, [r3, #48]
 617 0258 034A     		ldr	r2, .L39
 618              		.loc 1 112 18
 619 025a 43F48023 		orr	r3, r3, #262144
 620 025e 1363     		str	r3, [r2, #48]
 113:main_app.c    **** }
 621              		.loc 1 113 1
 622 0260 00BF     		nop
 623 0262 BD46     		mov	sp, r7
 624              		.cfi_def_cfa_register 13
 625              		@ sp needed
 626 0264 80BC     		pop	{r7}
 627              		.cfi_restore 7
 628              		.cfi_def_cfa_offset 0
 629 0266 7047     		bx	lr
 630              	.L40:
 631              		.align	2
 632              	.L39:
 633 0268 00380240 		.word	1073887232
 634 026c 00700040 		.word	1073770496
 635              		.cfi_endproc
 636              	.LFE200:
 638              		.global	boot_test
 639              		.section	.noinit,"aw"
 640              		.align	2
 643              	boot_test:
 644 0000 00000000 		.space	4
 645              		.global	counter
 646              		.align	2
 649              	counter:
 650 0004 00000000 		.space	4
 651              		.text
 652              		.align	1
 653              		.global	divider
 654              		.syntax unified
 655              		.thumb
 656              		.thumb_func
 658              	divider:
 659              	.LFB201:
 114:main_app.c    **** 
 115:main_app.c    **** // int printf(const char *__restrict, ...) {
 116:main_app.c    **** //     return 0;
 117:main_app.c    **** // }
 118:main_app.c    **** volatile uint32_t boot_test __attribute__((section(".noinit")));
 119:main_app.c    **** volatile uint32_t counter __attribute__((section(".noinit")));
 120:main_app.c    **** 
 121:main_app.c    **** uint32_t divider(uint32_t a, uint32_t b) {
 660              		.loc 1 121 42
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 8
 663              		@ frame_needed = 1, uses_anonymous_args = 0
 664              		@ link register save eliminated.
 665 0270 80B4     		push	{r7}
 666              		.cfi_def_cfa_offset 4
 667              		.cfi_offset 7, -4
 668 0272 83B0     		sub	sp, sp, #12
 669              		.cfi_def_cfa_offset 16
 670 0274 00AF     		add	r7, sp, #0
 671              		.cfi_def_cfa_register 7
 672 0276 7860     		str	r0, [r7, #4]
 673 0278 3960     		str	r1, [r7]
 122:main_app.c    ****     return a / b;
 674              		.loc 1 122 14
 675 027a 7A68     		ldr	r2, [r7, #4]
 676 027c 3B68     		ldr	r3, [r7]
 677 027e B2FBF3F3 		udiv	r3, r2, r3
 123:main_app.c    **** }
 678              		.loc 1 123 1
 679 0282 1846     		mov	r0, r3
 680 0284 0C37     		adds	r7, r7, #12
 681              		.cfi_def_cfa_offset 4
 682 0286 BD46     		mov	sp, r7
 683              		.cfi_def_cfa_register 13
 684              		@ sp needed
 685 0288 80BC     		pop	{r7}
 686              		.cfi_restore 7
 687              		.cfi_def_cfa_offset 0
 688 028a 7047     		bx	lr
 689              		.cfi_endproc
 690              	.LFE201:
 692              		.section	.rodata
 693 000a 0000     		.align	2
 694              	.LC1:
 695 000c 48656C6C 		.ascii	"Hello \015\000"
 695      6F200D00 
 696              		.align	2
 697              	.LC2:
 698 0014 2569200D 		.ascii	"%i \015\012\000"
 698      0A00
 699              		.text
 700              		.align	1
 701              		.global	main
 702              		.syntax unified
 703              		.thumb
 704              		.thumb_func
 706              	main:
 707              	.LFB202:
 124:main_app.c    **** 
 125:main_app.c    **** int main()
 126:main_app.c    **** {
 708              		.loc 1 126 1
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 8
 711              		@ frame_needed = 1, uses_anonymous_args = 0
 712 028c 80B5     		push	{r7, lr}
 713              		.cfi_def_cfa_offset 8
 714              		.cfi_offset 7, -8
 715              		.cfi_offset 14, -4
 716 028e 82B0     		sub	sp, sp, #8
 717              		.cfi_def_cfa_offset 16
 718 0290 00AF     		add	r7, sp, #0
 719              		.cfi_def_cfa_register 7
 127:main_app.c    ****     clock_init();
 720              		.loc 1 127 5
 721 0292 FFF7FEFF 		bl	clock_init
 128:main_app.c    ****     // change CMSIS internal clock variable
 129:main_app.c    ****     SystemCoreClockUpdate();
 722              		.loc 1 129 5
 723 0296 FFF7FEFF 		bl	SystemCoreClockUpdate
 130:main_app.c    **** 
 131:main_app.c    ****     // set ticks between interrupts as 100000
 132:main_app.c    ****     SysTick_Config(100000);
 724              		.loc 1 132 5
 725 029a 1F48     		ldr	r0, .L47
 726 029c FFF7DAFE 		bl	SysTick_Config
 727              	.LBB6:
 728              	.LBB7:
 729              		.file 3 "vendor/cmsis_gcc.h"
   1:vendor/cmsis_gcc.h **** /**************************************************************************//**
   2:vendor/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:vendor/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:vendor/cmsis_gcc.h ****  * @version  V6.0.0
   5:vendor/cmsis_gcc.h ****  * @date     27. July 2024
   6:vendor/cmsis_gcc.h ****  ******************************************************************************/
   7:vendor/cmsis_gcc.h **** /*
   8:vendor/cmsis_gcc.h ****  * Copyright (c) 2009-2023 Arm Limited. All rights reserved.
   9:vendor/cmsis_gcc.h ****  *
  10:vendor/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:vendor/cmsis_gcc.h ****  *
  12:vendor/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:vendor/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:vendor/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:vendor/cmsis_gcc.h ****  *
  16:vendor/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:vendor/cmsis_gcc.h ****  *
  18:vendor/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:vendor/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:vendor/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:vendor/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:vendor/cmsis_gcc.h ****  * limitations under the License.
  23:vendor/cmsis_gcc.h ****  */
  24:vendor/cmsis_gcc.h **** 
  25:vendor/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:vendor/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:vendor/cmsis_gcc.h **** 
  28:vendor/cmsis_gcc.h **** #pragma GCC system_header   /* treat file as system include file */
  29:vendor/cmsis_gcc.h **** 
  30:vendor/cmsis_gcc.h **** #include <arm_acle.h>
  31:vendor/cmsis_gcc.h **** 
  32:vendor/cmsis_gcc.h **** /* Fallback for __has_builtin */
  33:vendor/cmsis_gcc.h **** #ifndef __has_builtin
  34:vendor/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  35:vendor/cmsis_gcc.h **** #endif
  36:vendor/cmsis_gcc.h **** 
  37:vendor/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  38:vendor/cmsis_gcc.h **** #ifndef   __ASM
  39:vendor/cmsis_gcc.h ****   #define __ASM                                  __asm
  40:vendor/cmsis_gcc.h **** #endif
  41:vendor/cmsis_gcc.h **** #ifndef   __INLINE
  42:vendor/cmsis_gcc.h ****   #define __INLINE                               inline
  43:vendor/cmsis_gcc.h **** #endif
  44:vendor/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  45:vendor/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  46:vendor/cmsis_gcc.h **** #endif
  47:vendor/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  48:vendor/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  49:vendor/cmsis_gcc.h **** #endif
  50:vendor/cmsis_gcc.h **** #ifndef   __NO_RETURN
  51:vendor/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  52:vendor/cmsis_gcc.h **** #endif
  53:vendor/cmsis_gcc.h **** #ifndef   CMSIS_DEPRECATED
  54:vendor/cmsis_gcc.h ****   #define CMSIS_DEPRECATED                       __attribute__((deprecated))
  55:vendor/cmsis_gcc.h **** #endif
  56:vendor/cmsis_gcc.h **** #ifndef   __USED
  57:vendor/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  58:vendor/cmsis_gcc.h **** #endif
  59:vendor/cmsis_gcc.h **** #ifndef   __WEAK
  60:vendor/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  61:vendor/cmsis_gcc.h **** #endif
  62:vendor/cmsis_gcc.h **** #ifndef   __PACKED
  63:vendor/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  64:vendor/cmsis_gcc.h **** #endif
  65:vendor/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  66:vendor/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  67:vendor/cmsis_gcc.h **** #endif
  68:vendor/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  69:vendor/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  70:vendor/cmsis_gcc.h **** #endif
  71:vendor/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  72:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic push
  73:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  74:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  75:vendor/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  76:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  77:vendor/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  78:vendor/cmsis_gcc.h **** #endif
  79:vendor/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  80:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic push
  81:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  82:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  83:vendor/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  84:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  85:vendor/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  86:vendor/cmsis_gcc.h **** #endif
  87:vendor/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  88:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic push
  89:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  90:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  91:vendor/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  92:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  93:vendor/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
  94:vendor/cmsis_gcc.h **** #endif
  95:vendor/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
  96:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic push
  97:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  98:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  99:vendor/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 100:vendor/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 101:vendor/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 102:vendor/cmsis_gcc.h **** #endif
 103:vendor/cmsis_gcc.h **** #ifndef   __ALIGNED
 104:vendor/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 105:vendor/cmsis_gcc.h **** #endif
 106:vendor/cmsis_gcc.h **** #ifndef   __RESTRICT
 107:vendor/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 108:vendor/cmsis_gcc.h **** #endif
 109:vendor/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 110:vendor/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 111:vendor/cmsis_gcc.h **** #endif
 112:vendor/cmsis_gcc.h **** #ifndef __NO_INIT
 113:vendor/cmsis_gcc.h ****   #define __NO_INIT                              __attribute__ ((section (".noinit")))
 114:vendor/cmsis_gcc.h **** #endif
 115:vendor/cmsis_gcc.h **** #ifndef __ALIAS
 116:vendor/cmsis_gcc.h ****   #define __ALIAS(x)                             __attribute__ ((alias(x)))
 117:vendor/cmsis_gcc.h **** #endif
 118:vendor/cmsis_gcc.h **** 
 119:vendor/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 120:vendor/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 121:vendor/cmsis_gcc.h ****   Access to dedicated instructions
 122:vendor/cmsis_gcc.h ****   @{
 123:vendor/cmsis_gcc.h **** */
 124:vendor/cmsis_gcc.h **** 
 125:vendor/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 126:vendor/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 127:vendor/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 128:vendor/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 129:vendor/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 130:vendor/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 131:vendor/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 132:vendor/cmsis_gcc.h **** #else
 133:vendor/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 134:vendor/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 135:vendor/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 136:vendor/cmsis_gcc.h **** #endif
 137:vendor/cmsis_gcc.h **** 
 138:vendor/cmsis_gcc.h **** /**
 139:vendor/cmsis_gcc.h ****   \brief   No Operation
 140:vendor/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 141:vendor/cmsis_gcc.h ****  */
 142:vendor/cmsis_gcc.h **** #define __NOP()         __ASM volatile ("nop")
 143:vendor/cmsis_gcc.h **** 
 144:vendor/cmsis_gcc.h **** 
 145:vendor/cmsis_gcc.h **** /**
 146:vendor/cmsis_gcc.h ****   \brief   Wait For Interrupt
 147:vendor/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 148:vendor/cmsis_gcc.h ****  */
 149:vendor/cmsis_gcc.h **** #define __WFI()         __ASM volatile ("wfi":::"memory")
 150:vendor/cmsis_gcc.h **** 
 151:vendor/cmsis_gcc.h **** 
 152:vendor/cmsis_gcc.h **** /**
 153:vendor/cmsis_gcc.h ****   \brief   Wait For Event
 154:vendor/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 155:vendor/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 156:vendor/cmsis_gcc.h ****  */
 157:vendor/cmsis_gcc.h **** #define __WFE()         __ASM volatile ("wfe":::"memory")
 158:vendor/cmsis_gcc.h **** 
 159:vendor/cmsis_gcc.h **** 
 160:vendor/cmsis_gcc.h **** /**
 161:vendor/cmsis_gcc.h ****   \brief   Send Event
 162:vendor/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 163:vendor/cmsis_gcc.h ****  */
 164:vendor/cmsis_gcc.h **** #define __SEV()         __ASM volatile ("sev")
 165:vendor/cmsis_gcc.h **** 
 166:vendor/cmsis_gcc.h **** 
 167:vendor/cmsis_gcc.h **** /**
 168:vendor/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 169:vendor/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 170:vendor/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 171:vendor/cmsis_gcc.h ****            after the instruction has been completed.
 172:vendor/cmsis_gcc.h ****  */
 173:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 174:vendor/cmsis_gcc.h **** {
 175:vendor/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 176:vendor/cmsis_gcc.h **** }
 177:vendor/cmsis_gcc.h **** 
 178:vendor/cmsis_gcc.h **** 
 179:vendor/cmsis_gcc.h **** /**
 180:vendor/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 181:vendor/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 182:vendor/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 183:vendor/cmsis_gcc.h ****  */
 184:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 185:vendor/cmsis_gcc.h **** {
 186:vendor/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 187:vendor/cmsis_gcc.h **** }
 188:vendor/cmsis_gcc.h **** 
 189:vendor/cmsis_gcc.h **** 
 190:vendor/cmsis_gcc.h **** /**
 191:vendor/cmsis_gcc.h ****   \brief   Data Memory Barrier
 192:vendor/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 193:vendor/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 194:vendor/cmsis_gcc.h ****  */
 195:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 196:vendor/cmsis_gcc.h **** {
 197:vendor/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 198:vendor/cmsis_gcc.h **** }
 199:vendor/cmsis_gcc.h **** 
 200:vendor/cmsis_gcc.h **** 
 201:vendor/cmsis_gcc.h **** /**
 202:vendor/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 203:vendor/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 204:vendor/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 205:vendor/cmsis_gcc.h ****   \return               Reversed value
 206:vendor/cmsis_gcc.h ****  */
 207:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 208:vendor/cmsis_gcc.h **** {
 209:vendor/cmsis_gcc.h ****   return __builtin_bswap32(value);
 210:vendor/cmsis_gcc.h **** }
 211:vendor/cmsis_gcc.h **** 
 212:vendor/cmsis_gcc.h **** 
 213:vendor/cmsis_gcc.h **** /**
 214:vendor/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 215:vendor/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 216:vendor/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 217:vendor/cmsis_gcc.h ****   \return               Reversed value
 218:vendor/cmsis_gcc.h ****  */
 219:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 220:vendor/cmsis_gcc.h **** {
 221:vendor/cmsis_gcc.h ****   uint32_t result;
 222:vendor/cmsis_gcc.h **** 
 223:vendor/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 224:vendor/cmsis_gcc.h ****   return (result);
 225:vendor/cmsis_gcc.h **** }
 226:vendor/cmsis_gcc.h **** 
 227:vendor/cmsis_gcc.h **** 
 228:vendor/cmsis_gcc.h **** /**
 229:vendor/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 230:vendor/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 231:vendor/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 232:vendor/cmsis_gcc.h ****   \return               Reversed value
 233:vendor/cmsis_gcc.h ****  */
 234:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 235:vendor/cmsis_gcc.h **** {
 236:vendor/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 237:vendor/cmsis_gcc.h **** }
 238:vendor/cmsis_gcc.h **** 
 239:vendor/cmsis_gcc.h **** 
 240:vendor/cmsis_gcc.h **** /**
 241:vendor/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 242:vendor/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 243:vendor/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 244:vendor/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 245:vendor/cmsis_gcc.h ****   \return               Rotated value
 246:vendor/cmsis_gcc.h ****  */
 247:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 248:vendor/cmsis_gcc.h **** {
 249:vendor/cmsis_gcc.h ****   op2 %= 32U;
 250:vendor/cmsis_gcc.h ****   if (op2 == 0U)
 251:vendor/cmsis_gcc.h ****   {
 252:vendor/cmsis_gcc.h ****     return op1;
 253:vendor/cmsis_gcc.h ****   }
 254:vendor/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 255:vendor/cmsis_gcc.h **** }
 256:vendor/cmsis_gcc.h **** 
 257:vendor/cmsis_gcc.h **** 
 258:vendor/cmsis_gcc.h **** /**
 259:vendor/cmsis_gcc.h ****   \brief   Breakpoint
 260:vendor/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 261:vendor/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 262:vendor/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 263:vendor/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 264:vendor/cmsis_gcc.h ****  */
 265:vendor/cmsis_gcc.h **** #define __BKPT(value) __ASM volatile ("bkpt "#value)
 266:vendor/cmsis_gcc.h **** 
 267:vendor/cmsis_gcc.h **** 
 268:vendor/cmsis_gcc.h **** /**
 269:vendor/cmsis_gcc.h ****   \brief   Reverse bit order of value
 270:vendor/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 271:vendor/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 272:vendor/cmsis_gcc.h ****   \return               Reversed value
 273:vendor/cmsis_gcc.h ****  */
 274:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 275:vendor/cmsis_gcc.h **** {
 276:vendor/cmsis_gcc.h ****   uint32_t result;
 277:vendor/cmsis_gcc.h **** 
 278:vendor/cmsis_gcc.h **** #if (__ARM_ARCH_ISA_THUMB >= 2)
 279:vendor/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 280:vendor/cmsis_gcc.h **** #else
 281:vendor/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 282:vendor/cmsis_gcc.h **** 
 283:vendor/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 284:vendor/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 285:vendor/cmsis_gcc.h ****   {
 286:vendor/cmsis_gcc.h ****     result <<= 1U;
 287:vendor/cmsis_gcc.h ****     result |= value & 1U;
 288:vendor/cmsis_gcc.h ****     s--;
 289:vendor/cmsis_gcc.h ****   }
 290:vendor/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 291:vendor/cmsis_gcc.h **** #endif
 292:vendor/cmsis_gcc.h ****   return (result);
 293:vendor/cmsis_gcc.h **** }
 294:vendor/cmsis_gcc.h **** 
 295:vendor/cmsis_gcc.h **** 
 296:vendor/cmsis_gcc.h **** /**
 297:vendor/cmsis_gcc.h ****   \brief   Count leading zeros
 298:vendor/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 299:vendor/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 300:vendor/cmsis_gcc.h ****   \return             number of leading zeros in value
 301:vendor/cmsis_gcc.h ****  */
 302:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 303:vendor/cmsis_gcc.h **** {
 304:vendor/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 305:vendor/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 306:vendor/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 307:vendor/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 308:vendor/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 309:vendor/cmsis_gcc.h ****      is non-zero".
 310:vendor/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 311:vendor/cmsis_gcc.h ****      single CLZ instruction.
 312:vendor/cmsis_gcc.h ****    */
 313:vendor/cmsis_gcc.h ****   if (value == 0U)
 314:vendor/cmsis_gcc.h ****   {
 315:vendor/cmsis_gcc.h ****     return 32U;
 316:vendor/cmsis_gcc.h ****   }
 317:vendor/cmsis_gcc.h ****   return __builtin_clz(value);
 318:vendor/cmsis_gcc.h **** }
 319:vendor/cmsis_gcc.h **** 
 320:vendor/cmsis_gcc.h **** 
 321:vendor/cmsis_gcc.h **** #if (__ARM_FEATURE_SAT    >= 1)
 322:vendor/cmsis_gcc.h **** /**
 323:vendor/cmsis_gcc.h ****   \brief   Signed Saturate
 324:vendor/cmsis_gcc.h ****   \details Saturates a signed value.
 325:vendor/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 326:vendor/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 327:vendor/cmsis_gcc.h ****   \return             Saturated value
 328:vendor/cmsis_gcc.h ****  */
 329:vendor/cmsis_gcc.h **** #define __SSAT(value, sat) __ssat(value, sat)
 330:vendor/cmsis_gcc.h **** 
 331:vendor/cmsis_gcc.h **** 
 332:vendor/cmsis_gcc.h **** /**
 333:vendor/cmsis_gcc.h ****   \brief   Unsigned Saturate
 334:vendor/cmsis_gcc.h ****   \details Saturates an unsigned value.
 335:vendor/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 336:vendor/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 337:vendor/cmsis_gcc.h ****   \return             Saturated value
 338:vendor/cmsis_gcc.h ****  */
 339:vendor/cmsis_gcc.h **** #define __USAT(value, sat) __usat(value, sat)
 340:vendor/cmsis_gcc.h **** 
 341:vendor/cmsis_gcc.h **** #else /* (__ARM_FEATURE_SAT >= 1) */
 342:vendor/cmsis_gcc.h **** /**
 343:vendor/cmsis_gcc.h ****   \brief   Signed Saturate
 344:vendor/cmsis_gcc.h ****   \details Saturates a signed value.
 345:vendor/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 346:vendor/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 347:vendor/cmsis_gcc.h ****   \return             Saturated value
 348:vendor/cmsis_gcc.h ****  */
 349:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 350:vendor/cmsis_gcc.h **** {
 351:vendor/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 352:vendor/cmsis_gcc.h ****   {
 353:vendor/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 354:vendor/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 355:vendor/cmsis_gcc.h ****     if (val > max)
 356:vendor/cmsis_gcc.h ****     {
 357:vendor/cmsis_gcc.h ****       return (max);
 358:vendor/cmsis_gcc.h ****     }
 359:vendor/cmsis_gcc.h ****     else if (val < min)
 360:vendor/cmsis_gcc.h ****     {
 361:vendor/cmsis_gcc.h ****       return (min);
 362:vendor/cmsis_gcc.h ****     }
 363:vendor/cmsis_gcc.h ****   }
 364:vendor/cmsis_gcc.h ****   return (val);
 365:vendor/cmsis_gcc.h **** }
 366:vendor/cmsis_gcc.h **** 
 367:vendor/cmsis_gcc.h **** 
 368:vendor/cmsis_gcc.h **** /**
 369:vendor/cmsis_gcc.h ****   \brief   Unsigned Saturate
 370:vendor/cmsis_gcc.h ****   \details Saturates an unsigned value.
 371:vendor/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 372:vendor/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 373:vendor/cmsis_gcc.h ****   \return             Saturated value
 374:vendor/cmsis_gcc.h ****  */
 375:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 376:vendor/cmsis_gcc.h **** {
 377:vendor/cmsis_gcc.h ****   if (sat <= 31U)
 378:vendor/cmsis_gcc.h ****   {
 379:vendor/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 380:vendor/cmsis_gcc.h ****     if (val > (int32_t)max)
 381:vendor/cmsis_gcc.h ****     {
 382:vendor/cmsis_gcc.h ****       return (max);
 383:vendor/cmsis_gcc.h ****     }
 384:vendor/cmsis_gcc.h ****     else if (val < 0)
 385:vendor/cmsis_gcc.h ****     {
 386:vendor/cmsis_gcc.h ****       return (0U);
 387:vendor/cmsis_gcc.h ****     }
 388:vendor/cmsis_gcc.h ****   }
 389:vendor/cmsis_gcc.h ****   return ((uint32_t)val);
 390:vendor/cmsis_gcc.h **** }
 391:vendor/cmsis_gcc.h **** #endif /* (__ARM_FEATURE_SAT >= 1) */
 392:vendor/cmsis_gcc.h **** 
 393:vendor/cmsis_gcc.h **** 
 394:vendor/cmsis_gcc.h **** #if (__ARM_FEATURE_LDREX >= 1)
 395:vendor/cmsis_gcc.h **** /**
 396:vendor/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 397:vendor/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 398:vendor/cmsis_gcc.h ****  */
 399:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 400:vendor/cmsis_gcc.h **** {
 401:vendor/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 402:vendor/cmsis_gcc.h **** }
 403:vendor/cmsis_gcc.h **** 
 404:vendor/cmsis_gcc.h **** 
 405:vendor/cmsis_gcc.h **** /**
 406:vendor/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 407:vendor/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 408:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 409:vendor/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 410:vendor/cmsis_gcc.h ****  */
 411:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 412:vendor/cmsis_gcc.h **** {
 413:vendor/cmsis_gcc.h ****   uint32_t result;
 414:vendor/cmsis_gcc.h **** 
 415:vendor/cmsis_gcc.h ****   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 416:vendor/cmsis_gcc.h ****   return ((uint8_t) result);    /* Add explicit type cast here */
 417:vendor/cmsis_gcc.h **** }
 418:vendor/cmsis_gcc.h **** 
 419:vendor/cmsis_gcc.h **** 
 420:vendor/cmsis_gcc.h **** /**
 421:vendor/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 422:vendor/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 423:vendor/cmsis_gcc.h ****   \param [in]  value  Value to store
 424:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 425:vendor/cmsis_gcc.h ****   \return          0  Function succeeded
 426:vendor/cmsis_gcc.h ****   \return          1  Function failed
 427:vendor/cmsis_gcc.h ****  */
 428:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 429:vendor/cmsis_gcc.h **** {
 430:vendor/cmsis_gcc.h ****   uint32_t result;
 431:vendor/cmsis_gcc.h **** 
 432:vendor/cmsis_gcc.h ****   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 433:vendor/cmsis_gcc.h ****   return (result);
 434:vendor/cmsis_gcc.h **** }
 435:vendor/cmsis_gcc.h **** #endif /* (__ARM_FEATURE_LDREX >= 1) */
 436:vendor/cmsis_gcc.h **** 
 437:vendor/cmsis_gcc.h **** 
 438:vendor/cmsis_gcc.h **** #if (__ARM_FEATURE_LDREX >= 2)
 439:vendor/cmsis_gcc.h **** /**
 440:vendor/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 441:vendor/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 442:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 443:vendor/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 444:vendor/cmsis_gcc.h ****  */
 445:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 446:vendor/cmsis_gcc.h **** {
 447:vendor/cmsis_gcc.h ****   uint32_t result;
 448:vendor/cmsis_gcc.h **** 
 449:vendor/cmsis_gcc.h ****   __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 450:vendor/cmsis_gcc.h ****   return ((uint16_t)result);    /* Add explicit type cast here */
 451:vendor/cmsis_gcc.h **** }
 452:vendor/cmsis_gcc.h **** 
 453:vendor/cmsis_gcc.h **** 
 454:vendor/cmsis_gcc.h **** /**
 455:vendor/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 456:vendor/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 457:vendor/cmsis_gcc.h ****   \param [in]  value  Value to store
 458:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 459:vendor/cmsis_gcc.h ****   \return          0  Function succeeded
 460:vendor/cmsis_gcc.h ****   \return          1  Function failed
 461:vendor/cmsis_gcc.h ****  */
 462:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 463:vendor/cmsis_gcc.h **** {
 464:vendor/cmsis_gcc.h ****   uint32_t result;
 465:vendor/cmsis_gcc.h **** 
 466:vendor/cmsis_gcc.h ****   __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 467:vendor/cmsis_gcc.h ****   return (result);
 468:vendor/cmsis_gcc.h **** }
 469:vendor/cmsis_gcc.h **** #endif /* (__ARM_FEATURE_LDREX >= 2) */
 470:vendor/cmsis_gcc.h **** 
 471:vendor/cmsis_gcc.h **** 
 472:vendor/cmsis_gcc.h **** #if (__ARM_FEATURE_LDREX >= 4)
 473:vendor/cmsis_gcc.h **** /**
 474:vendor/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 475:vendor/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 476:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 477:vendor/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 478:vendor/cmsis_gcc.h ****  */
 479:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 480:vendor/cmsis_gcc.h **** {
 481:vendor/cmsis_gcc.h ****   uint32_t result;
 482:vendor/cmsis_gcc.h **** 
 483:vendor/cmsis_gcc.h ****   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 484:vendor/cmsis_gcc.h ****   return (result);
 485:vendor/cmsis_gcc.h **** }
 486:vendor/cmsis_gcc.h **** 
 487:vendor/cmsis_gcc.h **** 
 488:vendor/cmsis_gcc.h **** /**
 489:vendor/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 490:vendor/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 491:vendor/cmsis_gcc.h ****   \param [in]  value  Value to store
 492:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 493:vendor/cmsis_gcc.h ****   \return          0  Function succeeded
 494:vendor/cmsis_gcc.h ****   \return          1  Function failed
 495:vendor/cmsis_gcc.h ****  */
 496:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 497:vendor/cmsis_gcc.h **** {
 498:vendor/cmsis_gcc.h ****   uint32_t result;
 499:vendor/cmsis_gcc.h **** 
 500:vendor/cmsis_gcc.h ****   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 501:vendor/cmsis_gcc.h ****   return (result);
 502:vendor/cmsis_gcc.h **** }
 503:vendor/cmsis_gcc.h **** #endif /* (__ARM_FEATURE_LDREX >= 4) */
 504:vendor/cmsis_gcc.h **** 
 505:vendor/cmsis_gcc.h **** 
 506:vendor/cmsis_gcc.h **** #if (__ARM_ARCH_ISA_THUMB >= 2)
 507:vendor/cmsis_gcc.h **** /**
 508:vendor/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 509:vendor/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 510:vendor/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 511:vendor/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 512:vendor/cmsis_gcc.h ****   \return               Rotated value
 513:vendor/cmsis_gcc.h ****  */
 514:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 515:vendor/cmsis_gcc.h **** {
 516:vendor/cmsis_gcc.h ****   uint32_t result;
 517:vendor/cmsis_gcc.h **** 
 518:vendor/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : "=r" (result) : "r" (value));
 519:vendor/cmsis_gcc.h ****   return (result);
 520:vendor/cmsis_gcc.h **** }
 521:vendor/cmsis_gcc.h **** 
 522:vendor/cmsis_gcc.h **** 
 523:vendor/cmsis_gcc.h **** /**
 524:vendor/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 525:vendor/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 526:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 527:vendor/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 528:vendor/cmsis_gcc.h ****  */
 529:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 530:vendor/cmsis_gcc.h **** {
 531:vendor/cmsis_gcc.h ****   uint32_t result;
 532:vendor/cmsis_gcc.h **** 
 533:vendor/cmsis_gcc.h ****   __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 534:vendor/cmsis_gcc.h ****   return ((uint8_t)result);    /* Add explicit type cast here */
 535:vendor/cmsis_gcc.h **** }
 536:vendor/cmsis_gcc.h **** 
 537:vendor/cmsis_gcc.h **** 
 538:vendor/cmsis_gcc.h **** /**
 539:vendor/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 540:vendor/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 541:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 542:vendor/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 543:vendor/cmsis_gcc.h ****  */
 544:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 545:vendor/cmsis_gcc.h **** {
 546:vendor/cmsis_gcc.h ****   uint32_t result;
 547:vendor/cmsis_gcc.h **** 
 548:vendor/cmsis_gcc.h ****   __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 549:vendor/cmsis_gcc.h ****   return ((uint16_t)result);    /* Add explicit type cast here */
 550:vendor/cmsis_gcc.h **** }
 551:vendor/cmsis_gcc.h **** 
 552:vendor/cmsis_gcc.h **** 
 553:vendor/cmsis_gcc.h **** /**
 554:vendor/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 555:vendor/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 556:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 557:vendor/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 558:vendor/cmsis_gcc.h ****  */
 559:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 560:vendor/cmsis_gcc.h **** {
 561:vendor/cmsis_gcc.h ****   uint32_t result;
 562:vendor/cmsis_gcc.h **** 
 563:vendor/cmsis_gcc.h ****   __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 564:vendor/cmsis_gcc.h ****   return (result);
 565:vendor/cmsis_gcc.h **** }
 566:vendor/cmsis_gcc.h **** 
 567:vendor/cmsis_gcc.h **** 
 568:vendor/cmsis_gcc.h **** /**
 569:vendor/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 570:vendor/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 571:vendor/cmsis_gcc.h ****   \param [in]  value  Value to store
 572:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 573:vendor/cmsis_gcc.h ****  */
 574:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 575:vendor/cmsis_gcc.h **** {
 576:vendor/cmsis_gcc.h ****   __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 577:vendor/cmsis_gcc.h **** }
 578:vendor/cmsis_gcc.h **** 
 579:vendor/cmsis_gcc.h **** 
 580:vendor/cmsis_gcc.h **** /**
 581:vendor/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 582:vendor/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 583:vendor/cmsis_gcc.h ****   \param [in]  value  Value to store
 584:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 585:vendor/cmsis_gcc.h ****  */
 586:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 587:vendor/cmsis_gcc.h **** {
 588:vendor/cmsis_gcc.h ****   __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 589:vendor/cmsis_gcc.h **** }
 590:vendor/cmsis_gcc.h **** 
 591:vendor/cmsis_gcc.h **** 
 592:vendor/cmsis_gcc.h **** /**
 593:vendor/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 594:vendor/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 595:vendor/cmsis_gcc.h ****   \param [in]  value  Value to store
 596:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 597:vendor/cmsis_gcc.h ****  */
 598:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 599:vendor/cmsis_gcc.h **** {
 600:vendor/cmsis_gcc.h ****   __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 601:vendor/cmsis_gcc.h **** }
 602:vendor/cmsis_gcc.h **** #endif /* (__ARM_ARCH_ISA_THUMB >= 2) */
 603:vendor/cmsis_gcc.h **** 
 604:vendor/cmsis_gcc.h **** 
 605:vendor/cmsis_gcc.h **** #if (__ARM_ARCH >= 8)
 606:vendor/cmsis_gcc.h **** /**
 607:vendor/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 608:vendor/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 609:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 610:vendor/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 611:vendor/cmsis_gcc.h ****  */
 612:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 613:vendor/cmsis_gcc.h **** {
 614:vendor/cmsis_gcc.h ****   uint32_t result;
 615:vendor/cmsis_gcc.h **** 
 616:vendor/cmsis_gcc.h ****   __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 617:vendor/cmsis_gcc.h ****   return ((uint8_t)result);    /* Add explicit type cast here */
 618:vendor/cmsis_gcc.h **** }
 619:vendor/cmsis_gcc.h **** 
 620:vendor/cmsis_gcc.h **** 
 621:vendor/cmsis_gcc.h **** /**
 622:vendor/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 623:vendor/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 624:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 625:vendor/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 626:vendor/cmsis_gcc.h ****  */
 627:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 628:vendor/cmsis_gcc.h **** {
 629:vendor/cmsis_gcc.h ****   uint32_t result;
 630:vendor/cmsis_gcc.h **** 
 631:vendor/cmsis_gcc.h ****   __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 632:vendor/cmsis_gcc.h ****   return ((uint16_t)result);    /* Add explicit type cast here */
 633:vendor/cmsis_gcc.h **** }
 634:vendor/cmsis_gcc.h **** 
 635:vendor/cmsis_gcc.h **** 
 636:vendor/cmsis_gcc.h **** /**
 637:vendor/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 638:vendor/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 639:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 640:vendor/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 641:vendor/cmsis_gcc.h ****  */
 642:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 643:vendor/cmsis_gcc.h **** {
 644:vendor/cmsis_gcc.h ****   uint32_t result;
 645:vendor/cmsis_gcc.h **** 
 646:vendor/cmsis_gcc.h ****   __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 647:vendor/cmsis_gcc.h ****   return (result);
 648:vendor/cmsis_gcc.h **** }
 649:vendor/cmsis_gcc.h **** 
 650:vendor/cmsis_gcc.h **** 
 651:vendor/cmsis_gcc.h **** /**
 652:vendor/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 653:vendor/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 654:vendor/cmsis_gcc.h ****   \param [in]  value  Value to store
 655:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 656:vendor/cmsis_gcc.h ****  */
 657:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 658:vendor/cmsis_gcc.h **** {
 659:vendor/cmsis_gcc.h ****   __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 660:vendor/cmsis_gcc.h **** }
 661:vendor/cmsis_gcc.h **** 
 662:vendor/cmsis_gcc.h **** 
 663:vendor/cmsis_gcc.h **** /**
 664:vendor/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 665:vendor/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 666:vendor/cmsis_gcc.h ****   \param [in]  value  Value to store
 667:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 668:vendor/cmsis_gcc.h ****  */
 669:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 670:vendor/cmsis_gcc.h **** {
 671:vendor/cmsis_gcc.h ****   __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 672:vendor/cmsis_gcc.h **** }
 673:vendor/cmsis_gcc.h **** 
 674:vendor/cmsis_gcc.h **** 
 675:vendor/cmsis_gcc.h **** /**
 676:vendor/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 677:vendor/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 678:vendor/cmsis_gcc.h ****   \param [in]  value  Value to store
 679:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 680:vendor/cmsis_gcc.h ****  */
 681:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 682:vendor/cmsis_gcc.h **** {
 683:vendor/cmsis_gcc.h ****   __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 684:vendor/cmsis_gcc.h **** }
 685:vendor/cmsis_gcc.h **** 
 686:vendor/cmsis_gcc.h **** 
 687:vendor/cmsis_gcc.h **** /**
 688:vendor/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 689:vendor/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 690:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 691:vendor/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 692:vendor/cmsis_gcc.h ****  */
 693:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 694:vendor/cmsis_gcc.h **** {
 695:vendor/cmsis_gcc.h ****   uint32_t result;
 696:vendor/cmsis_gcc.h **** 
 697:vendor/cmsis_gcc.h ****   __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 698:vendor/cmsis_gcc.h ****   return ((uint8_t)result);    /* Add explicit type cast here */
 699:vendor/cmsis_gcc.h **** }
 700:vendor/cmsis_gcc.h **** 
 701:vendor/cmsis_gcc.h **** 
 702:vendor/cmsis_gcc.h **** /**
 703:vendor/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 704:vendor/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 705:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 706:vendor/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 707:vendor/cmsis_gcc.h ****  */
 708:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 709:vendor/cmsis_gcc.h **** {
 710:vendor/cmsis_gcc.h ****   uint32_t result;
 711:vendor/cmsis_gcc.h **** 
 712:vendor/cmsis_gcc.h ****   __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 713:vendor/cmsis_gcc.h ****   return ((uint16_t)result);    /* Add explicit type cast here */
 714:vendor/cmsis_gcc.h **** }
 715:vendor/cmsis_gcc.h **** 
 716:vendor/cmsis_gcc.h **** 
 717:vendor/cmsis_gcc.h **** /**
 718:vendor/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 719:vendor/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 720:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 721:vendor/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 722:vendor/cmsis_gcc.h ****  */
 723:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 724:vendor/cmsis_gcc.h **** {
 725:vendor/cmsis_gcc.h ****   uint32_t result;
 726:vendor/cmsis_gcc.h **** 
 727:vendor/cmsis_gcc.h ****   __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 728:vendor/cmsis_gcc.h ****   return (result);
 729:vendor/cmsis_gcc.h **** }
 730:vendor/cmsis_gcc.h **** 
 731:vendor/cmsis_gcc.h **** 
 732:vendor/cmsis_gcc.h **** /**
 733:vendor/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 734:vendor/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 735:vendor/cmsis_gcc.h ****   \param [in]  value  Value to store
 736:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 737:vendor/cmsis_gcc.h ****   \return          0  Function succeeded
 738:vendor/cmsis_gcc.h ****   \return          1  Function failed
 739:vendor/cmsis_gcc.h ****  */
 740:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 741:vendor/cmsis_gcc.h **** {
 742:vendor/cmsis_gcc.h ****   uint32_t result;
 743:vendor/cmsis_gcc.h **** 
 744:vendor/cmsis_gcc.h ****   __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 745:vendor/cmsis_gcc.h ****   return (result);
 746:vendor/cmsis_gcc.h **** }
 747:vendor/cmsis_gcc.h **** 
 748:vendor/cmsis_gcc.h **** 
 749:vendor/cmsis_gcc.h **** /**
 750:vendor/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 751:vendor/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 752:vendor/cmsis_gcc.h ****   \param [in]  value  Value to store
 753:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 754:vendor/cmsis_gcc.h ****   \return          0  Function succeeded
 755:vendor/cmsis_gcc.h ****   \return          1  Function failed
 756:vendor/cmsis_gcc.h ****  */
 757:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 758:vendor/cmsis_gcc.h **** {
 759:vendor/cmsis_gcc.h ****   uint32_t result;
 760:vendor/cmsis_gcc.h **** 
 761:vendor/cmsis_gcc.h ****   __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 762:vendor/cmsis_gcc.h ****   return (result);
 763:vendor/cmsis_gcc.h **** }
 764:vendor/cmsis_gcc.h **** 
 765:vendor/cmsis_gcc.h **** 
 766:vendor/cmsis_gcc.h **** /**
 767:vendor/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 768:vendor/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 769:vendor/cmsis_gcc.h ****   \param [in]  value  Value to store
 770:vendor/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 771:vendor/cmsis_gcc.h ****   \return          0  Function succeeded
 772:vendor/cmsis_gcc.h ****   \return          1  Function failed
 773:vendor/cmsis_gcc.h ****  */
 774:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 775:vendor/cmsis_gcc.h **** {
 776:vendor/cmsis_gcc.h ****   uint32_t result;
 777:vendor/cmsis_gcc.h **** 
 778:vendor/cmsis_gcc.h ****   __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memor
 779:vendor/cmsis_gcc.h ****   return (result);
 780:vendor/cmsis_gcc.h **** }
 781:vendor/cmsis_gcc.h **** 
 782:vendor/cmsis_gcc.h **** #endif /* (__ARM_ARCH >= 8) */
 783:vendor/cmsis_gcc.h **** 
 784:vendor/cmsis_gcc.h **** /** @}*/ /* end of group CMSIS_Core_InstructionInterface */
 785:vendor/cmsis_gcc.h **** 
 786:vendor/cmsis_gcc.h **** 
 787:vendor/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 788:vendor/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 789:vendor/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 790:vendor/cmsis_gcc.h ****   @{
 791:vendor/cmsis_gcc.h ****  */
 792:vendor/cmsis_gcc.h **** 
 793:vendor/cmsis_gcc.h **** /**
 794:vendor/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 795:vendor/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 796:vendor/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 797:vendor/cmsis_gcc.h ****  */
 798:vendor/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 799:vendor/cmsis_gcc.h **** {
 800:vendor/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 730              		.loc 3 800 3
 731              		.syntax unified
 732              	@ 800 "vendor/cmsis_gcc.h" 1
 733 02a0 62B6     		cpsie i
 734              	@ 0 "" 2
 801:vendor/cmsis_gcc.h **** }
 735              		.loc 3 801 1
 736              		.thumb
 737              		.syntax unified
 738 02a2 00BF     		nop
 739              	.LBE7:
 740              	.LBE6:
 133:main_app.c    ****     // enable interrupts
 134:main_app.c    ****     __enable_irq();
 135:main_app.c    **** 
 136:main_app.c    ****     GPIOB_init();
 741              		.loc 1 136 5
 742 02a4 FFF7FEFF 		bl	GPIOB_init
 137:main_app.c    ****     USART3_init();
 743              		.loc 1 137 5
 744 02a8 FFF7FEFF 		bl	USART3_init
 138:main_app.c    ****     SPI_init();
 745              		.loc 1 138 5
 746 02ac FFF7FEFF 		bl	SPI_init
 139:main_app.c    ****     DMA2_channel_init();
 747              		.loc 1 139 5
 748 02b0 FFF7FEFF 		bl	DMA2_channel_init
 140:main_app.c    **** 
 141:main_app.c    ****     exti_init();
 749              		.loc 1 141 5
 750 02b4 FFF7FEFF 		bl	exti_init
 142:main_app.c    **** 
 143:main_app.c    ****     init_BKPSRAM();
 751              		.loc 1 143 5
 752 02b8 FFF7FEFF 		bl	init_BKPSRAM
 144:main_app.c    **** 
 145:main_app.c    ****     // using_dma();
 146:main_app.c    ****     //using_spi();
 147:main_app.c    **** 
 148:main_app.c    ****     //can reset counter after so many seconds:
 149:main_app.c    ****     // if boot_test is random (may be at initial boot), initialize to known value (0x12345)
 150:main_app.c    ****     if (boot_test != 0x12345)
 753              		.loc 1 150 19
 754 02bc 174B     		ldr	r3, .L47+4
 755 02be 1B68     		ldr	r3, [r3]
 756              		.loc 1 150 8
 757 02c0 174A     		ldr	r2, .L47+8
 758 02c2 9342     		cmp	r3, r2
 759 02c4 06D0     		beq	.L44
 151:main_app.c    ****     {
 152:main_app.c    ****         boot_test = 0x12345;
 760              		.loc 1 152 19
 761 02c6 154B     		ldr	r3, .L47+4
 762 02c8 154A     		ldr	r2, .L47+8
 763 02ca 1A60     		str	r2, [r3]
 153:main_app.c    ****         counter = 0;
 764              		.loc 1 153 17
 765 02cc 154B     		ldr	r3, .L47+12
 766 02ce 0022     		movs	r2, #0
 767 02d0 1A60     		str	r2, [r3]
 768 02d2 04E0     		b	.L46
 769              	.L44:
 154:main_app.c    ****         // if boot_test is 0x12345, boot has been attemped since flashing, increment boot count
 155:main_app.c    ****     }
 156:main_app.c    ****     else
 157:main_app.c    ****     {
 158:main_app.c    ****         counter += 1;
 770              		.loc 1 158 17
 771 02d4 134B     		ldr	r3, .L47+12
 772 02d6 1B68     		ldr	r3, [r3]
 773 02d8 0133     		adds	r3, r3, #1
 774 02da 124A     		ldr	r2, .L47+12
 775 02dc 1360     		str	r3, [r2]
 776              	.L46:
 777              	.LBB8:
 159:main_app.c    ****     }
 160:main_app.c    **** 
 161:main_app.c    ****     while (1)
 162:main_app.c    ****     {
 163:main_app.c    ****         volatile float f = divider(1, 2);
 778              		.loc 1 163 28
 779 02de 0221     		movs	r1, #2
 780 02e0 0120     		movs	r0, #1
 781 02e2 FFF7FEFF 		bl	divider
 782 02e6 0346     		mov	r3, r0
 783              		.loc 1 163 24 discriminator 1
 784 02e8 1846     		mov	r0, r3
 785 02ea FFF7FEFF 		bl	__aeabi_ui2f
 786 02ee 0346     		mov	r3, r0
 787 02f0 3B60     		str	r3, [r7]	@ float
 164:main_app.c    ****         char z = '0';
 788              		.loc 1 164 14
 789 02f2 3023     		movs	r3, #48
 790 02f4 FB71     		strb	r3, [r7, #7]
 165:main_app.c    ****         // char z = getchar();
 166:main_app.c    ****         delay_ms(500);
 791              		.loc 1 166 9
 792 02f6 4FF4FA70 		mov	r0, #500
 793 02fa FFF7FEFF 		bl	delay_ms
 167:main_app.c    ****         printf("Hello \r\n");
 794              		.loc 1 167 9
 795 02fe 0A48     		ldr	r0, .L47+16
 796 0300 FFF7FEFF 		bl	puts
 168:main_app.c    ****         printf("%i \r\n", counter);
 797              		.loc 1 168 9
 798 0304 074B     		ldr	r3, .L47+12
 799 0306 1B68     		ldr	r3, [r3]
 800 0308 1946     		mov	r1, r3
 801 030a 0848     		ldr	r0, .L47+20
 802 030c FFF7FEFF 		bl	printf
 169:main_app.c    ****         blink();
 803              		.loc 1 169 9 discriminator 1
 804 0310 FFF7FEFF 		bl	blink
 805              	.LBE8:
 162:main_app.c    ****         volatile float f = divider(1, 2);
 806              		.loc 1 162 5
 807 0314 00BF     		nop
 808 0316 E2E7     		b	.L46
 809              	.L48:
 810              		.align	2
 811              	.L47:
 812 0318 A0860100 		.word	100000
 813 031c 00000000 		.word	boot_test
 814 0320 45230100 		.word	74565
 815 0324 00000000 		.word	counter
 816 0328 0C000000 		.word	.LC1
 817 032c 14000000 		.word	.LC2
 818              		.cfi_endproc
 819              	.LFE202:
 821              	.Letext0:
 822              		.file 4 "/home/ben/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-eabi/arm-none-eabi/include/machine/
 823              		.file 5 "/home/ben/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-eabi/arm-none-eabi/include/sys/_std
 824              		.file 6 "vendor/stm32f767xx.h"
 825              		.file 7 "src/exti_gpio_irq.h"
 826              		.file 8 "src/dma.h"
 827              		.file 9 "src/spi.h"
 828              		.file 10 "src/usart.h"
 829              		.file 11 "/home/ben/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-eabi/arm-none-eabi/include/stdio.h
 830              		.file 12 "vendor/system_stm32f7xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main_app.c
     /tmp/cc8RnFzA.s:18     .text:00000000 $t
     /tmp/cc8RnFzA.s:23     .text:00000000 __NVIC_SetPriority
     /tmp/cc8RnFzA.s:92     .text:0000004c $d
     /tmp/cc8RnFzA.s:97     .text:00000054 $t
     /tmp/cc8RnFzA.s:102    .text:00000054 SysTick_Config
     /tmp/cc8RnFzA.s:162    .text:00000094 $d
     /tmp/cc8RnFzA.s:171    .bss:00000000 ticks
     /tmp/cc8RnFzA.s:168    .bss:00000000 $d
     /tmp/cc8RnFzA.s:178    .data:00000000 datavar
     /tmp/cc8RnFzA.s:175    .data:00000000 $d
     /tmp/cc8RnFzA.s:181    .text:00000098 $t
     /tmp/cc8RnFzA.s:187    .text:00000098 systick_handler
     /tmp/cc8RnFzA.s:217    .text:000000b0 $d
     /tmp/cc8RnFzA.s:221    .text:000000b4 $t
     /tmp/cc8RnFzA.s:227    .text:000000b4 delay_ms
     /tmp/cc8RnFzA.s:290    .text:000000f8 $d
     /tmp/cc8RnFzA.s:294    .text:000000fc $t
     /tmp/cc8RnFzA.s:300    .text:000000fc blink
     /tmp/cc8RnFzA.s:331    .text:00000114 $d
     /tmp/cc8RnFzA.s:335    .text:00000118 $t
     /tmp/cc8RnFzA.s:341    .text:00000118 clock_init
     /tmp/cc8RnFzA.s:471    .text:000001c8 $d
     /tmp/cc8RnFzA.s:479    .text:000001dc $t
     /tmp/cc8RnFzA.s:485    .text:000001dc GPIOB_init
     /tmp/cc8RnFzA.s:523    .text:00000200 $d
     /tmp/cc8RnFzA.s:529    .rodata:00000000 $d
     /tmp/cc8RnFzA.s:533    .text:00000208 $t
     /tmp/cc8RnFzA.s:539    .text:00000208 using_spi
     /tmp/cc8RnFzA.s:577    .text:00000230 $d
     /tmp/cc8RnFzA.s:582    .text:00000238 $t
     /tmp/cc8RnFzA.s:588    .text:00000238 init_BKPSRAM
     /tmp/cc8RnFzA.s:633    .text:00000268 $d
     /tmp/cc8RnFzA.s:643    .noinit:00000000 boot_test
     /tmp/cc8RnFzA.s:640    .noinit:00000000 $d
     /tmp/cc8RnFzA.s:649    .noinit:00000004 counter
     /tmp/cc8RnFzA.s:652    .text:00000270 $t
     /tmp/cc8RnFzA.s:658    .text:00000270 divider
     /tmp/cc8RnFzA.s:706    .text:0000028c main
     /tmp/cc8RnFzA.s:812    .text:00000318 $d
                           .group:00000000 wm4.0.b9144c81caf0c2c1ee9424d16d32a8e9
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.features.h.33.d554620bb17bd3b714c3fb5c268772bc
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.newlib.h.7.d92c3fcef74a31e0d5308877d46e9786
                           .group:00000000 wm4.ieeefp.h.77.b6f5ce903562917fbd9193ee87d4fa47
                           .group:00000000 wm4.config.h.224.88344135d9de3e7ea139102cd6493448
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.185.cbb642e1ccd385e8aa504b15cb7fb086
                           .group:00000000 wm4.cdefs.h.49.56fd742369e655e7e8a7e365e706e208
                           .group:00000000 wm4.stddef.h.39.6817658cc6bc4c7c8354d2009e4a5777
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.390de510207922ae4defb78c0f450fc3
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.reent.h.463.ea06f504d21c8c4258c6fe87e50d6d65
                           .group:00000000 wm4.stdio.h.67.0cf8a9c281ab0b348aef5c02e7e48825
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.87.408e5d973372126daeef099c555b2753
                           .group:00000000 wm4.stm32f767xx.h.34.d0ba5a0a33e572d9abba2a69be3f047a
                           .group:00000000 wm4.cmsis_version.h.30.d128735bf87720f7436b74fefeb5043c
                           .group:00000000 wm4.core_cm7.h.67.c4fc7696682f9e831eac3dd54a48d9d5
                           .group:00000000 wm4.arm_acle.h.28.a0697f530ff2dbf8c463bef049b82760
                           .group:00000000 wm4.cmsis_gcc.h.39.eba7438bc45fd1a6e6376b63ffe44436
                           .group:00000000 wm4.cmsis_gcc_m.h.24.23847e2e684820077e61f12ca9bb647d
                           .group:00000000 wm4.core_cm7.h.182.bdcc4e50bcd2482b3ee7b3848e1c3d57
                           .group:00000000 wm4.armv7m_mpu.h.24.6a1cc6ec2305a465645532db695e36b9
                           .group:00000000 wm4.armv7m_cachel1.h.24.936dd92d6e204a8d0b17d5e4ea4a356e
                           .group:00000000 wm4.stm32f767xx.h.1291.96cbc8c974f635ff90f2e384fa7968c7
                           .group:00000000 wm4.stm32f7xx.h.38.be673aa88a778c9c25ecd83f19170569
                           .group:00000000 wm4.stm32f7xx.h.166.1a4552c215c7df501f12e87834ed026b

UNDEFINED SYMBOLS
SPI_write
SystemCoreClockUpdate
USART3_init
SPI_init
DMA2_channel_init
exti_init
__aeabi_ui2f
puts
printf
