
spi_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080029d8  080029d8  000129d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a4c  08002a4c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a4c  08002a4c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a4c  08002a4c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a50  08002a50  00012a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000005c  08002ab0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08002ab0  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007ffe  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001595  00000000  00000000  000280c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  00029660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000061b  00000000  00000000  00029e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000164bc  00000000  00000000  0002a473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009689  00000000  00000000  0004092f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081cb8  00000000  00000000  00049fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024f0  00000000  00000000  000cbc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000ce160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080029c0 	.word	0x080029c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080029c0 	.word	0x080029c0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa5a 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f828 	bl	80001a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8be 	bl	80002d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f892 	bl	8000284 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000160:	f000 f85e 	bl	8000220 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(200);
 8000164:	20c8      	movs	r0, #200	; 0xc8
 8000166:	f000 fab1 	bl	80006cc <HAL_Delay>

	sprintf(RX_Data, "SPI Transfer \r\n\n\n\n\n");
 800016a:	490b      	ldr	r1, [pc, #44]	; (8000198 <main+0x4c>)
 800016c:	480b      	ldr	r0, [pc, #44]	; (800019c <main+0x50>)
 800016e:	f001 ff75 	bl	800205c <siprintf>
	HAL_UART_Transmit(&huart1, RX_Data, sizeof(RX_Data), 100);
 8000172:	2364      	movs	r3, #100	; 0x64
 8000174:	2280      	movs	r2, #128	; 0x80
 8000176:	4909      	ldr	r1, [pc, #36]	; (800019c <main+0x50>)
 8000178:	4809      	ldr	r0, [pc, #36]	; (80001a0 <main+0x54>)
 800017a:	f001 fdef 	bl	8001d5c <HAL_UART_Transmit>

	HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 100);
 800017e:	2364      	movs	r3, #100	; 0x64
 8000180:	2280      	movs	r2, #128	; 0x80
 8000182:	4906      	ldr	r1, [pc, #24]	; (800019c <main+0x50>)
 8000184:	4807      	ldr	r0, [pc, #28]	; (80001a4 <main+0x58>)
 8000186:	f001 f9d9 	bl	800153c <HAL_SPI_Receive>
	HAL_UART_Transmit(&huart1, RX_Data, sizeof(RX_Data), 100);
 800018a:	2364      	movs	r3, #100	; 0x64
 800018c:	2280      	movs	r2, #128	; 0x80
 800018e:	4903      	ldr	r1, [pc, #12]	; (800019c <main+0x50>)
 8000190:	4803      	ldr	r0, [pc, #12]	; (80001a0 <main+0x54>)
 8000192:	f001 fde3 	bl	8001d5c <HAL_UART_Transmit>
  {
 8000196:	e7e5      	b.n	8000164 <main+0x18>
 8000198:	080029d8 	.word	0x080029d8
 800019c:	20000118 	.word	0x20000118
 80001a0:	200000d0 	.word	0x200000d0
 80001a4:	20000078 	.word	0x20000078

080001a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b090      	sub	sp, #64	; 0x40
 80001ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	2228      	movs	r2, #40	; 0x28
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f001 ff70 	bl	800209c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]
 80001c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ca:	2302      	movs	r3, #2
 80001cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ce:	2301      	movs	r3, #1
 80001d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d2:	2310      	movs	r3, #16
 80001d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001d6:	2300      	movs	r3, #0
 80001d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 fd18 	bl	8000c14 <HAL_RCC_OscConfig>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ea:	f000 f8b5 	bl	8000358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ee:	230f      	movs	r3, #15
 80001f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001f2:	2300      	movs	r3, #0
 80001f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f000 ff86 	bl	8001118 <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000212:	f000 f8a1 	bl	8000358 <Error_Handler>
  }
}
 8000216:	bf00      	nop
 8000218:	3740      	adds	r7, #64	; 0x40
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000224:	4b15      	ldr	r3, [pc, #84]	; (800027c <MX_SPI1_Init+0x5c>)
 8000226:	4a16      	ldr	r2, [pc, #88]	; (8000280 <MX_SPI1_Init+0x60>)
 8000228:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800022a:	4b14      	ldr	r3, [pc, #80]	; (800027c <MX_SPI1_Init+0x5c>)
 800022c:	2200      	movs	r2, #0
 800022e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000230:	4b12      	ldr	r3, [pc, #72]	; (800027c <MX_SPI1_Init+0x5c>)
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000236:	4b11      	ldr	r3, [pc, #68]	; (800027c <MX_SPI1_Init+0x5c>)
 8000238:	2200      	movs	r2, #0
 800023a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800023c:	4b0f      	ldr	r3, [pc, #60]	; (800027c <MX_SPI1_Init+0x5c>)
 800023e:	2200      	movs	r2, #0
 8000240:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <MX_SPI1_Init+0x5c>)
 8000244:	2200      	movs	r2, #0
 8000246:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <MX_SPI1_Init+0x5c>)
 800024a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800024e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <MX_SPI1_Init+0x5c>)
 8000252:	2200      	movs	r2, #0
 8000254:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <MX_SPI1_Init+0x5c>)
 8000258:	2200      	movs	r2, #0
 800025a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <MX_SPI1_Init+0x5c>)
 800025e:	2200      	movs	r2, #0
 8000260:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <MX_SPI1_Init+0x5c>)
 8000264:	220a      	movs	r2, #10
 8000266:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <MX_SPI1_Init+0x5c>)
 800026a:	f001 f8e3 	bl	8001434 <HAL_SPI_Init>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000274:	f000 f870 	bl	8000358 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000078 	.word	0x20000078
 8000280:	40013000 	.word	0x40013000

08000284 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000288:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 800028a:	4a12      	ldr	r2, [pc, #72]	; (80002d4 <MX_USART1_UART_Init+0x50>)
 800028c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800028e:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 8000290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002aa:	220c      	movs	r2, #12
 80002ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ba:	4805      	ldr	r0, [pc, #20]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002bc:	f001 fcfe 	bl	8001cbc <HAL_UART_Init>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002c6:	f000 f847 	bl	8000358 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	200000d0 	.word	0x200000d0
 80002d4:	40013800 	.word	0x40013800

080002d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_GPIO_Init+0x78>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a17      	ldr	r2, [pc, #92]	; (8000350 <MX_GPIO_Init+0x78>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <MX_GPIO_Init+0x78>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0310 	and.w	r3, r3, #16
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_GPIO_Init+0x78>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a11      	ldr	r2, [pc, #68]	; (8000350 <MX_GPIO_Init+0x78>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_GPIO_Init+0x78>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	603b      	str	r3, [r7, #0]
 800031a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000322:	480c      	ldr	r0, [pc, #48]	; (8000354 <MX_GPIO_Init+0x7c>)
 8000324:	f000 fc5e 	bl	8000be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800032c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	2302      	movs	r3, #2
 8000338:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800033a:	f107 0308 	add.w	r3, r7, #8
 800033e:	4619      	mov	r1, r3
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <MX_GPIO_Init+0x7c>)
 8000342:	f000 facb 	bl	80008dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000346:	bf00      	nop
 8000348:	3718      	adds	r7, #24
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000
 8000354:	40011000 	.word	0x40011000

08000358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035c:	b672      	cpsid	i
}
 800035e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000360:	e7fe      	b.n	8000360 <Error_Handler+0x8>
	...

08000364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800036a:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <HAL_MspInit+0x5c>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <HAL_MspInit+0x5c>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6193      	str	r3, [r2, #24]
 8000376:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <HAL_MspInit+0x5c>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <HAL_MspInit+0x5c>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <HAL_MspInit+0x5c>)
 8000388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800038c:	61d3      	str	r3, [r2, #28]
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <HAL_MspInit+0x5c>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800039a:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <HAL_MspInit+0x60>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <HAL_MspInit+0x60>)
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010000 	.word	0x40010000

080003c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a1b      	ldr	r2, [pc, #108]	; (8000450 <HAL_SPI_MspInit+0x88>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d12f      	bne.n	8000448 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <HAL_SPI_MspInit+0x8c>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a19      	ldr	r2, [pc, #100]	; (8000454 <HAL_SPI_MspInit+0x8c>)
 80003ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b17      	ldr	r3, [pc, #92]	; (8000454 <HAL_SPI_MspInit+0x8c>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <HAL_SPI_MspInit+0x8c>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a13      	ldr	r2, [pc, #76]	; (8000454 <HAL_SPI_MspInit+0x8c>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <HAL_SPI_MspInit+0x8c>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000418:	23a0      	movs	r3, #160	; 0xa0
 800041a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	4619      	mov	r1, r3
 800042a:	480b      	ldr	r0, [pc, #44]	; (8000458 <HAL_SPI_MspInit+0x90>)
 800042c:	f000 fa56 	bl	80008dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000430:	2340      	movs	r3, #64	; 0x40
 8000432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000434:	2302      	movs	r3, #2
 8000436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000438:	2303      	movs	r3, #3
 800043a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	4619      	mov	r1, r3
 8000442:	4805      	ldr	r0, [pc, #20]	; (8000458 <HAL_SPI_MspInit+0x90>)
 8000444:	f000 fa4a 	bl	80008dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000448:	bf00      	nop
 800044a:	3720      	adds	r7, #32
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40013000 	.word	0x40013000
 8000454:	40021000 	.word	0x40021000
 8000458:	40010800 	.word	0x40010800

0800045c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a1c      	ldr	r2, [pc, #112]	; (80004e8 <HAL_UART_MspInit+0x8c>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d131      	bne.n	80004e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <HAL_UART_MspInit+0x90>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a1a      	ldr	r2, [pc, #104]	; (80004ec <HAL_UART_MspInit+0x90>)
 8000482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <HAL_UART_MspInit+0x90>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <HAL_UART_MspInit+0x90>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a14      	ldr	r2, [pc, #80]	; (80004ec <HAL_UART_MspInit+0x90>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <HAL_UART_MspInit+0x90>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0304 	and.w	r3, r3, #4
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b2:	2302      	movs	r3, #2
 80004b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b6:	2303      	movs	r3, #3
 80004b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ba:	f107 0310 	add.w	r3, r7, #16
 80004be:	4619      	mov	r1, r3
 80004c0:	480b      	ldr	r0, [pc, #44]	; (80004f0 <HAL_UART_MspInit+0x94>)
 80004c2:	f000 fa0b 	bl	80008dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <HAL_UART_MspInit+0x94>)
 80004dc:	f000 f9fe 	bl	80008dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004e0:	bf00      	nop
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40013800 	.word	0x40013800
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010800 	.word	0x40010800

080004f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004f8:	e7fe      	b.n	80004f8 <NMI_Handler+0x4>

080004fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <HardFault_Handler+0x4>

08000500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <MemManage_Handler+0x4>

08000506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050a:	e7fe      	b.n	800050a <BusFault_Handler+0x4>

0800050c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <UsageFault_Handler+0x4>

08000512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr

0800051e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr

0800052a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr

08000536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800053a:	f000 f8ab 	bl	8000694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800054c:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <_sbrk+0x5c>)
 800054e:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <_sbrk+0x60>)
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <_sbrk+0x64>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d102      	bne.n	8000566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <_sbrk+0x64>)
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <_sbrk+0x68>)
 8000564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <_sbrk+0x64>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	693a      	ldr	r2, [r7, #16]
 8000570:	429a      	cmp	r2, r3
 8000572:	d207      	bcs.n	8000584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000574:	f001 fd9a 	bl	80020ac <__errno>
 8000578:	4603      	mov	r3, r0
 800057a:	220c      	movs	r2, #12
 800057c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	e009      	b.n	8000598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <_sbrk+0x64>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <_sbrk+0x64>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <_sbrk+0x64>)
 8000594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20005000 	.word	0x20005000
 80005a4:	00000400 	.word	0x00000400
 80005a8:	20000198 	.word	0x20000198
 80005ac:	200002e8 	.word	0x200002e8

080005b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005bc:	f7ff fff8 	bl	80005b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005c2:	490c      	ldr	r1, [pc, #48]	; (80005f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005c4:	4a0c      	ldr	r2, [pc, #48]	; (80005f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005d8:	4c09      	ldr	r4, [pc, #36]	; (8000600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005e6:	f001 fd67 	bl	80020b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ea:	f7ff fdaf 	bl	800014c <main>
  bx lr
 80005ee:	4770      	bx	lr
  ldr r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005f8:	08002a54 	.word	0x08002a54
  ldr r2, =_sbss
 80005fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000600:	200002e8 	.word	0x200002e8

08000604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_2_IRQHandler>
	...

08000608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <HAL_Init+0x28>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_Init+0x28>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f92b 	bl	8000874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061e:	200f      	movs	r0, #15
 8000620:	f000 f808 	bl	8000634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000624:	f7ff fe9e 	bl	8000364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40022000 	.word	0x40022000

08000634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_InitTick+0x54>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_InitTick+0x58>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064a:	fbb3 f3f1 	udiv	r3, r3, r1
 800064e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f935 	bl	80008c2 <HAL_SYSTICK_Config>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e00e      	b.n	8000680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	d80a      	bhi.n	800067e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000668:	2200      	movs	r2, #0
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f000 f90b 	bl	800088a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000674:	4a06      	ldr	r2, [pc, #24]	; (8000690 <HAL_InitTick+0x5c>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800067a:	2300      	movs	r3, #0
 800067c:	e000      	b.n	8000680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000000 	.word	0x20000000
 800068c:	20000008 	.word	0x20000008
 8000690:	20000004 	.word	0x20000004

08000694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <HAL_IncTick+0x1c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_IncTick+0x20>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <HAL_IncTick+0x20>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	20000008 	.word	0x20000008
 80006b4:	2000019c 	.word	0x2000019c

080006b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return uwTick;
 80006bc:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <HAL_GetTick+0x10>)
 80006be:	681b      	ldr	r3, [r3, #0]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	2000019c 	.word	0x2000019c

080006cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d4:	f7ff fff0 	bl	80006b8 <HAL_GetTick>
 80006d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e4:	d005      	beq.n	80006f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <HAL_Delay+0x44>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006f2:	bf00      	nop
 80006f4:	f7ff ffe0 	bl	80006b8 <HAL_GetTick>
 80006f8:	4602      	mov	r2, r0
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	429a      	cmp	r2, r3
 8000702:	d8f7      	bhi.n	80006f4 <HAL_Delay+0x28>
  {
  }
}
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000008 	.word	0x20000008

08000714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800073c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000746:	4a04      	ldr	r2, [pc, #16]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	60d3      	str	r3, [r2, #12]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <__NVIC_GetPriorityGrouping+0x18>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	f003 0307 	and.w	r3, r3, #7
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	db0a      	blt.n	80007a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	490c      	ldr	r1, [pc, #48]	; (80007c4 <__NVIC_SetPriority+0x4c>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a0:	e00a      	b.n	80007b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4908      	ldr	r1, [pc, #32]	; (80007c8 <__NVIC_SetPriority+0x50>)
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	3b04      	subs	r3, #4
 80007b0:	0112      	lsls	r2, r2, #4
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	440b      	add	r3, r1
 80007b6:	761a      	strb	r2, [r3, #24]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000e100 	.word	0xe000e100
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b089      	sub	sp, #36	; 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f1c3 0307 	rsb	r3, r3, #7
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	bf28      	it	cs
 80007ea:	2304      	movcs	r3, #4
 80007ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3304      	adds	r3, #4
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	d902      	bls.n	80007fc <NVIC_EncodePriority+0x30>
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3b03      	subs	r3, #3
 80007fa:	e000      	b.n	80007fe <NVIC_EncodePriority+0x32>
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	f04f 32ff 	mov.w	r2, #4294967295
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43da      	mvns	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	401a      	ands	r2, r3
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000814:	f04f 31ff 	mov.w	r1, #4294967295
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43d9      	mvns	r1, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	4313      	orrs	r3, r2
         );
}
 8000826:	4618      	mov	r0, r3
 8000828:	3724      	adds	r7, #36	; 0x24
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000840:	d301      	bcc.n	8000846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000842:	2301      	movs	r3, #1
 8000844:	e00f      	b.n	8000866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <SysTick_Config+0x40>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084e:	210f      	movs	r1, #15
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f7ff ff90 	bl	8000778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <SysTick_Config+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SysTick_Config+0x40>)
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	e000e010 	.word	0xe000e010

08000874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ff49 	bl	8000714 <__NVIC_SetPriorityGrouping>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800089c:	f7ff ff5e 	bl	800075c <__NVIC_GetPriorityGrouping>
 80008a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	68b9      	ldr	r1, [r7, #8]
 80008a6:	6978      	ldr	r0, [r7, #20]
 80008a8:	f7ff ff90 	bl	80007cc <NVIC_EncodePriority>
 80008ac:	4602      	mov	r2, r0
 80008ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff5f 	bl	8000778 <__NVIC_SetPriority>
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ffb0 	bl	8000830 <SysTick_Config>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008dc:	b480      	push	{r7}
 80008de:	b08b      	sub	sp, #44	; 0x2c
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ee:	e169      	b.n	8000bc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008f0:	2201      	movs	r2, #1
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	69fa      	ldr	r2, [r7, #28]
 8000900:	4013      	ands	r3, r2
 8000902:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	429a      	cmp	r2, r3
 800090a:	f040 8158 	bne.w	8000bbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	4a9a      	ldr	r2, [pc, #616]	; (8000b7c <HAL_GPIO_Init+0x2a0>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d05e      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000918:	4a98      	ldr	r2, [pc, #608]	; (8000b7c <HAL_GPIO_Init+0x2a0>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d875      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 800091e:	4a98      	ldr	r2, [pc, #608]	; (8000b80 <HAL_GPIO_Init+0x2a4>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d058      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000924:	4a96      	ldr	r2, [pc, #600]	; (8000b80 <HAL_GPIO_Init+0x2a4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d86f      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 800092a:	4a96      	ldr	r2, [pc, #600]	; (8000b84 <HAL_GPIO_Init+0x2a8>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d052      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000930:	4a94      	ldr	r2, [pc, #592]	; (8000b84 <HAL_GPIO_Init+0x2a8>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d869      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 8000936:	4a94      	ldr	r2, [pc, #592]	; (8000b88 <HAL_GPIO_Init+0x2ac>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d04c      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 800093c:	4a92      	ldr	r2, [pc, #584]	; (8000b88 <HAL_GPIO_Init+0x2ac>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d863      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 8000942:	4a92      	ldr	r2, [pc, #584]	; (8000b8c <HAL_GPIO_Init+0x2b0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d046      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000948:	4a90      	ldr	r2, [pc, #576]	; (8000b8c <HAL_GPIO_Init+0x2b0>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d85d      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 800094e:	2b12      	cmp	r3, #18
 8000950:	d82a      	bhi.n	80009a8 <HAL_GPIO_Init+0xcc>
 8000952:	2b12      	cmp	r3, #18
 8000954:	d859      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 8000956:	a201      	add	r2, pc, #4	; (adr r2, 800095c <HAL_GPIO_Init+0x80>)
 8000958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095c:	080009d7 	.word	0x080009d7
 8000960:	080009b1 	.word	0x080009b1
 8000964:	080009c3 	.word	0x080009c3
 8000968:	08000a05 	.word	0x08000a05
 800096c:	08000a0b 	.word	0x08000a0b
 8000970:	08000a0b 	.word	0x08000a0b
 8000974:	08000a0b 	.word	0x08000a0b
 8000978:	08000a0b 	.word	0x08000a0b
 800097c:	08000a0b 	.word	0x08000a0b
 8000980:	08000a0b 	.word	0x08000a0b
 8000984:	08000a0b 	.word	0x08000a0b
 8000988:	08000a0b 	.word	0x08000a0b
 800098c:	08000a0b 	.word	0x08000a0b
 8000990:	08000a0b 	.word	0x08000a0b
 8000994:	08000a0b 	.word	0x08000a0b
 8000998:	08000a0b 	.word	0x08000a0b
 800099c:	08000a0b 	.word	0x08000a0b
 80009a0:	080009b9 	.word	0x080009b9
 80009a4:	080009cd 	.word	0x080009cd
 80009a8:	4a79      	ldr	r2, [pc, #484]	; (8000b90 <HAL_GPIO_Init+0x2b4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d013      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ae:	e02c      	b.n	8000a0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	623b      	str	r3, [r7, #32]
          break;
 80009b6:	e029      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	3304      	adds	r3, #4
 80009be:	623b      	str	r3, [r7, #32]
          break;
 80009c0:	e024      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	3308      	adds	r3, #8
 80009c8:	623b      	str	r3, [r7, #32]
          break;
 80009ca:	e01f      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	330c      	adds	r3, #12
 80009d2:	623b      	str	r3, [r7, #32]
          break;
 80009d4:	e01a      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d102      	bne.n	80009e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009de:	2304      	movs	r3, #4
 80009e0:	623b      	str	r3, [r7, #32]
          break;
 80009e2:	e013      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d105      	bne.n	80009f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009ec:	2308      	movs	r3, #8
 80009ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	611a      	str	r2, [r3, #16]
          break;
 80009f6:	e009      	b.n	8000a0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f8:	2308      	movs	r3, #8
 80009fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	69fa      	ldr	r2, [r7, #28]
 8000a00:	615a      	str	r2, [r3, #20]
          break;
 8000a02:	e003      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
          break;
 8000a08:	e000      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          break;
 8000a0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	2bff      	cmp	r3, #255	; 0xff
 8000a10:	d801      	bhi.n	8000a16 <HAL_GPIO_Init+0x13a>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	e001      	b.n	8000a1a <HAL_GPIO_Init+0x13e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	2bff      	cmp	r3, #255	; 0xff
 8000a20:	d802      	bhi.n	8000a28 <HAL_GPIO_Init+0x14c>
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	e002      	b.n	8000a2e <HAL_GPIO_Init+0x152>
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	3b08      	subs	r3, #8
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	210f      	movs	r1, #15
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	401a      	ands	r2, r3
 8000a40:	6a39      	ldr	r1, [r7, #32]
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 80b1 	beq.w	8000bbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a5c:	4b4d      	ldr	r3, [pc, #308]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a4c      	ldr	r2, [pc, #304]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b4a      	ldr	r3, [pc, #296]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a74:	4a48      	ldr	r2, [pc, #288]	; (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	4013      	ands	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a40      	ldr	r2, [pc, #256]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d013      	beq.n	8000ac8 <HAL_GPIO_Init+0x1ec>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a3f      	ldr	r2, [pc, #252]	; (8000ba0 <HAL_GPIO_Init+0x2c4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d00d      	beq.n	8000ac4 <HAL_GPIO_Init+0x1e8>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a3e      	ldr	r2, [pc, #248]	; (8000ba4 <HAL_GPIO_Init+0x2c8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d007      	beq.n	8000ac0 <HAL_GPIO_Init+0x1e4>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a3d      	ldr	r2, [pc, #244]	; (8000ba8 <HAL_GPIO_Init+0x2cc>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d101      	bne.n	8000abc <HAL_GPIO_Init+0x1e0>
 8000ab8:	2303      	movs	r3, #3
 8000aba:	e006      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000abc:	2304      	movs	r3, #4
 8000abe:	e004      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	e002      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e000      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000acc:	f002 0203 	and.w	r2, r2, #3
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ada:	492f      	ldr	r1, [pc, #188]	; (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d006      	beq.n	8000b02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000af4:	4b2d      	ldr	r3, [pc, #180]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	492c      	ldr	r1, [pc, #176]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	608b      	str	r3, [r1, #8]
 8000b00:	e006      	b.n	8000b10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b04:	689a      	ldr	r2, [r3, #8]
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	4928      	ldr	r1, [pc, #160]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d006      	beq.n	8000b2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	4922      	ldr	r1, [pc, #136]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	60cb      	str	r3, [r1, #12]
 8000b28:	e006      	b.n	8000b38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b2a:	4b20      	ldr	r3, [pc, #128]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	43db      	mvns	r3, r3
 8000b32:	491e      	ldr	r1, [pc, #120]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b34:	4013      	ands	r3, r2
 8000b36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d006      	beq.n	8000b52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	4918      	ldr	r1, [pc, #96]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	604b      	str	r3, [r1, #4]
 8000b50:	e006      	b.n	8000b60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	4914      	ldr	r1, [pc, #80]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d021      	beq.n	8000bb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	490e      	ldr	r1, [pc, #56]	; (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	600b      	str	r3, [r1, #0]
 8000b78:	e021      	b.n	8000bbe <HAL_GPIO_Init+0x2e2>
 8000b7a:	bf00      	nop
 8000b7c:	10320000 	.word	0x10320000
 8000b80:	10310000 	.word	0x10310000
 8000b84:	10220000 	.word	0x10220000
 8000b88:	10210000 	.word	0x10210000
 8000b8c:	10120000 	.word	0x10120000
 8000b90:	10110000 	.word	0x10110000
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010000 	.word	0x40010000
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	40010c00 	.word	0x40010c00
 8000ba4:	40011000 	.word	0x40011000
 8000ba8:	40011400 	.word	0x40011400
 8000bac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_GPIO_Init+0x304>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	4909      	ldr	r1, [pc, #36]	; (8000be0 <HAL_GPIO_Init+0x304>)
 8000bba:	4013      	ands	r3, r2
 8000bbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	fa22 f303 	lsr.w	r3, r2, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f47f ae8e 	bne.w	80008f0 <HAL_GPIO_Init+0x14>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	372c      	adds	r7, #44	; 0x2c
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	40010400 	.word	0x40010400

08000be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	807b      	strh	r3, [r7, #2]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf4:	787b      	ldrb	r3, [r7, #1]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bfa:	887a      	ldrh	r2, [r7, #2]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c00:	e003      	b.n	8000c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	041a      	lsls	r2, r3, #16
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	611a      	str	r2, [r3, #16]
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e272      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 8087 	beq.w	8000d42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c34:	4b92      	ldr	r3, [pc, #584]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 030c 	and.w	r3, r3, #12
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d00c      	beq.n	8000c5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c40:	4b8f      	ldr	r3, [pc, #572]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 030c 	and.w	r3, r3, #12
 8000c48:	2b08      	cmp	r3, #8
 8000c4a:	d112      	bne.n	8000c72 <HAL_RCC_OscConfig+0x5e>
 8000c4c:	4b8c      	ldr	r3, [pc, #560]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c58:	d10b      	bne.n	8000c72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c5a:	4b89      	ldr	r3, [pc, #548]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d06c      	beq.n	8000d40 <HAL_RCC_OscConfig+0x12c>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d168      	bne.n	8000d40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e24c      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c7a:	d106      	bne.n	8000c8a <HAL_RCC_OscConfig+0x76>
 8000c7c:	4b80      	ldr	r3, [pc, #512]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a7f      	ldr	r2, [pc, #508]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	e02e      	b.n	8000ce8 <HAL_RCC_OscConfig+0xd4>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10c      	bne.n	8000cac <HAL_RCC_OscConfig+0x98>
 8000c92:	4b7b      	ldr	r3, [pc, #492]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a7a      	ldr	r2, [pc, #488]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	4b78      	ldr	r3, [pc, #480]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a77      	ldr	r2, [pc, #476]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e01d      	b.n	8000ce8 <HAL_RCC_OscConfig+0xd4>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cb4:	d10c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0xbc>
 8000cb6:	4b72      	ldr	r3, [pc, #456]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a71      	ldr	r2, [pc, #452]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	4b6f      	ldr	r3, [pc, #444]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a6e      	ldr	r2, [pc, #440]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e00b      	b.n	8000ce8 <HAL_RCC_OscConfig+0xd4>
 8000cd0:	4b6b      	ldr	r3, [pc, #428]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a6a      	ldr	r2, [pc, #424]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	4b68      	ldr	r3, [pc, #416]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a67      	ldr	r2, [pc, #412]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fce2 	bl	80006b8 <HAL_GetTick>
 8000cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf6:	e008      	b.n	8000d0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cf8:	f7ff fcde 	bl	80006b8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b64      	cmp	r3, #100	; 0x64
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e200      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0a:	4b5d      	ldr	r3, [pc, #372]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0f0      	beq.n	8000cf8 <HAL_RCC_OscConfig+0xe4>
 8000d16:	e014      	b.n	8000d42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d18:	f7ff fcce 	bl	80006b8 <HAL_GetTick>
 8000d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1e:	e008      	b.n	8000d32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d20:	f7ff fcca 	bl	80006b8 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b64      	cmp	r3, #100	; 0x64
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e1ec      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d32:	4b53      	ldr	r3, [pc, #332]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1f0      	bne.n	8000d20 <HAL_RCC_OscConfig+0x10c>
 8000d3e:	e000      	b.n	8000d42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d063      	beq.n	8000e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d4e:	4b4c      	ldr	r3, [pc, #304]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00b      	beq.n	8000d72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d5a:	4b49      	ldr	r3, [pc, #292]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	2b08      	cmp	r3, #8
 8000d64:	d11c      	bne.n	8000da0 <HAL_RCC_OscConfig+0x18c>
 8000d66:	4b46      	ldr	r3, [pc, #280]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d116      	bne.n	8000da0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d72:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <HAL_RCC_OscConfig+0x176>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d001      	beq.n	8000d8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e1c0      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8a:	4b3d      	ldr	r3, [pc, #244]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	4939      	ldr	r1, [pc, #228]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9e:	e03a      	b.n	8000e16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d020      	beq.n	8000dea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <HAL_RCC_OscConfig+0x270>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dae:	f7ff fc83 	bl	80006b8 <HAL_GetTick>
 8000db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db4:	e008      	b.n	8000dc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000db6:	f7ff fc7f 	bl	80006b8 <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e1a1      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f0      	beq.n	8000db6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	4927      	ldr	r1, [pc, #156]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	4313      	orrs	r3, r2
 8000de6:	600b      	str	r3, [r1, #0]
 8000de8:	e015      	b.n	8000e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <HAL_RCC_OscConfig+0x270>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fc62 	bl	80006b8 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000df8:	f7ff fc5e 	bl	80006b8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e180      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d03a      	beq.n	8000e98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d019      	beq.n	8000e5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e30:	f7ff fc42 	bl	80006b8 <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e38:	f7ff fc3e 	bl	80006b8 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e160      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f0      	beq.n	8000e38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f000 face 	bl	80013f8 <RCC_Delay>
 8000e5c:	e01c      	b.n	8000e98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e64:	f7ff fc28 	bl	80006b8 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e6a:	e00f      	b.n	8000e8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e6c:	f7ff fc24 	bl	80006b8 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d908      	bls.n	8000e8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e146      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	42420000 	.word	0x42420000
 8000e88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e8c:	4b92      	ldr	r3, [pc, #584]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e9      	bne.n	8000e6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80a6 	beq.w	8000ff2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eaa:	4b8b      	ldr	r3, [pc, #556]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10d      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b88      	ldr	r3, [pc, #544]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a87      	ldr	r2, [pc, #540]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b85      	ldr	r3, [pc, #532]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed2:	4b82      	ldr	r3, [pc, #520]	; (80010dc <HAL_RCC_OscConfig+0x4c8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d118      	bne.n	8000f10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ede:	4b7f      	ldr	r3, [pc, #508]	; (80010dc <HAL_RCC_OscConfig+0x4c8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a7e      	ldr	r2, [pc, #504]	; (80010dc <HAL_RCC_OscConfig+0x4c8>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eea:	f7ff fbe5 	bl	80006b8 <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef2:	f7ff fbe1 	bl	80006b8 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b64      	cmp	r3, #100	; 0x64
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e103      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f04:	4b75      	ldr	r3, [pc, #468]	; (80010dc <HAL_RCC_OscConfig+0x4c8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f0      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d106      	bne.n	8000f26 <HAL_RCC_OscConfig+0x312>
 8000f18:	4b6f      	ldr	r3, [pc, #444]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	4a6e      	ldr	r2, [pc, #440]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6213      	str	r3, [r2, #32]
 8000f24:	e02d      	b.n	8000f82 <HAL_RCC_OscConfig+0x36e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x334>
 8000f2e:	4b6a      	ldr	r3, [pc, #424]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	4a69      	ldr	r2, [pc, #420]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	f023 0301 	bic.w	r3, r3, #1
 8000f38:	6213      	str	r3, [r2, #32]
 8000f3a:	4b67      	ldr	r3, [pc, #412]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	4a66      	ldr	r2, [pc, #408]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f40:	f023 0304 	bic.w	r3, r3, #4
 8000f44:	6213      	str	r3, [r2, #32]
 8000f46:	e01c      	b.n	8000f82 <HAL_RCC_OscConfig+0x36e>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	d10c      	bne.n	8000f6a <HAL_RCC_OscConfig+0x356>
 8000f50:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	4a60      	ldr	r2, [pc, #384]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6213      	str	r3, [r2, #32]
 8000f5c:	4b5e      	ldr	r3, [pc, #376]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	4a5d      	ldr	r2, [pc, #372]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6213      	str	r3, [r2, #32]
 8000f68:	e00b      	b.n	8000f82 <HAL_RCC_OscConfig+0x36e>
 8000f6a:	4b5b      	ldr	r3, [pc, #364]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	4a5a      	ldr	r2, [pc, #360]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	6213      	str	r3, [r2, #32]
 8000f76:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	4a57      	ldr	r2, [pc, #348]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	f023 0304 	bic.w	r3, r3, #4
 8000f80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d015      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fb95 	bl	80006b8 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f90:	e00a      	b.n	8000fa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f92:	f7ff fb91 	bl	80006b8 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e0b1      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa8:	4b4b      	ldr	r3, [pc, #300]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0ee      	beq.n	8000f92 <HAL_RCC_OscConfig+0x37e>
 8000fb4:	e014      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fb7f 	bl	80006b8 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fbc:	e00a      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fbe:	f7ff fb7b 	bl	80006b8 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e09b      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd4:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1ee      	bne.n	8000fbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d105      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fe6:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a3b      	ldr	r2, [pc, #236]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 8087 	beq.w	800110a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ffc:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 030c 	and.w	r3, r3, #12
 8001004:	2b08      	cmp	r3, #8
 8001006:	d061      	beq.n	80010cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d146      	bne.n	800109e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001010:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <HAL_RCC_OscConfig+0x4cc>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fb4f 	bl	80006b8 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101e:	f7ff fb4b 	bl	80006b8 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e06d      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f0      	bne.n	800101e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001044:	d108      	bne.n	8001058 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	4921      	ldr	r1, [pc, #132]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	4313      	orrs	r3, r2
 8001056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a19      	ldr	r1, [r3, #32]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	430b      	orrs	r3, r1
 800106a:	491b      	ldr	r1, [pc, #108]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <HAL_RCC_OscConfig+0x4cc>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001076:	f7ff fb1f 	bl	80006b8 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800107e:	f7ff fb1b 	bl	80006b8 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e03d      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0x46a>
 800109c:	e035      	b.n	800110a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_RCC_OscConfig+0x4cc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fb08 	bl	80006b8 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ac:	f7ff fb04 	bl	80006b8 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e026      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x498>
 80010ca:	e01e      	b.n	800110a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d107      	bne.n	80010e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e019      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40007000 	.word	0x40007000
 80010e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_RCC_OscConfig+0x500>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d106      	bne.n	8001106 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001102:	429a      	cmp	r2, r3
 8001104:	d001      	beq.n	800110a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021000 	.word	0x40021000

08001118 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e0d0      	b.n	80012ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800112c:	4b6a      	ldr	r3, [pc, #424]	; (80012d8 <HAL_RCC_ClockConfig+0x1c0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d910      	bls.n	800115c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113a:	4b67      	ldr	r3, [pc, #412]	; (80012d8 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f023 0207 	bic.w	r2, r3, #7
 8001142:	4965      	ldr	r1, [pc, #404]	; (80012d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	4313      	orrs	r3, r2
 8001148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800114a:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <HAL_RCC_ClockConfig+0x1c0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d001      	beq.n	800115c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e0b8      	b.n	80012ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d020      	beq.n	80011aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001174:	4b59      	ldr	r3, [pc, #356]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	4a58      	ldr	r2, [pc, #352]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 800117a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800117e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001196:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001198:	4b50      	ldr	r3, [pc, #320]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	494d      	ldr	r1, [pc, #308]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d040      	beq.n	8001238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d107      	bne.n	80011ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d115      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e07f      	b.n	80012ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d107      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d6:	4b41      	ldr	r3, [pc, #260]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e073      	b.n	80012ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e06b      	b.n	80012ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f6:	4b39      	ldr	r3, [pc, #228]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f023 0203 	bic.w	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4936      	ldr	r1, [pc, #216]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 8001204:	4313      	orrs	r3, r2
 8001206:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001208:	f7ff fa56 	bl	80006b8 <HAL_GetTick>
 800120c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120e:	e00a      	b.n	8001226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001210:	f7ff fa52 	bl	80006b8 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	f241 3288 	movw	r2, #5000	; 0x1388
 800121e:	4293      	cmp	r3, r2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e053      	b.n	80012ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 020c 	and.w	r2, r3, #12
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	429a      	cmp	r2, r3
 8001236:	d1eb      	bne.n	8001210 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <HAL_RCC_ClockConfig+0x1c0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d210      	bcs.n	8001268 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 0207 	bic.w	r2, r3, #7
 800124e:	4922      	ldr	r1, [pc, #136]	; (80012d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d001      	beq.n	8001268 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e032      	b.n	80012ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d008      	beq.n	8001286 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	4916      	ldr	r1, [pc, #88]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 8001282:	4313      	orrs	r3, r2
 8001284:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d009      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	490e      	ldr	r1, [pc, #56]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012a6:	f000 f821 	bl	80012ec <HAL_RCC_GetSysClockFreq>
 80012aa:	4602      	mov	r2, r0
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	490a      	ldr	r1, [pc, #40]	; (80012e0 <HAL_RCC_ClockConfig+0x1c8>)
 80012b8:	5ccb      	ldrb	r3, [r1, r3]
 80012ba:	fa22 f303 	lsr.w	r3, r2, r3
 80012be:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <HAL_RCC_ClockConfig+0x1cc>)
 80012c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_RCC_ClockConfig+0x1d0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f9b4 	bl	8000634 <HAL_InitTick>

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40022000 	.word	0x40022000
 80012dc:	40021000 	.word	0x40021000
 80012e0:	080029ec 	.word	0x080029ec
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000004 	.word	0x20000004

080012ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001306:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <HAL_RCC_GetSysClockFreq+0x94>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b04      	cmp	r3, #4
 8001314:	d002      	beq.n	800131c <HAL_RCC_GetSysClockFreq+0x30>
 8001316:	2b08      	cmp	r3, #8
 8001318:	d003      	beq.n	8001322 <HAL_RCC_GetSysClockFreq+0x36>
 800131a:	e027      	b.n	800136c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_RCC_GetSysClockFreq+0x98>)
 800131e:	613b      	str	r3, [r7, #16]
      break;
 8001320:	e027      	b.n	8001372 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	0c9b      	lsrs	r3, r3, #18
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	4a17      	ldr	r2, [pc, #92]	; (8001388 <HAL_RCC_GetSysClockFreq+0x9c>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d010      	beq.n	800135c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_RCC_GetSysClockFreq+0x94>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	0c5b      	lsrs	r3, r3, #17
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	4a11      	ldr	r2, [pc, #68]	; (800138c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001346:	5cd3      	ldrb	r3, [r2, r3]
 8001348:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <HAL_RCC_GetSysClockFreq+0x98>)
 800134e:	fb03 f202 	mul.w	r2, r3, r2
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	fbb2 f3f3 	udiv	r3, r2, r3
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	e004      	b.n	8001366 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001360:	fb02 f303 	mul.w	r3, r2, r3
 8001364:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	613b      	str	r3, [r7, #16]
      break;
 800136a:	e002      	b.n	8001372 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_RCC_GetSysClockFreq+0x98>)
 800136e:	613b      	str	r3, [r7, #16]
      break;
 8001370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001372:	693b      	ldr	r3, [r7, #16]
}
 8001374:	4618      	mov	r0, r3
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	007a1200 	.word	0x007a1200
 8001388:	08002a04 	.word	0x08002a04
 800138c:	08002a14 	.word	0x08002a14
 8001390:	003d0900 	.word	0x003d0900

08001394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001398:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	20000000 	.word	0x20000000

080013a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013ac:	f7ff fff2 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	4903      	ldr	r1, [pc, #12]	; (80013cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80013be:	5ccb      	ldrb	r3, [r1, r3]
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000
 80013cc:	080029fc 	.word	0x080029fc

080013d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013d4:	f7ff ffde 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	0adb      	lsrs	r3, r3, #11
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	4903      	ldr	r1, [pc, #12]	; (80013f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013e6:	5ccb      	ldrb	r3, [r1, r3]
 80013e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	080029fc 	.word	0x080029fc

080013f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <RCC_Delay+0x34>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <RCC_Delay+0x38>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0a5b      	lsrs	r3, r3, #9
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001414:	bf00      	nop
  }
  while (Delay --);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1e5a      	subs	r2, r3, #1
 800141a:	60fa      	str	r2, [r7, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f9      	bne.n	8001414 <RCC_Delay+0x1c>
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	20000000 	.word	0x20000000
 8001430:	10624dd3 	.word	0x10624dd3

08001434 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e076      	b.n	8001534 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	2b00      	cmp	r3, #0
 800144c:	d108      	bne.n	8001460 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001456:	d009      	beq.n	800146c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
 800145e:	e005      	b.n	800146c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7fe ff9e 	bl	80003c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f0:	ea42 0103 	orr.w	r1, r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	0c1a      	lsrs	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f002 0204 	and.w	r2, r2, #4
 8001512:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	69da      	ldr	r2, [r3, #28]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001522:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af02      	add	r7, sp, #8
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	4613      	mov	r3, r2
 800154a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b01      	cmp	r3, #1
 800155a:	d002      	beq.n	8001562 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800155c:	2302      	movs	r3, #2
 800155e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001560:	e0fb      	b.n	800175a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800156a:	d112      	bne.n	8001592 <HAL_SPI_Receive+0x56>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10e      	bne.n	8001592 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2204      	movs	r2, #4
 8001578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800157c:	88fa      	ldrh	r2, [r7, #6]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	4613      	mov	r3, r2
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f000 f8ef 	bl	800176c <HAL_SPI_TransmitReceive>
 800158e:	4603      	mov	r3, r0
 8001590:	e0e8      	b.n	8001764 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_SPI_Receive+0x64>
 800159c:	2302      	movs	r3, #2
 800159e:	e0e1      	b.n	8001764 <HAL_SPI_Receive+0x228>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80015a8:	f7ff f886 	bl	80006b8 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <HAL_SPI_Receive+0x7e>
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80015be:	e0cc      	b.n	800175a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2204      	movs	r2, #4
 80015c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	88fa      	ldrh	r2, [r7, #6]
 80015d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	88fa      	ldrh	r2, [r7, #6]
 80015de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001606:	d10f      	bne.n	8001628 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001616:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001626:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001632:	2b40      	cmp	r3, #64	; 0x40
 8001634:	d007      	beq.n	8001646 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d16a      	bne.n	8001724 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800164e:	e032      	b.n	80016b6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b01      	cmp	r3, #1
 800165c:	d115      	bne.n	800168a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f103 020c 	add.w	r2, r3, #12
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166a:	7812      	ldrb	r2, [r2, #0]
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800167e:	b29b      	uxth	r3, r3
 8001680:	3b01      	subs	r3, #1
 8001682:	b29a      	uxth	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001688:	e015      	b.n	80016b6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800168a:	f7ff f815 	bl	80006b8 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d803      	bhi.n	80016a2 <HAL_SPI_Receive+0x166>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d102      	bne.n	80016a8 <HAL_SPI_Receive+0x16c>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d106      	bne.n	80016b6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80016b4:	e051      	b.n	800175a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1c7      	bne.n	8001650 <HAL_SPI_Receive+0x114>
 80016c0:	e035      	b.n	800172e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d113      	bne.n	80016f8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016da:	b292      	uxth	r2, r2
 80016dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e2:	1c9a      	adds	r2, r3, #2
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	3b01      	subs	r3, #1
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80016f6:	e015      	b.n	8001724 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80016f8:	f7fe ffde 	bl	80006b8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d803      	bhi.n	8001710 <HAL_SPI_Receive+0x1d4>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170e:	d102      	bne.n	8001716 <HAL_SPI_Receive+0x1da>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001722:	e01a      	b.n	800175a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001728:	b29b      	uxth	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1c9      	bne.n	80016c2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	6839      	ldr	r1, [r7, #0]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 fa52 	bl	8001bdc <SPI_EndRxTransaction>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2220      	movs	r2, #32
 8001742:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	75fb      	strb	r3, [r7, #23]
 8001750:	e003      	b.n	800175a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001762:	7dfb      	ldrb	r3, [r7, #23]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800177a:	2301      	movs	r3, #1
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800178a:	2b01      	cmp	r3, #1
 800178c:	d101      	bne.n	8001792 <HAL_SPI_TransmitReceive+0x26>
 800178e:	2302      	movs	r3, #2
 8001790:	e198      	b.n	8001ac4 <HAL_SPI_TransmitReceive+0x358>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800179a:	f7fe ff8d 	bl	80006b8 <HAL_GetTick>
 800179e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80017b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d00f      	beq.n	80017dc <HAL_SPI_TransmitReceive+0x70>
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017c2:	d107      	bne.n	80017d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d103      	bne.n	80017d4 <HAL_SPI_TransmitReceive+0x68>
 80017cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d003      	beq.n	80017dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80017d4:	2302      	movs	r3, #2
 80017d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80017da:	e16d      	b.n	8001ab8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_SPI_TransmitReceive+0x82>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <HAL_SPI_TransmitReceive+0x82>
 80017e8:	887b      	ldrh	r3, [r7, #2]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d103      	bne.n	80017f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80017f4:	e160      	b.n	8001ab8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d003      	beq.n	800180a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2205      	movs	r2, #5
 8001806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	887a      	ldrh	r2, [r7, #2]
 800181a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	887a      	ldrh	r2, [r7, #2]
 8001832:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184a:	2b40      	cmp	r3, #64	; 0x40
 800184c:	d007      	beq.n	800185e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001866:	d17c      	bne.n	8001962 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <HAL_SPI_TransmitReceive+0x10a>
 8001870:	8b7b      	ldrh	r3, [r7, #26]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d16a      	bne.n	800194c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	881a      	ldrh	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	1c9a      	adds	r2, r3, #2
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001890:	b29b      	uxth	r3, r3
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800189a:	e057      	b.n	800194c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d11b      	bne.n	80018e2 <HAL_SPI_TransmitReceive+0x176>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d016      	beq.n	80018e2 <HAL_SPI_TransmitReceive+0x176>
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d113      	bne.n	80018e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	881a      	ldrh	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	1c9a      	adds	r2, r3, #2
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b29a      	uxth	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d119      	bne.n	8001924 <HAL_SPI_TransmitReceive+0x1b8>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d014      	beq.n	8001924 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001904:	b292      	uxth	r2, r2
 8001906:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190c:	1c9a      	adds	r2, r3, #2
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001916:	b29b      	uxth	r3, r3
 8001918:	3b01      	subs	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001920:	2301      	movs	r3, #1
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001924:	f7fe fec8 	bl	80006b8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001930:	429a      	cmp	r2, r3
 8001932:	d80b      	bhi.n	800194c <HAL_SPI_TransmitReceive+0x1e0>
 8001934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193a:	d007      	beq.n	800194c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800194a:	e0b5      	b.n	8001ab8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001950:	b29b      	uxth	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1a2      	bne.n	800189c <HAL_SPI_TransmitReceive+0x130>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800195a:	b29b      	uxth	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d19d      	bne.n	800189c <HAL_SPI_TransmitReceive+0x130>
 8001960:	e080      	b.n	8001a64 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <HAL_SPI_TransmitReceive+0x204>
 800196a:	8b7b      	ldrh	r3, [r7, #26]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d16f      	bne.n	8001a50 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	330c      	adds	r3, #12
 800197a:	7812      	ldrb	r2, [r2, #0]
 800197c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800198c:	b29b      	uxth	r3, r3
 800198e:	3b01      	subs	r3, #1
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001996:	e05b      	b.n	8001a50 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d11c      	bne.n	80019e0 <HAL_SPI_TransmitReceive+0x274>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d017      	beq.n	80019e0 <HAL_SPI_TransmitReceive+0x274>
 80019b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d114      	bne.n	80019e0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	330c      	adds	r3, #12
 80019c0:	7812      	ldrb	r2, [r2, #0]
 80019c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d119      	bne.n	8001a22 <HAL_SPI_TransmitReceive+0x2b6>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d014      	beq.n	8001a22 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001a22:	f7fe fe49 	bl	80006b8 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d803      	bhi.n	8001a3a <HAL_SPI_TransmitReceive+0x2ce>
 8001a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d102      	bne.n	8001a40 <HAL_SPI_TransmitReceive+0x2d4>
 8001a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d107      	bne.n	8001a50 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001a4e:	e033      	b.n	8001ab8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d19e      	bne.n	8001998 <HAL_SPI_TransmitReceive+0x22c>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d199      	bne.n	8001998 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 f909 	bl	8001c80 <SPI_EndRxTxTransaction>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001a80:	e01a      	b.n	8001ab8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10a      	bne.n	8001aa0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001aae:	e003      	b.n	8001ab8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ac0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3730      	adds	r7, #48	; 0x30
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001adc:	f7fe fdec 	bl	80006b8 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	4413      	add	r3, r2
 8001aea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001aec:	f7fe fde4 	bl	80006b8 <HAL_GetTick>
 8001af0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001af2:	4b39      	ldr	r3, [pc, #228]	; (8001bd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	015b      	lsls	r3, r3, #5
 8001af8:	0d1b      	lsrs	r3, r3, #20
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b02:	e054      	b.n	8001bae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0a:	d050      	beq.n	8001bae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001b0c:	f7fe fdd4 	bl	80006b8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d902      	bls.n	8001b22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d13d      	bne.n	8001b9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001b30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b3a:	d111      	bne.n	8001b60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b44:	d004      	beq.n	8001b50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4e:	d107      	bne.n	8001b60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b68:	d10f      	bne.n	8001b8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e017      	b.n	8001bce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	bf0c      	ite	eq
 8001bbe:	2301      	moveq	r3, #1
 8001bc0:	2300      	movne	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d19b      	bne.n	8001b04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3720      	adds	r7, #32
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000000 	.word	0x20000000

08001bdc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bf0:	d111      	bne.n	8001c16 <SPI_EndRxTransaction+0x3a>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bfa:	d004      	beq.n	8001c06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c04:	d107      	bne.n	8001c16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c14:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c1e:	d117      	bne.n	8001c50 <SPI_EndRxTransaction+0x74>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c28:	d112      	bne.n	8001c50 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2200      	movs	r2, #0
 8001c32:	2101      	movs	r1, #1
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f7ff ff49 	bl	8001acc <SPI_WaitFlagStateUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d01a      	beq.n	8001c76 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c44:	f043 0220 	orr.w	r2, r3, #32
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e013      	b.n	8001c78 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2200      	movs	r2, #0
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7ff ff36 	bl	8001acc <SPI_WaitFlagStateUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	f043 0220 	orr.w	r2, r3, #32
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e000      	b.n	8001c78 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2200      	movs	r2, #0
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7ff ff18 	bl	8001acc <SPI_WaitFlagStateUntilTimeout>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca6:	f043 0220 	orr.w	r2, r3, #32
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e000      	b.n	8001cb4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e042      	b.n	8001d54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d106      	bne.n	8001ce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7fe fbba 	bl	800045c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2224      	movs	r2, #36	; 0x24
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f91d 	bl	8001f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695a      	ldr	r2, [r3, #20]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d16d      	bne.n	8001e58 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_UART_Transmit+0x2c>
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e066      	b.n	8001e5a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2221      	movs	r2, #33	; 0x21
 8001d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d9a:	f7fe fc8d 	bl	80006b8 <HAL_GetTick>
 8001d9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	88fa      	ldrh	r2, [r7, #6]
 8001da4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	88fa      	ldrh	r2, [r7, #6]
 8001daa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db4:	d108      	bne.n	8001dc8 <HAL_UART_Transmit+0x6c>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d104      	bne.n	8001dc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	e003      	b.n	8001dd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001dd0:	e02a      	b.n	8001e28 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f840 	bl	8001e62 <UART_WaitOnFlagUntilTimeout>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e036      	b.n	8001e5a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10b      	bne.n	8001e0a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	3302      	adds	r3, #2
 8001e06:	61bb      	str	r3, [r7, #24]
 8001e08:	e007      	b.n	8001e1a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	3301      	adds	r3, #1
 8001e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1cf      	bne.n	8001dd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2140      	movs	r1, #64	; 0x40
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f810 	bl	8001e62 <UART_WaitOnFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e006      	b.n	8001e5a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e000      	b.n	8001e5a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
  }
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3720      	adds	r7, #32
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b090      	sub	sp, #64	; 0x40
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e72:	e050      	b.n	8001f16 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7a:	d04c      	beq.n	8001f16 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e82:	f7fe fc19 	bl	80006b8 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d241      	bcs.n	8001f16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	330c      	adds	r3, #12
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9c:	e853 3f00 	ldrex	r3, [r3]
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	330c      	adds	r3, #12
 8001eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001eb2:	637a      	str	r2, [r7, #52]	; 0x34
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eba:	e841 2300 	strex	r3, r2, [r1]
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1e5      	bne.n	8001e92 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	3314      	adds	r3, #20
 8001ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	e853 3f00 	ldrex	r3, [r3]
 8001ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3314      	adds	r3, #20
 8001ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ee6:	623a      	str	r2, [r7, #32]
 8001ee8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eea:	69f9      	ldr	r1, [r7, #28]
 8001eec:	6a3a      	ldr	r2, [r7, #32]
 8001eee:	e841 2300 	strex	r3, r2, [r1]
 8001ef2:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1e5      	bne.n	8001ec6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e00f      	b.n	8001f36 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	bf0c      	ite	eq
 8001f26:	2301      	moveq	r3, #1
 8001f28:	2300      	movne	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d09f      	beq.n	8001e74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3740      	adds	r7, #64	; 0x40
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f7a:	f023 030c 	bic.w	r3, r3, #12
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	68b9      	ldr	r1, [r7, #8]
 8001f84:	430b      	orrs	r3, r1
 8001f86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a2c      	ldr	r2, [pc, #176]	; (8002054 <UART_SetConfig+0x114>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d103      	bne.n	8001fb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fa8:	f7ff fa12 	bl	80013d0 <HAL_RCC_GetPCLK2Freq>
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	e002      	b.n	8001fb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fb0:	f7ff f9fa 	bl	80013a8 <HAL_RCC_GetPCLK1Freq>
 8001fb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009a      	lsls	r2, r3, #2
 8001fc0:	441a      	add	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fcc:	4a22      	ldr	r2, [pc, #136]	; (8002058 <UART_SetConfig+0x118>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	0119      	lsls	r1, r3, #4
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	009a      	lsls	r2, r3, #2
 8001fe0:	441a      	add	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fec:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <UART_SetConfig+0x118>)
 8001fee:	fba3 0302 	umull	r0, r3, r3, r2
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	2064      	movs	r0, #100	; 0x64
 8001ff6:	fb00 f303 	mul.w	r3, r0, r3
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	3332      	adds	r3, #50	; 0x32
 8002000:	4a15      	ldr	r2, [pc, #84]	; (8002058 <UART_SetConfig+0x118>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800200c:	4419      	add	r1, r3
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	009a      	lsls	r2, r3, #2
 8002018:	441a      	add	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	fbb2 f2f3 	udiv	r2, r2, r3
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <UART_SetConfig+0x118>)
 8002026:	fba3 0302 	umull	r0, r3, r3, r2
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2064      	movs	r0, #100	; 0x64
 800202e:	fb00 f303 	mul.w	r3, r0, r3
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	3332      	adds	r3, #50	; 0x32
 8002038:	4a07      	ldr	r2, [pc, #28]	; (8002058 <UART_SetConfig+0x118>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	f003 020f 	and.w	r2, r3, #15
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	440a      	add	r2, r1
 800204a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40013800 	.word	0x40013800
 8002058:	51eb851f 	.word	0x51eb851f

0800205c <siprintf>:
 800205c:	b40e      	push	{r1, r2, r3}
 800205e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002062:	b500      	push	{lr}
 8002064:	b09c      	sub	sp, #112	; 0x70
 8002066:	ab1d      	add	r3, sp, #116	; 0x74
 8002068:	9002      	str	r0, [sp, #8]
 800206a:	9006      	str	r0, [sp, #24]
 800206c:	9107      	str	r1, [sp, #28]
 800206e:	9104      	str	r1, [sp, #16]
 8002070:	4808      	ldr	r0, [pc, #32]	; (8002094 <siprintf+0x38>)
 8002072:	4909      	ldr	r1, [pc, #36]	; (8002098 <siprintf+0x3c>)
 8002074:	f853 2b04 	ldr.w	r2, [r3], #4
 8002078:	9105      	str	r1, [sp, #20]
 800207a:	6800      	ldr	r0, [r0, #0]
 800207c:	a902      	add	r1, sp, #8
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	f000 f98e 	bl	80023a0 <_svfiprintf_r>
 8002084:	2200      	movs	r2, #0
 8002086:	9b02      	ldr	r3, [sp, #8]
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	b01c      	add	sp, #112	; 0x70
 800208c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002090:	b003      	add	sp, #12
 8002092:	4770      	bx	lr
 8002094:	20000058 	.word	0x20000058
 8002098:	ffff0208 	.word	0xffff0208

0800209c <memset>:
 800209c:	4603      	mov	r3, r0
 800209e:	4402      	add	r2, r0
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d100      	bne.n	80020a6 <memset+0xa>
 80020a4:	4770      	bx	lr
 80020a6:	f803 1b01 	strb.w	r1, [r3], #1
 80020aa:	e7f9      	b.n	80020a0 <memset+0x4>

080020ac <__errno>:
 80020ac:	4b01      	ldr	r3, [pc, #4]	; (80020b4 <__errno+0x8>)
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000058 	.word	0x20000058

080020b8 <__libc_init_array>:
 80020b8:	b570      	push	{r4, r5, r6, lr}
 80020ba:	2600      	movs	r6, #0
 80020bc:	4d0c      	ldr	r5, [pc, #48]	; (80020f0 <__libc_init_array+0x38>)
 80020be:	4c0d      	ldr	r4, [pc, #52]	; (80020f4 <__libc_init_array+0x3c>)
 80020c0:	1b64      	subs	r4, r4, r5
 80020c2:	10a4      	asrs	r4, r4, #2
 80020c4:	42a6      	cmp	r6, r4
 80020c6:	d109      	bne.n	80020dc <__libc_init_array+0x24>
 80020c8:	f000 fc7a 	bl	80029c0 <_init>
 80020cc:	2600      	movs	r6, #0
 80020ce:	4d0a      	ldr	r5, [pc, #40]	; (80020f8 <__libc_init_array+0x40>)
 80020d0:	4c0a      	ldr	r4, [pc, #40]	; (80020fc <__libc_init_array+0x44>)
 80020d2:	1b64      	subs	r4, r4, r5
 80020d4:	10a4      	asrs	r4, r4, #2
 80020d6:	42a6      	cmp	r6, r4
 80020d8:	d105      	bne.n	80020e6 <__libc_init_array+0x2e>
 80020da:	bd70      	pop	{r4, r5, r6, pc}
 80020dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80020e0:	4798      	blx	r3
 80020e2:	3601      	adds	r6, #1
 80020e4:	e7ee      	b.n	80020c4 <__libc_init_array+0xc>
 80020e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ea:	4798      	blx	r3
 80020ec:	3601      	adds	r6, #1
 80020ee:	e7f2      	b.n	80020d6 <__libc_init_array+0x1e>
 80020f0:	08002a4c 	.word	0x08002a4c
 80020f4:	08002a4c 	.word	0x08002a4c
 80020f8:	08002a4c 	.word	0x08002a4c
 80020fc:	08002a50 	.word	0x08002a50

08002100 <__retarget_lock_acquire_recursive>:
 8002100:	4770      	bx	lr

08002102 <__retarget_lock_release_recursive>:
 8002102:	4770      	bx	lr

08002104 <_free_r>:
 8002104:	b538      	push	{r3, r4, r5, lr}
 8002106:	4605      	mov	r5, r0
 8002108:	2900      	cmp	r1, #0
 800210a:	d040      	beq.n	800218e <_free_r+0x8a>
 800210c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002110:	1f0c      	subs	r4, r1, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	bfb8      	it	lt
 8002116:	18e4      	addlt	r4, r4, r3
 8002118:	f000 f8dc 	bl	80022d4 <__malloc_lock>
 800211c:	4a1c      	ldr	r2, [pc, #112]	; (8002190 <_free_r+0x8c>)
 800211e:	6813      	ldr	r3, [r2, #0]
 8002120:	b933      	cbnz	r3, 8002130 <_free_r+0x2c>
 8002122:	6063      	str	r3, [r4, #4]
 8002124:	6014      	str	r4, [r2, #0]
 8002126:	4628      	mov	r0, r5
 8002128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800212c:	f000 b8d8 	b.w	80022e0 <__malloc_unlock>
 8002130:	42a3      	cmp	r3, r4
 8002132:	d908      	bls.n	8002146 <_free_r+0x42>
 8002134:	6820      	ldr	r0, [r4, #0]
 8002136:	1821      	adds	r1, r4, r0
 8002138:	428b      	cmp	r3, r1
 800213a:	bf01      	itttt	eq
 800213c:	6819      	ldreq	r1, [r3, #0]
 800213e:	685b      	ldreq	r3, [r3, #4]
 8002140:	1809      	addeq	r1, r1, r0
 8002142:	6021      	streq	r1, [r4, #0]
 8002144:	e7ed      	b.n	8002122 <_free_r+0x1e>
 8002146:	461a      	mov	r2, r3
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	b10b      	cbz	r3, 8002150 <_free_r+0x4c>
 800214c:	42a3      	cmp	r3, r4
 800214e:	d9fa      	bls.n	8002146 <_free_r+0x42>
 8002150:	6811      	ldr	r1, [r2, #0]
 8002152:	1850      	adds	r0, r2, r1
 8002154:	42a0      	cmp	r0, r4
 8002156:	d10b      	bne.n	8002170 <_free_r+0x6c>
 8002158:	6820      	ldr	r0, [r4, #0]
 800215a:	4401      	add	r1, r0
 800215c:	1850      	adds	r0, r2, r1
 800215e:	4283      	cmp	r3, r0
 8002160:	6011      	str	r1, [r2, #0]
 8002162:	d1e0      	bne.n	8002126 <_free_r+0x22>
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4408      	add	r0, r1
 800216a:	6010      	str	r0, [r2, #0]
 800216c:	6053      	str	r3, [r2, #4]
 800216e:	e7da      	b.n	8002126 <_free_r+0x22>
 8002170:	d902      	bls.n	8002178 <_free_r+0x74>
 8002172:	230c      	movs	r3, #12
 8002174:	602b      	str	r3, [r5, #0]
 8002176:	e7d6      	b.n	8002126 <_free_r+0x22>
 8002178:	6820      	ldr	r0, [r4, #0]
 800217a:	1821      	adds	r1, r4, r0
 800217c:	428b      	cmp	r3, r1
 800217e:	bf01      	itttt	eq
 8002180:	6819      	ldreq	r1, [r3, #0]
 8002182:	685b      	ldreq	r3, [r3, #4]
 8002184:	1809      	addeq	r1, r1, r0
 8002186:	6021      	streq	r1, [r4, #0]
 8002188:	6063      	str	r3, [r4, #4]
 800218a:	6054      	str	r4, [r2, #4]
 800218c:	e7cb      	b.n	8002126 <_free_r+0x22>
 800218e:	bd38      	pop	{r3, r4, r5, pc}
 8002190:	200002e0 	.word	0x200002e0

08002194 <sbrk_aligned>:
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	4e0e      	ldr	r6, [pc, #56]	; (80021d0 <sbrk_aligned+0x3c>)
 8002198:	460c      	mov	r4, r1
 800219a:	6831      	ldr	r1, [r6, #0]
 800219c:	4605      	mov	r5, r0
 800219e:	b911      	cbnz	r1, 80021a6 <sbrk_aligned+0x12>
 80021a0:	f000 fbaa 	bl	80028f8 <_sbrk_r>
 80021a4:	6030      	str	r0, [r6, #0]
 80021a6:	4621      	mov	r1, r4
 80021a8:	4628      	mov	r0, r5
 80021aa:	f000 fba5 	bl	80028f8 <_sbrk_r>
 80021ae:	1c43      	adds	r3, r0, #1
 80021b0:	d00a      	beq.n	80021c8 <sbrk_aligned+0x34>
 80021b2:	1cc4      	adds	r4, r0, #3
 80021b4:	f024 0403 	bic.w	r4, r4, #3
 80021b8:	42a0      	cmp	r0, r4
 80021ba:	d007      	beq.n	80021cc <sbrk_aligned+0x38>
 80021bc:	1a21      	subs	r1, r4, r0
 80021be:	4628      	mov	r0, r5
 80021c0:	f000 fb9a 	bl	80028f8 <_sbrk_r>
 80021c4:	3001      	adds	r0, #1
 80021c6:	d101      	bne.n	80021cc <sbrk_aligned+0x38>
 80021c8:	f04f 34ff 	mov.w	r4, #4294967295
 80021cc:	4620      	mov	r0, r4
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
 80021d0:	200002e4 	.word	0x200002e4

080021d4 <_malloc_r>:
 80021d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021d8:	1ccd      	adds	r5, r1, #3
 80021da:	f025 0503 	bic.w	r5, r5, #3
 80021de:	3508      	adds	r5, #8
 80021e0:	2d0c      	cmp	r5, #12
 80021e2:	bf38      	it	cc
 80021e4:	250c      	movcc	r5, #12
 80021e6:	2d00      	cmp	r5, #0
 80021e8:	4607      	mov	r7, r0
 80021ea:	db01      	blt.n	80021f0 <_malloc_r+0x1c>
 80021ec:	42a9      	cmp	r1, r5
 80021ee:	d905      	bls.n	80021fc <_malloc_r+0x28>
 80021f0:	230c      	movs	r3, #12
 80021f2:	2600      	movs	r6, #0
 80021f4:	603b      	str	r3, [r7, #0]
 80021f6:	4630      	mov	r0, r6
 80021f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80022d0 <_malloc_r+0xfc>
 8002200:	f000 f868 	bl	80022d4 <__malloc_lock>
 8002204:	f8d8 3000 	ldr.w	r3, [r8]
 8002208:	461c      	mov	r4, r3
 800220a:	bb5c      	cbnz	r4, 8002264 <_malloc_r+0x90>
 800220c:	4629      	mov	r1, r5
 800220e:	4638      	mov	r0, r7
 8002210:	f7ff ffc0 	bl	8002194 <sbrk_aligned>
 8002214:	1c43      	adds	r3, r0, #1
 8002216:	4604      	mov	r4, r0
 8002218:	d155      	bne.n	80022c6 <_malloc_r+0xf2>
 800221a:	f8d8 4000 	ldr.w	r4, [r8]
 800221e:	4626      	mov	r6, r4
 8002220:	2e00      	cmp	r6, #0
 8002222:	d145      	bne.n	80022b0 <_malloc_r+0xdc>
 8002224:	2c00      	cmp	r4, #0
 8002226:	d048      	beq.n	80022ba <_malloc_r+0xe6>
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	4631      	mov	r1, r6
 800222c:	4638      	mov	r0, r7
 800222e:	eb04 0903 	add.w	r9, r4, r3
 8002232:	f000 fb61 	bl	80028f8 <_sbrk_r>
 8002236:	4581      	cmp	r9, r0
 8002238:	d13f      	bne.n	80022ba <_malloc_r+0xe6>
 800223a:	6821      	ldr	r1, [r4, #0]
 800223c:	4638      	mov	r0, r7
 800223e:	1a6d      	subs	r5, r5, r1
 8002240:	4629      	mov	r1, r5
 8002242:	f7ff ffa7 	bl	8002194 <sbrk_aligned>
 8002246:	3001      	adds	r0, #1
 8002248:	d037      	beq.n	80022ba <_malloc_r+0xe6>
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	442b      	add	r3, r5
 800224e:	6023      	str	r3, [r4, #0]
 8002250:	f8d8 3000 	ldr.w	r3, [r8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d038      	beq.n	80022ca <_malloc_r+0xf6>
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	42a2      	cmp	r2, r4
 800225c:	d12b      	bne.n	80022b6 <_malloc_r+0xe2>
 800225e:	2200      	movs	r2, #0
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	e00f      	b.n	8002284 <_malloc_r+0xb0>
 8002264:	6822      	ldr	r2, [r4, #0]
 8002266:	1b52      	subs	r2, r2, r5
 8002268:	d41f      	bmi.n	80022aa <_malloc_r+0xd6>
 800226a:	2a0b      	cmp	r2, #11
 800226c:	d917      	bls.n	800229e <_malloc_r+0xca>
 800226e:	1961      	adds	r1, r4, r5
 8002270:	42a3      	cmp	r3, r4
 8002272:	6025      	str	r5, [r4, #0]
 8002274:	bf18      	it	ne
 8002276:	6059      	strne	r1, [r3, #4]
 8002278:	6863      	ldr	r3, [r4, #4]
 800227a:	bf08      	it	eq
 800227c:	f8c8 1000 	streq.w	r1, [r8]
 8002280:	5162      	str	r2, [r4, r5]
 8002282:	604b      	str	r3, [r1, #4]
 8002284:	4638      	mov	r0, r7
 8002286:	f104 060b 	add.w	r6, r4, #11
 800228a:	f000 f829 	bl	80022e0 <__malloc_unlock>
 800228e:	f026 0607 	bic.w	r6, r6, #7
 8002292:	1d23      	adds	r3, r4, #4
 8002294:	1af2      	subs	r2, r6, r3
 8002296:	d0ae      	beq.n	80021f6 <_malloc_r+0x22>
 8002298:	1b9b      	subs	r3, r3, r6
 800229a:	50a3      	str	r3, [r4, r2]
 800229c:	e7ab      	b.n	80021f6 <_malloc_r+0x22>
 800229e:	42a3      	cmp	r3, r4
 80022a0:	6862      	ldr	r2, [r4, #4]
 80022a2:	d1dd      	bne.n	8002260 <_malloc_r+0x8c>
 80022a4:	f8c8 2000 	str.w	r2, [r8]
 80022a8:	e7ec      	b.n	8002284 <_malloc_r+0xb0>
 80022aa:	4623      	mov	r3, r4
 80022ac:	6864      	ldr	r4, [r4, #4]
 80022ae:	e7ac      	b.n	800220a <_malloc_r+0x36>
 80022b0:	4634      	mov	r4, r6
 80022b2:	6876      	ldr	r6, [r6, #4]
 80022b4:	e7b4      	b.n	8002220 <_malloc_r+0x4c>
 80022b6:	4613      	mov	r3, r2
 80022b8:	e7cc      	b.n	8002254 <_malloc_r+0x80>
 80022ba:	230c      	movs	r3, #12
 80022bc:	4638      	mov	r0, r7
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	f000 f80e 	bl	80022e0 <__malloc_unlock>
 80022c4:	e797      	b.n	80021f6 <_malloc_r+0x22>
 80022c6:	6025      	str	r5, [r4, #0]
 80022c8:	e7dc      	b.n	8002284 <_malloc_r+0xb0>
 80022ca:	605b      	str	r3, [r3, #4]
 80022cc:	deff      	udf	#255	; 0xff
 80022ce:	bf00      	nop
 80022d0:	200002e0 	.word	0x200002e0

080022d4 <__malloc_lock>:
 80022d4:	4801      	ldr	r0, [pc, #4]	; (80022dc <__malloc_lock+0x8>)
 80022d6:	f7ff bf13 	b.w	8002100 <__retarget_lock_acquire_recursive>
 80022da:	bf00      	nop
 80022dc:	200002dc 	.word	0x200002dc

080022e0 <__malloc_unlock>:
 80022e0:	4801      	ldr	r0, [pc, #4]	; (80022e8 <__malloc_unlock+0x8>)
 80022e2:	f7ff bf0e 	b.w	8002102 <__retarget_lock_release_recursive>
 80022e6:	bf00      	nop
 80022e8:	200002dc 	.word	0x200002dc

080022ec <__ssputs_r>:
 80022ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022f0:	461f      	mov	r7, r3
 80022f2:	688e      	ldr	r6, [r1, #8]
 80022f4:	4682      	mov	sl, r0
 80022f6:	42be      	cmp	r6, r7
 80022f8:	460c      	mov	r4, r1
 80022fa:	4690      	mov	r8, r2
 80022fc:	680b      	ldr	r3, [r1, #0]
 80022fe:	d82c      	bhi.n	800235a <__ssputs_r+0x6e>
 8002300:	898a      	ldrh	r2, [r1, #12]
 8002302:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002306:	d026      	beq.n	8002356 <__ssputs_r+0x6a>
 8002308:	6965      	ldr	r5, [r4, #20]
 800230a:	6909      	ldr	r1, [r1, #16]
 800230c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002310:	eba3 0901 	sub.w	r9, r3, r1
 8002314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002318:	1c7b      	adds	r3, r7, #1
 800231a:	444b      	add	r3, r9
 800231c:	106d      	asrs	r5, r5, #1
 800231e:	429d      	cmp	r5, r3
 8002320:	bf38      	it	cc
 8002322:	461d      	movcc	r5, r3
 8002324:	0553      	lsls	r3, r2, #21
 8002326:	d527      	bpl.n	8002378 <__ssputs_r+0x8c>
 8002328:	4629      	mov	r1, r5
 800232a:	f7ff ff53 	bl	80021d4 <_malloc_r>
 800232e:	4606      	mov	r6, r0
 8002330:	b360      	cbz	r0, 800238c <__ssputs_r+0xa0>
 8002332:	464a      	mov	r2, r9
 8002334:	6921      	ldr	r1, [r4, #16]
 8002336:	f000 fafd 	bl	8002934 <memcpy>
 800233a:	89a3      	ldrh	r3, [r4, #12]
 800233c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002344:	81a3      	strh	r3, [r4, #12]
 8002346:	6126      	str	r6, [r4, #16]
 8002348:	444e      	add	r6, r9
 800234a:	6026      	str	r6, [r4, #0]
 800234c:	463e      	mov	r6, r7
 800234e:	6165      	str	r5, [r4, #20]
 8002350:	eba5 0509 	sub.w	r5, r5, r9
 8002354:	60a5      	str	r5, [r4, #8]
 8002356:	42be      	cmp	r6, r7
 8002358:	d900      	bls.n	800235c <__ssputs_r+0x70>
 800235a:	463e      	mov	r6, r7
 800235c:	4632      	mov	r2, r6
 800235e:	4641      	mov	r1, r8
 8002360:	6820      	ldr	r0, [r4, #0]
 8002362:	f000 faaf 	bl	80028c4 <memmove>
 8002366:	2000      	movs	r0, #0
 8002368:	68a3      	ldr	r3, [r4, #8]
 800236a:	1b9b      	subs	r3, r3, r6
 800236c:	60a3      	str	r3, [r4, #8]
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	4433      	add	r3, r6
 8002372:	6023      	str	r3, [r4, #0]
 8002374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002378:	462a      	mov	r2, r5
 800237a:	f000 fae9 	bl	8002950 <_realloc_r>
 800237e:	4606      	mov	r6, r0
 8002380:	2800      	cmp	r0, #0
 8002382:	d1e0      	bne.n	8002346 <__ssputs_r+0x5a>
 8002384:	4650      	mov	r0, sl
 8002386:	6921      	ldr	r1, [r4, #16]
 8002388:	f7ff febc 	bl	8002104 <_free_r>
 800238c:	230c      	movs	r3, #12
 800238e:	f8ca 3000 	str.w	r3, [sl]
 8002392:	89a3      	ldrh	r3, [r4, #12]
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800239c:	81a3      	strh	r3, [r4, #12]
 800239e:	e7e9      	b.n	8002374 <__ssputs_r+0x88>

080023a0 <_svfiprintf_r>:
 80023a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023a4:	4698      	mov	r8, r3
 80023a6:	898b      	ldrh	r3, [r1, #12]
 80023a8:	4607      	mov	r7, r0
 80023aa:	061b      	lsls	r3, r3, #24
 80023ac:	460d      	mov	r5, r1
 80023ae:	4614      	mov	r4, r2
 80023b0:	b09d      	sub	sp, #116	; 0x74
 80023b2:	d50e      	bpl.n	80023d2 <_svfiprintf_r+0x32>
 80023b4:	690b      	ldr	r3, [r1, #16]
 80023b6:	b963      	cbnz	r3, 80023d2 <_svfiprintf_r+0x32>
 80023b8:	2140      	movs	r1, #64	; 0x40
 80023ba:	f7ff ff0b 	bl	80021d4 <_malloc_r>
 80023be:	6028      	str	r0, [r5, #0]
 80023c0:	6128      	str	r0, [r5, #16]
 80023c2:	b920      	cbnz	r0, 80023ce <_svfiprintf_r+0x2e>
 80023c4:	230c      	movs	r3, #12
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	e0d0      	b.n	8002570 <_svfiprintf_r+0x1d0>
 80023ce:	2340      	movs	r3, #64	; 0x40
 80023d0:	616b      	str	r3, [r5, #20]
 80023d2:	2300      	movs	r3, #0
 80023d4:	9309      	str	r3, [sp, #36]	; 0x24
 80023d6:	2320      	movs	r3, #32
 80023d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023dc:	2330      	movs	r3, #48	; 0x30
 80023de:	f04f 0901 	mov.w	r9, #1
 80023e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80023e6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002588 <_svfiprintf_r+0x1e8>
 80023ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023ee:	4623      	mov	r3, r4
 80023f0:	469a      	mov	sl, r3
 80023f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023f6:	b10a      	cbz	r2, 80023fc <_svfiprintf_r+0x5c>
 80023f8:	2a25      	cmp	r2, #37	; 0x25
 80023fa:	d1f9      	bne.n	80023f0 <_svfiprintf_r+0x50>
 80023fc:	ebba 0b04 	subs.w	fp, sl, r4
 8002400:	d00b      	beq.n	800241a <_svfiprintf_r+0x7a>
 8002402:	465b      	mov	r3, fp
 8002404:	4622      	mov	r2, r4
 8002406:	4629      	mov	r1, r5
 8002408:	4638      	mov	r0, r7
 800240a:	f7ff ff6f 	bl	80022ec <__ssputs_r>
 800240e:	3001      	adds	r0, #1
 8002410:	f000 80a9 	beq.w	8002566 <_svfiprintf_r+0x1c6>
 8002414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002416:	445a      	add	r2, fp
 8002418:	9209      	str	r2, [sp, #36]	; 0x24
 800241a:	f89a 3000 	ldrb.w	r3, [sl]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80a1 	beq.w	8002566 <_svfiprintf_r+0x1c6>
 8002424:	2300      	movs	r3, #0
 8002426:	f04f 32ff 	mov.w	r2, #4294967295
 800242a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800242e:	f10a 0a01 	add.w	sl, sl, #1
 8002432:	9304      	str	r3, [sp, #16]
 8002434:	9307      	str	r3, [sp, #28]
 8002436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800243a:	931a      	str	r3, [sp, #104]	; 0x68
 800243c:	4654      	mov	r4, sl
 800243e:	2205      	movs	r2, #5
 8002440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002444:	4850      	ldr	r0, [pc, #320]	; (8002588 <_svfiprintf_r+0x1e8>)
 8002446:	f000 fa67 	bl	8002918 <memchr>
 800244a:	9a04      	ldr	r2, [sp, #16]
 800244c:	b9d8      	cbnz	r0, 8002486 <_svfiprintf_r+0xe6>
 800244e:	06d0      	lsls	r0, r2, #27
 8002450:	bf44      	itt	mi
 8002452:	2320      	movmi	r3, #32
 8002454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002458:	0711      	lsls	r1, r2, #28
 800245a:	bf44      	itt	mi
 800245c:	232b      	movmi	r3, #43	; 0x2b
 800245e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002462:	f89a 3000 	ldrb.w	r3, [sl]
 8002466:	2b2a      	cmp	r3, #42	; 0x2a
 8002468:	d015      	beq.n	8002496 <_svfiprintf_r+0xf6>
 800246a:	4654      	mov	r4, sl
 800246c:	2000      	movs	r0, #0
 800246e:	f04f 0c0a 	mov.w	ip, #10
 8002472:	9a07      	ldr	r2, [sp, #28]
 8002474:	4621      	mov	r1, r4
 8002476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800247a:	3b30      	subs	r3, #48	; 0x30
 800247c:	2b09      	cmp	r3, #9
 800247e:	d94d      	bls.n	800251c <_svfiprintf_r+0x17c>
 8002480:	b1b0      	cbz	r0, 80024b0 <_svfiprintf_r+0x110>
 8002482:	9207      	str	r2, [sp, #28]
 8002484:	e014      	b.n	80024b0 <_svfiprintf_r+0x110>
 8002486:	eba0 0308 	sub.w	r3, r0, r8
 800248a:	fa09 f303 	lsl.w	r3, r9, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	46a2      	mov	sl, r4
 8002492:	9304      	str	r3, [sp, #16]
 8002494:	e7d2      	b.n	800243c <_svfiprintf_r+0x9c>
 8002496:	9b03      	ldr	r3, [sp, #12]
 8002498:	1d19      	adds	r1, r3, #4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	9103      	str	r1, [sp, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bfbb      	ittet	lt
 80024a2:	425b      	neglt	r3, r3
 80024a4:	f042 0202 	orrlt.w	r2, r2, #2
 80024a8:	9307      	strge	r3, [sp, #28]
 80024aa:	9307      	strlt	r3, [sp, #28]
 80024ac:	bfb8      	it	lt
 80024ae:	9204      	strlt	r2, [sp, #16]
 80024b0:	7823      	ldrb	r3, [r4, #0]
 80024b2:	2b2e      	cmp	r3, #46	; 0x2e
 80024b4:	d10c      	bne.n	80024d0 <_svfiprintf_r+0x130>
 80024b6:	7863      	ldrb	r3, [r4, #1]
 80024b8:	2b2a      	cmp	r3, #42	; 0x2a
 80024ba:	d134      	bne.n	8002526 <_svfiprintf_r+0x186>
 80024bc:	9b03      	ldr	r3, [sp, #12]
 80024be:	3402      	adds	r4, #2
 80024c0:	1d1a      	adds	r2, r3, #4
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	9203      	str	r2, [sp, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	bfb8      	it	lt
 80024ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80024ce:	9305      	str	r3, [sp, #20]
 80024d0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800258c <_svfiprintf_r+0x1ec>
 80024d4:	2203      	movs	r2, #3
 80024d6:	4650      	mov	r0, sl
 80024d8:	7821      	ldrb	r1, [r4, #0]
 80024da:	f000 fa1d 	bl	8002918 <memchr>
 80024de:	b138      	cbz	r0, 80024f0 <_svfiprintf_r+0x150>
 80024e0:	2240      	movs	r2, #64	; 0x40
 80024e2:	9b04      	ldr	r3, [sp, #16]
 80024e4:	eba0 000a 	sub.w	r0, r0, sl
 80024e8:	4082      	lsls	r2, r0
 80024ea:	4313      	orrs	r3, r2
 80024ec:	3401      	adds	r4, #1
 80024ee:	9304      	str	r3, [sp, #16]
 80024f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024f4:	2206      	movs	r2, #6
 80024f6:	4826      	ldr	r0, [pc, #152]	; (8002590 <_svfiprintf_r+0x1f0>)
 80024f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024fc:	f000 fa0c 	bl	8002918 <memchr>
 8002500:	2800      	cmp	r0, #0
 8002502:	d038      	beq.n	8002576 <_svfiprintf_r+0x1d6>
 8002504:	4b23      	ldr	r3, [pc, #140]	; (8002594 <_svfiprintf_r+0x1f4>)
 8002506:	bb1b      	cbnz	r3, 8002550 <_svfiprintf_r+0x1b0>
 8002508:	9b03      	ldr	r3, [sp, #12]
 800250a:	3307      	adds	r3, #7
 800250c:	f023 0307 	bic.w	r3, r3, #7
 8002510:	3308      	adds	r3, #8
 8002512:	9303      	str	r3, [sp, #12]
 8002514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002516:	4433      	add	r3, r6
 8002518:	9309      	str	r3, [sp, #36]	; 0x24
 800251a:	e768      	b.n	80023ee <_svfiprintf_r+0x4e>
 800251c:	460c      	mov	r4, r1
 800251e:	2001      	movs	r0, #1
 8002520:	fb0c 3202 	mla	r2, ip, r2, r3
 8002524:	e7a6      	b.n	8002474 <_svfiprintf_r+0xd4>
 8002526:	2300      	movs	r3, #0
 8002528:	f04f 0c0a 	mov.w	ip, #10
 800252c:	4619      	mov	r1, r3
 800252e:	3401      	adds	r4, #1
 8002530:	9305      	str	r3, [sp, #20]
 8002532:	4620      	mov	r0, r4
 8002534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002538:	3a30      	subs	r2, #48	; 0x30
 800253a:	2a09      	cmp	r2, #9
 800253c:	d903      	bls.n	8002546 <_svfiprintf_r+0x1a6>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0c6      	beq.n	80024d0 <_svfiprintf_r+0x130>
 8002542:	9105      	str	r1, [sp, #20]
 8002544:	e7c4      	b.n	80024d0 <_svfiprintf_r+0x130>
 8002546:	4604      	mov	r4, r0
 8002548:	2301      	movs	r3, #1
 800254a:	fb0c 2101 	mla	r1, ip, r1, r2
 800254e:	e7f0      	b.n	8002532 <_svfiprintf_r+0x192>
 8002550:	ab03      	add	r3, sp, #12
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	462a      	mov	r2, r5
 8002556:	4638      	mov	r0, r7
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <_svfiprintf_r+0x1f8>)
 800255a:	a904      	add	r1, sp, #16
 800255c:	f3af 8000 	nop.w
 8002560:	1c42      	adds	r2, r0, #1
 8002562:	4606      	mov	r6, r0
 8002564:	d1d6      	bne.n	8002514 <_svfiprintf_r+0x174>
 8002566:	89ab      	ldrh	r3, [r5, #12]
 8002568:	065b      	lsls	r3, r3, #25
 800256a:	f53f af2d 	bmi.w	80023c8 <_svfiprintf_r+0x28>
 800256e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002570:	b01d      	add	sp, #116	; 0x74
 8002572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002576:	ab03      	add	r3, sp, #12
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	462a      	mov	r2, r5
 800257c:	4638      	mov	r0, r7
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <_svfiprintf_r+0x1f8>)
 8002580:	a904      	add	r1, sp, #16
 8002582:	f000 f87d 	bl	8002680 <_printf_i>
 8002586:	e7eb      	b.n	8002560 <_svfiprintf_r+0x1c0>
 8002588:	08002a16 	.word	0x08002a16
 800258c:	08002a1c 	.word	0x08002a1c
 8002590:	08002a20 	.word	0x08002a20
 8002594:	00000000 	.word	0x00000000
 8002598:	080022ed 	.word	0x080022ed

0800259c <_printf_common>:
 800259c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025a0:	4616      	mov	r6, r2
 80025a2:	4699      	mov	r9, r3
 80025a4:	688a      	ldr	r2, [r1, #8]
 80025a6:	690b      	ldr	r3, [r1, #16]
 80025a8:	4607      	mov	r7, r0
 80025aa:	4293      	cmp	r3, r2
 80025ac:	bfb8      	it	lt
 80025ae:	4613      	movlt	r3, r2
 80025b0:	6033      	str	r3, [r6, #0]
 80025b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025b6:	460c      	mov	r4, r1
 80025b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025bc:	b10a      	cbz	r2, 80025c2 <_printf_common+0x26>
 80025be:	3301      	adds	r3, #1
 80025c0:	6033      	str	r3, [r6, #0]
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	0699      	lsls	r1, r3, #26
 80025c6:	bf42      	ittt	mi
 80025c8:	6833      	ldrmi	r3, [r6, #0]
 80025ca:	3302      	addmi	r3, #2
 80025cc:	6033      	strmi	r3, [r6, #0]
 80025ce:	6825      	ldr	r5, [r4, #0]
 80025d0:	f015 0506 	ands.w	r5, r5, #6
 80025d4:	d106      	bne.n	80025e4 <_printf_common+0x48>
 80025d6:	f104 0a19 	add.w	sl, r4, #25
 80025da:	68e3      	ldr	r3, [r4, #12]
 80025dc:	6832      	ldr	r2, [r6, #0]
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	42ab      	cmp	r3, r5
 80025e2:	dc2b      	bgt.n	800263c <_printf_common+0xa0>
 80025e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80025e8:	1e13      	subs	r3, r2, #0
 80025ea:	6822      	ldr	r2, [r4, #0]
 80025ec:	bf18      	it	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	0692      	lsls	r2, r2, #26
 80025f2:	d430      	bmi.n	8002656 <_printf_common+0xba>
 80025f4:	4649      	mov	r1, r9
 80025f6:	4638      	mov	r0, r7
 80025f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025fc:	47c0      	blx	r8
 80025fe:	3001      	adds	r0, #1
 8002600:	d023      	beq.n	800264a <_printf_common+0xae>
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	6922      	ldr	r2, [r4, #16]
 8002606:	f003 0306 	and.w	r3, r3, #6
 800260a:	2b04      	cmp	r3, #4
 800260c:	bf14      	ite	ne
 800260e:	2500      	movne	r5, #0
 8002610:	6833      	ldreq	r3, [r6, #0]
 8002612:	f04f 0600 	mov.w	r6, #0
 8002616:	bf08      	it	eq
 8002618:	68e5      	ldreq	r5, [r4, #12]
 800261a:	f104 041a 	add.w	r4, r4, #26
 800261e:	bf08      	it	eq
 8002620:	1aed      	subeq	r5, r5, r3
 8002622:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002626:	bf08      	it	eq
 8002628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800262c:	4293      	cmp	r3, r2
 800262e:	bfc4      	itt	gt
 8002630:	1a9b      	subgt	r3, r3, r2
 8002632:	18ed      	addgt	r5, r5, r3
 8002634:	42b5      	cmp	r5, r6
 8002636:	d11a      	bne.n	800266e <_printf_common+0xd2>
 8002638:	2000      	movs	r0, #0
 800263a:	e008      	b.n	800264e <_printf_common+0xb2>
 800263c:	2301      	movs	r3, #1
 800263e:	4652      	mov	r2, sl
 8002640:	4649      	mov	r1, r9
 8002642:	4638      	mov	r0, r7
 8002644:	47c0      	blx	r8
 8002646:	3001      	adds	r0, #1
 8002648:	d103      	bne.n	8002652 <_printf_common+0xb6>
 800264a:	f04f 30ff 	mov.w	r0, #4294967295
 800264e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002652:	3501      	adds	r5, #1
 8002654:	e7c1      	b.n	80025da <_printf_common+0x3e>
 8002656:	2030      	movs	r0, #48	; 0x30
 8002658:	18e1      	adds	r1, r4, r3
 800265a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002664:	4422      	add	r2, r4
 8002666:	3302      	adds	r3, #2
 8002668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800266c:	e7c2      	b.n	80025f4 <_printf_common+0x58>
 800266e:	2301      	movs	r3, #1
 8002670:	4622      	mov	r2, r4
 8002672:	4649      	mov	r1, r9
 8002674:	4638      	mov	r0, r7
 8002676:	47c0      	blx	r8
 8002678:	3001      	adds	r0, #1
 800267a:	d0e6      	beq.n	800264a <_printf_common+0xae>
 800267c:	3601      	adds	r6, #1
 800267e:	e7d9      	b.n	8002634 <_printf_common+0x98>

08002680 <_printf_i>:
 8002680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002684:	7e0f      	ldrb	r7, [r1, #24]
 8002686:	4691      	mov	r9, r2
 8002688:	2f78      	cmp	r7, #120	; 0x78
 800268a:	4680      	mov	r8, r0
 800268c:	460c      	mov	r4, r1
 800268e:	469a      	mov	sl, r3
 8002690:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002696:	d807      	bhi.n	80026a8 <_printf_i+0x28>
 8002698:	2f62      	cmp	r7, #98	; 0x62
 800269a:	d80a      	bhi.n	80026b2 <_printf_i+0x32>
 800269c:	2f00      	cmp	r7, #0
 800269e:	f000 80d5 	beq.w	800284c <_printf_i+0x1cc>
 80026a2:	2f58      	cmp	r7, #88	; 0x58
 80026a4:	f000 80c1 	beq.w	800282a <_printf_i+0x1aa>
 80026a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80026b0:	e03a      	b.n	8002728 <_printf_i+0xa8>
 80026b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80026b6:	2b15      	cmp	r3, #21
 80026b8:	d8f6      	bhi.n	80026a8 <_printf_i+0x28>
 80026ba:	a101      	add	r1, pc, #4	; (adr r1, 80026c0 <_printf_i+0x40>)
 80026bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026c0:	08002719 	.word	0x08002719
 80026c4:	0800272d 	.word	0x0800272d
 80026c8:	080026a9 	.word	0x080026a9
 80026cc:	080026a9 	.word	0x080026a9
 80026d0:	080026a9 	.word	0x080026a9
 80026d4:	080026a9 	.word	0x080026a9
 80026d8:	0800272d 	.word	0x0800272d
 80026dc:	080026a9 	.word	0x080026a9
 80026e0:	080026a9 	.word	0x080026a9
 80026e4:	080026a9 	.word	0x080026a9
 80026e8:	080026a9 	.word	0x080026a9
 80026ec:	08002833 	.word	0x08002833
 80026f0:	08002759 	.word	0x08002759
 80026f4:	080027ed 	.word	0x080027ed
 80026f8:	080026a9 	.word	0x080026a9
 80026fc:	080026a9 	.word	0x080026a9
 8002700:	08002855 	.word	0x08002855
 8002704:	080026a9 	.word	0x080026a9
 8002708:	08002759 	.word	0x08002759
 800270c:	080026a9 	.word	0x080026a9
 8002710:	080026a9 	.word	0x080026a9
 8002714:	080027f5 	.word	0x080027f5
 8002718:	682b      	ldr	r3, [r5, #0]
 800271a:	1d1a      	adds	r2, r3, #4
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	602a      	str	r2, [r5, #0]
 8002720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002728:	2301      	movs	r3, #1
 800272a:	e0a0      	b.n	800286e <_printf_i+0x1ee>
 800272c:	6820      	ldr	r0, [r4, #0]
 800272e:	682b      	ldr	r3, [r5, #0]
 8002730:	0607      	lsls	r7, r0, #24
 8002732:	f103 0104 	add.w	r1, r3, #4
 8002736:	6029      	str	r1, [r5, #0]
 8002738:	d501      	bpl.n	800273e <_printf_i+0xbe>
 800273a:	681e      	ldr	r6, [r3, #0]
 800273c:	e003      	b.n	8002746 <_printf_i+0xc6>
 800273e:	0646      	lsls	r6, r0, #25
 8002740:	d5fb      	bpl.n	800273a <_printf_i+0xba>
 8002742:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002746:	2e00      	cmp	r6, #0
 8002748:	da03      	bge.n	8002752 <_printf_i+0xd2>
 800274a:	232d      	movs	r3, #45	; 0x2d
 800274c:	4276      	negs	r6, r6
 800274e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002752:	230a      	movs	r3, #10
 8002754:	4859      	ldr	r0, [pc, #356]	; (80028bc <_printf_i+0x23c>)
 8002756:	e012      	b.n	800277e <_printf_i+0xfe>
 8002758:	682b      	ldr	r3, [r5, #0]
 800275a:	6820      	ldr	r0, [r4, #0]
 800275c:	1d19      	adds	r1, r3, #4
 800275e:	6029      	str	r1, [r5, #0]
 8002760:	0605      	lsls	r5, r0, #24
 8002762:	d501      	bpl.n	8002768 <_printf_i+0xe8>
 8002764:	681e      	ldr	r6, [r3, #0]
 8002766:	e002      	b.n	800276e <_printf_i+0xee>
 8002768:	0641      	lsls	r1, r0, #25
 800276a:	d5fb      	bpl.n	8002764 <_printf_i+0xe4>
 800276c:	881e      	ldrh	r6, [r3, #0]
 800276e:	2f6f      	cmp	r7, #111	; 0x6f
 8002770:	bf0c      	ite	eq
 8002772:	2308      	moveq	r3, #8
 8002774:	230a      	movne	r3, #10
 8002776:	4851      	ldr	r0, [pc, #324]	; (80028bc <_printf_i+0x23c>)
 8002778:	2100      	movs	r1, #0
 800277a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800277e:	6865      	ldr	r5, [r4, #4]
 8002780:	2d00      	cmp	r5, #0
 8002782:	bfa8      	it	ge
 8002784:	6821      	ldrge	r1, [r4, #0]
 8002786:	60a5      	str	r5, [r4, #8]
 8002788:	bfa4      	itt	ge
 800278a:	f021 0104 	bicge.w	r1, r1, #4
 800278e:	6021      	strge	r1, [r4, #0]
 8002790:	b90e      	cbnz	r6, 8002796 <_printf_i+0x116>
 8002792:	2d00      	cmp	r5, #0
 8002794:	d04b      	beq.n	800282e <_printf_i+0x1ae>
 8002796:	4615      	mov	r5, r2
 8002798:	fbb6 f1f3 	udiv	r1, r6, r3
 800279c:	fb03 6711 	mls	r7, r3, r1, r6
 80027a0:	5dc7      	ldrb	r7, [r0, r7]
 80027a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80027a6:	4637      	mov	r7, r6
 80027a8:	42bb      	cmp	r3, r7
 80027aa:	460e      	mov	r6, r1
 80027ac:	d9f4      	bls.n	8002798 <_printf_i+0x118>
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d10b      	bne.n	80027ca <_printf_i+0x14a>
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	07de      	lsls	r6, r3, #31
 80027b6:	d508      	bpl.n	80027ca <_printf_i+0x14a>
 80027b8:	6923      	ldr	r3, [r4, #16]
 80027ba:	6861      	ldr	r1, [r4, #4]
 80027bc:	4299      	cmp	r1, r3
 80027be:	bfde      	ittt	le
 80027c0:	2330      	movle	r3, #48	; 0x30
 80027c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80027ca:	1b52      	subs	r2, r2, r5
 80027cc:	6122      	str	r2, [r4, #16]
 80027ce:	464b      	mov	r3, r9
 80027d0:	4621      	mov	r1, r4
 80027d2:	4640      	mov	r0, r8
 80027d4:	f8cd a000 	str.w	sl, [sp]
 80027d8:	aa03      	add	r2, sp, #12
 80027da:	f7ff fedf 	bl	800259c <_printf_common>
 80027de:	3001      	adds	r0, #1
 80027e0:	d14a      	bne.n	8002878 <_printf_i+0x1f8>
 80027e2:	f04f 30ff 	mov.w	r0, #4294967295
 80027e6:	b004      	add	sp, #16
 80027e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ec:	6823      	ldr	r3, [r4, #0]
 80027ee:	f043 0320 	orr.w	r3, r3, #32
 80027f2:	6023      	str	r3, [r4, #0]
 80027f4:	2778      	movs	r7, #120	; 0x78
 80027f6:	4832      	ldr	r0, [pc, #200]	; (80028c0 <_printf_i+0x240>)
 80027f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	6829      	ldr	r1, [r5, #0]
 8002800:	061f      	lsls	r7, r3, #24
 8002802:	f851 6b04 	ldr.w	r6, [r1], #4
 8002806:	d402      	bmi.n	800280e <_printf_i+0x18e>
 8002808:	065f      	lsls	r7, r3, #25
 800280a:	bf48      	it	mi
 800280c:	b2b6      	uxthmi	r6, r6
 800280e:	07df      	lsls	r7, r3, #31
 8002810:	bf48      	it	mi
 8002812:	f043 0320 	orrmi.w	r3, r3, #32
 8002816:	6029      	str	r1, [r5, #0]
 8002818:	bf48      	it	mi
 800281a:	6023      	strmi	r3, [r4, #0]
 800281c:	b91e      	cbnz	r6, 8002826 <_printf_i+0x1a6>
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	f023 0320 	bic.w	r3, r3, #32
 8002824:	6023      	str	r3, [r4, #0]
 8002826:	2310      	movs	r3, #16
 8002828:	e7a6      	b.n	8002778 <_printf_i+0xf8>
 800282a:	4824      	ldr	r0, [pc, #144]	; (80028bc <_printf_i+0x23c>)
 800282c:	e7e4      	b.n	80027f8 <_printf_i+0x178>
 800282e:	4615      	mov	r5, r2
 8002830:	e7bd      	b.n	80027ae <_printf_i+0x12e>
 8002832:	682b      	ldr	r3, [r5, #0]
 8002834:	6826      	ldr	r6, [r4, #0]
 8002836:	1d18      	adds	r0, r3, #4
 8002838:	6961      	ldr	r1, [r4, #20]
 800283a:	6028      	str	r0, [r5, #0]
 800283c:	0635      	lsls	r5, r6, #24
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	d501      	bpl.n	8002846 <_printf_i+0x1c6>
 8002842:	6019      	str	r1, [r3, #0]
 8002844:	e002      	b.n	800284c <_printf_i+0x1cc>
 8002846:	0670      	lsls	r0, r6, #25
 8002848:	d5fb      	bpl.n	8002842 <_printf_i+0x1c2>
 800284a:	8019      	strh	r1, [r3, #0]
 800284c:	2300      	movs	r3, #0
 800284e:	4615      	mov	r5, r2
 8002850:	6123      	str	r3, [r4, #16]
 8002852:	e7bc      	b.n	80027ce <_printf_i+0x14e>
 8002854:	682b      	ldr	r3, [r5, #0]
 8002856:	2100      	movs	r1, #0
 8002858:	1d1a      	adds	r2, r3, #4
 800285a:	602a      	str	r2, [r5, #0]
 800285c:	681d      	ldr	r5, [r3, #0]
 800285e:	6862      	ldr	r2, [r4, #4]
 8002860:	4628      	mov	r0, r5
 8002862:	f000 f859 	bl	8002918 <memchr>
 8002866:	b108      	cbz	r0, 800286c <_printf_i+0x1ec>
 8002868:	1b40      	subs	r0, r0, r5
 800286a:	6060      	str	r0, [r4, #4]
 800286c:	6863      	ldr	r3, [r4, #4]
 800286e:	6123      	str	r3, [r4, #16]
 8002870:	2300      	movs	r3, #0
 8002872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002876:	e7aa      	b.n	80027ce <_printf_i+0x14e>
 8002878:	462a      	mov	r2, r5
 800287a:	4649      	mov	r1, r9
 800287c:	4640      	mov	r0, r8
 800287e:	6923      	ldr	r3, [r4, #16]
 8002880:	47d0      	blx	sl
 8002882:	3001      	adds	r0, #1
 8002884:	d0ad      	beq.n	80027e2 <_printf_i+0x162>
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	079b      	lsls	r3, r3, #30
 800288a:	d413      	bmi.n	80028b4 <_printf_i+0x234>
 800288c:	68e0      	ldr	r0, [r4, #12]
 800288e:	9b03      	ldr	r3, [sp, #12]
 8002890:	4298      	cmp	r0, r3
 8002892:	bfb8      	it	lt
 8002894:	4618      	movlt	r0, r3
 8002896:	e7a6      	b.n	80027e6 <_printf_i+0x166>
 8002898:	2301      	movs	r3, #1
 800289a:	4632      	mov	r2, r6
 800289c:	4649      	mov	r1, r9
 800289e:	4640      	mov	r0, r8
 80028a0:	47d0      	blx	sl
 80028a2:	3001      	adds	r0, #1
 80028a4:	d09d      	beq.n	80027e2 <_printf_i+0x162>
 80028a6:	3501      	adds	r5, #1
 80028a8:	68e3      	ldr	r3, [r4, #12]
 80028aa:	9903      	ldr	r1, [sp, #12]
 80028ac:	1a5b      	subs	r3, r3, r1
 80028ae:	42ab      	cmp	r3, r5
 80028b0:	dcf2      	bgt.n	8002898 <_printf_i+0x218>
 80028b2:	e7eb      	b.n	800288c <_printf_i+0x20c>
 80028b4:	2500      	movs	r5, #0
 80028b6:	f104 0619 	add.w	r6, r4, #25
 80028ba:	e7f5      	b.n	80028a8 <_printf_i+0x228>
 80028bc:	08002a27 	.word	0x08002a27
 80028c0:	08002a38 	.word	0x08002a38

080028c4 <memmove>:
 80028c4:	4288      	cmp	r0, r1
 80028c6:	b510      	push	{r4, lr}
 80028c8:	eb01 0402 	add.w	r4, r1, r2
 80028cc:	d902      	bls.n	80028d4 <memmove+0x10>
 80028ce:	4284      	cmp	r4, r0
 80028d0:	4623      	mov	r3, r4
 80028d2:	d807      	bhi.n	80028e4 <memmove+0x20>
 80028d4:	1e43      	subs	r3, r0, #1
 80028d6:	42a1      	cmp	r1, r4
 80028d8:	d008      	beq.n	80028ec <memmove+0x28>
 80028da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80028e2:	e7f8      	b.n	80028d6 <memmove+0x12>
 80028e4:	4601      	mov	r1, r0
 80028e6:	4402      	add	r2, r0
 80028e8:	428a      	cmp	r2, r1
 80028ea:	d100      	bne.n	80028ee <memmove+0x2a>
 80028ec:	bd10      	pop	{r4, pc}
 80028ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80028f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80028f6:	e7f7      	b.n	80028e8 <memmove+0x24>

080028f8 <_sbrk_r>:
 80028f8:	b538      	push	{r3, r4, r5, lr}
 80028fa:	2300      	movs	r3, #0
 80028fc:	4d05      	ldr	r5, [pc, #20]	; (8002914 <_sbrk_r+0x1c>)
 80028fe:	4604      	mov	r4, r0
 8002900:	4608      	mov	r0, r1
 8002902:	602b      	str	r3, [r5, #0]
 8002904:	f7fd fe1e 	bl	8000544 <_sbrk>
 8002908:	1c43      	adds	r3, r0, #1
 800290a:	d102      	bne.n	8002912 <_sbrk_r+0x1a>
 800290c:	682b      	ldr	r3, [r5, #0]
 800290e:	b103      	cbz	r3, 8002912 <_sbrk_r+0x1a>
 8002910:	6023      	str	r3, [r4, #0]
 8002912:	bd38      	pop	{r3, r4, r5, pc}
 8002914:	200002d8 	.word	0x200002d8

08002918 <memchr>:
 8002918:	4603      	mov	r3, r0
 800291a:	b510      	push	{r4, lr}
 800291c:	b2c9      	uxtb	r1, r1
 800291e:	4402      	add	r2, r0
 8002920:	4293      	cmp	r3, r2
 8002922:	4618      	mov	r0, r3
 8002924:	d101      	bne.n	800292a <memchr+0x12>
 8002926:	2000      	movs	r0, #0
 8002928:	e003      	b.n	8002932 <memchr+0x1a>
 800292a:	7804      	ldrb	r4, [r0, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	428c      	cmp	r4, r1
 8002930:	d1f6      	bne.n	8002920 <memchr+0x8>
 8002932:	bd10      	pop	{r4, pc}

08002934 <memcpy>:
 8002934:	440a      	add	r2, r1
 8002936:	4291      	cmp	r1, r2
 8002938:	f100 33ff 	add.w	r3, r0, #4294967295
 800293c:	d100      	bne.n	8002940 <memcpy+0xc>
 800293e:	4770      	bx	lr
 8002940:	b510      	push	{r4, lr}
 8002942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002946:	4291      	cmp	r1, r2
 8002948:	f803 4f01 	strb.w	r4, [r3, #1]!
 800294c:	d1f9      	bne.n	8002942 <memcpy+0xe>
 800294e:	bd10      	pop	{r4, pc}

08002950 <_realloc_r>:
 8002950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002954:	4680      	mov	r8, r0
 8002956:	4614      	mov	r4, r2
 8002958:	460e      	mov	r6, r1
 800295a:	b921      	cbnz	r1, 8002966 <_realloc_r+0x16>
 800295c:	4611      	mov	r1, r2
 800295e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002962:	f7ff bc37 	b.w	80021d4 <_malloc_r>
 8002966:	b92a      	cbnz	r2, 8002974 <_realloc_r+0x24>
 8002968:	f7ff fbcc 	bl	8002104 <_free_r>
 800296c:	4625      	mov	r5, r4
 800296e:	4628      	mov	r0, r5
 8002970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002974:	f000 f81b 	bl	80029ae <_malloc_usable_size_r>
 8002978:	4284      	cmp	r4, r0
 800297a:	4607      	mov	r7, r0
 800297c:	d802      	bhi.n	8002984 <_realloc_r+0x34>
 800297e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002982:	d812      	bhi.n	80029aa <_realloc_r+0x5a>
 8002984:	4621      	mov	r1, r4
 8002986:	4640      	mov	r0, r8
 8002988:	f7ff fc24 	bl	80021d4 <_malloc_r>
 800298c:	4605      	mov	r5, r0
 800298e:	2800      	cmp	r0, #0
 8002990:	d0ed      	beq.n	800296e <_realloc_r+0x1e>
 8002992:	42bc      	cmp	r4, r7
 8002994:	4622      	mov	r2, r4
 8002996:	4631      	mov	r1, r6
 8002998:	bf28      	it	cs
 800299a:	463a      	movcs	r2, r7
 800299c:	f7ff ffca 	bl	8002934 <memcpy>
 80029a0:	4631      	mov	r1, r6
 80029a2:	4640      	mov	r0, r8
 80029a4:	f7ff fbae 	bl	8002104 <_free_r>
 80029a8:	e7e1      	b.n	800296e <_realloc_r+0x1e>
 80029aa:	4635      	mov	r5, r6
 80029ac:	e7df      	b.n	800296e <_realloc_r+0x1e>

080029ae <_malloc_usable_size_r>:
 80029ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029b2:	1f18      	subs	r0, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bfbc      	itt	lt
 80029b8:	580b      	ldrlt	r3, [r1, r0]
 80029ba:	18c0      	addlt	r0, r0, r3
 80029bc:	4770      	bx	lr
	...

080029c0 <_init>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	bf00      	nop
 80029c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c6:	bc08      	pop	{r3}
 80029c8:	469e      	mov	lr, r3
 80029ca:	4770      	bx	lr

080029cc <_fini>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	bf00      	nop
 80029d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d2:	bc08      	pop	{r3}
 80029d4:	469e      	mov	lr, r3
 80029d6:	4770      	bx	lr
