
spi_f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005740  08005740  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  08005740  08005740  00015740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005748  08005748  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800574c  0800574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  080057ac  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  0800584c  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008d8  2000019c  080058ec  0002019c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a74  080058ec  00020a74  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201ca  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001462f  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002a8f  00000000  00000000  0003483c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000fc0  00000000  00000000  000372d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c28  00000000  00000000  00038290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029131  00000000  00000000  00038eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00013a68  00000000  00000000  00061fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fc1fd  00000000  00000000  00075a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000470c  00000000  00000000  00171c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  0017635c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000019c 	.word	0x2000019c
 800021c:	00000000 	.word	0x00000000
 8000220:	080056cc 	.word	0x080056cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a0 	.word	0x200001a0
 800023c:	080056cc 	.word	0x080056cc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0aa      	sub	sp, #168	; 0xa8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fdda 	bl	800119a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f867 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f9f1 	bl	80009d0 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ee:	f000 f8d5 	bl	800079c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 f98f 	bl	8000914 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f6:	f000 f9bd 	bl	8000974 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80005fa:	f000 f91d 	bl	8000838 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f959 	bl	80008b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  char uart_buff[50];
  int uart_buf_len;
  char spi_buf[100];
  uint8_t addr = 0x05;
 8000602:	2305      	movs	r3, #5
 8000604:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint8_t wip;
  uint8_t state = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  uart_buf_len = sprintf(uart_buff, "SPI Interupt\r\n");
 800060e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000612:	4924      	ldr	r1, [pc, #144]	; (80006a4 <main+0xc8>)
 8000614:	4618      	mov	r0, r3
 8000616:	f004 fbb5 	bl	8004d84 <siprintf>
 800061a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buff, uart_buf_len, 100);
 800061e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000622:	b29a      	uxth	r2, r3
 8000624:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	481f      	ldr	r0, [pc, #124]	; (80006a8 <main+0xcc>)
 800062c:	f003 fc18 	bl	8003e60 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buff, uart_buf_len, 100);
 8000630:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000634:	b29a      	uxth	r2, r3
 8000636:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800063a:	2364      	movs	r3, #100	; 0x64
 800063c:	481a      	ldr	r0, [pc, #104]	; (80006a8 <main+0xcc>)
 800063e:	f003 fc0f 	bl	8003e60 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000642:	2064      	movs	r0, #100	; 0x64
 8000644:	f000 fe06 	bl	8001254 <HAL_Delay>

	spi_buf[0] = EEPROM_WRITE;
 8000648:	2302      	movs	r3, #2
 800064a:	713b      	strb	r3, [r7, #4]
	spi_buf[1] = addr;
 800064c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000650:	717b      	strb	r3, [r7, #5]

	for (int i = 0; i < 100; i++){
 8000652:	2300      	movs	r3, #0
 8000654:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000658:	e00a      	b.n	8000670 <main+0x94>
		spi_buf[i] = 36;
 800065a:	1d3a      	adds	r2, r7, #4
 800065c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000660:	4413      	add	r3, r2
 8000662:	2224      	movs	r2, #36	; 0x24
 8000664:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++){
 8000666:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800066a:	3301      	adds	r3, #1
 800066c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000670:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000674:	2b63      	cmp	r3, #99	; 0x63
 8000676:	ddf0      	ble.n	800065a <main+0x7e>

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
	//HAL_SPI_Transmit(&hspi1, (uint8_t*)&EEPROM_WREN, 1, 100);
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2101      	movs	r1, #1
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <main+0xd0>)
 800067e:	f001 fc13 	bl	8001ea8 <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit_IT(&hspi1, (uint8_t*)spi_buf, 50);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)spi_buf, 100, 100);
 8000682:	1d39      	adds	r1, r7, #4
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	2264      	movs	r2, #100	; 0x64
 8000688:	4809      	ldr	r0, [pc, #36]	; (80006b0 <main+0xd4>)
 800068a:	f002 ff90 	bl	80035ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2101      	movs	r1, #1
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <main+0xd0>)
 8000694:	f001 fc08 	bl	8001ea8 <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <main+0xd8>)
 800069c:	f001 fc1d 	bl	8001eda <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buff, uart_buf_len, 100);
 80006a0:	e7c6      	b.n	8000630 <main+0x54>
 80006a2:	bf00      	nop
 80006a4:	080056e4 	.word	0x080056e4
 80006a8:	20000304 	.word	0x20000304
 80006ac:	40020800 	.word	0x40020800
 80006b0:	200002a0 	.word	0x200002a0
 80006b4:	40020400 	.word	0x40020400

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2234      	movs	r2, #52	; 0x34
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 fb7c 	bl	8004dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006dc:	f001 fd60 	bl	80021a0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemClock_Config+0xdc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a2b      	ldr	r2, [pc, #172]	; (8000794 <SystemClock_Config+0xdc>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemClock_Config+0xdc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <SystemClock_Config+0xe0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000700:	4a25      	ldr	r2, [pc, #148]	; (8000798 <SystemClock_Config+0xe0>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemClock_Config+0xe0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000714:	2301      	movs	r3, #1
 8000716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000718:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800071c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000728:	2304      	movs	r3, #4
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800072c:	2360      	movs	r3, #96	; 0x60
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fd8d 	bl	8002260 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800074c:	f000 f9f4 	bl	8000b38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000750:	f001 fd36 	bl	80021c0 <HAL_PWREx_EnableOverDrive>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800075a:	f000 f9ed 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2103      	movs	r1, #3
 800077a:	4618      	mov	r0, r3
 800077c:	f002 f81e 	bl	80027bc <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000786:	f000 f9d7 	bl	8000b38 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_ETH_Init+0x84>)
 80007a2:	4a20      	ldr	r2, [pc, #128]	; (8000824 <MX_ETH_Init+0x88>)
 80007a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007a6:	4b20      	ldr	r3, [pc, #128]	; (8000828 <MX_ETH_Init+0x8c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_ETH_Init+0x8c>)
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_ETH_Init+0x8c>)
 80007b4:	22e1      	movs	r2, #225	; 0xe1
 80007b6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_ETH_Init+0x8c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_ETH_Init+0x8c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_ETH_Init+0x8c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_ETH_Init+0x84>)
 80007cc:	4a16      	ldr	r2, [pc, #88]	; (8000828 <MX_ETH_Init+0x8c>)
 80007ce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_ETH_Init+0x84>)
 80007d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007d6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_ETH_Init+0x84>)
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <MX_ETH_Init+0x90>)
 80007dc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_ETH_Init+0x84>)
 80007e0:	4a13      	ldr	r2, [pc, #76]	; (8000830 <MX_ETH_Init+0x94>)
 80007e2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_ETH_Init+0x84>)
 80007e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007ea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <MX_ETH_Init+0x84>)
 80007ee:	f000 fe89 	bl	8001504 <HAL_ETH_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007f8:	f000 f99e 	bl	8000b38 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007fc:	2238      	movs	r2, #56	; 0x38
 80007fe:	2100      	movs	r1, #0
 8000800:	480c      	ldr	r0, [pc, #48]	; (8000834 <MX_ETH_Init+0x98>)
 8000802:	f004 fadf 	bl	8004dc4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_ETH_Init+0x98>)
 8000808:	2221      	movs	r2, #33	; 0x21
 800080a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_ETH_Init+0x98>)
 800080e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000812:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_ETH_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200001f0 	.word	0x200001f0
 8000824:	40028000 	.word	0x40028000
 8000828:	2000091c 	.word	0x2000091c
 800082c:	200000fc 	.word	0x200000fc
 8000830:	2000005c 	.word	0x2000005c
 8000834:	200001b8 	.word	0x200001b8

08000838 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_SPI1_Init+0x74>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <MX_SPI1_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_SPI1_Init+0x74>)
 8000844:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_SPI1_Init+0x74>)
 8000852:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000856:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_SPI1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_SPI1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_SPI1_Init+0x74>)
 8000866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_SPI1_Init+0x74>)
 800086e:	2228      	movs	r2, #40	; 0x28
 8000870:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_SPI1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_SPI1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_SPI1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_SPI1_Init+0x74>)
 8000886:	2207      	movs	r2, #7
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_SPI1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_SPI1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_SPI1_Init+0x74>)
 8000898:	f002 fdde 	bl	8003458 <HAL_SPI_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008a2:	f000 f949 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200002a0 	.word	0x200002a0
 80008b0:	40013000 	.word	0x40013000

080008b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <MX_USART2_UART_Init+0x5c>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008f8:	f003 fa64 	bl	8003dc4 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000902:	f000 f919 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000304 	.word	0x20000304
 8000910:	40004400 	.word	0x40004400

08000914 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USART3_UART_Init+0x58>)
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <MX_USART3_UART_Init+0x5c>)
 800091c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_USART3_UART_Init+0x58>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART3_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USART3_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART3_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART3_UART_Init+0x58>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART3_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART3_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART3_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART3_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART3_UART_Init+0x58>)
 8000958:	f003 fa34 	bl	8003dc4 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 f8e9 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000038c 	.word	0x2000038c
 8000970:	40004800 	.word	0x40004800

08000974 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800097e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2206      	movs	r2, #6
 8000984:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	2202      	movs	r2, #2
 800098a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	2202      	movs	r2, #2
 8000996:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	2201      	movs	r2, #1
 800099c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	f001 faa9 	bl	8001f0e <HAL_PCD_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 f8b9 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000414 	.word	0x20000414

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b50      	ldr	r3, [pc, #320]	; (8000b28 <MX_GPIO_Init+0x158>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a4f      	ldr	r2, [pc, #316]	; (8000b28 <MX_GPIO_Init+0x158>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b4d      	ldr	r3, [pc, #308]	; (8000b28 <MX_GPIO_Init+0x158>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	61bb      	str	r3, [r7, #24]
 80009fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fe:	4b4a      	ldr	r3, [pc, #296]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a49      	ldr	r2, [pc, #292]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b47      	ldr	r3, [pc, #284]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a43      	ldr	r2, [pc, #268]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b3e      	ldr	r3, [pc, #248]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a3d      	ldr	r2, [pc, #244]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a37      	ldr	r2, [pc, #220]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5e:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a31      	ldr	r2, [pc, #196]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <MX_GPIO_Init+0x158>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2101      	movs	r1, #1
 8000a7a:	482c      	ldr	r0, [pc, #176]	; (8000b2c <MX_GPIO_Init+0x15c>)
 8000a7c:	f001 fa14 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a86:	482a      	ldr	r0, [pc, #168]	; (8000b30 <MX_GPIO_Init+0x160>)
 8000a88:	f001 fa0e 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	4828      	ldr	r0, [pc, #160]	; (8000b34 <MX_GPIO_Init+0x164>)
 8000a92:	f001 fa09 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	481f      	ldr	r0, [pc, #124]	; (8000b2c <MX_GPIO_Init+0x15c>)
 8000aae:	f001 f84f 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4818      	ldr	r0, [pc, #96]	; (8000b2c <MX_GPIO_Init+0x15c>)
 8000aca:	f001 f841 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ace:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4812      	ldr	r0, [pc, #72]	; (8000b30 <MX_GPIO_Init+0x160>)
 8000ae8:	f001 f832 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aec:	2340      	movs	r3, #64	; 0x40
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_GPIO_Init+0x164>)
 8000b04:	f001 f824 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <MX_GPIO_Init+0x164>)
 8000b1c:	f001 f818 	bl	8001b50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b20:	bf00      	nop
 8000b22:	3730      	adds	r7, #48	; 0x30
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40021800 	.word	0x40021800

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x44>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_MspInit+0x44>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_MspInit+0x44>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_MspInit+0x44>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_MspInit+0x44>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_MspInit+0x44>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	; 0x38
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a4e      	ldr	r2, [pc, #312]	; (8000ce4 <HAL_ETH_MspInit+0x158>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	f040 8096 	bne.w	8000cdc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bb0:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	4a4c      	ldr	r2, [pc, #304]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bba:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbc:	4b4a      	ldr	r3, [pc, #296]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bc4:	623b      	str	r3, [r7, #32]
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	4b47      	ldr	r3, [pc, #284]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a46      	ldr	r2, [pc, #280]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b44      	ldr	r3, [pc, #272]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a40      	ldr	r2, [pc, #256]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000be6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
 8000bec:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf8:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a3a      	ldr	r2, [pc, #232]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b38      	ldr	r3, [pc, #224]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	4a34      	ldr	r2, [pc, #208]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1c:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c28:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4a2e      	ldr	r2, [pc, #184]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	6313      	str	r3, [r2, #48]	; 0x30
 8000c34:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a28      	ldr	r2, [pc, #160]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c58:	2332      	movs	r3, #50	; 0x32
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c68:	230b      	movs	r3, #11
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	481e      	ldr	r0, [pc, #120]	; (8000cec <HAL_ETH_MspInit+0x160>)
 8000c74:	f000 ff6c 	bl	8001b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c78:	2386      	movs	r3, #134	; 0x86
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c88:	230b      	movs	r3, #11
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <HAL_ETH_MspInit+0x164>)
 8000c94:	f000 ff5c 	bl	8001b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000caa:	230b      	movs	r3, #11
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <HAL_ETH_MspInit+0x168>)
 8000cb6:	f000 ff4b 	bl	8001b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ccc:	230b      	movs	r3, #11
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <HAL_ETH_MspInit+0x16c>)
 8000cd8:	f000 ff3a 	bl	8001b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3738      	adds	r7, #56	; 0x38
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40028000 	.word	0x40028000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020800 	.word	0x40020800
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	40020400 	.word	0x40020400
 8000cf8:	40021800 	.word	0x40021800

08000cfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a29      	ldr	r2, [pc, #164]	; (8000dc0 <HAL_SPI_MspInit+0xc4>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d14b      	bne.n	8000db6 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d1e:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <HAL_SPI_MspInit+0xc8>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a28      	ldr	r2, [pc, #160]	; (8000dc4 <HAL_SPI_MspInit+0xc8>)
 8000d24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <HAL_SPI_MspInit+0xc8>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <HAL_SPI_MspInit+0xc8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a22      	ldr	r2, [pc, #136]	; (8000dc4 <HAL_SPI_MspInit+0xc8>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <HAL_SPI_MspInit+0xc8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <HAL_SPI_MspInit+0xc8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <HAL_SPI_MspInit+0xc8>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <HAL_SPI_MspInit+0xc8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d66:	2360      	movs	r3, #96	; 0x60
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d76:	2305      	movs	r3, #5
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <HAL_SPI_MspInit+0xcc>)
 8000d82:	f000 fee5 	bl	8001b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d96:	2305      	movs	r3, #5
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480a      	ldr	r0, [pc, #40]	; (8000dcc <HAL_SPI_MspInit+0xd0>)
 8000da2:	f000 fed5 	bl	8001b50 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	2023      	movs	r0, #35	; 0x23
 8000dac:	f000 fb51 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000db0:	2023      	movs	r0, #35	; 0x23
 8000db2:	f000 fb6a 	bl	800148a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40013000 	.word	0x40013000
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	40020c00 	.word	0x40020c00

08000dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0b0      	sub	sp, #192	; 0xc0
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	2290      	movs	r2, #144	; 0x90
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 ffe7 	bl	8004dc4 <memset>
  if(huart->Instance==USART2)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a53      	ldr	r2, [pc, #332]	; (8000f48 <HAL_UART_MspInit+0x178>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d15c      	bne.n	8000eba <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 fefb 	bl	8002c08 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e18:	f7ff fe8e 	bl	8000b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e1c:	4b4b      	ldr	r3, [pc, #300]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	4a4a      	ldr	r2, [pc, #296]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
 8000e28:	4b48      	ldr	r3, [pc, #288]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	61bb      	str	r3, [r7, #24]
 8000e32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b45      	ldr	r3, [pc, #276]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a44      	ldr	r2, [pc, #272]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b42      	ldr	r3, [pc, #264]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4c:	4b3f      	ldr	r3, [pc, #252]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	4a3e      	ldr	r2, [pc, #248]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	6313      	str	r3, [r2, #48]	; 0x30
 8000e58:	4b3c      	ldr	r3, [pc, #240]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e64:	2308      	movs	r3, #8
 8000e66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e86:	4619      	mov	r1, r3
 8000e88:	4831      	ldr	r0, [pc, #196]	; (8000f50 <HAL_UART_MspInit+0x180>)
 8000e8a:	f000 fe61 	bl	8001b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e8e:	2320      	movs	r3, #32
 8000e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4828      	ldr	r0, [pc, #160]	; (8000f54 <HAL_UART_MspInit+0x184>)
 8000eb4:	f000 fe4c 	bl	8001b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eb8:	e041      	b.n	8000f3e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a26      	ldr	r2, [pc, #152]	; (8000f58 <HAL_UART_MspInit+0x188>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d13c      	bne.n	8000f3e <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fe98 	bl	8002c08 <HAL_RCCEx_PeriphCLKConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_UART_MspInit+0x112>
      Error_Handler();
 8000ede:	f7ff fe2b 	bl	8000b38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_UART_MspInit+0x17c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f36:	4619      	mov	r1, r3
 8000f38:	4806      	ldr	r0, [pc, #24]	; (8000f54 <HAL_UART_MspInit+0x184>)
 8000f3a:	f000 fe09 	bl	8001b50 <HAL_GPIO_Init>
}
 8000f3e:	bf00      	nop
 8000f40:	37c0      	adds	r7, #192	; 0xc0
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40020c00 	.word	0x40020c00
 8000f58:	40004800 	.word	0x40004800

08000f5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b0ae      	sub	sp, #184	; 0xb8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2290      	movs	r2, #144	; 0x90
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 ff21 	bl	8004dc4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f8a:	d159      	bne.n	8001040 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f001 fe33 	bl	8002c08 <HAL_RCCEx_PeriphCLKConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000fa8:	f7ff fdc6 	bl	8000b38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b26      	ldr	r3, [pc, #152]	; (8001048 <HAL_PCD_MspInit+0xec>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	4a25      	ldr	r2, [pc, #148]	; (8001048 <HAL_PCD_MspInit+0xec>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <HAL_PCD_MspInit+0xec>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fc4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fde:	230a      	movs	r3, #10
 8000fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4818      	ldr	r0, [pc, #96]	; (800104c <HAL_PCD_MspInit+0xf0>)
 8000fec:	f000 fdb0 	bl	8001b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001008:	4619      	mov	r1, r3
 800100a:	4810      	ldr	r0, [pc, #64]	; (800104c <HAL_PCD_MspInit+0xf0>)
 800100c:	f000 fda0 	bl	8001b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <HAL_PCD_MspInit+0xec>)
 8001012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001014:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <HAL_PCD_MspInit+0xec>)
 8001016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101a:	6353      	str	r3, [r2, #52]	; 0x34
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_PCD_MspInit+0xec>)
 800101e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <HAL_PCD_MspInit+0xec>)
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_PCD_MspInit+0xec>)
 800102e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001032:	6453      	str	r3, [r2, #68]	; 0x44
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <HAL_PCD_MspInit+0xec>)
 8001036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	37b8      	adds	r7, #184	; 0xb8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40023800 	.word	0x40023800
 800104c:	40020000 	.word	0x40020000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 f8ba 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <SPI1_IRQHandler+0x10>)
 80010aa:	f002 fbef 	bl	800388c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200002a0 	.word	0x200002a0

080010b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c0:	4a14      	ldr	r2, [pc, #80]	; (8001114 <_sbrk+0x5c>)
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <_sbrk+0x60>)
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <_sbrk+0x64>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <_sbrk+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d207      	bcs.n	80010f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e8:	f003 fe74 	bl	8004dd4 <__errno>
 80010ec:	4603      	mov	r3, r0
 80010ee:	220c      	movs	r2, #12
 80010f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	e009      	b.n	800110c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <_sbrk+0x64>)
 8001108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20080000 	.word	0x20080000
 8001118:	00000400 	.word	0x00000400
 800111c:	20000924 	.word	0x20000924
 8001120:	20000a78 	.word	0x20000a78

08001124 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <SystemInit+0x20>)
 800112a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <SystemInit+0x20>)
 8001130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001180 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800114e:	490e      	ldr	r1, [pc, #56]	; (8001188 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001164:	4c0b      	ldr	r4, [pc, #44]	; (8001194 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001172:	f7ff ffd7 	bl	8001124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001176:	f003 fe33 	bl	8004de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117a:	f7ff fa2f 	bl	80005dc <main>
  bx  lr    
 800117e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001180:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800118c:	08005750 	.word	0x08005750
  ldr r2, =_sbss
 8001190:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001194:	20000a74 	.word	0x20000a74

08001198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC_IRQHandler>

0800119a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 f94c 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 f805 	bl	80011b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011aa:	f7ff fccb 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x54>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x58>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f967 	bl	80014a6 <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00e      	b.n	8001200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d80a      	bhi.n	80011fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f000 f92f 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_InitTick+0x5c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000000 	.word	0x20000000
 800120c:	20000008 	.word	0x20000008
 8001210:	20000004 	.word	0x20000004

08001214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000008 	.word	0x20000008
 8001238:	20000928 	.word	0x20000928

0800123c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_GetTick+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000928 	.word	0x20000928

08001254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff ffee 	bl	800123c <HAL_GetTick>
 8001260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126c:	d005      	beq.n	800127a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_Delay+0x44>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127a:	bf00      	nop
 800127c:	f7ff ffde 	bl	800123c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d8f7      	bhi.n	800127c <HAL_Delay+0x28>
  {
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <__NVIC_SetPriorityGrouping+0x40>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <__NVIC_SetPriorityGrouping+0x40>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00
 80012e0:	05fa0000 	.word	0x05fa0000

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <__NVIC_EnableIRQ+0x38>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	; (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f7ff ff8e 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff29 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff3e 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff8e 	bl	8001390 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5d 	bl	800133c <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff31 	bl	8001300 <__NVIC_EnableIRQ>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffa2 	bl	80013f8 <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d004      	beq.n	80014dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e00c      	b.n	80014f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2205      	movs	r2, #5
 80014e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e06a      	b.n	80015ec <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800151c:	2b00      	cmp	r3, #0
 800151e:	d106      	bne.n	800152e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2223      	movs	r2, #35	; 0x23
 8001524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fb2f 	bl	8000b8c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <HAL_ETH_Init+0xf0>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a30      	ldr	r2, [pc, #192]	; (80015f4 <HAL_ETH_Init+0xf0>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <HAL_ETH_Init+0xf0>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001546:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <HAL_ETH_Init+0xf4>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4a2b      	ldr	r2, [pc, #172]	; (80015f8 <HAL_ETH_Init+0xf4>)
 800154c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001550:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001552:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <HAL_ETH_Init+0xf4>)
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	4927      	ldr	r1, [pc, #156]	; (80015f8 <HAL_ETH_Init+0xf4>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_ETH_Init+0xf4>)
 8001562:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800157a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800157c:	f7ff fe5e 	bl	800123c <HAL_GetTick>
 8001580:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001582:	e011      	b.n	80015a8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001584:	f7ff fe5a 	bl	800123c <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001592:	d909      	bls.n	80015a8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2204      	movs	r2, #4
 8001598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	22e0      	movs	r2, #224	; 0xe0
 80015a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e021      	b.n	80015ec <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1e4      	bne.n	8001584 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f958 	bl	8001870 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f9ff 	bl	80019c4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fa55 	bl	8001a76 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	461a      	mov	r2, r3
 80015d2:	2100      	movs	r1, #0
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f9bd 	bl	8001954 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2210      	movs	r2, #16
 80015e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40013800 	.word	0x40013800

080015fc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4b51      	ldr	r3, [pc, #324]	; (8001758 <ETH_SetMACConfig+0x15c>)
 8001612:	4013      	ands	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	7c1b      	ldrb	r3, [r3, #16]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <ETH_SetMACConfig+0x28>
 800161e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001622:	e000      	b.n	8001626 <ETH_SetMACConfig+0x2a>
 8001624:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	7c5b      	ldrb	r3, [r3, #17]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <ETH_SetMACConfig+0x38>
 800162e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001632:	e000      	b.n	8001636 <ETH_SetMACConfig+0x3a>
 8001634:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001636:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800163c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	7fdb      	ldrb	r3, [r3, #31]
 8001642:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001644:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800164a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	7f92      	ldrb	r2, [r2, #30]
 8001650:	2a00      	cmp	r2, #0
 8001652:	d102      	bne.n	800165a <ETH_SetMACConfig+0x5e>
 8001654:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001658:	e000      	b.n	800165c <ETH_SetMACConfig+0x60>
 800165a:	2200      	movs	r2, #0
                        macconf->Speed |
 800165c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	7f1b      	ldrb	r3, [r3, #28]
 8001662:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001664:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800166a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	791b      	ldrb	r3, [r3, #4]
 8001670:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001672:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	f892 2020 	ldrb.w	r2, [r2, #32]
 800167a:	2a00      	cmp	r2, #0
 800167c:	d102      	bne.n	8001684 <ETH_SetMACConfig+0x88>
 800167e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001682:	e000      	b.n	8001686 <ETH_SetMACConfig+0x8a>
 8001684:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001686:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	7bdb      	ldrb	r3, [r3, #15]
 800168c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800168e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001694:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800169c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800169e:	4313      	orrs	r3, r2
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f7ff fdcc 	bl	8001254 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	f64f 7341 	movw	r3, #65345	; 0xff41
 80016d2:	4013      	ands	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016da:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80016e2:	2a00      	cmp	r2, #0
 80016e4:	d101      	bne.n	80016ea <ETH_SetMACConfig+0xee>
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	e000      	b.n	80016ec <ETH_SetMACConfig+0xf0>
 80016ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016ec:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80016fa:	2a01      	cmp	r2, #1
 80016fc:	d101      	bne.n	8001702 <ETH_SetMACConfig+0x106>
 80016fe:	2208      	movs	r2, #8
 8001700:	e000      	b.n	8001704 <ETH_SetMACConfig+0x108>
 8001702:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001704:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800170c:	2a01      	cmp	r2, #1
 800170e:	d101      	bne.n	8001714 <ETH_SetMACConfig+0x118>
 8001710:	2204      	movs	r2, #4
 8001712:	e000      	b.n	8001716 <ETH_SetMACConfig+0x11a>
 8001714:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001716:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800171e:	2a01      	cmp	r2, #1
 8001720:	d101      	bne.n	8001726 <ETH_SetMACConfig+0x12a>
 8001722:	2202      	movs	r2, #2
 8001724:	e000      	b.n	8001728 <ETH_SetMACConfig+0x12c>
 8001726:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001728:	4313      	orrs	r3, r2
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4313      	orrs	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff fd87 	bl	8001254 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	619a      	str	r2, [r3, #24]
}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	ff20810f 	.word	0xff20810f

0800175c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4b3d      	ldr	r3, [pc, #244]	; (800186c <ETH_SetDMAConfig+0x110>)
 8001776:	4013      	ands	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	7b1b      	ldrb	r3, [r3, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <ETH_SetDMAConfig+0x2c>
 8001782:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001786:	e000      	b.n	800178a <ETH_SetDMAConfig+0x2e>
 8001788:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	7b5b      	ldrb	r3, [r3, #13]
 800178e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001790:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	7f52      	ldrb	r2, [r2, #29]
 8001796:	2a00      	cmp	r2, #0
 8001798:	d102      	bne.n	80017a0 <ETH_SetDMAConfig+0x44>
 800179a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800179e:	e000      	b.n	80017a2 <ETH_SetDMAConfig+0x46>
 80017a0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80017a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	7b9b      	ldrb	r3, [r3, #14]
 80017a8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80017aa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80017b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	7f1b      	ldrb	r3, [r3, #28]
 80017b6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80017b8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	7f9b      	ldrb	r3, [r3, #30]
 80017be:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80017c0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80017c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017ce:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017d0:	4313      	orrs	r3, r2
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e0:	461a      	mov	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f7ff fd2e 	bl	8001254 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001800:	461a      	mov	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	791b      	ldrb	r3, [r3, #4]
 800180a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001810:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001816:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800181c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001824:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001826:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800182e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001834:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800183e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001842:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff fcff 	bl	8001254 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185e:	461a      	mov	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6013      	str	r3, [r2, #0]
}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	f8de3f23 	.word	0xf8de3f23

08001870 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b0a6      	sub	sp, #152	; 0x98
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001878:	2301      	movs	r3, #1
 800187a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800187e:	2301      	movs	r3, #1
 8001880:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001884:	2300      	movs	r3, #0
 8001886:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800188e:	2301      	movs	r3, #1
 8001890:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800189a:	2301      	movs	r3, #1
 800189c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018ac:	2300      	movs	r3, #0
 80018ae:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80018d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018e8:	4619      	mov	r1, r3
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fe86 	bl	80015fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80018f0:	2301      	movs	r3, #1
 80018f2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80018f4:	2301      	movs	r3, #1
 80018f6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80018fe:	2301      	movs	r3, #1
 8001900:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001916:	2301      	movs	r3, #1
 8001918:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800191c:	2301      	movs	r3, #1
 800191e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001924:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001926:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800192a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800192c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001930:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001932:	2301      	movs	r3, #1
 8001934:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	4619      	mov	r1, r3
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ff08 	bl	800175c <ETH_SetDMAConfig>
}
 800194c:	bf00      	nop
 800194e:	3798      	adds	r7, #152	; 0x98
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3305      	adds	r3, #5
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	3204      	adds	r2, #4
 800196c:	7812      	ldrb	r2, [r2, #0]
 800196e:	4313      	orrs	r3, r2
 8001970:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <ETH_MACAddressConfig+0x68>)
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3303      	adds	r3, #3
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	061a      	lsls	r2, r3, #24
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3302      	adds	r3, #2
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3301      	adds	r3, #1
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	4313      	orrs	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	7812      	ldrb	r2, [r2, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <ETH_MACAddressConfig+0x6c>)
 80019a6:	4413      	add	r3, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	6013      	str	r3, [r2, #0]
}
 80019ae:	bf00      	nop
 80019b0:	371c      	adds	r7, #28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40028040 	.word	0x40028040
 80019c0:	40028044 	.word	0x40028044

080019c4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e03e      	b.n	8001a50 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68d9      	ldr	r1, [r3, #12]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	3206      	adds	r2, #6
 8001a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d80c      	bhi.n	8001a34 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68d9      	ldr	r1, [r3, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	440b      	add	r3, r1
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	e004      	b.n	8001a3e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d9bd      	bls.n	80019d2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a68:	611a      	str	r2, [r3, #16]
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b085      	sub	sp, #20
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	e046      	b.n	8001b12 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6919      	ldr	r1, [r3, #16]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001ac8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	3212      	adds	r2, #18
 8001ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d80c      	bhi.n	8001b02 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6919      	ldr	r1, [r3, #16]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	440b      	add	r3, r1
 8001afa:	461a      	mov	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	e004      	b.n	8001b0c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d9b5      	bls.n	8001a84 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b42:	60da      	str	r2, [r3, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	e175      	b.n	8001e5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b70:	2201      	movs	r2, #1
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	f040 8164 	bne.w	8001e56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d005      	beq.n	8001ba6 <HAL_GPIO_Init+0x56>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d130      	bne.n	8001c08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 0201 	and.w	r2, r3, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d017      	beq.n	8001c44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d123      	bne.n	8001c98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	08da      	lsrs	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3208      	adds	r2, #8
 8001c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	220f      	movs	r2, #15
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	69b9      	ldr	r1, [r7, #24]
 8001c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0203 	and.w	r2, r3, #3
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80be 	beq.w	8001e56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	4b66      	ldr	r3, [pc, #408]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	4a65      	ldr	r2, [pc, #404]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	4b63      	ldr	r3, [pc, #396]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cf2:	4a61      	ldr	r2, [pc, #388]	; (8001e78 <HAL_GPIO_Init+0x328>)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a58      	ldr	r2, [pc, #352]	; (8001e7c <HAL_GPIO_Init+0x32c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d037      	beq.n	8001d8e <HAL_GPIO_Init+0x23e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a57      	ldr	r2, [pc, #348]	; (8001e80 <HAL_GPIO_Init+0x330>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d031      	beq.n	8001d8a <HAL_GPIO_Init+0x23a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a56      	ldr	r2, [pc, #344]	; (8001e84 <HAL_GPIO_Init+0x334>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d02b      	beq.n	8001d86 <HAL_GPIO_Init+0x236>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a55      	ldr	r2, [pc, #340]	; (8001e88 <HAL_GPIO_Init+0x338>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d025      	beq.n	8001d82 <HAL_GPIO_Init+0x232>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a54      	ldr	r2, [pc, #336]	; (8001e8c <HAL_GPIO_Init+0x33c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01f      	beq.n	8001d7e <HAL_GPIO_Init+0x22e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a53      	ldr	r2, [pc, #332]	; (8001e90 <HAL_GPIO_Init+0x340>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d019      	beq.n	8001d7a <HAL_GPIO_Init+0x22a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a52      	ldr	r2, [pc, #328]	; (8001e94 <HAL_GPIO_Init+0x344>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d013      	beq.n	8001d76 <HAL_GPIO_Init+0x226>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a51      	ldr	r2, [pc, #324]	; (8001e98 <HAL_GPIO_Init+0x348>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00d      	beq.n	8001d72 <HAL_GPIO_Init+0x222>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a50      	ldr	r2, [pc, #320]	; (8001e9c <HAL_GPIO_Init+0x34c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <HAL_GPIO_Init+0x21e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4f      	ldr	r2, [pc, #316]	; (8001ea0 <HAL_GPIO_Init+0x350>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_GPIO_Init+0x21a>
 8001d66:	2309      	movs	r3, #9
 8001d68:	e012      	b.n	8001d90 <HAL_GPIO_Init+0x240>
 8001d6a:	230a      	movs	r3, #10
 8001d6c:	e010      	b.n	8001d90 <HAL_GPIO_Init+0x240>
 8001d6e:	2308      	movs	r3, #8
 8001d70:	e00e      	b.n	8001d90 <HAL_GPIO_Init+0x240>
 8001d72:	2307      	movs	r3, #7
 8001d74:	e00c      	b.n	8001d90 <HAL_GPIO_Init+0x240>
 8001d76:	2306      	movs	r3, #6
 8001d78:	e00a      	b.n	8001d90 <HAL_GPIO_Init+0x240>
 8001d7a:	2305      	movs	r3, #5
 8001d7c:	e008      	b.n	8001d90 <HAL_GPIO_Init+0x240>
 8001d7e:	2304      	movs	r3, #4
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x240>
 8001d82:	2303      	movs	r3, #3
 8001d84:	e004      	b.n	8001d90 <HAL_GPIO_Init+0x240>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e002      	b.n	8001d90 <HAL_GPIO_Init+0x240>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_GPIO_Init+0x240>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	f002 0203 	and.w	r2, r2, #3
 8001d96:	0092      	lsls	r2, r2, #2
 8001d98:	4093      	lsls	r3, r2
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001da0:	4935      	ldr	r1, [pc, #212]	; (8001e78 <HAL_GPIO_Init+0x328>)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	3302      	adds	r3, #2
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dae:	4b3d      	ldr	r3, [pc, #244]	; (8001ea4 <HAL_GPIO_Init+0x354>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dd2:	4a34      	ldr	r2, [pc, #208]	; (8001ea4 <HAL_GPIO_Init+0x354>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd8:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <HAL_GPIO_Init+0x354>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dfc:	4a29      	ldr	r2, [pc, #164]	; (8001ea4 <HAL_GPIO_Init+0x354>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e02:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <HAL_GPIO_Init+0x354>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e26:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <HAL_GPIO_Init+0x354>)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_GPIO_Init+0x354>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <HAL_GPIO_Init+0x354>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	2b0f      	cmp	r3, #15
 8001e60:	f67f ae86 	bls.w	8001b70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3724      	adds	r7, #36	; 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40013800 	.word	0x40013800
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	40020400 	.word	0x40020400
 8001e84:	40020800 	.word	0x40020800
 8001e88:	40020c00 	.word	0x40020c00
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40021400 	.word	0x40021400
 8001e94:	40021800 	.word	0x40021800
 8001e98:	40021c00 	.word	0x40021c00
 8001e9c:	40022000 	.word	0x40022000
 8001ea0:	40022400 	.word	0x40022400
 8001ea4:	40013c00 	.word	0x40013c00

08001ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ec4:	e003      	b.n	8001ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ec6:	887b      	ldrh	r3, [r7, #2]
 8001ec8:	041a      	lsls	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	619a      	str	r2, [r3, #24]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b085      	sub	sp, #20
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eec:	887a      	ldrh	r2, [r7, #2]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	041a      	lsls	r2, r3, #16
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	43d9      	mvns	r1, r3
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	400b      	ands	r3, r1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	619a      	str	r2, [r3, #24]
}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f10:	b08f      	sub	sp, #60	; 0x3c
 8001f12:	af0a      	add	r7, sp, #40	; 0x28
 8001f14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e116      	b.n	800214e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff f80e 	bl	8000f5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2203      	movs	r2, #3
 8001f44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f002 fc74 	bl	800484c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	687e      	ldr	r6, [r7, #4]
 8001f6c:	466d      	mov	r5, sp
 8001f6e:	f106 0410 	add.w	r4, r6, #16
 8001f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f82:	1d33      	adds	r3, r6, #4
 8001f84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f86:	6838      	ldr	r0, [r7, #0]
 8001f88:	f002 fc08 	bl	800479c <USB_CoreInit>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2202      	movs	r2, #2
 8001f96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0d7      	b.n	800214e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f002 fc62 	bl	800486e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	73fb      	strb	r3, [r7, #15]
 8001fae:	e04a      	b.n	8002046 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	333d      	adds	r3, #61	; 0x3d
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	333c      	adds	r3, #60	; 0x3c
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	b298      	uxth	r0, r3
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	3344      	adds	r3, #68	; 0x44
 8001fec:	4602      	mov	r2, r0
 8001fee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3340      	adds	r3, #64	; 0x40
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	3348      	adds	r3, #72	; 0x48
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	334c      	adds	r3, #76	; 0x4c
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	3354      	adds	r3, #84	; 0x54
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	3301      	adds	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	d3af      	bcc.n	8001fb0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e044      	b.n	80020e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	3301      	adds	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d3b5      	bcc.n	8002056 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	687e      	ldr	r6, [r7, #4]
 80020f2:	466d      	mov	r5, sp
 80020f4:	f106 0410 	add.w	r4, r6, #16
 80020f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002100:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002104:	e885 0003 	stmia.w	r5, {r0, r1}
 8002108:	1d33      	adds	r3, r6, #4
 800210a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800210c:	6838      	ldr	r0, [r7, #0]
 800210e:	f002 fbfb 	bl	8004908 <USB_DevInit>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e014      	b.n	800214e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2b01      	cmp	r3, #1
 800213a:	d102      	bne.n	8002142 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f80b 	bl	8002158 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f002 fdb9 	bl	8004cbe <USB_DevDisconnect>

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002158 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_PCDEx_ActivateLPM+0x44>)
 8002188:	4313      	orrs	r3, r2
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	10000003 	.word	0x10000003

080021a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40007000 	.word	0x40007000

080021c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	4b23      	ldr	r3, [pc, #140]	; (8002258 <HAL_PWREx_EnableOverDrive+0x98>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a22      	ldr	r2, [pc, #136]	; (8002258 <HAL_PWREx_EnableOverDrive+0x98>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_PWREx_EnableOverDrive+0x98>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ee:	f7ff f825 	bl	800123c <HAL_GetTick>
 80021f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021f4:	e009      	b.n	800220a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021f6:	f7ff f821 	bl	800123c <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002204:	d901      	bls.n	800220a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e022      	b.n	8002250 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <HAL_PWREx_EnableOverDrive+0x9c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002216:	d1ee      	bne.n	80021f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002218:	4b10      	ldr	r3, [pc, #64]	; (800225c <HAL_PWREx_EnableOverDrive+0x9c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0f      	ldr	r2, [pc, #60]	; (800225c <HAL_PWREx_EnableOverDrive+0x9c>)
 800221e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002222:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002224:	f7ff f80a 	bl	800123c <HAL_GetTick>
 8002228:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800222a:	e009      	b.n	8002240 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800222c:	f7ff f806 	bl	800123c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800223a:	d901      	bls.n	8002240 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e007      	b.n	8002250 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800224c:	d1ee      	bne.n	800222c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	40007000 	.word	0x40007000

08002260 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e29b      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8087 	beq.w	8002392 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002284:	4b96      	ldr	r3, [pc, #600]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b04      	cmp	r3, #4
 800228e:	d00c      	beq.n	80022aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002290:	4b93      	ldr	r3, [pc, #588]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b08      	cmp	r3, #8
 800229a:	d112      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62>
 800229c:	4b90      	ldr	r3, [pc, #576]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a8:	d10b      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022aa:	4b8d      	ldr	r3, [pc, #564]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d06c      	beq.n	8002390 <HAL_RCC_OscConfig+0x130>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d168      	bne.n	8002390 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e275      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x7a>
 80022cc:	4b84      	ldr	r3, [pc, #528]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a83      	ldr	r2, [pc, #524]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e02e      	b.n	8002338 <HAL_RCC_OscConfig+0xd8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x9c>
 80022e2:	4b7f      	ldr	r3, [pc, #508]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a7e      	ldr	r2, [pc, #504]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80022e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b7c      	ldr	r3, [pc, #496]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a7b      	ldr	r2, [pc, #492]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80022f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e01d      	b.n	8002338 <HAL_RCC_OscConfig+0xd8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0xc0>
 8002306:	4b76      	ldr	r3, [pc, #472]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a75      	ldr	r2, [pc, #468]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b73      	ldr	r3, [pc, #460]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a72      	ldr	r2, [pc, #456]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0xd8>
 8002320:	4b6f      	ldr	r3, [pc, #444]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a6e      	ldr	r2, [pc, #440]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b6c      	ldr	r3, [pc, #432]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a6b      	ldr	r2, [pc, #428]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe ff7c 	bl	800123c <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7fe ff78 	bl	800123c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e229      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0xe8>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe ff68 	bl	800123c <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe ff64 	bl	800123c <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e215      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	4b57      	ldr	r3, [pc, #348]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x110>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d069      	beq.n	8002472 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800239e:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023aa:	4b4d      	ldr	r3, [pc, #308]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d11c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x190>
 80023b6:	4b4a      	ldr	r3, [pc, #296]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d116      	bne.n	80023f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c2:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_RCC_OscConfig+0x17a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d001      	beq.n	80023da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e1e9      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	493d      	ldr	r1, [pc, #244]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ee:	e040      	b.n	8002472 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d023      	beq.n	8002440 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f8:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a38      	ldr	r2, [pc, #224]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe ff1a 	bl	800123c <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240c:	f7fe ff16 	bl	800123c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1c7      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4929      	ldr	r1, [pc, #164]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
 800243e:	e018      	b.n	8002472 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a26      	ldr	r2, [pc, #152]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7fe fef6 	bl	800123c <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002454:	f7fe fef2 	bl	800123c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e1a3      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002466:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d038      	beq.n	80024f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d019      	beq.n	80024ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002486:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248a:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7fe fed3 	bl	800123c <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249a:	f7fe fecf 	bl	800123c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e180      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80024ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x23a>
 80024b8:	e01a      	b.n	80024f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80024bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024be:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe feb9 	bl	800123c <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ce:	f7fe feb5 	bl	800123c <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d903      	bls.n	80024e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e166      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
 80024e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	4b92      	ldr	r3, [pc, #584]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80024e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ee      	bne.n	80024ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a4 	beq.w	8002646 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fe:	4b8c      	ldr	r3, [pc, #560]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10d      	bne.n	8002526 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	4b89      	ldr	r3, [pc, #548]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a88      	ldr	r2, [pc, #544]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b86      	ldr	r3, [pc, #536]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002522:	2301      	movs	r3, #1
 8002524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002526:	4b83      	ldr	r3, [pc, #524]	; (8002734 <HAL_RCC_OscConfig+0x4d4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d118      	bne.n	8002564 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002532:	4b80      	ldr	r3, [pc, #512]	; (8002734 <HAL_RCC_OscConfig+0x4d4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a7f      	ldr	r2, [pc, #508]	; (8002734 <HAL_RCC_OscConfig+0x4d4>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253e:	f7fe fe7d 	bl	800123c <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002546:	f7fe fe79 	bl	800123c <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b64      	cmp	r3, #100	; 0x64
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e12a      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002558:	4b76      	ldr	r3, [pc, #472]	; (8002734 <HAL_RCC_OscConfig+0x4d4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x31a>
 800256c:	4b70      	ldr	r3, [pc, #448]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4a6f      	ldr	r2, [pc, #444]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
 8002578:	e02d      	b.n	80025d6 <HAL_RCC_OscConfig+0x376>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x33c>
 8002582:	4b6b      	ldr	r3, [pc, #428]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	4a6a      	ldr	r2, [pc, #424]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	6713      	str	r3, [r2, #112]	; 0x70
 800258e:	4b68      	ldr	r3, [pc, #416]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a67      	ldr	r2, [pc, #412]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002594:	f023 0304 	bic.w	r3, r3, #4
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
 800259a:	e01c      	b.n	80025d6 <HAL_RCC_OscConfig+0x376>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d10c      	bne.n	80025be <HAL_RCC_OscConfig+0x35e>
 80025a4:	4b62      	ldr	r3, [pc, #392]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	4a61      	ldr	r2, [pc, #388]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	6713      	str	r3, [r2, #112]	; 0x70
 80025b0:	4b5f      	ldr	r3, [pc, #380]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	4a5e      	ldr	r2, [pc, #376]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	; 0x70
 80025bc:	e00b      	b.n	80025d6 <HAL_RCC_OscConfig+0x376>
 80025be:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	4a5b      	ldr	r2, [pc, #364]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ca:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80025d0:	f023 0304 	bic.w	r3, r3, #4
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d015      	beq.n	800260a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025de:	f7fe fe2d 	bl	800123c <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e6:	f7fe fe29 	bl	800123c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e0d8      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fc:	4b4c      	ldr	r3, [pc, #304]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ee      	beq.n	80025e6 <HAL_RCC_OscConfig+0x386>
 8002608:	e014      	b.n	8002634 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7fe fe17 	bl	800123c <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe fe13 	bl	800123c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e0c2      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002628:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1ee      	bne.n	8002612 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002634:	7dfb      	ldrb	r3, [r7, #23]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d105      	bne.n	8002646 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a3c      	ldr	r2, [pc, #240]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80ae 	beq.w	80027ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002650:	4b37      	ldr	r3, [pc, #220]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d06d      	beq.n	8002738 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d14b      	bne.n	80026fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002664:	4b32      	ldr	r3, [pc, #200]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a31      	ldr	r2, [pc, #196]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 800266a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800266e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7fe fde4 	bl	800123c <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002678:	f7fe fde0 	bl	800123c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e091      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	4b29      	ldr	r3, [pc, #164]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	019b      	lsls	r3, r3, #6
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	085b      	lsrs	r3, r3, #1
 80026ae:	3b01      	subs	r3, #1
 80026b0:	041b      	lsls	r3, r3, #16
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	061b      	lsls	r3, r3, #24
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	071b      	lsls	r3, r3, #28
 80026c2:	491b      	ldr	r1, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80026ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fdb2 	bl	800123c <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fdae 	bl	800123c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e05f      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x47c>
 80026fa:	e057      	b.n	80027ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002708:	f7fe fd98 	bl	800123c <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe fd94 	bl	800123c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e045      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x4b0>
 800272e:	e03d      	b.n	80027ac <HAL_RCC_OscConfig+0x54c>
 8002730:	40023800 	.word	0x40023800
 8002734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002738:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <HAL_RCC_OscConfig+0x558>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d030      	beq.n	80027a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d129      	bne.n	80027a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d122      	bne.n	80027a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800276e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002770:	4293      	cmp	r3, r2
 8002772:	d119      	bne.n	80027a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	3b01      	subs	r3, #1
 8002782:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d10f      	bne.n	80027a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d107      	bne.n	80027a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0d0      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027d4:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d910      	bls.n	8002804 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b67      	ldr	r3, [pc, #412]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 020f 	bic.w	r2, r3, #15
 80027ea:	4965      	ldr	r1, [pc, #404]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0b8      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800281c:	4b59      	ldr	r3, [pc, #356]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002826:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002834:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 800283a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800283e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	494d      	ldr	r1, [pc, #308]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d040      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d115      	bne.n	800289e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e073      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288e:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06b      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289e:	4b39      	ldr	r3, [pc, #228]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f023 0203 	bic.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4936      	ldr	r1, [pc, #216]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b0:	f7fe fcc4 	bl	800123c <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b8:	f7fe fcc0 	bl	800123c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e053      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 020c 	and.w	r2, r3, #12
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	429a      	cmp	r2, r3
 80028de:	d1eb      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e0:	4b27      	ldr	r3, [pc, #156]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d210      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 020f 	bic.w	r2, r3, #15
 80028f6:	4922      	ldr	r1, [pc, #136]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e032      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4916      	ldr	r1, [pc, #88]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	490e      	ldr	r1, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800294e:	f000 f821 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8002952:	4602      	mov	r2, r0
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	490a      	ldr	r1, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x1cc>)
 8002960:	5ccb      	ldrb	r3, [r1, r3]
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1d0>)
 8002968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x1d4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fc20 	bl	80011b4 <HAL_InitTick>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023c00 	.word	0x40023c00
 8002984:	40023800 	.word	0x40023800
 8002988:	080056f4 	.word	0x080056f4
 800298c:	20000000 	.word	0x20000000
 8002990:	20000004 	.word	0x20000004

08002994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002998:	b094      	sub	sp, #80	; 0x50
 800299a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
 80029a0:	2300      	movs	r3, #0
 80029a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029a4:	2300      	movs	r3, #0
 80029a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ac:	4b79      	ldr	r3, [pc, #484]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d00d      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x40>
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	f200 80e1 	bhi.w	8002b80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x34>
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d003      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0x3a>
 80029c6:	e0db      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029c8:	4b73      	ldr	r3, [pc, #460]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029cc:	e0db      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ce:	4b73      	ldr	r3, [pc, #460]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x208>)
 80029d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029d2:	e0d8      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d4:	4b6f      	ldr	r3, [pc, #444]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029dc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029de:	4b6d      	ldr	r3, [pc, #436]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d063      	beq.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ea:	4b6a      	ldr	r3, [pc, #424]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	099b      	lsrs	r3, r3, #6
 80029f0:	2200      	movs	r2, #0
 80029f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80029f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30
 80029fe:	2300      	movs	r3, #0
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
 8002a02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a06:	4622      	mov	r2, r4
 8002a08:	462b      	mov	r3, r5
 8002a0a:	f04f 0000 	mov.w	r0, #0
 8002a0e:	f04f 0100 	mov.w	r1, #0
 8002a12:	0159      	lsls	r1, r3, #5
 8002a14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a18:	0150      	lsls	r0, r2, #5
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4621      	mov	r1, r4
 8002a20:	1a51      	subs	r1, r2, r1
 8002a22:	6139      	str	r1, [r7, #16]
 8002a24:	4629      	mov	r1, r5
 8002a26:	eb63 0301 	sbc.w	r3, r3, r1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a38:	4659      	mov	r1, fp
 8002a3a:	018b      	lsls	r3, r1, #6
 8002a3c:	4651      	mov	r1, sl
 8002a3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a42:	4651      	mov	r1, sl
 8002a44:	018a      	lsls	r2, r1, #6
 8002a46:	4651      	mov	r1, sl
 8002a48:	ebb2 0801 	subs.w	r8, r2, r1
 8002a4c:	4659      	mov	r1, fp
 8002a4e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a66:	4690      	mov	r8, r2
 8002a68:	4699      	mov	r9, r3
 8002a6a:	4623      	mov	r3, r4
 8002a6c:	eb18 0303 	adds.w	r3, r8, r3
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	462b      	mov	r3, r5
 8002a74:	eb49 0303 	adc.w	r3, r9, r3
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a86:	4629      	mov	r1, r5
 8002a88:	024b      	lsls	r3, r1, #9
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a90:	4621      	mov	r1, r4
 8002a92:	024a      	lsls	r2, r1, #9
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002aa4:	f7fd fc1c 	bl	80002e0 <__aeabi_uldivmod>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4613      	mov	r3, r2
 8002aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab0:	e058      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab2:	4b38      	ldr	r3, [pc, #224]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	099b      	lsrs	r3, r3, #6
 8002ab8:	2200      	movs	r2, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	4611      	mov	r1, r2
 8002abe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ac2:	623b      	str	r3, [r7, #32]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002acc:	4642      	mov	r2, r8
 8002ace:	464b      	mov	r3, r9
 8002ad0:	f04f 0000 	mov.w	r0, #0
 8002ad4:	f04f 0100 	mov.w	r1, #0
 8002ad8:	0159      	lsls	r1, r3, #5
 8002ada:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ade:	0150      	lsls	r0, r2, #5
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4641      	mov	r1, r8
 8002ae6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002aea:	4649      	mov	r1, r9
 8002aec:	eb63 0b01 	sbc.w	fp, r3, r1
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002afc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b04:	ebb2 040a 	subs.w	r4, r2, sl
 8002b08:	eb63 050b 	sbc.w	r5, r3, fp
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	00eb      	lsls	r3, r5, #3
 8002b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b1a:	00e2      	lsls	r2, r4, #3
 8002b1c:	4614      	mov	r4, r2
 8002b1e:	461d      	mov	r5, r3
 8002b20:	4643      	mov	r3, r8
 8002b22:	18e3      	adds	r3, r4, r3
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	464b      	mov	r3, r9
 8002b28:	eb45 0303 	adc.w	r3, r5, r3
 8002b2c:	607b      	str	r3, [r7, #4]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	028b      	lsls	r3, r1, #10
 8002b3e:	4621      	mov	r1, r4
 8002b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b44:	4621      	mov	r1, r4
 8002b46:	028a      	lsls	r2, r1, #10
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	61fa      	str	r2, [r7, #28]
 8002b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b58:	f7fd fbc2 	bl	80002e0 <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4613      	mov	r3, r2
 8002b62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002b74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b7e:	e002      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3750      	adds	r7, #80	; 0x50
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	00f42400 	.word	0x00f42400
 8002b9c:	007a1200 	.word	0x007a1200

08002ba0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000000 	.word	0x20000000

08002bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bbc:	f7ff fff0 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	0a9b      	lsrs	r3, r3, #10
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	4903      	ldr	r1, [pc, #12]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	08005704 	.word	0x08005704

08002be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002be4:	f7ff ffdc 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002be8:	4602      	mov	r2, r0
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	0b5b      	lsrs	r3, r3, #13
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	4903      	ldr	r1, [pc, #12]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf6:	5ccb      	ldrb	r3, [r1, r3]
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40023800 	.word	0x40023800
 8002c04:	08005704 	.word	0x08005704

08002c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d012      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c30:	4b69      	ldr	r3, [pc, #420]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4a68      	ldr	r2, [pc, #416]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c3a:	6093      	str	r3, [r2, #8]
 8002c3c:	4b66      	ldr	r3, [pc, #408]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c44:	4964      	ldr	r1, [pc, #400]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c52:	2301      	movs	r3, #1
 8002c54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d017      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c62:	4b5d      	ldr	r3, [pc, #372]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c70:	4959      	ldr	r1, [pc, #356]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c80:	d101      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d017      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c9e:	4b4e      	ldr	r3, [pc, #312]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	494a      	ldr	r1, [pc, #296]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 808b 	beq.w	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	4b3a      	ldr	r3, [pc, #232]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	4a39      	ldr	r2, [pc, #228]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf8:	4b37      	ldr	r3, [pc, #220]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d04:	4b35      	ldr	r3, [pc, #212]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a34      	ldr	r2, [pc, #208]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d10:	f7fe fa94 	bl	800123c <HAL_GetTick>
 8002d14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d18:	f7fe fa90 	bl	800123c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e38f      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d2a:	4b2c      	ldr	r3, [pc, #176]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d36:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d035      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d02e      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d54:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d76:	4a18      	ldr	r2, [pc, #96]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d7c:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d114      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe fa58 	bl	800123c <HAL_GetTick>
 8002d8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d90:	f7fe fa54 	bl	800123c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e351      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0ee      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dbe:	d111      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002dce:	400b      	ands	r3, r1
 8002dd0:	4901      	ldr	r1, [pc, #4]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40007000 	.word	0x40007000
 8002de0:	0ffffcff 	.word	0x0ffffcff
 8002de4:	4bac      	ldr	r3, [pc, #688]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4aab      	ldr	r2, [pc, #684]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dee:	6093      	str	r3, [r2, #8]
 8002df0:	4ba9      	ldr	r3, [pc, #676]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfc:	49a6      	ldr	r1, [pc, #664]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d010      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e0e:	4ba2      	ldr	r3, [pc, #648]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e14:	4aa0      	ldr	r2, [pc, #640]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e1e:	4b9e      	ldr	r3, [pc, #632]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	499b      	ldr	r1, [pc, #620]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e3c:	4b96      	ldr	r3, [pc, #600]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e4a:	4993      	ldr	r1, [pc, #588]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e5e:	4b8e      	ldr	r3, [pc, #568]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e6c:	498a      	ldr	r1, [pc, #552]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e80:	4b85      	ldr	r3, [pc, #532]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e8e:	4982      	ldr	r1, [pc, #520]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ea2:	4b7d      	ldr	r3, [pc, #500]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	4979      	ldr	r1, [pc, #484]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec4:	4b74      	ldr	r3, [pc, #464]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	f023 0203 	bic.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	4971      	ldr	r1, [pc, #452]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ee6:	4b6c      	ldr	r3, [pc, #432]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eec:	f023 020c 	bic.w	r2, r3, #12
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef4:	4968      	ldr	r1, [pc, #416]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f08:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	4960      	ldr	r1, [pc, #384]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f2a:	4b5b      	ldr	r3, [pc, #364]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f38:	4957      	ldr	r1, [pc, #348]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f4c:	4b52      	ldr	r3, [pc, #328]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	494f      	ldr	r1, [pc, #316]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	4946      	ldr	r1, [pc, #280]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f90:	4b41      	ldr	r3, [pc, #260]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	493e      	ldr	r1, [pc, #248]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002fb2:	4b39      	ldr	r3, [pc, #228]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc0:	4935      	ldr	r1, [pc, #212]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fd4:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe2:	492d      	ldr	r1, [pc, #180]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d011      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003004:	4924      	ldr	r1, [pc, #144]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003014:	d101      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003016:	2301      	movs	r3, #1
 8003018:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003026:	2301      	movs	r3, #1
 8003028:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003044:	4914      	ldr	r1, [pc, #80]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00b      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003068:	490b      	ldr	r1, [pc, #44]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00f      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308c:	4902      	ldr	r1, [pc, #8]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003094:	e002      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00b      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030a8:	4b8a      	ldr	r3, [pc, #552]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	4986      	ldr	r1, [pc, #536]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00b      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030cc:	4b81      	ldr	r3, [pc, #516]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030dc:	497d      	ldr	r1, [pc, #500]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d006      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80d6 	beq.w	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030f8:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a75      	ldr	r2, [pc, #468]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003104:	f7fe f89a 	bl	800123c <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800310c:	f7fe f896 	bl	800123c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e195      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800311e:	4b6d      	ldr	r3, [pc, #436]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d021      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313a:	2b00      	cmp	r3, #0
 800313c:	d11d      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800313e:	4b65      	ldr	r3, [pc, #404]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800314c:	4b61      	ldr	r3, [pc, #388]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003152:	0e1b      	lsrs	r3, r3, #24
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	019a      	lsls	r2, r3, #6
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	041b      	lsls	r3, r3, #16
 8003164:	431a      	orrs	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	061b      	lsls	r3, r3, #24
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	071b      	lsls	r3, r3, #28
 8003172:	4958      	ldr	r1, [pc, #352]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d004      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800318e:	d00a      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003198:	2b00      	cmp	r3, #0
 800319a:	d02e      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a4:	d129      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031a6:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031b4:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ba:	0f1b      	lsrs	r3, r3, #28
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	019a      	lsls	r2, r3, #6
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	061b      	lsls	r3, r3, #24
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	071b      	lsls	r3, r3, #28
 80031da:	493e      	ldr	r1, [pc, #248]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031e2:	4b3c      	ldr	r3, [pc, #240]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e8:	f023 021f 	bic.w	r2, r3, #31
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	3b01      	subs	r3, #1
 80031f2:	4938      	ldr	r1, [pc, #224]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01d      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003206:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320c:	0e1b      	lsrs	r3, r3, #24
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003214:	4b2f      	ldr	r3, [pc, #188]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800321a:	0f1b      	lsrs	r3, r3, #28
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	019a      	lsls	r2, r3, #6
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	431a      	orrs	r2, r3
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	061b      	lsls	r3, r3, #24
 8003234:	431a      	orrs	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	071b      	lsls	r3, r3, #28
 800323a:	4926      	ldr	r1, [pc, #152]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d011      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	019a      	lsls	r2, r3, #6
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	061b      	lsls	r3, r3, #24
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	071b      	lsls	r3, r3, #28
 800326a:	491a      	ldr	r1, [pc, #104]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003272:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003278:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800327c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800327e:	f7fd ffdd 	bl	800123c <HAL_GetTick>
 8003282:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003286:	f7fd ffd9 	bl	800123c <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b64      	cmp	r3, #100	; 0x64
 8003292:	d901      	bls.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0d8      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003298:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	f040 80ce 	bne.w	8003448 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032ac:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b8:	f7fd ffc0 	bl	800123c <HAL_GetTick>
 80032bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032be:	e00b      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032c0:	f7fd ffbc 	bl	800123c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d904      	bls.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e0bb      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032d8:	4b5e      	ldr	r3, [pc, #376]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e4:	d0ec      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003302:	2b00      	cmp	r3, #0
 8003304:	d02e      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d12a      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800330e:	4b51      	ldr	r3, [pc, #324]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800331c:	4b4d      	ldr	r3, [pc, #308]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	0f1b      	lsrs	r3, r3, #28
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	019a      	lsls	r2, r3, #6
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	041b      	lsls	r3, r3, #16
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	071b      	lsls	r3, r3, #28
 8003342:	4944      	ldr	r1, [pc, #272]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800334a:	4b42      	ldr	r3, [pc, #264]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800334c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003350:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	3b01      	subs	r3, #1
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	493d      	ldr	r1, [pc, #244]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d022      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003378:	d11d      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800337a:	4b36      	ldr	r3, [pc, #216]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	0e1b      	lsrs	r3, r3, #24
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003388:	4b32      	ldr	r3, [pc, #200]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	0f1b      	lsrs	r3, r3, #28
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	019a      	lsls	r2, r3, #6
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	041b      	lsls	r3, r3, #16
 80033a2:	431a      	orrs	r2, r3
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	061b      	lsls	r3, r3, #24
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	071b      	lsls	r3, r3, #28
 80033ae:	4929      	ldr	r1, [pc, #164]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d028      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033c2:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c8:	0e1b      	lsrs	r3, r3, #24
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033d0:	4b20      	ldr	r3, [pc, #128]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	019a      	lsls	r2, r3, #6
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	041b      	lsls	r3, r3, #16
 80033e8:	431a      	orrs	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	061b      	lsls	r3, r3, #24
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	071b      	lsls	r3, r3, #28
 80033f6:	4917      	ldr	r1, [pc, #92]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	4911      	ldr	r1, [pc, #68]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0e      	ldr	r2, [pc, #56]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003420:	f7fd ff0c 	bl	800123c <HAL_GetTick>
 8003424:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003428:	f7fd ff08 	bl	800123c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e007      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003446:	d1ef      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800

08003458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e09d      	b.n	80035a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	2b00      	cmp	r3, #0
 8003470:	d108      	bne.n	8003484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800347a:	d009      	beq.n	8003490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	61da      	str	r2, [r3, #28]
 8003482:	e005      	b.n	8003490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd fc26 	bl	8000cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034d0:	d902      	bls.n	80034d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	e002      	b.n	80034de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034e6:	d007      	beq.n	80034f8 <HAL_SPI_Init+0xa0>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034f0:	d002      	beq.n	80034f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353a:	ea42 0103 	orr.w	r1, r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	f003 0204 	and.w	r2, r3, #4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003574:	ea42 0103 	orr.w	r1, r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003594:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b088      	sub	sp, #32
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_SPI_Transmit+0x22>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e158      	b.n	8003882 <HAL_SPI_Transmit+0x2d4>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035d8:	f7fd fe30 	bl	800123c <HAL_GetTick>
 80035dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d002      	beq.n	80035f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
 80035f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035f2:	e13d      	b.n	8003870 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_SPI_Transmit+0x52>
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003604:	e134      	b.n	8003870 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2203      	movs	r2, #3
 800360a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	88fa      	ldrh	r2, [r7, #6]
 800361e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003650:	d10f      	bne.n	8003672 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003660:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003670:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d007      	beq.n	8003690 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800368e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003698:	d94b      	bls.n	8003732 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_SPI_Transmit+0xfa>
 80036a2:	8afb      	ldrh	r3, [r7, #22]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d13e      	bne.n	8003726 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	881a      	ldrh	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	1c9a      	adds	r2, r3, #2
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036cc:	e02b      	b.n	8003726 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d112      	bne.n	8003702 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	1c9a      	adds	r2, r3, #2
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003700:	e011      	b.n	8003726 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003702:	f7fd fd9b 	bl	800123c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d803      	bhi.n	800371a <HAL_SPI_Transmit+0x16c>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d102      	bne.n	8003720 <HAL_SPI_Transmit+0x172>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003724:	e0a4      	b.n	8003870 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ce      	bne.n	80036ce <HAL_SPI_Transmit+0x120>
 8003730:	e07c      	b.n	800382c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_SPI_Transmit+0x192>
 800373a:	8afb      	ldrh	r3, [r7, #22]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d170      	bne.n	8003822 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d912      	bls.n	8003770 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	881a      	ldrh	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	1c9a      	adds	r2, r3, #2
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b02      	subs	r3, #2
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800376e:	e058      	b.n	8003822 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	7812      	ldrb	r2, [r2, #0]
 800377c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003796:	e044      	b.n	8003822 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d12b      	bne.n	80037fe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d912      	bls.n	80037d6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	881a      	ldrh	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	1c9a      	adds	r2, r3, #2
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b02      	subs	r3, #2
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037d4:	e025      	b.n	8003822 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	330c      	adds	r3, #12
 80037e0:	7812      	ldrb	r2, [r2, #0]
 80037e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037fc:	e011      	b.n	8003822 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037fe:	f7fd fd1d 	bl	800123c <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d803      	bhi.n	8003816 <HAL_SPI_Transmit+0x268>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d102      	bne.n	800381c <HAL_SPI_Transmit+0x26e>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003820:	e026      	b.n	8003870 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1b5      	bne.n	8003798 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	6839      	ldr	r1, [r7, #0]
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fa5d 	bl	8003cf0 <SPI_EndRxTxTransaction>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10a      	bne.n	8003860 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e000      	b.n	8003870 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800386e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003880:	7ffb      	ldrb	r3, [r7, #31]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10e      	bne.n	80038cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d009      	beq.n	80038cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
    return;
 80038ca:	e0ce      	b.n	8003a6a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_SPI_IRQHandler+0x5e>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d004      	beq.n	80038ea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
    return;
 80038e8:	e0bf      	b.n	8003a6a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <HAL_SPI_IRQHandler+0x7e>
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80b0 	beq.w	8003a6a <HAL_SPI_IRQHandler+0x1de>
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80aa 	beq.w	8003a6a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d023      	beq.n	8003968 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b03      	cmp	r3, #3
 800392a:	d011      	beq.n	8003950 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003930:	f043 0204 	orr.w	r2, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	e00b      	b.n	8003968 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	693b      	ldr	r3, [r7, #16]
        return;
 8003966:	e080      	b.n	8003a6a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	d014      	beq.n	800399c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003976:	f043 0201 	orr.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00c      	beq.n	80039c0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039aa:	f043 0208 	orr.w	r2, r3, #8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d04f      	beq.n	8003a68 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039d6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <HAL_SPI_IRQHandler+0x168>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d034      	beq.n	8003a5e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0203 	bic.w	r2, r2, #3
 8003a02:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d011      	beq.n	8003a30 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	4a17      	ldr	r2, [pc, #92]	; (8003a70 <HAL_SPI_IRQHandler+0x1e4>)
 8003a12:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fd fd50 	bl	80014be <HAL_DMA_Abort_IT>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d016      	beq.n	8003a66 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	4a0c      	ldr	r2, [pc, #48]	; (8003a70 <HAL_SPI_IRQHandler+0x1e4>)
 8003a3e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fd fd3a 	bl	80014be <HAL_DMA_Abort_IT>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003a5c:	e003      	b.n	8003a66 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f808 	bl	8003a74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a64:	e000      	b.n	8003a68 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003a66:	bf00      	nop
    return;
 8003a68:	bf00      	nop
  }
}
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	08003a89 	.word	0x08003a89

08003a74 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff ffe5 	bl	8003a74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ac4:	f7fd fbba 	bl	800123c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ad4:	f7fd fbb2 	bl	800123c <HAL_GetTick>
 8003ad8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ada:	4b39      	ldr	r3, [pc, #228]	; (8003bc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	015b      	lsls	r3, r3, #5
 8003ae0:	0d1b      	lsrs	r3, r3, #20
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	fb02 f303 	mul.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aea:	e054      	b.n	8003b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d050      	beq.n	8003b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003af4:	f7fd fba2 	bl	800123c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d902      	bls.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d13d      	bne.n	8003b86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b22:	d111      	bne.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2c:	d004      	beq.n	8003b38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	d107      	bne.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b50:	d10f      	bne.n	8003b72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e017      	b.n	8003bb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	bf0c      	ite	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	2300      	movne	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d19b      	bne.n	8003aec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3720      	adds	r7, #32
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000000 	.word	0x20000000

08003bc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08a      	sub	sp, #40	; 0x28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bd6:	f7fd fb31 	bl	800123c <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	4413      	add	r3, r2
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003be6:	f7fd fb29 	bl	800123c <HAL_GetTick>
 8003bea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003bf4:	4b3d      	ldr	r3, [pc, #244]	; (8003cec <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00da      	lsls	r2, r3, #3
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	0d1b      	lsrs	r3, r3, #20
 8003c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c0c:	e060      	b.n	8003cd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c14:	d107      	bne.n	8003c26 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d104      	bne.n	8003c26 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d050      	beq.n	8003cd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c2e:	f7fd fb05 	bl	800123c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d902      	bls.n	8003c44 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d13d      	bne.n	8003cc0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5c:	d111      	bne.n	8003c82 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c66:	d004      	beq.n	8003c72 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c70:	d107      	bne.n	8003c82 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8a:	d10f      	bne.n	8003cac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003caa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e010      	b.n	8003ce2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d196      	bne.n	8003c0e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3728      	adds	r7, #40	; 0x28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000000 	.word	0x20000000

08003cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff ff5b 	bl	8003bc4 <SPI_WaitFifoStateUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d18:	f043 0220 	orr.w	r2, r3, #32
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e046      	b.n	8003db2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d24:	4b25      	ldr	r3, [pc, #148]	; (8003dbc <SPI_EndRxTxTransaction+0xcc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a25      	ldr	r2, [pc, #148]	; (8003dc0 <SPI_EndRxTxTransaction+0xd0>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	0d5b      	lsrs	r3, r3, #21
 8003d30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d34:	fb02 f303 	mul.w	r3, r2, r3
 8003d38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d42:	d112      	bne.n	8003d6a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2180      	movs	r1, #128	; 0x80
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7ff feb0 	bl	8003ab4 <SPI_WaitFlagStateUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d016      	beq.n	8003d88 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e023      	b.n	8003db2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d80:	2b80      	cmp	r3, #128	; 0x80
 8003d82:	d0f2      	beq.n	8003d6a <SPI_EndRxTxTransaction+0x7a>
 8003d84:	e000      	b.n	8003d88 <SPI_EndRxTxTransaction+0x98>
        break;
 8003d86:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f7ff ff15 	bl	8003bc4 <SPI_WaitFifoStateUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e000      	b.n	8003db2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000000 	.word	0x20000000
 8003dc0:	165e9f81 	.word	0x165e9f81

08003dc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e040      	b.n	8003e58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fc fff2 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2224      	movs	r2, #36	; 0x24
 8003df0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8b0 	bl	8003f68 <UART_SetConfig>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e022      	b.n	8003e58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fb08 	bl	8004430 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fb8f 	bl	8004574 <UART_CheckIdleState>
 8003e56:	4603      	mov	r3, r0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d171      	bne.n	8003f5c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_UART_Transmit+0x24>
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e06a      	b.n	8003f5e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2221      	movs	r2, #33	; 0x21
 8003e94:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e96:	f7fd f9d1 	bl	800123c <HAL_GetTick>
 8003e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	88fa      	ldrh	r2, [r7, #6]
 8003ea0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb4:	d108      	bne.n	8003ec8 <HAL_UART_Transmit+0x68>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d104      	bne.n	8003ec8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	e003      	b.n	8003ed0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ed0:	e02c      	b.n	8003f2c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2180      	movs	r1, #128	; 0x80
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fb96 	bl	800460e <UART_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e038      	b.n	8003f5e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	3302      	adds	r3, #2
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	e007      	b.n	8003f1a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	3301      	adds	r3, #1
 8003f18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1cc      	bne.n	8003ed2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2140      	movs	r1, #64	; 0x40
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fb63 	bl	800460e <UART_WaitOnFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e005      	b.n	8003f5e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e000      	b.n	8003f5e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
  }
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4ba6      	ldr	r3, [pc, #664]	; (800422c <UART_SetConfig+0x2c4>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	6979      	ldr	r1, [r7, #20]
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a94      	ldr	r2, [pc, #592]	; (8004230 <UART_SetConfig+0x2c8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d120      	bne.n	8004026 <UART_SetConfig+0xbe>
 8003fe4:	4b93      	ldr	r3, [pc, #588]	; (8004234 <UART_SetConfig+0x2cc>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d816      	bhi.n	8004020 <UART_SetConfig+0xb8>
 8003ff2:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <UART_SetConfig+0x90>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	08004009 	.word	0x08004009
 8003ffc:	08004015 	.word	0x08004015
 8004000:	0800400f 	.word	0x0800400f
 8004004:	0800401b 	.word	0x0800401b
 8004008:	2301      	movs	r3, #1
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e150      	b.n	80042b0 <UART_SetConfig+0x348>
 800400e:	2302      	movs	r3, #2
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e14d      	b.n	80042b0 <UART_SetConfig+0x348>
 8004014:	2304      	movs	r3, #4
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e14a      	b.n	80042b0 <UART_SetConfig+0x348>
 800401a:	2308      	movs	r3, #8
 800401c:	77fb      	strb	r3, [r7, #31]
 800401e:	e147      	b.n	80042b0 <UART_SetConfig+0x348>
 8004020:	2310      	movs	r3, #16
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	e144      	b.n	80042b0 <UART_SetConfig+0x348>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a83      	ldr	r2, [pc, #524]	; (8004238 <UART_SetConfig+0x2d0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d132      	bne.n	8004096 <UART_SetConfig+0x12e>
 8004030:	4b80      	ldr	r3, [pc, #512]	; (8004234 <UART_SetConfig+0x2cc>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d828      	bhi.n	8004090 <UART_SetConfig+0x128>
 800403e:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <UART_SetConfig+0xdc>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	08004079 	.word	0x08004079
 8004048:	08004091 	.word	0x08004091
 800404c:	08004091 	.word	0x08004091
 8004050:	08004091 	.word	0x08004091
 8004054:	08004085 	.word	0x08004085
 8004058:	08004091 	.word	0x08004091
 800405c:	08004091 	.word	0x08004091
 8004060:	08004091 	.word	0x08004091
 8004064:	0800407f 	.word	0x0800407f
 8004068:	08004091 	.word	0x08004091
 800406c:	08004091 	.word	0x08004091
 8004070:	08004091 	.word	0x08004091
 8004074:	0800408b 	.word	0x0800408b
 8004078:	2300      	movs	r3, #0
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	e118      	b.n	80042b0 <UART_SetConfig+0x348>
 800407e:	2302      	movs	r3, #2
 8004080:	77fb      	strb	r3, [r7, #31]
 8004082:	e115      	b.n	80042b0 <UART_SetConfig+0x348>
 8004084:	2304      	movs	r3, #4
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e112      	b.n	80042b0 <UART_SetConfig+0x348>
 800408a:	2308      	movs	r3, #8
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e10f      	b.n	80042b0 <UART_SetConfig+0x348>
 8004090:	2310      	movs	r3, #16
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e10c      	b.n	80042b0 <UART_SetConfig+0x348>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a68      	ldr	r2, [pc, #416]	; (800423c <UART_SetConfig+0x2d4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d120      	bne.n	80040e2 <UART_SetConfig+0x17a>
 80040a0:	4b64      	ldr	r3, [pc, #400]	; (8004234 <UART_SetConfig+0x2cc>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040aa:	2b30      	cmp	r3, #48	; 0x30
 80040ac:	d013      	beq.n	80040d6 <UART_SetConfig+0x16e>
 80040ae:	2b30      	cmp	r3, #48	; 0x30
 80040b0:	d814      	bhi.n	80040dc <UART_SetConfig+0x174>
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d009      	beq.n	80040ca <UART_SetConfig+0x162>
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	d810      	bhi.n	80040dc <UART_SetConfig+0x174>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <UART_SetConfig+0x15c>
 80040be:	2b10      	cmp	r3, #16
 80040c0:	d006      	beq.n	80040d0 <UART_SetConfig+0x168>
 80040c2:	e00b      	b.n	80040dc <UART_SetConfig+0x174>
 80040c4:	2300      	movs	r3, #0
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e0f2      	b.n	80042b0 <UART_SetConfig+0x348>
 80040ca:	2302      	movs	r3, #2
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	e0ef      	b.n	80042b0 <UART_SetConfig+0x348>
 80040d0:	2304      	movs	r3, #4
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e0ec      	b.n	80042b0 <UART_SetConfig+0x348>
 80040d6:	2308      	movs	r3, #8
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e0e9      	b.n	80042b0 <UART_SetConfig+0x348>
 80040dc:	2310      	movs	r3, #16
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e0e6      	b.n	80042b0 <UART_SetConfig+0x348>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a56      	ldr	r2, [pc, #344]	; (8004240 <UART_SetConfig+0x2d8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d120      	bne.n	800412e <UART_SetConfig+0x1c6>
 80040ec:	4b51      	ldr	r3, [pc, #324]	; (8004234 <UART_SetConfig+0x2cc>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040f6:	2bc0      	cmp	r3, #192	; 0xc0
 80040f8:	d013      	beq.n	8004122 <UART_SetConfig+0x1ba>
 80040fa:	2bc0      	cmp	r3, #192	; 0xc0
 80040fc:	d814      	bhi.n	8004128 <UART_SetConfig+0x1c0>
 80040fe:	2b80      	cmp	r3, #128	; 0x80
 8004100:	d009      	beq.n	8004116 <UART_SetConfig+0x1ae>
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	d810      	bhi.n	8004128 <UART_SetConfig+0x1c0>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <UART_SetConfig+0x1a8>
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	d006      	beq.n	800411c <UART_SetConfig+0x1b4>
 800410e:	e00b      	b.n	8004128 <UART_SetConfig+0x1c0>
 8004110:	2300      	movs	r3, #0
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e0cc      	b.n	80042b0 <UART_SetConfig+0x348>
 8004116:	2302      	movs	r3, #2
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	e0c9      	b.n	80042b0 <UART_SetConfig+0x348>
 800411c:	2304      	movs	r3, #4
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e0c6      	b.n	80042b0 <UART_SetConfig+0x348>
 8004122:	2308      	movs	r3, #8
 8004124:	77fb      	strb	r3, [r7, #31]
 8004126:	e0c3      	b.n	80042b0 <UART_SetConfig+0x348>
 8004128:	2310      	movs	r3, #16
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e0c0      	b.n	80042b0 <UART_SetConfig+0x348>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a44      	ldr	r2, [pc, #272]	; (8004244 <UART_SetConfig+0x2dc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d125      	bne.n	8004184 <UART_SetConfig+0x21c>
 8004138:	4b3e      	ldr	r3, [pc, #248]	; (8004234 <UART_SetConfig+0x2cc>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004146:	d017      	beq.n	8004178 <UART_SetConfig+0x210>
 8004148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414c:	d817      	bhi.n	800417e <UART_SetConfig+0x216>
 800414e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004152:	d00b      	beq.n	800416c <UART_SetConfig+0x204>
 8004154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004158:	d811      	bhi.n	800417e <UART_SetConfig+0x216>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <UART_SetConfig+0x1fe>
 800415e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004162:	d006      	beq.n	8004172 <UART_SetConfig+0x20a>
 8004164:	e00b      	b.n	800417e <UART_SetConfig+0x216>
 8004166:	2300      	movs	r3, #0
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e0a1      	b.n	80042b0 <UART_SetConfig+0x348>
 800416c:	2302      	movs	r3, #2
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e09e      	b.n	80042b0 <UART_SetConfig+0x348>
 8004172:	2304      	movs	r3, #4
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e09b      	b.n	80042b0 <UART_SetConfig+0x348>
 8004178:	2308      	movs	r3, #8
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e098      	b.n	80042b0 <UART_SetConfig+0x348>
 800417e:	2310      	movs	r3, #16
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e095      	b.n	80042b0 <UART_SetConfig+0x348>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a2f      	ldr	r2, [pc, #188]	; (8004248 <UART_SetConfig+0x2e0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d125      	bne.n	80041da <UART_SetConfig+0x272>
 800418e:	4b29      	ldr	r3, [pc, #164]	; (8004234 <UART_SetConfig+0x2cc>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004198:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800419c:	d017      	beq.n	80041ce <UART_SetConfig+0x266>
 800419e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041a2:	d817      	bhi.n	80041d4 <UART_SetConfig+0x26c>
 80041a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a8:	d00b      	beq.n	80041c2 <UART_SetConfig+0x25a>
 80041aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ae:	d811      	bhi.n	80041d4 <UART_SetConfig+0x26c>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <UART_SetConfig+0x254>
 80041b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b8:	d006      	beq.n	80041c8 <UART_SetConfig+0x260>
 80041ba:	e00b      	b.n	80041d4 <UART_SetConfig+0x26c>
 80041bc:	2301      	movs	r3, #1
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	e076      	b.n	80042b0 <UART_SetConfig+0x348>
 80041c2:	2302      	movs	r3, #2
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e073      	b.n	80042b0 <UART_SetConfig+0x348>
 80041c8:	2304      	movs	r3, #4
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e070      	b.n	80042b0 <UART_SetConfig+0x348>
 80041ce:	2308      	movs	r3, #8
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e06d      	b.n	80042b0 <UART_SetConfig+0x348>
 80041d4:	2310      	movs	r3, #16
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e06a      	b.n	80042b0 <UART_SetConfig+0x348>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1b      	ldr	r2, [pc, #108]	; (800424c <UART_SetConfig+0x2e4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d138      	bne.n	8004256 <UART_SetConfig+0x2ee>
 80041e4:	4b13      	ldr	r3, [pc, #76]	; (8004234 <UART_SetConfig+0x2cc>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041f2:	d017      	beq.n	8004224 <UART_SetConfig+0x2bc>
 80041f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041f8:	d82a      	bhi.n	8004250 <UART_SetConfig+0x2e8>
 80041fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041fe:	d00b      	beq.n	8004218 <UART_SetConfig+0x2b0>
 8004200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004204:	d824      	bhi.n	8004250 <UART_SetConfig+0x2e8>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <UART_SetConfig+0x2aa>
 800420a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420e:	d006      	beq.n	800421e <UART_SetConfig+0x2b6>
 8004210:	e01e      	b.n	8004250 <UART_SetConfig+0x2e8>
 8004212:	2300      	movs	r3, #0
 8004214:	77fb      	strb	r3, [r7, #31]
 8004216:	e04b      	b.n	80042b0 <UART_SetConfig+0x348>
 8004218:	2302      	movs	r3, #2
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e048      	b.n	80042b0 <UART_SetConfig+0x348>
 800421e:	2304      	movs	r3, #4
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e045      	b.n	80042b0 <UART_SetConfig+0x348>
 8004224:	2308      	movs	r3, #8
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e042      	b.n	80042b0 <UART_SetConfig+0x348>
 800422a:	bf00      	nop
 800422c:	efff69f3 	.word	0xefff69f3
 8004230:	40011000 	.word	0x40011000
 8004234:	40023800 	.word	0x40023800
 8004238:	40004400 	.word	0x40004400
 800423c:	40004800 	.word	0x40004800
 8004240:	40004c00 	.word	0x40004c00
 8004244:	40005000 	.word	0x40005000
 8004248:	40011400 	.word	0x40011400
 800424c:	40007800 	.word	0x40007800
 8004250:	2310      	movs	r3, #16
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e02c      	b.n	80042b0 <UART_SetConfig+0x348>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a72      	ldr	r2, [pc, #456]	; (8004424 <UART_SetConfig+0x4bc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d125      	bne.n	80042ac <UART_SetConfig+0x344>
 8004260:	4b71      	ldr	r3, [pc, #452]	; (8004428 <UART_SetConfig+0x4c0>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800426a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800426e:	d017      	beq.n	80042a0 <UART_SetConfig+0x338>
 8004270:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004274:	d817      	bhi.n	80042a6 <UART_SetConfig+0x33e>
 8004276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427a:	d00b      	beq.n	8004294 <UART_SetConfig+0x32c>
 800427c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004280:	d811      	bhi.n	80042a6 <UART_SetConfig+0x33e>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <UART_SetConfig+0x326>
 8004286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800428a:	d006      	beq.n	800429a <UART_SetConfig+0x332>
 800428c:	e00b      	b.n	80042a6 <UART_SetConfig+0x33e>
 800428e:	2300      	movs	r3, #0
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e00d      	b.n	80042b0 <UART_SetConfig+0x348>
 8004294:	2302      	movs	r3, #2
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e00a      	b.n	80042b0 <UART_SetConfig+0x348>
 800429a:	2304      	movs	r3, #4
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e007      	b.n	80042b0 <UART_SetConfig+0x348>
 80042a0:	2308      	movs	r3, #8
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e004      	b.n	80042b0 <UART_SetConfig+0x348>
 80042a6:	2310      	movs	r3, #16
 80042a8:	77fb      	strb	r3, [r7, #31]
 80042aa:	e001      	b.n	80042b0 <UART_SetConfig+0x348>
 80042ac:	2310      	movs	r3, #16
 80042ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b8:	d15b      	bne.n	8004372 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80042ba:	7ffb      	ldrb	r3, [r7, #31]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d828      	bhi.n	8004312 <UART_SetConfig+0x3aa>
 80042c0:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <UART_SetConfig+0x360>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042ed 	.word	0x080042ed
 80042cc:	080042f5 	.word	0x080042f5
 80042d0:	080042fd 	.word	0x080042fd
 80042d4:	08004313 	.word	0x08004313
 80042d8:	08004303 	.word	0x08004303
 80042dc:	08004313 	.word	0x08004313
 80042e0:	08004313 	.word	0x08004313
 80042e4:	08004313 	.word	0x08004313
 80042e8:	0800430b 	.word	0x0800430b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ec:	f7fe fc64 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 80042f0:	61b8      	str	r0, [r7, #24]
        break;
 80042f2:	e013      	b.n	800431c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042f4:	f7fe fc74 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 80042f8:	61b8      	str	r0, [r7, #24]
        break;
 80042fa:	e00f      	b.n	800431c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042fc:	4b4b      	ldr	r3, [pc, #300]	; (800442c <UART_SetConfig+0x4c4>)
 80042fe:	61bb      	str	r3, [r7, #24]
        break;
 8004300:	e00c      	b.n	800431c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004302:	f7fe fb47 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8004306:	61b8      	str	r0, [r7, #24]
        break;
 8004308:	e008      	b.n	800431c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800430a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800430e:	61bb      	str	r3, [r7, #24]
        break;
 8004310:	e004      	b.n	800431c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	77bb      	strb	r3, [r7, #30]
        break;
 800431a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d074      	beq.n	800440c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	005a      	lsls	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	441a      	add	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b0f      	cmp	r3, #15
 800433c:	d916      	bls.n	800436c <UART_SetConfig+0x404>
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004344:	d212      	bcs.n	800436c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	b29b      	uxth	r3, r3
 800434a:	f023 030f 	bic.w	r3, r3, #15
 800434e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	b29b      	uxth	r3, r3
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	b29a      	uxth	r2, r3
 800435c:	89fb      	ldrh	r3, [r7, #14]
 800435e:	4313      	orrs	r3, r2
 8004360:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	89fa      	ldrh	r2, [r7, #14]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	e04f      	b.n	800440c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	77bb      	strb	r3, [r7, #30]
 8004370:	e04c      	b.n	800440c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004372:	7ffb      	ldrb	r3, [r7, #31]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d828      	bhi.n	80043ca <UART_SetConfig+0x462>
 8004378:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <UART_SetConfig+0x418>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043ad 	.word	0x080043ad
 8004388:	080043b5 	.word	0x080043b5
 800438c:	080043cb 	.word	0x080043cb
 8004390:	080043bb 	.word	0x080043bb
 8004394:	080043cb 	.word	0x080043cb
 8004398:	080043cb 	.word	0x080043cb
 800439c:	080043cb 	.word	0x080043cb
 80043a0:	080043c3 	.word	0x080043c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a4:	f7fe fc08 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 80043a8:	61b8      	str	r0, [r7, #24]
        break;
 80043aa:	e013      	b.n	80043d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043ac:	f7fe fc18 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 80043b0:	61b8      	str	r0, [r7, #24]
        break;
 80043b2:	e00f      	b.n	80043d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b4:	4b1d      	ldr	r3, [pc, #116]	; (800442c <UART_SetConfig+0x4c4>)
 80043b6:	61bb      	str	r3, [r7, #24]
        break;
 80043b8:	e00c      	b.n	80043d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ba:	f7fe faeb 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 80043be:	61b8      	str	r0, [r7, #24]
        break;
 80043c0:	e008      	b.n	80043d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c6:	61bb      	str	r3, [r7, #24]
        break;
 80043c8:	e004      	b.n	80043d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	77bb      	strb	r3, [r7, #30]
        break;
 80043d2:	bf00      	nop
    }

    if (pclk != 0U)
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d018      	beq.n	800440c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	085a      	lsrs	r2, r3, #1
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	441a      	add	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b0f      	cmp	r3, #15
 80043f2:	d909      	bls.n	8004408 <UART_SetConfig+0x4a0>
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fa:	d205      	bcs.n	8004408 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60da      	str	r2, [r3, #12]
 8004406:	e001      	b.n	800440c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004418:	7fbb      	ldrb	r3, [r7, #30]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40007c00 	.word	0x40007c00
 8004428:	40023800 	.word	0x40023800
 800442c:	00f42400 	.word	0x00f42400

08004430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01a      	beq.n	8004546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452e:	d10a      	bne.n	8004546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af02      	add	r7, sp, #8
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004584:	f7fc fe5a 	bl	800123c <HAL_GetTick>
 8004588:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b08      	cmp	r3, #8
 8004596:	d10e      	bne.n	80045b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f831 	bl	800460e <UART_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e027      	b.n	8004606 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d10e      	bne.n	80045e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f81b 	bl	800460e <UART_WaitOnFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e011      	b.n	8004606 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b09c      	sub	sp, #112	; 0x70
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	603b      	str	r3, [r7, #0]
 800461a:	4613      	mov	r3, r2
 800461c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461e:	e0a7      	b.n	8004770 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	f000 80a3 	beq.w	8004770 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462a:	f7fc fe07 	bl	800123c <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004636:	429a      	cmp	r2, r3
 8004638:	d302      	bcc.n	8004640 <UART_WaitOnFlagUntilTimeout+0x32>
 800463a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800463c:	2b00      	cmp	r3, #0
 800463e:	d13f      	bne.n	80046c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800464e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004650:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004654:	667b      	str	r3, [r7, #100]	; 0x64
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800465e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004660:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004664:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800466c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e6      	bne.n	8004640 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3308      	adds	r3, #8
 8004678:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	663b      	str	r3, [r7, #96]	; 0x60
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3308      	adds	r3, #8
 8004690:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004692:	64ba      	str	r2, [r7, #72]	; 0x48
 8004694:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e5      	bne.n	8004672 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e068      	b.n	8004792 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d050      	beq.n	8004770 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046dc:	d148      	bne.n	8004770 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004706:	637b      	str	r3, [r7, #52]	; 0x34
 8004708:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800470c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e6      	bne.n	80046e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3308      	adds	r3, #8
 8004720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	613b      	str	r3, [r7, #16]
   return(result);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	66bb      	str	r3, [r7, #104]	; 0x68
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3308      	adds	r3, #8
 8004738:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800473a:	623a      	str	r2, [r7, #32]
 800473c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	69f9      	ldr	r1, [r7, #28]
 8004740:	6a3a      	ldr	r2, [r7, #32]
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	61bb      	str	r3, [r7, #24]
   return(result);
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e5      	bne.n	800471a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e010      	b.n	8004792 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	69da      	ldr	r2, [r3, #28]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	4013      	ands	r3, r2
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	429a      	cmp	r2, r3
 800477e:	bf0c      	ite	eq
 8004780:	2301      	moveq	r3, #1
 8004782:	2300      	movne	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	461a      	mov	r2, r3
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	429a      	cmp	r2, r3
 800478c:	f43f af48 	beq.w	8004620 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3770      	adds	r7, #112	; 0x70
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800479c:	b084      	sub	sp, #16
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	f107 001c 	add.w	r0, r7, #28
 80047aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d120      	bne.n	80047f6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	4b20      	ldr	r3, [pc, #128]	; (8004848 <USB_CoreInit+0xac>)
 80047c6:	4013      	ands	r3, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d105      	bne.n	80047ea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fa96 	bl	8004d1c <USB_CoreReset>
 80047f0:	4603      	mov	r3, r0
 80047f2:	73fb      	strb	r3, [r7, #15]
 80047f4:	e010      	b.n	8004818 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fa8a 	bl	8004d1c <USB_CoreReset>
 8004808:	4603      	mov	r3, r0
 800480a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	2b01      	cmp	r3, #1
 800481c:	d10b      	bne.n	8004836 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f043 0206 	orr.w	r2, r3, #6
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f043 0220 	orr.w	r2, r3, #32
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004842:	b004      	add	sp, #16
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	ffbdffbf 	.word	0xffbdffbf

0800484c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f023 0201 	bic.w	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	460b      	mov	r3, r1
 8004878:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d115      	bne.n	80048bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800489c:	2001      	movs	r0, #1
 800489e:	f7fc fcd9 	bl	8001254 <HAL_Delay>
      ms++;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3301      	adds	r3, #1
 80048a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fa29 	bl	8004d00 <USB_GetMode>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d01e      	beq.n	80048f2 <USB_SetCurrentMode+0x84>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b31      	cmp	r3, #49	; 0x31
 80048b8:	d9f0      	bls.n	800489c <USB_SetCurrentMode+0x2e>
 80048ba:	e01a      	b.n	80048f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d115      	bne.n	80048ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048ce:	2001      	movs	r0, #1
 80048d0:	f7fc fcc0 	bl	8001254 <HAL_Delay>
      ms++;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3301      	adds	r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa10 	bl	8004d00 <USB_GetMode>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <USB_SetCurrentMode+0x84>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b31      	cmp	r3, #49	; 0x31
 80048ea:	d9f0      	bls.n	80048ce <USB_SetCurrentMode+0x60>
 80048ec:	e001      	b.n	80048f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e005      	b.n	80048fe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b32      	cmp	r3, #50	; 0x32
 80048f6:	d101      	bne.n	80048fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004908:	b084      	sub	sp, #16
 800490a:	b580      	push	{r7, lr}
 800490c:	b086      	sub	sp, #24
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	e009      	b.n	800493c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	3340      	adds	r3, #64	; 0x40
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	2200      	movs	r2, #0
 8004934:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	3301      	adds	r3, #1
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b0e      	cmp	r3, #14
 8004940:	d9f2      	bls.n	8004928 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d11c      	bne.n	8004982 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004956:	f043 0302 	orr.w	r3, r3, #2
 800495a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	e005      	b.n	800498e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004994:	461a      	mov	r2, r3
 8004996:	2300      	movs	r3, #0
 8004998:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a0:	4619      	mov	r1, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a8:	461a      	mov	r2, r3
 80049aa:	680b      	ldr	r3, [r1, #0]
 80049ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d10c      	bne.n	80049ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d104      	bne.n	80049c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049ba:	2100      	movs	r1, #0
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f965 	bl	8004c8c <USB_SetDevSpeed>
 80049c2:	e008      	b.n	80049d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049c4:	2101      	movs	r1, #1
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f960 	bl	8004c8c <USB_SetDevSpeed>
 80049cc:	e003      	b.n	80049d6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049ce:	2103      	movs	r1, #3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f95b 	bl	8004c8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049d6:	2110      	movs	r1, #16
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f8f3 	bl	8004bc4 <USB_FlushTxFifo>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f91f 	bl	8004c2c <USB_FlushRxFifo>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fe:	461a      	mov	r2, r3
 8004a00:	2300      	movs	r3, #0
 8004a02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a16:	461a      	mov	r2, r3
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e043      	b.n	8004aaa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a38:	d118      	bne.n	8004a6c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	e013      	b.n	8004a7e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a62:	461a      	mov	r2, r3
 8004a64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e008      	b.n	8004a7e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	461a      	mov	r2, r3
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004aa2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d3b7      	bcc.n	8004a22 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	e043      	b.n	8004b40 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ace:	d118      	bne.n	8004b02 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10a      	bne.n	8004aec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e013      	b.n	8004b14 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af8:	461a      	mov	r2, r3
 8004afa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	e008      	b.n	8004b14 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	461a      	mov	r2, r3
 8004b10:	2300      	movs	r3, #0
 8004b12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b20:	461a      	mov	r2, r3
 8004b22:	2300      	movs	r3, #0
 8004b24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	461a      	mov	r2, r3
 8004b34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d3b7      	bcc.n	8004ab8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	f043 0210 	orr.w	r2, r3, #16
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699a      	ldr	r2, [r3, #24]
 8004b80:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <USB_DevInit+0x2b4>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f043 0208 	orr.w	r2, r3, #8
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d105      	bne.n	8004bac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <USB_DevInit+0x2b8>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bb8:	b004      	add	sp, #16
 8004bba:	4770      	bx	lr
 8004bbc:	803c3800 	.word	0x803c3800
 8004bc0:	40000004 	.word	0x40000004

08004bc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <USB_FlushTxFifo+0x64>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e01b      	b.n	8004c1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	daf2      	bge.n	8004bd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	019b      	lsls	r3, r3, #6
 8004bf4:	f043 0220 	orr.w	r2, r3, #32
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <USB_FlushTxFifo+0x64>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e006      	b.n	8004c1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d0f0      	beq.n	8004bfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	00030d40 	.word	0x00030d40

08004c2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <USB_FlushRxFifo+0x5c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e018      	b.n	8004c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	daf2      	bge.n	8004c38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2210      	movs	r2, #16
 8004c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a08      	ldr	r2, [pc, #32]	; (8004c88 <USB_FlushRxFifo+0x5c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e006      	b.n	8004c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d0f0      	beq.n	8004c5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	00030d40 	.word	0x00030d40

08004c8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	68f9      	ldr	r1, [r7, #12]
 8004ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b085      	sub	sp, #20
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cd8:	f023 0303 	bic.w	r3, r3, #3
 8004cdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cec:	f043 0302 	orr.w	r3, r3, #2
 8004cf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4a13      	ldr	r2, [pc, #76]	; (8004d80 <USB_CoreReset+0x64>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e01b      	b.n	8004d72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	daf2      	bge.n	8004d28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f043 0201 	orr.w	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3301      	adds	r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <USB_CoreReset+0x64>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e006      	b.n	8004d72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d0f0      	beq.n	8004d52 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	00030d40 	.word	0x00030d40

08004d84 <siprintf>:
 8004d84:	b40e      	push	{r1, r2, r3}
 8004d86:	b500      	push	{lr}
 8004d88:	b09c      	sub	sp, #112	; 0x70
 8004d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d8c:	9002      	str	r0, [sp, #8]
 8004d8e:	9006      	str	r0, [sp, #24]
 8004d90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d94:	4809      	ldr	r0, [pc, #36]	; (8004dbc <siprintf+0x38>)
 8004d96:	9107      	str	r1, [sp, #28]
 8004d98:	9104      	str	r1, [sp, #16]
 8004d9a:	4909      	ldr	r1, [pc, #36]	; (8004dc0 <siprintf+0x3c>)
 8004d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004da0:	9105      	str	r1, [sp, #20]
 8004da2:	6800      	ldr	r0, [r0, #0]
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	a902      	add	r1, sp, #8
 8004da8:	f000 f992 	bl	80050d0 <_svfiprintf_r>
 8004dac:	9b02      	ldr	r3, [sp, #8]
 8004dae:	2200      	movs	r2, #0
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	b01c      	add	sp, #112	; 0x70
 8004db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004db8:	b003      	add	sp, #12
 8004dba:	4770      	bx	lr
 8004dbc:	20000058 	.word	0x20000058
 8004dc0:	ffff0208 	.word	0xffff0208

08004dc4 <memset>:
 8004dc4:	4402      	add	r2, r0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d100      	bne.n	8004dce <memset+0xa>
 8004dcc:	4770      	bx	lr
 8004dce:	f803 1b01 	strb.w	r1, [r3], #1
 8004dd2:	e7f9      	b.n	8004dc8 <memset+0x4>

08004dd4 <__errno>:
 8004dd4:	4b01      	ldr	r3, [pc, #4]	; (8004ddc <__errno+0x8>)
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20000058 	.word	0x20000058

08004de0 <__libc_init_array>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	4d0d      	ldr	r5, [pc, #52]	; (8004e18 <__libc_init_array+0x38>)
 8004de4:	4c0d      	ldr	r4, [pc, #52]	; (8004e1c <__libc_init_array+0x3c>)
 8004de6:	1b64      	subs	r4, r4, r5
 8004de8:	10a4      	asrs	r4, r4, #2
 8004dea:	2600      	movs	r6, #0
 8004dec:	42a6      	cmp	r6, r4
 8004dee:	d109      	bne.n	8004e04 <__libc_init_array+0x24>
 8004df0:	4d0b      	ldr	r5, [pc, #44]	; (8004e20 <__libc_init_array+0x40>)
 8004df2:	4c0c      	ldr	r4, [pc, #48]	; (8004e24 <__libc_init_array+0x44>)
 8004df4:	f000 fc6a 	bl	80056cc <_init>
 8004df8:	1b64      	subs	r4, r4, r5
 8004dfa:	10a4      	asrs	r4, r4, #2
 8004dfc:	2600      	movs	r6, #0
 8004dfe:	42a6      	cmp	r6, r4
 8004e00:	d105      	bne.n	8004e0e <__libc_init_array+0x2e>
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e08:	4798      	blx	r3
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	e7ee      	b.n	8004dec <__libc_init_array+0xc>
 8004e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e12:	4798      	blx	r3
 8004e14:	3601      	adds	r6, #1
 8004e16:	e7f2      	b.n	8004dfe <__libc_init_array+0x1e>
 8004e18:	08005748 	.word	0x08005748
 8004e1c:	08005748 	.word	0x08005748
 8004e20:	08005748 	.word	0x08005748
 8004e24:	0800574c 	.word	0x0800574c

08004e28 <__retarget_lock_acquire_recursive>:
 8004e28:	4770      	bx	lr

08004e2a <__retarget_lock_release_recursive>:
 8004e2a:	4770      	bx	lr

08004e2c <_free_r>:
 8004e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e2e:	2900      	cmp	r1, #0
 8004e30:	d044      	beq.n	8004ebc <_free_r+0x90>
 8004e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e36:	9001      	str	r0, [sp, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8004e3e:	bfb8      	it	lt
 8004e40:	18e4      	addlt	r4, r4, r3
 8004e42:	f000 f8df 	bl	8005004 <__malloc_lock>
 8004e46:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <_free_r+0x94>)
 8004e48:	9801      	ldr	r0, [sp, #4]
 8004e4a:	6813      	ldr	r3, [r2, #0]
 8004e4c:	b933      	cbnz	r3, 8004e5c <_free_r+0x30>
 8004e4e:	6063      	str	r3, [r4, #4]
 8004e50:	6014      	str	r4, [r2, #0]
 8004e52:	b003      	add	sp, #12
 8004e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e58:	f000 b8da 	b.w	8005010 <__malloc_unlock>
 8004e5c:	42a3      	cmp	r3, r4
 8004e5e:	d908      	bls.n	8004e72 <_free_r+0x46>
 8004e60:	6825      	ldr	r5, [r4, #0]
 8004e62:	1961      	adds	r1, r4, r5
 8004e64:	428b      	cmp	r3, r1
 8004e66:	bf01      	itttt	eq
 8004e68:	6819      	ldreq	r1, [r3, #0]
 8004e6a:	685b      	ldreq	r3, [r3, #4]
 8004e6c:	1949      	addeq	r1, r1, r5
 8004e6e:	6021      	streq	r1, [r4, #0]
 8004e70:	e7ed      	b.n	8004e4e <_free_r+0x22>
 8004e72:	461a      	mov	r2, r3
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	b10b      	cbz	r3, 8004e7c <_free_r+0x50>
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	d9fa      	bls.n	8004e72 <_free_r+0x46>
 8004e7c:	6811      	ldr	r1, [r2, #0]
 8004e7e:	1855      	adds	r5, r2, r1
 8004e80:	42a5      	cmp	r5, r4
 8004e82:	d10b      	bne.n	8004e9c <_free_r+0x70>
 8004e84:	6824      	ldr	r4, [r4, #0]
 8004e86:	4421      	add	r1, r4
 8004e88:	1854      	adds	r4, r2, r1
 8004e8a:	42a3      	cmp	r3, r4
 8004e8c:	6011      	str	r1, [r2, #0]
 8004e8e:	d1e0      	bne.n	8004e52 <_free_r+0x26>
 8004e90:	681c      	ldr	r4, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	6053      	str	r3, [r2, #4]
 8004e96:	440c      	add	r4, r1
 8004e98:	6014      	str	r4, [r2, #0]
 8004e9a:	e7da      	b.n	8004e52 <_free_r+0x26>
 8004e9c:	d902      	bls.n	8004ea4 <_free_r+0x78>
 8004e9e:	230c      	movs	r3, #12
 8004ea0:	6003      	str	r3, [r0, #0]
 8004ea2:	e7d6      	b.n	8004e52 <_free_r+0x26>
 8004ea4:	6825      	ldr	r5, [r4, #0]
 8004ea6:	1961      	adds	r1, r4, r5
 8004ea8:	428b      	cmp	r3, r1
 8004eaa:	bf04      	itt	eq
 8004eac:	6819      	ldreq	r1, [r3, #0]
 8004eae:	685b      	ldreq	r3, [r3, #4]
 8004eb0:	6063      	str	r3, [r4, #4]
 8004eb2:	bf04      	itt	eq
 8004eb4:	1949      	addeq	r1, r1, r5
 8004eb6:	6021      	streq	r1, [r4, #0]
 8004eb8:	6054      	str	r4, [r2, #4]
 8004eba:	e7ca      	b.n	8004e52 <_free_r+0x26>
 8004ebc:	b003      	add	sp, #12
 8004ebe:	bd30      	pop	{r4, r5, pc}
 8004ec0:	20000a6c 	.word	0x20000a6c

08004ec4 <sbrk_aligned>:
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	4e0e      	ldr	r6, [pc, #56]	; (8004f00 <sbrk_aligned+0x3c>)
 8004ec8:	460c      	mov	r4, r1
 8004eca:	6831      	ldr	r1, [r6, #0]
 8004ecc:	4605      	mov	r5, r0
 8004ece:	b911      	cbnz	r1, 8004ed6 <sbrk_aligned+0x12>
 8004ed0:	f000 fba6 	bl	8005620 <_sbrk_r>
 8004ed4:	6030      	str	r0, [r6, #0]
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f000 fba1 	bl	8005620 <_sbrk_r>
 8004ede:	1c43      	adds	r3, r0, #1
 8004ee0:	d00a      	beq.n	8004ef8 <sbrk_aligned+0x34>
 8004ee2:	1cc4      	adds	r4, r0, #3
 8004ee4:	f024 0403 	bic.w	r4, r4, #3
 8004ee8:	42a0      	cmp	r0, r4
 8004eea:	d007      	beq.n	8004efc <sbrk_aligned+0x38>
 8004eec:	1a21      	subs	r1, r4, r0
 8004eee:	4628      	mov	r0, r5
 8004ef0:	f000 fb96 	bl	8005620 <_sbrk_r>
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d101      	bne.n	8004efc <sbrk_aligned+0x38>
 8004ef8:	f04f 34ff 	mov.w	r4, #4294967295
 8004efc:	4620      	mov	r0, r4
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	20000a70 	.word	0x20000a70

08004f04 <_malloc_r>:
 8004f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f08:	1ccd      	adds	r5, r1, #3
 8004f0a:	f025 0503 	bic.w	r5, r5, #3
 8004f0e:	3508      	adds	r5, #8
 8004f10:	2d0c      	cmp	r5, #12
 8004f12:	bf38      	it	cc
 8004f14:	250c      	movcc	r5, #12
 8004f16:	2d00      	cmp	r5, #0
 8004f18:	4607      	mov	r7, r0
 8004f1a:	db01      	blt.n	8004f20 <_malloc_r+0x1c>
 8004f1c:	42a9      	cmp	r1, r5
 8004f1e:	d905      	bls.n	8004f2c <_malloc_r+0x28>
 8004f20:	230c      	movs	r3, #12
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	2600      	movs	r6, #0
 8004f26:	4630      	mov	r0, r6
 8004f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005000 <_malloc_r+0xfc>
 8004f30:	f000 f868 	bl	8005004 <__malloc_lock>
 8004f34:	f8d8 3000 	ldr.w	r3, [r8]
 8004f38:	461c      	mov	r4, r3
 8004f3a:	bb5c      	cbnz	r4, 8004f94 <_malloc_r+0x90>
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	4638      	mov	r0, r7
 8004f40:	f7ff ffc0 	bl	8004ec4 <sbrk_aligned>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	4604      	mov	r4, r0
 8004f48:	d155      	bne.n	8004ff6 <_malloc_r+0xf2>
 8004f4a:	f8d8 4000 	ldr.w	r4, [r8]
 8004f4e:	4626      	mov	r6, r4
 8004f50:	2e00      	cmp	r6, #0
 8004f52:	d145      	bne.n	8004fe0 <_malloc_r+0xdc>
 8004f54:	2c00      	cmp	r4, #0
 8004f56:	d048      	beq.n	8004fea <_malloc_r+0xe6>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	eb04 0903 	add.w	r9, r4, r3
 8004f62:	f000 fb5d 	bl	8005620 <_sbrk_r>
 8004f66:	4581      	cmp	r9, r0
 8004f68:	d13f      	bne.n	8004fea <_malloc_r+0xe6>
 8004f6a:	6821      	ldr	r1, [r4, #0]
 8004f6c:	1a6d      	subs	r5, r5, r1
 8004f6e:	4629      	mov	r1, r5
 8004f70:	4638      	mov	r0, r7
 8004f72:	f7ff ffa7 	bl	8004ec4 <sbrk_aligned>
 8004f76:	3001      	adds	r0, #1
 8004f78:	d037      	beq.n	8004fea <_malloc_r+0xe6>
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	442b      	add	r3, r5
 8004f7e:	6023      	str	r3, [r4, #0]
 8004f80:	f8d8 3000 	ldr.w	r3, [r8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d038      	beq.n	8004ffa <_malloc_r+0xf6>
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	42a2      	cmp	r2, r4
 8004f8c:	d12b      	bne.n	8004fe6 <_malloc_r+0xe2>
 8004f8e:	2200      	movs	r2, #0
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	e00f      	b.n	8004fb4 <_malloc_r+0xb0>
 8004f94:	6822      	ldr	r2, [r4, #0]
 8004f96:	1b52      	subs	r2, r2, r5
 8004f98:	d41f      	bmi.n	8004fda <_malloc_r+0xd6>
 8004f9a:	2a0b      	cmp	r2, #11
 8004f9c:	d917      	bls.n	8004fce <_malloc_r+0xca>
 8004f9e:	1961      	adds	r1, r4, r5
 8004fa0:	42a3      	cmp	r3, r4
 8004fa2:	6025      	str	r5, [r4, #0]
 8004fa4:	bf18      	it	ne
 8004fa6:	6059      	strne	r1, [r3, #4]
 8004fa8:	6863      	ldr	r3, [r4, #4]
 8004faa:	bf08      	it	eq
 8004fac:	f8c8 1000 	streq.w	r1, [r8]
 8004fb0:	5162      	str	r2, [r4, r5]
 8004fb2:	604b      	str	r3, [r1, #4]
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	f104 060b 	add.w	r6, r4, #11
 8004fba:	f000 f829 	bl	8005010 <__malloc_unlock>
 8004fbe:	f026 0607 	bic.w	r6, r6, #7
 8004fc2:	1d23      	adds	r3, r4, #4
 8004fc4:	1af2      	subs	r2, r6, r3
 8004fc6:	d0ae      	beq.n	8004f26 <_malloc_r+0x22>
 8004fc8:	1b9b      	subs	r3, r3, r6
 8004fca:	50a3      	str	r3, [r4, r2]
 8004fcc:	e7ab      	b.n	8004f26 <_malloc_r+0x22>
 8004fce:	42a3      	cmp	r3, r4
 8004fd0:	6862      	ldr	r2, [r4, #4]
 8004fd2:	d1dd      	bne.n	8004f90 <_malloc_r+0x8c>
 8004fd4:	f8c8 2000 	str.w	r2, [r8]
 8004fd8:	e7ec      	b.n	8004fb4 <_malloc_r+0xb0>
 8004fda:	4623      	mov	r3, r4
 8004fdc:	6864      	ldr	r4, [r4, #4]
 8004fde:	e7ac      	b.n	8004f3a <_malloc_r+0x36>
 8004fe0:	4634      	mov	r4, r6
 8004fe2:	6876      	ldr	r6, [r6, #4]
 8004fe4:	e7b4      	b.n	8004f50 <_malloc_r+0x4c>
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	e7cc      	b.n	8004f84 <_malloc_r+0x80>
 8004fea:	230c      	movs	r3, #12
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	4638      	mov	r0, r7
 8004ff0:	f000 f80e 	bl	8005010 <__malloc_unlock>
 8004ff4:	e797      	b.n	8004f26 <_malloc_r+0x22>
 8004ff6:	6025      	str	r5, [r4, #0]
 8004ff8:	e7dc      	b.n	8004fb4 <_malloc_r+0xb0>
 8004ffa:	605b      	str	r3, [r3, #4]
 8004ffc:	deff      	udf	#255	; 0xff
 8004ffe:	bf00      	nop
 8005000:	20000a6c 	.word	0x20000a6c

08005004 <__malloc_lock>:
 8005004:	4801      	ldr	r0, [pc, #4]	; (800500c <__malloc_lock+0x8>)
 8005006:	f7ff bf0f 	b.w	8004e28 <__retarget_lock_acquire_recursive>
 800500a:	bf00      	nop
 800500c:	20000a68 	.word	0x20000a68

08005010 <__malloc_unlock>:
 8005010:	4801      	ldr	r0, [pc, #4]	; (8005018 <__malloc_unlock+0x8>)
 8005012:	f7ff bf0a 	b.w	8004e2a <__retarget_lock_release_recursive>
 8005016:	bf00      	nop
 8005018:	20000a68 	.word	0x20000a68

0800501c <__ssputs_r>:
 800501c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005020:	688e      	ldr	r6, [r1, #8]
 8005022:	461f      	mov	r7, r3
 8005024:	42be      	cmp	r6, r7
 8005026:	680b      	ldr	r3, [r1, #0]
 8005028:	4682      	mov	sl, r0
 800502a:	460c      	mov	r4, r1
 800502c:	4690      	mov	r8, r2
 800502e:	d82c      	bhi.n	800508a <__ssputs_r+0x6e>
 8005030:	898a      	ldrh	r2, [r1, #12]
 8005032:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005036:	d026      	beq.n	8005086 <__ssputs_r+0x6a>
 8005038:	6965      	ldr	r5, [r4, #20]
 800503a:	6909      	ldr	r1, [r1, #16]
 800503c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005040:	eba3 0901 	sub.w	r9, r3, r1
 8005044:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005048:	1c7b      	adds	r3, r7, #1
 800504a:	444b      	add	r3, r9
 800504c:	106d      	asrs	r5, r5, #1
 800504e:	429d      	cmp	r5, r3
 8005050:	bf38      	it	cc
 8005052:	461d      	movcc	r5, r3
 8005054:	0553      	lsls	r3, r2, #21
 8005056:	d527      	bpl.n	80050a8 <__ssputs_r+0x8c>
 8005058:	4629      	mov	r1, r5
 800505a:	f7ff ff53 	bl	8004f04 <_malloc_r>
 800505e:	4606      	mov	r6, r0
 8005060:	b360      	cbz	r0, 80050bc <__ssputs_r+0xa0>
 8005062:	6921      	ldr	r1, [r4, #16]
 8005064:	464a      	mov	r2, r9
 8005066:	f000 faeb 	bl	8005640 <memcpy>
 800506a:	89a3      	ldrh	r3, [r4, #12]
 800506c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005074:	81a3      	strh	r3, [r4, #12]
 8005076:	6126      	str	r6, [r4, #16]
 8005078:	6165      	str	r5, [r4, #20]
 800507a:	444e      	add	r6, r9
 800507c:	eba5 0509 	sub.w	r5, r5, r9
 8005080:	6026      	str	r6, [r4, #0]
 8005082:	60a5      	str	r5, [r4, #8]
 8005084:	463e      	mov	r6, r7
 8005086:	42be      	cmp	r6, r7
 8005088:	d900      	bls.n	800508c <__ssputs_r+0x70>
 800508a:	463e      	mov	r6, r7
 800508c:	6820      	ldr	r0, [r4, #0]
 800508e:	4632      	mov	r2, r6
 8005090:	4641      	mov	r1, r8
 8005092:	f000 faab 	bl	80055ec <memmove>
 8005096:	68a3      	ldr	r3, [r4, #8]
 8005098:	1b9b      	subs	r3, r3, r6
 800509a:	60a3      	str	r3, [r4, #8]
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	4433      	add	r3, r6
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	2000      	movs	r0, #0
 80050a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a8:	462a      	mov	r2, r5
 80050aa:	f000 fad7 	bl	800565c <_realloc_r>
 80050ae:	4606      	mov	r6, r0
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d1e0      	bne.n	8005076 <__ssputs_r+0x5a>
 80050b4:	6921      	ldr	r1, [r4, #16]
 80050b6:	4650      	mov	r0, sl
 80050b8:	f7ff feb8 	bl	8004e2c <_free_r>
 80050bc:	230c      	movs	r3, #12
 80050be:	f8ca 3000 	str.w	r3, [sl]
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050c8:	81a3      	strh	r3, [r4, #12]
 80050ca:	f04f 30ff 	mov.w	r0, #4294967295
 80050ce:	e7e9      	b.n	80050a4 <__ssputs_r+0x88>

080050d0 <_svfiprintf_r>:
 80050d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d4:	4698      	mov	r8, r3
 80050d6:	898b      	ldrh	r3, [r1, #12]
 80050d8:	061b      	lsls	r3, r3, #24
 80050da:	b09d      	sub	sp, #116	; 0x74
 80050dc:	4607      	mov	r7, r0
 80050de:	460d      	mov	r5, r1
 80050e0:	4614      	mov	r4, r2
 80050e2:	d50e      	bpl.n	8005102 <_svfiprintf_r+0x32>
 80050e4:	690b      	ldr	r3, [r1, #16]
 80050e6:	b963      	cbnz	r3, 8005102 <_svfiprintf_r+0x32>
 80050e8:	2140      	movs	r1, #64	; 0x40
 80050ea:	f7ff ff0b 	bl	8004f04 <_malloc_r>
 80050ee:	6028      	str	r0, [r5, #0]
 80050f0:	6128      	str	r0, [r5, #16]
 80050f2:	b920      	cbnz	r0, 80050fe <_svfiprintf_r+0x2e>
 80050f4:	230c      	movs	r3, #12
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	e0d0      	b.n	80052a0 <_svfiprintf_r+0x1d0>
 80050fe:	2340      	movs	r3, #64	; 0x40
 8005100:	616b      	str	r3, [r5, #20]
 8005102:	2300      	movs	r3, #0
 8005104:	9309      	str	r3, [sp, #36]	; 0x24
 8005106:	2320      	movs	r3, #32
 8005108:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800510c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005110:	2330      	movs	r3, #48	; 0x30
 8005112:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80052b8 <_svfiprintf_r+0x1e8>
 8005116:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800511a:	f04f 0901 	mov.w	r9, #1
 800511e:	4623      	mov	r3, r4
 8005120:	469a      	mov	sl, r3
 8005122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005126:	b10a      	cbz	r2, 800512c <_svfiprintf_r+0x5c>
 8005128:	2a25      	cmp	r2, #37	; 0x25
 800512a:	d1f9      	bne.n	8005120 <_svfiprintf_r+0x50>
 800512c:	ebba 0b04 	subs.w	fp, sl, r4
 8005130:	d00b      	beq.n	800514a <_svfiprintf_r+0x7a>
 8005132:	465b      	mov	r3, fp
 8005134:	4622      	mov	r2, r4
 8005136:	4629      	mov	r1, r5
 8005138:	4638      	mov	r0, r7
 800513a:	f7ff ff6f 	bl	800501c <__ssputs_r>
 800513e:	3001      	adds	r0, #1
 8005140:	f000 80a9 	beq.w	8005296 <_svfiprintf_r+0x1c6>
 8005144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005146:	445a      	add	r2, fp
 8005148:	9209      	str	r2, [sp, #36]	; 0x24
 800514a:	f89a 3000 	ldrb.w	r3, [sl]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 80a1 	beq.w	8005296 <_svfiprintf_r+0x1c6>
 8005154:	2300      	movs	r3, #0
 8005156:	f04f 32ff 	mov.w	r2, #4294967295
 800515a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800515e:	f10a 0a01 	add.w	sl, sl, #1
 8005162:	9304      	str	r3, [sp, #16]
 8005164:	9307      	str	r3, [sp, #28]
 8005166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800516a:	931a      	str	r3, [sp, #104]	; 0x68
 800516c:	4654      	mov	r4, sl
 800516e:	2205      	movs	r2, #5
 8005170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005174:	4850      	ldr	r0, [pc, #320]	; (80052b8 <_svfiprintf_r+0x1e8>)
 8005176:	f7fb f863 	bl	8000240 <memchr>
 800517a:	9a04      	ldr	r2, [sp, #16]
 800517c:	b9d8      	cbnz	r0, 80051b6 <_svfiprintf_r+0xe6>
 800517e:	06d0      	lsls	r0, r2, #27
 8005180:	bf44      	itt	mi
 8005182:	2320      	movmi	r3, #32
 8005184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005188:	0711      	lsls	r1, r2, #28
 800518a:	bf44      	itt	mi
 800518c:	232b      	movmi	r3, #43	; 0x2b
 800518e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005192:	f89a 3000 	ldrb.w	r3, [sl]
 8005196:	2b2a      	cmp	r3, #42	; 0x2a
 8005198:	d015      	beq.n	80051c6 <_svfiprintf_r+0xf6>
 800519a:	9a07      	ldr	r2, [sp, #28]
 800519c:	4654      	mov	r4, sl
 800519e:	2000      	movs	r0, #0
 80051a0:	f04f 0c0a 	mov.w	ip, #10
 80051a4:	4621      	mov	r1, r4
 80051a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051aa:	3b30      	subs	r3, #48	; 0x30
 80051ac:	2b09      	cmp	r3, #9
 80051ae:	d94d      	bls.n	800524c <_svfiprintf_r+0x17c>
 80051b0:	b1b0      	cbz	r0, 80051e0 <_svfiprintf_r+0x110>
 80051b2:	9207      	str	r2, [sp, #28]
 80051b4:	e014      	b.n	80051e0 <_svfiprintf_r+0x110>
 80051b6:	eba0 0308 	sub.w	r3, r0, r8
 80051ba:	fa09 f303 	lsl.w	r3, r9, r3
 80051be:	4313      	orrs	r3, r2
 80051c0:	9304      	str	r3, [sp, #16]
 80051c2:	46a2      	mov	sl, r4
 80051c4:	e7d2      	b.n	800516c <_svfiprintf_r+0x9c>
 80051c6:	9b03      	ldr	r3, [sp, #12]
 80051c8:	1d19      	adds	r1, r3, #4
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	9103      	str	r1, [sp, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	bfbb      	ittet	lt
 80051d2:	425b      	neglt	r3, r3
 80051d4:	f042 0202 	orrlt.w	r2, r2, #2
 80051d8:	9307      	strge	r3, [sp, #28]
 80051da:	9307      	strlt	r3, [sp, #28]
 80051dc:	bfb8      	it	lt
 80051de:	9204      	strlt	r2, [sp, #16]
 80051e0:	7823      	ldrb	r3, [r4, #0]
 80051e2:	2b2e      	cmp	r3, #46	; 0x2e
 80051e4:	d10c      	bne.n	8005200 <_svfiprintf_r+0x130>
 80051e6:	7863      	ldrb	r3, [r4, #1]
 80051e8:	2b2a      	cmp	r3, #42	; 0x2a
 80051ea:	d134      	bne.n	8005256 <_svfiprintf_r+0x186>
 80051ec:	9b03      	ldr	r3, [sp, #12]
 80051ee:	1d1a      	adds	r2, r3, #4
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	9203      	str	r2, [sp, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bfb8      	it	lt
 80051f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80051fc:	3402      	adds	r4, #2
 80051fe:	9305      	str	r3, [sp, #20]
 8005200:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80052c8 <_svfiprintf_r+0x1f8>
 8005204:	7821      	ldrb	r1, [r4, #0]
 8005206:	2203      	movs	r2, #3
 8005208:	4650      	mov	r0, sl
 800520a:	f7fb f819 	bl	8000240 <memchr>
 800520e:	b138      	cbz	r0, 8005220 <_svfiprintf_r+0x150>
 8005210:	9b04      	ldr	r3, [sp, #16]
 8005212:	eba0 000a 	sub.w	r0, r0, sl
 8005216:	2240      	movs	r2, #64	; 0x40
 8005218:	4082      	lsls	r2, r0
 800521a:	4313      	orrs	r3, r2
 800521c:	3401      	adds	r4, #1
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005224:	4825      	ldr	r0, [pc, #148]	; (80052bc <_svfiprintf_r+0x1ec>)
 8005226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800522a:	2206      	movs	r2, #6
 800522c:	f7fb f808 	bl	8000240 <memchr>
 8005230:	2800      	cmp	r0, #0
 8005232:	d038      	beq.n	80052a6 <_svfiprintf_r+0x1d6>
 8005234:	4b22      	ldr	r3, [pc, #136]	; (80052c0 <_svfiprintf_r+0x1f0>)
 8005236:	bb1b      	cbnz	r3, 8005280 <_svfiprintf_r+0x1b0>
 8005238:	9b03      	ldr	r3, [sp, #12]
 800523a:	3307      	adds	r3, #7
 800523c:	f023 0307 	bic.w	r3, r3, #7
 8005240:	3308      	adds	r3, #8
 8005242:	9303      	str	r3, [sp, #12]
 8005244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005246:	4433      	add	r3, r6
 8005248:	9309      	str	r3, [sp, #36]	; 0x24
 800524a:	e768      	b.n	800511e <_svfiprintf_r+0x4e>
 800524c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005250:	460c      	mov	r4, r1
 8005252:	2001      	movs	r0, #1
 8005254:	e7a6      	b.n	80051a4 <_svfiprintf_r+0xd4>
 8005256:	2300      	movs	r3, #0
 8005258:	3401      	adds	r4, #1
 800525a:	9305      	str	r3, [sp, #20]
 800525c:	4619      	mov	r1, r3
 800525e:	f04f 0c0a 	mov.w	ip, #10
 8005262:	4620      	mov	r0, r4
 8005264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005268:	3a30      	subs	r2, #48	; 0x30
 800526a:	2a09      	cmp	r2, #9
 800526c:	d903      	bls.n	8005276 <_svfiprintf_r+0x1a6>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0c6      	beq.n	8005200 <_svfiprintf_r+0x130>
 8005272:	9105      	str	r1, [sp, #20]
 8005274:	e7c4      	b.n	8005200 <_svfiprintf_r+0x130>
 8005276:	fb0c 2101 	mla	r1, ip, r1, r2
 800527a:	4604      	mov	r4, r0
 800527c:	2301      	movs	r3, #1
 800527e:	e7f0      	b.n	8005262 <_svfiprintf_r+0x192>
 8005280:	ab03      	add	r3, sp, #12
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	462a      	mov	r2, r5
 8005286:	4b0f      	ldr	r3, [pc, #60]	; (80052c4 <_svfiprintf_r+0x1f4>)
 8005288:	a904      	add	r1, sp, #16
 800528a:	4638      	mov	r0, r7
 800528c:	f3af 8000 	nop.w
 8005290:	1c42      	adds	r2, r0, #1
 8005292:	4606      	mov	r6, r0
 8005294:	d1d6      	bne.n	8005244 <_svfiprintf_r+0x174>
 8005296:	89ab      	ldrh	r3, [r5, #12]
 8005298:	065b      	lsls	r3, r3, #25
 800529a:	f53f af2d 	bmi.w	80050f8 <_svfiprintf_r+0x28>
 800529e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052a0:	b01d      	add	sp, #116	; 0x74
 80052a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a6:	ab03      	add	r3, sp, #12
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	462a      	mov	r2, r5
 80052ac:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <_svfiprintf_r+0x1f4>)
 80052ae:	a904      	add	r1, sp, #16
 80052b0:	4638      	mov	r0, r7
 80052b2:	f000 f879 	bl	80053a8 <_printf_i>
 80052b6:	e7eb      	b.n	8005290 <_svfiprintf_r+0x1c0>
 80052b8:	0800570c 	.word	0x0800570c
 80052bc:	08005716 	.word	0x08005716
 80052c0:	00000000 	.word	0x00000000
 80052c4:	0800501d 	.word	0x0800501d
 80052c8:	08005712 	.word	0x08005712

080052cc <_printf_common>:
 80052cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d0:	4616      	mov	r6, r2
 80052d2:	4699      	mov	r9, r3
 80052d4:	688a      	ldr	r2, [r1, #8]
 80052d6:	690b      	ldr	r3, [r1, #16]
 80052d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052dc:	4293      	cmp	r3, r2
 80052de:	bfb8      	it	lt
 80052e0:	4613      	movlt	r3, r2
 80052e2:	6033      	str	r3, [r6, #0]
 80052e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052e8:	4607      	mov	r7, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	b10a      	cbz	r2, 80052f2 <_printf_common+0x26>
 80052ee:	3301      	adds	r3, #1
 80052f0:	6033      	str	r3, [r6, #0]
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	0699      	lsls	r1, r3, #26
 80052f6:	bf42      	ittt	mi
 80052f8:	6833      	ldrmi	r3, [r6, #0]
 80052fa:	3302      	addmi	r3, #2
 80052fc:	6033      	strmi	r3, [r6, #0]
 80052fe:	6825      	ldr	r5, [r4, #0]
 8005300:	f015 0506 	ands.w	r5, r5, #6
 8005304:	d106      	bne.n	8005314 <_printf_common+0x48>
 8005306:	f104 0a19 	add.w	sl, r4, #25
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	6832      	ldr	r2, [r6, #0]
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	42ab      	cmp	r3, r5
 8005312:	dc26      	bgt.n	8005362 <_printf_common+0x96>
 8005314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005318:	1e13      	subs	r3, r2, #0
 800531a:	6822      	ldr	r2, [r4, #0]
 800531c:	bf18      	it	ne
 800531e:	2301      	movne	r3, #1
 8005320:	0692      	lsls	r2, r2, #26
 8005322:	d42b      	bmi.n	800537c <_printf_common+0xb0>
 8005324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005328:	4649      	mov	r1, r9
 800532a:	4638      	mov	r0, r7
 800532c:	47c0      	blx	r8
 800532e:	3001      	adds	r0, #1
 8005330:	d01e      	beq.n	8005370 <_printf_common+0xa4>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	6922      	ldr	r2, [r4, #16]
 8005336:	f003 0306 	and.w	r3, r3, #6
 800533a:	2b04      	cmp	r3, #4
 800533c:	bf02      	ittt	eq
 800533e:	68e5      	ldreq	r5, [r4, #12]
 8005340:	6833      	ldreq	r3, [r6, #0]
 8005342:	1aed      	subeq	r5, r5, r3
 8005344:	68a3      	ldr	r3, [r4, #8]
 8005346:	bf0c      	ite	eq
 8005348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800534c:	2500      	movne	r5, #0
 800534e:	4293      	cmp	r3, r2
 8005350:	bfc4      	itt	gt
 8005352:	1a9b      	subgt	r3, r3, r2
 8005354:	18ed      	addgt	r5, r5, r3
 8005356:	2600      	movs	r6, #0
 8005358:	341a      	adds	r4, #26
 800535a:	42b5      	cmp	r5, r6
 800535c:	d11a      	bne.n	8005394 <_printf_common+0xc8>
 800535e:	2000      	movs	r0, #0
 8005360:	e008      	b.n	8005374 <_printf_common+0xa8>
 8005362:	2301      	movs	r3, #1
 8005364:	4652      	mov	r2, sl
 8005366:	4649      	mov	r1, r9
 8005368:	4638      	mov	r0, r7
 800536a:	47c0      	blx	r8
 800536c:	3001      	adds	r0, #1
 800536e:	d103      	bne.n	8005378 <_printf_common+0xac>
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
 8005374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005378:	3501      	adds	r5, #1
 800537a:	e7c6      	b.n	800530a <_printf_common+0x3e>
 800537c:	18e1      	adds	r1, r4, r3
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	2030      	movs	r0, #48	; 0x30
 8005382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005386:	4422      	add	r2, r4
 8005388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800538c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005390:	3302      	adds	r3, #2
 8005392:	e7c7      	b.n	8005324 <_printf_common+0x58>
 8005394:	2301      	movs	r3, #1
 8005396:	4622      	mov	r2, r4
 8005398:	4649      	mov	r1, r9
 800539a:	4638      	mov	r0, r7
 800539c:	47c0      	blx	r8
 800539e:	3001      	adds	r0, #1
 80053a0:	d0e6      	beq.n	8005370 <_printf_common+0xa4>
 80053a2:	3601      	adds	r6, #1
 80053a4:	e7d9      	b.n	800535a <_printf_common+0x8e>
	...

080053a8 <_printf_i>:
 80053a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ac:	7e0f      	ldrb	r7, [r1, #24]
 80053ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053b0:	2f78      	cmp	r7, #120	; 0x78
 80053b2:	4691      	mov	r9, r2
 80053b4:	4680      	mov	r8, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	469a      	mov	sl, r3
 80053ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053be:	d807      	bhi.n	80053d0 <_printf_i+0x28>
 80053c0:	2f62      	cmp	r7, #98	; 0x62
 80053c2:	d80a      	bhi.n	80053da <_printf_i+0x32>
 80053c4:	2f00      	cmp	r7, #0
 80053c6:	f000 80d4 	beq.w	8005572 <_printf_i+0x1ca>
 80053ca:	2f58      	cmp	r7, #88	; 0x58
 80053cc:	f000 80c0 	beq.w	8005550 <_printf_i+0x1a8>
 80053d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053d8:	e03a      	b.n	8005450 <_printf_i+0xa8>
 80053da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053de:	2b15      	cmp	r3, #21
 80053e0:	d8f6      	bhi.n	80053d0 <_printf_i+0x28>
 80053e2:	a101      	add	r1, pc, #4	; (adr r1, 80053e8 <_printf_i+0x40>)
 80053e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053e8:	08005441 	.word	0x08005441
 80053ec:	08005455 	.word	0x08005455
 80053f0:	080053d1 	.word	0x080053d1
 80053f4:	080053d1 	.word	0x080053d1
 80053f8:	080053d1 	.word	0x080053d1
 80053fc:	080053d1 	.word	0x080053d1
 8005400:	08005455 	.word	0x08005455
 8005404:	080053d1 	.word	0x080053d1
 8005408:	080053d1 	.word	0x080053d1
 800540c:	080053d1 	.word	0x080053d1
 8005410:	080053d1 	.word	0x080053d1
 8005414:	08005559 	.word	0x08005559
 8005418:	08005481 	.word	0x08005481
 800541c:	08005513 	.word	0x08005513
 8005420:	080053d1 	.word	0x080053d1
 8005424:	080053d1 	.word	0x080053d1
 8005428:	0800557b 	.word	0x0800557b
 800542c:	080053d1 	.word	0x080053d1
 8005430:	08005481 	.word	0x08005481
 8005434:	080053d1 	.word	0x080053d1
 8005438:	080053d1 	.word	0x080053d1
 800543c:	0800551b 	.word	0x0800551b
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	1d1a      	adds	r2, r3, #4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	602a      	str	r2, [r5, #0]
 8005448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800544c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005450:	2301      	movs	r3, #1
 8005452:	e09f      	b.n	8005594 <_printf_i+0x1ec>
 8005454:	6820      	ldr	r0, [r4, #0]
 8005456:	682b      	ldr	r3, [r5, #0]
 8005458:	0607      	lsls	r7, r0, #24
 800545a:	f103 0104 	add.w	r1, r3, #4
 800545e:	6029      	str	r1, [r5, #0]
 8005460:	d501      	bpl.n	8005466 <_printf_i+0xbe>
 8005462:	681e      	ldr	r6, [r3, #0]
 8005464:	e003      	b.n	800546e <_printf_i+0xc6>
 8005466:	0646      	lsls	r6, r0, #25
 8005468:	d5fb      	bpl.n	8005462 <_printf_i+0xba>
 800546a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800546e:	2e00      	cmp	r6, #0
 8005470:	da03      	bge.n	800547a <_printf_i+0xd2>
 8005472:	232d      	movs	r3, #45	; 0x2d
 8005474:	4276      	negs	r6, r6
 8005476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800547a:	485a      	ldr	r0, [pc, #360]	; (80055e4 <_printf_i+0x23c>)
 800547c:	230a      	movs	r3, #10
 800547e:	e012      	b.n	80054a6 <_printf_i+0xfe>
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	6820      	ldr	r0, [r4, #0]
 8005484:	1d19      	adds	r1, r3, #4
 8005486:	6029      	str	r1, [r5, #0]
 8005488:	0605      	lsls	r5, r0, #24
 800548a:	d501      	bpl.n	8005490 <_printf_i+0xe8>
 800548c:	681e      	ldr	r6, [r3, #0]
 800548e:	e002      	b.n	8005496 <_printf_i+0xee>
 8005490:	0641      	lsls	r1, r0, #25
 8005492:	d5fb      	bpl.n	800548c <_printf_i+0xe4>
 8005494:	881e      	ldrh	r6, [r3, #0]
 8005496:	4853      	ldr	r0, [pc, #332]	; (80055e4 <_printf_i+0x23c>)
 8005498:	2f6f      	cmp	r7, #111	; 0x6f
 800549a:	bf0c      	ite	eq
 800549c:	2308      	moveq	r3, #8
 800549e:	230a      	movne	r3, #10
 80054a0:	2100      	movs	r1, #0
 80054a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054a6:	6865      	ldr	r5, [r4, #4]
 80054a8:	60a5      	str	r5, [r4, #8]
 80054aa:	2d00      	cmp	r5, #0
 80054ac:	bfa2      	ittt	ge
 80054ae:	6821      	ldrge	r1, [r4, #0]
 80054b0:	f021 0104 	bicge.w	r1, r1, #4
 80054b4:	6021      	strge	r1, [r4, #0]
 80054b6:	b90e      	cbnz	r6, 80054bc <_printf_i+0x114>
 80054b8:	2d00      	cmp	r5, #0
 80054ba:	d04b      	beq.n	8005554 <_printf_i+0x1ac>
 80054bc:	4615      	mov	r5, r2
 80054be:	fbb6 f1f3 	udiv	r1, r6, r3
 80054c2:	fb03 6711 	mls	r7, r3, r1, r6
 80054c6:	5dc7      	ldrb	r7, [r0, r7]
 80054c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054cc:	4637      	mov	r7, r6
 80054ce:	42bb      	cmp	r3, r7
 80054d0:	460e      	mov	r6, r1
 80054d2:	d9f4      	bls.n	80054be <_printf_i+0x116>
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d10b      	bne.n	80054f0 <_printf_i+0x148>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	07de      	lsls	r6, r3, #31
 80054dc:	d508      	bpl.n	80054f0 <_printf_i+0x148>
 80054de:	6923      	ldr	r3, [r4, #16]
 80054e0:	6861      	ldr	r1, [r4, #4]
 80054e2:	4299      	cmp	r1, r3
 80054e4:	bfde      	ittt	le
 80054e6:	2330      	movle	r3, #48	; 0x30
 80054e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054f0:	1b52      	subs	r2, r2, r5
 80054f2:	6122      	str	r2, [r4, #16]
 80054f4:	f8cd a000 	str.w	sl, [sp]
 80054f8:	464b      	mov	r3, r9
 80054fa:	aa03      	add	r2, sp, #12
 80054fc:	4621      	mov	r1, r4
 80054fe:	4640      	mov	r0, r8
 8005500:	f7ff fee4 	bl	80052cc <_printf_common>
 8005504:	3001      	adds	r0, #1
 8005506:	d14a      	bne.n	800559e <_printf_i+0x1f6>
 8005508:	f04f 30ff 	mov.w	r0, #4294967295
 800550c:	b004      	add	sp, #16
 800550e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	f043 0320 	orr.w	r3, r3, #32
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	4833      	ldr	r0, [pc, #204]	; (80055e8 <_printf_i+0x240>)
 800551c:	2778      	movs	r7, #120	; 0x78
 800551e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	6829      	ldr	r1, [r5, #0]
 8005526:	061f      	lsls	r7, r3, #24
 8005528:	f851 6b04 	ldr.w	r6, [r1], #4
 800552c:	d402      	bmi.n	8005534 <_printf_i+0x18c>
 800552e:	065f      	lsls	r7, r3, #25
 8005530:	bf48      	it	mi
 8005532:	b2b6      	uxthmi	r6, r6
 8005534:	07df      	lsls	r7, r3, #31
 8005536:	bf48      	it	mi
 8005538:	f043 0320 	orrmi.w	r3, r3, #32
 800553c:	6029      	str	r1, [r5, #0]
 800553e:	bf48      	it	mi
 8005540:	6023      	strmi	r3, [r4, #0]
 8005542:	b91e      	cbnz	r6, 800554c <_printf_i+0x1a4>
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	f023 0320 	bic.w	r3, r3, #32
 800554a:	6023      	str	r3, [r4, #0]
 800554c:	2310      	movs	r3, #16
 800554e:	e7a7      	b.n	80054a0 <_printf_i+0xf8>
 8005550:	4824      	ldr	r0, [pc, #144]	; (80055e4 <_printf_i+0x23c>)
 8005552:	e7e4      	b.n	800551e <_printf_i+0x176>
 8005554:	4615      	mov	r5, r2
 8005556:	e7bd      	b.n	80054d4 <_printf_i+0x12c>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	6826      	ldr	r6, [r4, #0]
 800555c:	6961      	ldr	r1, [r4, #20]
 800555e:	1d18      	adds	r0, r3, #4
 8005560:	6028      	str	r0, [r5, #0]
 8005562:	0635      	lsls	r5, r6, #24
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	d501      	bpl.n	800556c <_printf_i+0x1c4>
 8005568:	6019      	str	r1, [r3, #0]
 800556a:	e002      	b.n	8005572 <_printf_i+0x1ca>
 800556c:	0670      	lsls	r0, r6, #25
 800556e:	d5fb      	bpl.n	8005568 <_printf_i+0x1c0>
 8005570:	8019      	strh	r1, [r3, #0]
 8005572:	2300      	movs	r3, #0
 8005574:	6123      	str	r3, [r4, #16]
 8005576:	4615      	mov	r5, r2
 8005578:	e7bc      	b.n	80054f4 <_printf_i+0x14c>
 800557a:	682b      	ldr	r3, [r5, #0]
 800557c:	1d1a      	adds	r2, r3, #4
 800557e:	602a      	str	r2, [r5, #0]
 8005580:	681d      	ldr	r5, [r3, #0]
 8005582:	6862      	ldr	r2, [r4, #4]
 8005584:	2100      	movs	r1, #0
 8005586:	4628      	mov	r0, r5
 8005588:	f7fa fe5a 	bl	8000240 <memchr>
 800558c:	b108      	cbz	r0, 8005592 <_printf_i+0x1ea>
 800558e:	1b40      	subs	r0, r0, r5
 8005590:	6060      	str	r0, [r4, #4]
 8005592:	6863      	ldr	r3, [r4, #4]
 8005594:	6123      	str	r3, [r4, #16]
 8005596:	2300      	movs	r3, #0
 8005598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800559c:	e7aa      	b.n	80054f4 <_printf_i+0x14c>
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	462a      	mov	r2, r5
 80055a2:	4649      	mov	r1, r9
 80055a4:	4640      	mov	r0, r8
 80055a6:	47d0      	blx	sl
 80055a8:	3001      	adds	r0, #1
 80055aa:	d0ad      	beq.n	8005508 <_printf_i+0x160>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	079b      	lsls	r3, r3, #30
 80055b0:	d413      	bmi.n	80055da <_printf_i+0x232>
 80055b2:	68e0      	ldr	r0, [r4, #12]
 80055b4:	9b03      	ldr	r3, [sp, #12]
 80055b6:	4298      	cmp	r0, r3
 80055b8:	bfb8      	it	lt
 80055ba:	4618      	movlt	r0, r3
 80055bc:	e7a6      	b.n	800550c <_printf_i+0x164>
 80055be:	2301      	movs	r3, #1
 80055c0:	4632      	mov	r2, r6
 80055c2:	4649      	mov	r1, r9
 80055c4:	4640      	mov	r0, r8
 80055c6:	47d0      	blx	sl
 80055c8:	3001      	adds	r0, #1
 80055ca:	d09d      	beq.n	8005508 <_printf_i+0x160>
 80055cc:	3501      	adds	r5, #1
 80055ce:	68e3      	ldr	r3, [r4, #12]
 80055d0:	9903      	ldr	r1, [sp, #12]
 80055d2:	1a5b      	subs	r3, r3, r1
 80055d4:	42ab      	cmp	r3, r5
 80055d6:	dcf2      	bgt.n	80055be <_printf_i+0x216>
 80055d8:	e7eb      	b.n	80055b2 <_printf_i+0x20a>
 80055da:	2500      	movs	r5, #0
 80055dc:	f104 0619 	add.w	r6, r4, #25
 80055e0:	e7f5      	b.n	80055ce <_printf_i+0x226>
 80055e2:	bf00      	nop
 80055e4:	0800571d 	.word	0x0800571d
 80055e8:	0800572e 	.word	0x0800572e

080055ec <memmove>:
 80055ec:	4288      	cmp	r0, r1
 80055ee:	b510      	push	{r4, lr}
 80055f0:	eb01 0402 	add.w	r4, r1, r2
 80055f4:	d902      	bls.n	80055fc <memmove+0x10>
 80055f6:	4284      	cmp	r4, r0
 80055f8:	4623      	mov	r3, r4
 80055fa:	d807      	bhi.n	800560c <memmove+0x20>
 80055fc:	1e43      	subs	r3, r0, #1
 80055fe:	42a1      	cmp	r1, r4
 8005600:	d008      	beq.n	8005614 <memmove+0x28>
 8005602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005606:	f803 2f01 	strb.w	r2, [r3, #1]!
 800560a:	e7f8      	b.n	80055fe <memmove+0x12>
 800560c:	4402      	add	r2, r0
 800560e:	4601      	mov	r1, r0
 8005610:	428a      	cmp	r2, r1
 8005612:	d100      	bne.n	8005616 <memmove+0x2a>
 8005614:	bd10      	pop	{r4, pc}
 8005616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800561a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800561e:	e7f7      	b.n	8005610 <memmove+0x24>

08005620 <_sbrk_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4d06      	ldr	r5, [pc, #24]	; (800563c <_sbrk_r+0x1c>)
 8005624:	2300      	movs	r3, #0
 8005626:	4604      	mov	r4, r0
 8005628:	4608      	mov	r0, r1
 800562a:	602b      	str	r3, [r5, #0]
 800562c:	f7fb fd44 	bl	80010b8 <_sbrk>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	d102      	bne.n	800563a <_sbrk_r+0x1a>
 8005634:	682b      	ldr	r3, [r5, #0]
 8005636:	b103      	cbz	r3, 800563a <_sbrk_r+0x1a>
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	bd38      	pop	{r3, r4, r5, pc}
 800563c:	20000a64 	.word	0x20000a64

08005640 <memcpy>:
 8005640:	440a      	add	r2, r1
 8005642:	4291      	cmp	r1, r2
 8005644:	f100 33ff 	add.w	r3, r0, #4294967295
 8005648:	d100      	bne.n	800564c <memcpy+0xc>
 800564a:	4770      	bx	lr
 800564c:	b510      	push	{r4, lr}
 800564e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005656:	4291      	cmp	r1, r2
 8005658:	d1f9      	bne.n	800564e <memcpy+0xe>
 800565a:	bd10      	pop	{r4, pc}

0800565c <_realloc_r>:
 800565c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005660:	4680      	mov	r8, r0
 8005662:	4614      	mov	r4, r2
 8005664:	460e      	mov	r6, r1
 8005666:	b921      	cbnz	r1, 8005672 <_realloc_r+0x16>
 8005668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800566c:	4611      	mov	r1, r2
 800566e:	f7ff bc49 	b.w	8004f04 <_malloc_r>
 8005672:	b92a      	cbnz	r2, 8005680 <_realloc_r+0x24>
 8005674:	f7ff fbda 	bl	8004e2c <_free_r>
 8005678:	4625      	mov	r5, r4
 800567a:	4628      	mov	r0, r5
 800567c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005680:	f000 f81b 	bl	80056ba <_malloc_usable_size_r>
 8005684:	4284      	cmp	r4, r0
 8005686:	4607      	mov	r7, r0
 8005688:	d802      	bhi.n	8005690 <_realloc_r+0x34>
 800568a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800568e:	d812      	bhi.n	80056b6 <_realloc_r+0x5a>
 8005690:	4621      	mov	r1, r4
 8005692:	4640      	mov	r0, r8
 8005694:	f7ff fc36 	bl	8004f04 <_malloc_r>
 8005698:	4605      	mov	r5, r0
 800569a:	2800      	cmp	r0, #0
 800569c:	d0ed      	beq.n	800567a <_realloc_r+0x1e>
 800569e:	42bc      	cmp	r4, r7
 80056a0:	4622      	mov	r2, r4
 80056a2:	4631      	mov	r1, r6
 80056a4:	bf28      	it	cs
 80056a6:	463a      	movcs	r2, r7
 80056a8:	f7ff ffca 	bl	8005640 <memcpy>
 80056ac:	4631      	mov	r1, r6
 80056ae:	4640      	mov	r0, r8
 80056b0:	f7ff fbbc 	bl	8004e2c <_free_r>
 80056b4:	e7e1      	b.n	800567a <_realloc_r+0x1e>
 80056b6:	4635      	mov	r5, r6
 80056b8:	e7df      	b.n	800567a <_realloc_r+0x1e>

080056ba <_malloc_usable_size_r>:
 80056ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056be:	1f18      	subs	r0, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	bfbc      	itt	lt
 80056c4:	580b      	ldrlt	r3, [r1, r0]
 80056c6:	18c0      	addlt	r0, r0, r3
 80056c8:	4770      	bx	lr
	...

080056cc <_init>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	bf00      	nop
 80056d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d2:	bc08      	pop	{r3}
 80056d4:	469e      	mov	lr, r3
 80056d6:	4770      	bx	lr

080056d8 <_fini>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	bf00      	nop
 80056dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056de:	bc08      	pop	{r3}
 80056e0:	469e      	mov	lr, r3
 80056e2:	4770      	bx	lr
