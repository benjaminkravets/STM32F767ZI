
spi_f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080056c0  080056c0  000156c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800571c  0800571c  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  0800571c  0800571c  0001571c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005724  08005724  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005724  08005724  00015724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005728  08005728  00015728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800572c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  08005788  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  08005828  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008d8  2000019c  080058c8  0002019c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a74  080058c8  00020a74  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201ca  2**0
                  CONTENTS, READONLY
 15 .debug_info   000145a1  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002a80  00000000  00000000  000347ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000fc0  00000000  00000000  00037230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c28  00000000  00000000  000381f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029131  00000000  00000000  00038e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00013a60  00000000  00000000  00061f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fc1b4  00000000  00000000  000759a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000470c  00000000  00000000  00171b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  0017626c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000019c 	.word	0x2000019c
 800021c:	00000000 	.word	0x00000000
 8000220:	080056a8 	.word	0x080056a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a0 	.word	0x200001a0
 800023c:	080056a8 	.word	0x080056a8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fdc8 	bl	8001176 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f855 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f9df 	bl	80009ac <MX_GPIO_Init>
  MX_ETH_Init();
 80005ee:	f000 f8c3 	bl	8000778 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 f97d 	bl	80008f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f6:	f000 f9ab 	bl	8000950 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80005fa:	f000 f90b 	bl	8000814 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f947 	bl	8000890 <MX_USART2_UART_Init>

  char uart_buff[50];
  int uart_buf_len;
  char spi_buf[20];

  uart_buf_len = sprintf(uart_buff, "SPI Interupt\r\n");
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	491e      	ldr	r1, [pc, #120]	; (8000680 <main+0xa4>)
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fba9 	bl	8004d60 <siprintf>
 800060e:	64b8      	str	r0, [r7, #72]	; 0x48
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buff, uart_buf_len, 100);
 8000610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000612:	b29a      	uxth	r2, r3
 8000614:	f107 0114 	add.w	r1, r7, #20
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	481a      	ldr	r0, [pc, #104]	; (8000684 <main+0xa8>)
 800061c:	f003 fc0e 	bl	8003e3c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buff, uart_buf_len, 100);
 8000620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000622:	b29a      	uxth	r2, r3
 8000624:	f107 0114 	add.w	r1, r7, #20
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	4816      	ldr	r0, [pc, #88]	; (8000684 <main+0xa8>)
 800062c:	f003 fc06 	bl	8003e3c <HAL_UART_Transmit>
	HAL_Delay(500);
 8000630:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000634:	f000 fdfc 	bl	8001230 <HAL_Delay>


	for (int i = 0; i < sizeof(spi_buf); i++){
 8000638:	2300      	movs	r3, #0
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800063c:	e007      	b.n	800064e <main+0x72>
		spi_buf[i] = 33;
 800063e:	463a      	mov	r2, r7
 8000640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000642:	4413      	add	r3, r2
 8000644:	2221      	movs	r2, #33	; 0x21
 8000646:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(spi_buf); i++){
 8000648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800064a:	3301      	adds	r3, #1
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800064e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000650:	2b13      	cmp	r3, #19
 8000652:	d9f4      	bls.n	800063e <main+0x62>

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
	//HAL_SPI_Transmit(&hspi1, (uint8_t*)&EEPROM_WREN, 1, 100);
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2101      	movs	r1, #1
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <main+0xac>)
 800065a:	f001 fc13 	bl	8001e84 <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit_IT(&hspi1, (uint8_t*)spi_buf, 50);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)spi_buf, sizeof(spi_buf), 100);
 800065e:	4639      	mov	r1, r7
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	2214      	movs	r2, #20
 8000664:	4809      	ldr	r0, [pc, #36]	; (800068c <main+0xb0>)
 8000666:	f002 ff90 	bl	800358a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2101      	movs	r1, #1
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <main+0xac>)
 8000670:	f001 fc08 	bl	8001e84 <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <main+0xb4>)
 8000678:	f001 fc1d 	bl	8001eb6 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buff, uart_buf_len, 100);
 800067c:	e7d0      	b.n	8000620 <main+0x44>
 800067e:	bf00      	nop
 8000680:	080056c0 	.word	0x080056c0
 8000684:	20000304 	.word	0x20000304
 8000688:	40020800 	.word	0x40020800
 800068c:	200002a0 	.word	0x200002a0
 8000690:	40020400 	.word	0x40020400

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2234      	movs	r2, #52	; 0x34
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 fb7c 	bl	8004da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b8:	f001 fd60 	bl	800217c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <SystemClock_Config+0xdc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a2b      	ldr	r2, [pc, #172]	; (8000770 <SystemClock_Config+0xdc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <SystemClock_Config+0xdc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d4:	4b27      	ldr	r3, [pc, #156]	; (8000774 <SystemClock_Config+0xe0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006dc:	4a25      	ldr	r2, [pc, #148]	; (8000774 <SystemClock_Config+0xe0>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b23      	ldr	r3, [pc, #140]	; (8000774 <SystemClock_Config+0xe0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000708:	2360      	movs	r3, #96	; 0x60
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000710:	2304      	movs	r3, #4
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fd8d 	bl	800223c <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000728:	f000 f9f4 	bl	8000b14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800072c:	f001 fd36 	bl	800219c <HAL_PWREx_EnableOverDrive>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000736:	f000 f9ed 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2302      	movs	r3, #2
 8000740:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2103      	movs	r1, #3
 8000756:	4618      	mov	r0, r3
 8000758:	f002 f81e 	bl	8002798 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000762:	f000 f9d7 	bl	8000b14 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_ETH_Init+0x84>)
 800077e:	4a20      	ldr	r2, [pc, #128]	; (8000800 <MX_ETH_Init+0x88>)
 8000780:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_ETH_Init+0x8c>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_ETH_Init+0x8c>)
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_ETH_Init+0x8c>)
 8000790:	22e1      	movs	r2, #225	; 0xe1
 8000792:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_ETH_Init+0x8c>)
 8000796:	2200      	movs	r2, #0
 8000798:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_ETH_Init+0x8c>)
 800079c:	2200      	movs	r2, #0
 800079e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_ETH_Init+0x8c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_ETH_Init+0x84>)
 80007a8:	4a16      	ldr	r2, [pc, #88]	; (8000804 <MX_ETH_Init+0x8c>)
 80007aa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_ETH_Init+0x84>)
 80007ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007b2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_ETH_Init+0x84>)
 80007b6:	4a14      	ldr	r2, [pc, #80]	; (8000808 <MX_ETH_Init+0x90>)
 80007b8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_ETH_Init+0x84>)
 80007bc:	4a13      	ldr	r2, [pc, #76]	; (800080c <MX_ETH_Init+0x94>)
 80007be:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_ETH_Init+0x84>)
 80007c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007c6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <MX_ETH_Init+0x84>)
 80007ca:	f000 fe89 	bl	80014e0 <HAL_ETH_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007d4:	f000 f99e 	bl	8000b14 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007d8:	2238      	movs	r2, #56	; 0x38
 80007da:	2100      	movs	r1, #0
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <MX_ETH_Init+0x98>)
 80007de:	f004 fadf 	bl	8004da0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_ETH_Init+0x98>)
 80007e4:	2221      	movs	r2, #33	; 0x21
 80007e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_ETH_Init+0x98>)
 80007ea:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_ETH_Init+0x98>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200001f0 	.word	0x200001f0
 8000800:	40028000 	.word	0x40028000
 8000804:	2000091c 	.word	0x2000091c
 8000808:	200000fc 	.word	0x200000fc
 800080c:	2000005c 	.word	0x2000005c
 8000810:	200001b8 	.word	0x200001b8

08000814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_SPI1_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_SPI1_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_SPI1_Init+0x74>)
 8000820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_SPI1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI1_Init+0x74>)
 800082e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000832:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_SPI1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI1_Init+0x74>)
 8000842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000846:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI1_Init+0x74>)
 800084a:	2228      	movs	r2, #40	; 0x28
 800084c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI1_Init+0x74>)
 8000862:	2207      	movs	r2, #7
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_SPI1_Init+0x74>)
 8000874:	f002 fdde 	bl	8003434 <HAL_SPI_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 f949 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200002a0 	.word	0x200002a0
 800088c:	40013000 	.word	0x40013000

08000890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 8000896:	4a15      	ldr	r2, [pc, #84]	; (80008ec <MX_USART2_UART_Init+0x5c>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008d4:	f003 fa64 	bl	8003da0 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 f919 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000304 	.word	0x20000304
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_USART3_UART_Init+0x58>)
 80008f6:	4a15      	ldr	r2, [pc, #84]	; (800094c <MX_USART3_UART_Init+0x5c>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_USART3_UART_Init+0x58>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART3_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_USART3_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART3_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART3_UART_Init+0x58>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART3_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART3_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART3_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART3_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USART3_UART_Init+0x58>)
 8000934:	f003 fa34 	bl	8003da0 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800093e:	f000 f8e9 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000038c 	.word	0x2000038c
 800094c:	40004800 	.word	0x40004800

08000950 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800095a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2206      	movs	r2, #6
 8000960:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2202      	movs	r2, #2
 8000966:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2202      	movs	r2, #2
 8000972:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2201      	movs	r2, #1
 8000978:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	2201      	movs	r2, #1
 800098a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	f001 faa9 	bl	8001eea <HAL_PCD_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 f8b9 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000414 	.word	0x20000414

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	; 0x30
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b50      	ldr	r3, [pc, #320]	; (8000b04 <MX_GPIO_Init+0x158>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a4f      	ldr	r2, [pc, #316]	; (8000b04 <MX_GPIO_Init+0x158>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <MX_GPIO_Init+0x158>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	4b4a      	ldr	r3, [pc, #296]	; (8000b04 <MX_GPIO_Init+0x158>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a49      	ldr	r2, [pc, #292]	; (8000b04 <MX_GPIO_Init+0x158>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <MX_GPIO_Init+0x158>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <MX_GPIO_Init+0x158>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a43      	ldr	r2, [pc, #268]	; (8000b04 <MX_GPIO_Init+0x158>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b41      	ldr	r3, [pc, #260]	; (8000b04 <MX_GPIO_Init+0x158>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b3e      	ldr	r3, [pc, #248]	; (8000b04 <MX_GPIO_Init+0x158>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a3d      	ldr	r2, [pc, #244]	; (8000b04 <MX_GPIO_Init+0x158>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b3b      	ldr	r3, [pc, #236]	; (8000b04 <MX_GPIO_Init+0x158>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b38      	ldr	r3, [pc, #224]	; (8000b04 <MX_GPIO_Init+0x158>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a37      	ldr	r2, [pc, #220]	; (8000b04 <MX_GPIO_Init+0x158>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b35      	ldr	r3, [pc, #212]	; (8000b04 <MX_GPIO_Init+0x158>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3a:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <MX_GPIO_Init+0x158>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a31      	ldr	r2, [pc, #196]	; (8000b04 <MX_GPIO_Init+0x158>)
 8000a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <MX_GPIO_Init+0x158>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2101      	movs	r1, #1
 8000a56:	482c      	ldr	r0, [pc, #176]	; (8000b08 <MX_GPIO_Init+0x15c>)
 8000a58:	f001 fa14 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a62:	482a      	ldr	r0, [pc, #168]	; (8000b0c <MX_GPIO_Init+0x160>)
 8000a64:	f001 fa0e 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2140      	movs	r1, #64	; 0x40
 8000a6c:	4828      	ldr	r0, [pc, #160]	; (8000b10 <MX_GPIO_Init+0x164>)
 8000a6e:	f001 fa09 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	481f      	ldr	r0, [pc, #124]	; (8000b08 <MX_GPIO_Init+0x15c>)
 8000a8a:	f001 f84f 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4818      	ldr	r0, [pc, #96]	; (8000b08 <MX_GPIO_Init+0x15c>)
 8000aa6:	f001 f841 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aaa:	f244 0381 	movw	r3, #16513	; 0x4081
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4812      	ldr	r0, [pc, #72]	; (8000b0c <MX_GPIO_Init+0x160>)
 8000ac4:	f001 f832 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ac8:	2340      	movs	r3, #64	; 0x40
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	480c      	ldr	r0, [pc, #48]	; (8000b10 <MX_GPIO_Init+0x164>)
 8000ae0:	f001 f824 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <MX_GPIO_Init+0x164>)
 8000af8:	f001 f818 	bl	8001b2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	; 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40021800 	.word	0x40021800

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_MspInit+0x44>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_MspInit+0x44>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_MspInit+0x44>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_MspInit+0x44>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_MspInit+0x44>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a4e      	ldr	r2, [pc, #312]	; (8000cc0 <HAL_ETH_MspInit+0x158>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	f040 8096 	bne.w	8000cb8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b8c:	4b4d      	ldr	r3, [pc, #308]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	4a4c      	ldr	r2, [pc, #304]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000b92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
 8000b98:	4b4a      	ldr	r3, [pc, #296]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ba0:	623b      	str	r3, [r7, #32]
 8000ba2:	6a3b      	ldr	r3, [r7, #32]
 8000ba4:	4b47      	ldr	r3, [pc, #284]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a46      	ldr	r2, [pc, #280]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000baa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b44      	ldr	r3, [pc, #272]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	4b41      	ldr	r3, [pc, #260]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a40      	ldr	r2, [pc, #256]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000bc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc8:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd4:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	4a3a      	ldr	r2, [pc, #232]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	6313      	str	r3, [r2, #48]	; 0x30
 8000be0:	4b38      	ldr	r3, [pc, #224]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b35      	ldr	r3, [pc, #212]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	4a34      	ldr	r2, [pc, #208]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf8:	4b32      	ldr	r3, [pc, #200]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	4a2e      	ldr	r2, [pc, #184]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c10:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1c:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	4a28      	ldr	r2, [pc, #160]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c26:	6313      	str	r3, [r2, #48]	; 0x30
 8000c28:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <HAL_ETH_MspInit+0x15c>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c34:	2332      	movs	r3, #50	; 0x32
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c44:	230b      	movs	r3, #11
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	481e      	ldr	r0, [pc, #120]	; (8000cc8 <HAL_ETH_MspInit+0x160>)
 8000c50:	f000 ff6c 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c54:	2386      	movs	r3, #134	; 0x86
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c64:	230b      	movs	r3, #11
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4817      	ldr	r0, [pc, #92]	; (8000ccc <HAL_ETH_MspInit+0x164>)
 8000c70:	f000 ff5c 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c86:	230b      	movs	r3, #11
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <HAL_ETH_MspInit+0x168>)
 8000c92:	f000 ff4b 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c96:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca8:	230b      	movs	r3, #11
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <HAL_ETH_MspInit+0x16c>)
 8000cb4:	f000 ff3a 	bl	8001b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3738      	adds	r7, #56	; 0x38
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40028000 	.word	0x40028000
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020800 	.word	0x40020800
 8000ccc:	40020000 	.word	0x40020000
 8000cd0:	40020400 	.word	0x40020400
 8000cd4:	40021800 	.word	0x40021800

08000cd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a29      	ldr	r2, [pc, #164]	; (8000d9c <HAL_SPI_MspInit+0xc4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d14b      	bne.n	8000d92 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfa:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_SPI_MspInit+0xc8>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <HAL_SPI_MspInit+0xc8>)
 8000d00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <HAL_SPI_MspInit+0xc8>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <HAL_SPI_MspInit+0xc8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <HAL_SPI_MspInit+0xc8>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <HAL_SPI_MspInit+0xc8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_SPI_MspInit+0xc8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <HAL_SPI_MspInit+0xc8>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <HAL_SPI_MspInit+0xc8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d42:	2360      	movs	r3, #96	; 0x60
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d52:	2305      	movs	r3, #5
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4811      	ldr	r0, [pc, #68]	; (8000da4 <HAL_SPI_MspInit+0xcc>)
 8000d5e:	f000 fee5 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d72:	2305      	movs	r3, #5
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480a      	ldr	r0, [pc, #40]	; (8000da8 <HAL_SPI_MspInit+0xd0>)
 8000d7e:	f000 fed5 	bl	8001b2c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2023      	movs	r0, #35	; 0x23
 8000d88:	f000 fb51 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d8c:	2023      	movs	r0, #35	; 0x23
 8000d8e:	f000 fb6a 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40013000 	.word	0x40013000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020c00 	.word	0x40020c00

08000dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0b0      	sub	sp, #192	; 0xc0
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	2290      	movs	r2, #144	; 0x90
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 ffe7 	bl	8004da0 <memset>
  if(huart->Instance==USART2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a53      	ldr	r2, [pc, #332]	; (8000f24 <HAL_UART_MspInit+0x178>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d15c      	bne.n	8000e96 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fefb 	bl	8002be4 <HAL_RCCEx_PeriphCLKConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000df4:	f7ff fe8e 	bl	8000b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df8:	4b4b      	ldr	r3, [pc, #300]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	4a4a      	ldr	r2, [pc, #296]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e02:	6413      	str	r3, [r2, #64]	; 0x40
 8000e04:	4b48      	ldr	r3, [pc, #288]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	4a44      	ldr	r2, [pc, #272]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1c:	4b42      	ldr	r3, [pc, #264]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e28:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	4a3e      	ldr	r2, [pc, #248]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	6313      	str	r3, [r2, #48]	; 0x30
 8000e34:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	f003 0308 	and.w	r3, r3, #8
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e40:	2308      	movs	r3, #8
 8000e42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e62:	4619      	mov	r1, r3
 8000e64:	4831      	ldr	r0, [pc, #196]	; (8000f2c <HAL_UART_MspInit+0x180>)
 8000e66:	f000 fe61 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e6a:	2320      	movs	r3, #32
 8000e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e82:	2307      	movs	r3, #7
 8000e84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4828      	ldr	r0, [pc, #160]	; (8000f30 <HAL_UART_MspInit+0x184>)
 8000e90:	f000 fe4c 	bl	8001b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e94:	e041      	b.n	8000f1a <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a26      	ldr	r2, [pc, #152]	; (8000f34 <HAL_UART_MspInit+0x188>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d13c      	bne.n	8000f1a <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fe98 	bl	8002be4 <HAL_RCCEx_PeriphCLKConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_UART_MspInit+0x112>
      Error_Handler();
 8000eba:	f7ff fe2b 	bl	8000b14 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_UART_MspInit+0x17c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f08:	2307      	movs	r3, #7
 8000f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f12:	4619      	mov	r1, r3
 8000f14:	4806      	ldr	r0, [pc, #24]	; (8000f30 <HAL_UART_MspInit+0x184>)
 8000f16:	f000 fe09 	bl	8001b2c <HAL_GPIO_Init>
}
 8000f1a:	bf00      	nop
 8000f1c:	37c0      	adds	r7, #192	; 0xc0
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40004400 	.word	0x40004400
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020c00 	.word	0x40020c00
 8000f34:	40004800 	.word	0x40004800

08000f38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0ae      	sub	sp, #184	; 0xb8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2290      	movs	r2, #144	; 0x90
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f003 ff21 	bl	8004da0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f66:	d159      	bne.n	800101c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f6c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 fe33 	bl	8002be4 <HAL_RCCEx_PeriphCLKConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f84:	f7ff fdc6 	bl	8000b14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b26      	ldr	r3, [pc, #152]	; (8001024 <HAL_PCD_MspInit+0xec>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a25      	ldr	r2, [pc, #148]	; (8001024 <HAL_PCD_MspInit+0xec>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6313      	str	r3, [r2, #48]	; 0x30
 8000f94:	4b23      	ldr	r3, [pc, #140]	; (8001024 <HAL_PCD_MspInit+0xec>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fa0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fba:	230a      	movs	r3, #10
 8000fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4818      	ldr	r0, [pc, #96]	; (8001028 <HAL_PCD_MspInit+0xf0>)
 8000fc8:	f000 fdb0 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4810      	ldr	r0, [pc, #64]	; (8001028 <HAL_PCD_MspInit+0xf0>)
 8000fe8:	f000 fda0 	bl	8001b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_PCD_MspInit+0xec>)
 8000fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <HAL_PCD_MspInit+0xec>)
 8000ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff6:	6353      	str	r3, [r2, #52]	; 0x34
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_PCD_MspInit+0xec>)
 8000ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <HAL_PCD_MspInit+0xec>)
 8001006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_PCD_MspInit+0xec>)
 800100a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100e:	6453      	str	r3, [r2, #68]	; 0x44
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <HAL_PCD_MspInit+0xec>)
 8001012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800101c:	bf00      	nop
 800101e:	37b8      	adds	r7, #184	; 0xb8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f8ba 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <SPI1_IRQHandler+0x10>)
 8001086:	f002 fbef 	bl	8003868 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200002a0 	.word	0x200002a0

08001094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800109c:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <_sbrk+0x5c>)
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <_sbrk+0x60>)
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <_sbrk+0x64>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <_sbrk+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d207      	bcs.n	80010d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c4:	f003 fe74 	bl	8004db0 <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	e009      	b.n	80010e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <_sbrk+0x64>)
 80010e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20080000 	.word	0x20080000
 80010f4:	00000400 	.word	0x00000400
 80010f8:	20000924 	.word	0x20000924
 80010fc:	20000a78 	.word	0x20000a78

08001100 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <SystemInit+0x20>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <SystemInit+0x20>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800112a:	490e      	ldr	r1, [pc, #56]	; (8001164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800112c:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001140:	4c0b      	ldr	r4, [pc, #44]	; (8001170 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800114e:	f7ff ffd7 	bl	8001100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001152:	f003 fe33 	bl	8004dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001156:	f7ff fa41 	bl	80005dc <main>
  bx  lr    
 800115a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001168:	0800572c 	.word	0x0800572c
  ldr r2, =_sbss
 800116c:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001170:	20000a74 	.word	0x20000a74

08001174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC_IRQHandler>

08001176 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117a:	2003      	movs	r0, #3
 800117c:	f000 f94c 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001180:	2000      	movs	r0, #0
 8001182:	f000 f805 	bl	8001190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001186:	f7ff fccb 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x54>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x58>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f967 	bl	8001482 <HAL_SYSTICK_Config>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00e      	b.n	80011dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	d80a      	bhi.n	80011da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c4:	2200      	movs	r2, #0
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f000 f92f 	bl	800142e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d0:	4a06      	ldr	r2, [pc, #24]	; (80011ec <HAL_InitTick+0x5c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000004 	.word	0x20000004

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008
 8001214:	20000928 	.word	0x20000928

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000928 	.word	0x20000928

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff ffee 	bl	8001218 <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001248:	d005      	beq.n	8001256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_Delay+0x44>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001256:	bf00      	nop
 8001258:	f7ff ffde 	bl	8001218 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8f7      	bhi.n	8001258 <HAL_Delay+0x28>
  {
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <__NVIC_SetPriorityGrouping+0x40>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <__NVIC_SetPriorityGrouping+0x40>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00
 80012bc:	05fa0000 	.word	0x05fa0000

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db0b      	blt.n	8001306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	4907      	ldr	r1, [pc, #28]	; (8001314 <__NVIC_EnableIRQ+0x38>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000e100 	.word	0xe000e100

08001318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0a      	blt.n	8001342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	490c      	ldr	r1, [pc, #48]	; (8001364 <__NVIC_SetPriority+0x4c>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001340:	e00a      	b.n	8001358 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4908      	ldr	r1, [pc, #32]	; (8001368 <__NVIC_SetPriority+0x50>)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	3b04      	subs	r3, #4
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	440b      	add	r3, r1
 8001356:	761a      	strb	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2b04      	cmp	r3, #4
 8001388:	bf28      	it	cs
 800138a:	2304      	movcs	r3, #4
 800138c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3304      	adds	r3, #4
 8001392:	2b06      	cmp	r3, #6
 8001394:	d902      	bls.n	800139c <NVIC_EncodePriority+0x30>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b03      	subs	r3, #3
 800139a:	e000      	b.n	800139e <NVIC_EncodePriority+0x32>
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43d9      	mvns	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	4313      	orrs	r3, r2
         );
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f7ff ff8e 	bl	8001318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff29 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001440:	f7ff ff3e 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	6978      	ldr	r0, [r7, #20]
 800144c:	f7ff ff8e 	bl	800136c <NVIC_EncodePriority>
 8001450:	4602      	mov	r2, r0
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff5d 	bl	8001318 <__NVIC_SetPriority>
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff31 	bl	80012dc <__NVIC_EnableIRQ>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffa2 	bl	80013d4 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d004      	beq.n	80014b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e00c      	b.n	80014d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2205      	movs	r2, #5
 80014bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0201 	bic.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e06a      	b.n	80015c8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d106      	bne.n	800150a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2223      	movs	r2, #35	; 0x23
 8001500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fb2f 	bl	8000b68 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <HAL_ETH_Init+0xf0>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a30      	ldr	r2, [pc, #192]	; (80015d0 <HAL_ETH_Init+0xf0>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <HAL_ETH_Init+0xf0>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001522:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <HAL_ETH_Init+0xf4>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4a2b      	ldr	r2, [pc, #172]	; (80015d4 <HAL_ETH_Init+0xf4>)
 8001528:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800152c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800152e:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <HAL_ETH_Init+0xf4>)
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	4927      	ldr	r1, [pc, #156]	; (80015d4 <HAL_ETH_Init+0xf4>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <HAL_ETH_Init+0xf4>)
 800153e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001556:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001558:	f7ff fe5e 	bl	8001218 <HAL_GetTick>
 800155c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800155e:	e011      	b.n	8001584 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001560:	f7ff fe5a 	bl	8001218 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800156e:	d909      	bls.n	8001584 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2204      	movs	r2, #4
 8001574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	22e0      	movs	r2, #224	; 0xe0
 800157c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e021      	b.n	80015c8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1e4      	bne.n	8001560 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f958 	bl	800184c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f9ff 	bl	80019a0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 fa55 	bl	8001a52 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	461a      	mov	r2, r3
 80015ae:	2100      	movs	r1, #0
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f9bd 	bl	8001930 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2210      	movs	r2, #16
 80015c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40013800 	.word	0x40013800

080015d8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4b51      	ldr	r3, [pc, #324]	; (8001734 <ETH_SetMACConfig+0x15c>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	7c1b      	ldrb	r3, [r3, #16]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d102      	bne.n	8001600 <ETH_SetMACConfig+0x28>
 80015fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015fe:	e000      	b.n	8001602 <ETH_SetMACConfig+0x2a>
 8001600:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	7c5b      	ldrb	r3, [r3, #17]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <ETH_SetMACConfig+0x38>
 800160a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800160e:	e000      	b.n	8001612 <ETH_SetMACConfig+0x3a>
 8001610:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001612:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001618:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	7fdb      	ldrb	r3, [r3, #31]
 800161e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001620:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001626:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	7f92      	ldrb	r2, [r2, #30]
 800162c:	2a00      	cmp	r2, #0
 800162e:	d102      	bne.n	8001636 <ETH_SetMACConfig+0x5e>
 8001630:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001634:	e000      	b.n	8001638 <ETH_SetMACConfig+0x60>
 8001636:	2200      	movs	r2, #0
                        macconf->Speed |
 8001638:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	7f1b      	ldrb	r3, [r3, #28]
 800163e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001640:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001646:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	791b      	ldrb	r3, [r3, #4]
 800164c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800164e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001656:	2a00      	cmp	r2, #0
 8001658:	d102      	bne.n	8001660 <ETH_SetMACConfig+0x88>
 800165a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800165e:	e000      	b.n	8001662 <ETH_SetMACConfig+0x8a>
 8001660:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001662:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	7bdb      	ldrb	r3, [r3, #15]
 8001668:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800166a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001670:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001678:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800167a:	4313      	orrs	r3, r2
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001692:	2001      	movs	r0, #1
 8001694:	f7ff fdcc 	bl	8001230 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80016ae:	4013      	ands	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80016be:	2a00      	cmp	r2, #0
 80016c0:	d101      	bne.n	80016c6 <ETH_SetMACConfig+0xee>
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	e000      	b.n	80016c8 <ETH_SetMACConfig+0xf0>
 80016c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80016d6:	2a01      	cmp	r2, #1
 80016d8:	d101      	bne.n	80016de <ETH_SetMACConfig+0x106>
 80016da:	2208      	movs	r2, #8
 80016dc:	e000      	b.n	80016e0 <ETH_SetMACConfig+0x108>
 80016de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80016e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80016e8:	2a01      	cmp	r2, #1
 80016ea:	d101      	bne.n	80016f0 <ETH_SetMACConfig+0x118>
 80016ec:	2204      	movs	r2, #4
 80016ee:	e000      	b.n	80016f2 <ETH_SetMACConfig+0x11a>
 80016f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80016fa:	2a01      	cmp	r2, #1
 80016fc:	d101      	bne.n	8001702 <ETH_SetMACConfig+0x12a>
 80016fe:	2202      	movs	r2, #2
 8001700:	e000      	b.n	8001704 <ETH_SetMACConfig+0x12c>
 8001702:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001704:	4313      	orrs	r3, r2
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800171c:	2001      	movs	r0, #1
 800171e:	f7ff fd87 	bl	8001230 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	619a      	str	r2, [r3, #24]
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	ff20810f 	.word	0xff20810f

08001738 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <ETH_SetDMAConfig+0x110>)
 8001752:	4013      	ands	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	7b1b      	ldrb	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <ETH_SetDMAConfig+0x2c>
 800175e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001762:	e000      	b.n	8001766 <ETH_SetDMAConfig+0x2e>
 8001764:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	7b5b      	ldrb	r3, [r3, #13]
 800176a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800176c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	7f52      	ldrb	r2, [r2, #29]
 8001772:	2a00      	cmp	r2, #0
 8001774:	d102      	bne.n	800177c <ETH_SetDMAConfig+0x44>
 8001776:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800177a:	e000      	b.n	800177e <ETH_SetDMAConfig+0x46>
 800177c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800177e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	7b9b      	ldrb	r3, [r3, #14]
 8001784:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001786:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800178c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	7f1b      	ldrb	r3, [r3, #28]
 8001792:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001794:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	7f9b      	ldrb	r3, [r3, #30]
 800179a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800179c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80017a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017aa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017ac:	4313      	orrs	r3, r2
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017bc:	461a      	mov	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ce:	2001      	movs	r0, #1
 80017d0:	f7ff fd2e 	bl	8001230 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017dc:	461a      	mov	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	791b      	ldrb	r3, [r3, #4]
 80017e6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017ec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80017f2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017f8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001800:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001802:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800180a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001810:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800181a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800181e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800182c:	2001      	movs	r0, #1
 800182e:	f7ff fcff 	bl	8001230 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	f8de3f23 	.word	0xf8de3f23

0800184c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b0a6      	sub	sp, #152	; 0x98
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001854:	2301      	movs	r3, #1
 8001856:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800185a:	2301      	movs	r3, #1
 800185c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001860:	2300      	movs	r3, #0
 8001862:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800186a:	2301      	movs	r3, #1
 800186c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001876:	2301      	movs	r3, #1
 8001878:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001888:	2300      	movs	r3, #0
 800188a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001892:	2300      	movs	r3, #0
 8001894:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80018ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018b2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018c4:	4619      	mov	r1, r3
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fe86 	bl	80015d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80018cc:	2301      	movs	r3, #1
 80018ce:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80018d0:	2301      	movs	r3, #1
 80018d2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80018da:	2301      	movs	r3, #1
 80018dc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80018f2:	2301      	movs	r3, #1
 80018f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018f8:	2301      	movs	r3, #1
 80018fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80018fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001900:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001906:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800190e:	2301      	movs	r3, #1
 8001910:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	4619      	mov	r1, r3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff08 	bl	8001738 <ETH_SetDMAConfig>
}
 8001928:	bf00      	nop
 800192a:	3798      	adds	r7, #152	; 0x98
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3305      	adds	r3, #5
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	3204      	adds	r2, #4
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	4313      	orrs	r3, r2
 800194c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <ETH_MACAddressConfig+0x68>)
 8001952:	4413      	add	r3, r2
 8001954:	461a      	mov	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3303      	adds	r3, #3
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	061a      	lsls	r2, r3, #24
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3302      	adds	r3, #2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3301      	adds	r3, #1
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	4313      	orrs	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	7812      	ldrb	r2, [r2, #0]
 800197a:	4313      	orrs	r3, r2
 800197c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <ETH_MACAddressConfig+0x6c>)
 8001982:	4413      	add	r3, r2
 8001984:	461a      	mov	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	6013      	str	r3, [r2, #0]
}
 800198a:	bf00      	nop
 800198c:	371c      	adds	r7, #28
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40028040 	.word	0x40028040
 800199c:	40028044 	.word	0x40028044

080019a0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e03e      	b.n	8001a2c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68d9      	ldr	r1, [r3, #12]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	3206      	adds	r2, #6
 80019e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d80c      	bhi.n	8001a10 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68d9      	ldr	r1, [r3, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	461a      	mov	r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	e004      	b.n	8001a1a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	461a      	mov	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d9bd      	bls.n	80019ae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a44:	611a      	str	r2, [r3, #16]
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b085      	sub	sp, #20
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	e046      	b.n	8001aee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6919      	ldr	r1, [r3, #16]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a9c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001aa4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	3212      	adds	r2, #18
 8001aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d80c      	bhi.n	8001ade <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6919      	ldr	r1, [r3, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	e004      	b.n	8001ae8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	3301      	adds	r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d9b5      	bls.n	8001a60 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1e:	60da      	str	r2, [r3, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	e175      	b.n	8001e38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	f040 8164 	bne.w	8001e32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d005      	beq.n	8001b82 <HAL_GPIO_Init+0x56>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d130      	bne.n	8001be4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 0201 	and.w	r2, r3, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d017      	beq.n	8001c20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d123      	bne.n	8001c74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	08da      	lsrs	r2, r3, #3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3208      	adds	r2, #8
 8001c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	220f      	movs	r2, #15
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	69b9      	ldr	r1, [r7, #24]
 8001c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0203 	and.w	r2, r3, #3
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80be 	beq.w	8001e32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	4b66      	ldr	r3, [pc, #408]	; (8001e50 <HAL_GPIO_Init+0x324>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	4a65      	ldr	r2, [pc, #404]	; (8001e50 <HAL_GPIO_Init+0x324>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc2:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <HAL_GPIO_Init+0x324>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cce:	4a61      	ldr	r2, [pc, #388]	; (8001e54 <HAL_GPIO_Init+0x328>)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <HAL_GPIO_Init+0x32c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d037      	beq.n	8001d6a <HAL_GPIO_Init+0x23e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a57      	ldr	r2, [pc, #348]	; (8001e5c <HAL_GPIO_Init+0x330>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d031      	beq.n	8001d66 <HAL_GPIO_Init+0x23a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a56      	ldr	r2, [pc, #344]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d02b      	beq.n	8001d62 <HAL_GPIO_Init+0x236>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a55      	ldr	r2, [pc, #340]	; (8001e64 <HAL_GPIO_Init+0x338>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d025      	beq.n	8001d5e <HAL_GPIO_Init+0x232>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a54      	ldr	r2, [pc, #336]	; (8001e68 <HAL_GPIO_Init+0x33c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01f      	beq.n	8001d5a <HAL_GPIO_Init+0x22e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a53      	ldr	r2, [pc, #332]	; (8001e6c <HAL_GPIO_Init+0x340>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d019      	beq.n	8001d56 <HAL_GPIO_Init+0x22a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a52      	ldr	r2, [pc, #328]	; (8001e70 <HAL_GPIO_Init+0x344>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x226>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a51      	ldr	r2, [pc, #324]	; (8001e74 <HAL_GPIO_Init+0x348>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x222>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a50      	ldr	r2, [pc, #320]	; (8001e78 <HAL_GPIO_Init+0x34c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x21e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4f      	ldr	r2, [pc, #316]	; (8001e7c <HAL_GPIO_Init+0x350>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x21a>
 8001d42:	2309      	movs	r3, #9
 8001d44:	e012      	b.n	8001d6c <HAL_GPIO_Init+0x240>
 8001d46:	230a      	movs	r3, #10
 8001d48:	e010      	b.n	8001d6c <HAL_GPIO_Init+0x240>
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	e00e      	b.n	8001d6c <HAL_GPIO_Init+0x240>
 8001d4e:	2307      	movs	r3, #7
 8001d50:	e00c      	b.n	8001d6c <HAL_GPIO_Init+0x240>
 8001d52:	2306      	movs	r3, #6
 8001d54:	e00a      	b.n	8001d6c <HAL_GPIO_Init+0x240>
 8001d56:	2305      	movs	r3, #5
 8001d58:	e008      	b.n	8001d6c <HAL_GPIO_Init+0x240>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x240>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e004      	b.n	8001d6c <HAL_GPIO_Init+0x240>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e002      	b.n	8001d6c <HAL_GPIO_Init+0x240>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_GPIO_Init+0x240>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	f002 0203 	and.w	r2, r2, #3
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	4093      	lsls	r3, r2
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d7c:	4935      	ldr	r1, [pc, #212]	; (8001e54 <HAL_GPIO_Init+0x328>)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dae:	4a34      	ldr	r2, [pc, #208]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd8:	4a29      	ldr	r2, [pc, #164]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dde:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e02:	4a1f      	ldr	r2, [pc, #124]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e2c:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3301      	adds	r3, #1
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	2b0f      	cmp	r3, #15
 8001e3c:	f67f ae86 	bls.w	8001b4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40013800 	.word	0x40013800
 8001e58:	40020000 	.word	0x40020000
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	40020800 	.word	0x40020800
 8001e64:	40020c00 	.word	0x40020c00
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40021400 	.word	0x40021400
 8001e70:	40021800 	.word	0x40021800
 8001e74:	40021c00 	.word	0x40021c00
 8001e78:	40022000 	.word	0x40022000
 8001e7c:	40022400 	.word	0x40022400
 8001e80:	40013c00 	.word	0x40013c00

08001e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
 8001e90:	4613      	mov	r3, r2
 8001e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e94:	787b      	ldrb	r3, [r7, #1]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ea0:	e003      	b.n	8001eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ea2:	887b      	ldrh	r3, [r7, #2]
 8001ea4:	041a      	lsls	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	619a      	str	r2, [r3, #24]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b085      	sub	sp, #20
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ec8:	887a      	ldrh	r2, [r7, #2]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	041a      	lsls	r2, r3, #16
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	400b      	ands	r3, r1
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	619a      	str	r2, [r3, #24]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eec:	b08f      	sub	sp, #60	; 0x3c
 8001eee:	af0a      	add	r7, sp, #40	; 0x28
 8001ef0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e116      	b.n	800212a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff f80e 	bl	8000f38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2203      	movs	r2, #3
 8001f20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 fc74 	bl	8004828 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	687e      	ldr	r6, [r7, #4]
 8001f48:	466d      	mov	r5, sp
 8001f4a:	f106 0410 	add.w	r4, r6, #16
 8001f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f5e:	1d33      	adds	r3, r6, #4
 8001f60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f62:	6838      	ldr	r0, [r7, #0]
 8001f64:	f002 fc08 	bl	8004778 <USB_CoreInit>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e0d7      	b.n	800212a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 fc62 	bl	800484a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	73fb      	strb	r3, [r7, #15]
 8001f8a:	e04a      	b.n	8002022 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	333d      	adds	r3, #61	; 0x3d
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	333c      	adds	r3, #60	; 0x3c
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	b298      	uxth	r0, r3
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3344      	adds	r3, #68	; 0x44
 8001fc8:	4602      	mov	r2, r0
 8001fca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	3340      	adds	r3, #64	; 0x40
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	3348      	adds	r3, #72	; 0x48
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	334c      	adds	r3, #76	; 0x4c
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	3354      	adds	r3, #84	; 0x54
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	3301      	adds	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	d3af      	bcc.n	8001f8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]
 8002030:	e044      	b.n	80020bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002074:	7bfa      	ldrb	r2, [r7, #15]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	3301      	adds	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d3b5      	bcc.n	8002032 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	687e      	ldr	r6, [r7, #4]
 80020ce:	466d      	mov	r5, sp
 80020d0:	f106 0410 	add.w	r4, r6, #16
 80020d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80020e4:	1d33      	adds	r3, r6, #4
 80020e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e8:	6838      	ldr	r0, [r7, #0]
 80020ea:	f002 fbfb 	bl	80048e4 <USB_DevInit>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e014      	b.n	800212a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	2b01      	cmp	r3, #1
 8002116:	d102      	bne.n	800211e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f80b 	bl	8002134 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f002 fdb9 	bl	8004c9a <USB_DevDisconnect>

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002134 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_PCDEx_ActivateLPM+0x44>)
 8002164:	4313      	orrs	r3, r2
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	10000003 	.word	0x10000003

0800217c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40007000 	.word	0x40007000

0800219c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_PWREx_EnableOverDrive+0x98>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a22      	ldr	r2, [pc, #136]	; (8002234 <HAL_PWREx_EnableOverDrive+0x98>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_PWREx_EnableOverDrive+0x98>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ca:	f7ff f825 	bl	8001218 <HAL_GetTick>
 80021ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021d0:	e009      	b.n	80021e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021d2:	f7ff f821 	bl	8001218 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021e0:	d901      	bls.n	80021e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e022      	b.n	800222c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021e6:	4b14      	ldr	r3, [pc, #80]	; (8002238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f2:	d1ee      	bne.n	80021d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0f      	ldr	r2, [pc, #60]	; (8002238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002200:	f7ff f80a 	bl	8001218 <HAL_GetTick>
 8002204:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002206:	e009      	b.n	800221c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002208:	f7ff f806 	bl	8001218 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002216:	d901      	bls.n	800221c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e007      	b.n	800222c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_PWREx_EnableOverDrive+0x9c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002228:	d1ee      	bne.n	8002208 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	40007000 	.word	0x40007000

0800223c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002244:	2300      	movs	r3, #0
 8002246:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e29b      	b.n	800278a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8087 	beq.w	800236e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002260:	4b96      	ldr	r3, [pc, #600]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b04      	cmp	r3, #4
 800226a:	d00c      	beq.n	8002286 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800226c:	4b93      	ldr	r3, [pc, #588]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b08      	cmp	r3, #8
 8002276:	d112      	bne.n	800229e <HAL_RCC_OscConfig+0x62>
 8002278:	4b90      	ldr	r3, [pc, #576]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002284:	d10b      	bne.n	800229e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002286:	4b8d      	ldr	r3, [pc, #564]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d06c      	beq.n	800236c <HAL_RCC_OscConfig+0x130>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d168      	bne.n	800236c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e275      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x7a>
 80022a8:	4b84      	ldr	r3, [pc, #528]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a83      	ldr	r2, [pc, #524]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	e02e      	b.n	8002314 <HAL_RCC_OscConfig+0xd8>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x9c>
 80022be:	4b7f      	ldr	r3, [pc, #508]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a7e      	ldr	r2, [pc, #504]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80022c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b7c      	ldr	r3, [pc, #496]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7b      	ldr	r2, [pc, #492]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80022d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e01d      	b.n	8002314 <HAL_RCC_OscConfig+0xd8>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0xc0>
 80022e2:	4b76      	ldr	r3, [pc, #472]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a75      	ldr	r2, [pc, #468]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b73      	ldr	r3, [pc, #460]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a72      	ldr	r2, [pc, #456]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0xd8>
 80022fc:	4b6f      	ldr	r3, [pc, #444]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a6e      	ldr	r2, [pc, #440]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b6c      	ldr	r3, [pc, #432]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a6b      	ldr	r2, [pc, #428]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe ff7c 	bl	8001218 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7fe ff78 	bl	8001218 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e229      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b61      	ldr	r3, [pc, #388]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0xe8>
 8002342:	e014      	b.n	800236e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe ff68 	bl	8001218 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7fe ff64 	bl	8001218 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	; 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e215      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	4b57      	ldr	r3, [pc, #348]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x110>
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d069      	beq.n	800244e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800237a:	4b50      	ldr	r3, [pc, #320]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002386:	4b4d      	ldr	r3, [pc, #308]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b08      	cmp	r3, #8
 8002390:	d11c      	bne.n	80023cc <HAL_RCC_OscConfig+0x190>
 8002392:	4b4a      	ldr	r3, [pc, #296]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d116      	bne.n	80023cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_RCC_OscConfig+0x17a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e1e9      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	4b41      	ldr	r3, [pc, #260]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	493d      	ldr	r1, [pc, #244]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	e040      	b.n	800244e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d023      	beq.n	800241c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d4:	4b39      	ldr	r3, [pc, #228]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a38      	ldr	r2, [pc, #224]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe ff1a 	bl	8001218 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e8:	f7fe ff16 	bl	8001218 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e1c7      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fa:	4b30      	ldr	r3, [pc, #192]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4929      	ldr	r1, [pc, #164]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
 800241a:	e018      	b.n	800244e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241c:	4b27      	ldr	r3, [pc, #156]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a26      	ldr	r2, [pc, #152]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe fef6 	bl	8001218 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002430:	f7fe fef2 	bl	8001218 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e1a3      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002442:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d038      	beq.n	80024cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d019      	beq.n	8002496 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002466:	4a15      	ldr	r2, [pc, #84]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246e:	f7fe fed3 	bl	8001218 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002476:	f7fe fecf 	bl	8001218 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e180      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 800248a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x23a>
 8002494:	e01a      	b.n	80024cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a2:	f7fe feb9 	bl	8001218 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024aa:	f7fe feb5 	bl	8001218 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d903      	bls.n	80024c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e166      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
 80024bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c0:	4b92      	ldr	r3, [pc, #584]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80024c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ee      	bne.n	80024aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80a4 	beq.w	8002622 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024da:	4b8c      	ldr	r3, [pc, #560]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10d      	bne.n	8002502 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	4b89      	ldr	r3, [pc, #548]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a88      	ldr	r2, [pc, #544]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b86      	ldr	r3, [pc, #536]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fe:	2301      	movs	r3, #1
 8002500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002502:	4b83      	ldr	r3, [pc, #524]	; (8002710 <HAL_RCC_OscConfig+0x4d4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d118      	bne.n	8002540 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800250e:	4b80      	ldr	r3, [pc, #512]	; (8002710 <HAL_RCC_OscConfig+0x4d4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a7f      	ldr	r2, [pc, #508]	; (8002710 <HAL_RCC_OscConfig+0x4d4>)
 8002514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251a:	f7fe fe7d 	bl	8001218 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002522:	f7fe fe79 	bl	8001218 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b64      	cmp	r3, #100	; 0x64
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e12a      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002534:	4b76      	ldr	r3, [pc, #472]	; (8002710 <HAL_RCC_OscConfig+0x4d4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x31a>
 8002548:	4b70      	ldr	r3, [pc, #448]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 800254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254c:	4a6f      	ldr	r2, [pc, #444]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6713      	str	r3, [r2, #112]	; 0x70
 8002554:	e02d      	b.n	80025b2 <HAL_RCC_OscConfig+0x376>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x33c>
 800255e:	4b6b      	ldr	r3, [pc, #428]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 8002560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002562:	4a6a      	ldr	r2, [pc, #424]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	6713      	str	r3, [r2, #112]	; 0x70
 800256a:	4b68      	ldr	r3, [pc, #416]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a67      	ldr	r2, [pc, #412]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	6713      	str	r3, [r2, #112]	; 0x70
 8002576:	e01c      	b.n	80025b2 <HAL_RCC_OscConfig+0x376>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b05      	cmp	r3, #5
 800257e:	d10c      	bne.n	800259a <HAL_RCC_OscConfig+0x35e>
 8002580:	4b62      	ldr	r3, [pc, #392]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	4a61      	ldr	r2, [pc, #388]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	6713      	str	r3, [r2, #112]	; 0x70
 800258c:	4b5f      	ldr	r3, [pc, #380]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	4a5e      	ldr	r2, [pc, #376]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6713      	str	r3, [r2, #112]	; 0x70
 8002598:	e00b      	b.n	80025b2 <HAL_RCC_OscConfig+0x376>
 800259a:	4b5c      	ldr	r3, [pc, #368]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259e:	4a5b      	ldr	r2, [pc, #364]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6713      	str	r3, [r2, #112]	; 0x70
 80025a6:	4b59      	ldr	r3, [pc, #356]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	4a58      	ldr	r2, [pc, #352]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d015      	beq.n	80025e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ba:	f7fe fe2d 	bl	8001218 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7fe fe29 	bl	8001218 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e0d8      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d8:	4b4c      	ldr	r3, [pc, #304]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0ee      	beq.n	80025c2 <HAL_RCC_OscConfig+0x386>
 80025e4:	e014      	b.n	8002610 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e6:	f7fe fe17 	bl	8001218 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7fe fe13 	bl	8001218 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0c2      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002604:	4b41      	ldr	r3, [pc, #260]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1ee      	bne.n	80025ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002610:	7dfb      	ldrb	r3, [r7, #23]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d105      	bne.n	8002622 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002616:	4b3d      	ldr	r3, [pc, #244]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a3c      	ldr	r2, [pc, #240]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 800261c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80ae 	beq.w	8002788 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800262c:	4b37      	ldr	r3, [pc, #220]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b08      	cmp	r3, #8
 8002636:	d06d      	beq.n	8002714 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d14b      	bne.n	80026d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002640:	4b32      	ldr	r3, [pc, #200]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a31      	ldr	r2, [pc, #196]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 8002646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800264a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fde4 	bl	8001218 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe fde0 	bl	8001218 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e091      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002666:	4b29      	ldr	r3, [pc, #164]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69da      	ldr	r2, [r3, #28]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	019b      	lsls	r3, r3, #6
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	3b01      	subs	r3, #1
 800268c:	041b      	lsls	r3, r3, #16
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	061b      	lsls	r3, r3, #24
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	071b      	lsls	r3, r3, #28
 800269e:	491b      	ldr	r1, [pc, #108]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a18      	ldr	r2, [pc, #96]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80026aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe fdb2 	bl	8001218 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fdae 	bl	8001218 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e05f      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x47c>
 80026d6:	e057      	b.n	8002788 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0b      	ldr	r2, [pc, #44]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 80026de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fe fd98 	bl	8001218 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ec:	f7fe fd94 	bl	8001218 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e045      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fe:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_RCC_OscConfig+0x4d0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x4b0>
 800270a:	e03d      	b.n	8002788 <HAL_RCC_OscConfig+0x54c>
 800270c:	40023800 	.word	0x40023800
 8002710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002714:	4b1f      	ldr	r3, [pc, #124]	; (8002794 <HAL_RCC_OscConfig+0x558>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d030      	beq.n	8002784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d129      	bne.n	8002784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d122      	bne.n	8002784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002744:	4013      	ands	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800274a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800274c:	4293      	cmp	r3, r2
 800274e:	d119      	bne.n	8002784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	3b01      	subs	r3, #1
 800275e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d10f      	bne.n	8002784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d107      	bne.n	8002784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800

08002798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0d0      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b0:	4b6a      	ldr	r3, [pc, #424]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d910      	bls.n	80027e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b67      	ldr	r3, [pc, #412]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 020f 	bic.w	r2, r3, #15
 80027c6:	4965      	ldr	r1, [pc, #404]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	4b63      	ldr	r3, [pc, #396]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0b8      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d020      	beq.n	800282e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f8:	4b59      	ldr	r3, [pc, #356]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4a58      	ldr	r2, [pc, #352]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 80027fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002802:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002810:	4b53      	ldr	r3, [pc, #332]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a52      	ldr	r2, [pc, #328]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 8002816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800281a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800281c:	4b50      	ldr	r3, [pc, #320]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	494d      	ldr	r1, [pc, #308]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d040      	beq.n	80028bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d107      	bne.n	8002852 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b47      	ldr	r3, [pc, #284]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d115      	bne.n	800287a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e07f      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285a:	4b41      	ldr	r3, [pc, #260]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e073      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286a:	4b3d      	ldr	r3, [pc, #244]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e06b      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800287a:	4b39      	ldr	r3, [pc, #228]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f023 0203 	bic.w	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4936      	ldr	r1, [pc, #216]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 8002888:	4313      	orrs	r3, r2
 800288a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800288c:	f7fe fcc4 	bl	8001218 <HAL_GetTick>
 8002890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002892:	e00a      	b.n	80028aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002894:	f7fe fcc0 	bl	8001218 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e053      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028aa:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 020c 	and.w	r2, r3, #12
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d1eb      	bne.n	8002894 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028bc:	4b27      	ldr	r3, [pc, #156]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d210      	bcs.n	80028ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b24      	ldr	r3, [pc, #144]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 020f 	bic.w	r2, r3, #15
 80028d2:	4922      	ldr	r1, [pc, #136]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b20      	ldr	r3, [pc, #128]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e032      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f8:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4916      	ldr	r1, [pc, #88]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 8002906:	4313      	orrs	r3, r2
 8002908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	490e      	ldr	r1, [pc, #56]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800292a:	f000 f821 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 800292e:	4602      	mov	r2, r0
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	490a      	ldr	r1, [pc, #40]	; (8002964 <HAL_RCC_ClockConfig+0x1cc>)
 800293c:	5ccb      	ldrb	r3, [r1, r3]
 800293e:	fa22 f303 	lsr.w	r3, r2, r3
 8002942:	4a09      	ldr	r2, [pc, #36]	; (8002968 <HAL_RCC_ClockConfig+0x1d0>)
 8002944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_RCC_ClockConfig+0x1d4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fc20 	bl	8001190 <HAL_InitTick>

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023c00 	.word	0x40023c00
 8002960:	40023800 	.word	0x40023800
 8002964:	080056d0 	.word	0x080056d0
 8002968:	20000000 	.word	0x20000000
 800296c:	20000004 	.word	0x20000004

08002970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002974:	b094      	sub	sp, #80	; 0x50
 8002976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	647b      	str	r3, [r7, #68]	; 0x44
 800297c:	2300      	movs	r3, #0
 800297e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002980:	2300      	movs	r3, #0
 8002982:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002988:	4b79      	ldr	r3, [pc, #484]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x200>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b08      	cmp	r3, #8
 8002992:	d00d      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x40>
 8002994:	2b08      	cmp	r3, #8
 8002996:	f200 80e1 	bhi.w	8002b5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x34>
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d003      	beq.n	80029aa <HAL_RCC_GetSysClockFreq+0x3a>
 80029a2:	e0db      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4b73      	ldr	r3, [pc, #460]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80029a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029a8:	e0db      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029aa:	4b73      	ldr	r3, [pc, #460]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x208>)
 80029ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ae:	e0d8      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b0:	4b6f      	ldr	r3, [pc, #444]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029b8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029ba:	4b6d      	ldr	r3, [pc, #436]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d063      	beq.n	8002a8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4b6a      	ldr	r3, [pc, #424]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	2200      	movs	r2, #0
 80029ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80029d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
 80029da:	2300      	movs	r3, #0
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
 80029de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029e2:	4622      	mov	r2, r4
 80029e4:	462b      	mov	r3, r5
 80029e6:	f04f 0000 	mov.w	r0, #0
 80029ea:	f04f 0100 	mov.w	r1, #0
 80029ee:	0159      	lsls	r1, r3, #5
 80029f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f4:	0150      	lsls	r0, r2, #5
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4621      	mov	r1, r4
 80029fc:	1a51      	subs	r1, r2, r1
 80029fe:	6139      	str	r1, [r7, #16]
 8002a00:	4629      	mov	r1, r5
 8002a02:	eb63 0301 	sbc.w	r3, r3, r1
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a14:	4659      	mov	r1, fp
 8002a16:	018b      	lsls	r3, r1, #6
 8002a18:	4651      	mov	r1, sl
 8002a1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a1e:	4651      	mov	r1, sl
 8002a20:	018a      	lsls	r2, r1, #6
 8002a22:	4651      	mov	r1, sl
 8002a24:	ebb2 0801 	subs.w	r8, r2, r1
 8002a28:	4659      	mov	r1, fp
 8002a2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a42:	4690      	mov	r8, r2
 8002a44:	4699      	mov	r9, r3
 8002a46:	4623      	mov	r3, r4
 8002a48:	eb18 0303 	adds.w	r3, r8, r3
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	462b      	mov	r3, r5
 8002a50:	eb49 0303 	adc.w	r3, r9, r3
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a62:	4629      	mov	r1, r5
 8002a64:	024b      	lsls	r3, r1, #9
 8002a66:	4621      	mov	r1, r4
 8002a68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	024a      	lsls	r2, r1, #9
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a76:	2200      	movs	r2, #0
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a80:	f7fd fc2e 	bl	80002e0 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4613      	mov	r3, r2
 8002a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a8c:	e058      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8e:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	099b      	lsrs	r3, r3, #6
 8002a94:	2200      	movs	r2, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	4611      	mov	r1, r2
 8002a9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a9e:	623b      	str	r3, [r7, #32]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	464b      	mov	r3, r9
 8002aac:	f04f 0000 	mov.w	r0, #0
 8002ab0:	f04f 0100 	mov.w	r1, #0
 8002ab4:	0159      	lsls	r1, r3, #5
 8002ab6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aba:	0150      	lsls	r0, r2, #5
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4641      	mov	r1, r8
 8002ac2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ac6:	4649      	mov	r1, r9
 8002ac8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ad8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002adc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ae0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ae4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	00eb      	lsls	r3, r5, #3
 8002af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002af6:	00e2      	lsls	r2, r4, #3
 8002af8:	4614      	mov	r4, r2
 8002afa:	461d      	mov	r5, r3
 8002afc:	4643      	mov	r3, r8
 8002afe:	18e3      	adds	r3, r4, r3
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	464b      	mov	r3, r9
 8002b04:	eb45 0303 	adc.w	r3, r5, r3
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b16:	4629      	mov	r1, r5
 8002b18:	028b      	lsls	r3, r1, #10
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b20:	4621      	mov	r1, r4
 8002b22:	028a      	lsls	r2, r1, #10
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	61fa      	str	r2, [r7, #28]
 8002b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b34:	f7fd fbd4 	bl	80002e0 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002b50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b5a:	e002      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3750      	adds	r7, #80	; 0x50
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	00f42400 	.word	0x00f42400
 8002b78:	007a1200 	.word	0x007a1200

08002b7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000000 	.word	0x20000000

08002b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b98:	f7ff fff0 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	0a9b      	lsrs	r3, r3, #10
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4903      	ldr	r1, [pc, #12]	; (8002bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	080056e0 	.word	0x080056e0

08002bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bc0:	f7ff ffdc 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	0b5b      	lsrs	r3, r3, #13
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4903      	ldr	r1, [pc, #12]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd2:	5ccb      	ldrb	r3, [r1, r3]
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	080056e0 	.word	0x080056e0

08002be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d012      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c0c:	4b69      	ldr	r3, [pc, #420]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4a68      	ldr	r2, [pc, #416]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c16:	6093      	str	r3, [r2, #8]
 8002c18:	4b66      	ldr	r3, [pc, #408]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c20:	4964      	ldr	r1, [pc, #400]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d017      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c3e:	4b5d      	ldr	r3, [pc, #372]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4c:	4959      	ldr	r1, [pc, #356]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d017      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c7a:	4b4e      	ldr	r3, [pc, #312]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	494a      	ldr	r1, [pc, #296]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c98:	d101      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 808b 	beq.w	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cc8:	4b3a      	ldr	r3, [pc, #232]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	4a39      	ldr	r2, [pc, #228]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd4:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ce0:	4b35      	ldr	r3, [pc, #212]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a34      	ldr	r2, [pc, #208]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cec:	f7fe fa94 	bl	8001218 <HAL_GetTick>
 8002cf0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf4:	f7fe fa90 	bl	8001218 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e38f      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d06:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d12:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d035      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d02e      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d30:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d3a:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d46:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a1a      	ldr	r2, [pc, #104]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d52:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d114      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe fa58 	bl	8001218 <HAL_GetTick>
 8002d68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fa54 	bl	8001218 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e351      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ee      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d9a:	d111      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002daa:	400b      	ands	r3, r1
 8002dac:	4901      	ldr	r1, [pc, #4]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
 8002db2:	e00b      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	0ffffcff 	.word	0x0ffffcff
 8002dc0:	4bac      	ldr	r3, [pc, #688]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4aab      	ldr	r2, [pc, #684]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dca:	6093      	str	r3, [r2, #8]
 8002dcc:	4ba9      	ldr	r3, [pc, #676]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd8:	49a6      	ldr	r1, [pc, #664]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d010      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dea:	4ba2      	ldr	r3, [pc, #648]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df0:	4aa0      	ldr	r2, [pc, #640]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002dfa:	4b9e      	ldr	r3, [pc, #632]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	499b      	ldr	r1, [pc, #620]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e18:	4b96      	ldr	r3, [pc, #600]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e26:	4993      	ldr	r1, [pc, #588]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e3a:	4b8e      	ldr	r3, [pc, #568]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e48:	498a      	ldr	r1, [pc, #552]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e5c:	4b85      	ldr	r3, [pc, #532]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e6a:	4982      	ldr	r1, [pc, #520]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e7e:	4b7d      	ldr	r3, [pc, #500]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4979      	ldr	r1, [pc, #484]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea0:	4b74      	ldr	r3, [pc, #464]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	4971      	ldr	r1, [pc, #452]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ec2:	4b6c      	ldr	r3, [pc, #432]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f023 020c 	bic.w	r2, r3, #12
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed0:	4968      	ldr	r1, [pc, #416]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ee4:	4b63      	ldr	r3, [pc, #396]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef2:	4960      	ldr	r1, [pc, #384]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f06:	4b5b      	ldr	r3, [pc, #364]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f14:	4957      	ldr	r1, [pc, #348]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f28:	4b52      	ldr	r3, [pc, #328]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f36:	494f      	ldr	r1, [pc, #316]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	4946      	ldr	r1, [pc, #280]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f6c:	4b41      	ldr	r3, [pc, #260]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	493e      	ldr	r1, [pc, #248]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f8e:	4b39      	ldr	r3, [pc, #228]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9c:	4935      	ldr	r1, [pc, #212]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fb0:	4b30      	ldr	r3, [pc, #192]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fbe:	492d      	ldr	r1, [pc, #180]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d011      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fd2:	4b28      	ldr	r3, [pc, #160]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fe0:	4924      	ldr	r1, [pc, #144]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003002:	2301      	movs	r3, #1
 8003004:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003020:	4914      	ldr	r1, [pc, #80]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00b      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003044:	490b      	ldr	r1, [pc, #44]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00f      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003068:	4902      	ldr	r1, [pc, #8]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003070:	e002      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003084:	4b8a      	ldr	r3, [pc, #552]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800308a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	4986      	ldr	r1, [pc, #536]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00b      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030a8:	4b81      	ldr	r3, [pc, #516]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030b8:	497d      	ldr	r1, [pc, #500]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d006      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80d6 	beq.w	8003280 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030d4:	4b76      	ldr	r3, [pc, #472]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a75      	ldr	r2, [pc, #468]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e0:	f7fe f89a 	bl	8001218 <HAL_GetTick>
 80030e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030e8:	f7fe f896 	bl	8001218 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e195      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030fa:	4b6d      	ldr	r3, [pc, #436]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d021      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	2b00      	cmp	r3, #0
 8003118:	d11d      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800311a:	4b65      	ldr	r3, [pc, #404]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003128:	4b61      	ldr	r3, [pc, #388]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312e:	0e1b      	lsrs	r3, r3, #24
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	019a      	lsls	r2, r3, #6
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	041b      	lsls	r3, r3, #16
 8003140:	431a      	orrs	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	061b      	lsls	r3, r3, #24
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	071b      	lsls	r3, r3, #28
 800314e:	4958      	ldr	r1, [pc, #352]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d004      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003174:	2b00      	cmp	r3, #0
 8003176:	d02e      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003180:	d129      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003182:	4b4b      	ldr	r3, [pc, #300]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003190:	4b47      	ldr	r3, [pc, #284]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003196:	0f1b      	lsrs	r3, r3, #28
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	019a      	lsls	r2, r3, #6
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	041b      	lsls	r3, r3, #16
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	061b      	lsls	r3, r3, #24
 80031b0:	431a      	orrs	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	071b      	lsls	r3, r3, #28
 80031b6:	493e      	ldr	r1, [pc, #248]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031be:	4b3c      	ldr	r3, [pc, #240]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c4:	f023 021f 	bic.w	r2, r3, #31
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	3b01      	subs	r3, #1
 80031ce:	4938      	ldr	r1, [pc, #224]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d01d      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031e2:	4b33      	ldr	r3, [pc, #204]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e8:	0e1b      	lsrs	r3, r3, #24
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031f0:	4b2f      	ldr	r3, [pc, #188]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f6:	0f1b      	lsrs	r3, r3, #28
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	019a      	lsls	r2, r3, #6
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	041b      	lsls	r3, r3, #16
 800320a:	431a      	orrs	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	061b      	lsls	r3, r3, #24
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	071b      	lsls	r3, r3, #28
 8003216:	4926      	ldr	r1, [pc, #152]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d011      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	019a      	lsls	r2, r3, #6
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	041b      	lsls	r3, r3, #16
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	061b      	lsls	r3, r3, #24
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	071b      	lsls	r3, r3, #28
 8003246:	491a      	ldr	r1, [pc, #104]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800324e:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003254:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325a:	f7fd ffdd 	bl	8001218 <HAL_GetTick>
 800325e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003262:	f7fd ffd9 	bl	8001218 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b64      	cmp	r3, #100	; 0x64
 800326e:	d901      	bls.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e0d8      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003274:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b01      	cmp	r3, #1
 8003284:	f040 80ce 	bne.w	8003424 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a08      	ldr	r2, [pc, #32]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800328e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003294:	f7fd ffc0 	bl	8001218 <HAL_GetTick>
 8003298:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800329a:	e00b      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800329c:	f7fd ffbc 	bl	8001218 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d904      	bls.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0bb      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032b4:	4b5e      	ldr	r3, [pc, #376]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c0:	d0ec      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d02e      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d12a      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032ea:	4b51      	ldr	r3, [pc, #324]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f0:	0c1b      	lsrs	r3, r3, #16
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032f8:	4b4d      	ldr	r3, [pc, #308]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	0f1b      	lsrs	r3, r3, #28
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	019a      	lsls	r2, r3, #6
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	041b      	lsls	r3, r3, #16
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	061b      	lsls	r3, r3, #24
 8003318:	431a      	orrs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	071b      	lsls	r3, r3, #28
 800331e:	4944      	ldr	r1, [pc, #272]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003326:	4b42      	ldr	r3, [pc, #264]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800332c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	3b01      	subs	r3, #1
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	493d      	ldr	r1, [pc, #244]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d022      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003354:	d11d      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003356:	4b36      	ldr	r3, [pc, #216]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	0e1b      	lsrs	r3, r3, #24
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003364:	4b32      	ldr	r3, [pc, #200]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	0f1b      	lsrs	r3, r3, #28
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	019a      	lsls	r2, r3, #6
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	041b      	lsls	r3, r3, #16
 800337e:	431a      	orrs	r2, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	431a      	orrs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	071b      	lsls	r3, r3, #28
 800338a:	4929      	ldr	r1, [pc, #164]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d028      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800339e:	4b24      	ldr	r3, [pc, #144]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	0e1b      	lsrs	r3, r3, #24
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033ac:	4b20      	ldr	r3, [pc, #128]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	0c1b      	lsrs	r3, r3, #16
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	019a      	lsls	r2, r3, #6
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	041b      	lsls	r3, r3, #16
 80033c4:	431a      	orrs	r2, r3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	071b      	lsls	r3, r3, #28
 80033d2:	4917      	ldr	r1, [pc, #92]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033da:	4b15      	ldr	r3, [pc, #84]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	4911      	ldr	r1, [pc, #68]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033f0:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a0e      	ldr	r2, [pc, #56]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033fc:	f7fd ff0c 	bl	8001218 <HAL_GetTick>
 8003400:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003404:	f7fd ff08 	bl	8001218 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e007      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800341e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003422:	d1ef      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800

08003434 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e09d      	b.n	8003582 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	2b00      	cmp	r3, #0
 800344c:	d108      	bne.n	8003460 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003456:	d009      	beq.n	800346c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	61da      	str	r2, [r3, #28]
 800345e:	e005      	b.n	800346c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fd fc26 	bl	8000cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ac:	d902      	bls.n	80034b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e002      	b.n	80034ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034c2:	d007      	beq.n	80034d4 <HAL_SPI_Init+0xa0>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034cc:	d002      	beq.n	80034d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003516:	ea42 0103 	orr.w	r1, r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	0c1b      	lsrs	r3, r3, #16
 8003530:	f003 0204 	and.w	r2, r3, #4
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003550:	ea42 0103 	orr.w	r1, r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b088      	sub	sp, #32
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	603b      	str	r3, [r7, #0]
 8003596:	4613      	mov	r3, r2
 8003598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_SPI_Transmit+0x22>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e158      	b.n	800385e <HAL_SPI_Transmit+0x2d4>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035b4:	f7fd fe30 	bl	8001218 <HAL_GetTick>
 80035b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d002      	beq.n	80035d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035ca:	2302      	movs	r3, #2
 80035cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035ce:	e13d      	b.n	800384c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_SPI_Transmit+0x52>
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d102      	bne.n	80035e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035e0:	e134      	b.n	800384c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2203      	movs	r2, #3
 80035e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	88fa      	ldrh	r2, [r7, #6]
 80035fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800362c:	d10f      	bne.n	800364e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800364c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003658:	2b40      	cmp	r3, #64	; 0x40
 800365a:	d007      	beq.n	800366c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800366a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003674:	d94b      	bls.n	800370e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_SPI_Transmit+0xfa>
 800367e:	8afb      	ldrh	r3, [r7, #22]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d13e      	bne.n	8003702 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	881a      	ldrh	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	1c9a      	adds	r2, r3, #2
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036a8:	e02b      	b.n	8003702 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d112      	bne.n	80036de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	881a      	ldrh	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	1c9a      	adds	r2, r3, #2
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036dc:	e011      	b.n	8003702 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036de:	f7fd fd9b 	bl	8001218 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d803      	bhi.n	80036f6 <HAL_SPI_Transmit+0x16c>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d102      	bne.n	80036fc <HAL_SPI_Transmit+0x172>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d102      	bne.n	8003702 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003700:	e0a4      	b.n	800384c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ce      	bne.n	80036aa <HAL_SPI_Transmit+0x120>
 800370c:	e07c      	b.n	8003808 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_SPI_Transmit+0x192>
 8003716:	8afb      	ldrh	r3, [r7, #22]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d170      	bne.n	80037fe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d912      	bls.n	800374c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	1c9a      	adds	r2, r3, #2
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b02      	subs	r3, #2
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	87da      	strh	r2, [r3, #62]	; 0x3e
 800374a:	e058      	b.n	80037fe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	7812      	ldrb	r2, [r2, #0]
 8003758:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003772:	e044      	b.n	80037fe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d12b      	bne.n	80037da <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b01      	cmp	r3, #1
 800378a:	d912      	bls.n	80037b2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	881a      	ldrh	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	1c9a      	adds	r2, r3, #2
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b02      	subs	r3, #2
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037b0:	e025      	b.n	80037fe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	330c      	adds	r3, #12
 80037bc:	7812      	ldrb	r2, [r2, #0]
 80037be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037d8:	e011      	b.n	80037fe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037da:	f7fd fd1d 	bl	8001218 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d803      	bhi.n	80037f2 <HAL_SPI_Transmit+0x268>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d102      	bne.n	80037f8 <HAL_SPI_Transmit+0x26e>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037fc:	e026      	b.n	800384c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1b5      	bne.n	8003774 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	6839      	ldr	r1, [r7, #0]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fa5d 	bl	8003ccc <SPI_EndRxTxTransaction>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	77fb      	strb	r3, [r7, #31]
 8003848:	e000      	b.n	800384c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800384a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800385c:	7ffb      	ldrb	r3, [r7, #31]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10e      	bne.n	80038a8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003890:	2b00      	cmp	r3, #0
 8003892:	d009      	beq.n	80038a8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d004      	beq.n	80038a8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	4798      	blx	r3
    return;
 80038a6:	e0ce      	b.n	8003a46 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_SPI_IRQHandler+0x5e>
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
    return;
 80038c4:	e0bf      	b.n	8003a46 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <HAL_SPI_IRQHandler+0x7e>
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d105      	bne.n	80038e6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80b0 	beq.w	8003a46 <HAL_SPI_IRQHandler+0x1de>
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80aa 	beq.w	8003a46 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d023      	beq.n	8003944 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b03      	cmp	r3, #3
 8003906:	d011      	beq.n	800392c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390c:	f043 0204 	orr.w	r2, r3, #4
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	e00b      	b.n	8003944 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]
        return;
 8003942:	e080      	b.n	8003a46 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	d014      	beq.n	8003978 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003952:	f043 0201 	orr.w	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00c      	beq.n	800399c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003986:	f043 0208 	orr.w	r2, r3, #8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d04f      	beq.n	8003a44 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039b2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <HAL_SPI_IRQHandler+0x168>
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d034      	beq.n	8003a3a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0203 	bic.w	r2, r2, #3
 80039de:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d011      	beq.n	8003a0c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	4a17      	ldr	r2, [pc, #92]	; (8003a4c <HAL_SPI_IRQHandler+0x1e4>)
 80039ee:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fd fd50 	bl	800149a <HAL_DMA_Abort_IT>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d016      	beq.n	8003a42 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	4a0c      	ldr	r2, [pc, #48]	; (8003a4c <HAL_SPI_IRQHandler+0x1e4>)
 8003a1a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fd fd3a 	bl	800149a <HAL_DMA_Abort_IT>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003a38:	e003      	b.n	8003a42 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f808 	bl	8003a50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a40:	e000      	b.n	8003a44 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003a42:	bf00      	nop
    return;
 8003a44:	bf00      	nop
  }
}
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	08003a65 	.word	0x08003a65

08003a50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f7ff ffe5 	bl	8003a50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003aa0:	f7fd fbba 	bl	8001218 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	4413      	add	r3, r2
 8003aae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ab0:	f7fd fbb2 	bl	8001218 <HAL_GetTick>
 8003ab4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ab6:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	015b      	lsls	r3, r3, #5
 8003abc:	0d1b      	lsrs	r3, r3, #20
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	fb02 f303 	mul.w	r3, r2, r3
 8003ac4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ac6:	e054      	b.n	8003b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ace:	d050      	beq.n	8003b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ad0:	f7fd fba2 	bl	8001218 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d902      	bls.n	8003ae6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d13d      	bne.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003af4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afe:	d111      	bne.n	8003b24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b08:	d004      	beq.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b12:	d107      	bne.n	8003b24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2c:	d10f      	bne.n	8003b4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e017      	b.n	8003b92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	bf0c      	ite	eq
 8003b82:	2301      	moveq	r3, #1
 8003b84:	2300      	movne	r3, #0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	461a      	mov	r2, r3
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d19b      	bne.n	8003ac8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000000 	.word	0x20000000

08003ba0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	; 0x28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bb2:	f7fd fb31 	bl	8001218 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003bc2:	f7fd fb29 	bl	8001218 <HAL_GetTick>
 8003bc6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	330c      	adds	r3, #12
 8003bce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003bd0:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	00da      	lsls	r2, r3, #3
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	0d1b      	lsrs	r3, r3, #20
 8003be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003be8:	e060      	b.n	8003cac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bf0:	d107      	bne.n	8003c02 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d104      	bne.n	8003c02 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c08:	d050      	beq.n	8003cac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c0a:	f7fd fb05 	bl	8001218 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d902      	bls.n	8003c20 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d13d      	bne.n	8003c9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c38:	d111      	bne.n	8003c5e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c42:	d004      	beq.n	8003c4e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4c:	d107      	bne.n	8003c5e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c66:	d10f      	bne.n	8003c88 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e010      	b.n	8003cbe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d196      	bne.n	8003bea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3728      	adds	r7, #40	; 0x28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000000 	.word	0x20000000

08003ccc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7ff ff5b 	bl	8003ba0 <SPI_WaitFifoStateUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e046      	b.n	8003d8e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d00:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <SPI_EndRxTxTransaction+0xcc>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a25      	ldr	r2, [pc, #148]	; (8003d9c <SPI_EndRxTxTransaction+0xd0>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	0d5b      	lsrs	r3, r3, #21
 8003d0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d10:	fb02 f303 	mul.w	r3, r2, r3
 8003d14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1e:	d112      	bne.n	8003d46 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2200      	movs	r2, #0
 8003d28:	2180      	movs	r1, #128	; 0x80
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f7ff feb0 	bl	8003a90 <SPI_WaitFlagStateUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d016      	beq.n	8003d64 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3a:	f043 0220 	orr.w	r2, r3, #32
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e023      	b.n	8003d8e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5c:	2b80      	cmp	r3, #128	; 0x80
 8003d5e:	d0f2      	beq.n	8003d46 <SPI_EndRxTxTransaction+0x7a>
 8003d60:	e000      	b.n	8003d64 <SPI_EndRxTxTransaction+0x98>
        break;
 8003d62:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff ff15 	bl	8003ba0 <SPI_WaitFifoStateUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d007      	beq.n	8003d8c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e000      	b.n	8003d8e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000000 	.word	0x20000000
 8003d9c:	165e9f81 	.word	0x165e9f81

08003da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e040      	b.n	8003e34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fc fff2 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2224      	movs	r2, #36	; 0x24
 8003dcc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0201 	bic.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8b0 	bl	8003f44 <UART_SetConfig>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e022      	b.n	8003e34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fb08 	bl	800440c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fb8f 	bl	8004550 <UART_CheckIdleState>
 8003e32:	4603      	mov	r3, r0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	; 0x28
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d171      	bne.n	8003f38 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_UART_Transmit+0x24>
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e06a      	b.n	8003f3a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2221      	movs	r2, #33	; 0x21
 8003e70:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e72:	f7fd f9d1 	bl	8001218 <HAL_GetTick>
 8003e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	88fa      	ldrh	r2, [r7, #6]
 8003e7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e90:	d108      	bne.n	8003ea4 <HAL_UART_Transmit+0x68>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d104      	bne.n	8003ea4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	e003      	b.n	8003eac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003eac:	e02c      	b.n	8003f08 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2180      	movs	r1, #128	; 0x80
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fb96 	bl	80045ea <UART_WaitOnFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e038      	b.n	8003f3a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10b      	bne.n	8003ee6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003edc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	e007      	b.n	8003ef6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	781a      	ldrb	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1cc      	bne.n	8003eae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2140      	movs	r1, #64	; 0x40
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 fb63 	bl	80045ea <UART_WaitOnFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e005      	b.n	8003f3a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4ba6      	ldr	r3, [pc, #664]	; (8004208 <UART_SetConfig+0x2c4>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6812      	ldr	r2, [r2, #0]
 8003f76:	6979      	ldr	r1, [r7, #20]
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a94      	ldr	r2, [pc, #592]	; (800420c <UART_SetConfig+0x2c8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d120      	bne.n	8004002 <UART_SetConfig+0xbe>
 8003fc0:	4b93      	ldr	r3, [pc, #588]	; (8004210 <UART_SetConfig+0x2cc>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d816      	bhi.n	8003ffc <UART_SetConfig+0xb8>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <UART_SetConfig+0x90>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08003fe5 	.word	0x08003fe5
 8003fd8:	08003ff1 	.word	0x08003ff1
 8003fdc:	08003feb 	.word	0x08003feb
 8003fe0:	08003ff7 	.word	0x08003ff7
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	77fb      	strb	r3, [r7, #31]
 8003fe8:	e150      	b.n	800428c <UART_SetConfig+0x348>
 8003fea:	2302      	movs	r3, #2
 8003fec:	77fb      	strb	r3, [r7, #31]
 8003fee:	e14d      	b.n	800428c <UART_SetConfig+0x348>
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e14a      	b.n	800428c <UART_SetConfig+0x348>
 8003ff6:	2308      	movs	r3, #8
 8003ff8:	77fb      	strb	r3, [r7, #31]
 8003ffa:	e147      	b.n	800428c <UART_SetConfig+0x348>
 8003ffc:	2310      	movs	r3, #16
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e144      	b.n	800428c <UART_SetConfig+0x348>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a83      	ldr	r2, [pc, #524]	; (8004214 <UART_SetConfig+0x2d0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d132      	bne.n	8004072 <UART_SetConfig+0x12e>
 800400c:	4b80      	ldr	r3, [pc, #512]	; (8004210 <UART_SetConfig+0x2cc>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	2b0c      	cmp	r3, #12
 8004018:	d828      	bhi.n	800406c <UART_SetConfig+0x128>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0xdc>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004055 	.word	0x08004055
 8004024:	0800406d 	.word	0x0800406d
 8004028:	0800406d 	.word	0x0800406d
 800402c:	0800406d 	.word	0x0800406d
 8004030:	08004061 	.word	0x08004061
 8004034:	0800406d 	.word	0x0800406d
 8004038:	0800406d 	.word	0x0800406d
 800403c:	0800406d 	.word	0x0800406d
 8004040:	0800405b 	.word	0x0800405b
 8004044:	0800406d 	.word	0x0800406d
 8004048:	0800406d 	.word	0x0800406d
 800404c:	0800406d 	.word	0x0800406d
 8004050:	08004067 	.word	0x08004067
 8004054:	2300      	movs	r3, #0
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e118      	b.n	800428c <UART_SetConfig+0x348>
 800405a:	2302      	movs	r3, #2
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e115      	b.n	800428c <UART_SetConfig+0x348>
 8004060:	2304      	movs	r3, #4
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e112      	b.n	800428c <UART_SetConfig+0x348>
 8004066:	2308      	movs	r3, #8
 8004068:	77fb      	strb	r3, [r7, #31]
 800406a:	e10f      	b.n	800428c <UART_SetConfig+0x348>
 800406c:	2310      	movs	r3, #16
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e10c      	b.n	800428c <UART_SetConfig+0x348>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a68      	ldr	r2, [pc, #416]	; (8004218 <UART_SetConfig+0x2d4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d120      	bne.n	80040be <UART_SetConfig+0x17a>
 800407c:	4b64      	ldr	r3, [pc, #400]	; (8004210 <UART_SetConfig+0x2cc>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004086:	2b30      	cmp	r3, #48	; 0x30
 8004088:	d013      	beq.n	80040b2 <UART_SetConfig+0x16e>
 800408a:	2b30      	cmp	r3, #48	; 0x30
 800408c:	d814      	bhi.n	80040b8 <UART_SetConfig+0x174>
 800408e:	2b20      	cmp	r3, #32
 8004090:	d009      	beq.n	80040a6 <UART_SetConfig+0x162>
 8004092:	2b20      	cmp	r3, #32
 8004094:	d810      	bhi.n	80040b8 <UART_SetConfig+0x174>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <UART_SetConfig+0x15c>
 800409a:	2b10      	cmp	r3, #16
 800409c:	d006      	beq.n	80040ac <UART_SetConfig+0x168>
 800409e:	e00b      	b.n	80040b8 <UART_SetConfig+0x174>
 80040a0:	2300      	movs	r3, #0
 80040a2:	77fb      	strb	r3, [r7, #31]
 80040a4:	e0f2      	b.n	800428c <UART_SetConfig+0x348>
 80040a6:	2302      	movs	r3, #2
 80040a8:	77fb      	strb	r3, [r7, #31]
 80040aa:	e0ef      	b.n	800428c <UART_SetConfig+0x348>
 80040ac:	2304      	movs	r3, #4
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e0ec      	b.n	800428c <UART_SetConfig+0x348>
 80040b2:	2308      	movs	r3, #8
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e0e9      	b.n	800428c <UART_SetConfig+0x348>
 80040b8:	2310      	movs	r3, #16
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e0e6      	b.n	800428c <UART_SetConfig+0x348>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a56      	ldr	r2, [pc, #344]	; (800421c <UART_SetConfig+0x2d8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d120      	bne.n	800410a <UART_SetConfig+0x1c6>
 80040c8:	4b51      	ldr	r3, [pc, #324]	; (8004210 <UART_SetConfig+0x2cc>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040d2:	2bc0      	cmp	r3, #192	; 0xc0
 80040d4:	d013      	beq.n	80040fe <UART_SetConfig+0x1ba>
 80040d6:	2bc0      	cmp	r3, #192	; 0xc0
 80040d8:	d814      	bhi.n	8004104 <UART_SetConfig+0x1c0>
 80040da:	2b80      	cmp	r3, #128	; 0x80
 80040dc:	d009      	beq.n	80040f2 <UART_SetConfig+0x1ae>
 80040de:	2b80      	cmp	r3, #128	; 0x80
 80040e0:	d810      	bhi.n	8004104 <UART_SetConfig+0x1c0>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <UART_SetConfig+0x1a8>
 80040e6:	2b40      	cmp	r3, #64	; 0x40
 80040e8:	d006      	beq.n	80040f8 <UART_SetConfig+0x1b4>
 80040ea:	e00b      	b.n	8004104 <UART_SetConfig+0x1c0>
 80040ec:	2300      	movs	r3, #0
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e0cc      	b.n	800428c <UART_SetConfig+0x348>
 80040f2:	2302      	movs	r3, #2
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	e0c9      	b.n	800428c <UART_SetConfig+0x348>
 80040f8:	2304      	movs	r3, #4
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e0c6      	b.n	800428c <UART_SetConfig+0x348>
 80040fe:	2308      	movs	r3, #8
 8004100:	77fb      	strb	r3, [r7, #31]
 8004102:	e0c3      	b.n	800428c <UART_SetConfig+0x348>
 8004104:	2310      	movs	r3, #16
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	e0c0      	b.n	800428c <UART_SetConfig+0x348>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a44      	ldr	r2, [pc, #272]	; (8004220 <UART_SetConfig+0x2dc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d125      	bne.n	8004160 <UART_SetConfig+0x21c>
 8004114:	4b3e      	ldr	r3, [pc, #248]	; (8004210 <UART_SetConfig+0x2cc>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004122:	d017      	beq.n	8004154 <UART_SetConfig+0x210>
 8004124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004128:	d817      	bhi.n	800415a <UART_SetConfig+0x216>
 800412a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412e:	d00b      	beq.n	8004148 <UART_SetConfig+0x204>
 8004130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004134:	d811      	bhi.n	800415a <UART_SetConfig+0x216>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <UART_SetConfig+0x1fe>
 800413a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413e:	d006      	beq.n	800414e <UART_SetConfig+0x20a>
 8004140:	e00b      	b.n	800415a <UART_SetConfig+0x216>
 8004142:	2300      	movs	r3, #0
 8004144:	77fb      	strb	r3, [r7, #31]
 8004146:	e0a1      	b.n	800428c <UART_SetConfig+0x348>
 8004148:	2302      	movs	r3, #2
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e09e      	b.n	800428c <UART_SetConfig+0x348>
 800414e:	2304      	movs	r3, #4
 8004150:	77fb      	strb	r3, [r7, #31]
 8004152:	e09b      	b.n	800428c <UART_SetConfig+0x348>
 8004154:	2308      	movs	r3, #8
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e098      	b.n	800428c <UART_SetConfig+0x348>
 800415a:	2310      	movs	r3, #16
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	e095      	b.n	800428c <UART_SetConfig+0x348>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a2f      	ldr	r2, [pc, #188]	; (8004224 <UART_SetConfig+0x2e0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d125      	bne.n	80041b6 <UART_SetConfig+0x272>
 800416a:	4b29      	ldr	r3, [pc, #164]	; (8004210 <UART_SetConfig+0x2cc>)
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004170:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004174:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004178:	d017      	beq.n	80041aa <UART_SetConfig+0x266>
 800417a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800417e:	d817      	bhi.n	80041b0 <UART_SetConfig+0x26c>
 8004180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004184:	d00b      	beq.n	800419e <UART_SetConfig+0x25a>
 8004186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418a:	d811      	bhi.n	80041b0 <UART_SetConfig+0x26c>
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <UART_SetConfig+0x254>
 8004190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004194:	d006      	beq.n	80041a4 <UART_SetConfig+0x260>
 8004196:	e00b      	b.n	80041b0 <UART_SetConfig+0x26c>
 8004198:	2301      	movs	r3, #1
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e076      	b.n	800428c <UART_SetConfig+0x348>
 800419e:	2302      	movs	r3, #2
 80041a0:	77fb      	strb	r3, [r7, #31]
 80041a2:	e073      	b.n	800428c <UART_SetConfig+0x348>
 80041a4:	2304      	movs	r3, #4
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	e070      	b.n	800428c <UART_SetConfig+0x348>
 80041aa:	2308      	movs	r3, #8
 80041ac:	77fb      	strb	r3, [r7, #31]
 80041ae:	e06d      	b.n	800428c <UART_SetConfig+0x348>
 80041b0:	2310      	movs	r3, #16
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e06a      	b.n	800428c <UART_SetConfig+0x348>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <UART_SetConfig+0x2e4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d138      	bne.n	8004232 <UART_SetConfig+0x2ee>
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <UART_SetConfig+0x2cc>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041ce:	d017      	beq.n	8004200 <UART_SetConfig+0x2bc>
 80041d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041d4:	d82a      	bhi.n	800422c <UART_SetConfig+0x2e8>
 80041d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041da:	d00b      	beq.n	80041f4 <UART_SetConfig+0x2b0>
 80041dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e0:	d824      	bhi.n	800422c <UART_SetConfig+0x2e8>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <UART_SetConfig+0x2aa>
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ea:	d006      	beq.n	80041fa <UART_SetConfig+0x2b6>
 80041ec:	e01e      	b.n	800422c <UART_SetConfig+0x2e8>
 80041ee:	2300      	movs	r3, #0
 80041f0:	77fb      	strb	r3, [r7, #31]
 80041f2:	e04b      	b.n	800428c <UART_SetConfig+0x348>
 80041f4:	2302      	movs	r3, #2
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e048      	b.n	800428c <UART_SetConfig+0x348>
 80041fa:	2304      	movs	r3, #4
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e045      	b.n	800428c <UART_SetConfig+0x348>
 8004200:	2308      	movs	r3, #8
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e042      	b.n	800428c <UART_SetConfig+0x348>
 8004206:	bf00      	nop
 8004208:	efff69f3 	.word	0xefff69f3
 800420c:	40011000 	.word	0x40011000
 8004210:	40023800 	.word	0x40023800
 8004214:	40004400 	.word	0x40004400
 8004218:	40004800 	.word	0x40004800
 800421c:	40004c00 	.word	0x40004c00
 8004220:	40005000 	.word	0x40005000
 8004224:	40011400 	.word	0x40011400
 8004228:	40007800 	.word	0x40007800
 800422c:	2310      	movs	r3, #16
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e02c      	b.n	800428c <UART_SetConfig+0x348>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a72      	ldr	r2, [pc, #456]	; (8004400 <UART_SetConfig+0x4bc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d125      	bne.n	8004288 <UART_SetConfig+0x344>
 800423c:	4b71      	ldr	r3, [pc, #452]	; (8004404 <UART_SetConfig+0x4c0>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004246:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800424a:	d017      	beq.n	800427c <UART_SetConfig+0x338>
 800424c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004250:	d817      	bhi.n	8004282 <UART_SetConfig+0x33e>
 8004252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004256:	d00b      	beq.n	8004270 <UART_SetConfig+0x32c>
 8004258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425c:	d811      	bhi.n	8004282 <UART_SetConfig+0x33e>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <UART_SetConfig+0x326>
 8004262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004266:	d006      	beq.n	8004276 <UART_SetConfig+0x332>
 8004268:	e00b      	b.n	8004282 <UART_SetConfig+0x33e>
 800426a:	2300      	movs	r3, #0
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e00d      	b.n	800428c <UART_SetConfig+0x348>
 8004270:	2302      	movs	r3, #2
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e00a      	b.n	800428c <UART_SetConfig+0x348>
 8004276:	2304      	movs	r3, #4
 8004278:	77fb      	strb	r3, [r7, #31]
 800427a:	e007      	b.n	800428c <UART_SetConfig+0x348>
 800427c:	2308      	movs	r3, #8
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e004      	b.n	800428c <UART_SetConfig+0x348>
 8004282:	2310      	movs	r3, #16
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e001      	b.n	800428c <UART_SetConfig+0x348>
 8004288:	2310      	movs	r3, #16
 800428a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004294:	d15b      	bne.n	800434e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004296:	7ffb      	ldrb	r3, [r7, #31]
 8004298:	2b08      	cmp	r3, #8
 800429a:	d828      	bhi.n	80042ee <UART_SetConfig+0x3aa>
 800429c:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <UART_SetConfig+0x360>)
 800429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a2:	bf00      	nop
 80042a4:	080042c9 	.word	0x080042c9
 80042a8:	080042d1 	.word	0x080042d1
 80042ac:	080042d9 	.word	0x080042d9
 80042b0:	080042ef 	.word	0x080042ef
 80042b4:	080042df 	.word	0x080042df
 80042b8:	080042ef 	.word	0x080042ef
 80042bc:	080042ef 	.word	0x080042ef
 80042c0:	080042ef 	.word	0x080042ef
 80042c4:	080042e7 	.word	0x080042e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042c8:	f7fe fc64 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 80042cc:	61b8      	str	r0, [r7, #24]
        break;
 80042ce:	e013      	b.n	80042f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d0:	f7fe fc74 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 80042d4:	61b8      	str	r0, [r7, #24]
        break;
 80042d6:	e00f      	b.n	80042f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d8:	4b4b      	ldr	r3, [pc, #300]	; (8004408 <UART_SetConfig+0x4c4>)
 80042da:	61bb      	str	r3, [r7, #24]
        break;
 80042dc:	e00c      	b.n	80042f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042de:	f7fe fb47 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 80042e2:	61b8      	str	r0, [r7, #24]
        break;
 80042e4:	e008      	b.n	80042f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ea:	61bb      	str	r3, [r7, #24]
        break;
 80042ec:	e004      	b.n	80042f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	77bb      	strb	r3, [r7, #30]
        break;
 80042f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d074      	beq.n	80043e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	005a      	lsls	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	085b      	lsrs	r3, r3, #1
 8004308:	441a      	add	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004312:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b0f      	cmp	r3, #15
 8004318:	d916      	bls.n	8004348 <UART_SetConfig+0x404>
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004320:	d212      	bcs.n	8004348 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f023 030f 	bic.w	r3, r3, #15
 800432a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	b29b      	uxth	r3, r3
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	b29a      	uxth	r2, r3
 8004338:	89fb      	ldrh	r3, [r7, #14]
 800433a:	4313      	orrs	r3, r2
 800433c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	89fa      	ldrh	r2, [r7, #14]
 8004344:	60da      	str	r2, [r3, #12]
 8004346:	e04f      	b.n	80043e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	77bb      	strb	r3, [r7, #30]
 800434c:	e04c      	b.n	80043e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800434e:	7ffb      	ldrb	r3, [r7, #31]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d828      	bhi.n	80043a6 <UART_SetConfig+0x462>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <UART_SetConfig+0x418>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	08004381 	.word	0x08004381
 8004360:	08004389 	.word	0x08004389
 8004364:	08004391 	.word	0x08004391
 8004368:	080043a7 	.word	0x080043a7
 800436c:	08004397 	.word	0x08004397
 8004370:	080043a7 	.word	0x080043a7
 8004374:	080043a7 	.word	0x080043a7
 8004378:	080043a7 	.word	0x080043a7
 800437c:	0800439f 	.word	0x0800439f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004380:	f7fe fc08 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8004384:	61b8      	str	r0, [r7, #24]
        break;
 8004386:	e013      	b.n	80043b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004388:	f7fe fc18 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 800438c:	61b8      	str	r0, [r7, #24]
        break;
 800438e:	e00f      	b.n	80043b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004390:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <UART_SetConfig+0x4c4>)
 8004392:	61bb      	str	r3, [r7, #24]
        break;
 8004394:	e00c      	b.n	80043b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004396:	f7fe faeb 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 800439a:	61b8      	str	r0, [r7, #24]
        break;
 800439c:	e008      	b.n	80043b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a2:	61bb      	str	r3, [r7, #24]
        break;
 80043a4:	e004      	b.n	80043b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	77bb      	strb	r3, [r7, #30]
        break;
 80043ae:	bf00      	nop
    }

    if (pclk != 0U)
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d018      	beq.n	80043e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	085a      	lsrs	r2, r3, #1
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	441a      	add	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b0f      	cmp	r3, #15
 80043ce:	d909      	bls.n	80043e4 <UART_SetConfig+0x4a0>
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d6:	d205      	bcs.n	80043e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	b29a      	uxth	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	e001      	b.n	80043e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40007c00 	.word	0x40007c00
 8004404:	40023800 	.word	0x40023800
 8004408:	00f42400 	.word	0x00f42400

0800440c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	f003 0320 	and.w	r3, r3, #32
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01a      	beq.n	8004522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800450a:	d10a      	bne.n	8004522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	605a      	str	r2, [r3, #4]
  }
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af02      	add	r7, sp, #8
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004560:	f7fc fe5a 	bl	8001218 <HAL_GetTick>
 8004564:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b08      	cmp	r3, #8
 8004572:	d10e      	bne.n	8004592 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f831 	bl	80045ea <UART_WaitOnFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e027      	b.n	80045e2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b04      	cmp	r3, #4
 800459e:	d10e      	bne.n	80045be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f81b 	bl	80045ea <UART_WaitOnFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e011      	b.n	80045e2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b09c      	sub	sp, #112	; 0x70
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	603b      	str	r3, [r7, #0]
 80045f6:	4613      	mov	r3, r2
 80045f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fa:	e0a7      	b.n	800474c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004602:	f000 80a3 	beq.w	800474c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004606:	f7fc fe07 	bl	8001218 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004612:	429a      	cmp	r2, r3
 8004614:	d302      	bcc.n	800461c <UART_WaitOnFlagUntilTimeout+0x32>
 8004616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004618:	2b00      	cmp	r3, #0
 800461a:	d13f      	bne.n	800469c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800462a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004630:	667b      	str	r3, [r7, #100]	; 0x64
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800463a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800463c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004640:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e6      	bne.n	800461c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3308      	adds	r3, #8
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	663b      	str	r3, [r7, #96]	; 0x60
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3308      	adds	r3, #8
 800466c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800466e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004670:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800467c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e5      	bne.n	800464e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e068      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d050      	beq.n	800474c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b8:	d148      	bne.n	800474c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e2:	637b      	str	r3, [r7, #52]	; 0x34
 80046e4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e6      	bne.n	80046c4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3308      	adds	r3, #8
 80046fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	613b      	str	r3, [r7, #16]
   return(result);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	66bb      	str	r3, [r7, #104]	; 0x68
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3308      	adds	r3, #8
 8004714:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004716:	623a      	str	r2, [r7, #32]
 8004718:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	69f9      	ldr	r1, [r7, #28]
 800471c:	6a3a      	ldr	r2, [r7, #32]
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	61bb      	str	r3, [r7, #24]
   return(result);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e5      	bne.n	80046f6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e010      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4013      	ands	r3, r2
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	429a      	cmp	r2, r3
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	429a      	cmp	r2, r3
 8004768:	f43f af48 	beq.w	80045fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3770      	adds	r7, #112	; 0x70
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004778:	b084      	sub	sp, #16
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	f107 001c 	add.w	r0, r7, #28
 8004786:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	2b01      	cmp	r3, #1
 800478e:	d120      	bne.n	80047d2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	4b20      	ldr	r3, [pc, #128]	; (8004824 <USB_CoreInit+0xac>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d105      	bne.n	80047c6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fa96 	bl	8004cf8 <USB_CoreReset>
 80047cc:	4603      	mov	r3, r0
 80047ce:	73fb      	strb	r3, [r7, #15]
 80047d0:	e010      	b.n	80047f4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fa8a 	bl	8004cf8 <USB_CoreReset>
 80047e4:	4603      	mov	r3, r0
 80047e6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d10b      	bne.n	8004812 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f043 0206 	orr.w	r2, r3, #6
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f043 0220 	orr.w	r2, r3, #32
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004812:	7bfb      	ldrb	r3, [r7, #15]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800481e:	b004      	add	sp, #16
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	ffbdffbf 	.word	0xffbdffbf

08004828 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f023 0201 	bic.w	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d115      	bne.n	8004898 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004878:	2001      	movs	r0, #1
 800487a:	f7fc fcd9 	bl	8001230 <HAL_Delay>
      ms++;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3301      	adds	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fa29 	bl	8004cdc <USB_GetMode>
 800488a:	4603      	mov	r3, r0
 800488c:	2b01      	cmp	r3, #1
 800488e:	d01e      	beq.n	80048ce <USB_SetCurrentMode+0x84>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b31      	cmp	r3, #49	; 0x31
 8004894:	d9f0      	bls.n	8004878 <USB_SetCurrentMode+0x2e>
 8004896:	e01a      	b.n	80048ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d115      	bne.n	80048ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048aa:	2001      	movs	r0, #1
 80048ac:	f7fc fcc0 	bl	8001230 <HAL_Delay>
      ms++;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3301      	adds	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fa10 	bl	8004cdc <USB_GetMode>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <USB_SetCurrentMode+0x84>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b31      	cmp	r3, #49	; 0x31
 80048c6:	d9f0      	bls.n	80048aa <USB_SetCurrentMode+0x60>
 80048c8:	e001      	b.n	80048ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e005      	b.n	80048da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b32      	cmp	r3, #50	; 0x32
 80048d2:	d101      	bne.n	80048d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048e4:	b084      	sub	sp, #16
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b086      	sub	sp, #24
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048fe:	2300      	movs	r3, #0
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	e009      	b.n	8004918 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3340      	adds	r3, #64	; 0x40
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	2200      	movs	r2, #0
 8004910:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	3301      	adds	r3, #1
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b0e      	cmp	r3, #14
 800491c:	d9f2      	bls.n	8004904 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800491e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004920:	2b00      	cmp	r3, #0
 8004922:	d11c      	bne.n	800495e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004932:	f043 0302 	orr.w	r3, r3, #2
 8004936:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	e005      	b.n	800496a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004970:	461a      	mov	r2, r3
 8004972:	2300      	movs	r3, #0
 8004974:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497c:	4619      	mov	r1, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004984:	461a      	mov	r2, r3
 8004986:	680b      	ldr	r3, [r1, #0]
 8004988:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	2b01      	cmp	r3, #1
 800498e:	d10c      	bne.n	80049aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004996:	2100      	movs	r1, #0
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f965 	bl	8004c68 <USB_SetDevSpeed>
 800499e:	e008      	b.n	80049b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049a0:	2101      	movs	r1, #1
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f960 	bl	8004c68 <USB_SetDevSpeed>
 80049a8:	e003      	b.n	80049b2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049aa:	2103      	movs	r1, #3
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f95b 	bl	8004c68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049b2:	2110      	movs	r1, #16
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f8f3 	bl	8004ba0 <USB_FlushTxFifo>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f91f 	bl	8004c08 <USB_FlushRxFifo>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049da:	461a      	mov	r2, r3
 80049dc:	2300      	movs	r3, #0
 80049de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e6:	461a      	mov	r2, r3
 80049e8:	2300      	movs	r3, #0
 80049ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f2:	461a      	mov	r2, r3
 80049f4:	2300      	movs	r3, #0
 80049f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	e043      	b.n	8004a86 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a14:	d118      	bne.n	8004a48 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a28:	461a      	mov	r2, r3
 8004a2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	e013      	b.n	8004a5a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e008      	b.n	8004a5a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a54:	461a      	mov	r2, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a66:	461a      	mov	r2, r3
 8004a68:	2300      	movs	r3, #0
 8004a6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	3301      	adds	r3, #1
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d3b7      	bcc.n	80049fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a8e:	2300      	movs	r3, #0
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	e043      	b.n	8004b1c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aaa:	d118      	bne.n	8004ade <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e013      	b.n	8004af0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	e008      	b.n	8004af0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aea:	461a      	mov	r2, r3
 8004aec:	2300      	movs	r3, #0
 8004aee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	461a      	mov	r2, r3
 8004afe:	2300      	movs	r3, #0
 8004b00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d3b7      	bcc.n	8004a94 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d105      	bne.n	8004b58 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	f043 0210 	orr.w	r2, r3, #16
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699a      	ldr	r2, [r3, #24]
 8004b5c:	4b0e      	ldr	r3, [pc, #56]	; (8004b98 <USB_DevInit+0x2b4>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f043 0208 	orr.w	r2, r3, #8
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699a      	ldr	r2, [r3, #24]
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <USB_DevInit+0x2b8>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b94:	b004      	add	sp, #16
 8004b96:	4770      	bx	lr
 8004b98:	803c3800 	.word	0x803c3800
 8004b9c:	40000004 	.word	0x40000004

08004ba0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <USB_FlushTxFifo+0x64>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d901      	bls.n	8004bc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e01b      	b.n	8004bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	daf2      	bge.n	8004bae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	019b      	lsls	r3, r3, #6
 8004bd0:	f043 0220 	orr.w	r2, r3, #32
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a08      	ldr	r2, [pc, #32]	; (8004c04 <USB_FlushTxFifo+0x64>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e006      	b.n	8004bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d0f0      	beq.n	8004bd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	00030d40 	.word	0x00030d40

08004c08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a11      	ldr	r2, [pc, #68]	; (8004c64 <USB_FlushRxFifo+0x5c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e018      	b.n	8004c58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	daf2      	bge.n	8004c14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2210      	movs	r2, #16
 8004c36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a08      	ldr	r2, [pc, #32]	; (8004c64 <USB_FlushRxFifo+0x5c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e006      	b.n	8004c58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d0f0      	beq.n	8004c38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	00030d40 	.word	0x00030d40

08004c68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	68f9      	ldr	r1, [r7, #12]
 8004c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b085      	sub	sp, #20
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cb4:	f023 0303 	bic.w	r3, r3, #3
 8004cb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc8:	f043 0302 	orr.w	r3, r3, #2
 8004ccc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	3301      	adds	r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <USB_CoreReset+0x64>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e01b      	b.n	8004d4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	daf2      	bge.n	8004d04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3301      	adds	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <USB_CoreReset+0x64>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e006      	b.n	8004d4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d0f0      	beq.n	8004d2e <USB_CoreReset+0x36>

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	00030d40 	.word	0x00030d40

08004d60 <siprintf>:
 8004d60:	b40e      	push	{r1, r2, r3}
 8004d62:	b500      	push	{lr}
 8004d64:	b09c      	sub	sp, #112	; 0x70
 8004d66:	ab1d      	add	r3, sp, #116	; 0x74
 8004d68:	9002      	str	r0, [sp, #8]
 8004d6a:	9006      	str	r0, [sp, #24]
 8004d6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d70:	4809      	ldr	r0, [pc, #36]	; (8004d98 <siprintf+0x38>)
 8004d72:	9107      	str	r1, [sp, #28]
 8004d74:	9104      	str	r1, [sp, #16]
 8004d76:	4909      	ldr	r1, [pc, #36]	; (8004d9c <siprintf+0x3c>)
 8004d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d7c:	9105      	str	r1, [sp, #20]
 8004d7e:	6800      	ldr	r0, [r0, #0]
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	a902      	add	r1, sp, #8
 8004d84:	f000 f992 	bl	80050ac <_svfiprintf_r>
 8004d88:	9b02      	ldr	r3, [sp, #8]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	b01c      	add	sp, #112	; 0x70
 8004d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d94:	b003      	add	sp, #12
 8004d96:	4770      	bx	lr
 8004d98:	20000058 	.word	0x20000058
 8004d9c:	ffff0208 	.word	0xffff0208

08004da0 <memset>:
 8004da0:	4402      	add	r2, r0
 8004da2:	4603      	mov	r3, r0
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d100      	bne.n	8004daa <memset+0xa>
 8004da8:	4770      	bx	lr
 8004daa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dae:	e7f9      	b.n	8004da4 <memset+0x4>

08004db0 <__errno>:
 8004db0:	4b01      	ldr	r3, [pc, #4]	; (8004db8 <__errno+0x8>)
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000058 	.word	0x20000058

08004dbc <__libc_init_array>:
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	4d0d      	ldr	r5, [pc, #52]	; (8004df4 <__libc_init_array+0x38>)
 8004dc0:	4c0d      	ldr	r4, [pc, #52]	; (8004df8 <__libc_init_array+0x3c>)
 8004dc2:	1b64      	subs	r4, r4, r5
 8004dc4:	10a4      	asrs	r4, r4, #2
 8004dc6:	2600      	movs	r6, #0
 8004dc8:	42a6      	cmp	r6, r4
 8004dca:	d109      	bne.n	8004de0 <__libc_init_array+0x24>
 8004dcc:	4d0b      	ldr	r5, [pc, #44]	; (8004dfc <__libc_init_array+0x40>)
 8004dce:	4c0c      	ldr	r4, [pc, #48]	; (8004e00 <__libc_init_array+0x44>)
 8004dd0:	f000 fc6a 	bl	80056a8 <_init>
 8004dd4:	1b64      	subs	r4, r4, r5
 8004dd6:	10a4      	asrs	r4, r4, #2
 8004dd8:	2600      	movs	r6, #0
 8004dda:	42a6      	cmp	r6, r4
 8004ddc:	d105      	bne.n	8004dea <__libc_init_array+0x2e>
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de4:	4798      	blx	r3
 8004de6:	3601      	adds	r6, #1
 8004de8:	e7ee      	b.n	8004dc8 <__libc_init_array+0xc>
 8004dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dee:	4798      	blx	r3
 8004df0:	3601      	adds	r6, #1
 8004df2:	e7f2      	b.n	8004dda <__libc_init_array+0x1e>
 8004df4:	08005724 	.word	0x08005724
 8004df8:	08005724 	.word	0x08005724
 8004dfc:	08005724 	.word	0x08005724
 8004e00:	08005728 	.word	0x08005728

08004e04 <__retarget_lock_acquire_recursive>:
 8004e04:	4770      	bx	lr

08004e06 <__retarget_lock_release_recursive>:
 8004e06:	4770      	bx	lr

08004e08 <_free_r>:
 8004e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e0a:	2900      	cmp	r1, #0
 8004e0c:	d044      	beq.n	8004e98 <_free_r+0x90>
 8004e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e12:	9001      	str	r0, [sp, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f1a1 0404 	sub.w	r4, r1, #4
 8004e1a:	bfb8      	it	lt
 8004e1c:	18e4      	addlt	r4, r4, r3
 8004e1e:	f000 f8df 	bl	8004fe0 <__malloc_lock>
 8004e22:	4a1e      	ldr	r2, [pc, #120]	; (8004e9c <_free_r+0x94>)
 8004e24:	9801      	ldr	r0, [sp, #4]
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	b933      	cbnz	r3, 8004e38 <_free_r+0x30>
 8004e2a:	6063      	str	r3, [r4, #4]
 8004e2c:	6014      	str	r4, [r2, #0]
 8004e2e:	b003      	add	sp, #12
 8004e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e34:	f000 b8da 	b.w	8004fec <__malloc_unlock>
 8004e38:	42a3      	cmp	r3, r4
 8004e3a:	d908      	bls.n	8004e4e <_free_r+0x46>
 8004e3c:	6825      	ldr	r5, [r4, #0]
 8004e3e:	1961      	adds	r1, r4, r5
 8004e40:	428b      	cmp	r3, r1
 8004e42:	bf01      	itttt	eq
 8004e44:	6819      	ldreq	r1, [r3, #0]
 8004e46:	685b      	ldreq	r3, [r3, #4]
 8004e48:	1949      	addeq	r1, r1, r5
 8004e4a:	6021      	streq	r1, [r4, #0]
 8004e4c:	e7ed      	b.n	8004e2a <_free_r+0x22>
 8004e4e:	461a      	mov	r2, r3
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	b10b      	cbz	r3, 8004e58 <_free_r+0x50>
 8004e54:	42a3      	cmp	r3, r4
 8004e56:	d9fa      	bls.n	8004e4e <_free_r+0x46>
 8004e58:	6811      	ldr	r1, [r2, #0]
 8004e5a:	1855      	adds	r5, r2, r1
 8004e5c:	42a5      	cmp	r5, r4
 8004e5e:	d10b      	bne.n	8004e78 <_free_r+0x70>
 8004e60:	6824      	ldr	r4, [r4, #0]
 8004e62:	4421      	add	r1, r4
 8004e64:	1854      	adds	r4, r2, r1
 8004e66:	42a3      	cmp	r3, r4
 8004e68:	6011      	str	r1, [r2, #0]
 8004e6a:	d1e0      	bne.n	8004e2e <_free_r+0x26>
 8004e6c:	681c      	ldr	r4, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	6053      	str	r3, [r2, #4]
 8004e72:	440c      	add	r4, r1
 8004e74:	6014      	str	r4, [r2, #0]
 8004e76:	e7da      	b.n	8004e2e <_free_r+0x26>
 8004e78:	d902      	bls.n	8004e80 <_free_r+0x78>
 8004e7a:	230c      	movs	r3, #12
 8004e7c:	6003      	str	r3, [r0, #0]
 8004e7e:	e7d6      	b.n	8004e2e <_free_r+0x26>
 8004e80:	6825      	ldr	r5, [r4, #0]
 8004e82:	1961      	adds	r1, r4, r5
 8004e84:	428b      	cmp	r3, r1
 8004e86:	bf04      	itt	eq
 8004e88:	6819      	ldreq	r1, [r3, #0]
 8004e8a:	685b      	ldreq	r3, [r3, #4]
 8004e8c:	6063      	str	r3, [r4, #4]
 8004e8e:	bf04      	itt	eq
 8004e90:	1949      	addeq	r1, r1, r5
 8004e92:	6021      	streq	r1, [r4, #0]
 8004e94:	6054      	str	r4, [r2, #4]
 8004e96:	e7ca      	b.n	8004e2e <_free_r+0x26>
 8004e98:	b003      	add	sp, #12
 8004e9a:	bd30      	pop	{r4, r5, pc}
 8004e9c:	20000a6c 	.word	0x20000a6c

08004ea0 <sbrk_aligned>:
 8004ea0:	b570      	push	{r4, r5, r6, lr}
 8004ea2:	4e0e      	ldr	r6, [pc, #56]	; (8004edc <sbrk_aligned+0x3c>)
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	6831      	ldr	r1, [r6, #0]
 8004ea8:	4605      	mov	r5, r0
 8004eaa:	b911      	cbnz	r1, 8004eb2 <sbrk_aligned+0x12>
 8004eac:	f000 fba6 	bl	80055fc <_sbrk_r>
 8004eb0:	6030      	str	r0, [r6, #0]
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	f000 fba1 	bl	80055fc <_sbrk_r>
 8004eba:	1c43      	adds	r3, r0, #1
 8004ebc:	d00a      	beq.n	8004ed4 <sbrk_aligned+0x34>
 8004ebe:	1cc4      	adds	r4, r0, #3
 8004ec0:	f024 0403 	bic.w	r4, r4, #3
 8004ec4:	42a0      	cmp	r0, r4
 8004ec6:	d007      	beq.n	8004ed8 <sbrk_aligned+0x38>
 8004ec8:	1a21      	subs	r1, r4, r0
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f000 fb96 	bl	80055fc <_sbrk_r>
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d101      	bne.n	8004ed8 <sbrk_aligned+0x38>
 8004ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ed8:	4620      	mov	r0, r4
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	20000a70 	.word	0x20000a70

08004ee0 <_malloc_r>:
 8004ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee4:	1ccd      	adds	r5, r1, #3
 8004ee6:	f025 0503 	bic.w	r5, r5, #3
 8004eea:	3508      	adds	r5, #8
 8004eec:	2d0c      	cmp	r5, #12
 8004eee:	bf38      	it	cc
 8004ef0:	250c      	movcc	r5, #12
 8004ef2:	2d00      	cmp	r5, #0
 8004ef4:	4607      	mov	r7, r0
 8004ef6:	db01      	blt.n	8004efc <_malloc_r+0x1c>
 8004ef8:	42a9      	cmp	r1, r5
 8004efa:	d905      	bls.n	8004f08 <_malloc_r+0x28>
 8004efc:	230c      	movs	r3, #12
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	2600      	movs	r6, #0
 8004f02:	4630      	mov	r0, r6
 8004f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004fdc <_malloc_r+0xfc>
 8004f0c:	f000 f868 	bl	8004fe0 <__malloc_lock>
 8004f10:	f8d8 3000 	ldr.w	r3, [r8]
 8004f14:	461c      	mov	r4, r3
 8004f16:	bb5c      	cbnz	r4, 8004f70 <_malloc_r+0x90>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	f7ff ffc0 	bl	8004ea0 <sbrk_aligned>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	4604      	mov	r4, r0
 8004f24:	d155      	bne.n	8004fd2 <_malloc_r+0xf2>
 8004f26:	f8d8 4000 	ldr.w	r4, [r8]
 8004f2a:	4626      	mov	r6, r4
 8004f2c:	2e00      	cmp	r6, #0
 8004f2e:	d145      	bne.n	8004fbc <_malloc_r+0xdc>
 8004f30:	2c00      	cmp	r4, #0
 8004f32:	d048      	beq.n	8004fc6 <_malloc_r+0xe6>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	4631      	mov	r1, r6
 8004f38:	4638      	mov	r0, r7
 8004f3a:	eb04 0903 	add.w	r9, r4, r3
 8004f3e:	f000 fb5d 	bl	80055fc <_sbrk_r>
 8004f42:	4581      	cmp	r9, r0
 8004f44:	d13f      	bne.n	8004fc6 <_malloc_r+0xe6>
 8004f46:	6821      	ldr	r1, [r4, #0]
 8004f48:	1a6d      	subs	r5, r5, r1
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	f7ff ffa7 	bl	8004ea0 <sbrk_aligned>
 8004f52:	3001      	adds	r0, #1
 8004f54:	d037      	beq.n	8004fc6 <_malloc_r+0xe6>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	442b      	add	r3, r5
 8004f5a:	6023      	str	r3, [r4, #0]
 8004f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d038      	beq.n	8004fd6 <_malloc_r+0xf6>
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	42a2      	cmp	r2, r4
 8004f68:	d12b      	bne.n	8004fc2 <_malloc_r+0xe2>
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	e00f      	b.n	8004f90 <_malloc_r+0xb0>
 8004f70:	6822      	ldr	r2, [r4, #0]
 8004f72:	1b52      	subs	r2, r2, r5
 8004f74:	d41f      	bmi.n	8004fb6 <_malloc_r+0xd6>
 8004f76:	2a0b      	cmp	r2, #11
 8004f78:	d917      	bls.n	8004faa <_malloc_r+0xca>
 8004f7a:	1961      	adds	r1, r4, r5
 8004f7c:	42a3      	cmp	r3, r4
 8004f7e:	6025      	str	r5, [r4, #0]
 8004f80:	bf18      	it	ne
 8004f82:	6059      	strne	r1, [r3, #4]
 8004f84:	6863      	ldr	r3, [r4, #4]
 8004f86:	bf08      	it	eq
 8004f88:	f8c8 1000 	streq.w	r1, [r8]
 8004f8c:	5162      	str	r2, [r4, r5]
 8004f8e:	604b      	str	r3, [r1, #4]
 8004f90:	4638      	mov	r0, r7
 8004f92:	f104 060b 	add.w	r6, r4, #11
 8004f96:	f000 f829 	bl	8004fec <__malloc_unlock>
 8004f9a:	f026 0607 	bic.w	r6, r6, #7
 8004f9e:	1d23      	adds	r3, r4, #4
 8004fa0:	1af2      	subs	r2, r6, r3
 8004fa2:	d0ae      	beq.n	8004f02 <_malloc_r+0x22>
 8004fa4:	1b9b      	subs	r3, r3, r6
 8004fa6:	50a3      	str	r3, [r4, r2]
 8004fa8:	e7ab      	b.n	8004f02 <_malloc_r+0x22>
 8004faa:	42a3      	cmp	r3, r4
 8004fac:	6862      	ldr	r2, [r4, #4]
 8004fae:	d1dd      	bne.n	8004f6c <_malloc_r+0x8c>
 8004fb0:	f8c8 2000 	str.w	r2, [r8]
 8004fb4:	e7ec      	b.n	8004f90 <_malloc_r+0xb0>
 8004fb6:	4623      	mov	r3, r4
 8004fb8:	6864      	ldr	r4, [r4, #4]
 8004fba:	e7ac      	b.n	8004f16 <_malloc_r+0x36>
 8004fbc:	4634      	mov	r4, r6
 8004fbe:	6876      	ldr	r6, [r6, #4]
 8004fc0:	e7b4      	b.n	8004f2c <_malloc_r+0x4c>
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	e7cc      	b.n	8004f60 <_malloc_r+0x80>
 8004fc6:	230c      	movs	r3, #12
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	4638      	mov	r0, r7
 8004fcc:	f000 f80e 	bl	8004fec <__malloc_unlock>
 8004fd0:	e797      	b.n	8004f02 <_malloc_r+0x22>
 8004fd2:	6025      	str	r5, [r4, #0]
 8004fd4:	e7dc      	b.n	8004f90 <_malloc_r+0xb0>
 8004fd6:	605b      	str	r3, [r3, #4]
 8004fd8:	deff      	udf	#255	; 0xff
 8004fda:	bf00      	nop
 8004fdc:	20000a6c 	.word	0x20000a6c

08004fe0 <__malloc_lock>:
 8004fe0:	4801      	ldr	r0, [pc, #4]	; (8004fe8 <__malloc_lock+0x8>)
 8004fe2:	f7ff bf0f 	b.w	8004e04 <__retarget_lock_acquire_recursive>
 8004fe6:	bf00      	nop
 8004fe8:	20000a68 	.word	0x20000a68

08004fec <__malloc_unlock>:
 8004fec:	4801      	ldr	r0, [pc, #4]	; (8004ff4 <__malloc_unlock+0x8>)
 8004fee:	f7ff bf0a 	b.w	8004e06 <__retarget_lock_release_recursive>
 8004ff2:	bf00      	nop
 8004ff4:	20000a68 	.word	0x20000a68

08004ff8 <__ssputs_r>:
 8004ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ffc:	688e      	ldr	r6, [r1, #8]
 8004ffe:	461f      	mov	r7, r3
 8005000:	42be      	cmp	r6, r7
 8005002:	680b      	ldr	r3, [r1, #0]
 8005004:	4682      	mov	sl, r0
 8005006:	460c      	mov	r4, r1
 8005008:	4690      	mov	r8, r2
 800500a:	d82c      	bhi.n	8005066 <__ssputs_r+0x6e>
 800500c:	898a      	ldrh	r2, [r1, #12]
 800500e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005012:	d026      	beq.n	8005062 <__ssputs_r+0x6a>
 8005014:	6965      	ldr	r5, [r4, #20]
 8005016:	6909      	ldr	r1, [r1, #16]
 8005018:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800501c:	eba3 0901 	sub.w	r9, r3, r1
 8005020:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005024:	1c7b      	adds	r3, r7, #1
 8005026:	444b      	add	r3, r9
 8005028:	106d      	asrs	r5, r5, #1
 800502a:	429d      	cmp	r5, r3
 800502c:	bf38      	it	cc
 800502e:	461d      	movcc	r5, r3
 8005030:	0553      	lsls	r3, r2, #21
 8005032:	d527      	bpl.n	8005084 <__ssputs_r+0x8c>
 8005034:	4629      	mov	r1, r5
 8005036:	f7ff ff53 	bl	8004ee0 <_malloc_r>
 800503a:	4606      	mov	r6, r0
 800503c:	b360      	cbz	r0, 8005098 <__ssputs_r+0xa0>
 800503e:	6921      	ldr	r1, [r4, #16]
 8005040:	464a      	mov	r2, r9
 8005042:	f000 faeb 	bl	800561c <memcpy>
 8005046:	89a3      	ldrh	r3, [r4, #12]
 8005048:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800504c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005050:	81a3      	strh	r3, [r4, #12]
 8005052:	6126      	str	r6, [r4, #16]
 8005054:	6165      	str	r5, [r4, #20]
 8005056:	444e      	add	r6, r9
 8005058:	eba5 0509 	sub.w	r5, r5, r9
 800505c:	6026      	str	r6, [r4, #0]
 800505e:	60a5      	str	r5, [r4, #8]
 8005060:	463e      	mov	r6, r7
 8005062:	42be      	cmp	r6, r7
 8005064:	d900      	bls.n	8005068 <__ssputs_r+0x70>
 8005066:	463e      	mov	r6, r7
 8005068:	6820      	ldr	r0, [r4, #0]
 800506a:	4632      	mov	r2, r6
 800506c:	4641      	mov	r1, r8
 800506e:	f000 faab 	bl	80055c8 <memmove>
 8005072:	68a3      	ldr	r3, [r4, #8]
 8005074:	1b9b      	subs	r3, r3, r6
 8005076:	60a3      	str	r3, [r4, #8]
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	4433      	add	r3, r6
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	2000      	movs	r0, #0
 8005080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005084:	462a      	mov	r2, r5
 8005086:	f000 fad7 	bl	8005638 <_realloc_r>
 800508a:	4606      	mov	r6, r0
 800508c:	2800      	cmp	r0, #0
 800508e:	d1e0      	bne.n	8005052 <__ssputs_r+0x5a>
 8005090:	6921      	ldr	r1, [r4, #16]
 8005092:	4650      	mov	r0, sl
 8005094:	f7ff feb8 	bl	8004e08 <_free_r>
 8005098:	230c      	movs	r3, #12
 800509a:	f8ca 3000 	str.w	r3, [sl]
 800509e:	89a3      	ldrh	r3, [r4, #12]
 80050a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050a4:	81a3      	strh	r3, [r4, #12]
 80050a6:	f04f 30ff 	mov.w	r0, #4294967295
 80050aa:	e7e9      	b.n	8005080 <__ssputs_r+0x88>

080050ac <_svfiprintf_r>:
 80050ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b0:	4698      	mov	r8, r3
 80050b2:	898b      	ldrh	r3, [r1, #12]
 80050b4:	061b      	lsls	r3, r3, #24
 80050b6:	b09d      	sub	sp, #116	; 0x74
 80050b8:	4607      	mov	r7, r0
 80050ba:	460d      	mov	r5, r1
 80050bc:	4614      	mov	r4, r2
 80050be:	d50e      	bpl.n	80050de <_svfiprintf_r+0x32>
 80050c0:	690b      	ldr	r3, [r1, #16]
 80050c2:	b963      	cbnz	r3, 80050de <_svfiprintf_r+0x32>
 80050c4:	2140      	movs	r1, #64	; 0x40
 80050c6:	f7ff ff0b 	bl	8004ee0 <_malloc_r>
 80050ca:	6028      	str	r0, [r5, #0]
 80050cc:	6128      	str	r0, [r5, #16]
 80050ce:	b920      	cbnz	r0, 80050da <_svfiprintf_r+0x2e>
 80050d0:	230c      	movs	r3, #12
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	f04f 30ff 	mov.w	r0, #4294967295
 80050d8:	e0d0      	b.n	800527c <_svfiprintf_r+0x1d0>
 80050da:	2340      	movs	r3, #64	; 0x40
 80050dc:	616b      	str	r3, [r5, #20]
 80050de:	2300      	movs	r3, #0
 80050e0:	9309      	str	r3, [sp, #36]	; 0x24
 80050e2:	2320      	movs	r3, #32
 80050e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80050ec:	2330      	movs	r3, #48	; 0x30
 80050ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005294 <_svfiprintf_r+0x1e8>
 80050f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050f6:	f04f 0901 	mov.w	r9, #1
 80050fa:	4623      	mov	r3, r4
 80050fc:	469a      	mov	sl, r3
 80050fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005102:	b10a      	cbz	r2, 8005108 <_svfiprintf_r+0x5c>
 8005104:	2a25      	cmp	r2, #37	; 0x25
 8005106:	d1f9      	bne.n	80050fc <_svfiprintf_r+0x50>
 8005108:	ebba 0b04 	subs.w	fp, sl, r4
 800510c:	d00b      	beq.n	8005126 <_svfiprintf_r+0x7a>
 800510e:	465b      	mov	r3, fp
 8005110:	4622      	mov	r2, r4
 8005112:	4629      	mov	r1, r5
 8005114:	4638      	mov	r0, r7
 8005116:	f7ff ff6f 	bl	8004ff8 <__ssputs_r>
 800511a:	3001      	adds	r0, #1
 800511c:	f000 80a9 	beq.w	8005272 <_svfiprintf_r+0x1c6>
 8005120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005122:	445a      	add	r2, fp
 8005124:	9209      	str	r2, [sp, #36]	; 0x24
 8005126:	f89a 3000 	ldrb.w	r3, [sl]
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 80a1 	beq.w	8005272 <_svfiprintf_r+0x1c6>
 8005130:	2300      	movs	r3, #0
 8005132:	f04f 32ff 	mov.w	r2, #4294967295
 8005136:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800513a:	f10a 0a01 	add.w	sl, sl, #1
 800513e:	9304      	str	r3, [sp, #16]
 8005140:	9307      	str	r3, [sp, #28]
 8005142:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005146:	931a      	str	r3, [sp, #104]	; 0x68
 8005148:	4654      	mov	r4, sl
 800514a:	2205      	movs	r2, #5
 800514c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005150:	4850      	ldr	r0, [pc, #320]	; (8005294 <_svfiprintf_r+0x1e8>)
 8005152:	f7fb f875 	bl	8000240 <memchr>
 8005156:	9a04      	ldr	r2, [sp, #16]
 8005158:	b9d8      	cbnz	r0, 8005192 <_svfiprintf_r+0xe6>
 800515a:	06d0      	lsls	r0, r2, #27
 800515c:	bf44      	itt	mi
 800515e:	2320      	movmi	r3, #32
 8005160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005164:	0711      	lsls	r1, r2, #28
 8005166:	bf44      	itt	mi
 8005168:	232b      	movmi	r3, #43	; 0x2b
 800516a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800516e:	f89a 3000 	ldrb.w	r3, [sl]
 8005172:	2b2a      	cmp	r3, #42	; 0x2a
 8005174:	d015      	beq.n	80051a2 <_svfiprintf_r+0xf6>
 8005176:	9a07      	ldr	r2, [sp, #28]
 8005178:	4654      	mov	r4, sl
 800517a:	2000      	movs	r0, #0
 800517c:	f04f 0c0a 	mov.w	ip, #10
 8005180:	4621      	mov	r1, r4
 8005182:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005186:	3b30      	subs	r3, #48	; 0x30
 8005188:	2b09      	cmp	r3, #9
 800518a:	d94d      	bls.n	8005228 <_svfiprintf_r+0x17c>
 800518c:	b1b0      	cbz	r0, 80051bc <_svfiprintf_r+0x110>
 800518e:	9207      	str	r2, [sp, #28]
 8005190:	e014      	b.n	80051bc <_svfiprintf_r+0x110>
 8005192:	eba0 0308 	sub.w	r3, r0, r8
 8005196:	fa09 f303 	lsl.w	r3, r9, r3
 800519a:	4313      	orrs	r3, r2
 800519c:	9304      	str	r3, [sp, #16]
 800519e:	46a2      	mov	sl, r4
 80051a0:	e7d2      	b.n	8005148 <_svfiprintf_r+0x9c>
 80051a2:	9b03      	ldr	r3, [sp, #12]
 80051a4:	1d19      	adds	r1, r3, #4
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	9103      	str	r1, [sp, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bfbb      	ittet	lt
 80051ae:	425b      	neglt	r3, r3
 80051b0:	f042 0202 	orrlt.w	r2, r2, #2
 80051b4:	9307      	strge	r3, [sp, #28]
 80051b6:	9307      	strlt	r3, [sp, #28]
 80051b8:	bfb8      	it	lt
 80051ba:	9204      	strlt	r2, [sp, #16]
 80051bc:	7823      	ldrb	r3, [r4, #0]
 80051be:	2b2e      	cmp	r3, #46	; 0x2e
 80051c0:	d10c      	bne.n	80051dc <_svfiprintf_r+0x130>
 80051c2:	7863      	ldrb	r3, [r4, #1]
 80051c4:	2b2a      	cmp	r3, #42	; 0x2a
 80051c6:	d134      	bne.n	8005232 <_svfiprintf_r+0x186>
 80051c8:	9b03      	ldr	r3, [sp, #12]
 80051ca:	1d1a      	adds	r2, r3, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	9203      	str	r2, [sp, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bfb8      	it	lt
 80051d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80051d8:	3402      	adds	r4, #2
 80051da:	9305      	str	r3, [sp, #20]
 80051dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80052a4 <_svfiprintf_r+0x1f8>
 80051e0:	7821      	ldrb	r1, [r4, #0]
 80051e2:	2203      	movs	r2, #3
 80051e4:	4650      	mov	r0, sl
 80051e6:	f7fb f82b 	bl	8000240 <memchr>
 80051ea:	b138      	cbz	r0, 80051fc <_svfiprintf_r+0x150>
 80051ec:	9b04      	ldr	r3, [sp, #16]
 80051ee:	eba0 000a 	sub.w	r0, r0, sl
 80051f2:	2240      	movs	r2, #64	; 0x40
 80051f4:	4082      	lsls	r2, r0
 80051f6:	4313      	orrs	r3, r2
 80051f8:	3401      	adds	r4, #1
 80051fa:	9304      	str	r3, [sp, #16]
 80051fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005200:	4825      	ldr	r0, [pc, #148]	; (8005298 <_svfiprintf_r+0x1ec>)
 8005202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005206:	2206      	movs	r2, #6
 8005208:	f7fb f81a 	bl	8000240 <memchr>
 800520c:	2800      	cmp	r0, #0
 800520e:	d038      	beq.n	8005282 <_svfiprintf_r+0x1d6>
 8005210:	4b22      	ldr	r3, [pc, #136]	; (800529c <_svfiprintf_r+0x1f0>)
 8005212:	bb1b      	cbnz	r3, 800525c <_svfiprintf_r+0x1b0>
 8005214:	9b03      	ldr	r3, [sp, #12]
 8005216:	3307      	adds	r3, #7
 8005218:	f023 0307 	bic.w	r3, r3, #7
 800521c:	3308      	adds	r3, #8
 800521e:	9303      	str	r3, [sp, #12]
 8005220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005222:	4433      	add	r3, r6
 8005224:	9309      	str	r3, [sp, #36]	; 0x24
 8005226:	e768      	b.n	80050fa <_svfiprintf_r+0x4e>
 8005228:	fb0c 3202 	mla	r2, ip, r2, r3
 800522c:	460c      	mov	r4, r1
 800522e:	2001      	movs	r0, #1
 8005230:	e7a6      	b.n	8005180 <_svfiprintf_r+0xd4>
 8005232:	2300      	movs	r3, #0
 8005234:	3401      	adds	r4, #1
 8005236:	9305      	str	r3, [sp, #20]
 8005238:	4619      	mov	r1, r3
 800523a:	f04f 0c0a 	mov.w	ip, #10
 800523e:	4620      	mov	r0, r4
 8005240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005244:	3a30      	subs	r2, #48	; 0x30
 8005246:	2a09      	cmp	r2, #9
 8005248:	d903      	bls.n	8005252 <_svfiprintf_r+0x1a6>
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0c6      	beq.n	80051dc <_svfiprintf_r+0x130>
 800524e:	9105      	str	r1, [sp, #20]
 8005250:	e7c4      	b.n	80051dc <_svfiprintf_r+0x130>
 8005252:	fb0c 2101 	mla	r1, ip, r1, r2
 8005256:	4604      	mov	r4, r0
 8005258:	2301      	movs	r3, #1
 800525a:	e7f0      	b.n	800523e <_svfiprintf_r+0x192>
 800525c:	ab03      	add	r3, sp, #12
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	462a      	mov	r2, r5
 8005262:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <_svfiprintf_r+0x1f4>)
 8005264:	a904      	add	r1, sp, #16
 8005266:	4638      	mov	r0, r7
 8005268:	f3af 8000 	nop.w
 800526c:	1c42      	adds	r2, r0, #1
 800526e:	4606      	mov	r6, r0
 8005270:	d1d6      	bne.n	8005220 <_svfiprintf_r+0x174>
 8005272:	89ab      	ldrh	r3, [r5, #12]
 8005274:	065b      	lsls	r3, r3, #25
 8005276:	f53f af2d 	bmi.w	80050d4 <_svfiprintf_r+0x28>
 800527a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800527c:	b01d      	add	sp, #116	; 0x74
 800527e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005282:	ab03      	add	r3, sp, #12
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	462a      	mov	r2, r5
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <_svfiprintf_r+0x1f4>)
 800528a:	a904      	add	r1, sp, #16
 800528c:	4638      	mov	r0, r7
 800528e:	f000 f879 	bl	8005384 <_printf_i>
 8005292:	e7eb      	b.n	800526c <_svfiprintf_r+0x1c0>
 8005294:	080056e8 	.word	0x080056e8
 8005298:	080056f2 	.word	0x080056f2
 800529c:	00000000 	.word	0x00000000
 80052a0:	08004ff9 	.word	0x08004ff9
 80052a4:	080056ee 	.word	0x080056ee

080052a8 <_printf_common>:
 80052a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ac:	4616      	mov	r6, r2
 80052ae:	4699      	mov	r9, r3
 80052b0:	688a      	ldr	r2, [r1, #8]
 80052b2:	690b      	ldr	r3, [r1, #16]
 80052b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052b8:	4293      	cmp	r3, r2
 80052ba:	bfb8      	it	lt
 80052bc:	4613      	movlt	r3, r2
 80052be:	6033      	str	r3, [r6, #0]
 80052c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052c4:	4607      	mov	r7, r0
 80052c6:	460c      	mov	r4, r1
 80052c8:	b10a      	cbz	r2, 80052ce <_printf_common+0x26>
 80052ca:	3301      	adds	r3, #1
 80052cc:	6033      	str	r3, [r6, #0]
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	0699      	lsls	r1, r3, #26
 80052d2:	bf42      	ittt	mi
 80052d4:	6833      	ldrmi	r3, [r6, #0]
 80052d6:	3302      	addmi	r3, #2
 80052d8:	6033      	strmi	r3, [r6, #0]
 80052da:	6825      	ldr	r5, [r4, #0]
 80052dc:	f015 0506 	ands.w	r5, r5, #6
 80052e0:	d106      	bne.n	80052f0 <_printf_common+0x48>
 80052e2:	f104 0a19 	add.w	sl, r4, #25
 80052e6:	68e3      	ldr	r3, [r4, #12]
 80052e8:	6832      	ldr	r2, [r6, #0]
 80052ea:	1a9b      	subs	r3, r3, r2
 80052ec:	42ab      	cmp	r3, r5
 80052ee:	dc26      	bgt.n	800533e <_printf_common+0x96>
 80052f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052f4:	1e13      	subs	r3, r2, #0
 80052f6:	6822      	ldr	r2, [r4, #0]
 80052f8:	bf18      	it	ne
 80052fa:	2301      	movne	r3, #1
 80052fc:	0692      	lsls	r2, r2, #26
 80052fe:	d42b      	bmi.n	8005358 <_printf_common+0xb0>
 8005300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005304:	4649      	mov	r1, r9
 8005306:	4638      	mov	r0, r7
 8005308:	47c0      	blx	r8
 800530a:	3001      	adds	r0, #1
 800530c:	d01e      	beq.n	800534c <_printf_common+0xa4>
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	6922      	ldr	r2, [r4, #16]
 8005312:	f003 0306 	and.w	r3, r3, #6
 8005316:	2b04      	cmp	r3, #4
 8005318:	bf02      	ittt	eq
 800531a:	68e5      	ldreq	r5, [r4, #12]
 800531c:	6833      	ldreq	r3, [r6, #0]
 800531e:	1aed      	subeq	r5, r5, r3
 8005320:	68a3      	ldr	r3, [r4, #8]
 8005322:	bf0c      	ite	eq
 8005324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005328:	2500      	movne	r5, #0
 800532a:	4293      	cmp	r3, r2
 800532c:	bfc4      	itt	gt
 800532e:	1a9b      	subgt	r3, r3, r2
 8005330:	18ed      	addgt	r5, r5, r3
 8005332:	2600      	movs	r6, #0
 8005334:	341a      	adds	r4, #26
 8005336:	42b5      	cmp	r5, r6
 8005338:	d11a      	bne.n	8005370 <_printf_common+0xc8>
 800533a:	2000      	movs	r0, #0
 800533c:	e008      	b.n	8005350 <_printf_common+0xa8>
 800533e:	2301      	movs	r3, #1
 8005340:	4652      	mov	r2, sl
 8005342:	4649      	mov	r1, r9
 8005344:	4638      	mov	r0, r7
 8005346:	47c0      	blx	r8
 8005348:	3001      	adds	r0, #1
 800534a:	d103      	bne.n	8005354 <_printf_common+0xac>
 800534c:	f04f 30ff 	mov.w	r0, #4294967295
 8005350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005354:	3501      	adds	r5, #1
 8005356:	e7c6      	b.n	80052e6 <_printf_common+0x3e>
 8005358:	18e1      	adds	r1, r4, r3
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	2030      	movs	r0, #48	; 0x30
 800535e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005362:	4422      	add	r2, r4
 8005364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800536c:	3302      	adds	r3, #2
 800536e:	e7c7      	b.n	8005300 <_printf_common+0x58>
 8005370:	2301      	movs	r3, #1
 8005372:	4622      	mov	r2, r4
 8005374:	4649      	mov	r1, r9
 8005376:	4638      	mov	r0, r7
 8005378:	47c0      	blx	r8
 800537a:	3001      	adds	r0, #1
 800537c:	d0e6      	beq.n	800534c <_printf_common+0xa4>
 800537e:	3601      	adds	r6, #1
 8005380:	e7d9      	b.n	8005336 <_printf_common+0x8e>
	...

08005384 <_printf_i>:
 8005384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005388:	7e0f      	ldrb	r7, [r1, #24]
 800538a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800538c:	2f78      	cmp	r7, #120	; 0x78
 800538e:	4691      	mov	r9, r2
 8005390:	4680      	mov	r8, r0
 8005392:	460c      	mov	r4, r1
 8005394:	469a      	mov	sl, r3
 8005396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800539a:	d807      	bhi.n	80053ac <_printf_i+0x28>
 800539c:	2f62      	cmp	r7, #98	; 0x62
 800539e:	d80a      	bhi.n	80053b6 <_printf_i+0x32>
 80053a0:	2f00      	cmp	r7, #0
 80053a2:	f000 80d4 	beq.w	800554e <_printf_i+0x1ca>
 80053a6:	2f58      	cmp	r7, #88	; 0x58
 80053a8:	f000 80c0 	beq.w	800552c <_printf_i+0x1a8>
 80053ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053b4:	e03a      	b.n	800542c <_printf_i+0xa8>
 80053b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053ba:	2b15      	cmp	r3, #21
 80053bc:	d8f6      	bhi.n	80053ac <_printf_i+0x28>
 80053be:	a101      	add	r1, pc, #4	; (adr r1, 80053c4 <_printf_i+0x40>)
 80053c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053c4:	0800541d 	.word	0x0800541d
 80053c8:	08005431 	.word	0x08005431
 80053cc:	080053ad 	.word	0x080053ad
 80053d0:	080053ad 	.word	0x080053ad
 80053d4:	080053ad 	.word	0x080053ad
 80053d8:	080053ad 	.word	0x080053ad
 80053dc:	08005431 	.word	0x08005431
 80053e0:	080053ad 	.word	0x080053ad
 80053e4:	080053ad 	.word	0x080053ad
 80053e8:	080053ad 	.word	0x080053ad
 80053ec:	080053ad 	.word	0x080053ad
 80053f0:	08005535 	.word	0x08005535
 80053f4:	0800545d 	.word	0x0800545d
 80053f8:	080054ef 	.word	0x080054ef
 80053fc:	080053ad 	.word	0x080053ad
 8005400:	080053ad 	.word	0x080053ad
 8005404:	08005557 	.word	0x08005557
 8005408:	080053ad 	.word	0x080053ad
 800540c:	0800545d 	.word	0x0800545d
 8005410:	080053ad 	.word	0x080053ad
 8005414:	080053ad 	.word	0x080053ad
 8005418:	080054f7 	.word	0x080054f7
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	1d1a      	adds	r2, r3, #4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	602a      	str	r2, [r5, #0]
 8005424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800542c:	2301      	movs	r3, #1
 800542e:	e09f      	b.n	8005570 <_printf_i+0x1ec>
 8005430:	6820      	ldr	r0, [r4, #0]
 8005432:	682b      	ldr	r3, [r5, #0]
 8005434:	0607      	lsls	r7, r0, #24
 8005436:	f103 0104 	add.w	r1, r3, #4
 800543a:	6029      	str	r1, [r5, #0]
 800543c:	d501      	bpl.n	8005442 <_printf_i+0xbe>
 800543e:	681e      	ldr	r6, [r3, #0]
 8005440:	e003      	b.n	800544a <_printf_i+0xc6>
 8005442:	0646      	lsls	r6, r0, #25
 8005444:	d5fb      	bpl.n	800543e <_printf_i+0xba>
 8005446:	f9b3 6000 	ldrsh.w	r6, [r3]
 800544a:	2e00      	cmp	r6, #0
 800544c:	da03      	bge.n	8005456 <_printf_i+0xd2>
 800544e:	232d      	movs	r3, #45	; 0x2d
 8005450:	4276      	negs	r6, r6
 8005452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005456:	485a      	ldr	r0, [pc, #360]	; (80055c0 <_printf_i+0x23c>)
 8005458:	230a      	movs	r3, #10
 800545a:	e012      	b.n	8005482 <_printf_i+0xfe>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	6820      	ldr	r0, [r4, #0]
 8005460:	1d19      	adds	r1, r3, #4
 8005462:	6029      	str	r1, [r5, #0]
 8005464:	0605      	lsls	r5, r0, #24
 8005466:	d501      	bpl.n	800546c <_printf_i+0xe8>
 8005468:	681e      	ldr	r6, [r3, #0]
 800546a:	e002      	b.n	8005472 <_printf_i+0xee>
 800546c:	0641      	lsls	r1, r0, #25
 800546e:	d5fb      	bpl.n	8005468 <_printf_i+0xe4>
 8005470:	881e      	ldrh	r6, [r3, #0]
 8005472:	4853      	ldr	r0, [pc, #332]	; (80055c0 <_printf_i+0x23c>)
 8005474:	2f6f      	cmp	r7, #111	; 0x6f
 8005476:	bf0c      	ite	eq
 8005478:	2308      	moveq	r3, #8
 800547a:	230a      	movne	r3, #10
 800547c:	2100      	movs	r1, #0
 800547e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005482:	6865      	ldr	r5, [r4, #4]
 8005484:	60a5      	str	r5, [r4, #8]
 8005486:	2d00      	cmp	r5, #0
 8005488:	bfa2      	ittt	ge
 800548a:	6821      	ldrge	r1, [r4, #0]
 800548c:	f021 0104 	bicge.w	r1, r1, #4
 8005490:	6021      	strge	r1, [r4, #0]
 8005492:	b90e      	cbnz	r6, 8005498 <_printf_i+0x114>
 8005494:	2d00      	cmp	r5, #0
 8005496:	d04b      	beq.n	8005530 <_printf_i+0x1ac>
 8005498:	4615      	mov	r5, r2
 800549a:	fbb6 f1f3 	udiv	r1, r6, r3
 800549e:	fb03 6711 	mls	r7, r3, r1, r6
 80054a2:	5dc7      	ldrb	r7, [r0, r7]
 80054a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054a8:	4637      	mov	r7, r6
 80054aa:	42bb      	cmp	r3, r7
 80054ac:	460e      	mov	r6, r1
 80054ae:	d9f4      	bls.n	800549a <_printf_i+0x116>
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d10b      	bne.n	80054cc <_printf_i+0x148>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	07de      	lsls	r6, r3, #31
 80054b8:	d508      	bpl.n	80054cc <_printf_i+0x148>
 80054ba:	6923      	ldr	r3, [r4, #16]
 80054bc:	6861      	ldr	r1, [r4, #4]
 80054be:	4299      	cmp	r1, r3
 80054c0:	bfde      	ittt	le
 80054c2:	2330      	movle	r3, #48	; 0x30
 80054c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054cc:	1b52      	subs	r2, r2, r5
 80054ce:	6122      	str	r2, [r4, #16]
 80054d0:	f8cd a000 	str.w	sl, [sp]
 80054d4:	464b      	mov	r3, r9
 80054d6:	aa03      	add	r2, sp, #12
 80054d8:	4621      	mov	r1, r4
 80054da:	4640      	mov	r0, r8
 80054dc:	f7ff fee4 	bl	80052a8 <_printf_common>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d14a      	bne.n	800557a <_printf_i+0x1f6>
 80054e4:	f04f 30ff 	mov.w	r0, #4294967295
 80054e8:	b004      	add	sp, #16
 80054ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	f043 0320 	orr.w	r3, r3, #32
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	4833      	ldr	r0, [pc, #204]	; (80055c4 <_printf_i+0x240>)
 80054f8:	2778      	movs	r7, #120	; 0x78
 80054fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	6829      	ldr	r1, [r5, #0]
 8005502:	061f      	lsls	r7, r3, #24
 8005504:	f851 6b04 	ldr.w	r6, [r1], #4
 8005508:	d402      	bmi.n	8005510 <_printf_i+0x18c>
 800550a:	065f      	lsls	r7, r3, #25
 800550c:	bf48      	it	mi
 800550e:	b2b6      	uxthmi	r6, r6
 8005510:	07df      	lsls	r7, r3, #31
 8005512:	bf48      	it	mi
 8005514:	f043 0320 	orrmi.w	r3, r3, #32
 8005518:	6029      	str	r1, [r5, #0]
 800551a:	bf48      	it	mi
 800551c:	6023      	strmi	r3, [r4, #0]
 800551e:	b91e      	cbnz	r6, 8005528 <_printf_i+0x1a4>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	f023 0320 	bic.w	r3, r3, #32
 8005526:	6023      	str	r3, [r4, #0]
 8005528:	2310      	movs	r3, #16
 800552a:	e7a7      	b.n	800547c <_printf_i+0xf8>
 800552c:	4824      	ldr	r0, [pc, #144]	; (80055c0 <_printf_i+0x23c>)
 800552e:	e7e4      	b.n	80054fa <_printf_i+0x176>
 8005530:	4615      	mov	r5, r2
 8005532:	e7bd      	b.n	80054b0 <_printf_i+0x12c>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	6826      	ldr	r6, [r4, #0]
 8005538:	6961      	ldr	r1, [r4, #20]
 800553a:	1d18      	adds	r0, r3, #4
 800553c:	6028      	str	r0, [r5, #0]
 800553e:	0635      	lsls	r5, r6, #24
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	d501      	bpl.n	8005548 <_printf_i+0x1c4>
 8005544:	6019      	str	r1, [r3, #0]
 8005546:	e002      	b.n	800554e <_printf_i+0x1ca>
 8005548:	0670      	lsls	r0, r6, #25
 800554a:	d5fb      	bpl.n	8005544 <_printf_i+0x1c0>
 800554c:	8019      	strh	r1, [r3, #0]
 800554e:	2300      	movs	r3, #0
 8005550:	6123      	str	r3, [r4, #16]
 8005552:	4615      	mov	r5, r2
 8005554:	e7bc      	b.n	80054d0 <_printf_i+0x14c>
 8005556:	682b      	ldr	r3, [r5, #0]
 8005558:	1d1a      	adds	r2, r3, #4
 800555a:	602a      	str	r2, [r5, #0]
 800555c:	681d      	ldr	r5, [r3, #0]
 800555e:	6862      	ldr	r2, [r4, #4]
 8005560:	2100      	movs	r1, #0
 8005562:	4628      	mov	r0, r5
 8005564:	f7fa fe6c 	bl	8000240 <memchr>
 8005568:	b108      	cbz	r0, 800556e <_printf_i+0x1ea>
 800556a:	1b40      	subs	r0, r0, r5
 800556c:	6060      	str	r0, [r4, #4]
 800556e:	6863      	ldr	r3, [r4, #4]
 8005570:	6123      	str	r3, [r4, #16]
 8005572:	2300      	movs	r3, #0
 8005574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005578:	e7aa      	b.n	80054d0 <_printf_i+0x14c>
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	462a      	mov	r2, r5
 800557e:	4649      	mov	r1, r9
 8005580:	4640      	mov	r0, r8
 8005582:	47d0      	blx	sl
 8005584:	3001      	adds	r0, #1
 8005586:	d0ad      	beq.n	80054e4 <_printf_i+0x160>
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	079b      	lsls	r3, r3, #30
 800558c:	d413      	bmi.n	80055b6 <_printf_i+0x232>
 800558e:	68e0      	ldr	r0, [r4, #12]
 8005590:	9b03      	ldr	r3, [sp, #12]
 8005592:	4298      	cmp	r0, r3
 8005594:	bfb8      	it	lt
 8005596:	4618      	movlt	r0, r3
 8005598:	e7a6      	b.n	80054e8 <_printf_i+0x164>
 800559a:	2301      	movs	r3, #1
 800559c:	4632      	mov	r2, r6
 800559e:	4649      	mov	r1, r9
 80055a0:	4640      	mov	r0, r8
 80055a2:	47d0      	blx	sl
 80055a4:	3001      	adds	r0, #1
 80055a6:	d09d      	beq.n	80054e4 <_printf_i+0x160>
 80055a8:	3501      	adds	r5, #1
 80055aa:	68e3      	ldr	r3, [r4, #12]
 80055ac:	9903      	ldr	r1, [sp, #12]
 80055ae:	1a5b      	subs	r3, r3, r1
 80055b0:	42ab      	cmp	r3, r5
 80055b2:	dcf2      	bgt.n	800559a <_printf_i+0x216>
 80055b4:	e7eb      	b.n	800558e <_printf_i+0x20a>
 80055b6:	2500      	movs	r5, #0
 80055b8:	f104 0619 	add.w	r6, r4, #25
 80055bc:	e7f5      	b.n	80055aa <_printf_i+0x226>
 80055be:	bf00      	nop
 80055c0:	080056f9 	.word	0x080056f9
 80055c4:	0800570a 	.word	0x0800570a

080055c8 <memmove>:
 80055c8:	4288      	cmp	r0, r1
 80055ca:	b510      	push	{r4, lr}
 80055cc:	eb01 0402 	add.w	r4, r1, r2
 80055d0:	d902      	bls.n	80055d8 <memmove+0x10>
 80055d2:	4284      	cmp	r4, r0
 80055d4:	4623      	mov	r3, r4
 80055d6:	d807      	bhi.n	80055e8 <memmove+0x20>
 80055d8:	1e43      	subs	r3, r0, #1
 80055da:	42a1      	cmp	r1, r4
 80055dc:	d008      	beq.n	80055f0 <memmove+0x28>
 80055de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055e6:	e7f8      	b.n	80055da <memmove+0x12>
 80055e8:	4402      	add	r2, r0
 80055ea:	4601      	mov	r1, r0
 80055ec:	428a      	cmp	r2, r1
 80055ee:	d100      	bne.n	80055f2 <memmove+0x2a>
 80055f0:	bd10      	pop	{r4, pc}
 80055f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055fa:	e7f7      	b.n	80055ec <memmove+0x24>

080055fc <_sbrk_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	4d06      	ldr	r5, [pc, #24]	; (8005618 <_sbrk_r+0x1c>)
 8005600:	2300      	movs	r3, #0
 8005602:	4604      	mov	r4, r0
 8005604:	4608      	mov	r0, r1
 8005606:	602b      	str	r3, [r5, #0]
 8005608:	f7fb fd44 	bl	8001094 <_sbrk>
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	d102      	bne.n	8005616 <_sbrk_r+0x1a>
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	b103      	cbz	r3, 8005616 <_sbrk_r+0x1a>
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	bd38      	pop	{r3, r4, r5, pc}
 8005618:	20000a64 	.word	0x20000a64

0800561c <memcpy>:
 800561c:	440a      	add	r2, r1
 800561e:	4291      	cmp	r1, r2
 8005620:	f100 33ff 	add.w	r3, r0, #4294967295
 8005624:	d100      	bne.n	8005628 <memcpy+0xc>
 8005626:	4770      	bx	lr
 8005628:	b510      	push	{r4, lr}
 800562a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800562e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005632:	4291      	cmp	r1, r2
 8005634:	d1f9      	bne.n	800562a <memcpy+0xe>
 8005636:	bd10      	pop	{r4, pc}

08005638 <_realloc_r>:
 8005638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800563c:	4680      	mov	r8, r0
 800563e:	4614      	mov	r4, r2
 8005640:	460e      	mov	r6, r1
 8005642:	b921      	cbnz	r1, 800564e <_realloc_r+0x16>
 8005644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005648:	4611      	mov	r1, r2
 800564a:	f7ff bc49 	b.w	8004ee0 <_malloc_r>
 800564e:	b92a      	cbnz	r2, 800565c <_realloc_r+0x24>
 8005650:	f7ff fbda 	bl	8004e08 <_free_r>
 8005654:	4625      	mov	r5, r4
 8005656:	4628      	mov	r0, r5
 8005658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800565c:	f000 f81b 	bl	8005696 <_malloc_usable_size_r>
 8005660:	4284      	cmp	r4, r0
 8005662:	4607      	mov	r7, r0
 8005664:	d802      	bhi.n	800566c <_realloc_r+0x34>
 8005666:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800566a:	d812      	bhi.n	8005692 <_realloc_r+0x5a>
 800566c:	4621      	mov	r1, r4
 800566e:	4640      	mov	r0, r8
 8005670:	f7ff fc36 	bl	8004ee0 <_malloc_r>
 8005674:	4605      	mov	r5, r0
 8005676:	2800      	cmp	r0, #0
 8005678:	d0ed      	beq.n	8005656 <_realloc_r+0x1e>
 800567a:	42bc      	cmp	r4, r7
 800567c:	4622      	mov	r2, r4
 800567e:	4631      	mov	r1, r6
 8005680:	bf28      	it	cs
 8005682:	463a      	movcs	r2, r7
 8005684:	f7ff ffca 	bl	800561c <memcpy>
 8005688:	4631      	mov	r1, r6
 800568a:	4640      	mov	r0, r8
 800568c:	f7ff fbbc 	bl	8004e08 <_free_r>
 8005690:	e7e1      	b.n	8005656 <_realloc_r+0x1e>
 8005692:	4635      	mov	r5, r6
 8005694:	e7df      	b.n	8005656 <_realloc_r+0x1e>

08005696 <_malloc_usable_size_r>:
 8005696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800569a:	1f18      	subs	r0, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	bfbc      	itt	lt
 80056a0:	580b      	ldrlt	r3, [r1, r0]
 80056a2:	18c0      	addlt	r0, r0, r3
 80056a4:	4770      	bx	lr
	...

080056a8 <_init>:
 80056a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056aa:	bf00      	nop
 80056ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ae:	bc08      	pop	{r3}
 80056b0:	469e      	mov	lr, r3
 80056b2:	4770      	bx	lr

080056b4 <_fini>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	bf00      	nop
 80056b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ba:	bc08      	pop	{r3}
 80056bc:	469e      	mov	lr, r3
 80056be:	4770      	bx	lr
