
sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c24  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  08008e24  08008e24  00009e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009430  08009430  0000b080  2**0
                  CONTENTS
  4 .ARM          00000008  08009430  08009430  0000a430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009438  08009438  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009438  08009438  0000a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800943c  0800943c  0000a43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009440  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000080  080094c0  0000b080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  080094c0  0000b584  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc5a  00000000  00000000  0000b0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b5  00000000  00000000  0001ad08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  0001d3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a51  00000000  00000000  0001e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bd8  00000000  00000000  0001eb89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145b7  00000000  00000000  00048761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7073  00000000  00000000  0005cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00153d8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e10  00000000  00000000  00153e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00157c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08008e0c 	.word	0x08008e0c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08008e0c 	.word	0x08008e0c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SELECT>:
/***************************************
 * SPI functions
 **************************************/
/* slave select */
static void SELECT(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2102      	movs	r1, #2
 80005d8:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <SELECT+0x18>)
 80005da:	f001 fdb3 	bl	8002144 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f001 fafa 	bl	8001bd8 <HAL_Delay>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020400 	.word	0x40020400

080005ec <DESELECT>:
/* slave deselect */
static void DESELECT(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2102      	movs	r1, #2
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <DESELECT+0x18>)
 80005f6:	f001 fda5 	bl	8002144 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f001 faec 	bl	8001bd8 <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020400 	.word	0x40020400

08000608 <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000612:	bf00      	nop
 8000614:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <SPI_TxByte+0x30>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	2b02      	cmp	r3, #2
 8000620:	d1f8      	bne.n	8000614 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000622:	1df9      	adds	r1, r7, #7
 8000624:	2364      	movs	r3, #100	@ 0x64
 8000626:	2201      	movs	r2, #1
 8000628:	4803      	ldr	r0, [pc, #12]	@ (8000638 <SPI_TxByte+0x30>)
 800062a:	f002 ff4a 	bl	80034c2 <HAL_SPI_Transmit>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000108 	.word	0x20000108

0800063c <SPI_TxBuffer>:
/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000648:	bf00      	nop
 800064a:	4b08      	ldr	r3, [pc, #32]	@ (800066c <SPI_TxBuffer+0x30>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	2b02      	cmp	r3, #2
 8000656:	d1f8      	bne.n	800064a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000658:	887a      	ldrh	r2, [r7, #2]
 800065a:	2364      	movs	r3, #100	@ 0x64
 800065c:	6879      	ldr	r1, [r7, #4]
 800065e:	4803      	ldr	r0, [pc, #12]	@ (800066c <SPI_TxBuffer+0x30>)
 8000660:	f002 ff2f 	bl	80034c2 <HAL_SPI_Transmit>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000108 	.word	0x20000108

08000670 <SPI_RxByte>:
/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000676:	23ff      	movs	r3, #255	@ 0xff
 8000678:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800067a:	bf00      	nop
 800067c:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <SPI_RxByte+0x34>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	2b02      	cmp	r3, #2
 8000688:	d1f8      	bne.n	800067c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800068a:	1dba      	adds	r2, r7, #6
 800068c:	1df9      	adds	r1, r7, #7
 800068e:	2364      	movs	r3, #100	@ 0x64
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	4803      	ldr	r0, [pc, #12]	@ (80006a4 <SPI_RxByte+0x34>)
 8000696:	f003 f889 	bl	80037ac <HAL_SPI_TransmitReceive>
  return data;
 800069a:	79bb      	ldrb	r3, [r7, #6]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000108 	.word	0x20000108

080006a8 <SPI_RxBytePtr>:
/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80006b0:	f7ff ffde 	bl	8000670 <SPI_RxByte>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	701a      	strb	r2, [r3, #0]
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/
/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 80006ca:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <SD_ReadyWait+0x30>)
 80006cc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006d0:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80006d2:	f7ff ffcd 	bl	8000670 <SPI_RxByte>
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2bff      	cmp	r3, #255	@ 0xff
 80006de:	d003      	beq.n	80006e8 <SD_ReadyWait+0x24>
 80006e0:	4b04      	ldr	r3, [pc, #16]	@ (80006f4 <SD_ReadyWait+0x30>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1f4      	bne.n	80006d2 <SD_ReadyWait+0xe>
  return res;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000009e 	.word	0x2000009e

080006f8 <SD_PowerOn>:
/* power on */
static void SD_PowerOn(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80006fe:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000702:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8000704:	f7ff ff72 	bl	80005ec <DESELECT>
  for(int i = 0; i < 10; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	e005      	b.n	800071a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800070e:	20ff      	movs	r0, #255	@ 0xff
 8000710:	f7ff ff7a 	bl	8000608 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	3301      	adds	r3, #1
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	2b09      	cmp	r3, #9
 800071e:	ddf6      	ble.n	800070e <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8000720:	f7ff ff56 	bl	80005d0 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000724:	2340      	movs	r3, #64	@ 0x40
 8000726:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000738:	2395      	movs	r3, #149	@ 0x95
 800073a:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800073c:	463b      	mov	r3, r7
 800073e:	2106      	movs	r1, #6
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff7b 	bl	800063c <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000746:	e002      	b.n	800074e <SD_PowerOn+0x56>
  {
    cnt--;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	3b01      	subs	r3, #1
 800074c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800074e:	f7ff ff8f 	bl	8000670 <SPI_RxByte>
 8000752:	4603      	mov	r3, r0
 8000754:	2b01      	cmp	r3, #1
 8000756:	d002      	beq.n	800075e <SD_PowerOn+0x66>
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1f4      	bne.n	8000748 <SD_PowerOn+0x50>
  }
  DESELECT();
 800075e:	f7ff ff45 	bl	80005ec <DESELECT>
  SPI_TxByte(0XFF);
 8000762:	20ff      	movs	r0, #255	@ 0xff
 8000764:	f7ff ff50 	bl	8000608 <SPI_TxByte>
  PowerFlag = 1;
 8000768:	4b03      	ldr	r3, [pc, #12]	@ (8000778 <SD_PowerOn+0x80>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000a1 	.word	0x200000a1

0800077c <SD_PowerOff>:
/* power off */
static void SD_PowerOff(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000780:	4b03      	ldr	r3, [pc, #12]	@ (8000790 <SD_PowerOff+0x14>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	200000a1 	.word	0x200000a1

08000794 <SD_CheckPower>:
/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000798:	4b03      	ldr	r3, [pc, #12]	@ (80007a8 <SD_CheckPower+0x14>)
 800079a:	781b      	ldrb	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	200000a1 	.word	0x200000a1

080007ac <SD_RxDataBlock>:
/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SD_RxDataBlock+0x58>)
 80007b8:	22c8      	movs	r2, #200	@ 0xc8
 80007ba:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80007bc:	f7ff ff58 	bl	8000670 <SPI_RxByte>
 80007c0:	4603      	mov	r3, r0
 80007c2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	2bff      	cmp	r3, #255	@ 0xff
 80007c8:	d103      	bne.n	80007d2 <SD_RxDataBlock+0x26>
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <SD_RxDataBlock+0x58>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1f4      	bne.n	80007bc <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	2bfe      	cmp	r3, #254	@ 0xfe
 80007d6:	d001      	beq.n	80007dc <SD_RxDataBlock+0x30>
 80007d8:	2300      	movs	r3, #0
 80007da:	e00f      	b.n	80007fc <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff60 	bl	80006a8 <SPI_RxBytePtr>
  } while(len--);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	1e5a      	subs	r2, r3, #1
 80007ec:	603a      	str	r2, [r7, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1f4      	bne.n	80007dc <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 80007f2:	f7ff ff3d 	bl	8000670 <SPI_RxByte>
  SPI_RxByte();
 80007f6:	f7ff ff3b 	bl	8000670 <SPI_RxByte>
  return TRUE;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000009c 	.word	0x2000009c

08000808 <SD_TxDataBlock>:
/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000818:	f7ff ff54 	bl	80006c4 <SD_ReadyWait>
 800081c:	4603      	mov	r3, r0
 800081e:	2bff      	cmp	r3, #255	@ 0xff
 8000820:	d001      	beq.n	8000826 <SD_TxDataBlock+0x1e>
 8000822:	2300      	movs	r3, #0
 8000824:	e02f      	b.n	8000886 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8000826:	78fb      	ldrb	r3, [r7, #3]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff feed 	bl	8000608 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800082e:	78fb      	ldrb	r3, [r7, #3]
 8000830:	2bfd      	cmp	r3, #253	@ 0xfd
 8000832:	d020      	beq.n	8000876 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000834:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff feff 	bl	800063c <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800083e:	f7ff ff17 	bl	8000670 <SPI_RxByte>
    SPI_RxByte();
 8000842:	f7ff ff15 	bl	8000670 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8000846:	e00b      	b.n	8000860 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000848:	f7ff ff12 	bl	8000670 <SPI_RxByte>
 800084c:	4603      	mov	r3, r0
 800084e:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	f003 031f 	and.w	r3, r3, #31
 8000856:	2b05      	cmp	r3, #5
 8000858:	d006      	beq.n	8000868 <SD_TxDataBlock+0x60>
      i++;
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	3301      	adds	r3, #1
 800085e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	2b40      	cmp	r3, #64	@ 0x40
 8000864:	d9f0      	bls.n	8000848 <SD_TxDataBlock+0x40>
 8000866:	e000      	b.n	800086a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000868:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800086a:	bf00      	nop
 800086c:	f7ff ff00 	bl	8000670 <SPI_RxByte>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0fa      	beq.n	800086c <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	f003 031f 	and.w	r3, r3, #31
 800087c:	2b05      	cmp	r3, #5
 800087e:	d101      	bne.n	8000884 <SD_TxDataBlock+0x7c>
 8000880:	2301      	movs	r3, #1
 8000882:	e000      	b.n	8000886 <SD_TxDataBlock+0x7e>
  return FALSE;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <SD_SendCmd>:
#endif /* _USE_WRITE */
/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	6039      	str	r1, [r7, #0]
 8000898:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800089a:	f7ff ff13 	bl	80006c4 <SD_ReadyWait>
 800089e:	4603      	mov	r3, r0
 80008a0:	2bff      	cmp	r3, #255	@ 0xff
 80008a2:	d001      	beq.n	80008a8 <SD_SendCmd+0x1a>
 80008a4:	23ff      	movs	r3, #255	@ 0xff
 80008a6:	e042      	b.n	800092e <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff feac 	bl	8000608 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	0e1b      	lsrs	r3, r3, #24
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fea6 	bl	8000608 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	0c1b      	lsrs	r3, r3, #16
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fea0 	bl	8000608 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	0a1b      	lsrs	r3, r3, #8
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fe9a 	bl	8000608 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fe95 	bl	8000608 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b40      	cmp	r3, #64	@ 0x40
 80008e2:	d102      	bne.n	80008ea <SD_SendCmd+0x5c>
 80008e4:	2395      	movs	r3, #149	@ 0x95
 80008e6:	73fb      	strb	r3, [r7, #15]
 80008e8:	e007      	b.n	80008fa <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b48      	cmp	r3, #72	@ 0x48
 80008ee:	d102      	bne.n	80008f6 <SD_SendCmd+0x68>
 80008f0:	2387      	movs	r3, #135	@ 0x87
 80008f2:	73fb      	strb	r3, [r7, #15]
 80008f4:	e001      	b.n	80008fa <SD_SendCmd+0x6c>
  else crc = 1;
 80008f6:	2301      	movs	r3, #1
 80008f8:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fe83 	bl	8000608 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b4c      	cmp	r3, #76	@ 0x4c
 8000906:	d101      	bne.n	800090c <SD_SendCmd+0x7e>
 8000908:	f7ff feb2 	bl	8000670 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800090c:	230a      	movs	r3, #10
 800090e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000910:	f7ff feae 	bl	8000670 <SPI_RxByte>
 8000914:	4603      	mov	r3, r0
 8000916:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000918:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800091c:	2b00      	cmp	r3, #0
 800091e:	da05      	bge.n	800092c <SD_SendCmd+0x9e>
 8000920:	7bbb      	ldrb	r3, [r7, #14]
 8000922:	3b01      	subs	r3, #1
 8000924:	73bb      	strb	r3, [r7, #14]
 8000926:	7bbb      	ldrb	r3, [r7, #14]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1f1      	bne.n	8000910 <SD_SendCmd+0x82>
  return res;
 800092c:	7b7b      	ldrb	r3, [r7, #13]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SD_disk_initialize+0x14>
 8000948:	2301      	movs	r3, #1
 800094a:	e0d1      	b.n	8000af0 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800094c:	4b6a      	ldr	r3, [pc, #424]	@ (8000af8 <SD_disk_initialize+0x1c0>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	2b00      	cmp	r3, #0
 8000958:	d003      	beq.n	8000962 <SD_disk_initialize+0x2a>
 800095a:	4b67      	ldr	r3, [pc, #412]	@ (8000af8 <SD_disk_initialize+0x1c0>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	e0c6      	b.n	8000af0 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8000962:	f7ff fec9 	bl	80006f8 <SD_PowerOn>
  /* slave select */
  SELECT();
 8000966:	f7ff fe33 	bl	80005d0 <SELECT>
  /* check disk type */
  type = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800096e:	2100      	movs	r1, #0
 8000970:	2040      	movs	r0, #64	@ 0x40
 8000972:	f7ff ff8c 	bl	800088e <SD_SendCmd>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	f040 80a1 	bne.w	8000ac0 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800097e:	4b5f      	ldr	r3, [pc, #380]	@ (8000afc <SD_disk_initialize+0x1c4>)
 8000980:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000984:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000986:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800098a:	2048      	movs	r0, #72	@ 0x48
 800098c:	f7ff ff7f 	bl	800088e <SD_SendCmd>
 8000990:	4603      	mov	r3, r0
 8000992:	2b01      	cmp	r3, #1
 8000994:	d155      	bne.n	8000a42 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000996:	2300      	movs	r3, #0
 8000998:	73fb      	strb	r3, [r7, #15]
 800099a:	e00c      	b.n	80009b6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800099c:	7bfc      	ldrb	r4, [r7, #15]
 800099e:	f7ff fe67 	bl	8000670 <SPI_RxByte>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	f104 0310 	add.w	r3, r4, #16
 80009aa:	443b      	add	r3, r7
 80009ac:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	3301      	adds	r3, #1
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	d9ef      	bls.n	800099c <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009bc:	7abb      	ldrb	r3, [r7, #10]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d17e      	bne.n	8000ac0 <SD_disk_initialize+0x188>
 80009c2:	7afb      	ldrb	r3, [r7, #11]
 80009c4:	2baa      	cmp	r3, #170	@ 0xaa
 80009c6:	d17b      	bne.n	8000ac0 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009c8:	2100      	movs	r1, #0
 80009ca:	2077      	movs	r0, #119	@ 0x77
 80009cc:	f7ff ff5f 	bl	800088e <SD_SendCmd>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d807      	bhi.n	80009e6 <SD_disk_initialize+0xae>
 80009d6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80009da:	2069      	movs	r0, #105	@ 0x69
 80009dc:	f7ff ff57 	bl	800088e <SD_SendCmd>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d004      	beq.n	80009f0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80009e6:	4b45      	ldr	r3, [pc, #276]	@ (8000afc <SD_disk_initialize+0x1c4>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d1ec      	bne.n	80009c8 <SD_disk_initialize+0x90>
 80009ee:	e000      	b.n	80009f2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009f0:	bf00      	nop
        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009f2:	4b42      	ldr	r3, [pc, #264]	@ (8000afc <SD_disk_initialize+0x1c4>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d062      	beq.n	8000ac0 <SD_disk_initialize+0x188>
 80009fa:	2100      	movs	r1, #0
 80009fc:	207a      	movs	r0, #122	@ 0x7a
 80009fe:	f7ff ff46 	bl	800088e <SD_SendCmd>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d15b      	bne.n	8000ac0 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	e00c      	b.n	8000a28 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000a0e:	7bfc      	ldrb	r4, [r7, #15]
 8000a10:	f7ff fe2e 	bl	8000670 <SPI_RxByte>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	f104 0310 	add.w	r3, r4, #16
 8000a1c:	443b      	add	r3, r7
 8000a1e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	3301      	adds	r3, #1
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d9ef      	bls.n	8000a0e <SD_disk_initialize+0xd6>
          }
          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a2e:	7a3b      	ldrb	r3, [r7, #8]
 8000a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SD_disk_initialize+0x104>
 8000a38:	230c      	movs	r3, #12
 8000a3a:	e000      	b.n	8000a3e <SD_disk_initialize+0x106>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	73bb      	strb	r3, [r7, #14]
 8000a40:	e03e      	b.n	8000ac0 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a42:	2100      	movs	r1, #0
 8000a44:	2077      	movs	r0, #119	@ 0x77
 8000a46:	f7ff ff22 	bl	800088e <SD_SendCmd>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d808      	bhi.n	8000a62 <SD_disk_initialize+0x12a>
 8000a50:	2100      	movs	r1, #0
 8000a52:	2069      	movs	r0, #105	@ 0x69
 8000a54:	f7ff ff1b 	bl	800088e <SD_SendCmd>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d801      	bhi.n	8000a62 <SD_disk_initialize+0x12a>
 8000a5e:	2302      	movs	r3, #2
 8000a60:	e000      	b.n	8000a64 <SD_disk_initialize+0x12c>
 8000a62:	2301      	movs	r3, #1
 8000a64:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d10e      	bne.n	8000a8a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2077      	movs	r0, #119	@ 0x77
 8000a70:	f7ff ff0d 	bl	800088e <SD_SendCmd>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d80e      	bhi.n	8000a98 <SD_disk_initialize+0x160>
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2069      	movs	r0, #105	@ 0x69
 8000a7e:	f7ff ff06 	bl	800088e <SD_SendCmd>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d107      	bne.n	8000a98 <SD_disk_initialize+0x160>
 8000a88:	e00c      	b.n	8000aa4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2041      	movs	r0, #65	@ 0x41
 8000a8e:	f7ff fefe 	bl	800088e <SD_SendCmd>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d004      	beq.n	8000aa2 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <SD_disk_initialize+0x1c4>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1e2      	bne.n	8000a66 <SD_disk_initialize+0x12e>
 8000aa0:	e000      	b.n	8000aa4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000aa2:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <SD_disk_initialize+0x1c4>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d007      	beq.n	8000abc <SD_disk_initialize+0x184>
 8000aac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ab0:	2050      	movs	r0, #80	@ 0x50
 8000ab2:	f7ff feec 	bl	800088e <SD_SendCmd>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SD_disk_initialize+0x188>
 8000abc:	2300      	movs	r3, #0
 8000abe:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8000ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b00 <SD_disk_initialize+0x1c8>)
 8000ac2:	7bbb      	ldrb	r3, [r7, #14]
 8000ac4:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8000ac6:	f7ff fd91 	bl	80005ec <DESELECT>
  SPI_RxByte();
 8000aca:	f7ff fdd1 	bl	8000670 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8000ace:	7bbb      	ldrb	r3, [r7, #14]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d008      	beq.n	8000ae6 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <SD_disk_initialize+0x1c0>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	f023 0301 	bic.w	r3, r3, #1
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <SD_disk_initialize+0x1c0>)
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	e001      	b.n	8000aea <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000ae6:	f7ff fe49 	bl	800077c <SD_PowerOff>
  }
  return Stat;
 8000aea:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <SD_disk_initialize+0x1c0>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b2db      	uxtb	r3, r3
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	20000000 	.word	0x20000000
 8000afc:	2000009c 	.word	0x2000009c
 8000b00:	200000a0 	.word	0x200000a0

08000b04 <SD_disk_status>:
/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SD_disk_status+0x14>
 8000b14:	2301      	movs	r3, #1
 8000b16:	e002      	b.n	8000b1e <SD_disk_status+0x1a>
  return Stat;
 8000b18:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <SD_disk_status+0x28>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000000 	.word	0x20000000

08000b30 <SD_disk_read>:
/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d102      	bne.n	8000b4c <SD_disk_read+0x1c>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d101      	bne.n	8000b50 <SD_disk_read+0x20>
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	e051      	b.n	8000bf4 <SD_disk_read+0xc4>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b50:	4b2a      	ldr	r3, [pc, #168]	@ (8000bfc <SD_disk_read+0xcc>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SD_disk_read+0x32>
 8000b5e:	2303      	movs	r3, #3
 8000b60:	e048      	b.n	8000bf4 <SD_disk_read+0xc4>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000b62:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <SD_disk_read+0xd0>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d102      	bne.n	8000b74 <SD_disk_read+0x44>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	607b      	str	r3, [r7, #4]
  SELECT();
 8000b74:	f7ff fd2c 	bl	80005d0 <SELECT>
  if (count == 1)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d111      	bne.n	8000ba2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	2051      	movs	r0, #81	@ 0x51
 8000b82:	f7ff fe84 	bl	800088e <SD_SendCmd>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d129      	bne.n	8000be0 <SD_disk_read+0xb0>
 8000b8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b90:	68b8      	ldr	r0, [r7, #8]
 8000b92:	f7ff fe0b 	bl	80007ac <SD_RxDataBlock>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d021      	beq.n	8000be0 <SD_disk_read+0xb0>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	e01e      	b.n	8000be0 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	2052      	movs	r0, #82	@ 0x52
 8000ba6:	f7ff fe72 	bl	800088e <SD_SendCmd>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d117      	bne.n	8000be0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000bb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bb4:	68b8      	ldr	r0, [r7, #8]
 8000bb6:	f7ff fdf9 	bl	80007ac <SD_RxDataBlock>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00a      	beq.n	8000bd6 <SD_disk_read+0xa6>
        buff += 512;
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bc6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1ed      	bne.n	8000bb0 <SD_disk_read+0x80>
 8000bd4:	e000      	b.n	8000bd8 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000bd6:	bf00      	nop
      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	204c      	movs	r0, #76	@ 0x4c
 8000bdc:	f7ff fe57 	bl	800088e <SD_SendCmd>
    }
  }
  /* Idle */
  DESELECT();
 8000be0:	f7ff fd04 	bl	80005ec <DESELECT>
  SPI_RxByte();
 8000be4:	f7ff fd44 	bl	8000670 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	bf14      	ite	ne
 8000bee:	2301      	movne	r3, #1
 8000bf0:	2300      	moveq	r3, #0
 8000bf2:	b2db      	uxtb	r3, r3
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	200000a0 	.word	0x200000a0

08000c04 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	4603      	mov	r3, r0
 8000c12:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d102      	bne.n	8000c20 <SD_disk_write+0x1c>
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d101      	bne.n	8000c24 <SD_disk_write+0x20>
 8000c20:	2304      	movs	r3, #4
 8000c22:	e06b      	b.n	8000cfc <SD_disk_write+0xf8>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c24:	4b37      	ldr	r3, [pc, #220]	@ (8000d04 <SD_disk_write+0x100>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SD_disk_write+0x32>
 8000c32:	2303      	movs	r3, #3
 8000c34:	e062      	b.n	8000cfc <SD_disk_write+0xf8>
  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c36:	4b33      	ldr	r3, [pc, #204]	@ (8000d04 <SD_disk_write+0x100>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SD_disk_write+0x44>
 8000c44:	2302      	movs	r3, #2
 8000c46:	e059      	b.n	8000cfc <SD_disk_write+0xf8>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000c48:	4b2f      	ldr	r3, [pc, #188]	@ (8000d08 <SD_disk_write+0x104>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <SD_disk_write+0x56>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	025b      	lsls	r3, r3, #9
 8000c58:	607b      	str	r3, [r7, #4]
  SELECT();
 8000c5a:	f7ff fcb9 	bl	80005d0 <SELECT>
  if (count == 1)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d110      	bne.n	8000c86 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	2058      	movs	r0, #88	@ 0x58
 8000c68:	f7ff fe11 	bl	800088e <SD_SendCmd>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d13a      	bne.n	8000ce8 <SD_disk_write+0xe4>
 8000c72:	21fe      	movs	r1, #254	@ 0xfe
 8000c74:	68b8      	ldr	r0, [r7, #8]
 8000c76:	f7ff fdc7 	bl	8000808 <SD_TxDataBlock>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d033      	beq.n	8000ce8 <SD_disk_write+0xe4>
      count = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	e030      	b.n	8000ce8 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000c86:	4b20      	ldr	r3, [pc, #128]	@ (8000d08 <SD_disk_write+0x104>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d007      	beq.n	8000ca2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c92:	2100      	movs	r1, #0
 8000c94:	2077      	movs	r0, #119	@ 0x77
 8000c96:	f7ff fdfa 	bl	800088e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c9a:	6839      	ldr	r1, [r7, #0]
 8000c9c:	2057      	movs	r0, #87	@ 0x57
 8000c9e:	f7ff fdf6 	bl	800088e <SD_SendCmd>
    }
    if (SD_SendCmd(CMD25, sector) == 0)
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	2059      	movs	r0, #89	@ 0x59
 8000ca6:	f7ff fdf2 	bl	800088e <SD_SendCmd>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d11b      	bne.n	8000ce8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cb0:	21fc      	movs	r1, #252	@ 0xfc
 8000cb2:	68b8      	ldr	r0, [r7, #8]
 8000cb4:	f7ff fda8 	bl	8000808 <SD_TxDataBlock>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00a      	beq.n	8000cd4 <SD_disk_write+0xd0>
        buff += 512;
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000cc4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1ee      	bne.n	8000cb0 <SD_disk_write+0xac>
 8000cd2:	e000      	b.n	8000cd6 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cd4:	bf00      	nop
      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000cd6:	21fd      	movs	r1, #253	@ 0xfd
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f7ff fd95 	bl	8000808 <SD_TxDataBlock>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d101      	bne.n	8000ce8 <SD_disk_write+0xe4>
      {
        count = 1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Idle */
  DESELECT();
 8000ce8:	f7ff fc80 	bl	80005ec <DESELECT>
  SPI_RxByte();
 8000cec:	f7ff fcc0 	bl	8000670 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bf14      	ite	ne
 8000cf6:	2301      	movne	r3, #1
 8000cf8:	2300      	moveq	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000000 	.word	0x20000000
 8000d08:	200000a0 	.word	0x200000a0

08000d0c <SD_disk_ioctl>:
#endif /* _USE_WRITE */
/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b08b      	sub	sp, #44	@ 0x2c
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	603a      	str	r2, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	623b      	str	r3, [r7, #32]
  WORD csize;
  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SD_disk_ioctl+0x1e>
 8000d26:	2304      	movs	r3, #4
 8000d28:	e113      	b.n	8000f52 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (ctrl == CTRL_POWER)
 8000d30:	79bb      	ldrb	r3, [r7, #6]
 8000d32:	2b05      	cmp	r3, #5
 8000d34:	d124      	bne.n	8000d80 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8000d36:	6a3b      	ldr	r3, [r7, #32]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d012      	beq.n	8000d64 <SD_disk_ioctl+0x58>
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	dc1a      	bgt.n	8000d78 <SD_disk_ioctl+0x6c>
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <SD_disk_ioctl+0x40>
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d006      	beq.n	8000d58 <SD_disk_ioctl+0x4c>
 8000d4a:	e015      	b.n	8000d78 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8000d4c:	f7ff fd16 	bl	800077c <SD_PowerOff>
      res = RES_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d56:	e0fa      	b.n	8000f4e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8000d58:	f7ff fcce 	bl	80006f8 <SD_PowerOn>
      res = RES_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d62:	e0f4      	b.n	8000f4e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8000d64:	6a3b      	ldr	r3, [r7, #32]
 8000d66:	1c5c      	adds	r4, r3, #1
 8000d68:	f7ff fd14 	bl	8000794 <SD_CheckPower>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8000d70:	2300      	movs	r3, #0
 8000d72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d76:	e0ea      	b.n	8000f4e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d7e:	e0e6      	b.n	8000f4e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d80:	4b76      	ldr	r3, [pc, #472]	@ (8000f5c <SD_disk_ioctl+0x250>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SD_disk_ioctl+0x86>
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e0df      	b.n	8000f52 <SD_disk_ioctl+0x246>
    SELECT();
 8000d92:	f7ff fc1d 	bl	80005d0 <SELECT>
    switch (ctrl)
 8000d96:	79bb      	ldrb	r3, [r7, #6]
 8000d98:	2b0d      	cmp	r3, #13
 8000d9a:	f200 80c9 	bhi.w	8000f30 <SD_disk_ioctl+0x224>
 8000d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000da4 <SD_disk_ioctl+0x98>)
 8000da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da4:	08000e9b 	.word	0x08000e9b
 8000da8:	08000ddd 	.word	0x08000ddd
 8000dac:	08000e8b 	.word	0x08000e8b
 8000db0:	08000f31 	.word	0x08000f31
 8000db4:	08000f31 	.word	0x08000f31
 8000db8:	08000f31 	.word	0x08000f31
 8000dbc:	08000f31 	.word	0x08000f31
 8000dc0:	08000f31 	.word	0x08000f31
 8000dc4:	08000f31 	.word	0x08000f31
 8000dc8:	08000f31 	.word	0x08000f31
 8000dcc:	08000f31 	.word	0x08000f31
 8000dd0:	08000ead 	.word	0x08000ead
 8000dd4:	08000ed1 	.word	0x08000ed1
 8000dd8:	08000ef5 	.word	0x08000ef5
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2049      	movs	r0, #73	@ 0x49
 8000de0:	f7ff fd55 	bl	800088e <SD_SendCmd>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 80a6 	bne.w	8000f38 <SD_disk_ioctl+0x22c>
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2110      	movs	r1, #16
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fcda 	bl	80007ac <SD_RxDataBlock>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 809c 	beq.w	8000f38 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8000e00:	7b3b      	ldrb	r3, [r7, #12]
 8000e02:	099b      	lsrs	r3, r3, #6
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d10d      	bne.n	8000e26 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e0a:	7d7b      	ldrb	r3, [r7, #21]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	7d3b      	ldrb	r3, [r7, #20]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	3301      	adds	r3, #1
 8000e1a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000e1c:	8bfb      	ldrh	r3, [r7, #30]
 8000e1e:	029a      	lsls	r2, r3, #10
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	e02d      	b.n	8000e82 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e26:	7c7b      	ldrb	r3, [r7, #17]
 8000e28:	f003 030f 	and.w	r3, r3, #15
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	7dbb      	ldrb	r3, [r7, #22]
 8000e30:	09db      	lsrs	r3, r3, #7
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	7d7b      	ldrb	r3, [r7, #21]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	f003 0306 	and.w	r3, r3, #6
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	3302      	adds	r3, #2
 8000e4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e4e:	7d3b      	ldrb	r3, [r7, #20]
 8000e50:	099b      	lsrs	r3, r3, #6
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	7cfb      	ldrb	r3, [r7, #19]
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	7cbb      	ldrb	r3, [r7, #18]
 8000e62:	029b      	lsls	r3, r3, #10
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3301      	adds	r3, #1
 8000e72:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e74:	8bfa      	ldrh	r2, [r7, #30]
 8000e76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e7a:	3b09      	subs	r3, #9
 8000e7c:	409a      	lsls	r2, r3
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000e88:	e056      	b.n	8000f38 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e90:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000e98:	e055      	b.n	8000f46 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e9a:	f7ff fc13 	bl	80006c4 <SD_ReadyWait>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2bff      	cmp	r3, #255	@ 0xff
 8000ea2:	d14b      	bne.n	8000f3c <SD_disk_ioctl+0x230>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000eaa:	e047      	b.n	8000f3c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000eac:	2100      	movs	r1, #0
 8000eae:	2049      	movs	r0, #73	@ 0x49
 8000eb0:	f7ff fced 	bl	800088e <SD_SendCmd>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d142      	bne.n	8000f40 <SD_disk_ioctl+0x234>
 8000eba:	2110      	movs	r1, #16
 8000ebc:	6a38      	ldr	r0, [r7, #32]
 8000ebe:	f7ff fc75 	bl	80007ac <SD_RxDataBlock>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d03b      	beq.n	8000f40 <SD_disk_ioctl+0x234>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000ece:	e037      	b.n	8000f40 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	204a      	movs	r0, #74	@ 0x4a
 8000ed4:	f7ff fcdb 	bl	800088e <SD_SendCmd>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d132      	bne.n	8000f44 <SD_disk_ioctl+0x238>
 8000ede:	2110      	movs	r1, #16
 8000ee0:	6a38      	ldr	r0, [r7, #32]
 8000ee2:	f7ff fc63 	bl	80007ac <SD_RxDataBlock>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d02b      	beq.n	8000f44 <SD_disk_ioctl+0x238>
 8000eec:	2300      	movs	r3, #0
 8000eee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000ef2:	e027      	b.n	8000f44 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	207a      	movs	r0, #122	@ 0x7a
 8000ef8:	f7ff fcc9 	bl	800088e <SD_SendCmd>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d116      	bne.n	8000f30 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f08:	e00b      	b.n	8000f22 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8000f0a:	6a3c      	ldr	r4, [r7, #32]
 8000f0c:	1c63      	adds	r3, r4, #1
 8000f0e:	623b      	str	r3, [r7, #32]
 8000f10:	f7ff fbae 	bl	8000670 <SPI_RxByte>
 8000f14:	4603      	mov	r3, r0
 8000f16:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000f18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d9ef      	bls.n	8000f0a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8000f30:	2304      	movs	r3, #4
 8000f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f36:	e006      	b.n	8000f46 <SD_disk_ioctl+0x23a>
      break;
 8000f38:	bf00      	nop
 8000f3a:	e004      	b.n	8000f46 <SD_disk_ioctl+0x23a>
      break;
 8000f3c:	bf00      	nop
 8000f3e:	e002      	b.n	8000f46 <SD_disk_ioctl+0x23a>
      break;
 8000f40:	bf00      	nop
 8000f42:	e000      	b.n	8000f46 <SD_disk_ioctl+0x23a>
      break;
 8000f44:	bf00      	nop
    }
    DESELECT();
 8000f46:	f7ff fb51 	bl	80005ec <DESELECT>
    SPI_RxByte();
 8000f4a:	f7ff fb91 	bl	8000670 <SPI_RxByte>
  }
  return res;
 8000f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	372c      	adds	r7, #44	@ 0x2c
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd90      	pop	{r4, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000000 	.word	0x20000000

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f64:	f000 fddb 	bl	8001b1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f68:	f000 f80e 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6c:	f000 f914 	bl	8001198 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f70:	f000 f866 	bl	8001040 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000f74:	f003 fd1c 	bl	80049b0 <MX_FATFS_Init>
  MX_SPI2_Init();
 8000f78:	f000 f8a0 	bl	80010bc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000f7c:	f000 f8dc 	bl	8001138 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  process_SD_card();
 8000f80:	f000 fa32 	bl	80013e8 <process_SD_card>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <main+0x24>

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	@ 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	2234      	movs	r2, #52	@ 0x34
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f007 f9b4 	bl	8008304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fac:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <SystemClock_Config+0xb0>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb0:	4a21      	ldr	r2, [pc, #132]	@ (8001038 <SystemClock_Config+0xb0>)
 8000fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <SystemClock_Config+0xb0>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <SystemClock_Config+0xb4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800103c <SystemClock_Config+0xb4>)
 8000fce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b19      	ldr	r3, [pc, #100]	@ (800103c <SystemClock_Config+0xb4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 f8bf 	bl	8002178 <HAL_RCC_OscConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001000:	f000 fb16 	bl	8001630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001004:	230f      	movs	r3, #15
 8001006:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001014:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fb57 	bl	80026d4 <HAL_RCC_ClockConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800102c:	f000 fb00 	bl	8001630 <Error_Handler>
  }
}
 8001030:	bf00      	nop
 8001032:	3750      	adds	r7, #80	@ 0x50
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800
 800103c:	40007000 	.word	0x40007000

08001040 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001046:	4a1c      	ldr	r2, [pc, #112]	@ (80010b8 <MX_SPI1_Init+0x78>)
 8001048:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800104a:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <MX_SPI1_Init+0x74>)
 800104c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001050:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001052:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <MX_SPI1_Init+0x74>)
 800105a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800105e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <MX_SPI1_Init+0x74>)
 800106e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001072:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <MX_SPI1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800108c:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <MX_SPI1_Init+0x74>)
 800108e:	2207      	movs	r2, #7
 8001090:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001092:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <MX_SPI1_Init+0x74>)
 800109a:	2208      	movs	r2, #8
 800109c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <MX_SPI1_Init+0x74>)
 80010a0:	f002 f964 	bl	800336c <HAL_SPI_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010aa:	f000 fac1 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000a4 	.word	0x200000a4
 80010b8:	40013000 	.word	0x40013000

080010bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <MX_SPI2_Init+0x74>)
 80010c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001134 <MX_SPI2_Init+0x78>)
 80010c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <MX_SPI2_Init+0x74>)
 80010c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <MX_SPI2_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <MX_SPI2_Init+0x74>)
 80010d6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010dc:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <MX_SPI2_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e2:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <MX_SPI2_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_SPI2_Init+0x74>)
 80010ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_SPI2_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_SPI2_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_SPI2_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <MX_SPI2_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_SPI2_Init+0x74>)
 800110a:	2207      	movs	r2, #7
 800110c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <MX_SPI2_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_SPI2_Init+0x74>)
 8001116:	2208      	movs	r2, #8
 8001118:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <MX_SPI2_Init+0x74>)
 800111c:	f002 f926 	bl	800336c <HAL_SPI_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001126:	f000 fa83 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000108 	.word	0x20000108
 8001134:	40003800 	.word	0x40003800

08001138 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <MX_USART1_UART_Init+0x58>)
 800113e:	4a15      	ldr	r2, [pc, #84]	@ (8001194 <MX_USART1_UART_Init+0x5c>)
 8001140:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001142:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <MX_USART1_UART_Init+0x58>)
 8001144:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001148:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <MX_USART1_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <MX_USART1_UART_Init+0x58>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <MX_USART1_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <MX_USART1_UART_Init+0x58>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <MX_USART1_UART_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <MX_USART1_UART_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116e:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <MX_USART1_UART_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <MX_USART1_UART_Init+0x58>)
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_USART1_UART_Init+0x58>)
 800117c:	f002 fec0 	bl	8003f00 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001186:	f000 fa53 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000016c 	.word	0x2000016c
 8001194:	40011000 	.word	0x40011000

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	@ 0x30
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	4b7f      	ldr	r3, [pc, #508]	@ (80013ac <MX_GPIO_Init+0x214>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a7e      	ldr	r2, [pc, #504]	@ (80013ac <MX_GPIO_Init+0x214>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b7c      	ldr	r3, [pc, #496]	@ (80013ac <MX_GPIO_Init+0x214>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c6:	4b79      	ldr	r3, [pc, #484]	@ (80013ac <MX_GPIO_Init+0x214>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a78      	ldr	r2, [pc, #480]	@ (80013ac <MX_GPIO_Init+0x214>)
 80011cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b76      	ldr	r3, [pc, #472]	@ (80013ac <MX_GPIO_Init+0x214>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b73      	ldr	r3, [pc, #460]	@ (80013ac <MX_GPIO_Init+0x214>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a72      	ldr	r2, [pc, #456]	@ (80013ac <MX_GPIO_Init+0x214>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b70      	ldr	r3, [pc, #448]	@ (80013ac <MX_GPIO_Init+0x214>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	4b6d      	ldr	r3, [pc, #436]	@ (80013ac <MX_GPIO_Init+0x214>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a6c      	ldr	r2, [pc, #432]	@ (80013ac <MX_GPIO_Init+0x214>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b6a      	ldr	r3, [pc, #424]	@ (80013ac <MX_GPIO_Init+0x214>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	4b67      	ldr	r3, [pc, #412]	@ (80013ac <MX_GPIO_Init+0x214>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a66      	ldr	r2, [pc, #408]	@ (80013ac <MX_GPIO_Init+0x214>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b64      	ldr	r3, [pc, #400]	@ (80013ac <MX_GPIO_Init+0x214>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001226:	4b61      	ldr	r3, [pc, #388]	@ (80013ac <MX_GPIO_Init+0x214>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a60      	ldr	r2, [pc, #384]	@ (80013ac <MX_GPIO_Init+0x214>)
 800122c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b5e      	ldr	r3, [pc, #376]	@ (80013ac <MX_GPIO_Init+0x214>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f244 0183 	movw	r1, #16515	@ 0x4083
 8001244:	485a      	ldr	r0, [pc, #360]	@ (80013b0 <MX_GPIO_Init+0x218>)
 8001246:	f000 ff7d 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2140      	movs	r1, #64	@ 0x40
 800124e:	4859      	ldr	r0, [pc, #356]	@ (80013b4 <MX_GPIO_Init+0x21c>)
 8001250:	f000 ff78 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001254:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4619      	mov	r1, r3
 800126a:	4853      	ldr	r0, [pc, #332]	@ (80013b8 <MX_GPIO_Init+0x220>)
 800126c:	f000 fdbe 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001270:	2332      	movs	r3, #50	@ 0x32
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001280:	230b      	movs	r3, #11
 8001282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	484b      	ldr	r0, [pc, #300]	@ (80013b8 <MX_GPIO_Init+0x220>)
 800128c:	f000 fdae 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001290:	2386      	movs	r3, #134	@ 0x86
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a0:	230b      	movs	r3, #11
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	4844      	ldr	r0, [pc, #272]	@ (80013bc <MX_GPIO_Init+0x224>)
 80012ac:	f000 fd9e 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB1 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|LD3_Pin|LD2_Pin;
 80012b0:	f244 0383 	movw	r3, #16515	@ 0x4083
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4839      	ldr	r0, [pc, #228]	@ (80013b0 <MX_GPIO_Init+0x218>)
 80012ca:	f000 fd8f 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e0:	230b      	movs	r3, #11
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4831      	ldr	r0, [pc, #196]	@ (80013b0 <MX_GPIO_Init+0x218>)
 80012ec:	f000 fd7e 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001302:	2307      	movs	r3, #7
 8001304:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	4619      	mov	r1, r3
 800130c:	482c      	ldr	r0, [pc, #176]	@ (80013c0 <MX_GPIO_Init+0x228>)
 800130e:	f000 fd6d 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001312:	2340      	movs	r3, #64	@ 0x40
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4822      	ldr	r0, [pc, #136]	@ (80013b4 <MX_GPIO_Init+0x21c>)
 800132a:	f000 fd5f 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	481c      	ldr	r0, [pc, #112]	@ (80013b4 <MX_GPIO_Init+0x21c>)
 8001342:	f000 fd53 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001346:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001358:	230a      	movs	r3, #10
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4816      	ldr	r0, [pc, #88]	@ (80013bc <MX_GPIO_Init+0x224>)
 8001364:	f000 fd42 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001368:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	480f      	ldr	r0, [pc, #60]	@ (80013bc <MX_GPIO_Init+0x224>)
 800137e:	f000 fd35 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001382:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001394:	230b      	movs	r3, #11
 8001396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_GPIO_Init+0x21c>)
 80013a0:	f000 fd24 	bl	8001dec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013a4:	bf00      	nop
 80013a6:	3730      	adds	r7, #48	@ 0x30
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40021800 	.word	0x40021800
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020c00 	.word	0x40020c00

080013c4 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80013cc:	1d39      	adds	r1, r7, #4
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	2201      	movs	r2, #1
 80013d4:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <__io_putchar+0x20>)
 80013d6:	f002 fde1 	bl	8003f9c <HAL_UART_Transmit>

  return ch;
 80013da:	687b      	ldr	r3, [r7, #4]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2000016c 	.word	0x2000016c

080013e8 <process_SD_card>:

void process_SD_card( void )
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	f5ad 5d03 	sub.w	sp, sp, #8384	@ 0x20c0
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
  FRESULT     fres;                 //Result after operations
  char        buf[100];
  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 80013f2:	4b7e      	ldr	r3, [pc, #504]	@ (80015ec <process_SD_card+0x204>)
 80013f4:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80013f8:	f103 0320 	add.w	r3, r3, #32
 80013fc:	443b      	add	r3, r7
 80013fe:	2201      	movs	r2, #1
 8001400:	497b      	ldr	r1, [pc, #492]	@ (80015f0 <process_SD_card+0x208>)
 8001402:	4618      	mov	r0, r3
 8001404:	f005 fd1a 	bl	8006e3c <f_mount>
 8001408:	4603      	mov	r3, r0
 800140a:	f242 02df 	movw	r2, #8415	@ 0x20df
 800140e:	443a      	add	r2, r7
 8001410:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 8001412:	f242 03df 	movw	r3, #8415	@ 0x20df
 8001416:	443b      	add	r3, r7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d008      	beq.n	8001430 <process_SD_card+0x48>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 800141e:	f242 03df 	movw	r3, #8415	@ 0x20df
 8001422:	443b      	add	r3, r7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	4619      	mov	r1, r3
 8001428:	4872      	ldr	r0, [pc, #456]	@ (80015f4 <process_SD_card+0x20c>)
 800142a:	f006 fe23 	bl	8008074 <iprintf>
      break;
 800142e:	e0ce      	b.n	80015ce <process_SD_card+0x1e6>
    }
    printf("SD Card Mounted Successfully!!!\r\n");
 8001430:	4871      	ldr	r0, [pc, #452]	@ (80015f8 <process_SD_card+0x210>)
 8001432:	f006 fe87 	bl	8008144 <puts>
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;
    f_getfree("", &fre_clust, &pfs);
 8001436:	4a71      	ldr	r2, [pc, #452]	@ (80015fc <process_SD_card+0x214>)
 8001438:	f242 03e0 	movw	r3, #8416	@ 0x20e0
 800143c:	4413      	add	r3, r2
 800143e:	19da      	adds	r2, r3, r7
 8001440:	4b6f      	ldr	r3, [pc, #444]	@ (8001600 <process_SD_card+0x218>)
 8001442:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8001446:	f103 0320 	add.w	r3, r3, #32
 800144a:	443b      	add	r3, r7
 800144c:	4619      	mov	r1, r3
 800144e:	4868      	ldr	r0, [pc, #416]	@ (80015f0 <process_SD_card+0x208>)
 8001450:	f006 fa9d 	bl	800798e <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001454:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001458:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	3b02      	subs	r3, #2
 8001460:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8001464:	f852 2cdc 	ldr.w	r2, [r2, #-220]
 8001468:	8952      	ldrh	r2, [r2, #10]
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001476:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800147a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800147e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001482:	ee17 3a90 	vmov	r3, s15
 8001486:	f242 02d8 	movw	r2, #8408	@ 0x20d8
 800148a:	443a      	add	r2, r7
 800148c:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800148e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001492:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8001496:	895b      	ldrh	r3, [r3, #10]
 8001498:	461a      	mov	r2, r3
 800149a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800149e:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80014ae:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80014b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014ba:	ee17 3a90 	vmov	r3, s15
 80014be:	f242 02d4 	movw	r2, #8404	@ 0x20d4
 80014c2:	443a      	add	r2, r7
 80014c4:	6013      	str	r3, [r2, #0]
    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
 80014c6:	f242 03d4 	movw	r3, #8404	@ 0x20d4
 80014ca:	443b      	add	r3, r7
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	f242 03d8 	movw	r3, #8408	@ 0x20d8
 80014d2:	443b      	add	r3, r7
 80014d4:	6819      	ldr	r1, [r3, #0]
 80014d6:	484b      	ldr	r0, [pc, #300]	@ (8001604 <process_SD_card+0x21c>)
 80014d8:	f006 fdcc 	bl	8008074 <iprintf>
    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 80014dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001608 <process_SD_card+0x220>)
 80014de:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80014e2:	f103 0320 	add.w	r3, r3, #32
 80014e6:	443b      	add	r3, r7
 80014e8:	220b      	movs	r2, #11
 80014ea:	4948      	ldr	r1, [pc, #288]	@ (800160c <process_SD_card+0x224>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f005 fceb 	bl	8006ec8 <f_open>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f242 02df 	movw	r2, #8415	@ 0x20df
 80014f8:	443a      	add	r2, r7
 80014fa:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 80014fc:	f242 03df 	movw	r3, #8415	@ 0x20df
 8001500:	443b      	add	r3, r7
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <process_SD_card+0x132>
    {
      printf("File creation/open Error : (%i)\r\n", fres);
 8001508:	f242 03df 	movw	r3, #8415	@ 0x20df
 800150c:	443b      	add	r3, r7
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	483f      	ldr	r0, [pc, #252]	@ (8001610 <process_SD_card+0x228>)
 8001514:	f006 fdae 	bl	8008074 <iprintf>
      break;
 8001518:	e059      	b.n	80015ce <process_SD_card+0x1e6>
    }
    printf("Writing data!!!\r\n");
 800151a:	483e      	ldr	r0, [pc, #248]	@ (8001614 <process_SD_card+0x22c>)
 800151c:	f006 fe12 	bl	8008144 <puts>
    //write the data
    f_puts("Welcome to EmbeTronicX", &fil);
 8001520:	4b39      	ldr	r3, [pc, #228]	@ (8001608 <process_SD_card+0x220>)
 8001522:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8001526:	f103 0320 	add.w	r3, r3, #32
 800152a:	443b      	add	r3, r7
 800152c:	4619      	mov	r1, r3
 800152e:	483a      	ldr	r0, [pc, #232]	@ (8001618 <process_SD_card+0x230>)
 8001530:	f006 fb97 	bl	8007c62 <f_puts>
    //close your file
    f_close(&fil);
 8001534:	4b34      	ldr	r3, [pc, #208]	@ (8001608 <process_SD_card+0x220>)
 8001536:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800153a:	f103 0320 	add.w	r3, r3, #32
 800153e:	443b      	add	r3, r7
 8001540:	4618      	mov	r0, r3
 8001542:	f006 f9fa 	bl	800793a <f_close>
    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_READ);
 8001546:	4b30      	ldr	r3, [pc, #192]	@ (8001608 <process_SD_card+0x220>)
 8001548:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800154c:	f103 0320 	add.w	r3, r3, #32
 8001550:	443b      	add	r3, r7
 8001552:	2201      	movs	r2, #1
 8001554:	492d      	ldr	r1, [pc, #180]	@ (800160c <process_SD_card+0x224>)
 8001556:	4618      	mov	r0, r3
 8001558:	f005 fcb6 	bl	8006ec8 <f_open>
 800155c:	4603      	mov	r3, r0
 800155e:	f242 02df 	movw	r2, #8415	@ 0x20df
 8001562:	443a      	add	r2, r7
 8001564:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001566:	f242 03df 	movw	r3, #8415	@ 0x20df
 800156a:	443b      	add	r3, r7
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d008      	beq.n	8001584 <process_SD_card+0x19c>
    {
      printf("File opening Error : (%i)\r\n", fres);
 8001572:	f242 03df 	movw	r3, #8415	@ 0x20df
 8001576:	443b      	add	r3, r7
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	4619      	mov	r1, r3
 800157c:	4827      	ldr	r0, [pc, #156]	@ (800161c <process_SD_card+0x234>)
 800157e:	f006 fd79 	bl	8008074 <iprintf>
      break;
 8001582:	e024      	b.n	80015ce <process_SD_card+0x1e6>
    }
    //read the data
    f_gets(buf, sizeof(buf), &fil);
 8001584:	4a20      	ldr	r2, [pc, #128]	@ (8001608 <process_SD_card+0x220>)
 8001586:	f242 03e0 	movw	r3, #8416	@ 0x20e0
 800158a:	4413      	add	r3, r2
 800158c:	19da      	adds	r2, r3, r7
 800158e:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <process_SD_card+0x238>)
 8001590:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8001594:	f103 0320 	add.w	r3, r3, #32
 8001598:	443b      	add	r3, r7
 800159a:	2164      	movs	r1, #100	@ 0x64
 800159c:	4618      	mov	r0, r3
 800159e:	f006 faab 	bl	8007af8 <f_gets>
    printf("Read Data : %s\n", buf);
 80015a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <process_SD_card+0x238>)
 80015a4:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80015a8:	f103 0320 	add.w	r3, r3, #32
 80015ac:	443b      	add	r3, r7
 80015ae:	4619      	mov	r1, r3
 80015b0:	481c      	ldr	r0, [pc, #112]	@ (8001624 <process_SD_card+0x23c>)
 80015b2:	f006 fd5f 	bl	8008074 <iprintf>
    //close your file
    f_close(&fil);
 80015b6:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <process_SD_card+0x220>)
 80015b8:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80015bc:	f103 0320 	add.w	r3, r3, #32
 80015c0:	443b      	add	r3, r7
 80015c2:	4618      	mov	r0, r3
 80015c4:	f006 f9b9 	bl	800793a <f_close>
    printf("Closing File!!!\r\n");
 80015c8:	4817      	ldr	r0, [pc, #92]	@ (8001628 <process_SD_card+0x240>)
 80015ca:	f006 fdbb 	bl	8008144 <puts>
      printf("Cannot able to delete the file\n");
    }
#endif
  } while( false );
  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	4907      	ldr	r1, [pc, #28]	@ (80015f0 <process_SD_card+0x208>)
 80015d2:	2000      	movs	r0, #0
 80015d4:	f005 fc32 	bl	8006e3c <f_mount>
  printf("SD Card Unmounted Successfully!!!\r\n");
 80015d8:	4814      	ldr	r0, [pc, #80]	@ (800162c <process_SD_card+0x244>)
 80015da:	f006 fdb3 	bl	8008144 <puts>
}
 80015de:	bf00      	nop
 80015e0:	f507 5703 	add.w	r7, r7, #8384	@ 0x20c0
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	ffffefbc 	.word	0xffffefbc
 80015f0:	08008e24 	.word	0x08008e24
 80015f4:	08008e28 	.word	0x08008e28
 80015f8:	08008e44 	.word	0x08008e44
 80015fc:	ffffdf24 	.word	0xffffdf24
 8001600:	ffffdf20 	.word	0xffffdf20
 8001604:	08008e68 	.word	0x08008e68
 8001608:	ffffdf8c 	.word	0xffffdf8c
 800160c:	08008e98 	.word	0x08008e98
 8001610:	08008ea8 	.word	0x08008ea8
 8001614:	08008ecc 	.word	0x08008ecc
 8001618:	08008ee0 	.word	0x08008ee0
 800161c:	08008ef8 	.word	0x08008ef8
 8001620:	ffffdf28 	.word	0xffffdf28
 8001624:	08008f14 	.word	0x08008f14
 8001628:	08008f24 	.word	0x08008f24
 800162c:	08008f38 	.word	0x08008f38

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <Error_Handler+0x8>

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <HAL_MspInit+0x44>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	4a0e      	ldr	r2, [pc, #56]	@ (8001680 <HAL_MspInit+0x44>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800164c:	6413      	str	r3, [r2, #64]	@ 0x40
 800164e:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <HAL_MspInit+0x44>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_MspInit+0x44>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	4a08      	ldr	r2, [pc, #32]	@ (8001680 <HAL_MspInit+0x44>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001664:	6453      	str	r3, [r2, #68]	@ 0x44
 8001666:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_MspInit+0x44>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08e      	sub	sp, #56	@ 0x38
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a4a      	ldr	r2, [pc, #296]	@ (80017cc <HAL_SPI_MspInit+0x148>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d144      	bne.n	8001730 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016a6:	4b4a      	ldr	r3, [pc, #296]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	4a49      	ldr	r2, [pc, #292]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 80016ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b2:	4b47      	ldr	r3, [pc, #284]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ba:	623b      	str	r3, [r7, #32]
 80016bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	4b44      	ldr	r3, [pc, #272]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a43      	ldr	r2, [pc, #268]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b41      	ldr	r3, [pc, #260]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	61fb      	str	r3, [r7, #28]
 80016d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d6:	4b3e      	ldr	r3, [pc, #248]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a3d      	ldr	r2, [pc, #244]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 80016dc:	f043 0308 	orr.w	r3, r3, #8
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b3b      	ldr	r3, [pc, #236]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016ee:	2360      	movs	r3, #96	@ 0x60
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016fe:	2305      	movs	r3, #5
 8001700:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001706:	4619      	mov	r1, r3
 8001708:	4832      	ldr	r0, [pc, #200]	@ (80017d4 <HAL_SPI_MspInit+0x150>)
 800170a:	f000 fb6f 	bl	8001dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800170e:	2380      	movs	r3, #128	@ 0x80
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800171e:	2305      	movs	r3, #5
 8001720:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001726:	4619      	mov	r1, r3
 8001728:	482b      	ldr	r0, [pc, #172]	@ (80017d8 <HAL_SPI_MspInit+0x154>)
 800172a:	f000 fb5f 	bl	8001dec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800172e:	e049      	b.n	80017c4 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a29      	ldr	r2, [pc, #164]	@ (80017dc <HAL_SPI_MspInit+0x158>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d144      	bne.n	80017c4 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800173a:	4b25      	ldr	r3, [pc, #148]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	4a24      	ldr	r2, [pc, #144]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001744:	6413      	str	r3, [r2, #64]	@ 0x40
 8001746:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001752:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a1e      	ldr	r2, [pc, #120]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a18      	ldr	r2, [pc, #96]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001782:	230c      	movs	r3, #12
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001792:	2305      	movs	r3, #5
 8001794:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	4810      	ldr	r0, [pc, #64]	@ (80017e0 <HAL_SPI_MspInit+0x15c>)
 800179e:	f000 fb25 	bl	8001dec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017b4:	2305      	movs	r3, #5
 80017b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	4809      	ldr	r0, [pc, #36]	@ (80017e4 <HAL_SPI_MspInit+0x160>)
 80017c0:	f000 fb14 	bl	8001dec <HAL_GPIO_Init>
}
 80017c4:	bf00      	nop
 80017c6:	3738      	adds	r7, #56	@ 0x38
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40013000 	.word	0x40013000
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	40003800 	.word	0x40003800
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020400 	.word	0x40020400

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0ae      	sub	sp, #184	@ 0xb8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2290      	movs	r2, #144	@ 0x90
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f006 fd7b 	bl	8008304 <memset>
  if(huart->Instance==USART1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a2c      	ldr	r2, [pc, #176]	@ (80018c4 <HAL_UART_MspInit+0xdc>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d150      	bne.n	80018ba <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001818:	2340      	movs	r3, #64	@ 0x40
 800181a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800181c:	2300      	movs	r3, #0
 800181e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4618      	mov	r0, r3
 8001826:	f001 f979 	bl	8002b1c <HAL_RCCEx_PeriphCLKConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001830:	f7ff fefe 	bl	8001630 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001834:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <HAL_UART_MspInit+0xe0>)
 8001836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001838:	4a23      	ldr	r2, [pc, #140]	@ (80018c8 <HAL_UART_MspInit+0xe0>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001840:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <HAL_UART_MspInit+0xe0>)
 8001842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184c:	4b1e      	ldr	r3, [pc, #120]	@ (80018c8 <HAL_UART_MspInit+0xe0>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001850:	4a1d      	ldr	r2, [pc, #116]	@ (80018c8 <HAL_UART_MspInit+0xe0>)
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	6313      	str	r3, [r2, #48]	@ 0x30
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <HAL_UART_MspInit+0xe0>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001864:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001868:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800187e:	2304      	movs	r3, #4
 8001880:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001888:	4619      	mov	r1, r3
 800188a:	4810      	ldr	r0, [pc, #64]	@ (80018cc <HAL_UART_MspInit+0xe4>)
 800188c:	f000 faae 	bl	8001dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001890:	2340      	movs	r3, #64	@ 0x40
 8001892:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018a8:	2307      	movs	r3, #7
 80018aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	@ (80018cc <HAL_UART_MspInit+0xe4>)
 80018b6:	f000 fa99 	bl	8001dec <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80018ba:	bf00      	nop
 80018bc:	37b8      	adds	r7, #184	@ 0xb8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40011000 	.word	0x40011000
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020400 	.word	0x40020400

080018d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <NMI_Handler+0x4>

080018d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <MemManage_Handler+0x4>

080018e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <BusFault_Handler+0x4>

080018f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <UsageFault_Handler+0x4>

080018f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001928:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <SysTick_Handler+0x34>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <SysTick_Handler+0x18>
	  Timer1--;
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <SysTick_Handler+0x34>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	3b01      	subs	r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <SysTick_Handler+0x34>)
 800193a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800193c:	4b07      	ldr	r3, [pc, #28]	@ (800195c <SysTick_Handler+0x38>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <SysTick_Handler+0x2c>
	  Timer2--;
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <SysTick_Handler+0x38>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	3b01      	subs	r3, #1
 800194a:	b29a      	uxth	r2, r3
 800194c:	4b03      	ldr	r3, [pc, #12]	@ (800195c <SysTick_Handler+0x38>)
 800194e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001950:	f000 f922 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	2000009c 	.word	0x2000009c
 800195c:	2000009e 	.word	0x2000009e

08001960 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	e00a      	b.n	8001988 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001972:	f3af 8000 	nop.w
 8001976:	4601      	mov	r1, r0
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	60ba      	str	r2, [r7, #8]
 800197e:	b2ca      	uxtb	r2, r1
 8001980:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	dbf0      	blt.n	8001972 <_read+0x12>
  }

  return len;
 8001990:	687b      	ldr	r3, [r7, #4]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e009      	b.n	80019c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	60ba      	str	r2, [r7, #8]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fd05 	bl	80013c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbf1      	blt.n	80019ac <_write+0x12>
  }
  return len;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_close>:

int _close(int file)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019fa:	605a      	str	r2, [r3, #4]
  return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <_isatty>:

int _isatty(int file)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a44:	4a14      	ldr	r2, [pc, #80]	@ (8001a98 <_sbrk+0x5c>)
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <_sbrk+0x60>)
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <_sbrk+0x64>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <_sbrk+0x68>)
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d207      	bcs.n	8001a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a6c:	f006 fc98 	bl	80083a0 <__errno>
 8001a70:	4603      	mov	r3, r0
 8001a72:	220c      	movs	r2, #12
 8001a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	e009      	b.n	8001a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a82:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <_sbrk+0x64>)
 8001a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20080000 	.word	0x20080000
 8001a9c:	00000400 	.word	0x00000400
 8001aa0:	200001f4 	.word	0x200001f4
 8001aa4:	20000588 	.word	0x20000588

08001aa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <SystemInit+0x20>)
 8001aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ab2:	4a05      	ldr	r2, [pc, #20]	@ (8001ac8 <SystemInit+0x20>)
 8001ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001acc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ad0:	f7ff ffea 	bl	8001aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad4:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ad6:	490d      	ldr	r1, [pc, #52]	@ (8001b0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aec:	4c0a      	ldr	r4, [pc, #40]	@ (8001b18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001afa:	f006 fc57 	bl	80083ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afe:	f7ff fa2f 	bl	8000f60 <main>
  bx  lr    
 8001b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b04:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b0c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001b10:	08009440 	.word	0x08009440
  ldr r2, =_sbss
 8001b14:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001b18:	20000584 	.word	0x20000584

08001b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC_IRQHandler>

08001b1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b22:	2003      	movs	r0, #3
 8001b24:	f000 f92e 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f000 f805 	bl	8001b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2e:	f7ff fd85 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_InitTick+0x54>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_InitTick+0x58>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f93b 	bl	8001dd2 <HAL_SYSTICK_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00e      	b.n	8001b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d80a      	bhi.n	8001b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f000 f911 	bl	8001d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b78:	4a06      	ldr	r2, [pc, #24]	@ (8001b94 <HAL_InitTick+0x5c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	2000000c 	.word	0x2000000c
 8001b94:	20000008 	.word	0x20000008

08001b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_IncTick+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_IncTick+0x24>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <HAL_IncTick+0x24>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	2000000c 	.word	0x2000000c
 8001bbc:	200001f8 	.word	0x200001f8

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	200001f8 	.word	0x200001f8

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff ffee 	bl	8001bc0 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d005      	beq.n	8001bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_Delay+0x44>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bfe:	bf00      	nop
 8001c00:	f7ff ffde 	bl	8001bc0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8f7      	bhi.n	8001c00 <HAL_Delay+0x28>
  {
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000000c 	.word	0x2000000c

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x40>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x40>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00
 8001c64:	05fa0000 	.word	0x05fa0000

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	@ (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	@ (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	@ 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	@ 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d50:	d301      	bcc.n	8001d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00f      	b.n	8001d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d56:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <SysTick_Config+0x40>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5e:	210f      	movs	r1, #15
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	f7ff ff8e 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <SysTick_Config+0x40>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6e:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <SysTick_Config+0x40>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff47 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dac:	f7ff ff5c 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7ff ff8e 	bl	8001cd8 <NVIC_EncodePriority>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff5d 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffb0 	bl	8001d40 <SysTick_Config>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	@ 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	e175      	b.n	80020f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	f040 8164 	bne.w	80020f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d005      	beq.n	8001e42 <HAL_GPIO_Init+0x56>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d130      	bne.n	8001ea4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e78:	2201      	movs	r2, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 0201 	and.w	r2, r3, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d017      	beq.n	8001ee0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d123      	bne.n	8001f34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	220f      	movs	r2, #15
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	08da      	lsrs	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3208      	adds	r2, #8
 8001f2e:	69b9      	ldr	r1, [r7, #24]
 8001f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0203 	and.w	r2, r3, #3
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80be 	beq.w	80020f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	4b66      	ldr	r3, [pc, #408]	@ (8002110 <HAL_GPIO_Init+0x324>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	4a65      	ldr	r2, [pc, #404]	@ (8002110 <HAL_GPIO_Init+0x324>)
 8001f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f82:	4b63      	ldr	r3, [pc, #396]	@ (8002110 <HAL_GPIO_Init+0x324>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f8e:	4a61      	ldr	r2, [pc, #388]	@ (8002114 <HAL_GPIO_Init+0x328>)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3302      	adds	r3, #2
 8001f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a58      	ldr	r2, [pc, #352]	@ (8002118 <HAL_GPIO_Init+0x32c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d037      	beq.n	800202a <HAL_GPIO_Init+0x23e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a57      	ldr	r2, [pc, #348]	@ (800211c <HAL_GPIO_Init+0x330>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d031      	beq.n	8002026 <HAL_GPIO_Init+0x23a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a56      	ldr	r2, [pc, #344]	@ (8002120 <HAL_GPIO_Init+0x334>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d02b      	beq.n	8002022 <HAL_GPIO_Init+0x236>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a55      	ldr	r2, [pc, #340]	@ (8002124 <HAL_GPIO_Init+0x338>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d025      	beq.n	800201e <HAL_GPIO_Init+0x232>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a54      	ldr	r2, [pc, #336]	@ (8002128 <HAL_GPIO_Init+0x33c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01f      	beq.n	800201a <HAL_GPIO_Init+0x22e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a53      	ldr	r2, [pc, #332]	@ (800212c <HAL_GPIO_Init+0x340>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d019      	beq.n	8002016 <HAL_GPIO_Init+0x22a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a52      	ldr	r2, [pc, #328]	@ (8002130 <HAL_GPIO_Init+0x344>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_GPIO_Init+0x226>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a51      	ldr	r2, [pc, #324]	@ (8002134 <HAL_GPIO_Init+0x348>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00d      	beq.n	800200e <HAL_GPIO_Init+0x222>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a50      	ldr	r2, [pc, #320]	@ (8002138 <HAL_GPIO_Init+0x34c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d007      	beq.n	800200a <HAL_GPIO_Init+0x21e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4f      	ldr	r2, [pc, #316]	@ (800213c <HAL_GPIO_Init+0x350>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d101      	bne.n	8002006 <HAL_GPIO_Init+0x21a>
 8002002:	2309      	movs	r3, #9
 8002004:	e012      	b.n	800202c <HAL_GPIO_Init+0x240>
 8002006:	230a      	movs	r3, #10
 8002008:	e010      	b.n	800202c <HAL_GPIO_Init+0x240>
 800200a:	2308      	movs	r3, #8
 800200c:	e00e      	b.n	800202c <HAL_GPIO_Init+0x240>
 800200e:	2307      	movs	r3, #7
 8002010:	e00c      	b.n	800202c <HAL_GPIO_Init+0x240>
 8002012:	2306      	movs	r3, #6
 8002014:	e00a      	b.n	800202c <HAL_GPIO_Init+0x240>
 8002016:	2305      	movs	r3, #5
 8002018:	e008      	b.n	800202c <HAL_GPIO_Init+0x240>
 800201a:	2304      	movs	r3, #4
 800201c:	e006      	b.n	800202c <HAL_GPIO_Init+0x240>
 800201e:	2303      	movs	r3, #3
 8002020:	e004      	b.n	800202c <HAL_GPIO_Init+0x240>
 8002022:	2302      	movs	r3, #2
 8002024:	e002      	b.n	800202c <HAL_GPIO_Init+0x240>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_GPIO_Init+0x240>
 800202a:	2300      	movs	r3, #0
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	f002 0203 	and.w	r2, r2, #3
 8002032:	0092      	lsls	r2, r2, #2
 8002034:	4093      	lsls	r3, r2
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800203c:	4935      	ldr	r1, [pc, #212]	@ (8002114 <HAL_GPIO_Init+0x328>)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204a:	4b3d      	ldr	r3, [pc, #244]	@ (8002140 <HAL_GPIO_Init+0x354>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800206e:	4a34      	ldr	r2, [pc, #208]	@ (8002140 <HAL_GPIO_Init+0x354>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002074:	4b32      	ldr	r3, [pc, #200]	@ (8002140 <HAL_GPIO_Init+0x354>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002098:	4a29      	ldr	r2, [pc, #164]	@ (8002140 <HAL_GPIO_Init+0x354>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800209e:	4b28      	ldr	r3, [pc, #160]	@ (8002140 <HAL_GPIO_Init+0x354>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002140 <HAL_GPIO_Init+0x354>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <HAL_GPIO_Init+0x354>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ec:	4a14      	ldr	r2, [pc, #80]	@ (8002140 <HAL_GPIO_Init+0x354>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3301      	adds	r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b0f      	cmp	r3, #15
 80020fc:	f67f ae86 	bls.w	8001e0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3724      	adds	r7, #36	@ 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	40013800 	.word	0x40013800
 8002118:	40020000 	.word	0x40020000
 800211c:	40020400 	.word	0x40020400
 8002120:	40020800 	.word	0x40020800
 8002124:	40020c00 	.word	0x40020c00
 8002128:	40021000 	.word	0x40021000
 800212c:	40021400 	.word	0x40021400
 8002130:	40021800 	.word	0x40021800
 8002134:	40021c00 	.word	0x40021c00
 8002138:	40022000 	.word	0x40022000
 800213c:	40022400 	.word	0x40022400
 8002140:	40013c00 	.word	0x40013c00

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002160:	e003      	b.n	800216a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	619a      	str	r2, [r3, #24]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e29b      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8087 	beq.w	80022aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800219c:	4b96      	ldr	r3, [pc, #600]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d00c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a8:	4b93      	ldr	r3, [pc, #588]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d112      	bne.n	80021da <HAL_RCC_OscConfig+0x62>
 80021b4:	4b90      	ldr	r3, [pc, #576]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021c0:	d10b      	bne.n	80021da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c2:	4b8d      	ldr	r3, [pc, #564]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d06c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x130>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d168      	bne.n	80022a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e275      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x7a>
 80021e4:	4b84      	ldr	r3, [pc, #528]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a83      	ldr	r2, [pc, #524]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80021ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	e02e      	b.n	8002250 <HAL_RCC_OscConfig+0xd8>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x9c>
 80021fa:	4b7f      	ldr	r3, [pc, #508]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a7e      	ldr	r2, [pc, #504]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b7c      	ldr	r3, [pc, #496]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a7b      	ldr	r2, [pc, #492]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800220c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e01d      	b.n	8002250 <HAL_RCC_OscConfig+0xd8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0xc0>
 800221e:	4b76      	ldr	r3, [pc, #472]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a75      	ldr	r2, [pc, #468]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b73      	ldr	r3, [pc, #460]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a72      	ldr	r2, [pc, #456]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e00b      	b.n	8002250 <HAL_RCC_OscConfig+0xd8>
 8002238:	4b6f      	ldr	r3, [pc, #444]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a6e      	ldr	r2, [pc, #440]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800223e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b6c      	ldr	r3, [pc, #432]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a6b      	ldr	r2, [pc, #428]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800224a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800224e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7ff fcb2 	bl	8001bc0 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7ff fcae 	bl	8001bc0 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	@ 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e229      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b61      	ldr	r3, [pc, #388]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0xe8>
 800227e:	e014      	b.n	80022aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7ff fc9e 	bl	8001bc0 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7ff fc9a 	bl	8001bc0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	@ 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e215      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	4b57      	ldr	r3, [pc, #348]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x110>
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d069      	beq.n	800238a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b6:	4b50      	ldr	r3, [pc, #320]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c2:	4b4d      	ldr	r3, [pc, #308]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d11c      	bne.n	8002308 <HAL_RCC_OscConfig+0x190>
 80022ce:	4b4a      	ldr	r3, [pc, #296]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d116      	bne.n	8002308 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	4b47      	ldr	r3, [pc, #284]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_RCC_OscConfig+0x17a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e1e9      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f2:	4b41      	ldr	r3, [pc, #260]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	493d      	ldr	r1, [pc, #244]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	e040      	b.n	800238a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d023      	beq.n	8002358 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002310:	4b39      	ldr	r3, [pc, #228]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a38      	ldr	r2, [pc, #224]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7ff fc50 	bl	8001bc0 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002324:	f7ff fc4c 	bl	8001bc0 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e1c7      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002336:	4b30      	ldr	r3, [pc, #192]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4929      	ldr	r1, [pc, #164]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
 8002356:	e018      	b.n	800238a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002358:	4b27      	ldr	r3, [pc, #156]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a26      	ldr	r2, [pc, #152]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7ff fc2c 	bl	8001bc0 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236c:	f7ff fc28 	bl	8001bc0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e1a3      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	4b1e      	ldr	r3, [pc, #120]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d038      	beq.n	8002408 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d019      	beq.n	80023d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239e:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80023a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a2:	4a15      	ldr	r2, [pc, #84]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023aa:	f7ff fc09 	bl	8001bc0 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b2:	f7ff fc05 	bl	8001bc0 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e180      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80023c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x23a>
 80023d0:	e01a      	b.n	8002408 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80023d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d6:	4a08      	ldr	r2, [pc, #32]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023de:	f7ff fbef 	bl	8001bc0 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e6:	f7ff fbeb 	bl	8001bc0 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d903      	bls.n	80023fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e166      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
 80023f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	4b92      	ldr	r3, [pc, #584]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80023fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1ee      	bne.n	80023e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80a4 	beq.w	800255e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002416:	4b8c      	ldr	r3, [pc, #560]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10d      	bne.n	800243e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4b89      	ldr	r3, [pc, #548]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	4a88      	ldr	r2, [pc, #544]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242c:	6413      	str	r3, [r2, #64]	@ 0x40
 800242e:	4b86      	ldr	r3, [pc, #536]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243a:	2301      	movs	r3, #1
 800243c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800243e:	4b83      	ldr	r3, [pc, #524]	@ (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d118      	bne.n	800247c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800244a:	4b80      	ldr	r3, [pc, #512]	@ (800264c <HAL_RCC_OscConfig+0x4d4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7f      	ldr	r2, [pc, #508]	@ (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002456:	f7ff fbb3 	bl	8001bc0 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245e:	f7ff fbaf 	bl	8001bc0 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b64      	cmp	r3, #100	@ 0x64
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e12a      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002470:	4b76      	ldr	r3, [pc, #472]	@ (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x31a>
 8002484:	4b70      	ldr	r3, [pc, #448]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002488:	4a6f      	ldr	r2, [pc, #444]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002490:	e02d      	b.n	80024ee <HAL_RCC_OscConfig+0x376>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x33c>
 800249a:	4b6b      	ldr	r3, [pc, #428]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249e:	4a6a      	ldr	r2, [pc, #424]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a6:	4b68      	ldr	r3, [pc, #416]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024aa:	4a67      	ldr	r2, [pc, #412]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024ac:	f023 0304 	bic.w	r3, r3, #4
 80024b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b2:	e01c      	b.n	80024ee <HAL_RCC_OscConfig+0x376>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d10c      	bne.n	80024d6 <HAL_RCC_OscConfig+0x35e>
 80024bc:	4b62      	ldr	r3, [pc, #392]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c0:	4a61      	ldr	r2, [pc, #388]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024cc:	4a5e      	ldr	r2, [pc, #376]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d4:	e00b      	b.n	80024ee <HAL_RCC_OscConfig+0x376>
 80024d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024da:	4a5b      	ldr	r2, [pc, #364]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e2:	4b59      	ldr	r3, [pc, #356]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e6:	4a58      	ldr	r2, [pc, #352]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d015      	beq.n	8002522 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f6:	f7ff fb63 	bl	8001bc0 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7ff fb5f 	bl	8001bc0 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e0d8      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	4b4c      	ldr	r3, [pc, #304]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ee      	beq.n	80024fe <HAL_RCC_OscConfig+0x386>
 8002520:	e014      	b.n	800254c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002522:	f7ff fb4d 	bl	8001bc0 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7ff fb49 	bl	8001bc0 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0c2      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	4b41      	ldr	r3, [pc, #260]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ee      	bne.n	800252a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d105      	bne.n	800255e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002552:	4b3d      	ldr	r3, [pc, #244]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	4a3c      	ldr	r2, [pc, #240]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800255c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80ae 	beq.w	80026c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002568:	4b37      	ldr	r3, [pc, #220]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b08      	cmp	r3, #8
 8002572:	d06d      	beq.n	8002650 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d14b      	bne.n	8002614 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257c:	4b32      	ldr	r3, [pc, #200]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a31      	ldr	r2, [pc, #196]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002582:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7ff fb1a 	bl	8001bc0 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7ff fb16 	bl	8001bc0 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e091      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a2:	4b29      	ldr	r3, [pc, #164]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	019b      	lsls	r3, r3, #6
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	085b      	lsrs	r3, r3, #1
 80025c6:	3b01      	subs	r3, #1
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	061b      	lsls	r3, r3, #24
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	071b      	lsls	r3, r3, #28
 80025da:	491b      	ldr	r1, [pc, #108]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e0:	4b19      	ldr	r3, [pc, #100]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a18      	ldr	r2, [pc, #96]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80025e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff fae8 	bl	8001bc0 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7ff fae4 	bl	8001bc0 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e05f      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x47c>
 8002612:	e057      	b.n	80026c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002614:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0b      	ldr	r2, [pc, #44]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 800261a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800261e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7ff face 	bl	8001bc0 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7ff faca 	bl	8001bc0 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e045      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263a:	4b03      	ldr	r3, [pc, #12]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x4b0>
 8002646:	e03d      	b.n	80026c4 <HAL_RCC_OscConfig+0x54c>
 8002648:	40023800 	.word	0x40023800
 800264c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002650:	4b1f      	ldr	r3, [pc, #124]	@ (80026d0 <HAL_RCC_OscConfig+0x558>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d030      	beq.n	80026c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d129      	bne.n	80026c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d122      	bne.n	80026c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002680:	4013      	ands	r3, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002686:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002688:	4293      	cmp	r3, r2
 800268a:	d119      	bne.n	80026c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	3b01      	subs	r3, #1
 800269a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d10f      	bne.n	80026c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0d0      	b.n	800288e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d910      	bls.n	800271c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b67      	ldr	r3, [pc, #412]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 020f 	bic.w	r2, r3, #15
 8002702:	4965      	ldr	r1, [pc, #404]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b63      	ldr	r3, [pc, #396]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b8      	b.n	800288e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002734:	4b59      	ldr	r3, [pc, #356]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a58      	ldr	r2, [pc, #352]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 800273a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800273e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800274c:	4b53      	ldr	r3, [pc, #332]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a52      	ldr	r2, [pc, #328]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002752:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002756:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002758:	4b50      	ldr	r3, [pc, #320]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	494d      	ldr	r1, [pc, #308]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d040      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b47      	ldr	r3, [pc, #284]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d115      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e07f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002796:	4b41      	ldr	r3, [pc, #260]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e073      	b.n	800288e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a6:	4b3d      	ldr	r3, [pc, #244]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e06b      	b.n	800288e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b6:	4b39      	ldr	r3, [pc, #228]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f023 0203 	bic.w	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4936      	ldr	r1, [pc, #216]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c8:	f7ff f9fa 	bl	8001bc0 <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d0:	f7ff f9f6 	bl	8001bc0 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e053      	b.n	800288e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	4b2d      	ldr	r3, [pc, #180]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 020c 	and.w	r2, r3, #12
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1eb      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f8:	4b27      	ldr	r3, [pc, #156]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d210      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b24      	ldr	r3, [pc, #144]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 020f 	bic.w	r2, r3, #15
 800280e:	4922      	ldr	r1, [pc, #136]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e032      	b.n	800288e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002834:	4b19      	ldr	r3, [pc, #100]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4916      	ldr	r1, [pc, #88]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002852:	4b12      	ldr	r3, [pc, #72]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	490e      	ldr	r1, [pc, #56]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002866:	f000 f821 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800286a:	4602      	mov	r2, r0
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	490a      	ldr	r1, [pc, #40]	@ (80028a0 <HAL_RCC_ClockConfig+0x1cc>)
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	fa22 f303 	lsr.w	r3, r2, r3
 800287e:	4a09      	ldr	r2, [pc, #36]	@ (80028a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_RCC_ClockConfig+0x1d4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f956 	bl	8001b38 <HAL_InitTick>

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023c00 	.word	0x40023c00
 800289c:	40023800 	.word	0x40023800
 80028a0:	08008fa4 	.word	0x08008fa4
 80028a4:	20000004 	.word	0x20000004
 80028a8:	20000008 	.word	0x20000008

080028ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b0:	b094      	sub	sp, #80	@ 0x50
 80028b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80028b8:	2300      	movs	r3, #0
 80028ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028bc:	2300      	movs	r3, #0
 80028be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c4:	4b79      	ldr	r3, [pc, #484]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d00d      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x40>
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	f200 80e1 	bhi.w	8002a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x34>
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028de:	e0db      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b73      	ldr	r3, [pc, #460]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e4:	e0db      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e6:	4b72      	ldr	r3, [pc, #456]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028ea:	e0d8      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028f6:	4b6d      	ldr	r3, [pc, #436]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d063      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002902:	4b6a      	ldr	r3, [pc, #424]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	2200      	movs	r2, #0
 800290a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800290c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800290e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002914:	633b      	str	r3, [r7, #48]	@ 0x30
 8002916:	2300      	movs	r3, #0
 8002918:	637b      	str	r3, [r7, #52]	@ 0x34
 800291a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800291e:	4622      	mov	r2, r4
 8002920:	462b      	mov	r3, r5
 8002922:	f04f 0000 	mov.w	r0, #0
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	0159      	lsls	r1, r3, #5
 800292c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002930:	0150      	lsls	r0, r2, #5
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4621      	mov	r1, r4
 8002938:	1a51      	subs	r1, r2, r1
 800293a:	6139      	str	r1, [r7, #16]
 800293c:	4629      	mov	r1, r5
 800293e:	eb63 0301 	sbc.w	r3, r3, r1
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002950:	4659      	mov	r1, fp
 8002952:	018b      	lsls	r3, r1, #6
 8002954:	4651      	mov	r1, sl
 8002956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800295a:	4651      	mov	r1, sl
 800295c:	018a      	lsls	r2, r1, #6
 800295e:	4651      	mov	r1, sl
 8002960:	ebb2 0801 	subs.w	r8, r2, r1
 8002964:	4659      	mov	r1, fp
 8002966:	eb63 0901 	sbc.w	r9, r3, r1
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800297a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297e:	4690      	mov	r8, r2
 8002980:	4699      	mov	r9, r3
 8002982:	4623      	mov	r3, r4
 8002984:	eb18 0303 	adds.w	r3, r8, r3
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	462b      	mov	r3, r5
 800298c:	eb49 0303 	adc.w	r3, r9, r3
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800299e:	4629      	mov	r1, r5
 80029a0:	028b      	lsls	r3, r1, #10
 80029a2:	4621      	mov	r1, r4
 80029a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a8:	4621      	mov	r1, r4
 80029aa:	028a      	lsls	r2, r1, #10
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029b2:	2200      	movs	r2, #0
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029bc:	f7fd fc90 	bl	80002e0 <__aeabi_uldivmod>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4613      	mov	r3, r2
 80029c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029c8:	e058      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ca:	4b38      	ldr	r3, [pc, #224]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	2200      	movs	r2, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	4611      	mov	r1, r2
 80029d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029e4:	4642      	mov	r2, r8
 80029e6:	464b      	mov	r3, r9
 80029e8:	f04f 0000 	mov.w	r0, #0
 80029ec:	f04f 0100 	mov.w	r1, #0
 80029f0:	0159      	lsls	r1, r3, #5
 80029f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f6:	0150      	lsls	r0, r2, #5
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4641      	mov	r1, r8
 80029fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a02:	4649      	mov	r1, r9
 8002a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002a20:	eb63 050b 	sbc.w	r5, r3, fp
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	00eb      	lsls	r3, r5, #3
 8002a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a32:	00e2      	lsls	r2, r4, #3
 8002a34:	4614      	mov	r4, r2
 8002a36:	461d      	mov	r5, r3
 8002a38:	4643      	mov	r3, r8
 8002a3a:	18e3      	adds	r3, r4, r3
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	464b      	mov	r3, r9
 8002a40:	eb45 0303 	adc.w	r3, r5, r3
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a52:	4629      	mov	r1, r5
 8002a54:	028b      	lsls	r3, r1, #10
 8002a56:	4621      	mov	r1, r4
 8002a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	028a      	lsls	r2, r1, #10
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a66:	2200      	movs	r2, #0
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	61fa      	str	r2, [r7, #28]
 8002a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a70:	f7fd fc36 	bl	80002e0 <__aeabi_uldivmod>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4613      	mov	r3, r2
 8002a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	0c1b      	lsrs	r3, r3, #16
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	3301      	adds	r3, #1
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3750      	adds	r7, #80	@ 0x50
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	00f42400 	.word	0x00f42400

08002ab4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab8:	4b03      	ldr	r3, [pc, #12]	@ (8002ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000004 	.word	0x20000004

08002acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad0:	f7ff fff0 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0a9b      	lsrs	r3, r3, #10
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4903      	ldr	r1, [pc, #12]	@ (8002af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	08008fb4 	.word	0x08008fb4

08002af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002af8:	f7ff ffdc 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	0b5b      	lsrs	r3, r3, #13
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	4903      	ldr	r1, [pc, #12]	@ (8002b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40023800 	.word	0x40023800
 8002b18:	08008fb4 	.word	0x08008fb4

08002b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d012      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b44:	4b69      	ldr	r3, [pc, #420]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4a68      	ldr	r2, [pc, #416]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b4e:	6093      	str	r3, [r2, #8]
 8002b50:	4b66      	ldr	r3, [pc, #408]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b58:	4964      	ldr	r1, [pc, #400]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d017      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b76:	4b5d      	ldr	r3, [pc, #372]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b7c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b84:	4959      	ldr	r1, [pc, #356]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b94:	d101      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d017      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bb8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	494a      	ldr	r1, [pc, #296]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 808b 	beq.w	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b3a      	ldr	r3, [pc, #232]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	4a39      	ldr	r2, [pc, #228]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c0c:	4b37      	ldr	r3, [pc, #220]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c18:	4b35      	ldr	r3, [pc, #212]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a34      	ldr	r2, [pc, #208]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c24:	f7fe ffcc 	bl	8001bc0 <HAL_GetTick>
 8002c28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2c:	f7fe ffc8 	bl	8001bc0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	@ 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e38f      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c4a:	4b28      	ldr	r3, [pc, #160]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d035      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d02e      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c68:	4b20      	ldr	r3, [pc, #128]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c72:	4b1e      	ldr	r3, [pc, #120]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c76:	4a1d      	ldr	r2, [pc, #116]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	4a1a      	ldr	r2, [pc, #104]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c88:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c8a:	4a18      	ldr	r2, [pc, #96]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c90:	4b16      	ldr	r3, [pc, #88]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d114      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe ff90 	bl	8001bc0 <HAL_GetTick>
 8002ca0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	e00a      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7fe ff8c 	bl	8001bc0 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e351      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cba:	4b0c      	ldr	r3, [pc, #48]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0ee      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cd2:	d111      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cd4:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ce0:	4b04      	ldr	r3, [pc, #16]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ce2:	400b      	ands	r3, r1
 8002ce4:	4901      	ldr	r1, [pc, #4]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
 8002cea:	e00b      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	0ffffcff 	.word	0x0ffffcff
 8002cf8:	4bac      	ldr	r3, [pc, #688]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4aab      	ldr	r2, [pc, #684]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002d02:	6093      	str	r3, [r2, #8]
 8002d04:	4ba9      	ldr	r3, [pc, #676]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	49a6      	ldr	r1, [pc, #664]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d010      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d22:	4ba2      	ldr	r3, [pc, #648]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d28:	4aa0      	ldr	r2, [pc, #640]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d32:	4b9e      	ldr	r3, [pc, #632]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d34:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3c:	499b      	ldr	r1, [pc, #620]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d50:	4b96      	ldr	r3, [pc, #600]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d56:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d5e:	4993      	ldr	r1, [pc, #588]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d72:	4b8e      	ldr	r3, [pc, #568]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d80:	498a      	ldr	r1, [pc, #552]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d94:	4b85      	ldr	r3, [pc, #532]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002da2:	4982      	ldr	r1, [pc, #520]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002db6:	4b7d      	ldr	r3, [pc, #500]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	4979      	ldr	r1, [pc, #484]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd8:	4b74      	ldr	r3, [pc, #464]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de6:	4971      	ldr	r1, [pc, #452]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dfa:	4b6c      	ldr	r3, [pc, #432]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e00:	f023 020c 	bic.w	r2, r3, #12
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e08:	4968      	ldr	r1, [pc, #416]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e1c:	4b63      	ldr	r3, [pc, #396]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e22:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2a:	4960      	ldr	r1, [pc, #384]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e44:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e4c:	4957      	ldr	r1, [pc, #348]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e60:	4b52      	ldr	r3, [pc, #328]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e66:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6e:	494f      	ldr	r1, [pc, #316]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e82:	4b4a      	ldr	r3, [pc, #296]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e88:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	4946      	ldr	r1, [pc, #280]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ea4:	4b41      	ldr	r3, [pc, #260]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eaa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb2:	493e      	ldr	r1, [pc, #248]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ec6:	4b39      	ldr	r3, [pc, #228]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ecc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed4:	4935      	ldr	r1, [pc, #212]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ee8:	4b30      	ldr	r3, [pc, #192]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ef6:	492d      	ldr	r1, [pc, #180]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d011      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f0a:	4b28      	ldr	r3, [pc, #160]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f10:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f18:	4924      	ldr	r1, [pc, #144]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f28:	d101      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f4a:	4b18      	ldr	r3, [pc, #96]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f50:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f58:	4914      	ldr	r1, [pc, #80]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f72:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f7c:	490b      	ldr	r1, [pc, #44]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00f      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f90:	4b06      	ldr	r3, [pc, #24]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f96:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fa0:	4902      	ldr	r1, [pc, #8]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002fa8:	e002      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00b      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fbc:	4b8a      	ldr	r3, [pc, #552]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fc2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fcc:	4986      	ldr	r1, [pc, #536]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00b      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fe0:	4b81      	ldr	r3, [pc, #516]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fe6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ff0:	497d      	ldr	r1, [pc, #500]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d006      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80d6 	beq.w	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800300c:	4b76      	ldr	r3, [pc, #472]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a75      	ldr	r2, [pc, #468]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003012:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003018:	f7fe fdd2 	bl	8001bc0 <HAL_GetTick>
 800301c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003020:	f7fe fdce 	bl	8001bc0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	@ 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e195      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003032:	4b6d      	ldr	r3, [pc, #436]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d021      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11d      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003052:	4b65      	ldr	r3, [pc, #404]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003060:	4b61      	ldr	r3, [pc, #388]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003066:	0e1b      	lsrs	r3, r3, #24
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	019a      	lsls	r2, r3, #6
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	431a      	orrs	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	061b      	lsls	r3, r3, #24
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	071b      	lsls	r3, r3, #28
 8003086:	4958      	ldr	r1, [pc, #352]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d02e      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030b8:	d129      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030ba:	4b4b      	ldr	r3, [pc, #300]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030c8:	4b47      	ldr	r3, [pc, #284]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ce:	0f1b      	lsrs	r3, r3, #28
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	019a      	lsls	r2, r3, #6
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	041b      	lsls	r3, r3, #16
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	061b      	lsls	r3, r3, #24
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	071b      	lsls	r3, r3, #28
 80030ee:	493e      	ldr	r1, [pc, #248]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030f6:	4b3c      	ldr	r3, [pc, #240]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030fc:	f023 021f 	bic.w	r2, r3, #31
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	3b01      	subs	r3, #1
 8003106:	4938      	ldr	r1, [pc, #224]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01d      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800311a:	4b33      	ldr	r3, [pc, #204]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003120:	0e1b      	lsrs	r3, r3, #24
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003128:	4b2f      	ldr	r3, [pc, #188]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800312e:	0f1b      	lsrs	r3, r3, #28
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	019a      	lsls	r2, r3, #6
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	041b      	lsls	r3, r3, #16
 8003142:	431a      	orrs	r2, r3
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	061b      	lsls	r3, r3, #24
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	071b      	lsls	r3, r3, #28
 800314e:	4926      	ldr	r1, [pc, #152]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d011      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	019a      	lsls	r2, r3, #6
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	061b      	lsls	r3, r3, #24
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	071b      	lsls	r3, r3, #28
 800317e:	491a      	ldr	r1, [pc, #104]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003186:	4b18      	ldr	r3, [pc, #96]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a17      	ldr	r2, [pc, #92]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003192:	f7fe fd15 	bl	8001bc0 <HAL_GetTick>
 8003196:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003198:	e008      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800319a:	f7fe fd11 	bl	8001bc0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b64      	cmp	r3, #100	@ 0x64
 80031a6:	d901      	bls.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e0d8      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031ac:	4b0e      	ldr	r3, [pc, #56]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	f040 80ce 	bne.w	800335c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031c0:	4b09      	ldr	r3, [pc, #36]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a08      	ldr	r2, [pc, #32]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031cc:	f7fe fcf8 	bl	8001bc0 <HAL_GetTick>
 80031d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031d2:	e00b      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031d4:	f7fe fcf4 	bl	8001bc0 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	@ 0x64
 80031e0:	d904      	bls.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0bb      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031ec:	4b5e      	ldr	r3, [pc, #376]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031f8:	d0ec      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003216:	2b00      	cmp	r3, #0
 8003218:	d02e      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d12a      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003222:	4b51      	ldr	r3, [pc, #324]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003230:	4b4d      	ldr	r3, [pc, #308]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003236:	0f1b      	lsrs	r3, r3, #28
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	019a      	lsls	r2, r3, #6
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	041b      	lsls	r3, r3, #16
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	061b      	lsls	r3, r3, #24
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	071b      	lsls	r3, r3, #28
 8003256:	4944      	ldr	r1, [pc, #272]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800325e:	4b42      	ldr	r3, [pc, #264]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003264:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326c:	3b01      	subs	r3, #1
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	493d      	ldr	r1, [pc, #244]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d022      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003288:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800328c:	d11d      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800328e:	4b36      	ldr	r3, [pc, #216]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003294:	0e1b      	lsrs	r3, r3, #24
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800329c:	4b32      	ldr	r3, [pc, #200]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a2:	0f1b      	lsrs	r3, r3, #28
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	019a      	lsls	r2, r3, #6
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	431a      	orrs	r2, r3
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	061b      	lsls	r3, r3, #24
 80032bc:	431a      	orrs	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	071b      	lsls	r3, r3, #28
 80032c2:	4929      	ldr	r1, [pc, #164]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d028      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032d6:	4b24      	ldr	r3, [pc, #144]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032dc:	0e1b      	lsrs	r3, r3, #24
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032e4:	4b20      	ldr	r3, [pc, #128]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ea:	0c1b      	lsrs	r3, r3, #16
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	019a      	lsls	r2, r3, #6
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	041b      	lsls	r3, r3, #16
 80032fc:	431a      	orrs	r2, r3
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	071b      	lsls	r3, r3, #28
 800330a:	4917      	ldr	r1, [pc, #92]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003312:	4b15      	ldr	r3, [pc, #84]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003318:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	4911      	ldr	r1, [pc, #68]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003328:	4b0f      	ldr	r3, [pc, #60]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0e      	ldr	r2, [pc, #56]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800332e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003332:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003334:	f7fe fc44 	bl	8001bc0 <HAL_GetTick>
 8003338:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800333a:	e008      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800333c:	f7fe fc40 	bl	8001bc0 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	@ 0x64
 8003348:	d901      	bls.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e007      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800334e:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800335a:	d1ef      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800

0800336c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e09d      	b.n	80034ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	2b00      	cmp	r3, #0
 8003384:	d108      	bne.n	8003398 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800338e:	d009      	beq.n	80033a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	61da      	str	r2, [r3, #28]
 8003396:	e005      	b.n	80033a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fe f960 	bl	8001684 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033e4:	d902      	bls.n	80033ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	e002      	b.n	80033f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80033ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80033fa:	d007      	beq.n	800340c <HAL_SPI_Init+0xa0>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003404:	d002      	beq.n	800340c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344e:	ea42 0103 	orr.w	r1, r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003456:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	0c1b      	lsrs	r3, r3, #16
 8003468:	f003 0204 	and.w	r2, r3, #4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003488:	ea42 0103 	orr.w	r1, r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b088      	sub	sp, #32
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_SPI_Transmit+0x22>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e15f      	b.n	80037a4 <HAL_SPI_Transmit+0x2e2>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034ec:	f7fe fb68 	bl	8001bc0 <HAL_GetTick>
 80034f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d002      	beq.n	8003508 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003502:	2302      	movs	r3, #2
 8003504:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003506:	e148      	b.n	800379a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_SPI_Transmit+0x52>
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003518:	e13f      	b.n	800379a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2203      	movs	r2, #3
 800351e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	88fa      	ldrh	r2, [r7, #6]
 8003532:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	88fa      	ldrh	r2, [r7, #6]
 8003538:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003564:	d10f      	bne.n	8003586 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003574:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003584:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003590:	2b40      	cmp	r3, #64	@ 0x40
 8003592:	d007      	beq.n	80035a4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035ac:	d94f      	bls.n	800364e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <HAL_SPI_Transmit+0xfa>
 80035b6:	8afb      	ldrh	r3, [r7, #22]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d142      	bne.n	8003642 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c0:	881a      	ldrh	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035cc:	1c9a      	adds	r2, r3, #2
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035e0:	e02f      	b.n	8003642 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d112      	bne.n	8003616 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	881a      	ldrh	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003600:	1c9a      	adds	r2, r3, #2
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003614:	e015      	b.n	8003642 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003616:	f7fe fad3 	bl	8001bc0 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d803      	bhi.n	800362e <HAL_SPI_Transmit+0x16c>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362c:	d102      	bne.n	8003634 <HAL_SPI_Transmit+0x172>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003640:	e0ab      	b.n	800379a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ca      	bne.n	80035e2 <HAL_SPI_Transmit+0x120>
 800364c:	e080      	b.n	8003750 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_SPI_Transmit+0x19a>
 8003656:	8afb      	ldrh	r3, [r7, #22]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d174      	bne.n	8003746 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d912      	bls.n	800368c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366a:	881a      	ldrh	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003676:	1c9a      	adds	r2, r3, #2
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b02      	subs	r3, #2
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800368a:	e05c      	b.n	8003746 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	330c      	adds	r3, #12
 8003696:	7812      	ldrb	r2, [r2, #0]
 8003698:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80036b2:	e048      	b.n	8003746 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d12b      	bne.n	800371a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d912      	bls.n	80036f2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d0:	881a      	ldrh	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036dc:	1c9a      	adds	r2, r3, #2
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b02      	subs	r3, #2
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036f0:	e029      	b.n	8003746 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	330c      	adds	r3, #12
 80036fc:	7812      	ldrb	r2, [r2, #0]
 80036fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003718:	e015      	b.n	8003746 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800371a:	f7fe fa51 	bl	8001bc0 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d803      	bhi.n	8003732 <HAL_SPI_Transmit+0x270>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d102      	bne.n	8003738 <HAL_SPI_Transmit+0x276>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003744:	e029      	b.n	800379a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1b1      	bne.n	80036b4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	6839      	ldr	r1, [r7, #0]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fb69 	bl	8003e2c <SPI_EndRxTxTransaction>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e003      	b.n	800379a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80037a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3720      	adds	r7, #32
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	@ 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037ba:	2301      	movs	r3, #1
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_SPI_TransmitReceive+0x26>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e20a      	b.n	8003be8 <HAL_SPI_TransmitReceive+0x43c>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037da:	f7fe f9f1 	bl	8001bc0 <HAL_GetTick>
 80037de:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037e6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80037ee:	887b      	ldrh	r3, [r7, #2]
 80037f0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80037f2:	887b      	ldrh	r3, [r7, #2]
 80037f4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037f6:	7efb      	ldrb	r3, [r7, #27]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d00e      	beq.n	800381a <HAL_SPI_TransmitReceive+0x6e>
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003802:	d106      	bne.n	8003812 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d102      	bne.n	8003812 <HAL_SPI_TransmitReceive+0x66>
 800380c:	7efb      	ldrb	r3, [r7, #27]
 800380e:	2b04      	cmp	r3, #4
 8003810:	d003      	beq.n	800381a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003812:	2302      	movs	r3, #2
 8003814:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003818:	e1e0      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_SPI_TransmitReceive+0x80>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_SPI_TransmitReceive+0x80>
 8003826:	887b      	ldrh	r3, [r7, #2]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d103      	bne.n	8003834 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003832:	e1d3      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b04      	cmp	r3, #4
 800383e:	d003      	beq.n	8003848 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2205      	movs	r2, #5
 8003844:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	887a      	ldrh	r2, [r7, #2]
 8003858:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	887a      	ldrh	r2, [r7, #2]
 800386e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800388a:	d802      	bhi.n	8003892 <HAL_SPI_TransmitReceive+0xe6>
 800388c:	8a3b      	ldrh	r3, [r7, #16]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d908      	bls.n	80038a4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	e007      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038be:	2b40      	cmp	r3, #64	@ 0x40
 80038c0:	d007      	beq.n	80038d2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038da:	f240 8081 	bls.w	80039e0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_SPI_TransmitReceive+0x140>
 80038e6:	8a7b      	ldrh	r3, [r7, #18]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d16d      	bne.n	80039c8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f0:	881a      	ldrh	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fc:	1c9a      	adds	r2, r3, #2
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003906:	b29b      	uxth	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003910:	e05a      	b.n	80039c8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b02      	cmp	r3, #2
 800391e:	d11b      	bne.n	8003958 <HAL_SPI_TransmitReceive+0x1ac>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d016      	beq.n	8003958 <HAL_SPI_TransmitReceive+0x1ac>
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	2b01      	cmp	r3, #1
 800392e:	d113      	bne.n	8003958 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	881a      	ldrh	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003940:	1c9a      	adds	r2, r3, #2
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d11c      	bne.n	80039a0 <HAL_SPI_TransmitReceive+0x1f4>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	b292      	uxth	r2, r2
 800397e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	1c9a      	adds	r2, r3, #2
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800399c:	2301      	movs	r3, #1
 800399e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039a0:	f7fe f90e 	bl	8001bc0 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d80b      	bhi.n	80039c8 <HAL_SPI_TransmitReceive+0x21c>
 80039b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b6:	d007      	beq.n	80039c8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80039c6:	e109      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d19f      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x166>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d199      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x166>
 80039de:	e0e3      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_SPI_TransmitReceive+0x244>
 80039e8:	8a7b      	ldrh	r3, [r7, #18]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	f040 80cf 	bne.w	8003b8e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d912      	bls.n	8003a20 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fe:	881a      	ldrh	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0a:	1c9a      	adds	r2, r3, #2
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b02      	subs	r3, #2
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a1e:	e0b6      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	7812      	ldrb	r2, [r2, #0]
 8003a2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a46:	e0a2      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d134      	bne.n	8003ac0 <HAL_SPI_TransmitReceive+0x314>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d02f      	beq.n	8003ac0 <HAL_SPI_TransmitReceive+0x314>
 8003a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d12c      	bne.n	8003ac0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d912      	bls.n	8003a96 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a74:	881a      	ldrh	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a80:	1c9a      	adds	r2, r3, #2
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b02      	subs	r3, #2
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a94:	e012      	b.n	8003abc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d148      	bne.n	8003b60 <HAL_SPI_TransmitReceive+0x3b4>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d042      	beq.n	8003b60 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d923      	bls.n	8003b2e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	b292      	uxth	r2, r2
 8003af2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b02      	subs	r3, #2
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d81f      	bhi.n	8003b5c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	e016      	b.n	8003b5c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f103 020c 	add.w	r2, r3, #12
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	7812      	ldrb	r2, [r2, #0]
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b60:	f7fe f82e 	bl	8001bc0 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d803      	bhi.n	8003b78 <HAL_SPI_TransmitReceive+0x3cc>
 8003b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b76:	d102      	bne.n	8003b7e <HAL_SPI_TransmitReceive+0x3d2>
 8003b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d107      	bne.n	8003b8e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003b8c:	e026      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f47f af57 	bne.w	8003a48 <HAL_SPI_TransmitReceive+0x29c>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f47f af50 	bne.w	8003a48 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f93d 	bl	8003e2c <SPI_EndRxTxTransaction>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd2:	e003      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003be4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3728      	adds	r7, #40	@ 0x28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c00:	f7fd ffde 	bl	8001bc0 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c10:	f7fd ffd6 	bl	8001bc0 <HAL_GetTick>
 8003c14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c16:	4b39      	ldr	r3, [pc, #228]	@ (8003cfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	015b      	lsls	r3, r3, #5
 8003c1c:	0d1b      	lsrs	r3, r3, #20
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	fb02 f303 	mul.w	r3, r2, r3
 8003c24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c26:	e054      	b.n	8003cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2e:	d050      	beq.n	8003cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c30:	f7fd ffc6 	bl	8001bc0 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d902      	bls.n	8003c46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d13d      	bne.n	8003cc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c5e:	d111      	bne.n	8003c84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c68:	d004      	beq.n	8003c74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c72:	d107      	bne.n	8003c84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c8c:	d10f      	bne.n	8003cae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e017      	b.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d19b      	bne.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000004 	.word	0x20000004

08003d00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	@ 0x28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d12:	f7fd ff55 	bl	8001bc0 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	4413      	add	r3, r2
 8003d20:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003d22:	f7fd ff4d 	bl	8001bc0 <HAL_GetTick>
 8003d26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d30:	4b3d      	ldr	r3, [pc, #244]	@ (8003e28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	00da      	lsls	r2, r3, #3
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	0d1b      	lsrs	r3, r3, #20
 8003d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d42:	fb02 f303 	mul.w	r3, r2, r3
 8003d46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d48:	e060      	b.n	8003e0c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d50:	d107      	bne.n	8003d62 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d104      	bne.n	8003d62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d050      	beq.n	8003e0c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d6a:	f7fd ff29 	bl	8001bc0 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d902      	bls.n	8003d80 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d13d      	bne.n	8003dfc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d98:	d111      	bne.n	8003dbe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003da2:	d004      	beq.n	8003dae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dac:	d107      	bne.n	8003dbe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dc6:	d10f      	bne.n	8003de8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003de6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e010      	b.n	8003e1e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4013      	ands	r3, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d196      	bne.n	8003d4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3728      	adds	r7, #40	@ 0x28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000004 	.word	0x20000004

08003e2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7ff ff5b 	bl	8003d00 <SPI_WaitFifoStateUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d007      	beq.n	8003e60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e54:	f043 0220 	orr.w	r2, r3, #32
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e046      	b.n	8003eee <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e60:	4b25      	ldr	r3, [pc, #148]	@ (8003ef8 <SPI_EndRxTxTransaction+0xcc>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a25      	ldr	r2, [pc, #148]	@ (8003efc <SPI_EndRxTxTransaction+0xd0>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	0d5b      	lsrs	r3, r3, #21
 8003e6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e7e:	d112      	bne.n	8003ea6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2200      	movs	r2, #0
 8003e88:	2180      	movs	r1, #128	@ 0x80
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7ff feb0 	bl	8003bf0 <SPI_WaitFlagStateUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d016      	beq.n	8003ec4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e9a:	f043 0220 	orr.w	r2, r3, #32
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e023      	b.n	8003eee <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ebc:	2b80      	cmp	r3, #128	@ 0x80
 8003ebe:	d0f2      	beq.n	8003ea6 <SPI_EndRxTxTransaction+0x7a>
 8003ec0:	e000      	b.n	8003ec4 <SPI_EndRxTxTransaction+0x98>
        break;
 8003ec2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff ff15 	bl	8003d00 <SPI_WaitFifoStateUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e000      	b.n	8003eee <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000004 	.word	0x20000004
 8003efc:	165e9f81 	.word	0x165e9f81

08003f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e040      	b.n	8003f94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fd fc60 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2224      	movs	r2, #36	@ 0x24
 8003f2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fb16 	bl	8004578 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f8af 	bl	80040b0 <UART_SetConfig>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e01b      	b.n	8003f94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fb95 	bl	80046bc <UART_CheckIdleState>
 8003f92:	4603      	mov	r3, r0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	@ 0x28
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d177      	bne.n	80040a4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_UART_Transmit+0x24>
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e070      	b.n	80040a6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2221      	movs	r2, #33	@ 0x21
 8003fd0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fd2:	f7fd fdf5 	bl	8001bc0 <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	88fa      	ldrh	r2, [r7, #6]
 8003fdc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	88fa      	ldrh	r2, [r7, #6]
 8003fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ff0:	d108      	bne.n	8004004 <HAL_UART_Transmit+0x68>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d104      	bne.n	8004004 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	e003      	b.n	800400c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004008:	2300      	movs	r3, #0
 800400a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800400c:	e02f      	b.n	800406e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2200      	movs	r2, #0
 8004016:	2180      	movs	r1, #128	@ 0x80
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 fbf7 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d004      	beq.n	800402e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e03b      	b.n	80040a6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10b      	bne.n	800404c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004042:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	3302      	adds	r3, #2
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	e007      	b.n	800405c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	781a      	ldrb	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3301      	adds	r3, #1
 800405a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1c9      	bne.n	800400e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2200      	movs	r2, #0
 8004082:	2140      	movs	r1, #64	@ 0x40
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fbc1 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d004      	beq.n	800409a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e005      	b.n	80040a6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
  }
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3720      	adds	r7, #32
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4ba6      	ldr	r3, [pc, #664]	@ (8004374 <UART_SetConfig+0x2c4>)
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	6979      	ldr	r1, [r7, #20]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	430a      	orrs	r2, r1
 8004120:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a94      	ldr	r2, [pc, #592]	@ (8004378 <UART_SetConfig+0x2c8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d120      	bne.n	800416e <UART_SetConfig+0xbe>
 800412c:	4b93      	ldr	r3, [pc, #588]	@ (800437c <UART_SetConfig+0x2cc>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b03      	cmp	r3, #3
 8004138:	d816      	bhi.n	8004168 <UART_SetConfig+0xb8>
 800413a:	a201      	add	r2, pc, #4	@ (adr r2, 8004140 <UART_SetConfig+0x90>)
 800413c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004140:	08004151 	.word	0x08004151
 8004144:	0800415d 	.word	0x0800415d
 8004148:	08004157 	.word	0x08004157
 800414c:	08004163 	.word	0x08004163
 8004150:	2301      	movs	r3, #1
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	e150      	b.n	80043f8 <UART_SetConfig+0x348>
 8004156:	2302      	movs	r3, #2
 8004158:	77fb      	strb	r3, [r7, #31]
 800415a:	e14d      	b.n	80043f8 <UART_SetConfig+0x348>
 800415c:	2304      	movs	r3, #4
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e14a      	b.n	80043f8 <UART_SetConfig+0x348>
 8004162:	2308      	movs	r3, #8
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e147      	b.n	80043f8 <UART_SetConfig+0x348>
 8004168:	2310      	movs	r3, #16
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e144      	b.n	80043f8 <UART_SetConfig+0x348>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a83      	ldr	r2, [pc, #524]	@ (8004380 <UART_SetConfig+0x2d0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d132      	bne.n	80041de <UART_SetConfig+0x12e>
 8004178:	4b80      	ldr	r3, [pc, #512]	@ (800437c <UART_SetConfig+0x2cc>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d828      	bhi.n	80041d8 <UART_SetConfig+0x128>
 8004186:	a201      	add	r2, pc, #4	@ (adr r2, 800418c <UART_SetConfig+0xdc>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	080041c1 	.word	0x080041c1
 8004190:	080041d9 	.word	0x080041d9
 8004194:	080041d9 	.word	0x080041d9
 8004198:	080041d9 	.word	0x080041d9
 800419c:	080041cd 	.word	0x080041cd
 80041a0:	080041d9 	.word	0x080041d9
 80041a4:	080041d9 	.word	0x080041d9
 80041a8:	080041d9 	.word	0x080041d9
 80041ac:	080041c7 	.word	0x080041c7
 80041b0:	080041d9 	.word	0x080041d9
 80041b4:	080041d9 	.word	0x080041d9
 80041b8:	080041d9 	.word	0x080041d9
 80041bc:	080041d3 	.word	0x080041d3
 80041c0:	2300      	movs	r3, #0
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e118      	b.n	80043f8 <UART_SetConfig+0x348>
 80041c6:	2302      	movs	r3, #2
 80041c8:	77fb      	strb	r3, [r7, #31]
 80041ca:	e115      	b.n	80043f8 <UART_SetConfig+0x348>
 80041cc:	2304      	movs	r3, #4
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e112      	b.n	80043f8 <UART_SetConfig+0x348>
 80041d2:	2308      	movs	r3, #8
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e10f      	b.n	80043f8 <UART_SetConfig+0x348>
 80041d8:	2310      	movs	r3, #16
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e10c      	b.n	80043f8 <UART_SetConfig+0x348>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a68      	ldr	r2, [pc, #416]	@ (8004384 <UART_SetConfig+0x2d4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d120      	bne.n	800422a <UART_SetConfig+0x17a>
 80041e8:	4b64      	ldr	r3, [pc, #400]	@ (800437c <UART_SetConfig+0x2cc>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041f2:	2b30      	cmp	r3, #48	@ 0x30
 80041f4:	d013      	beq.n	800421e <UART_SetConfig+0x16e>
 80041f6:	2b30      	cmp	r3, #48	@ 0x30
 80041f8:	d814      	bhi.n	8004224 <UART_SetConfig+0x174>
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d009      	beq.n	8004212 <UART_SetConfig+0x162>
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d810      	bhi.n	8004224 <UART_SetConfig+0x174>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <UART_SetConfig+0x15c>
 8004206:	2b10      	cmp	r3, #16
 8004208:	d006      	beq.n	8004218 <UART_SetConfig+0x168>
 800420a:	e00b      	b.n	8004224 <UART_SetConfig+0x174>
 800420c:	2300      	movs	r3, #0
 800420e:	77fb      	strb	r3, [r7, #31]
 8004210:	e0f2      	b.n	80043f8 <UART_SetConfig+0x348>
 8004212:	2302      	movs	r3, #2
 8004214:	77fb      	strb	r3, [r7, #31]
 8004216:	e0ef      	b.n	80043f8 <UART_SetConfig+0x348>
 8004218:	2304      	movs	r3, #4
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e0ec      	b.n	80043f8 <UART_SetConfig+0x348>
 800421e:	2308      	movs	r3, #8
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e0e9      	b.n	80043f8 <UART_SetConfig+0x348>
 8004224:	2310      	movs	r3, #16
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e0e6      	b.n	80043f8 <UART_SetConfig+0x348>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a56      	ldr	r2, [pc, #344]	@ (8004388 <UART_SetConfig+0x2d8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d120      	bne.n	8004276 <UART_SetConfig+0x1c6>
 8004234:	4b51      	ldr	r3, [pc, #324]	@ (800437c <UART_SetConfig+0x2cc>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800423e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004240:	d013      	beq.n	800426a <UART_SetConfig+0x1ba>
 8004242:	2bc0      	cmp	r3, #192	@ 0xc0
 8004244:	d814      	bhi.n	8004270 <UART_SetConfig+0x1c0>
 8004246:	2b80      	cmp	r3, #128	@ 0x80
 8004248:	d009      	beq.n	800425e <UART_SetConfig+0x1ae>
 800424a:	2b80      	cmp	r3, #128	@ 0x80
 800424c:	d810      	bhi.n	8004270 <UART_SetConfig+0x1c0>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <UART_SetConfig+0x1a8>
 8004252:	2b40      	cmp	r3, #64	@ 0x40
 8004254:	d006      	beq.n	8004264 <UART_SetConfig+0x1b4>
 8004256:	e00b      	b.n	8004270 <UART_SetConfig+0x1c0>
 8004258:	2300      	movs	r3, #0
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e0cc      	b.n	80043f8 <UART_SetConfig+0x348>
 800425e:	2302      	movs	r3, #2
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e0c9      	b.n	80043f8 <UART_SetConfig+0x348>
 8004264:	2304      	movs	r3, #4
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e0c6      	b.n	80043f8 <UART_SetConfig+0x348>
 800426a:	2308      	movs	r3, #8
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e0c3      	b.n	80043f8 <UART_SetConfig+0x348>
 8004270:	2310      	movs	r3, #16
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e0c0      	b.n	80043f8 <UART_SetConfig+0x348>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a44      	ldr	r2, [pc, #272]	@ (800438c <UART_SetConfig+0x2dc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d125      	bne.n	80042cc <UART_SetConfig+0x21c>
 8004280:	4b3e      	ldr	r3, [pc, #248]	@ (800437c <UART_SetConfig+0x2cc>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800428e:	d017      	beq.n	80042c0 <UART_SetConfig+0x210>
 8004290:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004294:	d817      	bhi.n	80042c6 <UART_SetConfig+0x216>
 8004296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800429a:	d00b      	beq.n	80042b4 <UART_SetConfig+0x204>
 800429c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042a0:	d811      	bhi.n	80042c6 <UART_SetConfig+0x216>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <UART_SetConfig+0x1fe>
 80042a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042aa:	d006      	beq.n	80042ba <UART_SetConfig+0x20a>
 80042ac:	e00b      	b.n	80042c6 <UART_SetConfig+0x216>
 80042ae:	2300      	movs	r3, #0
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e0a1      	b.n	80043f8 <UART_SetConfig+0x348>
 80042b4:	2302      	movs	r3, #2
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e09e      	b.n	80043f8 <UART_SetConfig+0x348>
 80042ba:	2304      	movs	r3, #4
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e09b      	b.n	80043f8 <UART_SetConfig+0x348>
 80042c0:	2308      	movs	r3, #8
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e098      	b.n	80043f8 <UART_SetConfig+0x348>
 80042c6:	2310      	movs	r3, #16
 80042c8:	77fb      	strb	r3, [r7, #31]
 80042ca:	e095      	b.n	80043f8 <UART_SetConfig+0x348>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004390 <UART_SetConfig+0x2e0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d125      	bne.n	8004322 <UART_SetConfig+0x272>
 80042d6:	4b29      	ldr	r3, [pc, #164]	@ (800437c <UART_SetConfig+0x2cc>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042e4:	d017      	beq.n	8004316 <UART_SetConfig+0x266>
 80042e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042ea:	d817      	bhi.n	800431c <UART_SetConfig+0x26c>
 80042ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042f0:	d00b      	beq.n	800430a <UART_SetConfig+0x25a>
 80042f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042f6:	d811      	bhi.n	800431c <UART_SetConfig+0x26c>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <UART_SetConfig+0x254>
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004300:	d006      	beq.n	8004310 <UART_SetConfig+0x260>
 8004302:	e00b      	b.n	800431c <UART_SetConfig+0x26c>
 8004304:	2301      	movs	r3, #1
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e076      	b.n	80043f8 <UART_SetConfig+0x348>
 800430a:	2302      	movs	r3, #2
 800430c:	77fb      	strb	r3, [r7, #31]
 800430e:	e073      	b.n	80043f8 <UART_SetConfig+0x348>
 8004310:	2304      	movs	r3, #4
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e070      	b.n	80043f8 <UART_SetConfig+0x348>
 8004316:	2308      	movs	r3, #8
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e06d      	b.n	80043f8 <UART_SetConfig+0x348>
 800431c:	2310      	movs	r3, #16
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e06a      	b.n	80043f8 <UART_SetConfig+0x348>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1b      	ldr	r2, [pc, #108]	@ (8004394 <UART_SetConfig+0x2e4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d138      	bne.n	800439e <UART_SetConfig+0x2ee>
 800432c:	4b13      	ldr	r3, [pc, #76]	@ (800437c <UART_SetConfig+0x2cc>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004332:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004336:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800433a:	d017      	beq.n	800436c <UART_SetConfig+0x2bc>
 800433c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004340:	d82a      	bhi.n	8004398 <UART_SetConfig+0x2e8>
 8004342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004346:	d00b      	beq.n	8004360 <UART_SetConfig+0x2b0>
 8004348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800434c:	d824      	bhi.n	8004398 <UART_SetConfig+0x2e8>
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <UART_SetConfig+0x2aa>
 8004352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004356:	d006      	beq.n	8004366 <UART_SetConfig+0x2b6>
 8004358:	e01e      	b.n	8004398 <UART_SetConfig+0x2e8>
 800435a:	2300      	movs	r3, #0
 800435c:	77fb      	strb	r3, [r7, #31]
 800435e:	e04b      	b.n	80043f8 <UART_SetConfig+0x348>
 8004360:	2302      	movs	r3, #2
 8004362:	77fb      	strb	r3, [r7, #31]
 8004364:	e048      	b.n	80043f8 <UART_SetConfig+0x348>
 8004366:	2304      	movs	r3, #4
 8004368:	77fb      	strb	r3, [r7, #31]
 800436a:	e045      	b.n	80043f8 <UART_SetConfig+0x348>
 800436c:	2308      	movs	r3, #8
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e042      	b.n	80043f8 <UART_SetConfig+0x348>
 8004372:	bf00      	nop
 8004374:	efff69f3 	.word	0xefff69f3
 8004378:	40011000 	.word	0x40011000
 800437c:	40023800 	.word	0x40023800
 8004380:	40004400 	.word	0x40004400
 8004384:	40004800 	.word	0x40004800
 8004388:	40004c00 	.word	0x40004c00
 800438c:	40005000 	.word	0x40005000
 8004390:	40011400 	.word	0x40011400
 8004394:	40007800 	.word	0x40007800
 8004398:	2310      	movs	r3, #16
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e02c      	b.n	80043f8 <UART_SetConfig+0x348>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a72      	ldr	r2, [pc, #456]	@ (800456c <UART_SetConfig+0x4bc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d125      	bne.n	80043f4 <UART_SetConfig+0x344>
 80043a8:	4b71      	ldr	r3, [pc, #452]	@ (8004570 <UART_SetConfig+0x4c0>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80043b2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043b6:	d017      	beq.n	80043e8 <UART_SetConfig+0x338>
 80043b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043bc:	d817      	bhi.n	80043ee <UART_SetConfig+0x33e>
 80043be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c2:	d00b      	beq.n	80043dc <UART_SetConfig+0x32c>
 80043c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c8:	d811      	bhi.n	80043ee <UART_SetConfig+0x33e>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <UART_SetConfig+0x326>
 80043ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043d2:	d006      	beq.n	80043e2 <UART_SetConfig+0x332>
 80043d4:	e00b      	b.n	80043ee <UART_SetConfig+0x33e>
 80043d6:	2300      	movs	r3, #0
 80043d8:	77fb      	strb	r3, [r7, #31]
 80043da:	e00d      	b.n	80043f8 <UART_SetConfig+0x348>
 80043dc:	2302      	movs	r3, #2
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e00a      	b.n	80043f8 <UART_SetConfig+0x348>
 80043e2:	2304      	movs	r3, #4
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e007      	b.n	80043f8 <UART_SetConfig+0x348>
 80043e8:	2308      	movs	r3, #8
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e004      	b.n	80043f8 <UART_SetConfig+0x348>
 80043ee:	2310      	movs	r3, #16
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e001      	b.n	80043f8 <UART_SetConfig+0x348>
 80043f4:	2310      	movs	r3, #16
 80043f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004400:	d15b      	bne.n	80044ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004402:	7ffb      	ldrb	r3, [r7, #31]
 8004404:	2b08      	cmp	r3, #8
 8004406:	d828      	bhi.n	800445a <UART_SetConfig+0x3aa>
 8004408:	a201      	add	r2, pc, #4	@ (adr r2, 8004410 <UART_SetConfig+0x360>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004435 	.word	0x08004435
 8004414:	0800443d 	.word	0x0800443d
 8004418:	08004445 	.word	0x08004445
 800441c:	0800445b 	.word	0x0800445b
 8004420:	0800444b 	.word	0x0800444b
 8004424:	0800445b 	.word	0x0800445b
 8004428:	0800445b 	.word	0x0800445b
 800442c:	0800445b 	.word	0x0800445b
 8004430:	08004453 	.word	0x08004453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004434:	f7fe fb4a 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 8004438:	61b8      	str	r0, [r7, #24]
        break;
 800443a:	e013      	b.n	8004464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800443c:	f7fe fb5a 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8004440:	61b8      	str	r0, [r7, #24]
        break;
 8004442:	e00f      	b.n	8004464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004444:	4b4b      	ldr	r3, [pc, #300]	@ (8004574 <UART_SetConfig+0x4c4>)
 8004446:	61bb      	str	r3, [r7, #24]
        break;
 8004448:	e00c      	b.n	8004464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800444a:	f7fe fa2f 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800444e:	61b8      	str	r0, [r7, #24]
        break;
 8004450:	e008      	b.n	8004464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004456:	61bb      	str	r3, [r7, #24]
        break;
 8004458:	e004      	b.n	8004464 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	77bb      	strb	r3, [r7, #30]
        break;
 8004462:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d074      	beq.n	8004554 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	005a      	lsls	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	441a      	add	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b0f      	cmp	r3, #15
 8004484:	d916      	bls.n	80044b4 <UART_SetConfig+0x404>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800448c:	d212      	bcs.n	80044b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	b29b      	uxth	r3, r3
 8004492:	f023 030f 	bic.w	r3, r3, #15
 8004496:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	b29b      	uxth	r3, r3
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	89fb      	ldrh	r3, [r7, #14]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	89fa      	ldrh	r2, [r7, #14]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	e04f      	b.n	8004554 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	77bb      	strb	r3, [r7, #30]
 80044b8:	e04c      	b.n	8004554 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044ba:	7ffb      	ldrb	r3, [r7, #31]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d828      	bhi.n	8004512 <UART_SetConfig+0x462>
 80044c0:	a201      	add	r2, pc, #4	@ (adr r2, 80044c8 <UART_SetConfig+0x418>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044ed 	.word	0x080044ed
 80044cc:	080044f5 	.word	0x080044f5
 80044d0:	080044fd 	.word	0x080044fd
 80044d4:	08004513 	.word	0x08004513
 80044d8:	08004503 	.word	0x08004503
 80044dc:	08004513 	.word	0x08004513
 80044e0:	08004513 	.word	0x08004513
 80044e4:	08004513 	.word	0x08004513
 80044e8:	0800450b 	.word	0x0800450b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ec:	f7fe faee 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 80044f0:	61b8      	str	r0, [r7, #24]
        break;
 80044f2:	e013      	b.n	800451c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f4:	f7fe fafe 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 80044f8:	61b8      	str	r0, [r7, #24]
        break;
 80044fa:	e00f      	b.n	800451c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004574 <UART_SetConfig+0x4c4>)
 80044fe:	61bb      	str	r3, [r7, #24]
        break;
 8004500:	e00c      	b.n	800451c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004502:	f7fe f9d3 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8004506:	61b8      	str	r0, [r7, #24]
        break;
 8004508:	e008      	b.n	800451c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800450a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800450e:	61bb      	str	r3, [r7, #24]
        break;
 8004510:	e004      	b.n	800451c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	77bb      	strb	r3, [r7, #30]
        break;
 800451a:	bf00      	nop
    }

    if (pclk != 0U)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d018      	beq.n	8004554 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	085a      	lsrs	r2, r3, #1
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	441a      	add	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b0f      	cmp	r3, #15
 800453a:	d909      	bls.n	8004550 <UART_SetConfig+0x4a0>
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004542:	d205      	bcs.n	8004550 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	b29a      	uxth	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60da      	str	r2, [r3, #12]
 800454e:	e001      	b.n	8004554 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004560:	7fbb      	ldrb	r3, [r7, #30]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40007c00 	.word	0x40007c00
 8004570:	40023800 	.word	0x40023800
 8004574:	00f42400 	.word	0x00f42400

08004578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01a      	beq.n	800468e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004676:	d10a      	bne.n	800468e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	605a      	str	r2, [r3, #4]
  }
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b098      	sub	sp, #96	@ 0x60
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046cc:	f7fd fa78 	bl	8001bc0 <HAL_GetTick>
 80046d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d12e      	bne.n	800473e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e8:	2200      	movs	r2, #0
 80046ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f88c 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d021      	beq.n	800473e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800470e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004718:	647b      	str	r3, [r7, #68]	@ 0x44
 800471a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800471e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e6      	bne.n	80046fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e062      	b.n	8004804 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b04      	cmp	r3, #4
 800474a:	d149      	bne.n	80047e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800474c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004754:	2200      	movs	r2, #0
 8004756:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f856 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d03c      	beq.n	80047e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	623b      	str	r3, [r7, #32]
   return(result);
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800477a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004784:	633b      	str	r3, [r7, #48]	@ 0x30
 8004786:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800478a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e6      	bne.n	8004766 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3308      	adds	r3, #8
 80047b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047b8:	61fa      	str	r2, [r7, #28]
 80047ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	69b9      	ldr	r1, [r7, #24]
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	617b      	str	r3, [r7, #20]
   return(result);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e5      	bne.n	8004798 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e011      	b.n	8004804 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3758      	adds	r7, #88	@ 0x58
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481c:	e04f      	b.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d04b      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004826:	f7fd f9cb 	bl	8001bc0 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <UART_WaitOnFlagUntilTimeout+0x30>
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e04e      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	d037      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b80      	cmp	r3, #128	@ 0x80
 8004852:	d034      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b40      	cmp	r3, #64	@ 0x40
 8004858:	d031      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b08      	cmp	r3, #8
 8004866:	d110      	bne.n	800488a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2208      	movs	r2, #8
 800486e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f838 	bl	80048e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2208      	movs	r2, #8
 800487a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e029      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004898:	d111      	bne.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f81e 	bl	80048e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e00f      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4013      	ands	r3, r2
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	bf0c      	ite	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	2300      	movne	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d0a0      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b095      	sub	sp, #84	@ 0x54
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800490c:	643b      	str	r3, [r7, #64]	@ 0x40
 800490e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004912:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800491a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e6      	bne.n	80048ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3308      	adds	r3, #8
 8004926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3308      	adds	r3, #8
 800493e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004940:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004958:	2b01      	cmp	r3, #1
 800495a:	d118      	bne.n	800498e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	60bb      	str	r3, [r7, #8]
   return(result);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f023 0310 	bic.w	r3, r3, #16
 8004970:	647b      	str	r3, [r7, #68]	@ 0x44
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	6979      	ldr	r1, [r7, #20]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	613b      	str	r3, [r7, #16]
   return(result);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e6      	bne.n	800495c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049a2:	bf00      	nop
 80049a4:	3754      	adds	r7, #84	@ 0x54
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80049b4:	4904      	ldr	r1, [pc, #16]	@ (80049c8 <MX_FATFS_Init+0x18>)
 80049b6:	4805      	ldr	r0, [pc, #20]	@ (80049cc <MX_FATFS_Init+0x1c>)
 80049b8:	f003 f9c4 	bl	8007d44 <FATFS_LinkDriver>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	4b03      	ldr	r3, [pc, #12]	@ (80049d0 <MX_FATFS_Init+0x20>)
 80049c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80049c4:	bf00      	nop
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20000200 	.word	0x20000200
 80049cc:	20000010 	.word	0x20000010
 80049d0:	200001fc 	.word	0x200001fc

080049d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80049d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80049da:	4618      	mov	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fb ffa1 	bl	8000938 <SD_disk_initialize>
 80049f6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status(pdrv);
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fc f879 	bl	8000b04 <SD_disk_status>
 8004a12:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	4603      	mov	r3, r0
 8004a2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8004a2c:	7bf8      	ldrb	r0, [r7, #15]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	f7fc f87c 	bl	8000b30 <SD_disk_read>
 8004a38:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	4603      	mov	r3, r0
 8004a50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004a52:	7bf8      	ldrb	r0, [r7, #15]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	f7fc f8d3 	bl	8000c04 <SD_disk_write>
 8004a5e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	603a      	str	r2, [r7, #0]
 8004a72:	71fb      	strb	r3, [r7, #7]
 8004a74:	460b      	mov	r3, r1
 8004a76:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004a78:	79b9      	ldrb	r1, [r7, #6]
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fc f944 	bl	8000d0c <SD_disk_ioctl>
 8004a84:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	4a08      	ldr	r2, [pc, #32]	@ (8004ac0 <disk_status+0x30>)
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	79fa      	ldrb	r2, [r7, #7]
 8004aa8:	4905      	ldr	r1, [pc, #20]	@ (8004ac0 <disk_status+0x30>)
 8004aaa:	440a      	add	r2, r1
 8004aac:	7a12      	ldrb	r2, [r2, #8]
 8004aae:	4610      	mov	r0, r2
 8004ab0:	4798      	blx	r3
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	2000042c 	.word	0x2000042c

08004ac4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8004b0c <disk_initialize+0x48>)
 8004ad6:	5cd3      	ldrb	r3, [r2, r3]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d111      	bne.n	8004b00 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	4a0b      	ldr	r2, [pc, #44]	@ (8004b0c <disk_initialize+0x48>)
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	4a09      	ldr	r2, [pc, #36]	@ (8004b0c <disk_initialize+0x48>)
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	79fa      	ldrb	r2, [r7, #7]
 8004af2:	4906      	ldr	r1, [pc, #24]	@ (8004b0c <disk_initialize+0x48>)
 8004af4:	440a      	add	r2, r1
 8004af6:	7a12      	ldrb	r2, [r2, #8]
 8004af8:	4610      	mov	r0, r2
 8004afa:	4798      	blx	r3
 8004afc:	4603      	mov	r3, r0
 8004afe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	2000042c 	.word	0x2000042c

08004b10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	4a0a      	ldr	r2, [pc, #40]	@ (8004b4c <disk_read+0x3c>)
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	689c      	ldr	r4, [r3, #8]
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	4a07      	ldr	r2, [pc, #28]	@ (8004b4c <disk_read+0x3c>)
 8004b30:	4413      	add	r3, r2
 8004b32:	7a18      	ldrb	r0, [r3, #8]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	47a0      	blx	r4
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd90      	pop	{r4, r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	2000042c 	.word	0x2000042c

08004b50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	607a      	str	r2, [r7, #4]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	4a0a      	ldr	r2, [pc, #40]	@ (8004b8c <disk_write+0x3c>)
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	68dc      	ldr	r4, [r3, #12]
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	4a07      	ldr	r2, [pc, #28]	@ (8004b8c <disk_write+0x3c>)
 8004b70:	4413      	add	r3, r2
 8004b72:	7a18      	ldrb	r0, [r3, #8]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	47a0      	blx	r4
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd90      	pop	{r4, r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	2000042c 	.word	0x2000042c

08004b90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	603a      	str	r2, [r7, #0]
 8004b9a:	71fb      	strb	r3, [r7, #7]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	4a09      	ldr	r2, [pc, #36]	@ (8004bc8 <disk_ioctl+0x38>)
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	79fa      	ldrb	r2, [r7, #7]
 8004bae:	4906      	ldr	r1, [pc, #24]	@ (8004bc8 <disk_ioctl+0x38>)
 8004bb0:	440a      	add	r2, r1
 8004bb2:	7a10      	ldrb	r0, [r2, #8]
 8004bb4:	79b9      	ldrb	r1, [r7, #6]
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	4798      	blx	r3
 8004bba:	4603      	mov	r3, r0
 8004bbc:	73fb      	strb	r3, [r7, #15]
  return res;
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	2000042c 	.word	0x2000042c

08004bcc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004bdc:	89fb      	ldrh	r3, [r7, #14]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	b21a      	sxth	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	b21b      	sxth	r3, r3
 8004be8:	4313      	orrs	r3, r2
 8004bea:	b21b      	sxth	r3, r3
 8004bec:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004bee:	89fb      	ldrh	r3, [r7, #14]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3303      	adds	r3, #3
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	3202      	adds	r2, #2
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	021b      	lsls	r3, r3, #8
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	3201      	adds	r2, #1
 8004c22:	7812      	ldrb	r2, [r2, #0]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	7812      	ldrb	r2, [r2, #0]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
	return rv;
 8004c34:	68fb      	ldr	r3, [r7, #12]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	887a      	ldrh	r2, [r7, #2]
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	887b      	ldrh	r3, [r7, #2]
 8004c5c:	0a1b      	lsrs	r3, r3, #8
 8004c5e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	887a      	ldrh	r2, [r7, #2]
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	701a      	strb	r2, [r3, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	0a1b      	lsrs	r3, r3, #8
 8004c92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	607a      	str	r2, [r7, #4]
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	0a1b      	lsrs	r3, r3, #8
 8004ca4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	0a1b      	lsrs	r3, r3, #8
 8004cb6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00d      	beq.n	8004d06 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	1c53      	adds	r3, r2, #1
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	1c59      	adds	r1, r3, #1
 8004cf4:	6179      	str	r1, [r7, #20]
 8004cf6:	7812      	ldrb	r2, [r2, #0]
 8004cf8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f1      	bne.n	8004cea <mem_cpy+0x1a>
	}
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004d12:	b480      	push	{r7}
 8004d14:	b087      	sub	sp, #28
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	617a      	str	r2, [r7, #20]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f3      	bne.n	8004d22 <mem_set+0x10>
}
 8004d3a:	bf00      	nop
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004d48:	b480      	push	{r7}
 8004d4a:	b089      	sub	sp, #36	@ 0x24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	61fa      	str	r2, [r7, #28]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	61ba      	str	r2, [r7, #24]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	1acb      	subs	r3, r1, r3
 8004d74:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	607b      	str	r3, [r7, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <mem_cmp+0x40>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0eb      	beq.n	8004d60 <mem_cmp+0x18>

	return r;
 8004d88:	697b      	ldr	r3, [r7, #20]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3724      	adds	r7, #36	@ 0x24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004da0:	e002      	b.n	8004da8 <chk_chr+0x12>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3301      	adds	r3, #1
 8004da6:	607b      	str	r3, [r7, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <chk_chr+0x26>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d1f2      	bne.n	8004da2 <chk_chr+0xc>
	return *str;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e029      	b.n	8004e34 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004de0:	4a27      	ldr	r2, [pc, #156]	@ (8004e80 <chk_lock+0xb4>)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	4413      	add	r3, r2
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d01d      	beq.n	8004e2a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004dee:	4a24      	ldr	r2, [pc, #144]	@ (8004e80 <chk_lock+0xb4>)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	4413      	add	r3, r2
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d116      	bne.n	8004e2e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004e00:	4a1f      	ldr	r2, [pc, #124]	@ (8004e80 <chk_lock+0xb4>)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	4413      	add	r3, r2
 8004e08:	3304      	adds	r3, #4
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d10c      	bne.n	8004e2e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004e14:	4a1a      	ldr	r2, [pc, #104]	@ (8004e80 <chk_lock+0xb4>)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	4413      	add	r3, r2
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d102      	bne.n	8004e2e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004e28:	e007      	b.n	8004e3a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3301      	adds	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d9d2      	bls.n	8004de0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d109      	bne.n	8004e54 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <chk_lock+0x80>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d101      	bne.n	8004e50 <chk_lock+0x84>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e010      	b.n	8004e72 <chk_lock+0xa6>
 8004e50:	2312      	movs	r3, #18
 8004e52:	e00e      	b.n	8004e72 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d108      	bne.n	8004e6c <chk_lock+0xa0>
 8004e5a:	4a09      	ldr	r2, [pc, #36]	@ (8004e80 <chk_lock+0xb4>)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	4413      	add	r3, r2
 8004e62:	330c      	adds	r3, #12
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e6a:	d101      	bne.n	8004e70 <chk_lock+0xa4>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	e000      	b.n	8004e72 <chk_lock+0xa6>
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	2000020c 	.word	0x2000020c

08004e84 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	607b      	str	r3, [r7, #4]
 8004e8e:	e002      	b.n	8004e96 <enq_lock+0x12>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3301      	adds	r3, #1
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d806      	bhi.n	8004eaa <enq_lock+0x26>
 8004e9c:	4a09      	ldr	r2, [pc, #36]	@ (8004ec4 <enq_lock+0x40>)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	4413      	add	r3, r2
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f2      	bne.n	8004e90 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	bf14      	ite	ne
 8004eb0:	2301      	movne	r3, #1
 8004eb2:	2300      	moveq	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	2000020c 	.word	0x2000020c

08004ec8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	e01f      	b.n	8004f18 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004ed8:	4a41      	ldr	r2, [pc, #260]	@ (8004fe0 <inc_lock+0x118>)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	4413      	add	r3, r2
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d113      	bne.n	8004f12 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004eea:	4a3d      	ldr	r2, [pc, #244]	@ (8004fe0 <inc_lock+0x118>)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	4413      	add	r3, r2
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d109      	bne.n	8004f12 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004efe:	4a38      	ldr	r2, [pc, #224]	@ (8004fe0 <inc_lock+0x118>)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	4413      	add	r3, r2
 8004f06:	3308      	adds	r3, #8
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d006      	beq.n	8004f20 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3301      	adds	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d9dc      	bls.n	8004ed8 <inc_lock+0x10>
 8004f1e:	e000      	b.n	8004f22 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004f20:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d132      	bne.n	8004f8e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	e002      	b.n	8004f34 <inc_lock+0x6c>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3301      	adds	r3, #1
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d806      	bhi.n	8004f48 <inc_lock+0x80>
 8004f3a:	4a29      	ldr	r2, [pc, #164]	@ (8004fe0 <inc_lock+0x118>)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	4413      	add	r3, r2
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1f2      	bne.n	8004f2e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d101      	bne.n	8004f52 <inc_lock+0x8a>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e040      	b.n	8004fd4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4922      	ldr	r1, [pc, #136]	@ (8004fe0 <inc_lock+0x118>)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	440b      	add	r3, r1
 8004f5e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	491e      	ldr	r1, [pc, #120]	@ (8004fe0 <inc_lock+0x118>)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	440b      	add	r3, r1
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	491a      	ldr	r1, [pc, #104]	@ (8004fe0 <inc_lock+0x118>)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004f80:	4a17      	ldr	r2, [pc, #92]	@ (8004fe0 <inc_lock+0x118>)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	4413      	add	r3, r2
 8004f88:	330c      	adds	r3, #12
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d009      	beq.n	8004fa8 <inc_lock+0xe0>
 8004f94:	4a12      	ldr	r2, [pc, #72]	@ (8004fe0 <inc_lock+0x118>)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	4413      	add	r3, r2
 8004f9c:	330c      	adds	r3, #12
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <inc_lock+0xe0>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e015      	b.n	8004fd4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d108      	bne.n	8004fc0 <inc_lock+0xf8>
 8004fae:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe0 <inc_lock+0x118>)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	4413      	add	r3, r2
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	e001      	b.n	8004fc4 <inc_lock+0xfc>
 8004fc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fc4:	4906      	ldr	r1, [pc, #24]	@ (8004fe0 <inc_lock+0x118>)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	440b      	add	r3, r1
 8004fcc:	330c      	adds	r3, #12
 8004fce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3301      	adds	r3, #1
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	2000020c 	.word	0x2000020c

08004fe4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d825      	bhi.n	8005044 <dec_lock+0x60>
		n = Files[i].ctr;
 8004ff8:	4a17      	ldr	r2, [pc, #92]	@ (8005058 <dec_lock+0x74>)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	4413      	add	r3, r2
 8005000:	330c      	adds	r3, #12
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005006:	89fb      	ldrh	r3, [r7, #14]
 8005008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800500c:	d101      	bne.n	8005012 <dec_lock+0x2e>
 800500e:	2300      	movs	r3, #0
 8005010:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005012:	89fb      	ldrh	r3, [r7, #14]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <dec_lock+0x3a>
 8005018:	89fb      	ldrh	r3, [r7, #14]
 800501a:	3b01      	subs	r3, #1
 800501c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800501e:	4a0e      	ldr	r2, [pc, #56]	@ (8005058 <dec_lock+0x74>)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	4413      	add	r3, r2
 8005026:	330c      	adds	r3, #12
 8005028:	89fa      	ldrh	r2, [r7, #14]
 800502a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800502c:	89fb      	ldrh	r3, [r7, #14]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d105      	bne.n	800503e <dec_lock+0x5a>
 8005032:	4a09      	ldr	r2, [pc, #36]	@ (8005058 <dec_lock+0x74>)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	4413      	add	r3, r2
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	737b      	strb	r3, [r7, #13]
 8005042:	e001      	b.n	8005048 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005044:	2302      	movs	r3, #2
 8005046:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005048:	7b7b      	ldrb	r3, [r7, #13]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	2000020c 	.word	0x2000020c

0800505c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	e010      	b.n	800508c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800506a:	4a0d      	ldr	r2, [pc, #52]	@ (80050a0 <clear_lock+0x44>)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	4413      	add	r3, r2
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d105      	bne.n	8005086 <clear_lock+0x2a>
 800507a:	4a09      	ldr	r2, [pc, #36]	@ (80050a0 <clear_lock+0x44>)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	4413      	add	r3, r2
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3301      	adds	r3, #1
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d9eb      	bls.n	800506a <clear_lock+0xe>
	}
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	2000020c 	.word	0x2000020c

080050a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	78db      	ldrb	r3, [r3, #3]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d034      	beq.n	8005122 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	7858      	ldrb	r0, [r3, #1]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80050c8:	2301      	movs	r3, #1
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	f7ff fd40 	bl	8004b50 <disk_write>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <sync_window+0x38>
			res = FR_DISK_ERR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
 80050da:	e022      	b.n	8005122 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	1ad2      	subs	r2, r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d217      	bcs.n	8005122 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	789b      	ldrb	r3, [r3, #2]
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	e010      	b.n	800511c <sync_window+0x78>
					wsect += fs->fsize;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4413      	add	r3, r2
 8005102:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	7858      	ldrb	r0, [r3, #1]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800510e:	2301      	movs	r3, #1
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	f7ff fd1d 	bl	8004b50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	3b01      	subs	r3, #1
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d8eb      	bhi.n	80050fa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005122:	7bfb      	ldrb	r3, [r7, #15]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d01b      	beq.n	800517c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff ffad 	bl	80050a4 <sync_window>
 800514a:	4603      	mov	r3, r0
 800514c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d113      	bne.n	800517c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	7858      	ldrb	r0, [r3, #1]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800515e:	2301      	movs	r3, #1
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	f7ff fcd5 	bl	8004b10 <disk_read>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d004      	beq.n	8005176 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800516c:	f04f 33ff 	mov.w	r3, #4294967295
 8005170:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005172:	2301      	movs	r3, #1
 8005174:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800517c:	7bfb      	ldrb	r3, [r7, #15]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff ff87 	bl	80050a4 <sync_window>
 8005196:	4603      	mov	r3, r0
 8005198:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d159      	bne.n	8005254 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d149      	bne.n	800523c <sync_fs+0xb4>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	791b      	ldrb	r3, [r3, #4]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d145      	bne.n	800523c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	899b      	ldrh	r3, [r3, #12]
 80051ba:	461a      	mov	r2, r3
 80051bc:	2100      	movs	r1, #0
 80051be:	f7ff fda8 	bl	8004d12 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3338      	adds	r3, #56	@ 0x38
 80051c6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80051ca:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fd37 	bl	8004c42 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3338      	adds	r3, #56	@ 0x38
 80051d8:	4921      	ldr	r1, [pc, #132]	@ (8005260 <sync_fs+0xd8>)
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fd4c 	bl	8004c78 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3338      	adds	r3, #56	@ 0x38
 80051e4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80051e8:	491e      	ldr	r1, [pc, #120]	@ (8005264 <sync_fs+0xdc>)
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff fd44 	bl	8004c78 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3338      	adds	r3, #56	@ 0x38
 80051f4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f7ff fd3a 	bl	8004c78 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3338      	adds	r3, #56	@ 0x38
 8005208:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f7ff fd30 	bl	8004c78 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	7858      	ldrb	r0, [r3, #1]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005230:	2301      	movs	r3, #1
 8005232:	f7ff fc8d 	bl	8004b50 <disk_write>
			fs->fsi_flag = 0;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	785b      	ldrb	r3, [r3, #1]
 8005240:	2200      	movs	r2, #0
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fca3 	bl	8004b90 <disk_ioctl>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <sync_fs+0xcc>
 8005250:	2301      	movs	r3, #1
 8005252:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005254:	7bfb      	ldrb	r3, [r7, #15]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	41615252 	.word	0x41615252
 8005264:	61417272 	.word	0x61417272

08005268 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	3b02      	subs	r3, #2
 8005276:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	3b02      	subs	r3, #2
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d301      	bcc.n	8005288 <clust2sect+0x20>
 8005284:	2300      	movs	r3, #0
 8005286:	e008      	b.n	800529a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	895b      	ldrh	r3, [r3, #10]
 800528c:	461a      	mov	r2, r3
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	fb03 f202 	mul.w	r2, r3, r2
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005298:	4413      	add	r3, r2
}
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b086      	sub	sp, #24
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d904      	bls.n	80052c6 <get_fat+0x20>
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d302      	bcc.n	80052cc <get_fat+0x26>
		val = 1;	/* Internal error */
 80052c6:	2301      	movs	r3, #1
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	e0ba      	b.n	8005442 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80052cc:	f04f 33ff 	mov.w	r3, #4294967295
 80052d0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	f000 8082 	beq.w	80053e0 <get_fat+0x13a>
 80052dc:	2b03      	cmp	r3, #3
 80052de:	f300 80a6 	bgt.w	800542e <get_fat+0x188>
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d002      	beq.n	80052ec <get_fat+0x46>
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d055      	beq.n	8005396 <get_fat+0xf0>
 80052ea:	e0a0      	b.n	800542e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	899b      	ldrh	r3, [r3, #12]
 8005302:	4619      	mov	r1, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	fbb3 f3f1 	udiv	r3, r3, r1
 800530a:	4413      	add	r3, r2
 800530c:	4619      	mov	r1, r3
 800530e:	6938      	ldr	r0, [r7, #16]
 8005310:	f7ff ff0c 	bl	800512c <move_window>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	f040 808c 	bne.w	8005434 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	60fa      	str	r2, [r7, #12]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	8992      	ldrh	r2, [r2, #12]
 8005326:	fbb3 f1f2 	udiv	r1, r3, r2
 800532a:	fb01 f202 	mul.w	r2, r1, r2
 800532e:	1a9b      	subs	r3, r3, r2
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4413      	add	r3, r2
 8005334:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005338:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	899b      	ldrh	r3, [r3, #12]
 8005342:	4619      	mov	r1, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	fbb3 f3f1 	udiv	r3, r3, r1
 800534a:	4413      	add	r3, r2
 800534c:	4619      	mov	r1, r3
 800534e:	6938      	ldr	r0, [r7, #16]
 8005350:	f7ff feec 	bl	800512c <move_window>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d16e      	bne.n	8005438 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	899b      	ldrh	r3, [r3, #12]
 800535e:	461a      	mov	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	fbb3 f1f2 	udiv	r1, r3, r2
 8005366:	fb01 f202 	mul.w	r2, r1, r2
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4413      	add	r3, r2
 8005370:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	4313      	orrs	r3, r2
 800537a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <get_fat+0xe6>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	091b      	lsrs	r3, r3, #4
 800538a:	e002      	b.n	8005392 <get_fat+0xec>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005392:	617b      	str	r3, [r7, #20]
			break;
 8005394:	e055      	b.n	8005442 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	899b      	ldrh	r3, [r3, #12]
 800539e:	085b      	lsrs	r3, r3, #1
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	4619      	mov	r1, r3
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80053aa:	4413      	add	r3, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	6938      	ldr	r0, [r7, #16]
 80053b0:	f7ff febc 	bl	800512c <move_window>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d140      	bne.n	800543c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	8992      	ldrh	r2, [r2, #12]
 80053c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80053cc:	fb00 f202 	mul.w	r2, r0, r2
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	440b      	add	r3, r1
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff fbf9 	bl	8004bcc <ld_word>
 80053da:	4603      	mov	r3, r0
 80053dc:	617b      	str	r3, [r7, #20]
			break;
 80053de:	e030      	b.n	8005442 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	899b      	ldrh	r3, [r3, #12]
 80053e8:	089b      	lsrs	r3, r3, #2
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	4619      	mov	r1, r3
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80053f4:	4413      	add	r3, r2
 80053f6:	4619      	mov	r1, r3
 80053f8:	6938      	ldr	r0, [r7, #16]
 80053fa:	f7ff fe97 	bl	800512c <move_window>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d11d      	bne.n	8005440 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	8992      	ldrh	r2, [r2, #12]
 8005412:	fbb3 f0f2 	udiv	r0, r3, r2
 8005416:	fb00 f202 	mul.w	r2, r0, r2
 800541a:	1a9b      	subs	r3, r3, r2
 800541c:	440b      	add	r3, r1
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff fbec 	bl	8004bfc <ld_dword>
 8005424:	4603      	mov	r3, r0
 8005426:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800542a:	617b      	str	r3, [r7, #20]
			break;
 800542c:	e009      	b.n	8005442 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800542e:	2301      	movs	r3, #1
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	e006      	b.n	8005442 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005434:	bf00      	nop
 8005436:	e004      	b.n	8005442 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005438:	bf00      	nop
 800543a:	e002      	b.n	8005442 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800543c:	bf00      	nop
 800543e:	e000      	b.n	8005442 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005440:	bf00      	nop
		}
	}

	return val;
 8005442:	697b      	ldr	r3, [r7, #20]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800544c:	b590      	push	{r4, r7, lr}
 800544e:	b089      	sub	sp, #36	@ 0x24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005458:	2302      	movs	r3, #2
 800545a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b01      	cmp	r3, #1
 8005460:	f240 8109 	bls.w	8005676 <put_fat+0x22a>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	429a      	cmp	r2, r3
 800546c:	f080 8103 	bcs.w	8005676 <put_fat+0x22a>
		switch (fs->fs_type) {
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b03      	cmp	r3, #3
 8005476:	f000 80b6 	beq.w	80055e6 <put_fat+0x19a>
 800547a:	2b03      	cmp	r3, #3
 800547c:	f300 80fb 	bgt.w	8005676 <put_fat+0x22a>
 8005480:	2b01      	cmp	r3, #1
 8005482:	d003      	beq.n	800548c <put_fat+0x40>
 8005484:	2b02      	cmp	r3, #2
 8005486:	f000 8083 	beq.w	8005590 <put_fat+0x144>
 800548a:	e0f4      	b.n	8005676 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4413      	add	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	899b      	ldrh	r3, [r3, #12]
 80054a2:	4619      	mov	r1, r3
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054aa:	4413      	add	r3, r2
 80054ac:	4619      	mov	r1, r3
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f7ff fe3c 	bl	800512c <move_window>
 80054b4:	4603      	mov	r3, r0
 80054b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054b8:	7ffb      	ldrb	r3, [r7, #31]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f040 80d4 	bne.w	8005668 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	61ba      	str	r2, [r7, #24]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	8992      	ldrh	r2, [r2, #12]
 80054d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80054d4:	fb00 f202 	mul.w	r2, r0, r2
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	440b      	add	r3, r1
 80054dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00d      	beq.n	8005504 <put_fat+0xb8>
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	b25b      	sxtb	r3, r3
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	b25a      	sxtb	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	b25b      	sxtb	r3, r3
 80054fc:	4313      	orrs	r3, r2
 80054fe:	b25b      	sxtb	r3, r3
 8005500:	b2db      	uxtb	r3, r3
 8005502:	e001      	b.n	8005508 <put_fat+0xbc>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	899b      	ldrh	r3, [r3, #12]
 800551a:	4619      	mov	r1, r3
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005522:	4413      	add	r3, r2
 8005524:	4619      	mov	r1, r3
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7ff fe00 	bl	800512c <move_window>
 800552c:	4603      	mov	r3, r0
 800552e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005530:	7ffb      	ldrb	r3, [r7, #31]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f040 809a 	bne.w	800566c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	899b      	ldrh	r3, [r3, #12]
 8005542:	461a      	mov	r2, r3
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	fbb3 f0f2 	udiv	r0, r3, r2
 800554a:	fb00 f202 	mul.w	r2, r0, r2
 800554e:	1a9b      	subs	r3, r3, r2
 8005550:	440b      	add	r3, r1
 8005552:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <put_fat+0x11a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	b2db      	uxtb	r3, r3
 8005564:	e00e      	b.n	8005584 <put_fat+0x138>
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	b25b      	sxtb	r3, r3
 800556c:	f023 030f 	bic.w	r3, r3, #15
 8005570:	b25a      	sxtb	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	0a1b      	lsrs	r3, r3, #8
 8005576:	b25b      	sxtb	r3, r3
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	b25b      	sxtb	r3, r3
 800557e:	4313      	orrs	r3, r2
 8005580:	b25b      	sxtb	r3, r3
 8005582:	b2db      	uxtb	r3, r3
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	70da      	strb	r2, [r3, #3]
			break;
 800558e:	e072      	b.n	8005676 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	899b      	ldrh	r3, [r3, #12]
 8005598:	085b      	lsrs	r3, r3, #1
 800559a:	b29b      	uxth	r3, r3
 800559c:	4619      	mov	r1, r3
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80055a4:	4413      	add	r3, r2
 80055a6:	4619      	mov	r1, r3
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7ff fdbf 	bl	800512c <move_window>
 80055ae:	4603      	mov	r3, r0
 80055b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055b2:	7ffb      	ldrb	r3, [r7, #31]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d15b      	bne.n	8005670 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	8992      	ldrh	r2, [r2, #12]
 80055c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80055ca:	fb00 f202 	mul.w	r2, r0, r2
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	440b      	add	r3, r1
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	b292      	uxth	r2, r2
 80055d6:	4611      	mov	r1, r2
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff fb32 	bl	8004c42 <st_word>
			fs->wflag = 1;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	70da      	strb	r2, [r3, #3]
			break;
 80055e4:	e047      	b.n	8005676 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	899b      	ldrh	r3, [r3, #12]
 80055ee:	089b      	lsrs	r3, r3, #2
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	4619      	mov	r1, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80055fa:	4413      	add	r3, r2
 80055fc:	4619      	mov	r1, r3
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f7ff fd94 	bl	800512c <move_window>
 8005604:	4603      	mov	r3, r0
 8005606:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005608:	7ffb      	ldrb	r3, [r7, #31]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d132      	bne.n	8005674 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	8992      	ldrh	r2, [r2, #12]
 8005622:	fbb3 f0f2 	udiv	r0, r3, r2
 8005626:	fb00 f202 	mul.w	r2, r0, r2
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	440b      	add	r3, r1
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fae4 	bl	8004bfc <ld_dword>
 8005634:	4603      	mov	r3, r0
 8005636:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800563a:	4323      	orrs	r3, r4
 800563c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	8992      	ldrh	r2, [r2, #12]
 800564c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005650:	fb00 f202 	mul.w	r2, r0, r2
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	440b      	add	r3, r1
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff fb0c 	bl	8004c78 <st_dword>
			fs->wflag = 1;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2201      	movs	r2, #1
 8005664:	70da      	strb	r2, [r3, #3]
			break;
 8005666:	e006      	b.n	8005676 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005668:	bf00      	nop
 800566a:	e004      	b.n	8005676 <put_fat+0x22a>
			if (res != FR_OK) break;
 800566c:	bf00      	nop
 800566e:	e002      	b.n	8005676 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005670:	bf00      	nop
 8005672:	e000      	b.n	8005676 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005674:	bf00      	nop
		}
	}
	return res;
 8005676:	7ffb      	ldrb	r3, [r7, #31]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3724      	adds	r7, #36	@ 0x24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd90      	pop	{r4, r7, pc}

08005680 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d904      	bls.n	80056a6 <remove_chain+0x26>
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d301      	bcc.n	80056aa <remove_chain+0x2a>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e04b      	b.n	8005742 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00c      	beq.n	80056ca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80056b0:	f04f 32ff 	mov.w	r2, #4294967295
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	69b8      	ldr	r0, [r7, #24]
 80056b8:	f7ff fec8 	bl	800544c <put_fat>
 80056bc:	4603      	mov	r3, r0
 80056be:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80056c0:	7ffb      	ldrb	r3, [r7, #31]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <remove_chain+0x4a>
 80056c6:	7ffb      	ldrb	r3, [r7, #31]
 80056c8:	e03b      	b.n	8005742 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80056ca:	68b9      	ldr	r1, [r7, #8]
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f7ff fdea 	bl	80052a6 <get_fat>
 80056d2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d031      	beq.n	800573e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <remove_chain+0x64>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e02e      	b.n	8005742 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ea:	d101      	bne.n	80056f0 <remove_chain+0x70>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e028      	b.n	8005742 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80056f0:	2200      	movs	r2, #0
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	69b8      	ldr	r0, [r7, #24]
 80056f6:	f7ff fea9 	bl	800544c <put_fat>
 80056fa:	4603      	mov	r3, r0
 80056fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80056fe:	7ffb      	ldrb	r3, [r7, #31]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <remove_chain+0x88>
 8005704:	7ffb      	ldrb	r3, [r7, #31]
 8005706:	e01c      	b.n	8005742 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	3b02      	subs	r3, #2
 8005712:	429a      	cmp	r2, r3
 8005714:	d20b      	bcs.n	800572e <remove_chain+0xae>
			fs->free_clst++;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	791b      	ldrb	r3, [r3, #4]
 8005724:	f043 0301 	orr.w	r3, r3, #1
 8005728:	b2da      	uxtb	r2, r3
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	429a      	cmp	r2, r3
 800573a:	d3c6      	bcc.n	80056ca <remove_chain+0x4a>
 800573c:	e000      	b.n	8005740 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800573e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b088      	sub	sp, #32
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10d      	bne.n	800577c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <create_chain+0x2c>
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	429a      	cmp	r2, r3
 8005774:	d31b      	bcc.n	80057ae <create_chain+0x64>
 8005776:	2301      	movs	r3, #1
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	e018      	b.n	80057ae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff fd91 	bl	80052a6 <get_fat>
 8005784:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d801      	bhi.n	8005790 <create_chain+0x46>
 800578c:	2301      	movs	r3, #1
 800578e:	e070      	b.n	8005872 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d101      	bne.n	800579c <create_chain+0x52>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	e06a      	b.n	8005872 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d201      	bcs.n	80057aa <create_chain+0x60>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	e063      	b.n	8005872 <create_chain+0x128>
		scl = clst;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	3301      	adds	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d307      	bcc.n	80057d2 <create_chain+0x88>
				ncl = 2;
 80057c2:	2302      	movs	r3, #2
 80057c4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d901      	bls.n	80057d2 <create_chain+0x88>
 80057ce:	2300      	movs	r3, #0
 80057d0:	e04f      	b.n	8005872 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80057d2:	69f9      	ldr	r1, [r7, #28]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff fd66 	bl	80052a6 <get_fat>
 80057da:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00e      	beq.n	8005800 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d003      	beq.n	80057f0 <create_chain+0xa6>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ee:	d101      	bne.n	80057f4 <create_chain+0xaa>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	e03e      	b.n	8005872 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d1da      	bne.n	80057b2 <create_chain+0x68>
 80057fc:	2300      	movs	r3, #0
 80057fe:	e038      	b.n	8005872 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005800:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005802:	f04f 32ff 	mov.w	r2, #4294967295
 8005806:	69f9      	ldr	r1, [r7, #28]
 8005808:	6938      	ldr	r0, [r7, #16]
 800580a:	f7ff fe1f 	bl	800544c <put_fat>
 800580e:	4603      	mov	r3, r0
 8005810:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005812:	7dfb      	ldrb	r3, [r7, #23]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d109      	bne.n	800582c <create_chain+0xe2>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d006      	beq.n	800582c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	6938      	ldr	r0, [r7, #16]
 8005824:	f7ff fe12 	bl	800544c <put_fat>
 8005828:	4603      	mov	r3, r0
 800582a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800582c:	7dfb      	ldrb	r3, [r7, #23]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d116      	bne.n	8005860 <create_chain+0x116>
		fs->last_clst = ncl;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	3b02      	subs	r3, #2
 8005842:	429a      	cmp	r2, r3
 8005844:	d804      	bhi.n	8005850 <create_chain+0x106>
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	1e5a      	subs	r2, r3, #1
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	791b      	ldrb	r3, [r3, #4]
 8005854:	f043 0301 	orr.w	r3, r3, #1
 8005858:	b2da      	uxtb	r2, r3
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	711a      	strb	r2, [r3, #4]
 800585e:	e007      	b.n	8005870 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005860:	7dfb      	ldrb	r3, [r7, #23]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d102      	bne.n	800586c <create_chain+0x122>
 8005866:	f04f 33ff 	mov.w	r3, #4294967295
 800586a:	e000      	b.n	800586e <create_chain+0x124>
 800586c:	2301      	movs	r3, #1
 800586e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005870:	69fb      	ldr	r3, [r7, #28]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800587a:	b480      	push	{r7}
 800587c:	b087      	sub	sp, #28
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588e:	3304      	adds	r3, #4
 8005890:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	899b      	ldrh	r3, [r3, #12]
 8005896:	461a      	mov	r2, r3
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	fbb3 f3f2 	udiv	r3, r3, r2
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	8952      	ldrh	r2, [r2, #10]
 80058a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80058a6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1d1a      	adds	r2, r3, #4
 80058ac:	613a      	str	r2, [r7, #16]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <clmt_clust+0x42>
 80058b8:	2300      	movs	r3, #0
 80058ba:	e010      	b.n	80058de <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d307      	bcc.n	80058d4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	3304      	adds	r3, #4
 80058d0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80058d2:	e7e9      	b.n	80058a8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80058d4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	4413      	add	r3, r2
}
 80058de:	4618      	mov	r0, r3
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b086      	sub	sp, #24
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005900:	d204      	bcs.n	800590c <dir_sdi+0x22>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <dir_sdi+0x26>
		return FR_INT_ERR;
 800590c:	2302      	movs	r3, #2
 800590e:	e071      	b.n	80059f4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <dir_sdi+0x46>
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d902      	bls.n	8005930 <dir_sdi+0x46>
		clst = fs->dirbase;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10c      	bne.n	8005950 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	8912      	ldrh	r2, [r2, #8]
 800593e:	4293      	cmp	r3, r2
 8005940:	d301      	bcc.n	8005946 <dir_sdi+0x5c>
 8005942:	2302      	movs	r3, #2
 8005944:	e056      	b.n	80059f4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	61da      	str	r2, [r3, #28]
 800594e:	e02d      	b.n	80059ac <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	895b      	ldrh	r3, [r3, #10]
 8005954:	461a      	mov	r2, r3
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	899b      	ldrh	r3, [r3, #12]
 800595a:	fb02 f303 	mul.w	r3, r2, r3
 800595e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005960:	e019      	b.n	8005996 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6979      	ldr	r1, [r7, #20]
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fc9d 	bl	80052a6 <get_fat>
 800596c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005974:	d101      	bne.n	800597a <dir_sdi+0x90>
 8005976:	2301      	movs	r3, #1
 8005978:	e03c      	b.n	80059f4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d904      	bls.n	800598a <dir_sdi+0xa0>
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	429a      	cmp	r2, r3
 8005988:	d301      	bcc.n	800598e <dir_sdi+0xa4>
 800598a:	2302      	movs	r3, #2
 800598c:	e032      	b.n	80059f4 <dir_sdi+0x10a>
			ofs -= csz;
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	429a      	cmp	r2, r3
 800599c:	d2e1      	bcs.n	8005962 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800599e:	6979      	ldr	r1, [r7, #20]
 80059a0:	6938      	ldr	r0, [r7, #16]
 80059a2:	f7ff fc61 	bl	8005268 <clust2sect>
 80059a6:	4602      	mov	r2, r0
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <dir_sdi+0xd4>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e01a      	b.n	80059f4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69da      	ldr	r2, [r3, #28]
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	899b      	ldrh	r3, [r3, #12]
 80059c6:	4619      	mov	r1, r3
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80059ce:	441a      	add	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	899b      	ldrh	r3, [r3, #12]
 80059de:	461a      	mov	r2, r3
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80059e6:	fb00 f202 	mul.w	r2, r0, r2
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	18ca      	adds	r2, r1, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	3320      	adds	r3, #32
 8005a12:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <dir_next+0x28>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a22:	d301      	bcc.n	8005a28 <dir_next+0x2c>
 8005a24:	2304      	movs	r3, #4
 8005a26:	e0bb      	b.n	8005ba0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	899b      	ldrh	r3, [r3, #12]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a34:	fb01 f202 	mul.w	r2, r1, r2
 8005a38:	1a9b      	subs	r3, r3, r2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f040 809d 	bne.w	8005b7a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10b      	bne.n	8005a6a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	8912      	ldrh	r2, [r2, #8]
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	f0c0 808d 	bcc.w	8005b7a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	61da      	str	r2, [r3, #28]
 8005a66:	2304      	movs	r3, #4
 8005a68:	e09a      	b.n	8005ba0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	899b      	ldrh	r3, [r3, #12]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	8952      	ldrh	r2, [r2, #10]
 8005a7a:	3a01      	subs	r2, #1
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d17b      	bne.n	8005b7a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	f7ff fc0b 	bl	80052a6 <get_fat>
 8005a90:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d801      	bhi.n	8005a9c <dir_next+0xa0>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e081      	b.n	8005ba0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d101      	bne.n	8005aa8 <dir_next+0xac>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e07b      	b.n	8005ba0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d359      	bcc.n	8005b66 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d104      	bne.n	8005ac2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	61da      	str	r2, [r3, #28]
 8005abe:	2304      	movs	r3, #4
 8005ac0:	e06e      	b.n	8005ba0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4610      	mov	r0, r2
 8005acc:	f7ff fe3d 	bl	800574a <create_chain>
 8005ad0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <dir_next+0xe0>
 8005ad8:	2307      	movs	r3, #7
 8005ada:	e061      	b.n	8005ba0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <dir_next+0xea>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e05c      	b.n	8005ba0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d101      	bne.n	8005af2 <dir_next+0xf6>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e056      	b.n	8005ba0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f7ff fad6 	bl	80050a4 <sync_window>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <dir_next+0x106>
 8005afe:	2301      	movs	r3, #1
 8005b00:	e04e      	b.n	8005ba0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	899b      	ldrh	r3, [r3, #12]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	2100      	movs	r1, #0
 8005b10:	f7ff f8ff 	bl	8004d12 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	6979      	ldr	r1, [r7, #20]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f7ff fba4 	bl	8005268 <clust2sect>
 8005b20:	4602      	mov	r2, r0
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b26:	e012      	b.n	8005b4e <dir_next+0x152>
						fs->wflag = 1;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7ff fab8 	bl	80050a4 <sync_window>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <dir_next+0x142>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e030      	b.n	8005ba0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	3301      	adds	r3, #1
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	895b      	ldrh	r3, [r3, #10]
 8005b52:	461a      	mov	r2, r3
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d3e6      	bcc.n	8005b28 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad2      	subs	r2, r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005b6c:	6979      	ldr	r1, [r7, #20]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f7ff fb7a 	bl	8005268 <clust2sect>
 8005b74:	4602      	mov	r2, r0
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	899b      	ldrh	r3, [r3, #12]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b92:	fb00 f202 	mul.w	r2, r0, r2
 8005b96:	1a9b      	subs	r3, r3, r2
 8005b98:	18ca      	adds	r2, r1, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005bb8:	2100      	movs	r1, #0
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7ff fe95 	bl	80058ea <dir_sdi>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d12b      	bne.n	8005c22 <dir_alloc+0x7a>
		n = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7ff faa9 	bl	800512c <move_window>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d11d      	bne.n	8005c20 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2be5      	cmp	r3, #229	@ 0xe5
 8005bec:	d004      	beq.n	8005bf8 <dir_alloc+0x50>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d107      	bne.n	8005c08 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d102      	bne.n	8005c0c <dir_alloc+0x64>
 8005c06:	e00c      	b.n	8005c22 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005c08:	2300      	movs	r3, #0
 8005c0a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff fef4 	bl	80059fc <dir_next>
 8005c14:	4603      	mov	r3, r0
 8005c16:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005c18:	7dfb      	ldrb	r3, [r7, #23]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0d7      	beq.n	8005bce <dir_alloc+0x26>
 8005c1e:	e000      	b.n	8005c22 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005c20:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d101      	bne.n	8005c2c <dir_alloc+0x84>
 8005c28:	2307      	movs	r3, #7
 8005c2a:	75fb      	strb	r3, [r7, #23]
	return res;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	331a      	adds	r3, #26
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fe ffc1 	bl	8004bcc <ld_word>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d109      	bne.n	8005c6a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	3314      	adds	r3, #20
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fe ffb6 	bl	8004bcc <ld_word>
 8005c60:	4603      	mov	r3, r0
 8005c62:	041b      	lsls	r3, r3, #16
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	331a      	adds	r3, #26
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	b292      	uxth	r2, r2
 8005c88:	4611      	mov	r1, r2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe ffd9 	bl	8004c42 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d109      	bne.n	8005cac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f103 0214 	add.w	r2, r3, #20
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	0c1b      	lsrs	r3, r3, #16
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	f7fe ffcb 	bl	8004c42 <st_word>
	}
}
 8005cac:	bf00      	nop
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005cb4:	b590      	push	{r4, r7, lr}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	331a      	adds	r3, #26
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe ff82 	bl	8004bcc <ld_word>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <cmp_lfn+0x1e>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e059      	b.n	8005d86 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cda:	1e5a      	subs	r2, r3, #1
 8005cdc:	4613      	mov	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005ce8:	2301      	movs	r3, #1
 8005cea:	81fb      	strh	r3, [r7, #14]
 8005cec:	2300      	movs	r3, #0
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	e033      	b.n	8005d5a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005cf2:	4a27      	ldr	r2, [pc, #156]	@ (8005d90 <cmp_lfn+0xdc>)
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	4413      	add	r3, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fe ff63 	bl	8004bcc <ld_word>
 8005d06:	4603      	mov	r3, r0
 8005d08:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005d0a:	89fb      	ldrh	r3, [r7, #14]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01a      	beq.n	8005d46 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2bfe      	cmp	r3, #254	@ 0xfe
 8005d14:	d812      	bhi.n	8005d3c <cmp_lfn+0x88>
 8005d16:	89bb      	ldrh	r3, [r7, #12]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f002 f85f 	bl	8007ddc <ff_wtoupper>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	461c      	mov	r4, r3
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	617a      	str	r2, [r7, #20]
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f002 f853 	bl	8007ddc <ff_wtoupper>
 8005d36:	4603      	mov	r3, r0
 8005d38:	429c      	cmp	r4, r3
 8005d3a:	d001      	beq.n	8005d40 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e022      	b.n	8005d86 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005d40:	89bb      	ldrh	r3, [r7, #12]
 8005d42:	81fb      	strh	r3, [r7, #14]
 8005d44:	e006      	b.n	8005d54 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005d46:	89bb      	ldrh	r3, [r7, #12]
 8005d48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d001      	beq.n	8005d54 <cmp_lfn+0xa0>
 8005d50:	2300      	movs	r3, #0
 8005d52:	e018      	b.n	8005d86 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	3301      	adds	r3, #1
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b0c      	cmp	r3, #12
 8005d5e:	d9c8      	bls.n	8005cf2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00b      	beq.n	8005d84 <cmp_lfn+0xd0>
 8005d6c:	89fb      	ldrh	r3, [r7, #14]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d008      	beq.n	8005d84 <cmp_lfn+0xd0>
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <cmp_lfn+0xd0>
 8005d80:	2300      	movs	r3, #0
 8005d82:	e000      	b.n	8005d86 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005d84:	2301      	movs	r3, #1
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd90      	pop	{r4, r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	0800903c 	.word	0x0800903c

08005d94 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	4611      	mov	r1, r2
 8005da0:	461a      	mov	r2, r3
 8005da2:	460b      	mov	r3, r1
 8005da4:	71fb      	strb	r3, [r7, #7]
 8005da6:	4613      	mov	r3, r2
 8005da8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	330d      	adds	r3, #13
 8005dae:	79ba      	ldrb	r2, [r7, #6]
 8005db0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	330b      	adds	r3, #11
 8005db6:	220f      	movs	r2, #15
 8005db8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	331a      	adds	r3, #26
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fe ff3a 	bl	8004c42 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	1e5a      	subs	r2, r3, #1
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	82fb      	strh	r3, [r7, #22]
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005de6:	8afb      	ldrh	r3, [r7, #22]
 8005de8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d007      	beq.n	8005e00 <put_lfn+0x6c>
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	61fa      	str	r2, [r7, #28]
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005e00:	4a17      	ldr	r2, [pc, #92]	@ (8005e60 <put_lfn+0xcc>)
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	4413      	add	r3, r2
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	8afa      	ldrh	r2, [r7, #22]
 8005e10:	4611      	mov	r1, r2
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe ff15 	bl	8004c42 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005e18:	8afb      	ldrh	r3, [r7, #22]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d102      	bne.n	8005e24 <put_lfn+0x90>
 8005e1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e22:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	3301      	adds	r3, #1
 8005e28:	61bb      	str	r3, [r7, #24]
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b0c      	cmp	r3, #12
 8005e2e:	d9da      	bls.n	8005de6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005e30:	8afb      	ldrh	r3, [r7, #22]
 8005e32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d006      	beq.n	8005e48 <put_lfn+0xb4>
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d103      	bne.n	8005e50 <put_lfn+0xbc>
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e4e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	79fa      	ldrb	r2, [r7, #7]
 8005e54:	701a      	strb	r2, [r3, #0]
}
 8005e56:	bf00      	nop
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	0800903c 	.word	0x0800903c

08005e64 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08c      	sub	sp, #48	@ 0x30
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005e72:	220b      	movs	r2, #11
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7fe ff2a 	bl	8004cd0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b05      	cmp	r3, #5
 8005e80:	d929      	bls.n	8005ed6 <gen_numname+0x72>
		sr = seq;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005e86:	e020      	b.n	8005eca <gen_numname+0x66>
			wc = *lfn++;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	1c9a      	adds	r2, r3, #2
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005e92:	2300      	movs	r3, #0
 8005e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e96:	e015      	b.n	8005ec4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	005a      	lsls	r2, r3, #1
 8005e9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	4413      	add	r3, r2
 8005ea4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005ea6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ea8:	085b      	lsrs	r3, r3, #1
 8005eaa:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <gen_numname+0x5a>
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	4b30      	ldr	r3, [pc, #192]	@ (8005f7c <gen_numname+0x118>)
 8005eba:	4053      	eors	r3, r2
 8005ebc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec6:	2b0f      	cmp	r3, #15
 8005ec8:	d9e6      	bls.n	8005e98 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1da      	bne.n	8005e88 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005ed6:	2307      	movs	r3, #7
 8005ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	3330      	adds	r3, #48	@ 0x30
 8005ee6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005eea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005eee:	2b39      	cmp	r3, #57	@ 0x39
 8005ef0:	d904      	bls.n	8005efc <gen_numname+0x98>
 8005ef2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ef6:	3307      	adds	r3, #7
 8005ef8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efe:	1e5a      	subs	r2, r3, #1
 8005f00:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005f02:	3330      	adds	r3, #48	@ 0x30
 8005f04:	443b      	add	r3, r7
 8005f06:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005f0a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	091b      	lsrs	r3, r3, #4
 8005f12:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1df      	bne.n	8005eda <gen_numname+0x76>
	ns[i] = '~';
 8005f1a:	f107 0214 	add.w	r2, r7, #20
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	4413      	add	r3, r2
 8005f22:	227e      	movs	r2, #126	@ 0x7e
 8005f24:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005f26:	2300      	movs	r3, #0
 8005f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f2a:	e002      	b.n	8005f32 <gen_numname+0xce>
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2e:	3301      	adds	r3, #1
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d205      	bcs.n	8005f46 <gen_numname+0xe2>
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	4413      	add	r3, r2
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d1f2      	bne.n	8005f2c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f48:	2b07      	cmp	r3, #7
 8005f4a:	d807      	bhi.n	8005f5c <gen_numname+0xf8>
 8005f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005f52:	3330      	adds	r3, #48	@ 0x30
 8005f54:	443b      	add	r3, r7
 8005f56:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005f5a:	e000      	b.n	8005f5e <gen_numname+0xfa>
 8005f5c:	2120      	movs	r1, #32
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	460a      	mov	r2, r1
 8005f6a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	2b07      	cmp	r3, #7
 8005f70:	d9e9      	bls.n	8005f46 <gen_numname+0xe2>
}
 8005f72:	bf00      	nop
 8005f74:	bf00      	nop
 8005f76:	3730      	adds	r7, #48	@ 0x30
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	00011021 	.word	0x00011021

08005f80 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005f8c:	230b      	movs	r3, #11
 8005f8e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	0852      	lsrs	r2, r2, #1
 8005f96:	01db      	lsls	r3, r3, #7
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	1c59      	adds	r1, r3, #1
 8005fa0:	6079      	str	r1, [r7, #4]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1ed      	bne.n	8005f90 <sum_sfn+0x10>
	return sum;
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b086      	sub	sp, #24
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff fc89 	bl	80058ea <dir_sdi>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <dir_find+0x24>
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	e0a9      	b.n	800613a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005fe6:	23ff      	movs	r3, #255	@ 0xff
 8005fe8:	753b      	strb	r3, [r7, #20]
 8005fea:	7d3b      	ldrb	r3, [r7, #20]
 8005fec:	757b      	strb	r3, [r7, #21]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6938      	ldr	r0, [r7, #16]
 8005ffe:	f7ff f895 	bl	800512c <move_window>
 8006002:	4603      	mov	r3, r0
 8006004:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006006:	7dfb      	ldrb	r3, [r7, #23]
 8006008:	2b00      	cmp	r3, #0
 800600a:	f040 8090 	bne.w	800612e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006016:	7dbb      	ldrb	r3, [r7, #22]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <dir_find+0x60>
 800601c:	2304      	movs	r3, #4
 800601e:	75fb      	strb	r3, [r7, #23]
 8006020:	e08a      	b.n	8006138 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	330b      	adds	r3, #11
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800602e:	73fb      	strb	r3, [r7, #15]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	7bfa      	ldrb	r2, [r7, #15]
 8006034:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006036:	7dbb      	ldrb	r3, [r7, #22]
 8006038:	2be5      	cmp	r3, #229	@ 0xe5
 800603a:	d007      	beq.n	800604c <dir_find+0x8a>
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d009      	beq.n	800605a <dir_find+0x98>
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	2b0f      	cmp	r3, #15
 800604a:	d006      	beq.n	800605a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800604c:	23ff      	movs	r3, #255	@ 0xff
 800604e:	757b      	strb	r3, [r7, #21]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f04f 32ff 	mov.w	r2, #4294967295
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30
 8006058:	e05e      	b.n	8006118 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800605a:	7bfb      	ldrb	r3, [r7, #15]
 800605c:	2b0f      	cmp	r3, #15
 800605e:	d136      	bne.n	80060ce <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606a:	2b00      	cmp	r3, #0
 800606c:	d154      	bne.n	8006118 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800606e:	7dbb      	ldrb	r3, [r7, #22]
 8006070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00d      	beq.n	8006094 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	7b5b      	ldrb	r3, [r3, #13]
 800607e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006080:	7dbb      	ldrb	r3, [r7, #22]
 8006082:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006086:	75bb      	strb	r3, [r7, #22]
 8006088:	7dbb      	ldrb	r3, [r7, #22]
 800608a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	695a      	ldr	r2, [r3, #20]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006094:	7dba      	ldrb	r2, [r7, #22]
 8006096:	7d7b      	ldrb	r3, [r7, #21]
 8006098:	429a      	cmp	r2, r3
 800609a:	d115      	bne.n	80060c8 <dir_find+0x106>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	330d      	adds	r3, #13
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	7d3a      	ldrb	r2, [r7, #20]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d10e      	bne.n	80060c8 <dir_find+0x106>
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	691a      	ldr	r2, [r3, #16]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	4619      	mov	r1, r3
 80060b4:	4610      	mov	r0, r2
 80060b6:	f7ff fdfd 	bl	8005cb4 <cmp_lfn>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <dir_find+0x106>
 80060c0:	7d7b      	ldrb	r3, [r7, #21]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	e000      	b.n	80060ca <dir_find+0x108>
 80060c8:	23ff      	movs	r3, #255	@ 0xff
 80060ca:	757b      	strb	r3, [r7, #21]
 80060cc:	e024      	b.n	8006118 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80060ce:	7d7b      	ldrb	r3, [r7, #21]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d109      	bne.n	80060e8 <dir_find+0x126>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff ff51 	bl	8005f80 <sum_sfn>
 80060de:	4603      	mov	r3, r0
 80060e0:	461a      	mov	r2, r3
 80060e2:	7d3b      	ldrb	r3, [r7, #20]
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d024      	beq.n	8006132 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10a      	bne.n	800610c <dir_find+0x14a>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a18      	ldr	r0, [r3, #32]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	3324      	adds	r3, #36	@ 0x24
 80060fe:	220b      	movs	r2, #11
 8006100:	4619      	mov	r1, r3
 8006102:	f7fe fe21 	bl	8004d48 <mem_cmp>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d014      	beq.n	8006136 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800610c:	23ff      	movs	r3, #255	@ 0xff
 800610e:	757b      	strb	r3, [r7, #21]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f04f 32ff 	mov.w	r2, #4294967295
 8006116:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006118:	2100      	movs	r1, #0
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff fc6e 	bl	80059fc <dir_next>
 8006120:	4603      	mov	r3, r0
 8006122:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006124:	7dfb      	ldrb	r3, [r7, #23]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f43f af65 	beq.w	8005ff6 <dir_find+0x34>
 800612c:	e004      	b.n	8006138 <dir_find+0x176>
		if (res != FR_OK) break;
 800612e:	bf00      	nop
 8006130:	e002      	b.n	8006138 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006132:	bf00      	nop
 8006134:	e000      	b.n	8006138 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006136:	bf00      	nop

	return res;
 8006138:	7dfb      	ldrb	r3, [r7, #23]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08c      	sub	sp, #48	@ 0x30
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006158:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <dir_register+0x20>
 8006160:	2306      	movs	r3, #6
 8006162:	e0e0      	b.n	8006326 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006164:	2300      	movs	r3, #0
 8006166:	627b      	str	r3, [r7, #36]	@ 0x24
 8006168:	e002      	b.n	8006170 <dir_register+0x2c>
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	3301      	adds	r3, #1
 800616e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	4413      	add	r3, r2
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1f4      	bne.n	800616a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006186:	f107 030c 	add.w	r3, r7, #12
 800618a:	220c      	movs	r2, #12
 800618c:	4618      	mov	r0, r3
 800618e:	f7fe fd9f 	bl	8004cd0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d032      	beq.n	8006202 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2240      	movs	r2, #64	@ 0x40
 80061a0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80061a4:	2301      	movs	r3, #1
 80061a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061a8:	e016      	b.n	80061d8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	f107 010c 	add.w	r1, r7, #12
 80061b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ba:	f7ff fe53 	bl	8005e64 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff feff 	bl	8005fc2 <dir_find>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80061ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80061d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d4:	3301      	adds	r3, #1
 80061d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	2b63      	cmp	r3, #99	@ 0x63
 80061dc:	d9e5      	bls.n	80061aa <dir_register+0x66>
 80061de:	e000      	b.n	80061e2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80061e0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80061e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e4:	2b64      	cmp	r3, #100	@ 0x64
 80061e6:	d101      	bne.n	80061ec <dir_register+0xa8>
 80061e8:	2307      	movs	r3, #7
 80061ea:	e09c      	b.n	8006326 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80061ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d002      	beq.n	80061fa <dir_register+0xb6>
 80061f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061f8:	e095      	b.n	8006326 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80061fa:	7dfa      	ldrb	r2, [r7, #23]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006202:	7dfb      	ldrb	r3, [r7, #23]
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <dir_register+0xd8>
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	330c      	adds	r3, #12
 8006210:	4a47      	ldr	r2, [pc, #284]	@ (8006330 <dir_register+0x1ec>)
 8006212:	fba2 2303 	umull	r2, r3, r2, r3
 8006216:	089b      	lsrs	r3, r3, #2
 8006218:	3301      	adds	r3, #1
 800621a:	e000      	b.n	800621e <dir_register+0xda>
 800621c:	2301      	movs	r3, #1
 800621e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006220:	6a39      	ldr	r1, [r7, #32]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff fcc0 	bl	8005ba8 <dir_alloc>
 8006228:	4603      	mov	r3, r0
 800622a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800622e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006232:	2b00      	cmp	r3, #0
 8006234:	d148      	bne.n	80062c8 <dir_register+0x184>
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	3b01      	subs	r3, #1
 800623a:	623b      	str	r3, [r7, #32]
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d042      	beq.n	80062c8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	695a      	ldr	r2, [r3, #20]
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	015b      	lsls	r3, r3, #5
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7ff fb4b 	bl	80058ea <dir_sdi>
 8006254:	4603      	mov	r3, r0
 8006256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800625a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800625e:	2b00      	cmp	r3, #0
 8006260:	d132      	bne.n	80062c8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3324      	adds	r3, #36	@ 0x24
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fe8a 	bl	8005f80 <sum_sfn>
 800626c:	4603      	mov	r3, r0
 800626e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	4619      	mov	r1, r3
 8006276:	69f8      	ldr	r0, [r7, #28]
 8006278:	f7fe ff58 	bl	800512c <move_window>
 800627c:	4603      	mov	r3, r0
 800627e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8006282:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006286:	2b00      	cmp	r3, #0
 8006288:	d11d      	bne.n	80062c6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	6918      	ldr	r0, [r3, #16]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a19      	ldr	r1, [r3, #32]
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	7efb      	ldrb	r3, [r7, #27]
 8006298:	f7ff fd7c 	bl	8005d94 <put_lfn>
				fs->wflag = 1;
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	2201      	movs	r2, #1
 80062a0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80062a2:	2100      	movs	r1, #0
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff fba9 	bl	80059fc <dir_next>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80062b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d107      	bne.n	80062c8 <dir_register+0x184>
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	623b      	str	r3, [r7, #32]
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1d5      	bne.n	8006270 <dir_register+0x12c>
 80062c4:	e000      	b.n	80062c8 <dir_register+0x184>
				if (res != FR_OK) break;
 80062c6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80062c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d128      	bne.n	8006322 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	4619      	mov	r1, r3
 80062d6:	69f8      	ldr	r0, [r7, #28]
 80062d8:	f7fe ff28 	bl	800512c <move_window>
 80062dc:	4603      	mov	r3, r0
 80062de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80062e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d11b      	bne.n	8006322 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	2220      	movs	r2, #32
 80062f0:	2100      	movs	r1, #0
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe fd0d 	bl	8004d12 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a18      	ldr	r0, [r3, #32]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3324      	adds	r3, #36	@ 0x24
 8006300:	220b      	movs	r2, #11
 8006302:	4619      	mov	r1, r3
 8006304:	f7fe fce4 	bl	8004cd0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	330c      	adds	r3, #12
 8006314:	f002 0218 	and.w	r2, r2, #24
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	2201      	movs	r2, #1
 8006320:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006322:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006326:	4618      	mov	r0, r3
 8006328:	3730      	adds	r7, #48	@ 0x30
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	4ec4ec4f 	.word	0x4ec4ec4f

08006334 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08a      	sub	sp, #40	@ 0x28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	613b      	str	r3, [r7, #16]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	61ba      	str	r2, [r7, #24]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4413      	add	r3, r2
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006362:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006364:	2b1f      	cmp	r3, #31
 8006366:	d940      	bls.n	80063ea <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006368:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800636a:	2b2f      	cmp	r3, #47	@ 0x2f
 800636c:	d006      	beq.n	800637c <create_name+0x48>
 800636e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006370:	2b5c      	cmp	r3, #92	@ 0x5c
 8006372:	d110      	bne.n	8006396 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006374:	e002      	b.n	800637c <create_name+0x48>
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	3301      	adds	r3, #1
 800637a:	61bb      	str	r3, [r7, #24]
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	4413      	add	r3, r2
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b2f      	cmp	r3, #47	@ 0x2f
 8006386:	d0f6      	beq.n	8006376 <create_name+0x42>
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	4413      	add	r3, r2
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b5c      	cmp	r3, #92	@ 0x5c
 8006392:	d0f0      	beq.n	8006376 <create_name+0x42>
			break;
 8006394:	e02a      	b.n	80063ec <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2bfe      	cmp	r3, #254	@ 0xfe
 800639a:	d901      	bls.n	80063a0 <create_name+0x6c>
 800639c:	2306      	movs	r3, #6
 800639e:	e17d      	b.n	800669c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80063a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80063a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063a8:	2101      	movs	r1, #1
 80063aa:	4618      	mov	r0, r3
 80063ac:	f001 fcda 	bl	8007d64 <ff_convert>
 80063b0:	4603      	mov	r3, r0
 80063b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80063b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <create_name+0x8a>
 80063ba:	2306      	movs	r3, #6
 80063bc:	e16e      	b.n	800669c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80063be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80063c2:	d809      	bhi.n	80063d8 <create_name+0xa4>
 80063c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063c6:	4619      	mov	r1, r3
 80063c8:	488d      	ldr	r0, [pc, #564]	@ (8006600 <create_name+0x2cc>)
 80063ca:	f7fe fce4 	bl	8004d96 <chk_chr>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <create_name+0xa4>
 80063d4:	2306      	movs	r3, #6
 80063d6:	e161      	b.n	800669c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	617a      	str	r2, [r7, #20]
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4413      	add	r3, r2
 80063e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80063e6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80063e8:	e7b4      	b.n	8006354 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80063ea:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	441a      	add	r2, r3
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80063f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063f8:	2b1f      	cmp	r3, #31
 80063fa:	d801      	bhi.n	8006400 <create_name+0xcc>
 80063fc:	2304      	movs	r3, #4
 80063fe:	e000      	b.n	8006402 <create_name+0xce>
 8006400:	2300      	movs	r3, #0
 8006402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006406:	e011      	b.n	800642c <create_name+0xf8>
		w = lfn[di - 1];
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800640e:	4413      	add	r3, r2
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4413      	add	r3, r2
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800641a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800641c:	2b20      	cmp	r3, #32
 800641e:	d002      	beq.n	8006426 <create_name+0xf2>
 8006420:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006422:	2b2e      	cmp	r3, #46	@ 0x2e
 8006424:	d106      	bne.n	8006434 <create_name+0x100>
		di--;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	3b01      	subs	r3, #1
 800642a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1ea      	bne.n	8006408 <create_name+0xd4>
 8006432:	e000      	b.n	8006436 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006434:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4413      	add	r3, r2
 800643e:	2200      	movs	r2, #0
 8006440:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <create_name+0x118>
 8006448:	2306      	movs	r3, #6
 800644a:	e127      	b.n	800669c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3324      	adds	r3, #36	@ 0x24
 8006450:	220b      	movs	r2, #11
 8006452:	2120      	movs	r1, #32
 8006454:	4618      	mov	r0, r3
 8006456:	f7fe fc5c 	bl	8004d12 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800645a:	2300      	movs	r3, #0
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	e002      	b.n	8006466 <create_name+0x132>
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	3301      	adds	r3, #1
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	2b20      	cmp	r3, #32
 8006472:	d0f5      	beq.n	8006460 <create_name+0x12c>
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4413      	add	r3, r2
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006480:	d0ee      	beq.n	8006460 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d009      	beq.n	800649c <create_name+0x168>
 8006488:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800648c:	f043 0303 	orr.w	r3, r3, #3
 8006490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006494:	e002      	b.n	800649c <create_name+0x168>
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	3b01      	subs	r3, #1
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <create_name+0x182>
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80064a8:	4413      	add	r3, r2
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80064b4:	d1ef      	bne.n	8006496 <create_name+0x162>

	i = b = 0; ni = 8;
 80064b6:	2300      	movs	r3, #0
 80064b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80064bc:	2300      	movs	r3, #0
 80064be:	623b      	str	r3, [r7, #32]
 80064c0:	2308      	movs	r3, #8
 80064c2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	61ba      	str	r2, [r7, #24]
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80064d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 8090 	beq.w	80065fc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80064dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064de:	2b20      	cmp	r3, #32
 80064e0:	d006      	beq.n	80064f0 <create_name+0x1bc>
 80064e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80064e6:	d10a      	bne.n	80064fe <create_name+0x1ca>
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d006      	beq.n	80064fe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80064f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064f4:	f043 0303 	orr.w	r3, r3, #3
 80064f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80064fc:	e07d      	b.n	80065fa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80064fe:	6a3a      	ldr	r2, [r7, #32]
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	429a      	cmp	r2, r3
 8006504:	d203      	bcs.n	800650e <create_name+0x1da>
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	429a      	cmp	r2, r3
 800650c:	d123      	bne.n	8006556 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	2b0b      	cmp	r3, #11
 8006512:	d106      	bne.n	8006522 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006518:	f043 0303 	orr.w	r3, r3, #3
 800651c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006520:	e075      	b.n	800660e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	429a      	cmp	r2, r3
 8006528:	d005      	beq.n	8006536 <create_name+0x202>
 800652a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800652e:	f043 0303 	orr.w	r3, r3, #3
 8006532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	429a      	cmp	r2, r3
 800653c:	d866      	bhi.n	800660c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	2308      	movs	r3, #8
 8006544:	623b      	str	r3, [r7, #32]
 8006546:	230b      	movs	r3, #11
 8006548:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800654a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006554:	e051      	b.n	80065fa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006556:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006558:	2b7f      	cmp	r3, #127	@ 0x7f
 800655a:	d914      	bls.n	8006586 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800655c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800655e:	2100      	movs	r1, #0
 8006560:	4618      	mov	r0, r3
 8006562:	f001 fbff 	bl	8007d64 <ff_convert>
 8006566:	4603      	mov	r3, r0
 8006568:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800656a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800656c:	2b00      	cmp	r3, #0
 800656e:	d004      	beq.n	800657a <create_name+0x246>
 8006570:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006572:	3b80      	subs	r3, #128	@ 0x80
 8006574:	4a23      	ldr	r2, [pc, #140]	@ (8006604 <create_name+0x2d0>)
 8006576:	5cd3      	ldrb	r3, [r2, r3]
 8006578:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800657a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800657e:	f043 0302 	orr.w	r3, r3, #2
 8006582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006588:	2b00      	cmp	r3, #0
 800658a:	d007      	beq.n	800659c <create_name+0x268>
 800658c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800658e:	4619      	mov	r1, r3
 8006590:	481d      	ldr	r0, [pc, #116]	@ (8006608 <create_name+0x2d4>)
 8006592:	f7fe fc00 	bl	8004d96 <chk_chr>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d008      	beq.n	80065ae <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800659c:	235f      	movs	r3, #95	@ 0x5f
 800659e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80065a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065a4:	f043 0303 	orr.w	r3, r3, #3
 80065a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80065ac:	e01b      	b.n	80065e6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80065ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065b0:	2b40      	cmp	r3, #64	@ 0x40
 80065b2:	d909      	bls.n	80065c8 <create_name+0x294>
 80065b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065b6:	2b5a      	cmp	r3, #90	@ 0x5a
 80065b8:	d806      	bhi.n	80065c8 <create_name+0x294>
					b |= 2;
 80065ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065be:	f043 0302 	orr.w	r3, r3, #2
 80065c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80065c6:	e00e      	b.n	80065e6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80065c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065ca:	2b60      	cmp	r3, #96	@ 0x60
 80065cc:	d90b      	bls.n	80065e6 <create_name+0x2b2>
 80065ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065d0:	2b7a      	cmp	r3, #122	@ 0x7a
 80065d2:	d808      	bhi.n	80065e6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80065d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065d8:	f043 0301 	orr.w	r3, r3, #1
 80065dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80065e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065e2:	3b20      	subs	r3, #32
 80065e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	623a      	str	r2, [r7, #32]
 80065ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80065ee:	b2d1      	uxtb	r1, r2
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	4413      	add	r3, r2
 80065f4:	460a      	mov	r2, r1
 80065f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80065fa:	e763      	b.n	80064c4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80065fc:	bf00      	nop
 80065fe:	e006      	b.n	800660e <create_name+0x2da>
 8006600:	08008f5c 	.word	0x08008f5c
 8006604:	08008fbc 	.word	0x08008fbc
 8006608:	08008f68 	.word	0x08008f68
			if (si > di) break;			/* No extension */
 800660c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006614:	2be5      	cmp	r3, #229	@ 0xe5
 8006616:	d103      	bne.n	8006620 <create_name+0x2ec>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2205      	movs	r2, #5
 800661c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	2b08      	cmp	r3, #8
 8006624:	d104      	bne.n	8006630 <create_name+0x2fc>
 8006626:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006630:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006634:	f003 030c 	and.w	r3, r3, #12
 8006638:	2b0c      	cmp	r3, #12
 800663a:	d005      	beq.n	8006648 <create_name+0x314>
 800663c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	2b03      	cmp	r3, #3
 8006646:	d105      	bne.n	8006654 <create_name+0x320>
 8006648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800664c:	f043 0302 	orr.w	r3, r3, #2
 8006650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d117      	bne.n	8006690 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006660:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006664:	f003 0303 	and.w	r3, r3, #3
 8006668:	2b01      	cmp	r3, #1
 800666a:	d105      	bne.n	8006678 <create_name+0x344>
 800666c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006670:	f043 0310 	orr.w	r3, r3, #16
 8006674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006678:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800667c:	f003 030c 	and.w	r3, r3, #12
 8006680:	2b04      	cmp	r3, #4
 8006682:	d105      	bne.n	8006690 <create_name+0x35c>
 8006684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006688:	f043 0308 	orr.w	r3, r3, #8
 800668c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006696:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800669a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800669c:	4618      	mov	r0, r3
 800669e:	3728      	adds	r7, #40	@ 0x28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80066b8:	e002      	b.n	80066c0 <follow_path+0x1c>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	3301      	adds	r3, #1
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80066c6:	d0f8      	beq.n	80066ba <follow_path+0x16>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80066ce:	d0f4      	beq.n	80066ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	2200      	movs	r2, #0
 80066d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b1f      	cmp	r3, #31
 80066dc:	d80a      	bhi.n	80066f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2280      	movs	r2, #128	@ 0x80
 80066e2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80066e6:	2100      	movs	r1, #0
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7ff f8fe 	bl	80058ea <dir_sdi>
 80066ee:	4603      	mov	r3, r0
 80066f0:	75fb      	strb	r3, [r7, #23]
 80066f2:	e048      	b.n	8006786 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80066f4:	463b      	mov	r3, r7
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff fe1b 	bl	8006334 <create_name>
 80066fe:	4603      	mov	r3, r0
 8006700:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006702:	7dfb      	ldrb	r3, [r7, #23]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d139      	bne.n	800677c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff fc5a 	bl	8005fc2 <dir_find>
 800670e:	4603      	mov	r3, r0
 8006710:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006718:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800671a:	7dfb      	ldrb	r3, [r7, #23]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006720:	7dfb      	ldrb	r3, [r7, #23]
 8006722:	2b04      	cmp	r3, #4
 8006724:	d12c      	bne.n	8006780 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006726:	7afb      	ldrb	r3, [r7, #11]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d127      	bne.n	8006780 <follow_path+0xdc>
 8006730:	2305      	movs	r3, #5
 8006732:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006734:	e024      	b.n	8006780 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006736:	7afb      	ldrb	r3, [r7, #11]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d121      	bne.n	8006784 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	799b      	ldrb	r3, [r3, #6]
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	d102      	bne.n	8006752 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800674c:	2305      	movs	r3, #5
 800674e:	75fb      	strb	r3, [r7, #23]
 8006750:	e019      	b.n	8006786 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	8992      	ldrh	r2, [r2, #12]
 8006760:	fbb3 f0f2 	udiv	r0, r3, r2
 8006764:	fb00 f202 	mul.w	r2, r0, r2
 8006768:	1a9b      	subs	r3, r3, r2
 800676a:	440b      	add	r3, r1
 800676c:	4619      	mov	r1, r3
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7ff fa61 	bl	8005c36 <ld_clust>
 8006774:	4602      	mov	r2, r0
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800677a:	e7bb      	b.n	80066f4 <follow_path+0x50>
			if (res != FR_OK) break;
 800677c:	bf00      	nop
 800677e:	e002      	b.n	8006786 <follow_path+0xe2>
				break;
 8006780:	bf00      	nop
 8006782:	e000      	b.n	8006786 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006784:	bf00      	nop
			}
		}
	}

	return res;
 8006786:	7dfb      	ldrb	r3, [r7, #23]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006798:	f04f 33ff 	mov.w	r3, #4294967295
 800679c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d031      	beq.n	800680a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	e002      	b.n	80067b4 <get_ldnumber+0x24>
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	3301      	adds	r3, #1
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b1f      	cmp	r3, #31
 80067ba:	d903      	bls.n	80067c4 <get_ldnumber+0x34>
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2b3a      	cmp	r3, #58	@ 0x3a
 80067c2:	d1f4      	bne.n	80067ae <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b3a      	cmp	r3, #58	@ 0x3a
 80067ca:	d11c      	bne.n	8006806 <get_ldnumber+0x76>
			tp = *path;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	60fa      	str	r2, [r7, #12]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	3b30      	subs	r3, #48	@ 0x30
 80067dc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b09      	cmp	r3, #9
 80067e2:	d80e      	bhi.n	8006802 <get_ldnumber+0x72>
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d10a      	bne.n	8006802 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d107      	bne.n	8006802 <get_ldnumber+0x72>
					vol = (int)i;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	3301      	adds	r3, #1
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	e002      	b.n	800680c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006806:	2300      	movs	r3, #0
 8006808:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800680a:	693b      	ldr	r3, [r7, #16]
}
 800680c:	4618      	mov	r0, r3
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	70da      	strb	r2, [r3, #3]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f04f 32ff 	mov.w	r2, #4294967295
 800682e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fe fc7a 	bl	800512c <move_window>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <check_fs+0x2a>
 800683e:	2304      	movs	r3, #4
 8006840:	e038      	b.n	80068b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3338      	adds	r3, #56	@ 0x38
 8006846:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe f9be 	bl	8004bcc <ld_word>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006858:	429a      	cmp	r2, r3
 800685a:	d001      	beq.n	8006860 <check_fs+0x48>
 800685c:	2303      	movs	r3, #3
 800685e:	e029      	b.n	80068b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006866:	2be9      	cmp	r3, #233	@ 0xe9
 8006868:	d009      	beq.n	800687e <check_fs+0x66>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006870:	2beb      	cmp	r3, #235	@ 0xeb
 8006872:	d11e      	bne.n	80068b2 <check_fs+0x9a>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800687a:	2b90      	cmp	r3, #144	@ 0x90
 800687c:	d119      	bne.n	80068b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3338      	adds	r3, #56	@ 0x38
 8006882:	3336      	adds	r3, #54	@ 0x36
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe f9b9 	bl	8004bfc <ld_dword>
 800688a:	4603      	mov	r3, r0
 800688c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006890:	4a0a      	ldr	r2, [pc, #40]	@ (80068bc <check_fs+0xa4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d101      	bne.n	800689a <check_fs+0x82>
 8006896:	2300      	movs	r3, #0
 8006898:	e00c      	b.n	80068b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3338      	adds	r3, #56	@ 0x38
 800689e:	3352      	adds	r3, #82	@ 0x52
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fe f9ab 	bl	8004bfc <ld_dword>
 80068a6:	4603      	mov	r3, r0
 80068a8:	4a05      	ldr	r2, [pc, #20]	@ (80068c0 <check_fs+0xa8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d101      	bne.n	80068b2 <check_fs+0x9a>
 80068ae:	2300      	movs	r3, #0
 80068b0:	e000      	b.n	80068b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80068b2:	2302      	movs	r3, #2
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	00544146 	.word	0x00544146
 80068c0:	33544146 	.word	0x33544146

080068c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b096      	sub	sp, #88	@ 0x58
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	4613      	mov	r3, r2
 80068d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f7ff ff59 	bl	8006790 <get_ldnumber>
 80068de:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80068e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	da01      	bge.n	80068ea <find_volume+0x26>
 80068e6:	230b      	movs	r3, #11
 80068e8:	e265      	b.n	8006db6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80068ea:	4a9f      	ldr	r2, [pc, #636]	@ (8006b68 <find_volume+0x2a4>)
 80068ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068f2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80068f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <find_volume+0x3a>
 80068fa:	230c      	movs	r3, #12
 80068fc:	e25b      	b.n	8006db6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006902:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006904:	79fb      	ldrb	r3, [r7, #7]
 8006906:	f023 0301 	bic.w	r3, r3, #1
 800690a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800690c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01a      	beq.n	800694a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006916:	785b      	ldrb	r3, [r3, #1]
 8006918:	4618      	mov	r0, r3
 800691a:	f7fe f8b9 	bl	8004a90 <disk_status>
 800691e:	4603      	mov	r3, r0
 8006920:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006924:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10c      	bne.n	800694a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d007      	beq.n	8006946 <find_volume+0x82>
 8006936:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006942:	230a      	movs	r3, #10
 8006944:	e237      	b.n	8006db6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006946:	2300      	movs	r3, #0
 8006948:	e235      	b.n	8006db6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800694a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006952:	b2da      	uxtb	r2, r3
 8006954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006956:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	4618      	mov	r0, r3
 800695e:	f7fe f8b1 	bl	8004ac4 <disk_initialize>
 8006962:	4603      	mov	r3, r0
 8006964:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006968:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006974:	2303      	movs	r3, #3
 8006976:	e21e      	b.n	8006db6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d007      	beq.n	800698e <find_volume+0xca>
 800697e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800698a:	230a      	movs	r3, #10
 800698c:	e213      	b.n	8006db6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800698e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006990:	7858      	ldrb	r0, [r3, #1]
 8006992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006994:	330c      	adds	r3, #12
 8006996:	461a      	mov	r2, r3
 8006998:	2102      	movs	r1, #2
 800699a:	f7fe f8f9 	bl	8004b90 <disk_ioctl>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <find_volume+0xe4>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e206      	b.n	8006db6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80069a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069aa:	899b      	ldrh	r3, [r3, #12]
 80069ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069b0:	d80d      	bhi.n	80069ce <find_volume+0x10a>
 80069b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b4:	899b      	ldrh	r3, [r3, #12]
 80069b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ba:	d308      	bcc.n	80069ce <find_volume+0x10a>
 80069bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069be:	899b      	ldrh	r3, [r3, #12]
 80069c0:	461a      	mov	r2, r3
 80069c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c4:	899b      	ldrh	r3, [r3, #12]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	4013      	ands	r3, r2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <find_volume+0x10e>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e1f1      	b.n	8006db6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80069d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80069da:	f7ff ff1d 	bl	8006818 <check_fs>
 80069de:	4603      	mov	r3, r0
 80069e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80069e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d149      	bne.n	8006a80 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80069ec:	2300      	movs	r3, #0
 80069ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80069f0:	e01e      	b.n	8006a30 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80069f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80069f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006a00:	4413      	add	r3, r2
 8006a02:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	3304      	adds	r3, #4
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d006      	beq.n	8006a1c <find_volume+0x158>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	3308      	adds	r3, #8
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe f8f2 	bl	8004bfc <ld_dword>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	e000      	b.n	8006a1e <find_volume+0x15a>
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	3358      	adds	r3, #88	@ 0x58
 8006a24:	443b      	add	r3, r7
 8006a26:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d9dd      	bls.n	80069f2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006a36:	2300      	movs	r3, #0
 8006a38:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <find_volume+0x182>
 8006a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a42:	3b01      	subs	r3, #1
 8006a44:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	3358      	adds	r3, #88	@ 0x58
 8006a4c:	443b      	add	r3, r7
 8006a4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006a52:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006a54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <find_volume+0x1a2>
 8006a5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a5c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a5e:	f7ff fedb 	bl	8006818 <check_fs>
 8006a62:	4603      	mov	r3, r0
 8006a64:	e000      	b.n	8006a68 <find_volume+0x1a4>
 8006a66:	2303      	movs	r3, #3
 8006a68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006a6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d905      	bls.n	8006a80 <find_volume+0x1bc>
 8006a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a76:	3301      	adds	r3, #1
 8006a78:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d9e2      	bls.n	8006a46 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006a80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d101      	bne.n	8006a8c <find_volume+0x1c8>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e194      	b.n	8006db6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d901      	bls.n	8006a98 <find_volume+0x1d4>
 8006a94:	230d      	movs	r3, #13
 8006a96:	e18e      	b.n	8006db6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9a:	3338      	adds	r3, #56	@ 0x38
 8006a9c:	330b      	adds	r3, #11
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe f894 	bl	8004bcc <ld_word>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aaa:	899b      	ldrh	r3, [r3, #12]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d001      	beq.n	8006ab4 <find_volume+0x1f0>
 8006ab0:	230d      	movs	r3, #13
 8006ab2:	e180      	b.n	8006db6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab6:	3338      	adds	r3, #56	@ 0x38
 8006ab8:	3316      	adds	r3, #22
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe f886 	bl	8004bcc <ld_word>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <find_volume+0x214>
 8006aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006acc:	3338      	adds	r3, #56	@ 0x38
 8006ace:	3324      	adds	r3, #36	@ 0x24
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fe f893 	bl	8004bfc <ld_dword>
 8006ad6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ada:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006adc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aea:	789b      	ldrb	r3, [r3, #2]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d005      	beq.n	8006afc <find_volume+0x238>
 8006af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af2:	789b      	ldrb	r3, [r3, #2]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d001      	beq.n	8006afc <find_volume+0x238>
 8006af8:	230d      	movs	r3, #13
 8006afa:	e15c      	b.n	8006db6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afe:	789b      	ldrb	r3, [r3, #2]
 8006b00:	461a      	mov	r2, r3
 8006b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b04:	fb02 f303 	mul.w	r3, r2, r3
 8006b08:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b10:	461a      	mov	r2, r3
 8006b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b14:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b18:	895b      	ldrh	r3, [r3, #10]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d008      	beq.n	8006b30 <find_volume+0x26c>
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b20:	895b      	ldrh	r3, [r3, #10]
 8006b22:	461a      	mov	r2, r3
 8006b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b26:	895b      	ldrh	r3, [r3, #10]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <find_volume+0x270>
 8006b30:	230d      	movs	r3, #13
 8006b32:	e140      	b.n	8006db6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b36:	3338      	adds	r3, #56	@ 0x38
 8006b38:	3311      	adds	r3, #17
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe f846 	bl	8004bcc <ld_word>
 8006b40:	4603      	mov	r3, r0
 8006b42:	461a      	mov	r2, r3
 8006b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b46:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4a:	891b      	ldrh	r3, [r3, #8]
 8006b4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b4e:	8992      	ldrh	r2, [r2, #12]
 8006b50:	0952      	lsrs	r2, r2, #5
 8006b52:	b292      	uxth	r2, r2
 8006b54:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b58:	fb01 f202 	mul.w	r2, r1, r2
 8006b5c:	1a9b      	subs	r3, r3, r2
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <find_volume+0x2a8>
 8006b64:	230d      	movs	r3, #13
 8006b66:	e126      	b.n	8006db6 <find_volume+0x4f2>
 8006b68:	20000204 	.word	0x20000204

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6e:	3338      	adds	r3, #56	@ 0x38
 8006b70:	3313      	adds	r3, #19
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe f82a 	bl	8004bcc <ld_word>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d106      	bne.n	8006b90 <find_volume+0x2cc>
 8006b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b84:	3338      	adds	r3, #56	@ 0x38
 8006b86:	3320      	adds	r3, #32
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe f837 	bl	8004bfc <ld_dword>
 8006b8e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b92:	3338      	adds	r3, #56	@ 0x38
 8006b94:	330e      	adds	r3, #14
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fe f818 	bl	8004bcc <ld_word>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006ba0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <find_volume+0x2e6>
 8006ba6:	230d      	movs	r3, #13
 8006ba8:	e105      	b.n	8006db6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006baa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006bac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bae:	4413      	add	r3, r2
 8006bb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bb2:	8911      	ldrh	r1, [r2, #8]
 8006bb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bb6:	8992      	ldrh	r2, [r2, #12]
 8006bb8:	0952      	lsrs	r2, r2, #5
 8006bba:	b292      	uxth	r2, r2
 8006bbc:	fbb1 f2f2 	udiv	r2, r1, r2
 8006bc0:	b292      	uxth	r2, r2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006bc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d201      	bcs.n	8006bd2 <find_volume+0x30e>
 8006bce:	230d      	movs	r3, #13
 8006bd0:	e0f1      	b.n	8006db6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bda:	8952      	ldrh	r2, [r2, #10]
 8006bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006be0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <find_volume+0x328>
 8006be8:	230d      	movs	r3, #13
 8006bea:	e0e4      	b.n	8006db6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006bec:	2303      	movs	r3, #3
 8006bee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d802      	bhi.n	8006c02 <find_volume+0x33e>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c04:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d802      	bhi.n	8006c12 <find_volume+0x34e>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c14:	1c9a      	adds	r2, r3, #2
 8006c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c18:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c1e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006c20:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006c22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c24:	441a      	add	r2, r3
 8006c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c28:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006c2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2e:	441a      	add	r2, r3
 8006c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c32:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006c34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d11e      	bne.n	8006c7a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3e:	3338      	adds	r3, #56	@ 0x38
 8006c40:	332a      	adds	r3, #42	@ 0x2a
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fd ffc2 	bl	8004bcc <ld_word>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <find_volume+0x38e>
 8006c4e:	230d      	movs	r3, #13
 8006c50:	e0b1      	b.n	8006db6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c54:	891b      	ldrh	r3, [r3, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <find_volume+0x39a>
 8006c5a:	230d      	movs	r3, #13
 8006c5c:	e0ab      	b.n	8006db6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c60:	3338      	adds	r3, #56	@ 0x38
 8006c62:	332c      	adds	r3, #44	@ 0x2c
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fd ffc9 	bl	8004bfc <ld_dword>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c78:	e01f      	b.n	8006cba <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7c:	891b      	ldrh	r3, [r3, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <find_volume+0x3c2>
 8006c82:	230d      	movs	r3, #13
 8006c84:	e097      	b.n	8006db6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c8c:	441a      	add	r2, r3
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c90:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006c92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d103      	bne.n	8006ca2 <find_volume+0x3de>
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	e00a      	b.n	8006cb8 <find_volume+0x3f4>
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca4:	69da      	ldr	r2, [r3, #28]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	4413      	add	r3, r2
 8006cac:	085a      	lsrs	r2, r3, #1
 8006cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006cb8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbc:	6a1a      	ldr	r2, [r3, #32]
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc0:	899b      	ldrh	r3, [r3, #12]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cc6:	440b      	add	r3, r1
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ccc:	8989      	ldrh	r1, [r1, #12]
 8006cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d201      	bcs.n	8006cda <find_volume+0x416>
 8006cd6:	230d      	movs	r3, #13
 8006cd8:	e06d      	b.n	8006db6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce0:	619a      	str	r2, [r3, #24]
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cec:	2280      	movs	r2, #128	@ 0x80
 8006cee:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006cf0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d149      	bne.n	8006d8c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfa:	3338      	adds	r3, #56	@ 0x38
 8006cfc:	3330      	adds	r3, #48	@ 0x30
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fd ff64 	bl	8004bcc <ld_word>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d140      	bne.n	8006d8c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006d0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d12:	f7fe fa0b 	bl	800512c <move_window>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d137      	bne.n	8006d8c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1e:	2200      	movs	r2, #0
 8006d20:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d24:	3338      	adds	r3, #56	@ 0x38
 8006d26:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fd ff4e 	bl	8004bcc <ld_word>
 8006d30:	4603      	mov	r3, r0
 8006d32:	461a      	mov	r2, r3
 8006d34:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d127      	bne.n	8006d8c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3e:	3338      	adds	r3, #56	@ 0x38
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fd ff5b 	bl	8004bfc <ld_dword>
 8006d46:	4603      	mov	r3, r0
 8006d48:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc0 <find_volume+0x4fc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d11e      	bne.n	8006d8c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d50:	3338      	adds	r3, #56	@ 0x38
 8006d52:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fd ff50 	bl	8004bfc <ld_dword>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	4a19      	ldr	r2, [pc, #100]	@ (8006dc4 <find_volume+0x500>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d113      	bne.n	8006d8c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d66:	3338      	adds	r3, #56	@ 0x38
 8006d68:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fd ff45 	bl	8004bfc <ld_dword>
 8006d72:	4602      	mov	r2, r0
 8006d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d76:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7a:	3338      	adds	r3, #56	@ 0x38
 8006d7c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fd ff3b 	bl	8004bfc <ld_dword>
 8006d86:	4602      	mov	r2, r0
 8006d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006d92:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006d94:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc8 <find_volume+0x504>)
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc8 <find_volume+0x504>)
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	4b09      	ldr	r3, [pc, #36]	@ (8006dc8 <find_volume+0x504>)
 8006da2:	881a      	ldrh	r2, [r3, #0]
 8006da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006daa:	4a08      	ldr	r2, [pc, #32]	@ (8006dcc <find_volume+0x508>)
 8006dac:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006dae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006db0:	f7fe f954 	bl	800505c <clear_lock>
#endif
	return FR_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3758      	adds	r7, #88	@ 0x58
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	41615252 	.word	0x41615252
 8006dc4:	61417272 	.word	0x61417272
 8006dc8:	20000208 	.word	0x20000208
 8006dcc:	2000022c 	.word	0x2000022c

08006dd0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006dda:	2309      	movs	r3, #9
 8006ddc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d01c      	beq.n	8006e1e <validate+0x4e>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d018      	beq.n	8006e1e <validate+0x4e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d013      	beq.n	8006e1e <validate+0x4e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	889a      	ldrh	r2, [r3, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	88db      	ldrh	r3, [r3, #6]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d10c      	bne.n	8006e1e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fd fe40 	bl	8004a90 <disk_status>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <validate+0x4e>
			res = FR_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d102      	bne.n	8006e2a <validate+0x5a>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	e000      	b.n	8006e2c <validate+0x5c>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	6013      	str	r3, [r2, #0]
	return res;
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	4613      	mov	r3, r2
 8006e48:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006e4e:	f107 0310 	add.w	r3, r7, #16
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff fc9c 	bl	8006790 <get_ldnumber>
 8006e58:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	da01      	bge.n	8006e64 <f_mount+0x28>
 8006e60:	230b      	movs	r3, #11
 8006e62:	e02b      	b.n	8006ebc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006e64:	4a17      	ldr	r2, [pc, #92]	@ (8006ec4 <f_mount+0x88>)
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e6c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006e74:	69b8      	ldr	r0, [r7, #24]
 8006e76:	f7fe f8f1 	bl	800505c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	490d      	ldr	r1, [pc, #52]	@ (8006ec4 <f_mount+0x88>)
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <f_mount+0x66>
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d001      	beq.n	8006ea6 <f_mount+0x6a>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e00a      	b.n	8006ebc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006ea6:	f107 010c 	add.w	r1, r7, #12
 8006eaa:	f107 0308 	add.w	r3, r7, #8
 8006eae:	2200      	movs	r2, #0
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff fd07 	bl	80068c4 <find_volume>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3720      	adds	r7, #32
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20000204 	.word	0x20000204

08006ec8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b09a      	sub	sp, #104	@ 0x68
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <f_open+0x18>
 8006edc:	2309      	movs	r3, #9
 8006ede:	e1b7      	b.n	8007250 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ee6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006ee8:	79fa      	ldrb	r2, [r7, #7]
 8006eea:	f107 0114 	add.w	r1, r7, #20
 8006eee:	f107 0308 	add.w	r3, r7, #8
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff fce6 	bl	80068c4 <find_volume>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006efe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f040 819b 	bne.w	800723e <f_open+0x376>
		dj.obj.fs = fs;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	f107 0318 	add.w	r3, r7, #24
 8006f12:	4611      	mov	r1, r2
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff fbc5 	bl	80066a4 <follow_path>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006f20:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d118      	bne.n	8006f5a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006f28:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006f2c:	b25b      	sxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	da03      	bge.n	8006f3a <f_open+0x72>
				res = FR_INVALID_NAME;
 8006f32:	2306      	movs	r3, #6
 8006f34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006f38:	e00f      	b.n	8006f5a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	bf8c      	ite	hi
 8006f40:	2301      	movhi	r3, #1
 8006f42:	2300      	movls	r3, #0
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	461a      	mov	r2, r3
 8006f48:	f107 0318 	add.w	r3, r7, #24
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fd ff3c 	bl	8004dcc <chk_lock>
 8006f54:	4603      	mov	r3, r0
 8006f56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006f5a:	79fb      	ldrb	r3, [r7, #7]
 8006f5c:	f003 031c 	and.w	r3, r3, #28
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d07f      	beq.n	8007064 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006f64:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d017      	beq.n	8006f9c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006f6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d10e      	bne.n	8006f92 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006f74:	f7fd ff86 	bl	8004e84 <enq_lock>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d006      	beq.n	8006f8c <f_open+0xc4>
 8006f7e:	f107 0318 	add.w	r3, r7, #24
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff f8de 	bl	8006144 <dir_register>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	e000      	b.n	8006f8e <f_open+0xc6>
 8006f8c:	2312      	movs	r3, #18
 8006f8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	f043 0308 	orr.w	r3, r3, #8
 8006f98:	71fb      	strb	r3, [r7, #7]
 8006f9a:	e010      	b.n	8006fbe <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006f9c:	7fbb      	ldrb	r3, [r7, #30]
 8006f9e:	f003 0311 	and.w	r3, r3, #17
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <f_open+0xe6>
					res = FR_DENIED;
 8006fa6:	2307      	movs	r3, #7
 8006fa8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006fac:	e007      	b.n	8006fbe <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <f_open+0xf6>
 8006fb8:	2308      	movs	r3, #8
 8006fba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006fbe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d168      	bne.n	8007098 <f_open+0x1d0>
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	f003 0308 	and.w	r3, r3, #8
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d063      	beq.n	8007098 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006fd0:	f7fd fd00 	bl	80049d4 <get_fattime>
 8006fd4:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd8:	330e      	adds	r3, #14
 8006fda:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fd fe4b 	bl	8004c78 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe4:	3316      	adds	r3, #22
 8006fe6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fd fe45 	bl	8004c78 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff0:	330b      	adds	r3, #11
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fe fe1a 	bl	8005c36 <ld_clust>
 8007002:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007008:	2200      	movs	r2, #0
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe fe32 	bl	8005c74 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007012:	331c      	adds	r3, #28
 8007014:	2100      	movs	r1, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f7fd fe2e 	bl	8004c78 <st_dword>
					fs->wflag = 1;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2201      	movs	r2, #1
 8007020:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007024:	2b00      	cmp	r3, #0
 8007026:	d037      	beq.n	8007098 <f_open+0x1d0>
						dw = fs->winsect;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800702c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800702e:	f107 0318 	add.w	r3, r7, #24
 8007032:	2200      	movs	r2, #0
 8007034:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fb22 	bl	8005680 <remove_chain>
 800703c:	4603      	mov	r3, r0
 800703e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007042:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007046:	2b00      	cmp	r3, #0
 8007048:	d126      	bne.n	8007098 <f_open+0x1d0>
							res = move_window(fs, dw);
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe f86c 	bl	800512c <move_window>
 8007054:	4603      	mov	r3, r0
 8007056:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800705e:	3a01      	subs	r2, #1
 8007060:	615a      	str	r2, [r3, #20]
 8007062:	e019      	b.n	8007098 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007064:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007068:	2b00      	cmp	r3, #0
 800706a:	d115      	bne.n	8007098 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800706c:	7fbb      	ldrb	r3, [r7, #30]
 800706e:	f003 0310 	and.w	r3, r3, #16
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <f_open+0x1b6>
					res = FR_NO_FILE;
 8007076:	2304      	movs	r3, #4
 8007078:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800707c:	e00c      	b.n	8007098 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800707e:	79fb      	ldrb	r3, [r7, #7]
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d007      	beq.n	8007098 <f_open+0x1d0>
 8007088:	7fbb      	ldrb	r3, [r7, #30]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <f_open+0x1d0>
						res = FR_DENIED;
 8007092:	2307      	movs	r3, #7
 8007094:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007098:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800709c:	2b00      	cmp	r3, #0
 800709e:	d126      	bne.n	80070ee <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	f003 0308 	and.w	r3, r3, #8
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80070ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80070c0:	79fb      	ldrb	r3, [r7, #7]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	bf8c      	ite	hi
 80070c6:	2301      	movhi	r3, #1
 80070c8:	2300      	movls	r3, #0
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	461a      	mov	r2, r3
 80070ce:	f107 0318 	add.w	r3, r7, #24
 80070d2:	4611      	mov	r1, r2
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fd fef7 	bl	8004ec8 <inc_lock>
 80070da:	4602      	mov	r2, r0
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d102      	bne.n	80070ee <f_open+0x226>
 80070e8:	2302      	movs	r3, #2
 80070ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80070ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f040 80a3 	bne.w	800723e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070fc:	4611      	mov	r1, r2
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fe fd99 	bl	8005c36 <ld_clust>
 8007104:	4602      	mov	r2, r0
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	331c      	adds	r3, #28
 800710e:	4618      	mov	r0, r3
 8007110:	f7fd fd74 	bl	8004bfc <ld_dword>
 8007114:	4602      	mov	r2, r0
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	88da      	ldrh	r2, [r3, #6]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	79fa      	ldrb	r2, [r7, #7]
 8007132:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	3330      	adds	r3, #48	@ 0x30
 800714a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800714e:	2100      	movs	r1, #0
 8007150:	4618      	mov	r0, r3
 8007152:	f7fd fdde 	bl	8004d12 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	f003 0320 	and.w	r3, r3, #32
 800715c:	2b00      	cmp	r3, #0
 800715e:	d06e      	beq.n	800723e <f_open+0x376>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d06a      	beq.n	800723e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	895b      	ldrh	r3, [r3, #10]
 8007174:	461a      	mov	r2, r3
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	899b      	ldrh	r3, [r3, #12]
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800718c:	e016      	b.n	80071bc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe f887 	bl	80052a6 <get_fat>
 8007198:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800719a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800719c:	2b01      	cmp	r3, #1
 800719e:	d802      	bhi.n	80071a6 <f_open+0x2de>
 80071a0:	2302      	movs	r3, #2
 80071a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80071a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ac:	d102      	bne.n	80071b4 <f_open+0x2ec>
 80071ae:	2301      	movs	r3, #1
 80071b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80071b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80071b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d103      	bne.n	80071cc <f_open+0x304>
 80071c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80071c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d8e0      	bhi.n	800718e <f_open+0x2c6>
				}
				fp->clust = clst;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80071d0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80071d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d131      	bne.n	800723e <f_open+0x376>
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	899b      	ldrh	r3, [r3, #12]
 80071de:	461a      	mov	r2, r3
 80071e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80071e6:	fb01 f202 	mul.w	r2, r1, r2
 80071ea:	1a9b      	subs	r3, r3, r2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d026      	beq.n	800723e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fe f837 	bl	8005268 <clust2sect>
 80071fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80071fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d103      	bne.n	800720a <f_open+0x342>
						res = FR_INT_ERR;
 8007202:	2302      	movs	r3, #2
 8007204:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007208:	e019      	b.n	800723e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	899b      	ldrh	r3, [r3, #12]
 800720e:	461a      	mov	r2, r3
 8007210:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007212:	fbb3 f2f2 	udiv	r2, r3, r2
 8007216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007218:	441a      	add	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	7858      	ldrb	r0, [r3, #1]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a1a      	ldr	r2, [r3, #32]
 800722c:	2301      	movs	r3, #1
 800722e:	f7fd fc6f 	bl	8004b10 <disk_read>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <f_open+0x376>
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800723e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <f_open+0x384>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800724c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007250:	4618      	mov	r0, r3
 8007252:	3768      	adds	r7, #104	@ 0x68
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08e      	sub	sp, #56	@ 0x38
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f107 0214 	add.w	r2, r7, #20
 8007276:	4611      	mov	r1, r2
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff fda9 	bl	8006dd0 <validate>
 800727e:	4603      	mov	r3, r0
 8007280:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007284:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007288:	2b00      	cmp	r3, #0
 800728a:	d107      	bne.n	800729c <f_read+0x44>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	7d5b      	ldrb	r3, [r3, #21]
 8007290:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007294:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <f_read+0x4a>
 800729c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80072a0:	e135      	b.n	800750e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	7d1b      	ldrb	r3, [r3, #20]
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <f_read+0x5a>
 80072ae:	2307      	movs	r3, #7
 80072b0:	e12d      	b.n	800750e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	f240 811e 	bls.w	8007504 <f_read+0x2ac>
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80072cc:	e11a      	b.n	8007504 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	8992      	ldrh	r2, [r2, #12]
 80072d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80072da:	fb01 f202 	mul.w	r2, r1, r2
 80072de:	1a9b      	subs	r3, r3, r2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f040 80d5 	bne.w	8007490 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	8992      	ldrh	r2, [r2, #12]
 80072ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	8952      	ldrh	r2, [r2, #10]
 80072f6:	3a01      	subs	r2, #1
 80072f8:	4013      	ands	r3, r2
 80072fa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d12f      	bne.n	8007362 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007310:	e013      	b.n	800733a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	4619      	mov	r1, r3
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f7fe faaa 	bl	800587a <clmt_clust>
 8007326:	6338      	str	r0, [r7, #48]	@ 0x30
 8007328:	e007      	b.n	800733a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	4619      	mov	r1, r3
 8007332:	4610      	mov	r0, r2
 8007334:	f7fd ffb7 	bl	80052a6 <get_fat>
 8007338:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800733a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733c:	2b01      	cmp	r3, #1
 800733e:	d804      	bhi.n	800734a <f_read+0xf2>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2202      	movs	r2, #2
 8007344:	755a      	strb	r2, [r3, #21]
 8007346:	2302      	movs	r3, #2
 8007348:	e0e1      	b.n	800750e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007350:	d104      	bne.n	800735c <f_read+0x104>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	755a      	strb	r2, [r3, #21]
 8007358:	2301      	movs	r3, #1
 800735a:	e0d8      	b.n	800750e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007360:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	4619      	mov	r1, r3
 800736a:	4610      	mov	r0, r2
 800736c:	f7fd ff7c 	bl	8005268 <clust2sect>
 8007370:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <f_read+0x12a>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2202      	movs	r2, #2
 800737c:	755a      	strb	r2, [r3, #21]
 800737e:	2302      	movs	r3, #2
 8007380:	e0c5      	b.n	800750e <f_read+0x2b6>
			sect += csect;
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	4413      	add	r3, r2
 8007388:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	899b      	ldrh	r3, [r3, #12]
 800738e:	461a      	mov	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	fbb3 f3f2 	udiv	r3, r3, r2
 8007396:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	d041      	beq.n	8007422 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800739e:	69fa      	ldr	r2, [r7, #28]
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	4413      	add	r3, r2
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	8952      	ldrh	r2, [r2, #10]
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d905      	bls.n	80073b8 <f_read+0x160>
					cc = fs->csize - csect;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	895b      	ldrh	r3, [r3, #10]
 80073b0:	461a      	mov	r2, r3
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	7858      	ldrb	r0, [r3, #1]
 80073bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073c2:	f7fd fba5 	bl	8004b10 <disk_read>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d004      	beq.n	80073d6 <f_read+0x17e>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2201      	movs	r2, #1
 80073d0:	755a      	strb	r2, [r3, #21]
 80073d2:	2301      	movs	r3, #1
 80073d4:	e09b      	b.n	800750e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	7d1b      	ldrb	r3, [r3, #20]
 80073da:	b25b      	sxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	da18      	bge.n	8007412 <f_read+0x1ba>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6a1a      	ldr	r2, [r3, #32]
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d911      	bls.n	8007412 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a1a      	ldr	r2, [r3, #32]
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	8992      	ldrh	r2, [r2, #12]
 80073fa:	fb02 f303 	mul.w	r3, r2, r3
 80073fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007400:	18d0      	adds	r0, r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	899b      	ldrh	r3, [r3, #12]
 800740c:	461a      	mov	r2, r3
 800740e:	f7fd fc5f 	bl	8004cd0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	899b      	ldrh	r3, [r3, #12]
 8007416:	461a      	mov	r2, r3
 8007418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007420:	e05c      	b.n	80074dc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	429a      	cmp	r2, r3
 800742a:	d02e      	beq.n	800748a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	7d1b      	ldrb	r3, [r3, #20]
 8007430:	b25b      	sxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	da18      	bge.n	8007468 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	7858      	ldrb	r0, [r3, #1]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a1a      	ldr	r2, [r3, #32]
 8007444:	2301      	movs	r3, #1
 8007446:	f7fd fb83 	bl	8004b50 <disk_write>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d004      	beq.n	800745a <f_read+0x202>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2201      	movs	r2, #1
 8007454:	755a      	strb	r2, [r3, #21]
 8007456:	2301      	movs	r3, #1
 8007458:	e059      	b.n	800750e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	7d1b      	ldrb	r3, [r3, #20]
 800745e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007462:	b2da      	uxtb	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	7858      	ldrb	r0, [r3, #1]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007472:	2301      	movs	r3, #1
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	f7fd fb4b 	bl	8004b10 <disk_read>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d004      	beq.n	800748a <f_read+0x232>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2201      	movs	r2, #1
 8007484:	755a      	strb	r2, [r3, #21]
 8007486:	2301      	movs	r3, #1
 8007488:	e041      	b.n	800750e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	899b      	ldrh	r3, [r3, #12]
 8007494:	4618      	mov	r0, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	8992      	ldrh	r2, [r2, #12]
 800749e:	fbb3 f1f2 	udiv	r1, r3, r2
 80074a2:	fb01 f202 	mul.w	r2, r1, r2
 80074a6:	1a9b      	subs	r3, r3, r2
 80074a8:	1ac3      	subs	r3, r0, r3
 80074aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80074ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d901      	bls.n	80074b8 <f_read+0x260>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	8992      	ldrh	r2, [r2, #12]
 80074c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80074ca:	fb00 f202 	mul.w	r2, r0, r2
 80074ce:	1a9b      	subs	r3, r3, r2
 80074d0:	440b      	add	r3, r1
 80074d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074d4:	4619      	mov	r1, r3
 80074d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80074d8:	f7fd fbfa 	bl	8004cd0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80074dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e0:	4413      	add	r3, r2
 80074e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	699a      	ldr	r2, [r3, #24]
 80074e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ea:	441a      	add	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	619a      	str	r2, [r3, #24]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f6:	441a      	add	r2, r3
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f47f aee1 	bne.w	80072ce <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3738      	adds	r7, #56	@ 0x38
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b08c      	sub	sp, #48	@ 0x30
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	607a      	str	r2, [r7, #4]
 8007522:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2200      	movs	r2, #0
 800752c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f107 0210 	add.w	r2, r7, #16
 8007534:	4611      	mov	r1, r2
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff fc4a 	bl	8006dd0 <validate>
 800753c:	4603      	mov	r3, r0
 800753e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007542:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007546:	2b00      	cmp	r3, #0
 8007548:	d107      	bne.n	800755a <f_write+0x44>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	7d5b      	ldrb	r3, [r3, #21]
 800754e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007552:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <f_write+0x4a>
 800755a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800755e:	e16a      	b.n	8007836 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	7d1b      	ldrb	r3, [r3, #20]
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <f_write+0x5a>
 800756c:	2307      	movs	r3, #7
 800756e:	e162      	b.n	8007836 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	441a      	add	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	429a      	cmp	r2, r3
 800757e:	f080 814c 	bcs.w	800781a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	43db      	mvns	r3, r3
 8007588:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800758a:	e146      	b.n	800781a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	8992      	ldrh	r2, [r2, #12]
 8007594:	fbb3 f1f2 	udiv	r1, r3, r2
 8007598:	fb01 f202 	mul.w	r2, r1, r2
 800759c:	1a9b      	subs	r3, r3, r2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f040 80f1 	bne.w	8007786 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	8992      	ldrh	r2, [r2, #12]
 80075ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	8952      	ldrh	r2, [r2, #10]
 80075b4:	3a01      	subs	r2, #1
 80075b6:	4013      	ands	r3, r2
 80075b8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d143      	bne.n	8007648 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10c      	bne.n	80075e2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80075ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d11a      	bne.n	800760a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2100      	movs	r1, #0
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fe f8b6 	bl	800574a <create_chain>
 80075de:	62b8      	str	r0, [r7, #40]	@ 0x28
 80075e0:	e013      	b.n	800760a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d007      	beq.n	80075fa <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	4619      	mov	r1, r3
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f7fe f942 	bl	800587a <clmt_clust>
 80075f6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80075f8:	e007      	b.n	800760a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	4619      	mov	r1, r3
 8007602:	4610      	mov	r0, r2
 8007604:	f7fe f8a1 	bl	800574a <create_chain>
 8007608:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800760a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8109 	beq.w	8007824 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007614:	2b01      	cmp	r3, #1
 8007616:	d104      	bne.n	8007622 <f_write+0x10c>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2202      	movs	r2, #2
 800761c:	755a      	strb	r2, [r3, #21]
 800761e:	2302      	movs	r3, #2
 8007620:	e109      	b.n	8007836 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007628:	d104      	bne.n	8007634 <f_write+0x11e>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2201      	movs	r2, #1
 800762e:	755a      	strb	r2, [r3, #21]
 8007630:	2301      	movs	r3, #1
 8007632:	e100      	b.n	8007836 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007638:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d102      	bne.n	8007648 <f_write+0x132>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007646:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	7d1b      	ldrb	r3, [r3, #20]
 800764c:	b25b      	sxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	da18      	bge.n	8007684 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	7858      	ldrb	r0, [r3, #1]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a1a      	ldr	r2, [r3, #32]
 8007660:	2301      	movs	r3, #1
 8007662:	f7fd fa75 	bl	8004b50 <disk_write>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d004      	beq.n	8007676 <f_write+0x160>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2201      	movs	r2, #1
 8007670:	755a      	strb	r2, [r3, #21]
 8007672:	2301      	movs	r3, #1
 8007674:	e0df      	b.n	8007836 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	7d1b      	ldrb	r3, [r3, #20]
 800767a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800767e:	b2da      	uxtb	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f7fd fdeb 	bl	8005268 <clust2sect>
 8007692:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d104      	bne.n	80076a4 <f_write+0x18e>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2202      	movs	r2, #2
 800769e:	755a      	strb	r2, [r3, #21]
 80076a0:	2302      	movs	r3, #2
 80076a2:	e0c8      	b.n	8007836 <f_write+0x320>
			sect += csect;
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	4413      	add	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	899b      	ldrh	r3, [r3, #12]
 80076b0:	461a      	mov	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076b8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d043      	beq.n	8007748 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	4413      	add	r3, r2
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	8952      	ldrh	r2, [r2, #10]
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d905      	bls.n	80076da <f_write+0x1c4>
					cc = fs->csize - csect;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	895b      	ldrh	r3, [r3, #10]
 80076d2:	461a      	mov	r2, r3
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	7858      	ldrb	r0, [r3, #1]
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	69f9      	ldr	r1, [r7, #28]
 80076e4:	f7fd fa34 	bl	8004b50 <disk_write>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d004      	beq.n	80076f8 <f_write+0x1e2>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2201      	movs	r2, #1
 80076f2:	755a      	strb	r2, [r3, #21]
 80076f4:	2301      	movs	r3, #1
 80076f6:	e09e      	b.n	8007836 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6a1a      	ldr	r2, [r3, #32]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	6a3a      	ldr	r2, [r7, #32]
 8007702:	429a      	cmp	r2, r3
 8007704:	d918      	bls.n	8007738 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a1a      	ldr	r2, [r3, #32]
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	8992      	ldrh	r2, [r2, #12]
 8007718:	fb02 f303 	mul.w	r3, r2, r3
 800771c:	69fa      	ldr	r2, [r7, #28]
 800771e:	18d1      	adds	r1, r2, r3
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	899b      	ldrh	r3, [r3, #12]
 8007724:	461a      	mov	r2, r3
 8007726:	f7fd fad3 	bl	8004cd0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	7d1b      	ldrb	r3, [r3, #20]
 800772e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007732:	b2da      	uxtb	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	899b      	ldrh	r3, [r3, #12]
 800773c:	461a      	mov	r2, r3
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	fb02 f303 	mul.w	r3, r2, r3
 8007744:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007746:	e04b      	b.n	80077e0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	429a      	cmp	r2, r3
 8007750:	d016      	beq.n	8007780 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	699a      	ldr	r2, [r3, #24]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800775a:	429a      	cmp	r2, r3
 800775c:	d210      	bcs.n	8007780 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	7858      	ldrb	r0, [r3, #1]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007768:	2301      	movs	r3, #1
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	f7fd f9d0 	bl	8004b10 <disk_read>
 8007770:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007772:	2b00      	cmp	r3, #0
 8007774:	d004      	beq.n	8007780 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2201      	movs	r2, #1
 800777a:	755a      	strb	r2, [r3, #21]
 800777c:	2301      	movs	r3, #1
 800777e:	e05a      	b.n	8007836 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	899b      	ldrh	r3, [r3, #12]
 800778a:	4618      	mov	r0, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	8992      	ldrh	r2, [r2, #12]
 8007794:	fbb3 f1f2 	udiv	r1, r3, r2
 8007798:	fb01 f202 	mul.w	r2, r1, r2
 800779c:	1a9b      	subs	r3, r3, r2
 800779e:	1ac3      	subs	r3, r0, r3
 80077a0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80077a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d901      	bls.n	80077ae <f_write+0x298>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	8992      	ldrh	r2, [r2, #12]
 80077bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80077c0:	fb00 f202 	mul.w	r2, r0, r2
 80077c4:	1a9b      	subs	r3, r3, r2
 80077c6:	440b      	add	r3, r1
 80077c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077ca:	69f9      	ldr	r1, [r7, #28]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fd fa7f 	bl	8004cd0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	7d1b      	ldrb	r3, [r3, #20]
 80077d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80077e0:	69fa      	ldr	r2, [r7, #28]
 80077e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e4:	4413      	add	r3, r2
 80077e6:	61fb      	str	r3, [r7, #28]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	699a      	ldr	r2, [r3, #24]
 80077ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ee:	441a      	add	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	619a      	str	r2, [r3, #24]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	bf38      	it	cc
 8007800:	461a      	movcc	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	60da      	str	r2, [r3, #12]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780c:	441a      	add	r2, r3
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	f47f aeb5 	bne.w	800758c <f_write+0x76>
 8007822:	e000      	b.n	8007826 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007824:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	7d1b      	ldrb	r3, [r3, #20]
 800782a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800782e:	b2da      	uxtb	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3730      	adds	r7, #48	@ 0x30
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b086      	sub	sp, #24
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f107 0208 	add.w	r2, r7, #8
 800784c:	4611      	mov	r1, r2
 800784e:	4618      	mov	r0, r3
 8007850:	f7ff fabe 	bl	8006dd0 <validate>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d168      	bne.n	8007930 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	7d1b      	ldrb	r3, [r3, #20]
 8007862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007866:	2b00      	cmp	r3, #0
 8007868:	d062      	beq.n	8007930 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	7d1b      	ldrb	r3, [r3, #20]
 800786e:	b25b      	sxtb	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	da15      	bge.n	80078a0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	7858      	ldrb	r0, [r3, #1]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1a      	ldr	r2, [r3, #32]
 8007882:	2301      	movs	r3, #1
 8007884:	f7fd f964 	bl	8004b50 <disk_write>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <f_sync+0x54>
 800788e:	2301      	movs	r3, #1
 8007890:	e04f      	b.n	8007932 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	7d1b      	ldrb	r3, [r3, #20]
 8007896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800789a:	b2da      	uxtb	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80078a0:	f7fd f898 	bl	80049d4 <get_fattime>
 80078a4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f7fd fc3c 	bl	800512c <move_window>
 80078b4:	4603      	mov	r3, r0
 80078b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d138      	bne.n	8007930 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	330b      	adds	r3, #11
 80078c8:	781a      	ldrb	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	330b      	adds	r3, #11
 80078ce:	f042 0220 	orr.w	r2, r2, #32
 80078d2:	b2d2      	uxtb	r2, r2
 80078d4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	461a      	mov	r2, r3
 80078e0:	68f9      	ldr	r1, [r7, #12]
 80078e2:	f7fe f9c7 	bl	8005c74 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f103 021c 	add.w	r2, r3, #28
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f7fd f9c0 	bl	8004c78 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	3316      	adds	r3, #22
 80078fc:	6939      	ldr	r1, [r7, #16]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fd f9ba 	bl	8004c78 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3312      	adds	r3, #18
 8007908:	2100      	movs	r1, #0
 800790a:	4618      	mov	r0, r3
 800790c:	f7fd f999 	bl	8004c42 <st_word>
					fs->wflag = 1;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2201      	movs	r2, #1
 8007914:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	4618      	mov	r0, r3
 800791a:	f7fd fc35 	bl	8005188 <sync_fs>
 800791e:	4603      	mov	r3, r0
 8007920:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	7d1b      	ldrb	r3, [r3, #20]
 8007926:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800792a:	b2da      	uxtb	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007930:	7dfb      	ldrb	r3, [r7, #23]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff ff7b 	bl	800783e <f_sync>
 8007948:	4603      	mov	r3, r0
 800794a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d118      	bne.n	8007984 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f107 0208 	add.w	r2, r7, #8
 8007958:	4611      	mov	r1, r2
 800795a:	4618      	mov	r0, r3
 800795c:	f7ff fa38 	bl	8006dd0 <validate>
 8007960:	4603      	mov	r3, r0
 8007962:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10c      	bne.n	8007984 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	4618      	mov	r0, r3
 8007970:	f7fd fb38 	bl	8004fe4 <dec_lock>
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b092      	sub	sp, #72	@ 0x48
 8007992:	af00      	add	r7, sp, #0
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800799a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800799e:	f107 030c 	add.w	r3, r7, #12
 80079a2:	2200      	movs	r2, #0
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fe ff8d 	bl	80068c4 <find_volume>
 80079aa:	4603      	mov	r3, r0
 80079ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80079b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f040 8099 	bne.w	8007aec <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80079ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80079c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c2:	699a      	ldr	r2, [r3, #24]
 80079c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	3b02      	subs	r3, #2
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d804      	bhi.n	80079d8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80079ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	e089      	b.n	8007aec <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80079dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d128      	bne.n	8007a36 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80079e4:	2302      	movs	r3, #2
 80079e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ea:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80079ec:	f107 0314 	add.w	r3, r7, #20
 80079f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fd fc57 	bl	80052a6 <get_fat>
 80079f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80079fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a00:	d103      	bne.n	8007a0a <f_getfree+0x7c>
 8007a02:	2301      	movs	r3, #1
 8007a04:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007a08:	e063      	b.n	8007ad2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d103      	bne.n	8007a18 <f_getfree+0x8a>
 8007a10:	2302      	movs	r3, #2
 8007a12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007a16:	e05c      	b.n	8007ad2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d102      	bne.n	8007a24 <f_getfree+0x96>
 8007a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a20:	3301      	adds	r3, #1
 8007a22:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8007a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a26:	3301      	adds	r3, #1
 8007a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d3db      	bcc.n	80079ec <f_getfree+0x5e>
 8007a34:	e04d      	b.n	8007ad2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a40:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8007a42:	2300      	movs	r3, #0
 8007a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a46:	2300      	movs	r3, #0
 8007a48:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8007a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d113      	bne.n	8007a78 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007a50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007a58:	4619      	mov	r1, r3
 8007a5a:	f7fd fb67 	bl	800512c <move_window>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8007a64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d131      	bne.n	8007ad0 <f_getfree+0x142>
							p = fs->win;
 8007a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6e:	3338      	adds	r3, #56	@ 0x38
 8007a70:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8007a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a74:	899b      	ldrh	r3, [r3, #12]
 8007a76:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d10f      	bne.n	8007aa0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007a80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a82:	f7fd f8a3 	bl	8004bcc <ld_word>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d102      	bne.n	8007a92 <f_getfree+0x104>
 8007a8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a8e:	3301      	adds	r3, #1
 8007a90:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8007a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a94:	3302      	adds	r3, #2
 8007a96:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a9a:	3b02      	subs	r3, #2
 8007a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a9e:	e010      	b.n	8007ac2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007aa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007aa2:	f7fd f8ab 	bl	8004bfc <ld_dword>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d102      	bne.n	8007ab6 <f_getfree+0x128>
 8007ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab8:	3304      	adds	r3, #4
 8007aba:	633b      	str	r3, [r7, #48]	@ 0x30
 8007abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007abe:	3b04      	subs	r3, #4
 8007ac0:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8007ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1bd      	bne.n	8007a4a <f_getfree+0xbc>
 8007ace:	e000      	b.n	8007ad2 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007ad0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ad6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ada:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007adc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae0:	791a      	ldrb	r2, [r3, #4]
 8007ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae4:	f042 0201 	orr.w	r2, r2, #1
 8007ae8:	b2d2      	uxtb	r2, r2
 8007aea:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007aec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3748      	adds	r7, #72	@ 0x48
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b088      	sub	sp, #32
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007b0c:	e01c      	b.n	8007b48 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007b0e:	f107 0310 	add.w	r3, r7, #16
 8007b12:	f107 0114 	add.w	r1, r7, #20
 8007b16:	2201      	movs	r2, #1
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff fb9d 	bl	8007258 <f_read>
		if (rc != 1) break;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d117      	bne.n	8007b54 <f_gets+0x5c>
		c = s[0];
 8007b24:	7d3b      	ldrb	r3, [r7, #20]
 8007b26:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	2b0d      	cmp	r3, #13
 8007b2c:	d00b      	beq.n	8007b46 <f_gets+0x4e>
		*p++ = c;
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	61ba      	str	r2, [r7, #24]
 8007b34:	7dfa      	ldrb	r2, [r7, #23]
 8007b36:	701a      	strb	r2, [r3, #0]
		n++;
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	2b0a      	cmp	r3, #10
 8007b42:	d009      	beq.n	8007b58 <f_gets+0x60>
 8007b44:	e000      	b.n	8007b48 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007b46:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	69fa      	ldr	r2, [r7, #28]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	dbdd      	blt.n	8007b0e <f_gets+0x16>
 8007b52:	e002      	b.n	8007b5a <f_gets+0x62>
		if (rc != 1) break;
 8007b54:	bf00      	nop
 8007b56:	e000      	b.n	8007b5a <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8007b58:	bf00      	nop
	}
	*p = 0;
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <f_gets+0x72>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	e000      	b.n	8007b6c <f_gets+0x74>
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3720      	adds	r7, #32
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	2b0a      	cmp	r3, #10
 8007b84:	d103      	bne.n	8007b8e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007b86:	210d      	movs	r1, #13
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff fff3 	bl	8007b74 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	db25      	blt.n	8007be6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	60fa      	str	r2, [r7, #12]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	78fa      	ldrb	r2, [r7, #3]
 8007ba6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b3c      	cmp	r3, #60	@ 0x3c
 8007bac:	dd12      	ble.n	8007bd4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6818      	ldr	r0, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f103 010c 	add.w	r1, r3, #12
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	f107 0308 	add.w	r3, r7, #8
 8007bbe:	f7ff fcaa 	bl	8007516 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d101      	bne.n	8007bce <putc_bfd+0x5a>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e001      	b.n	8007bd2 <putc_bfd+0x5e>
 8007bce:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	609a      	str	r2, [r3, #8]
 8007be4:	e000      	b.n	8007be8 <putc_bfd+0x74>
	if (i < 0) return;
 8007be6:	bf00      	nop
}
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	db16      	blt.n	8007c2c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6818      	ldr	r0, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f103 010c 	add.w	r1, r3, #12
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	f107 030c 	add.w	r3, r7, #12
 8007c12:	f7ff fc80 	bl	8007516 <f_write>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d107      	bne.n	8007c2c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d102      	bne.n	8007c2c <putc_flush+0x3e>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	e001      	b.n	8007c30 <putc_flush+0x42>
	return EOF;
 8007c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	605a      	str	r2, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	609a      	str	r2, [r3, #8]
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b096      	sub	sp, #88	@ 0x58
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007c6c:	f107 030c 	add.w	r3, r7, #12
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff ffe0 	bl	8007c38 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007c78:	e009      	b.n	8007c8e <f_puts+0x2c>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	1c5a      	adds	r2, r3, #1
 8007c7e:	607a      	str	r2, [r7, #4]
 8007c80:	781a      	ldrb	r2, [r3, #0]
 8007c82:	f107 030c 	add.w	r3, r7, #12
 8007c86:	4611      	mov	r1, r2
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7ff ff73 	bl	8007b74 <putc_bfd>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1f1      	bne.n	8007c7a <f_puts+0x18>
	return putc_flush(&pb);
 8007c96:	f107 030c 	add.w	r3, r7, #12
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7ff ffa7 	bl	8007bee <putc_flush>
 8007ca0:	4603      	mov	r3, r0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3758      	adds	r7, #88	@ 0x58
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8007d40 <FATFS_LinkDriverEx+0x94>)
 8007cc4:	7a5b      	ldrb	r3, [r3, #9]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d131      	bne.n	8007d30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8007d40 <FATFS_LinkDriverEx+0x94>)
 8007cce:	7a5b      	ldrb	r3, [r3, #9]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8007d40 <FATFS_LinkDriverEx+0x94>)
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007cda:	4b19      	ldr	r3, [pc, #100]	@ (8007d40 <FATFS_LinkDriverEx+0x94>)
 8007cdc:	7a5b      	ldrb	r3, [r3, #9]
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	4a17      	ldr	r2, [pc, #92]	@ (8007d40 <FATFS_LinkDriverEx+0x94>)
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007cea:	4b15      	ldr	r3, [pc, #84]	@ (8007d40 <FATFS_LinkDriverEx+0x94>)
 8007cec:	7a5b      	ldrb	r3, [r3, #9]
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	4b13      	ldr	r3, [pc, #76]	@ (8007d40 <FATFS_LinkDriverEx+0x94>)
 8007cf4:	4413      	add	r3, r2
 8007cf6:	79fa      	ldrb	r2, [r7, #7]
 8007cf8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007cfa:	4b11      	ldr	r3, [pc, #68]	@ (8007d40 <FATFS_LinkDriverEx+0x94>)
 8007cfc:	7a5b      	ldrb	r3, [r3, #9]
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	1c5a      	adds	r2, r3, #1
 8007d02:	b2d1      	uxtb	r1, r2
 8007d04:	4a0e      	ldr	r2, [pc, #56]	@ (8007d40 <FATFS_LinkDriverEx+0x94>)
 8007d06:	7251      	strb	r1, [r2, #9]
 8007d08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d0a:	7dbb      	ldrb	r3, [r7, #22]
 8007d0c:	3330      	adds	r3, #48	@ 0x30
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	3301      	adds	r3, #1
 8007d18:	223a      	movs	r2, #58	@ 0x3a
 8007d1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	3302      	adds	r3, #2
 8007d20:	222f      	movs	r2, #47	@ 0x2f
 8007d22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	3303      	adds	r3, #3
 8007d28:	2200      	movs	r2, #0
 8007d2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	371c      	adds	r7, #28
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	2000042c 	.word	0x2000042c

08007d44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d4e:	2200      	movs	r2, #0
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff ffaa 	bl	8007cac <FATFS_LinkDriverEx>
 8007d58:	4603      	mov	r3, r0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	6039      	str	r1, [r7, #0]
 8007d6e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007d70:	88fb      	ldrh	r3, [r7, #6]
 8007d72:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d74:	d802      	bhi.n	8007d7c <ff_convert+0x18>
		c = chr;
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	81fb      	strh	r3, [r7, #14]
 8007d7a:	e025      	b.n	8007dc8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00b      	beq.n	8007d9a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007d82:	88fb      	ldrh	r3, [r7, #6]
 8007d84:	2bff      	cmp	r3, #255	@ 0xff
 8007d86:	d805      	bhi.n	8007d94 <ff_convert+0x30>
 8007d88:	88fb      	ldrh	r3, [r7, #6]
 8007d8a:	3b80      	subs	r3, #128	@ 0x80
 8007d8c:	4a12      	ldr	r2, [pc, #72]	@ (8007dd8 <ff_convert+0x74>)
 8007d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d92:	e000      	b.n	8007d96 <ff_convert+0x32>
 8007d94:	2300      	movs	r3, #0
 8007d96:	81fb      	strh	r3, [r7, #14]
 8007d98:	e016      	b.n	8007dc8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	81fb      	strh	r3, [r7, #14]
 8007d9e:	e009      	b.n	8007db4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007da0:	89fb      	ldrh	r3, [r7, #14]
 8007da2:	4a0d      	ldr	r2, [pc, #52]	@ (8007dd8 <ff_convert+0x74>)
 8007da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007da8:	88fa      	ldrh	r2, [r7, #6]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d006      	beq.n	8007dbc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007dae:	89fb      	ldrh	r3, [r7, #14]
 8007db0:	3301      	adds	r3, #1
 8007db2:	81fb      	strh	r3, [r7, #14]
 8007db4:	89fb      	ldrh	r3, [r7, #14]
 8007db6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007db8:	d9f2      	bls.n	8007da0 <ff_convert+0x3c>
 8007dba:	e000      	b.n	8007dbe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007dbc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007dbe:	89fb      	ldrh	r3, [r7, #14]
 8007dc0:	3380      	adds	r3, #128	@ 0x80
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007dc8:	89fb      	ldrh	r3, [r7, #14]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	0800904c 	.word	0x0800904c

08007ddc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	4603      	mov	r3, r0
 8007de4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007de6:	88fb      	ldrh	r3, [r7, #6]
 8007de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dec:	d201      	bcs.n	8007df2 <ff_wtoupper+0x16>
 8007dee:	4b3e      	ldr	r3, [pc, #248]	@ (8007ee8 <ff_wtoupper+0x10c>)
 8007df0:	e000      	b.n	8007df4 <ff_wtoupper+0x18>
 8007df2:	4b3e      	ldr	r3, [pc, #248]	@ (8007eec <ff_wtoupper+0x110>)
 8007df4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	1c9a      	adds	r2, r3, #2
 8007dfa:	617a      	str	r2, [r7, #20]
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007e00:	8a7b      	ldrh	r3, [r7, #18]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d068      	beq.n	8007ed8 <ff_wtoupper+0xfc>
 8007e06:	88fa      	ldrh	r2, [r7, #6]
 8007e08:	8a7b      	ldrh	r3, [r7, #18]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d364      	bcc.n	8007ed8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	1c9a      	adds	r2, r3, #2
 8007e12:	617a      	str	r2, [r7, #20]
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	823b      	strh	r3, [r7, #16]
 8007e18:	8a3b      	ldrh	r3, [r7, #16]
 8007e1a:	0a1b      	lsrs	r3, r3, #8
 8007e1c:	81fb      	strh	r3, [r7, #14]
 8007e1e:	8a3b      	ldrh	r3, [r7, #16]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007e24:	88fa      	ldrh	r2, [r7, #6]
 8007e26:	8a79      	ldrh	r1, [r7, #18]
 8007e28:	8a3b      	ldrh	r3, [r7, #16]
 8007e2a:	440b      	add	r3, r1
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	da49      	bge.n	8007ec4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007e30:	89fb      	ldrh	r3, [r7, #14]
 8007e32:	2b08      	cmp	r3, #8
 8007e34:	d84f      	bhi.n	8007ed6 <ff_wtoupper+0xfa>
 8007e36:	a201      	add	r2, pc, #4	@ (adr r2, 8007e3c <ff_wtoupper+0x60>)
 8007e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3c:	08007e61 	.word	0x08007e61
 8007e40:	08007e73 	.word	0x08007e73
 8007e44:	08007e89 	.word	0x08007e89
 8007e48:	08007e91 	.word	0x08007e91
 8007e4c:	08007e99 	.word	0x08007e99
 8007e50:	08007ea1 	.word	0x08007ea1
 8007e54:	08007ea9 	.word	0x08007ea9
 8007e58:	08007eb1 	.word	0x08007eb1
 8007e5c:	08007eb9 	.word	0x08007eb9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007e60:	88fa      	ldrh	r2, [r7, #6]
 8007e62:	8a7b      	ldrh	r3, [r7, #18]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	80fb      	strh	r3, [r7, #6]
 8007e70:	e027      	b.n	8007ec2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007e72:	88fa      	ldrh	r2, [r7, #6]
 8007e74:	8a7b      	ldrh	r3, [r7, #18]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	88fa      	ldrh	r2, [r7, #6]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	80fb      	strh	r3, [r7, #6]
 8007e86:	e01c      	b.n	8007ec2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007e88:	88fb      	ldrh	r3, [r7, #6]
 8007e8a:	3b10      	subs	r3, #16
 8007e8c:	80fb      	strh	r3, [r7, #6]
 8007e8e:	e018      	b.n	8007ec2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007e90:	88fb      	ldrh	r3, [r7, #6]
 8007e92:	3b20      	subs	r3, #32
 8007e94:	80fb      	strh	r3, [r7, #6]
 8007e96:	e014      	b.n	8007ec2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007e98:	88fb      	ldrh	r3, [r7, #6]
 8007e9a:	3b30      	subs	r3, #48	@ 0x30
 8007e9c:	80fb      	strh	r3, [r7, #6]
 8007e9e:	e010      	b.n	8007ec2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007ea0:	88fb      	ldrh	r3, [r7, #6]
 8007ea2:	3b1a      	subs	r3, #26
 8007ea4:	80fb      	strh	r3, [r7, #6]
 8007ea6:	e00c      	b.n	8007ec2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007ea8:	88fb      	ldrh	r3, [r7, #6]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	80fb      	strh	r3, [r7, #6]
 8007eae:	e008      	b.n	8007ec2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007eb0:	88fb      	ldrh	r3, [r7, #6]
 8007eb2:	3b50      	subs	r3, #80	@ 0x50
 8007eb4:	80fb      	strh	r3, [r7, #6]
 8007eb6:	e004      	b.n	8007ec2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007eb8:	88fb      	ldrh	r3, [r7, #6]
 8007eba:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007ebe:	80fb      	strh	r3, [r7, #6]
 8007ec0:	bf00      	nop
			}
			break;
 8007ec2:	e008      	b.n	8007ed6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007ec4:	89fb      	ldrh	r3, [r7, #14]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d195      	bne.n	8007df6 <ff_wtoupper+0x1a>
 8007eca:	8a3b      	ldrh	r3, [r7, #16]
 8007ecc:	005b      	lsls	r3, r3, #1
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007ed4:	e78f      	b.n	8007df6 <ff_wtoupper+0x1a>
			break;
 8007ed6:	bf00      	nop
	}

	return chr;
 8007ed8:	88fb      	ldrh	r3, [r7, #6]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	0800914c 	.word	0x0800914c
 8007eec:	08009340 	.word	0x08009340

08007ef0 <std>:
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	b510      	push	{r4, lr}
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8007efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007efe:	6083      	str	r3, [r0, #8]
 8007f00:	8181      	strh	r1, [r0, #12]
 8007f02:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f04:	81c2      	strh	r2, [r0, #14]
 8007f06:	6183      	str	r3, [r0, #24]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	2208      	movs	r2, #8
 8007f0c:	305c      	adds	r0, #92	@ 0x5c
 8007f0e:	f000 f9f9 	bl	8008304 <memset>
 8007f12:	4b0d      	ldr	r3, [pc, #52]	@ (8007f48 <std+0x58>)
 8007f14:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f16:	4b0d      	ldr	r3, [pc, #52]	@ (8007f4c <std+0x5c>)
 8007f18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f50 <std+0x60>)
 8007f1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f54 <std+0x64>)
 8007f20:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f22:	4b0d      	ldr	r3, [pc, #52]	@ (8007f58 <std+0x68>)
 8007f24:	6224      	str	r4, [r4, #32]
 8007f26:	429c      	cmp	r4, r3
 8007f28:	d006      	beq.n	8007f38 <std+0x48>
 8007f2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f2e:	4294      	cmp	r4, r2
 8007f30:	d002      	beq.n	8007f38 <std+0x48>
 8007f32:	33d0      	adds	r3, #208	@ 0xd0
 8007f34:	429c      	cmp	r4, r3
 8007f36:	d105      	bne.n	8007f44 <std+0x54>
 8007f38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f40:	f000 ba58 	b.w	80083f4 <__retarget_lock_init_recursive>
 8007f44:	bd10      	pop	{r4, pc}
 8007f46:	bf00      	nop
 8007f48:	08008155 	.word	0x08008155
 8007f4c:	08008177 	.word	0x08008177
 8007f50:	080081af 	.word	0x080081af
 8007f54:	080081d3 	.word	0x080081d3
 8007f58:	20000438 	.word	0x20000438

08007f5c <stdio_exit_handler>:
 8007f5c:	4a02      	ldr	r2, [pc, #8]	@ (8007f68 <stdio_exit_handler+0xc>)
 8007f5e:	4903      	ldr	r1, [pc, #12]	@ (8007f6c <stdio_exit_handler+0x10>)
 8007f60:	4803      	ldr	r0, [pc, #12]	@ (8007f70 <stdio_exit_handler+0x14>)
 8007f62:	f000 b869 	b.w	8008038 <_fwalk_sglue>
 8007f66:	bf00      	nop
 8007f68:	20000024 	.word	0x20000024
 8007f6c:	08008c95 	.word	0x08008c95
 8007f70:	20000034 	.word	0x20000034

08007f74 <cleanup_stdio>:
 8007f74:	6841      	ldr	r1, [r0, #4]
 8007f76:	4b0c      	ldr	r3, [pc, #48]	@ (8007fa8 <cleanup_stdio+0x34>)
 8007f78:	4299      	cmp	r1, r3
 8007f7a:	b510      	push	{r4, lr}
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	d001      	beq.n	8007f84 <cleanup_stdio+0x10>
 8007f80:	f000 fe88 	bl	8008c94 <_fflush_r>
 8007f84:	68a1      	ldr	r1, [r4, #8]
 8007f86:	4b09      	ldr	r3, [pc, #36]	@ (8007fac <cleanup_stdio+0x38>)
 8007f88:	4299      	cmp	r1, r3
 8007f8a:	d002      	beq.n	8007f92 <cleanup_stdio+0x1e>
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f000 fe81 	bl	8008c94 <_fflush_r>
 8007f92:	68e1      	ldr	r1, [r4, #12]
 8007f94:	4b06      	ldr	r3, [pc, #24]	@ (8007fb0 <cleanup_stdio+0x3c>)
 8007f96:	4299      	cmp	r1, r3
 8007f98:	d004      	beq.n	8007fa4 <cleanup_stdio+0x30>
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa0:	f000 be78 	b.w	8008c94 <_fflush_r>
 8007fa4:	bd10      	pop	{r4, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000438 	.word	0x20000438
 8007fac:	200004a0 	.word	0x200004a0
 8007fb0:	20000508 	.word	0x20000508

08007fb4 <global_stdio_init.part.0>:
 8007fb4:	b510      	push	{r4, lr}
 8007fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe4 <global_stdio_init.part.0+0x30>)
 8007fb8:	4c0b      	ldr	r4, [pc, #44]	@ (8007fe8 <global_stdio_init.part.0+0x34>)
 8007fba:	4a0c      	ldr	r2, [pc, #48]	@ (8007fec <global_stdio_init.part.0+0x38>)
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2104      	movs	r1, #4
 8007fc4:	f7ff ff94 	bl	8007ef0 <std>
 8007fc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fcc:	2201      	movs	r2, #1
 8007fce:	2109      	movs	r1, #9
 8007fd0:	f7ff ff8e 	bl	8007ef0 <std>
 8007fd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007fd8:	2202      	movs	r2, #2
 8007fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fde:	2112      	movs	r1, #18
 8007fe0:	f7ff bf86 	b.w	8007ef0 <std>
 8007fe4:	20000570 	.word	0x20000570
 8007fe8:	20000438 	.word	0x20000438
 8007fec:	08007f5d 	.word	0x08007f5d

08007ff0 <__sfp_lock_acquire>:
 8007ff0:	4801      	ldr	r0, [pc, #4]	@ (8007ff8 <__sfp_lock_acquire+0x8>)
 8007ff2:	f000 ba00 	b.w	80083f6 <__retarget_lock_acquire_recursive>
 8007ff6:	bf00      	nop
 8007ff8:	20000579 	.word	0x20000579

08007ffc <__sfp_lock_release>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	@ (8008004 <__sfp_lock_release+0x8>)
 8007ffe:	f000 b9fb 	b.w	80083f8 <__retarget_lock_release_recursive>
 8008002:	bf00      	nop
 8008004:	20000579 	.word	0x20000579

08008008 <__sinit>:
 8008008:	b510      	push	{r4, lr}
 800800a:	4604      	mov	r4, r0
 800800c:	f7ff fff0 	bl	8007ff0 <__sfp_lock_acquire>
 8008010:	6a23      	ldr	r3, [r4, #32]
 8008012:	b11b      	cbz	r3, 800801c <__sinit+0x14>
 8008014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008018:	f7ff bff0 	b.w	8007ffc <__sfp_lock_release>
 800801c:	4b04      	ldr	r3, [pc, #16]	@ (8008030 <__sinit+0x28>)
 800801e:	6223      	str	r3, [r4, #32]
 8008020:	4b04      	ldr	r3, [pc, #16]	@ (8008034 <__sinit+0x2c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1f5      	bne.n	8008014 <__sinit+0xc>
 8008028:	f7ff ffc4 	bl	8007fb4 <global_stdio_init.part.0>
 800802c:	e7f2      	b.n	8008014 <__sinit+0xc>
 800802e:	bf00      	nop
 8008030:	08007f75 	.word	0x08007f75
 8008034:	20000570 	.word	0x20000570

08008038 <_fwalk_sglue>:
 8008038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800803c:	4607      	mov	r7, r0
 800803e:	4688      	mov	r8, r1
 8008040:	4614      	mov	r4, r2
 8008042:	2600      	movs	r6, #0
 8008044:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008048:	f1b9 0901 	subs.w	r9, r9, #1
 800804c:	d505      	bpl.n	800805a <_fwalk_sglue+0x22>
 800804e:	6824      	ldr	r4, [r4, #0]
 8008050:	2c00      	cmp	r4, #0
 8008052:	d1f7      	bne.n	8008044 <_fwalk_sglue+0xc>
 8008054:	4630      	mov	r0, r6
 8008056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800805a:	89ab      	ldrh	r3, [r5, #12]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d907      	bls.n	8008070 <_fwalk_sglue+0x38>
 8008060:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008064:	3301      	adds	r3, #1
 8008066:	d003      	beq.n	8008070 <_fwalk_sglue+0x38>
 8008068:	4629      	mov	r1, r5
 800806a:	4638      	mov	r0, r7
 800806c:	47c0      	blx	r8
 800806e:	4306      	orrs	r6, r0
 8008070:	3568      	adds	r5, #104	@ 0x68
 8008072:	e7e9      	b.n	8008048 <_fwalk_sglue+0x10>

08008074 <iprintf>:
 8008074:	b40f      	push	{r0, r1, r2, r3}
 8008076:	b507      	push	{r0, r1, r2, lr}
 8008078:	4906      	ldr	r1, [pc, #24]	@ (8008094 <iprintf+0x20>)
 800807a:	ab04      	add	r3, sp, #16
 800807c:	6808      	ldr	r0, [r1, #0]
 800807e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008082:	6881      	ldr	r1, [r0, #8]
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	f000 fadb 	bl	8008640 <_vfiprintf_r>
 800808a:	b003      	add	sp, #12
 800808c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008090:	b004      	add	sp, #16
 8008092:	4770      	bx	lr
 8008094:	20000030 	.word	0x20000030

08008098 <_puts_r>:
 8008098:	6a03      	ldr	r3, [r0, #32]
 800809a:	b570      	push	{r4, r5, r6, lr}
 800809c:	6884      	ldr	r4, [r0, #8]
 800809e:	4605      	mov	r5, r0
 80080a0:	460e      	mov	r6, r1
 80080a2:	b90b      	cbnz	r3, 80080a8 <_puts_r+0x10>
 80080a4:	f7ff ffb0 	bl	8008008 <__sinit>
 80080a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080aa:	07db      	lsls	r3, r3, #31
 80080ac:	d405      	bmi.n	80080ba <_puts_r+0x22>
 80080ae:	89a3      	ldrh	r3, [r4, #12]
 80080b0:	0598      	lsls	r0, r3, #22
 80080b2:	d402      	bmi.n	80080ba <_puts_r+0x22>
 80080b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080b6:	f000 f99e 	bl	80083f6 <__retarget_lock_acquire_recursive>
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	0719      	lsls	r1, r3, #28
 80080be:	d502      	bpl.n	80080c6 <_puts_r+0x2e>
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d135      	bne.n	8008132 <_puts_r+0x9a>
 80080c6:	4621      	mov	r1, r4
 80080c8:	4628      	mov	r0, r5
 80080ca:	f000 f8c5 	bl	8008258 <__swsetup_r>
 80080ce:	b380      	cbz	r0, 8008132 <_puts_r+0x9a>
 80080d0:	f04f 35ff 	mov.w	r5, #4294967295
 80080d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080d6:	07da      	lsls	r2, r3, #31
 80080d8:	d405      	bmi.n	80080e6 <_puts_r+0x4e>
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	059b      	lsls	r3, r3, #22
 80080de:	d402      	bmi.n	80080e6 <_puts_r+0x4e>
 80080e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080e2:	f000 f989 	bl	80083f8 <__retarget_lock_release_recursive>
 80080e6:	4628      	mov	r0, r5
 80080e8:	bd70      	pop	{r4, r5, r6, pc}
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	da04      	bge.n	80080f8 <_puts_r+0x60>
 80080ee:	69a2      	ldr	r2, [r4, #24]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	dc17      	bgt.n	8008124 <_puts_r+0x8c>
 80080f4:	290a      	cmp	r1, #10
 80080f6:	d015      	beq.n	8008124 <_puts_r+0x8c>
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	6022      	str	r2, [r4, #0]
 80080fe:	7019      	strb	r1, [r3, #0]
 8008100:	68a3      	ldr	r3, [r4, #8]
 8008102:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008106:	3b01      	subs	r3, #1
 8008108:	60a3      	str	r3, [r4, #8]
 800810a:	2900      	cmp	r1, #0
 800810c:	d1ed      	bne.n	80080ea <_puts_r+0x52>
 800810e:	2b00      	cmp	r3, #0
 8008110:	da11      	bge.n	8008136 <_puts_r+0x9e>
 8008112:	4622      	mov	r2, r4
 8008114:	210a      	movs	r1, #10
 8008116:	4628      	mov	r0, r5
 8008118:	f000 f85f 	bl	80081da <__swbuf_r>
 800811c:	3001      	adds	r0, #1
 800811e:	d0d7      	beq.n	80080d0 <_puts_r+0x38>
 8008120:	250a      	movs	r5, #10
 8008122:	e7d7      	b.n	80080d4 <_puts_r+0x3c>
 8008124:	4622      	mov	r2, r4
 8008126:	4628      	mov	r0, r5
 8008128:	f000 f857 	bl	80081da <__swbuf_r>
 800812c:	3001      	adds	r0, #1
 800812e:	d1e7      	bne.n	8008100 <_puts_r+0x68>
 8008130:	e7ce      	b.n	80080d0 <_puts_r+0x38>
 8008132:	3e01      	subs	r6, #1
 8008134:	e7e4      	b.n	8008100 <_puts_r+0x68>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	6022      	str	r2, [r4, #0]
 800813c:	220a      	movs	r2, #10
 800813e:	701a      	strb	r2, [r3, #0]
 8008140:	e7ee      	b.n	8008120 <_puts_r+0x88>
	...

08008144 <puts>:
 8008144:	4b02      	ldr	r3, [pc, #8]	@ (8008150 <puts+0xc>)
 8008146:	4601      	mov	r1, r0
 8008148:	6818      	ldr	r0, [r3, #0]
 800814a:	f7ff bfa5 	b.w	8008098 <_puts_r>
 800814e:	bf00      	nop
 8008150:	20000030 	.word	0x20000030

08008154 <__sread>:
 8008154:	b510      	push	{r4, lr}
 8008156:	460c      	mov	r4, r1
 8008158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815c:	f000 f8fc 	bl	8008358 <_read_r>
 8008160:	2800      	cmp	r0, #0
 8008162:	bfab      	itete	ge
 8008164:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008166:	89a3      	ldrhlt	r3, [r4, #12]
 8008168:	181b      	addge	r3, r3, r0
 800816a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800816e:	bfac      	ite	ge
 8008170:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008172:	81a3      	strhlt	r3, [r4, #12]
 8008174:	bd10      	pop	{r4, pc}

08008176 <__swrite>:
 8008176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800817a:	461f      	mov	r7, r3
 800817c:	898b      	ldrh	r3, [r1, #12]
 800817e:	05db      	lsls	r3, r3, #23
 8008180:	4605      	mov	r5, r0
 8008182:	460c      	mov	r4, r1
 8008184:	4616      	mov	r6, r2
 8008186:	d505      	bpl.n	8008194 <__swrite+0x1e>
 8008188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818c:	2302      	movs	r3, #2
 800818e:	2200      	movs	r2, #0
 8008190:	f000 f8d0 	bl	8008334 <_lseek_r>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800819a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	4632      	mov	r2, r6
 80081a2:	463b      	mov	r3, r7
 80081a4:	4628      	mov	r0, r5
 80081a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081aa:	f000 b8e7 	b.w	800837c <_write_r>

080081ae <__sseek>:
 80081ae:	b510      	push	{r4, lr}
 80081b0:	460c      	mov	r4, r1
 80081b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b6:	f000 f8bd 	bl	8008334 <_lseek_r>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	89a3      	ldrh	r3, [r4, #12]
 80081be:	bf15      	itete	ne
 80081c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081ca:	81a3      	strheq	r3, [r4, #12]
 80081cc:	bf18      	it	ne
 80081ce:	81a3      	strhne	r3, [r4, #12]
 80081d0:	bd10      	pop	{r4, pc}

080081d2 <__sclose>:
 80081d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d6:	f000 b89d 	b.w	8008314 <_close_r>

080081da <__swbuf_r>:
 80081da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081dc:	460e      	mov	r6, r1
 80081de:	4614      	mov	r4, r2
 80081e0:	4605      	mov	r5, r0
 80081e2:	b118      	cbz	r0, 80081ec <__swbuf_r+0x12>
 80081e4:	6a03      	ldr	r3, [r0, #32]
 80081e6:	b90b      	cbnz	r3, 80081ec <__swbuf_r+0x12>
 80081e8:	f7ff ff0e 	bl	8008008 <__sinit>
 80081ec:	69a3      	ldr	r3, [r4, #24]
 80081ee:	60a3      	str	r3, [r4, #8]
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	071a      	lsls	r2, r3, #28
 80081f4:	d501      	bpl.n	80081fa <__swbuf_r+0x20>
 80081f6:	6923      	ldr	r3, [r4, #16]
 80081f8:	b943      	cbnz	r3, 800820c <__swbuf_r+0x32>
 80081fa:	4621      	mov	r1, r4
 80081fc:	4628      	mov	r0, r5
 80081fe:	f000 f82b 	bl	8008258 <__swsetup_r>
 8008202:	b118      	cbz	r0, 800820c <__swbuf_r+0x32>
 8008204:	f04f 37ff 	mov.w	r7, #4294967295
 8008208:	4638      	mov	r0, r7
 800820a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	6922      	ldr	r2, [r4, #16]
 8008210:	1a98      	subs	r0, r3, r2
 8008212:	6963      	ldr	r3, [r4, #20]
 8008214:	b2f6      	uxtb	r6, r6
 8008216:	4283      	cmp	r3, r0
 8008218:	4637      	mov	r7, r6
 800821a:	dc05      	bgt.n	8008228 <__swbuf_r+0x4e>
 800821c:	4621      	mov	r1, r4
 800821e:	4628      	mov	r0, r5
 8008220:	f000 fd38 	bl	8008c94 <_fflush_r>
 8008224:	2800      	cmp	r0, #0
 8008226:	d1ed      	bne.n	8008204 <__swbuf_r+0x2a>
 8008228:	68a3      	ldr	r3, [r4, #8]
 800822a:	3b01      	subs	r3, #1
 800822c:	60a3      	str	r3, [r4, #8]
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	6022      	str	r2, [r4, #0]
 8008234:	701e      	strb	r6, [r3, #0]
 8008236:	6962      	ldr	r2, [r4, #20]
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	429a      	cmp	r2, r3
 800823c:	d004      	beq.n	8008248 <__swbuf_r+0x6e>
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	07db      	lsls	r3, r3, #31
 8008242:	d5e1      	bpl.n	8008208 <__swbuf_r+0x2e>
 8008244:	2e0a      	cmp	r6, #10
 8008246:	d1df      	bne.n	8008208 <__swbuf_r+0x2e>
 8008248:	4621      	mov	r1, r4
 800824a:	4628      	mov	r0, r5
 800824c:	f000 fd22 	bl	8008c94 <_fflush_r>
 8008250:	2800      	cmp	r0, #0
 8008252:	d0d9      	beq.n	8008208 <__swbuf_r+0x2e>
 8008254:	e7d6      	b.n	8008204 <__swbuf_r+0x2a>
	...

08008258 <__swsetup_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4b29      	ldr	r3, [pc, #164]	@ (8008300 <__swsetup_r+0xa8>)
 800825c:	4605      	mov	r5, r0
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	460c      	mov	r4, r1
 8008262:	b118      	cbz	r0, 800826c <__swsetup_r+0x14>
 8008264:	6a03      	ldr	r3, [r0, #32]
 8008266:	b90b      	cbnz	r3, 800826c <__swsetup_r+0x14>
 8008268:	f7ff fece 	bl	8008008 <__sinit>
 800826c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008270:	0719      	lsls	r1, r3, #28
 8008272:	d422      	bmi.n	80082ba <__swsetup_r+0x62>
 8008274:	06da      	lsls	r2, r3, #27
 8008276:	d407      	bmi.n	8008288 <__swsetup_r+0x30>
 8008278:	2209      	movs	r2, #9
 800827a:	602a      	str	r2, [r5, #0]
 800827c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008280:	81a3      	strh	r3, [r4, #12]
 8008282:	f04f 30ff 	mov.w	r0, #4294967295
 8008286:	e033      	b.n	80082f0 <__swsetup_r+0x98>
 8008288:	0758      	lsls	r0, r3, #29
 800828a:	d512      	bpl.n	80082b2 <__swsetup_r+0x5a>
 800828c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800828e:	b141      	cbz	r1, 80082a2 <__swsetup_r+0x4a>
 8008290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008294:	4299      	cmp	r1, r3
 8008296:	d002      	beq.n	800829e <__swsetup_r+0x46>
 8008298:	4628      	mov	r0, r5
 800829a:	f000 f8af 	bl	80083fc <_free_r>
 800829e:	2300      	movs	r3, #0
 80082a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082a8:	81a3      	strh	r3, [r4, #12]
 80082aa:	2300      	movs	r3, #0
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	f043 0308 	orr.w	r3, r3, #8
 80082b8:	81a3      	strh	r3, [r4, #12]
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	b94b      	cbnz	r3, 80082d2 <__swsetup_r+0x7a>
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082c8:	d003      	beq.n	80082d2 <__swsetup_r+0x7a>
 80082ca:	4621      	mov	r1, r4
 80082cc:	4628      	mov	r0, r5
 80082ce:	f000 fd2f 	bl	8008d30 <__smakebuf_r>
 80082d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082d6:	f013 0201 	ands.w	r2, r3, #1
 80082da:	d00a      	beq.n	80082f2 <__swsetup_r+0x9a>
 80082dc:	2200      	movs	r2, #0
 80082de:	60a2      	str	r2, [r4, #8]
 80082e0:	6962      	ldr	r2, [r4, #20]
 80082e2:	4252      	negs	r2, r2
 80082e4:	61a2      	str	r2, [r4, #24]
 80082e6:	6922      	ldr	r2, [r4, #16]
 80082e8:	b942      	cbnz	r2, 80082fc <__swsetup_r+0xa4>
 80082ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082ee:	d1c5      	bne.n	800827c <__swsetup_r+0x24>
 80082f0:	bd38      	pop	{r3, r4, r5, pc}
 80082f2:	0799      	lsls	r1, r3, #30
 80082f4:	bf58      	it	pl
 80082f6:	6962      	ldrpl	r2, [r4, #20]
 80082f8:	60a2      	str	r2, [r4, #8]
 80082fa:	e7f4      	b.n	80082e6 <__swsetup_r+0x8e>
 80082fc:	2000      	movs	r0, #0
 80082fe:	e7f7      	b.n	80082f0 <__swsetup_r+0x98>
 8008300:	20000030 	.word	0x20000030

08008304 <memset>:
 8008304:	4402      	add	r2, r0
 8008306:	4603      	mov	r3, r0
 8008308:	4293      	cmp	r3, r2
 800830a:	d100      	bne.n	800830e <memset+0xa>
 800830c:	4770      	bx	lr
 800830e:	f803 1b01 	strb.w	r1, [r3], #1
 8008312:	e7f9      	b.n	8008308 <memset+0x4>

08008314 <_close_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4d06      	ldr	r5, [pc, #24]	@ (8008330 <_close_r+0x1c>)
 8008318:	2300      	movs	r3, #0
 800831a:	4604      	mov	r4, r0
 800831c:	4608      	mov	r0, r1
 800831e:	602b      	str	r3, [r5, #0]
 8008320:	f7f9 fb57 	bl	80019d2 <_close>
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d102      	bne.n	800832e <_close_r+0x1a>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	b103      	cbz	r3, 800832e <_close_r+0x1a>
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	20000574 	.word	0x20000574

08008334 <_lseek_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4d07      	ldr	r5, [pc, #28]	@ (8008354 <_lseek_r+0x20>)
 8008338:	4604      	mov	r4, r0
 800833a:	4608      	mov	r0, r1
 800833c:	4611      	mov	r1, r2
 800833e:	2200      	movs	r2, #0
 8008340:	602a      	str	r2, [r5, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	f7f9 fb6c 	bl	8001a20 <_lseek>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_lseek_r+0x1e>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b103      	cbz	r3, 8008352 <_lseek_r+0x1e>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	20000574 	.word	0x20000574

08008358 <_read_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4d07      	ldr	r5, [pc, #28]	@ (8008378 <_read_r+0x20>)
 800835c:	4604      	mov	r4, r0
 800835e:	4608      	mov	r0, r1
 8008360:	4611      	mov	r1, r2
 8008362:	2200      	movs	r2, #0
 8008364:	602a      	str	r2, [r5, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	f7f9 fafa 	bl	8001960 <_read>
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	d102      	bne.n	8008376 <_read_r+0x1e>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	b103      	cbz	r3, 8008376 <_read_r+0x1e>
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	bd38      	pop	{r3, r4, r5, pc}
 8008378:	20000574 	.word	0x20000574

0800837c <_write_r>:
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	4d07      	ldr	r5, [pc, #28]	@ (800839c <_write_r+0x20>)
 8008380:	4604      	mov	r4, r0
 8008382:	4608      	mov	r0, r1
 8008384:	4611      	mov	r1, r2
 8008386:	2200      	movs	r2, #0
 8008388:	602a      	str	r2, [r5, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	f7f9 fb05 	bl	800199a <_write>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d102      	bne.n	800839a <_write_r+0x1e>
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	b103      	cbz	r3, 800839a <_write_r+0x1e>
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	20000574 	.word	0x20000574

080083a0 <__errno>:
 80083a0:	4b01      	ldr	r3, [pc, #4]	@ (80083a8 <__errno+0x8>)
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	20000030 	.word	0x20000030

080083ac <__libc_init_array>:
 80083ac:	b570      	push	{r4, r5, r6, lr}
 80083ae:	4d0d      	ldr	r5, [pc, #52]	@ (80083e4 <__libc_init_array+0x38>)
 80083b0:	4c0d      	ldr	r4, [pc, #52]	@ (80083e8 <__libc_init_array+0x3c>)
 80083b2:	1b64      	subs	r4, r4, r5
 80083b4:	10a4      	asrs	r4, r4, #2
 80083b6:	2600      	movs	r6, #0
 80083b8:	42a6      	cmp	r6, r4
 80083ba:	d109      	bne.n	80083d0 <__libc_init_array+0x24>
 80083bc:	4d0b      	ldr	r5, [pc, #44]	@ (80083ec <__libc_init_array+0x40>)
 80083be:	4c0c      	ldr	r4, [pc, #48]	@ (80083f0 <__libc_init_array+0x44>)
 80083c0:	f000 fd24 	bl	8008e0c <_init>
 80083c4:	1b64      	subs	r4, r4, r5
 80083c6:	10a4      	asrs	r4, r4, #2
 80083c8:	2600      	movs	r6, #0
 80083ca:	42a6      	cmp	r6, r4
 80083cc:	d105      	bne.n	80083da <__libc_init_array+0x2e>
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d4:	4798      	blx	r3
 80083d6:	3601      	adds	r6, #1
 80083d8:	e7ee      	b.n	80083b8 <__libc_init_array+0xc>
 80083da:	f855 3b04 	ldr.w	r3, [r5], #4
 80083de:	4798      	blx	r3
 80083e0:	3601      	adds	r6, #1
 80083e2:	e7f2      	b.n	80083ca <__libc_init_array+0x1e>
 80083e4:	08009438 	.word	0x08009438
 80083e8:	08009438 	.word	0x08009438
 80083ec:	08009438 	.word	0x08009438
 80083f0:	0800943c 	.word	0x0800943c

080083f4 <__retarget_lock_init_recursive>:
 80083f4:	4770      	bx	lr

080083f6 <__retarget_lock_acquire_recursive>:
 80083f6:	4770      	bx	lr

080083f8 <__retarget_lock_release_recursive>:
 80083f8:	4770      	bx	lr
	...

080083fc <_free_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4605      	mov	r5, r0
 8008400:	2900      	cmp	r1, #0
 8008402:	d041      	beq.n	8008488 <_free_r+0x8c>
 8008404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008408:	1f0c      	subs	r4, r1, #4
 800840a:	2b00      	cmp	r3, #0
 800840c:	bfb8      	it	lt
 800840e:	18e4      	addlt	r4, r4, r3
 8008410:	f000 f8e0 	bl	80085d4 <__malloc_lock>
 8008414:	4a1d      	ldr	r2, [pc, #116]	@ (800848c <_free_r+0x90>)
 8008416:	6813      	ldr	r3, [r2, #0]
 8008418:	b933      	cbnz	r3, 8008428 <_free_r+0x2c>
 800841a:	6063      	str	r3, [r4, #4]
 800841c:	6014      	str	r4, [r2, #0]
 800841e:	4628      	mov	r0, r5
 8008420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008424:	f000 b8dc 	b.w	80085e0 <__malloc_unlock>
 8008428:	42a3      	cmp	r3, r4
 800842a:	d908      	bls.n	800843e <_free_r+0x42>
 800842c:	6820      	ldr	r0, [r4, #0]
 800842e:	1821      	adds	r1, r4, r0
 8008430:	428b      	cmp	r3, r1
 8008432:	bf01      	itttt	eq
 8008434:	6819      	ldreq	r1, [r3, #0]
 8008436:	685b      	ldreq	r3, [r3, #4]
 8008438:	1809      	addeq	r1, r1, r0
 800843a:	6021      	streq	r1, [r4, #0]
 800843c:	e7ed      	b.n	800841a <_free_r+0x1e>
 800843e:	461a      	mov	r2, r3
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	b10b      	cbz	r3, 8008448 <_free_r+0x4c>
 8008444:	42a3      	cmp	r3, r4
 8008446:	d9fa      	bls.n	800843e <_free_r+0x42>
 8008448:	6811      	ldr	r1, [r2, #0]
 800844a:	1850      	adds	r0, r2, r1
 800844c:	42a0      	cmp	r0, r4
 800844e:	d10b      	bne.n	8008468 <_free_r+0x6c>
 8008450:	6820      	ldr	r0, [r4, #0]
 8008452:	4401      	add	r1, r0
 8008454:	1850      	adds	r0, r2, r1
 8008456:	4283      	cmp	r3, r0
 8008458:	6011      	str	r1, [r2, #0]
 800845a:	d1e0      	bne.n	800841e <_free_r+0x22>
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	6053      	str	r3, [r2, #4]
 8008462:	4408      	add	r0, r1
 8008464:	6010      	str	r0, [r2, #0]
 8008466:	e7da      	b.n	800841e <_free_r+0x22>
 8008468:	d902      	bls.n	8008470 <_free_r+0x74>
 800846a:	230c      	movs	r3, #12
 800846c:	602b      	str	r3, [r5, #0]
 800846e:	e7d6      	b.n	800841e <_free_r+0x22>
 8008470:	6820      	ldr	r0, [r4, #0]
 8008472:	1821      	adds	r1, r4, r0
 8008474:	428b      	cmp	r3, r1
 8008476:	bf04      	itt	eq
 8008478:	6819      	ldreq	r1, [r3, #0]
 800847a:	685b      	ldreq	r3, [r3, #4]
 800847c:	6063      	str	r3, [r4, #4]
 800847e:	bf04      	itt	eq
 8008480:	1809      	addeq	r1, r1, r0
 8008482:	6021      	streq	r1, [r4, #0]
 8008484:	6054      	str	r4, [r2, #4]
 8008486:	e7ca      	b.n	800841e <_free_r+0x22>
 8008488:	bd38      	pop	{r3, r4, r5, pc}
 800848a:	bf00      	nop
 800848c:	20000580 	.word	0x20000580

08008490 <sbrk_aligned>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	4e0f      	ldr	r6, [pc, #60]	@ (80084d0 <sbrk_aligned+0x40>)
 8008494:	460c      	mov	r4, r1
 8008496:	6831      	ldr	r1, [r6, #0]
 8008498:	4605      	mov	r5, r0
 800849a:	b911      	cbnz	r1, 80084a2 <sbrk_aligned+0x12>
 800849c:	f000 fca6 	bl	8008dec <_sbrk_r>
 80084a0:	6030      	str	r0, [r6, #0]
 80084a2:	4621      	mov	r1, r4
 80084a4:	4628      	mov	r0, r5
 80084a6:	f000 fca1 	bl	8008dec <_sbrk_r>
 80084aa:	1c43      	adds	r3, r0, #1
 80084ac:	d103      	bne.n	80084b6 <sbrk_aligned+0x26>
 80084ae:	f04f 34ff 	mov.w	r4, #4294967295
 80084b2:	4620      	mov	r0, r4
 80084b4:	bd70      	pop	{r4, r5, r6, pc}
 80084b6:	1cc4      	adds	r4, r0, #3
 80084b8:	f024 0403 	bic.w	r4, r4, #3
 80084bc:	42a0      	cmp	r0, r4
 80084be:	d0f8      	beq.n	80084b2 <sbrk_aligned+0x22>
 80084c0:	1a21      	subs	r1, r4, r0
 80084c2:	4628      	mov	r0, r5
 80084c4:	f000 fc92 	bl	8008dec <_sbrk_r>
 80084c8:	3001      	adds	r0, #1
 80084ca:	d1f2      	bne.n	80084b2 <sbrk_aligned+0x22>
 80084cc:	e7ef      	b.n	80084ae <sbrk_aligned+0x1e>
 80084ce:	bf00      	nop
 80084d0:	2000057c 	.word	0x2000057c

080084d4 <_malloc_r>:
 80084d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d8:	1ccd      	adds	r5, r1, #3
 80084da:	f025 0503 	bic.w	r5, r5, #3
 80084de:	3508      	adds	r5, #8
 80084e0:	2d0c      	cmp	r5, #12
 80084e2:	bf38      	it	cc
 80084e4:	250c      	movcc	r5, #12
 80084e6:	2d00      	cmp	r5, #0
 80084e8:	4606      	mov	r6, r0
 80084ea:	db01      	blt.n	80084f0 <_malloc_r+0x1c>
 80084ec:	42a9      	cmp	r1, r5
 80084ee:	d904      	bls.n	80084fa <_malloc_r+0x26>
 80084f0:	230c      	movs	r3, #12
 80084f2:	6033      	str	r3, [r6, #0]
 80084f4:	2000      	movs	r0, #0
 80084f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085d0 <_malloc_r+0xfc>
 80084fe:	f000 f869 	bl	80085d4 <__malloc_lock>
 8008502:	f8d8 3000 	ldr.w	r3, [r8]
 8008506:	461c      	mov	r4, r3
 8008508:	bb44      	cbnz	r4, 800855c <_malloc_r+0x88>
 800850a:	4629      	mov	r1, r5
 800850c:	4630      	mov	r0, r6
 800850e:	f7ff ffbf 	bl	8008490 <sbrk_aligned>
 8008512:	1c43      	adds	r3, r0, #1
 8008514:	4604      	mov	r4, r0
 8008516:	d158      	bne.n	80085ca <_malloc_r+0xf6>
 8008518:	f8d8 4000 	ldr.w	r4, [r8]
 800851c:	4627      	mov	r7, r4
 800851e:	2f00      	cmp	r7, #0
 8008520:	d143      	bne.n	80085aa <_malloc_r+0xd6>
 8008522:	2c00      	cmp	r4, #0
 8008524:	d04b      	beq.n	80085be <_malloc_r+0xea>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	4639      	mov	r1, r7
 800852a:	4630      	mov	r0, r6
 800852c:	eb04 0903 	add.w	r9, r4, r3
 8008530:	f000 fc5c 	bl	8008dec <_sbrk_r>
 8008534:	4581      	cmp	r9, r0
 8008536:	d142      	bne.n	80085be <_malloc_r+0xea>
 8008538:	6821      	ldr	r1, [r4, #0]
 800853a:	1a6d      	subs	r5, r5, r1
 800853c:	4629      	mov	r1, r5
 800853e:	4630      	mov	r0, r6
 8008540:	f7ff ffa6 	bl	8008490 <sbrk_aligned>
 8008544:	3001      	adds	r0, #1
 8008546:	d03a      	beq.n	80085be <_malloc_r+0xea>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	442b      	add	r3, r5
 800854c:	6023      	str	r3, [r4, #0]
 800854e:	f8d8 3000 	ldr.w	r3, [r8]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	bb62      	cbnz	r2, 80085b0 <_malloc_r+0xdc>
 8008556:	f8c8 7000 	str.w	r7, [r8]
 800855a:	e00f      	b.n	800857c <_malloc_r+0xa8>
 800855c:	6822      	ldr	r2, [r4, #0]
 800855e:	1b52      	subs	r2, r2, r5
 8008560:	d420      	bmi.n	80085a4 <_malloc_r+0xd0>
 8008562:	2a0b      	cmp	r2, #11
 8008564:	d917      	bls.n	8008596 <_malloc_r+0xc2>
 8008566:	1961      	adds	r1, r4, r5
 8008568:	42a3      	cmp	r3, r4
 800856a:	6025      	str	r5, [r4, #0]
 800856c:	bf18      	it	ne
 800856e:	6059      	strne	r1, [r3, #4]
 8008570:	6863      	ldr	r3, [r4, #4]
 8008572:	bf08      	it	eq
 8008574:	f8c8 1000 	streq.w	r1, [r8]
 8008578:	5162      	str	r2, [r4, r5]
 800857a:	604b      	str	r3, [r1, #4]
 800857c:	4630      	mov	r0, r6
 800857e:	f000 f82f 	bl	80085e0 <__malloc_unlock>
 8008582:	f104 000b 	add.w	r0, r4, #11
 8008586:	1d23      	adds	r3, r4, #4
 8008588:	f020 0007 	bic.w	r0, r0, #7
 800858c:	1ac2      	subs	r2, r0, r3
 800858e:	bf1c      	itt	ne
 8008590:	1a1b      	subne	r3, r3, r0
 8008592:	50a3      	strne	r3, [r4, r2]
 8008594:	e7af      	b.n	80084f6 <_malloc_r+0x22>
 8008596:	6862      	ldr	r2, [r4, #4]
 8008598:	42a3      	cmp	r3, r4
 800859a:	bf0c      	ite	eq
 800859c:	f8c8 2000 	streq.w	r2, [r8]
 80085a0:	605a      	strne	r2, [r3, #4]
 80085a2:	e7eb      	b.n	800857c <_malloc_r+0xa8>
 80085a4:	4623      	mov	r3, r4
 80085a6:	6864      	ldr	r4, [r4, #4]
 80085a8:	e7ae      	b.n	8008508 <_malloc_r+0x34>
 80085aa:	463c      	mov	r4, r7
 80085ac:	687f      	ldr	r7, [r7, #4]
 80085ae:	e7b6      	b.n	800851e <_malloc_r+0x4a>
 80085b0:	461a      	mov	r2, r3
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	42a3      	cmp	r3, r4
 80085b6:	d1fb      	bne.n	80085b0 <_malloc_r+0xdc>
 80085b8:	2300      	movs	r3, #0
 80085ba:	6053      	str	r3, [r2, #4]
 80085bc:	e7de      	b.n	800857c <_malloc_r+0xa8>
 80085be:	230c      	movs	r3, #12
 80085c0:	6033      	str	r3, [r6, #0]
 80085c2:	4630      	mov	r0, r6
 80085c4:	f000 f80c 	bl	80085e0 <__malloc_unlock>
 80085c8:	e794      	b.n	80084f4 <_malloc_r+0x20>
 80085ca:	6005      	str	r5, [r0, #0]
 80085cc:	e7d6      	b.n	800857c <_malloc_r+0xa8>
 80085ce:	bf00      	nop
 80085d0:	20000580 	.word	0x20000580

080085d4 <__malloc_lock>:
 80085d4:	4801      	ldr	r0, [pc, #4]	@ (80085dc <__malloc_lock+0x8>)
 80085d6:	f7ff bf0e 	b.w	80083f6 <__retarget_lock_acquire_recursive>
 80085da:	bf00      	nop
 80085dc:	20000578 	.word	0x20000578

080085e0 <__malloc_unlock>:
 80085e0:	4801      	ldr	r0, [pc, #4]	@ (80085e8 <__malloc_unlock+0x8>)
 80085e2:	f7ff bf09 	b.w	80083f8 <__retarget_lock_release_recursive>
 80085e6:	bf00      	nop
 80085e8:	20000578 	.word	0x20000578

080085ec <__sfputc_r>:
 80085ec:	6893      	ldr	r3, [r2, #8]
 80085ee:	3b01      	subs	r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	b410      	push	{r4}
 80085f4:	6093      	str	r3, [r2, #8]
 80085f6:	da08      	bge.n	800860a <__sfputc_r+0x1e>
 80085f8:	6994      	ldr	r4, [r2, #24]
 80085fa:	42a3      	cmp	r3, r4
 80085fc:	db01      	blt.n	8008602 <__sfputc_r+0x16>
 80085fe:	290a      	cmp	r1, #10
 8008600:	d103      	bne.n	800860a <__sfputc_r+0x1e>
 8008602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008606:	f7ff bde8 	b.w	80081da <__swbuf_r>
 800860a:	6813      	ldr	r3, [r2, #0]
 800860c:	1c58      	adds	r0, r3, #1
 800860e:	6010      	str	r0, [r2, #0]
 8008610:	7019      	strb	r1, [r3, #0]
 8008612:	4608      	mov	r0, r1
 8008614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008618:	4770      	bx	lr

0800861a <__sfputs_r>:
 800861a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861c:	4606      	mov	r6, r0
 800861e:	460f      	mov	r7, r1
 8008620:	4614      	mov	r4, r2
 8008622:	18d5      	adds	r5, r2, r3
 8008624:	42ac      	cmp	r4, r5
 8008626:	d101      	bne.n	800862c <__sfputs_r+0x12>
 8008628:	2000      	movs	r0, #0
 800862a:	e007      	b.n	800863c <__sfputs_r+0x22>
 800862c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008630:	463a      	mov	r2, r7
 8008632:	4630      	mov	r0, r6
 8008634:	f7ff ffda 	bl	80085ec <__sfputc_r>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d1f3      	bne.n	8008624 <__sfputs_r+0xa>
 800863c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008640 <_vfiprintf_r>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	460d      	mov	r5, r1
 8008646:	b09d      	sub	sp, #116	@ 0x74
 8008648:	4614      	mov	r4, r2
 800864a:	4698      	mov	r8, r3
 800864c:	4606      	mov	r6, r0
 800864e:	b118      	cbz	r0, 8008658 <_vfiprintf_r+0x18>
 8008650:	6a03      	ldr	r3, [r0, #32]
 8008652:	b90b      	cbnz	r3, 8008658 <_vfiprintf_r+0x18>
 8008654:	f7ff fcd8 	bl	8008008 <__sinit>
 8008658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800865a:	07d9      	lsls	r1, r3, #31
 800865c:	d405      	bmi.n	800866a <_vfiprintf_r+0x2a>
 800865e:	89ab      	ldrh	r3, [r5, #12]
 8008660:	059a      	lsls	r2, r3, #22
 8008662:	d402      	bmi.n	800866a <_vfiprintf_r+0x2a>
 8008664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008666:	f7ff fec6 	bl	80083f6 <__retarget_lock_acquire_recursive>
 800866a:	89ab      	ldrh	r3, [r5, #12]
 800866c:	071b      	lsls	r3, r3, #28
 800866e:	d501      	bpl.n	8008674 <_vfiprintf_r+0x34>
 8008670:	692b      	ldr	r3, [r5, #16]
 8008672:	b99b      	cbnz	r3, 800869c <_vfiprintf_r+0x5c>
 8008674:	4629      	mov	r1, r5
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff fdee 	bl	8008258 <__swsetup_r>
 800867c:	b170      	cbz	r0, 800869c <_vfiprintf_r+0x5c>
 800867e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008680:	07dc      	lsls	r4, r3, #31
 8008682:	d504      	bpl.n	800868e <_vfiprintf_r+0x4e>
 8008684:	f04f 30ff 	mov.w	r0, #4294967295
 8008688:	b01d      	add	sp, #116	@ 0x74
 800868a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868e:	89ab      	ldrh	r3, [r5, #12]
 8008690:	0598      	lsls	r0, r3, #22
 8008692:	d4f7      	bmi.n	8008684 <_vfiprintf_r+0x44>
 8008694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008696:	f7ff feaf 	bl	80083f8 <__retarget_lock_release_recursive>
 800869a:	e7f3      	b.n	8008684 <_vfiprintf_r+0x44>
 800869c:	2300      	movs	r3, #0
 800869e:	9309      	str	r3, [sp, #36]	@ 0x24
 80086a0:	2320      	movs	r3, #32
 80086a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80086aa:	2330      	movs	r3, #48	@ 0x30
 80086ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800885c <_vfiprintf_r+0x21c>
 80086b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086b4:	f04f 0901 	mov.w	r9, #1
 80086b8:	4623      	mov	r3, r4
 80086ba:	469a      	mov	sl, r3
 80086bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086c0:	b10a      	cbz	r2, 80086c6 <_vfiprintf_r+0x86>
 80086c2:	2a25      	cmp	r2, #37	@ 0x25
 80086c4:	d1f9      	bne.n	80086ba <_vfiprintf_r+0x7a>
 80086c6:	ebba 0b04 	subs.w	fp, sl, r4
 80086ca:	d00b      	beq.n	80086e4 <_vfiprintf_r+0xa4>
 80086cc:	465b      	mov	r3, fp
 80086ce:	4622      	mov	r2, r4
 80086d0:	4629      	mov	r1, r5
 80086d2:	4630      	mov	r0, r6
 80086d4:	f7ff ffa1 	bl	800861a <__sfputs_r>
 80086d8:	3001      	adds	r0, #1
 80086da:	f000 80a7 	beq.w	800882c <_vfiprintf_r+0x1ec>
 80086de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086e0:	445a      	add	r2, fp
 80086e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80086e4:	f89a 3000 	ldrb.w	r3, [sl]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 809f 	beq.w	800882c <_vfiprintf_r+0x1ec>
 80086ee:	2300      	movs	r3, #0
 80086f0:	f04f 32ff 	mov.w	r2, #4294967295
 80086f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f8:	f10a 0a01 	add.w	sl, sl, #1
 80086fc:	9304      	str	r3, [sp, #16]
 80086fe:	9307      	str	r3, [sp, #28]
 8008700:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008704:	931a      	str	r3, [sp, #104]	@ 0x68
 8008706:	4654      	mov	r4, sl
 8008708:	2205      	movs	r2, #5
 800870a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870e:	4853      	ldr	r0, [pc, #332]	@ (800885c <_vfiprintf_r+0x21c>)
 8008710:	f7f7 fd96 	bl	8000240 <memchr>
 8008714:	9a04      	ldr	r2, [sp, #16]
 8008716:	b9d8      	cbnz	r0, 8008750 <_vfiprintf_r+0x110>
 8008718:	06d1      	lsls	r1, r2, #27
 800871a:	bf44      	itt	mi
 800871c:	2320      	movmi	r3, #32
 800871e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008722:	0713      	lsls	r3, r2, #28
 8008724:	bf44      	itt	mi
 8008726:	232b      	movmi	r3, #43	@ 0x2b
 8008728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800872c:	f89a 3000 	ldrb.w	r3, [sl]
 8008730:	2b2a      	cmp	r3, #42	@ 0x2a
 8008732:	d015      	beq.n	8008760 <_vfiprintf_r+0x120>
 8008734:	9a07      	ldr	r2, [sp, #28]
 8008736:	4654      	mov	r4, sl
 8008738:	2000      	movs	r0, #0
 800873a:	f04f 0c0a 	mov.w	ip, #10
 800873e:	4621      	mov	r1, r4
 8008740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008744:	3b30      	subs	r3, #48	@ 0x30
 8008746:	2b09      	cmp	r3, #9
 8008748:	d94b      	bls.n	80087e2 <_vfiprintf_r+0x1a2>
 800874a:	b1b0      	cbz	r0, 800877a <_vfiprintf_r+0x13a>
 800874c:	9207      	str	r2, [sp, #28]
 800874e:	e014      	b.n	800877a <_vfiprintf_r+0x13a>
 8008750:	eba0 0308 	sub.w	r3, r0, r8
 8008754:	fa09 f303 	lsl.w	r3, r9, r3
 8008758:	4313      	orrs	r3, r2
 800875a:	9304      	str	r3, [sp, #16]
 800875c:	46a2      	mov	sl, r4
 800875e:	e7d2      	b.n	8008706 <_vfiprintf_r+0xc6>
 8008760:	9b03      	ldr	r3, [sp, #12]
 8008762:	1d19      	adds	r1, r3, #4
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	9103      	str	r1, [sp, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	bfbb      	ittet	lt
 800876c:	425b      	neglt	r3, r3
 800876e:	f042 0202 	orrlt.w	r2, r2, #2
 8008772:	9307      	strge	r3, [sp, #28]
 8008774:	9307      	strlt	r3, [sp, #28]
 8008776:	bfb8      	it	lt
 8008778:	9204      	strlt	r2, [sp, #16]
 800877a:	7823      	ldrb	r3, [r4, #0]
 800877c:	2b2e      	cmp	r3, #46	@ 0x2e
 800877e:	d10a      	bne.n	8008796 <_vfiprintf_r+0x156>
 8008780:	7863      	ldrb	r3, [r4, #1]
 8008782:	2b2a      	cmp	r3, #42	@ 0x2a
 8008784:	d132      	bne.n	80087ec <_vfiprintf_r+0x1ac>
 8008786:	9b03      	ldr	r3, [sp, #12]
 8008788:	1d1a      	adds	r2, r3, #4
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	9203      	str	r2, [sp, #12]
 800878e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008792:	3402      	adds	r4, #2
 8008794:	9305      	str	r3, [sp, #20]
 8008796:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800886c <_vfiprintf_r+0x22c>
 800879a:	7821      	ldrb	r1, [r4, #0]
 800879c:	2203      	movs	r2, #3
 800879e:	4650      	mov	r0, sl
 80087a0:	f7f7 fd4e 	bl	8000240 <memchr>
 80087a4:	b138      	cbz	r0, 80087b6 <_vfiprintf_r+0x176>
 80087a6:	9b04      	ldr	r3, [sp, #16]
 80087a8:	eba0 000a 	sub.w	r0, r0, sl
 80087ac:	2240      	movs	r2, #64	@ 0x40
 80087ae:	4082      	lsls	r2, r0
 80087b0:	4313      	orrs	r3, r2
 80087b2:	3401      	adds	r4, #1
 80087b4:	9304      	str	r3, [sp, #16]
 80087b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ba:	4829      	ldr	r0, [pc, #164]	@ (8008860 <_vfiprintf_r+0x220>)
 80087bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087c0:	2206      	movs	r2, #6
 80087c2:	f7f7 fd3d 	bl	8000240 <memchr>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d03f      	beq.n	800884a <_vfiprintf_r+0x20a>
 80087ca:	4b26      	ldr	r3, [pc, #152]	@ (8008864 <_vfiprintf_r+0x224>)
 80087cc:	bb1b      	cbnz	r3, 8008816 <_vfiprintf_r+0x1d6>
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	3307      	adds	r3, #7
 80087d2:	f023 0307 	bic.w	r3, r3, #7
 80087d6:	3308      	adds	r3, #8
 80087d8:	9303      	str	r3, [sp, #12]
 80087da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087dc:	443b      	add	r3, r7
 80087de:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e0:	e76a      	b.n	80086b8 <_vfiprintf_r+0x78>
 80087e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80087e6:	460c      	mov	r4, r1
 80087e8:	2001      	movs	r0, #1
 80087ea:	e7a8      	b.n	800873e <_vfiprintf_r+0xfe>
 80087ec:	2300      	movs	r3, #0
 80087ee:	3401      	adds	r4, #1
 80087f0:	9305      	str	r3, [sp, #20]
 80087f2:	4619      	mov	r1, r3
 80087f4:	f04f 0c0a 	mov.w	ip, #10
 80087f8:	4620      	mov	r0, r4
 80087fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087fe:	3a30      	subs	r2, #48	@ 0x30
 8008800:	2a09      	cmp	r2, #9
 8008802:	d903      	bls.n	800880c <_vfiprintf_r+0x1cc>
 8008804:	2b00      	cmp	r3, #0
 8008806:	d0c6      	beq.n	8008796 <_vfiprintf_r+0x156>
 8008808:	9105      	str	r1, [sp, #20]
 800880a:	e7c4      	b.n	8008796 <_vfiprintf_r+0x156>
 800880c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008810:	4604      	mov	r4, r0
 8008812:	2301      	movs	r3, #1
 8008814:	e7f0      	b.n	80087f8 <_vfiprintf_r+0x1b8>
 8008816:	ab03      	add	r3, sp, #12
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	462a      	mov	r2, r5
 800881c:	4b12      	ldr	r3, [pc, #72]	@ (8008868 <_vfiprintf_r+0x228>)
 800881e:	a904      	add	r1, sp, #16
 8008820:	4630      	mov	r0, r6
 8008822:	f3af 8000 	nop.w
 8008826:	4607      	mov	r7, r0
 8008828:	1c78      	adds	r0, r7, #1
 800882a:	d1d6      	bne.n	80087da <_vfiprintf_r+0x19a>
 800882c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800882e:	07d9      	lsls	r1, r3, #31
 8008830:	d405      	bmi.n	800883e <_vfiprintf_r+0x1fe>
 8008832:	89ab      	ldrh	r3, [r5, #12]
 8008834:	059a      	lsls	r2, r3, #22
 8008836:	d402      	bmi.n	800883e <_vfiprintf_r+0x1fe>
 8008838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800883a:	f7ff fddd 	bl	80083f8 <__retarget_lock_release_recursive>
 800883e:	89ab      	ldrh	r3, [r5, #12]
 8008840:	065b      	lsls	r3, r3, #25
 8008842:	f53f af1f 	bmi.w	8008684 <_vfiprintf_r+0x44>
 8008846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008848:	e71e      	b.n	8008688 <_vfiprintf_r+0x48>
 800884a:	ab03      	add	r3, sp, #12
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	462a      	mov	r2, r5
 8008850:	4b05      	ldr	r3, [pc, #20]	@ (8008868 <_vfiprintf_r+0x228>)
 8008852:	a904      	add	r1, sp, #16
 8008854:	4630      	mov	r0, r6
 8008856:	f000 f879 	bl	800894c <_printf_i>
 800885a:	e7e4      	b.n	8008826 <_vfiprintf_r+0x1e6>
 800885c:	080093fc 	.word	0x080093fc
 8008860:	08009406 	.word	0x08009406
 8008864:	00000000 	.word	0x00000000
 8008868:	0800861b 	.word	0x0800861b
 800886c:	08009402 	.word	0x08009402

08008870 <_printf_common>:
 8008870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008874:	4616      	mov	r6, r2
 8008876:	4698      	mov	r8, r3
 8008878:	688a      	ldr	r2, [r1, #8]
 800887a:	690b      	ldr	r3, [r1, #16]
 800887c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008880:	4293      	cmp	r3, r2
 8008882:	bfb8      	it	lt
 8008884:	4613      	movlt	r3, r2
 8008886:	6033      	str	r3, [r6, #0]
 8008888:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800888c:	4607      	mov	r7, r0
 800888e:	460c      	mov	r4, r1
 8008890:	b10a      	cbz	r2, 8008896 <_printf_common+0x26>
 8008892:	3301      	adds	r3, #1
 8008894:	6033      	str	r3, [r6, #0]
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	0699      	lsls	r1, r3, #26
 800889a:	bf42      	ittt	mi
 800889c:	6833      	ldrmi	r3, [r6, #0]
 800889e:	3302      	addmi	r3, #2
 80088a0:	6033      	strmi	r3, [r6, #0]
 80088a2:	6825      	ldr	r5, [r4, #0]
 80088a4:	f015 0506 	ands.w	r5, r5, #6
 80088a8:	d106      	bne.n	80088b8 <_printf_common+0x48>
 80088aa:	f104 0a19 	add.w	sl, r4, #25
 80088ae:	68e3      	ldr	r3, [r4, #12]
 80088b0:	6832      	ldr	r2, [r6, #0]
 80088b2:	1a9b      	subs	r3, r3, r2
 80088b4:	42ab      	cmp	r3, r5
 80088b6:	dc26      	bgt.n	8008906 <_printf_common+0x96>
 80088b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088bc:	6822      	ldr	r2, [r4, #0]
 80088be:	3b00      	subs	r3, #0
 80088c0:	bf18      	it	ne
 80088c2:	2301      	movne	r3, #1
 80088c4:	0692      	lsls	r2, r2, #26
 80088c6:	d42b      	bmi.n	8008920 <_printf_common+0xb0>
 80088c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80088cc:	4641      	mov	r1, r8
 80088ce:	4638      	mov	r0, r7
 80088d0:	47c8      	blx	r9
 80088d2:	3001      	adds	r0, #1
 80088d4:	d01e      	beq.n	8008914 <_printf_common+0xa4>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	6922      	ldr	r2, [r4, #16]
 80088da:	f003 0306 	and.w	r3, r3, #6
 80088de:	2b04      	cmp	r3, #4
 80088e0:	bf02      	ittt	eq
 80088e2:	68e5      	ldreq	r5, [r4, #12]
 80088e4:	6833      	ldreq	r3, [r6, #0]
 80088e6:	1aed      	subeq	r5, r5, r3
 80088e8:	68a3      	ldr	r3, [r4, #8]
 80088ea:	bf0c      	ite	eq
 80088ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088f0:	2500      	movne	r5, #0
 80088f2:	4293      	cmp	r3, r2
 80088f4:	bfc4      	itt	gt
 80088f6:	1a9b      	subgt	r3, r3, r2
 80088f8:	18ed      	addgt	r5, r5, r3
 80088fa:	2600      	movs	r6, #0
 80088fc:	341a      	adds	r4, #26
 80088fe:	42b5      	cmp	r5, r6
 8008900:	d11a      	bne.n	8008938 <_printf_common+0xc8>
 8008902:	2000      	movs	r0, #0
 8008904:	e008      	b.n	8008918 <_printf_common+0xa8>
 8008906:	2301      	movs	r3, #1
 8008908:	4652      	mov	r2, sl
 800890a:	4641      	mov	r1, r8
 800890c:	4638      	mov	r0, r7
 800890e:	47c8      	blx	r9
 8008910:	3001      	adds	r0, #1
 8008912:	d103      	bne.n	800891c <_printf_common+0xac>
 8008914:	f04f 30ff 	mov.w	r0, #4294967295
 8008918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891c:	3501      	adds	r5, #1
 800891e:	e7c6      	b.n	80088ae <_printf_common+0x3e>
 8008920:	18e1      	adds	r1, r4, r3
 8008922:	1c5a      	adds	r2, r3, #1
 8008924:	2030      	movs	r0, #48	@ 0x30
 8008926:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800892a:	4422      	add	r2, r4
 800892c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008930:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008934:	3302      	adds	r3, #2
 8008936:	e7c7      	b.n	80088c8 <_printf_common+0x58>
 8008938:	2301      	movs	r3, #1
 800893a:	4622      	mov	r2, r4
 800893c:	4641      	mov	r1, r8
 800893e:	4638      	mov	r0, r7
 8008940:	47c8      	blx	r9
 8008942:	3001      	adds	r0, #1
 8008944:	d0e6      	beq.n	8008914 <_printf_common+0xa4>
 8008946:	3601      	adds	r6, #1
 8008948:	e7d9      	b.n	80088fe <_printf_common+0x8e>
	...

0800894c <_printf_i>:
 800894c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008950:	7e0f      	ldrb	r7, [r1, #24]
 8008952:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008954:	2f78      	cmp	r7, #120	@ 0x78
 8008956:	4691      	mov	r9, r2
 8008958:	4680      	mov	r8, r0
 800895a:	460c      	mov	r4, r1
 800895c:	469a      	mov	sl, r3
 800895e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008962:	d807      	bhi.n	8008974 <_printf_i+0x28>
 8008964:	2f62      	cmp	r7, #98	@ 0x62
 8008966:	d80a      	bhi.n	800897e <_printf_i+0x32>
 8008968:	2f00      	cmp	r7, #0
 800896a:	f000 80d2 	beq.w	8008b12 <_printf_i+0x1c6>
 800896e:	2f58      	cmp	r7, #88	@ 0x58
 8008970:	f000 80b9 	beq.w	8008ae6 <_printf_i+0x19a>
 8008974:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008978:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800897c:	e03a      	b.n	80089f4 <_printf_i+0xa8>
 800897e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008982:	2b15      	cmp	r3, #21
 8008984:	d8f6      	bhi.n	8008974 <_printf_i+0x28>
 8008986:	a101      	add	r1, pc, #4	@ (adr r1, 800898c <_printf_i+0x40>)
 8008988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800898c:	080089e5 	.word	0x080089e5
 8008990:	080089f9 	.word	0x080089f9
 8008994:	08008975 	.word	0x08008975
 8008998:	08008975 	.word	0x08008975
 800899c:	08008975 	.word	0x08008975
 80089a0:	08008975 	.word	0x08008975
 80089a4:	080089f9 	.word	0x080089f9
 80089a8:	08008975 	.word	0x08008975
 80089ac:	08008975 	.word	0x08008975
 80089b0:	08008975 	.word	0x08008975
 80089b4:	08008975 	.word	0x08008975
 80089b8:	08008af9 	.word	0x08008af9
 80089bc:	08008a23 	.word	0x08008a23
 80089c0:	08008ab3 	.word	0x08008ab3
 80089c4:	08008975 	.word	0x08008975
 80089c8:	08008975 	.word	0x08008975
 80089cc:	08008b1b 	.word	0x08008b1b
 80089d0:	08008975 	.word	0x08008975
 80089d4:	08008a23 	.word	0x08008a23
 80089d8:	08008975 	.word	0x08008975
 80089dc:	08008975 	.word	0x08008975
 80089e0:	08008abb 	.word	0x08008abb
 80089e4:	6833      	ldr	r3, [r6, #0]
 80089e6:	1d1a      	adds	r2, r3, #4
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6032      	str	r2, [r6, #0]
 80089ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80089f4:	2301      	movs	r3, #1
 80089f6:	e09d      	b.n	8008b34 <_printf_i+0x1e8>
 80089f8:	6833      	ldr	r3, [r6, #0]
 80089fa:	6820      	ldr	r0, [r4, #0]
 80089fc:	1d19      	adds	r1, r3, #4
 80089fe:	6031      	str	r1, [r6, #0]
 8008a00:	0606      	lsls	r6, r0, #24
 8008a02:	d501      	bpl.n	8008a08 <_printf_i+0xbc>
 8008a04:	681d      	ldr	r5, [r3, #0]
 8008a06:	e003      	b.n	8008a10 <_printf_i+0xc4>
 8008a08:	0645      	lsls	r5, r0, #25
 8008a0a:	d5fb      	bpl.n	8008a04 <_printf_i+0xb8>
 8008a0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a10:	2d00      	cmp	r5, #0
 8008a12:	da03      	bge.n	8008a1c <_printf_i+0xd0>
 8008a14:	232d      	movs	r3, #45	@ 0x2d
 8008a16:	426d      	negs	r5, r5
 8008a18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a1c:	4859      	ldr	r0, [pc, #356]	@ (8008b84 <_printf_i+0x238>)
 8008a1e:	230a      	movs	r3, #10
 8008a20:	e011      	b.n	8008a46 <_printf_i+0xfa>
 8008a22:	6821      	ldr	r1, [r4, #0]
 8008a24:	6833      	ldr	r3, [r6, #0]
 8008a26:	0608      	lsls	r0, r1, #24
 8008a28:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a2c:	d402      	bmi.n	8008a34 <_printf_i+0xe8>
 8008a2e:	0649      	lsls	r1, r1, #25
 8008a30:	bf48      	it	mi
 8008a32:	b2ad      	uxthmi	r5, r5
 8008a34:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a36:	4853      	ldr	r0, [pc, #332]	@ (8008b84 <_printf_i+0x238>)
 8008a38:	6033      	str	r3, [r6, #0]
 8008a3a:	bf14      	ite	ne
 8008a3c:	230a      	movne	r3, #10
 8008a3e:	2308      	moveq	r3, #8
 8008a40:	2100      	movs	r1, #0
 8008a42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a46:	6866      	ldr	r6, [r4, #4]
 8008a48:	60a6      	str	r6, [r4, #8]
 8008a4a:	2e00      	cmp	r6, #0
 8008a4c:	bfa2      	ittt	ge
 8008a4e:	6821      	ldrge	r1, [r4, #0]
 8008a50:	f021 0104 	bicge.w	r1, r1, #4
 8008a54:	6021      	strge	r1, [r4, #0]
 8008a56:	b90d      	cbnz	r5, 8008a5c <_printf_i+0x110>
 8008a58:	2e00      	cmp	r6, #0
 8008a5a:	d04b      	beq.n	8008af4 <_printf_i+0x1a8>
 8008a5c:	4616      	mov	r6, r2
 8008a5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a62:	fb03 5711 	mls	r7, r3, r1, r5
 8008a66:	5dc7      	ldrb	r7, [r0, r7]
 8008a68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a6c:	462f      	mov	r7, r5
 8008a6e:	42bb      	cmp	r3, r7
 8008a70:	460d      	mov	r5, r1
 8008a72:	d9f4      	bls.n	8008a5e <_printf_i+0x112>
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d10b      	bne.n	8008a90 <_printf_i+0x144>
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	07df      	lsls	r7, r3, #31
 8008a7c:	d508      	bpl.n	8008a90 <_printf_i+0x144>
 8008a7e:	6923      	ldr	r3, [r4, #16]
 8008a80:	6861      	ldr	r1, [r4, #4]
 8008a82:	4299      	cmp	r1, r3
 8008a84:	bfde      	ittt	le
 8008a86:	2330      	movle	r3, #48	@ 0x30
 8008a88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a90:	1b92      	subs	r2, r2, r6
 8008a92:	6122      	str	r2, [r4, #16]
 8008a94:	f8cd a000 	str.w	sl, [sp]
 8008a98:	464b      	mov	r3, r9
 8008a9a:	aa03      	add	r2, sp, #12
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4640      	mov	r0, r8
 8008aa0:	f7ff fee6 	bl	8008870 <_printf_common>
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d14a      	bne.n	8008b3e <_printf_i+0x1f2>
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aac:	b004      	add	sp, #16
 8008aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	f043 0320 	orr.w	r3, r3, #32
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	4833      	ldr	r0, [pc, #204]	@ (8008b88 <_printf_i+0x23c>)
 8008abc:	2778      	movs	r7, #120	@ 0x78
 8008abe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	6831      	ldr	r1, [r6, #0]
 8008ac6:	061f      	lsls	r7, r3, #24
 8008ac8:	f851 5b04 	ldr.w	r5, [r1], #4
 8008acc:	d402      	bmi.n	8008ad4 <_printf_i+0x188>
 8008ace:	065f      	lsls	r7, r3, #25
 8008ad0:	bf48      	it	mi
 8008ad2:	b2ad      	uxthmi	r5, r5
 8008ad4:	6031      	str	r1, [r6, #0]
 8008ad6:	07d9      	lsls	r1, r3, #31
 8008ad8:	bf44      	itt	mi
 8008ada:	f043 0320 	orrmi.w	r3, r3, #32
 8008ade:	6023      	strmi	r3, [r4, #0]
 8008ae0:	b11d      	cbz	r5, 8008aea <_printf_i+0x19e>
 8008ae2:	2310      	movs	r3, #16
 8008ae4:	e7ac      	b.n	8008a40 <_printf_i+0xf4>
 8008ae6:	4827      	ldr	r0, [pc, #156]	@ (8008b84 <_printf_i+0x238>)
 8008ae8:	e7e9      	b.n	8008abe <_printf_i+0x172>
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	f023 0320 	bic.w	r3, r3, #32
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	e7f6      	b.n	8008ae2 <_printf_i+0x196>
 8008af4:	4616      	mov	r6, r2
 8008af6:	e7bd      	b.n	8008a74 <_printf_i+0x128>
 8008af8:	6833      	ldr	r3, [r6, #0]
 8008afa:	6825      	ldr	r5, [r4, #0]
 8008afc:	6961      	ldr	r1, [r4, #20]
 8008afe:	1d18      	adds	r0, r3, #4
 8008b00:	6030      	str	r0, [r6, #0]
 8008b02:	062e      	lsls	r6, r5, #24
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	d501      	bpl.n	8008b0c <_printf_i+0x1c0>
 8008b08:	6019      	str	r1, [r3, #0]
 8008b0a:	e002      	b.n	8008b12 <_printf_i+0x1c6>
 8008b0c:	0668      	lsls	r0, r5, #25
 8008b0e:	d5fb      	bpl.n	8008b08 <_printf_i+0x1bc>
 8008b10:	8019      	strh	r1, [r3, #0]
 8008b12:	2300      	movs	r3, #0
 8008b14:	6123      	str	r3, [r4, #16]
 8008b16:	4616      	mov	r6, r2
 8008b18:	e7bc      	b.n	8008a94 <_printf_i+0x148>
 8008b1a:	6833      	ldr	r3, [r6, #0]
 8008b1c:	1d1a      	adds	r2, r3, #4
 8008b1e:	6032      	str	r2, [r6, #0]
 8008b20:	681e      	ldr	r6, [r3, #0]
 8008b22:	6862      	ldr	r2, [r4, #4]
 8008b24:	2100      	movs	r1, #0
 8008b26:	4630      	mov	r0, r6
 8008b28:	f7f7 fb8a 	bl	8000240 <memchr>
 8008b2c:	b108      	cbz	r0, 8008b32 <_printf_i+0x1e6>
 8008b2e:	1b80      	subs	r0, r0, r6
 8008b30:	6060      	str	r0, [r4, #4]
 8008b32:	6863      	ldr	r3, [r4, #4]
 8008b34:	6123      	str	r3, [r4, #16]
 8008b36:	2300      	movs	r3, #0
 8008b38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b3c:	e7aa      	b.n	8008a94 <_printf_i+0x148>
 8008b3e:	6923      	ldr	r3, [r4, #16]
 8008b40:	4632      	mov	r2, r6
 8008b42:	4649      	mov	r1, r9
 8008b44:	4640      	mov	r0, r8
 8008b46:	47d0      	blx	sl
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d0ad      	beq.n	8008aa8 <_printf_i+0x15c>
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	079b      	lsls	r3, r3, #30
 8008b50:	d413      	bmi.n	8008b7a <_printf_i+0x22e>
 8008b52:	68e0      	ldr	r0, [r4, #12]
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	4298      	cmp	r0, r3
 8008b58:	bfb8      	it	lt
 8008b5a:	4618      	movlt	r0, r3
 8008b5c:	e7a6      	b.n	8008aac <_printf_i+0x160>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	4632      	mov	r2, r6
 8008b62:	4649      	mov	r1, r9
 8008b64:	4640      	mov	r0, r8
 8008b66:	47d0      	blx	sl
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d09d      	beq.n	8008aa8 <_printf_i+0x15c>
 8008b6c:	3501      	adds	r5, #1
 8008b6e:	68e3      	ldr	r3, [r4, #12]
 8008b70:	9903      	ldr	r1, [sp, #12]
 8008b72:	1a5b      	subs	r3, r3, r1
 8008b74:	42ab      	cmp	r3, r5
 8008b76:	dcf2      	bgt.n	8008b5e <_printf_i+0x212>
 8008b78:	e7eb      	b.n	8008b52 <_printf_i+0x206>
 8008b7a:	2500      	movs	r5, #0
 8008b7c:	f104 0619 	add.w	r6, r4, #25
 8008b80:	e7f5      	b.n	8008b6e <_printf_i+0x222>
 8008b82:	bf00      	nop
 8008b84:	0800940d 	.word	0x0800940d
 8008b88:	0800941e 	.word	0x0800941e

08008b8c <__sflush_r>:
 8008b8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b94:	0716      	lsls	r6, r2, #28
 8008b96:	4605      	mov	r5, r0
 8008b98:	460c      	mov	r4, r1
 8008b9a:	d454      	bmi.n	8008c46 <__sflush_r+0xba>
 8008b9c:	684b      	ldr	r3, [r1, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	dc02      	bgt.n	8008ba8 <__sflush_r+0x1c>
 8008ba2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	dd48      	ble.n	8008c3a <__sflush_r+0xae>
 8008ba8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008baa:	2e00      	cmp	r6, #0
 8008bac:	d045      	beq.n	8008c3a <__sflush_r+0xae>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008bb4:	682f      	ldr	r7, [r5, #0]
 8008bb6:	6a21      	ldr	r1, [r4, #32]
 8008bb8:	602b      	str	r3, [r5, #0]
 8008bba:	d030      	beq.n	8008c1e <__sflush_r+0x92>
 8008bbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008bbe:	89a3      	ldrh	r3, [r4, #12]
 8008bc0:	0759      	lsls	r1, r3, #29
 8008bc2:	d505      	bpl.n	8008bd0 <__sflush_r+0x44>
 8008bc4:	6863      	ldr	r3, [r4, #4]
 8008bc6:	1ad2      	subs	r2, r2, r3
 8008bc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008bca:	b10b      	cbz	r3, 8008bd0 <__sflush_r+0x44>
 8008bcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bd4:	6a21      	ldr	r1, [r4, #32]
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	47b0      	blx	r6
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	d106      	bne.n	8008bee <__sflush_r+0x62>
 8008be0:	6829      	ldr	r1, [r5, #0]
 8008be2:	291d      	cmp	r1, #29
 8008be4:	d82b      	bhi.n	8008c3e <__sflush_r+0xb2>
 8008be6:	4a2a      	ldr	r2, [pc, #168]	@ (8008c90 <__sflush_r+0x104>)
 8008be8:	410a      	asrs	r2, r1
 8008bea:	07d6      	lsls	r6, r2, #31
 8008bec:	d427      	bmi.n	8008c3e <__sflush_r+0xb2>
 8008bee:	2200      	movs	r2, #0
 8008bf0:	6062      	str	r2, [r4, #4]
 8008bf2:	04d9      	lsls	r1, r3, #19
 8008bf4:	6922      	ldr	r2, [r4, #16]
 8008bf6:	6022      	str	r2, [r4, #0]
 8008bf8:	d504      	bpl.n	8008c04 <__sflush_r+0x78>
 8008bfa:	1c42      	adds	r2, r0, #1
 8008bfc:	d101      	bne.n	8008c02 <__sflush_r+0x76>
 8008bfe:	682b      	ldr	r3, [r5, #0]
 8008c00:	b903      	cbnz	r3, 8008c04 <__sflush_r+0x78>
 8008c02:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c06:	602f      	str	r7, [r5, #0]
 8008c08:	b1b9      	cbz	r1, 8008c3a <__sflush_r+0xae>
 8008c0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c0e:	4299      	cmp	r1, r3
 8008c10:	d002      	beq.n	8008c18 <__sflush_r+0x8c>
 8008c12:	4628      	mov	r0, r5
 8008c14:	f7ff fbf2 	bl	80083fc <_free_r>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c1c:	e00d      	b.n	8008c3a <__sflush_r+0xae>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4628      	mov	r0, r5
 8008c22:	47b0      	blx	r6
 8008c24:	4602      	mov	r2, r0
 8008c26:	1c50      	adds	r0, r2, #1
 8008c28:	d1c9      	bne.n	8008bbe <__sflush_r+0x32>
 8008c2a:	682b      	ldr	r3, [r5, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d0c6      	beq.n	8008bbe <__sflush_r+0x32>
 8008c30:	2b1d      	cmp	r3, #29
 8008c32:	d001      	beq.n	8008c38 <__sflush_r+0xac>
 8008c34:	2b16      	cmp	r3, #22
 8008c36:	d11e      	bne.n	8008c76 <__sflush_r+0xea>
 8008c38:	602f      	str	r7, [r5, #0]
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	e022      	b.n	8008c84 <__sflush_r+0xf8>
 8008c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c42:	b21b      	sxth	r3, r3
 8008c44:	e01b      	b.n	8008c7e <__sflush_r+0xf2>
 8008c46:	690f      	ldr	r7, [r1, #16]
 8008c48:	2f00      	cmp	r7, #0
 8008c4a:	d0f6      	beq.n	8008c3a <__sflush_r+0xae>
 8008c4c:	0793      	lsls	r3, r2, #30
 8008c4e:	680e      	ldr	r6, [r1, #0]
 8008c50:	bf08      	it	eq
 8008c52:	694b      	ldreq	r3, [r1, #20]
 8008c54:	600f      	str	r7, [r1, #0]
 8008c56:	bf18      	it	ne
 8008c58:	2300      	movne	r3, #0
 8008c5a:	eba6 0807 	sub.w	r8, r6, r7
 8008c5e:	608b      	str	r3, [r1, #8]
 8008c60:	f1b8 0f00 	cmp.w	r8, #0
 8008c64:	dde9      	ble.n	8008c3a <__sflush_r+0xae>
 8008c66:	6a21      	ldr	r1, [r4, #32]
 8008c68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c6a:	4643      	mov	r3, r8
 8008c6c:	463a      	mov	r2, r7
 8008c6e:	4628      	mov	r0, r5
 8008c70:	47b0      	blx	r6
 8008c72:	2800      	cmp	r0, #0
 8008c74:	dc08      	bgt.n	8008c88 <__sflush_r+0xfc>
 8008c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c7e:	81a3      	strh	r3, [r4, #12]
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c88:	4407      	add	r7, r0
 8008c8a:	eba8 0800 	sub.w	r8, r8, r0
 8008c8e:	e7e7      	b.n	8008c60 <__sflush_r+0xd4>
 8008c90:	dfbffffe 	.word	0xdfbffffe

08008c94 <_fflush_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	690b      	ldr	r3, [r1, #16]
 8008c98:	4605      	mov	r5, r0
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	b913      	cbnz	r3, 8008ca4 <_fflush_r+0x10>
 8008c9e:	2500      	movs	r5, #0
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	b118      	cbz	r0, 8008cae <_fflush_r+0x1a>
 8008ca6:	6a03      	ldr	r3, [r0, #32]
 8008ca8:	b90b      	cbnz	r3, 8008cae <_fflush_r+0x1a>
 8008caa:	f7ff f9ad 	bl	8008008 <__sinit>
 8008cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0f3      	beq.n	8008c9e <_fflush_r+0xa>
 8008cb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008cb8:	07d0      	lsls	r0, r2, #31
 8008cba:	d404      	bmi.n	8008cc6 <_fflush_r+0x32>
 8008cbc:	0599      	lsls	r1, r3, #22
 8008cbe:	d402      	bmi.n	8008cc6 <_fflush_r+0x32>
 8008cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cc2:	f7ff fb98 	bl	80083f6 <__retarget_lock_acquire_recursive>
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	4621      	mov	r1, r4
 8008cca:	f7ff ff5f 	bl	8008b8c <__sflush_r>
 8008cce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cd0:	07da      	lsls	r2, r3, #31
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	d4e4      	bmi.n	8008ca0 <_fflush_r+0xc>
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	059b      	lsls	r3, r3, #22
 8008cda:	d4e1      	bmi.n	8008ca0 <_fflush_r+0xc>
 8008cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cde:	f7ff fb8b 	bl	80083f8 <__retarget_lock_release_recursive>
 8008ce2:	e7dd      	b.n	8008ca0 <_fflush_r+0xc>

08008ce4 <__swhatbuf_r>:
 8008ce4:	b570      	push	{r4, r5, r6, lr}
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cec:	2900      	cmp	r1, #0
 8008cee:	b096      	sub	sp, #88	@ 0x58
 8008cf0:	4615      	mov	r5, r2
 8008cf2:	461e      	mov	r6, r3
 8008cf4:	da0d      	bge.n	8008d12 <__swhatbuf_r+0x2e>
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cfc:	f04f 0100 	mov.w	r1, #0
 8008d00:	bf14      	ite	ne
 8008d02:	2340      	movne	r3, #64	@ 0x40
 8008d04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d08:	2000      	movs	r0, #0
 8008d0a:	6031      	str	r1, [r6, #0]
 8008d0c:	602b      	str	r3, [r5, #0]
 8008d0e:	b016      	add	sp, #88	@ 0x58
 8008d10:	bd70      	pop	{r4, r5, r6, pc}
 8008d12:	466a      	mov	r2, sp
 8008d14:	f000 f848 	bl	8008da8 <_fstat_r>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	dbec      	blt.n	8008cf6 <__swhatbuf_r+0x12>
 8008d1c:	9901      	ldr	r1, [sp, #4]
 8008d1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d26:	4259      	negs	r1, r3
 8008d28:	4159      	adcs	r1, r3
 8008d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d2e:	e7eb      	b.n	8008d08 <__swhatbuf_r+0x24>

08008d30 <__smakebuf_r>:
 8008d30:	898b      	ldrh	r3, [r1, #12]
 8008d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d34:	079d      	lsls	r5, r3, #30
 8008d36:	4606      	mov	r6, r0
 8008d38:	460c      	mov	r4, r1
 8008d3a:	d507      	bpl.n	8008d4c <__smakebuf_r+0x1c>
 8008d3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	6123      	str	r3, [r4, #16]
 8008d44:	2301      	movs	r3, #1
 8008d46:	6163      	str	r3, [r4, #20]
 8008d48:	b003      	add	sp, #12
 8008d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d4c:	ab01      	add	r3, sp, #4
 8008d4e:	466a      	mov	r2, sp
 8008d50:	f7ff ffc8 	bl	8008ce4 <__swhatbuf_r>
 8008d54:	9f00      	ldr	r7, [sp, #0]
 8008d56:	4605      	mov	r5, r0
 8008d58:	4639      	mov	r1, r7
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f7ff fbba 	bl	80084d4 <_malloc_r>
 8008d60:	b948      	cbnz	r0, 8008d76 <__smakebuf_r+0x46>
 8008d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d66:	059a      	lsls	r2, r3, #22
 8008d68:	d4ee      	bmi.n	8008d48 <__smakebuf_r+0x18>
 8008d6a:	f023 0303 	bic.w	r3, r3, #3
 8008d6e:	f043 0302 	orr.w	r3, r3, #2
 8008d72:	81a3      	strh	r3, [r4, #12]
 8008d74:	e7e2      	b.n	8008d3c <__smakebuf_r+0xc>
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	6020      	str	r0, [r4, #0]
 8008d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	9b01      	ldr	r3, [sp, #4]
 8008d82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d86:	b15b      	cbz	r3, 8008da0 <__smakebuf_r+0x70>
 8008d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f000 f81d 	bl	8008dcc <_isatty_r>
 8008d92:	b128      	cbz	r0, 8008da0 <__smakebuf_r+0x70>
 8008d94:	89a3      	ldrh	r3, [r4, #12]
 8008d96:	f023 0303 	bic.w	r3, r3, #3
 8008d9a:	f043 0301 	orr.w	r3, r3, #1
 8008d9e:	81a3      	strh	r3, [r4, #12]
 8008da0:	89a3      	ldrh	r3, [r4, #12]
 8008da2:	431d      	orrs	r5, r3
 8008da4:	81a5      	strh	r5, [r4, #12]
 8008da6:	e7cf      	b.n	8008d48 <__smakebuf_r+0x18>

08008da8 <_fstat_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4d07      	ldr	r5, [pc, #28]	@ (8008dc8 <_fstat_r+0x20>)
 8008dac:	2300      	movs	r3, #0
 8008dae:	4604      	mov	r4, r0
 8008db0:	4608      	mov	r0, r1
 8008db2:	4611      	mov	r1, r2
 8008db4:	602b      	str	r3, [r5, #0]
 8008db6:	f7f8 fe18 	bl	80019ea <_fstat>
 8008dba:	1c43      	adds	r3, r0, #1
 8008dbc:	d102      	bne.n	8008dc4 <_fstat_r+0x1c>
 8008dbe:	682b      	ldr	r3, [r5, #0]
 8008dc0:	b103      	cbz	r3, 8008dc4 <_fstat_r+0x1c>
 8008dc2:	6023      	str	r3, [r4, #0]
 8008dc4:	bd38      	pop	{r3, r4, r5, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000574 	.word	0x20000574

08008dcc <_isatty_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	4d06      	ldr	r5, [pc, #24]	@ (8008de8 <_isatty_r+0x1c>)
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	4608      	mov	r0, r1
 8008dd6:	602b      	str	r3, [r5, #0]
 8008dd8:	f7f8 fe17 	bl	8001a0a <_isatty>
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	d102      	bne.n	8008de6 <_isatty_r+0x1a>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	b103      	cbz	r3, 8008de6 <_isatty_r+0x1a>
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	bd38      	pop	{r3, r4, r5, pc}
 8008de8:	20000574 	.word	0x20000574

08008dec <_sbrk_r>:
 8008dec:	b538      	push	{r3, r4, r5, lr}
 8008dee:	4d06      	ldr	r5, [pc, #24]	@ (8008e08 <_sbrk_r+0x1c>)
 8008df0:	2300      	movs	r3, #0
 8008df2:	4604      	mov	r4, r0
 8008df4:	4608      	mov	r0, r1
 8008df6:	602b      	str	r3, [r5, #0]
 8008df8:	f7f8 fe20 	bl	8001a3c <_sbrk>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	d102      	bne.n	8008e06 <_sbrk_r+0x1a>
 8008e00:	682b      	ldr	r3, [r5, #0]
 8008e02:	b103      	cbz	r3, 8008e06 <_sbrk_r+0x1a>
 8008e04:	6023      	str	r3, [r4, #0]
 8008e06:	bd38      	pop	{r3, r4, r5, pc}
 8008e08:	20000574 	.word	0x20000574

08008e0c <_init>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	bf00      	nop
 8008e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e12:	bc08      	pop	{r3}
 8008e14:	469e      	mov	lr, r3
 8008e16:	4770      	bx	lr

08008e18 <_fini>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	bf00      	nop
 8008e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1e:	bc08      	pop	{r3}
 8008e20:	469e      	mov	lr, r3
 8008e22:	4770      	bx	lr
