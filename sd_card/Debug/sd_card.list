
sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030a4  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800329c  0800329c  0000429c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032ac  080032ac  00005024  2**0
                  CONTENTS
  4 .ARM          00000008  080032ac  080032ac  000042ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032b4  080032b4  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032b4  080032b4  000042b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032b8  080032b8  000042b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080032bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000024  080032e0  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080032e0  00005128  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d03  00000000  00000000  00005052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a23  00000000  00000000  0000cd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0000e778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000057f  00000000  00000000  0000eee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027280  00000000  00000000  0000f467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a143  00000000  00000000  000366e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee232  00000000  00000000  0004082a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ea5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c60  00000000  00000000  0012eaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00130700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000024 	.word	0x20000024
 8000214:	00000000 	.word	0x00000000
 8000218:	08003284 	.word	0x08003284

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000028 	.word	0x20000028
 8000234:	08003284 	.word	0x08003284

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <SELECT>:
/***************************************
 * SPI functions
 **************************************/
/* slave select */
static void SELECT(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000532:	4804      	ldr	r0, [pc, #16]	@ (8000544 <SELECT+0x1c>)
 8000534:	f001 fb34 	bl	8001ba0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000538:	2001      	movs	r0, #1
 800053a:	f001 f87b 	bl	8001634 <HAL_Delay>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40020400 	.word	0x40020400

08000548 <DESELECT>:
/* slave deselect */
static void DESELECT(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000552:	4804      	ldr	r0, [pc, #16]	@ (8000564 <DESELECT+0x1c>)
 8000554:	f001 fb24 	bl	8001ba0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000558:	2001      	movs	r0, #1
 800055a:	f001 f86b 	bl	8001634 <HAL_Delay>
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40020400 	.word	0x40020400

08000568 <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000572:	bf00      	nop
 8000574:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <SPI_TxByte+0x30>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	2b02      	cmp	r3, #2
 8000580:	d1f8      	bne.n	8000574 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000582:	1df9      	adds	r1, r7, #7
 8000584:	2364      	movs	r3, #100	@ 0x64
 8000586:	2201      	movs	r2, #1
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <SPI_TxByte+0x30>)
 800058a:	f002 f86c 	bl	8002666 <HAL_SPI_Transmit>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000ac 	.word	0x200000ac

0800059c <SPI_TxBuffer>:
/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005a8:	bf00      	nop
 80005aa:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <SPI_TxBuffer+0x30>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	f003 0302 	and.w	r3, r3, #2
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d1f8      	bne.n	80005aa <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80005b8:	887a      	ldrh	r2, [r7, #2]
 80005ba:	2364      	movs	r3, #100	@ 0x64
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	4803      	ldr	r0, [pc, #12]	@ (80005cc <SPI_TxBuffer+0x30>)
 80005c0:	f002 f851 	bl	8002666 <HAL_SPI_Transmit>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000ac 	.word	0x200000ac

080005d0 <SPI_RxByte>:
/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80005d6:	23ff      	movs	r3, #255	@ 0xff
 80005d8:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005da:	bf00      	nop
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <SPI_RxByte+0x34>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d1f8      	bne.n	80005dc <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005ea:	1dba      	adds	r2, r7, #6
 80005ec:	1df9      	adds	r1, r7, #7
 80005ee:	2364      	movs	r3, #100	@ 0x64
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2301      	movs	r3, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <SPI_RxByte+0x34>)
 80005f6:	f002 f9ab 	bl	8002950 <HAL_SPI_TransmitReceive>
  return data;
 80005fa:	79bb      	ldrb	r3, [r7, #6]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000ac 	.word	0x200000ac

08000608 <SPI_RxBytePtr>:
/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000610:	f7ff ffde 	bl	80005d0 <SPI_RxByte>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	701a      	strb	r2, [r3, #0]
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/
/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800062a:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <SD_ReadyWait+0x30>)
 800062c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000630:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000632:	f7ff ffcd 	bl	80005d0 <SPI_RxByte>
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2bff      	cmp	r3, #255	@ 0xff
 800063e:	d003      	beq.n	8000648 <SD_ReadyWait+0x24>
 8000640:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <SD_ReadyWait+0x30>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1f4      	bne.n	8000632 <SD_ReadyWait+0xe>
  return res;
 8000648:	79fb      	ldrb	r3, [r7, #7]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000042 	.word	0x20000042

08000658 <SD_PowerOn>:
/* power on */
static void SD_PowerOn(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800065e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000662:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8000664:	f7ff ff70 	bl	8000548 <DESELECT>
  for(int i = 0; i < 10; i++)
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	e005      	b.n	800067a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800066e:	20ff      	movs	r0, #255	@ 0xff
 8000670:	f7ff ff7a 	bl	8000568 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	3301      	adds	r3, #1
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	2b09      	cmp	r3, #9
 800067e:	ddf6      	ble.n	800066e <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8000680:	f7ff ff52 	bl	8000528 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000684:	2340      	movs	r3, #64	@ 0x40
 8000686:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000698:	2395      	movs	r3, #149	@ 0x95
 800069a:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800069c:	463b      	mov	r3, r7
 800069e:	2106      	movs	r1, #6
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff7b 	bl	800059c <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80006a6:	e002      	b.n	80006ae <SD_PowerOn+0x56>
  {
    cnt--;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80006ae:	f7ff ff8f 	bl	80005d0 <SPI_RxByte>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d002      	beq.n	80006be <SD_PowerOn+0x66>
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1f4      	bne.n	80006a8 <SD_PowerOn+0x50>
  }
  DESELECT();
 80006be:	f7ff ff43 	bl	8000548 <DESELECT>
  SPI_TxByte(0XFF);
 80006c2:	20ff      	movs	r0, #255	@ 0xff
 80006c4:	f7ff ff50 	bl	8000568 <SPI_TxByte>
  PowerFlag = 1;
 80006c8:	4b03      	ldr	r3, [pc, #12]	@ (80006d8 <SD_PowerOn+0x80>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000045 	.word	0x20000045

080006dc <SD_PowerOff>:
/* power off */
static void SD_PowerOff(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80006e0:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <SD_PowerOff+0x14>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	20000045 	.word	0x20000045

080006f4 <SD_CheckPower>:
/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return PowerFlag;
 80006f8:	4b03      	ldr	r3, [pc, #12]	@ (8000708 <SD_CheckPower+0x14>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	20000045 	.word	0x20000045

0800070c <SD_RxDataBlock>:
/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8000716:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <SD_RxDataBlock+0x58>)
 8000718:	22c8      	movs	r2, #200	@ 0xc8
 800071a:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800071c:	f7ff ff58 	bl	80005d0 <SPI_RxByte>
 8000720:	4603      	mov	r3, r0
 8000722:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	2bff      	cmp	r3, #255	@ 0xff
 8000728:	d103      	bne.n	8000732 <SD_RxDataBlock+0x26>
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <SD_RxDataBlock+0x58>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f4      	bne.n	800071c <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	2bfe      	cmp	r3, #254	@ 0xfe
 8000736:	d001      	beq.n	800073c <SD_RxDataBlock+0x30>
 8000738:	2300      	movs	r3, #0
 800073a:	e00f      	b.n	800075c <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	1c5a      	adds	r2, r3, #1
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff60 	bl	8000608 <SPI_RxBytePtr>
  } while(len--);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	1e5a      	subs	r2, r3, #1
 800074c:	603a      	str	r2, [r7, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1f4      	bne.n	800073c <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8000752:	f7ff ff3d 	bl	80005d0 <SPI_RxByte>
  SPI_RxByte();
 8000756:	f7ff ff3b 	bl	80005d0 <SPI_RxByte>
  return TRUE;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000040 	.word	0x20000040

08000768 <SD_TxDataBlock>:
/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000778:	f7ff ff54 	bl	8000624 <SD_ReadyWait>
 800077c:	4603      	mov	r3, r0
 800077e:	2bff      	cmp	r3, #255	@ 0xff
 8000780:	d001      	beq.n	8000786 <SD_TxDataBlock+0x1e>
 8000782:	2300      	movs	r3, #0
 8000784:	e02f      	b.n	80007e6 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8000786:	78fb      	ldrb	r3, [r7, #3]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff feed 	bl	8000568 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	2bfd      	cmp	r3, #253	@ 0xfd
 8000792:	d020      	beq.n	80007d6 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000794:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff feff 	bl	800059c <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800079e:	f7ff ff17 	bl	80005d0 <SPI_RxByte>
    SPI_RxByte();
 80007a2:	f7ff ff15 	bl	80005d0 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 80007a6:	e00b      	b.n	80007c0 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80007a8:	f7ff ff12 	bl	80005d0 <SPI_RxByte>
 80007ac:	4603      	mov	r3, r0
 80007ae:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	f003 031f 	and.w	r3, r3, #31
 80007b6:	2b05      	cmp	r3, #5
 80007b8:	d006      	beq.n	80007c8 <SD_TxDataBlock+0x60>
      i++;
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	3301      	adds	r3, #1
 80007be:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	2b40      	cmp	r3, #64	@ 0x40
 80007c4:	d9f0      	bls.n	80007a8 <SD_TxDataBlock+0x40>
 80007c6:	e000      	b.n	80007ca <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80007c8:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80007ca:	bf00      	nop
 80007cc:	f7ff ff00 	bl	80005d0 <SPI_RxByte>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0fa      	beq.n	80007cc <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	f003 031f 	and.w	r3, r3, #31
 80007dc:	2b05      	cmp	r3, #5
 80007de:	d101      	bne.n	80007e4 <SD_TxDataBlock+0x7c>
 80007e0:	2301      	movs	r3, #1
 80007e2:	e000      	b.n	80007e6 <SD_TxDataBlock+0x7e>
  return FALSE;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <SD_SendCmd>:
#endif /* _USE_WRITE */
/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b084      	sub	sp, #16
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	6039      	str	r1, [r7, #0]
 80007f8:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007fa:	f7ff ff13 	bl	8000624 <SD_ReadyWait>
 80007fe:	4603      	mov	r3, r0
 8000800:	2bff      	cmp	r3, #255	@ 0xff
 8000802:	d001      	beq.n	8000808 <SD_SendCmd+0x1a>
 8000804:	23ff      	movs	r3, #255	@ 0xff
 8000806:	e042      	b.n	800088e <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff feac 	bl	8000568 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	0e1b      	lsrs	r3, r3, #24
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fea6 	bl	8000568 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	0c1b      	lsrs	r3, r3, #16
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fea0 	bl	8000568 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0a1b      	lsrs	r3, r3, #8
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff fe9a 	bl	8000568 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fe95 	bl	8000568 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b40      	cmp	r3, #64	@ 0x40
 8000842:	d102      	bne.n	800084a <SD_SendCmd+0x5c>
 8000844:	2395      	movs	r3, #149	@ 0x95
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	e007      	b.n	800085a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b48      	cmp	r3, #72	@ 0x48
 800084e:	d102      	bne.n	8000856 <SD_SendCmd+0x68>
 8000850:	2387      	movs	r3, #135	@ 0x87
 8000852:	73fb      	strb	r3, [r7, #15]
 8000854:	e001      	b.n	800085a <SD_SendCmd+0x6c>
  else crc = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fe83 	bl	8000568 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b4c      	cmp	r3, #76	@ 0x4c
 8000866:	d101      	bne.n	800086c <SD_SendCmd+0x7e>
 8000868:	f7ff feb2 	bl	80005d0 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800086c:	230a      	movs	r3, #10
 800086e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000870:	f7ff feae 	bl	80005d0 <SPI_RxByte>
 8000874:	4603      	mov	r3, r0
 8000876:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000878:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800087c:	2b00      	cmp	r3, #0
 800087e:	da05      	bge.n	800088c <SD_SendCmd+0x9e>
 8000880:	7bbb      	ldrb	r3, [r7, #14]
 8000882:	3b01      	subs	r3, #1
 8000884:	73bb      	strb	r3, [r7, #14]
 8000886:	7bbb      	ldrb	r3, [r7, #14]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1f1      	bne.n	8000870 <SD_SendCmd+0x82>
  return res;
 800088c:	7b7b      	ldrb	r3, [r7, #13]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SD_disk_initialize+0x14>
 80008a8:	2301      	movs	r3, #1
 80008aa:	e0d1      	b.n	8000a50 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80008ac:	4b6a      	ldr	r3, [pc, #424]	@ (8000a58 <SD_disk_initialize+0x1c0>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d003      	beq.n	80008c2 <SD_disk_initialize+0x2a>
 80008ba:	4b67      	ldr	r3, [pc, #412]	@ (8000a58 <SD_disk_initialize+0x1c0>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	e0c6      	b.n	8000a50 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 80008c2:	f7ff fec9 	bl	8000658 <SD_PowerOn>
  /* slave select */
  SELECT();
 80008c6:	f7ff fe2f 	bl	8000528 <SELECT>
  /* check disk type */
  type = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80008ce:	2100      	movs	r1, #0
 80008d0:	2040      	movs	r0, #64	@ 0x40
 80008d2:	f7ff ff8c 	bl	80007ee <SD_SendCmd>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b01      	cmp	r3, #1
 80008da:	f040 80a1 	bne.w	8000a20 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80008de:	4b5f      	ldr	r3, [pc, #380]	@ (8000a5c <SD_disk_initialize+0x1c4>)
 80008e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008e4:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008e6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80008ea:	2048      	movs	r0, #72	@ 0x48
 80008ec:	f7ff ff7f 	bl	80007ee <SD_SendCmd>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d155      	bne.n	80009a2 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	73fb      	strb	r3, [r7, #15]
 80008fa:	e00c      	b.n	8000916 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80008fc:	7bfc      	ldrb	r4, [r7, #15]
 80008fe:	f7ff fe67 	bl	80005d0 <SPI_RxByte>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	f104 0310 	add.w	r3, r4, #16
 800090a:	443b      	add	r3, r7
 800090c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	3301      	adds	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d9ef      	bls.n	80008fc <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800091c:	7abb      	ldrb	r3, [r7, #10]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d17e      	bne.n	8000a20 <SD_disk_initialize+0x188>
 8000922:	7afb      	ldrb	r3, [r7, #11]
 8000924:	2baa      	cmp	r3, #170	@ 0xaa
 8000926:	d17b      	bne.n	8000a20 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000928:	2100      	movs	r1, #0
 800092a:	2077      	movs	r0, #119	@ 0x77
 800092c:	f7ff ff5f 	bl	80007ee <SD_SendCmd>
 8000930:	4603      	mov	r3, r0
 8000932:	2b01      	cmp	r3, #1
 8000934:	d807      	bhi.n	8000946 <SD_disk_initialize+0xae>
 8000936:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800093a:	2069      	movs	r0, #105	@ 0x69
 800093c:	f7ff ff57 	bl	80007ee <SD_SendCmd>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d004      	beq.n	8000950 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000946:	4b45      	ldr	r3, [pc, #276]	@ (8000a5c <SD_disk_initialize+0x1c4>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1ec      	bne.n	8000928 <SD_disk_initialize+0x90>
 800094e:	e000      	b.n	8000952 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000950:	bf00      	nop
        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000952:	4b42      	ldr	r3, [pc, #264]	@ (8000a5c <SD_disk_initialize+0x1c4>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d062      	beq.n	8000a20 <SD_disk_initialize+0x188>
 800095a:	2100      	movs	r1, #0
 800095c:	207a      	movs	r0, #122	@ 0x7a
 800095e:	f7ff ff46 	bl	80007ee <SD_SendCmd>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d15b      	bne.n	8000a20 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]
 800096c:	e00c      	b.n	8000988 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800096e:	7bfc      	ldrb	r4, [r7, #15]
 8000970:	f7ff fe2e 	bl	80005d0 <SPI_RxByte>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	f104 0310 	add.w	r3, r4, #16
 800097c:	443b      	add	r3, r7
 800097e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	3301      	adds	r3, #1
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	2b03      	cmp	r3, #3
 800098c:	d9ef      	bls.n	800096e <SD_disk_initialize+0xd6>
          }
          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800098e:	7a3b      	ldrb	r3, [r7, #8]
 8000990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SD_disk_initialize+0x104>
 8000998:	230c      	movs	r3, #12
 800099a:	e000      	b.n	800099e <SD_disk_initialize+0x106>
 800099c:	2304      	movs	r3, #4
 800099e:	73bb      	strb	r3, [r7, #14]
 80009a0:	e03e      	b.n	8000a20 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009a2:	2100      	movs	r1, #0
 80009a4:	2077      	movs	r0, #119	@ 0x77
 80009a6:	f7ff ff22 	bl	80007ee <SD_SendCmd>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d808      	bhi.n	80009c2 <SD_disk_initialize+0x12a>
 80009b0:	2100      	movs	r1, #0
 80009b2:	2069      	movs	r0, #105	@ 0x69
 80009b4:	f7ff ff1b 	bl	80007ee <SD_SendCmd>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d801      	bhi.n	80009c2 <SD_disk_initialize+0x12a>
 80009be:	2302      	movs	r3, #2
 80009c0:	e000      	b.n	80009c4 <SD_disk_initialize+0x12c>
 80009c2:	2301      	movs	r3, #1
 80009c4:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d10e      	bne.n	80009ea <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80009cc:	2100      	movs	r1, #0
 80009ce:	2077      	movs	r0, #119	@ 0x77
 80009d0:	f7ff ff0d 	bl	80007ee <SD_SendCmd>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d80e      	bhi.n	80009f8 <SD_disk_initialize+0x160>
 80009da:	2100      	movs	r1, #0
 80009dc:	2069      	movs	r0, #105	@ 0x69
 80009de:	f7ff ff06 	bl	80007ee <SD_SendCmd>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d107      	bne.n	80009f8 <SD_disk_initialize+0x160>
 80009e8:	e00c      	b.n	8000a04 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009ea:	2100      	movs	r1, #0
 80009ec:	2041      	movs	r0, #65	@ 0x41
 80009ee:	f7ff fefe 	bl	80007ee <SD_SendCmd>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d004      	beq.n	8000a02 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80009f8:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <SD_disk_initialize+0x1c4>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1e2      	bne.n	80009c6 <SD_disk_initialize+0x12e>
 8000a00:	e000      	b.n	8000a04 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a02:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <SD_disk_initialize+0x1c4>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d007      	beq.n	8000a1c <SD_disk_initialize+0x184>
 8000a0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a10:	2050      	movs	r0, #80	@ 0x50
 8000a12:	f7ff feec 	bl	80007ee <SD_SendCmd>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SD_disk_initialize+0x188>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8000a20:	4a0f      	ldr	r2, [pc, #60]	@ (8000a60 <SD_disk_initialize+0x1c8>)
 8000a22:	7bbb      	ldrb	r3, [r7, #14]
 8000a24:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8000a26:	f7ff fd8f 	bl	8000548 <DESELECT>
  SPI_RxByte();
 8000a2a:	f7ff fdd1 	bl	80005d0 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8000a2e:	7bbb      	ldrb	r3, [r7, #14]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d008      	beq.n	8000a46 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <SD_disk_initialize+0x1c0>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	f023 0301 	bic.w	r3, r3, #1
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <SD_disk_initialize+0x1c0>)
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	e001      	b.n	8000a4a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000a46:	f7ff fe49 	bl	80006dc <SD_PowerOff>
  }
  return Stat;
 8000a4a:	4b03      	ldr	r3, [pc, #12]	@ (8000a58 <SD_disk_initialize+0x1c0>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b2db      	uxtb	r3, r3
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000040 	.word	0x20000040
 8000a60:	20000044 	.word	0x20000044

08000a64 <SD_disk_status>:
/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SD_disk_status+0x14>
 8000a74:	2301      	movs	r3, #1
 8000a76:	e002      	b.n	8000a7e <SD_disk_status+0x1a>
  return Stat;
 8000a78:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <SD_disk_status+0x28>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000000 	.word	0x20000000

08000a90 <SD_disk_read>:
/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d102      	bne.n	8000aac <SD_disk_read+0x1c>
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d101      	bne.n	8000ab0 <SD_disk_read+0x20>
 8000aac:	2304      	movs	r3, #4
 8000aae:	e051      	b.n	8000b54 <SD_disk_read+0xc4>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b5c <SD_disk_read+0xcc>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SD_disk_read+0x32>
 8000abe:	2303      	movs	r3, #3
 8000ac0:	e048      	b.n	8000b54 <SD_disk_read+0xc4>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000ac2:	4b27      	ldr	r3, [pc, #156]	@ (8000b60 <SD_disk_read+0xd0>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <SD_disk_read+0x44>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	025b      	lsls	r3, r3, #9
 8000ad2:	607b      	str	r3, [r7, #4]
  SELECT();
 8000ad4:	f7ff fd28 	bl	8000528 <SELECT>
  if (count == 1)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d111      	bne.n	8000b02 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	2051      	movs	r0, #81	@ 0x51
 8000ae2:	f7ff fe84 	bl	80007ee <SD_SendCmd>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d129      	bne.n	8000b40 <SD_disk_read+0xb0>
 8000aec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000af0:	68b8      	ldr	r0, [r7, #8]
 8000af2:	f7ff fe0b 	bl	800070c <SD_RxDataBlock>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d021      	beq.n	8000b40 <SD_disk_read+0xb0>
 8000afc:	2300      	movs	r3, #0
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	e01e      	b.n	8000b40 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	2052      	movs	r0, #82	@ 0x52
 8000b06:	f7ff fe72 	bl	80007ee <SD_SendCmd>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d117      	bne.n	8000b40 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000b10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b14:	68b8      	ldr	r0, [r7, #8]
 8000b16:	f7ff fdf9 	bl	800070c <SD_RxDataBlock>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d00a      	beq.n	8000b36 <SD_disk_read+0xa6>
        buff += 512;
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000b26:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1ed      	bne.n	8000b10 <SD_disk_read+0x80>
 8000b34:	e000      	b.n	8000b38 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000b36:	bf00      	nop
      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	204c      	movs	r0, #76	@ 0x4c
 8000b3c:	f7ff fe57 	bl	80007ee <SD_SendCmd>
    }
  }
  /* Idle */
  DESELECT();
 8000b40:	f7ff fd02 	bl	8000548 <DESELECT>
  SPI_RxByte();
 8000b44:	f7ff fd44 	bl	80005d0 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	bf14      	ite	ne
 8000b4e:	2301      	movne	r3, #1
 8000b50:	2300      	moveq	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000044 	.word	0x20000044

08000b64 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	4603      	mov	r3, r0
 8000b72:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d102      	bne.n	8000b80 <SD_disk_write+0x1c>
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <SD_disk_write+0x20>
 8000b80:	2304      	movs	r3, #4
 8000b82:	e06b      	b.n	8000c5c <SD_disk_write+0xf8>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b84:	4b37      	ldr	r3, [pc, #220]	@ (8000c64 <SD_disk_write+0x100>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SD_disk_write+0x32>
 8000b92:	2303      	movs	r3, #3
 8000b94:	e062      	b.n	8000c5c <SD_disk_write+0xf8>
  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b96:	4b33      	ldr	r3, [pc, #204]	@ (8000c64 <SD_disk_write+0x100>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SD_disk_write+0x44>
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e059      	b.n	8000c5c <SD_disk_write+0xf8>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000ba8:	4b2f      	ldr	r3, [pc, #188]	@ (8000c68 <SD_disk_write+0x104>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <SD_disk_write+0x56>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	025b      	lsls	r3, r3, #9
 8000bb8:	607b      	str	r3, [r7, #4]
  SELECT();
 8000bba:	f7ff fcb5 	bl	8000528 <SELECT>
  if (count == 1)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d110      	bne.n	8000be6 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	2058      	movs	r0, #88	@ 0x58
 8000bc8:	f7ff fe11 	bl	80007ee <SD_SendCmd>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d13a      	bne.n	8000c48 <SD_disk_write+0xe4>
 8000bd2:	21fe      	movs	r1, #254	@ 0xfe
 8000bd4:	68b8      	ldr	r0, [r7, #8]
 8000bd6:	f7ff fdc7 	bl	8000768 <SD_TxDataBlock>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d033      	beq.n	8000c48 <SD_disk_write+0xe4>
      count = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	e030      	b.n	8000c48 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000be6:	4b20      	ldr	r3, [pc, #128]	@ (8000c68 <SD_disk_write+0x104>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d007      	beq.n	8000c02 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2077      	movs	r0, #119	@ 0x77
 8000bf6:	f7ff fdfa 	bl	80007ee <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bfa:	6839      	ldr	r1, [r7, #0]
 8000bfc:	2057      	movs	r0, #87	@ 0x57
 8000bfe:	f7ff fdf6 	bl	80007ee <SD_SendCmd>
    }
    if (SD_SendCmd(CMD25, sector) == 0)
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	2059      	movs	r0, #89	@ 0x59
 8000c06:	f7ff fdf2 	bl	80007ee <SD_SendCmd>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d11b      	bne.n	8000c48 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c10:	21fc      	movs	r1, #252	@ 0xfc
 8000c12:	68b8      	ldr	r0, [r7, #8]
 8000c14:	f7ff fda8 	bl	8000768 <SD_TxDataBlock>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00a      	beq.n	8000c34 <SD_disk_write+0xd0>
        buff += 512;
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c24:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1ee      	bne.n	8000c10 <SD_disk_write+0xac>
 8000c32:	e000      	b.n	8000c36 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c34:	bf00      	nop
      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000c36:	21fd      	movs	r1, #253	@ 0xfd
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff fd95 	bl	8000768 <SD_TxDataBlock>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d101      	bne.n	8000c48 <SD_disk_write+0xe4>
      {
        count = 1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Idle */
  DESELECT();
 8000c48:	f7ff fc7e 	bl	8000548 <DESELECT>
  SPI_RxByte();
 8000c4c:	f7ff fcc0 	bl	80005d0 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf14      	ite	ne
 8000c56:	2301      	movne	r3, #1
 8000c58:	2300      	moveq	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000044 	.word	0x20000044

08000c6c <SD_disk_ioctl>:
#endif /* _USE_WRITE */
/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b08b      	sub	sp, #44	@ 0x2c
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	603a      	str	r2, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	623b      	str	r3, [r7, #32]
  WORD csize;
  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SD_disk_ioctl+0x1e>
 8000c86:	2304      	movs	r3, #4
 8000c88:	e113      	b.n	8000eb2 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (ctrl == CTRL_POWER)
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	2b05      	cmp	r3, #5
 8000c94:	d124      	bne.n	8000ce0 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d012      	beq.n	8000cc4 <SD_disk_ioctl+0x58>
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	dc1a      	bgt.n	8000cd8 <SD_disk_ioctl+0x6c>
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d002      	beq.n	8000cac <SD_disk_ioctl+0x40>
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d006      	beq.n	8000cb8 <SD_disk_ioctl+0x4c>
 8000caa:	e015      	b.n	8000cd8 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8000cac:	f7ff fd16 	bl	80006dc <SD_PowerOff>
      res = RES_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000cb6:	e0fa      	b.n	8000eae <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8000cb8:	f7ff fcce 	bl	8000658 <SD_PowerOn>
      res = RES_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000cc2:	e0f4      	b.n	8000eae <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8000cc4:	6a3b      	ldr	r3, [r7, #32]
 8000cc6:	1c5c      	adds	r4, r3, #1
 8000cc8:	f7ff fd14 	bl	80006f4 <SD_CheckPower>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000cd6:	e0ea      	b.n	8000eae <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000cde:	e0e6      	b.n	8000eae <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ce0:	4b76      	ldr	r3, [pc, #472]	@ (8000ebc <SD_disk_ioctl+0x250>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SD_disk_ioctl+0x86>
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e0df      	b.n	8000eb2 <SD_disk_ioctl+0x246>
    SELECT();
 8000cf2:	f7ff fc19 	bl	8000528 <SELECT>
    switch (ctrl)
 8000cf6:	79bb      	ldrb	r3, [r7, #6]
 8000cf8:	2b0d      	cmp	r3, #13
 8000cfa:	f200 80c9 	bhi.w	8000e90 <SD_disk_ioctl+0x224>
 8000cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8000d04 <SD_disk_ioctl+0x98>)
 8000d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d04:	08000dfb 	.word	0x08000dfb
 8000d08:	08000d3d 	.word	0x08000d3d
 8000d0c:	08000deb 	.word	0x08000deb
 8000d10:	08000e91 	.word	0x08000e91
 8000d14:	08000e91 	.word	0x08000e91
 8000d18:	08000e91 	.word	0x08000e91
 8000d1c:	08000e91 	.word	0x08000e91
 8000d20:	08000e91 	.word	0x08000e91
 8000d24:	08000e91 	.word	0x08000e91
 8000d28:	08000e91 	.word	0x08000e91
 8000d2c:	08000e91 	.word	0x08000e91
 8000d30:	08000e0d 	.word	0x08000e0d
 8000d34:	08000e31 	.word	0x08000e31
 8000d38:	08000e55 	.word	0x08000e55
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2049      	movs	r0, #73	@ 0x49
 8000d40:	f7ff fd55 	bl	80007ee <SD_SendCmd>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 80a6 	bne.w	8000e98 <SD_disk_ioctl+0x22c>
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2110      	movs	r1, #16
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fcda 	bl	800070c <SD_RxDataBlock>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 809c 	beq.w	8000e98 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8000d60:	7b3b      	ldrb	r3, [r7, #12]
 8000d62:	099b      	lsrs	r3, r3, #6
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d10d      	bne.n	8000d86 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d6a:	7d7b      	ldrb	r3, [r7, #21]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	7d3b      	ldrb	r3, [r7, #20]
 8000d70:	021b      	lsls	r3, r3, #8
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000d7c:	8bfb      	ldrh	r3, [r7, #30]
 8000d7e:	029a      	lsls	r2, r3, #10
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	e02d      	b.n	8000de2 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d86:	7c7b      	ldrb	r3, [r7, #17]
 8000d88:	f003 030f 	and.w	r3, r3, #15
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	7dbb      	ldrb	r3, [r7, #22]
 8000d90:	09db      	lsrs	r3, r3, #7
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4413      	add	r3, r2
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	7d7b      	ldrb	r3, [r7, #21]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	f003 0306 	and.w	r3, r3, #6
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4413      	add	r3, r2
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	3302      	adds	r3, #2
 8000daa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000dae:	7d3b      	ldrb	r3, [r7, #20]
 8000db0:	099b      	lsrs	r3, r3, #6
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	7cfb      	ldrb	r3, [r7, #19]
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	4413      	add	r3, r2
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	7cbb      	ldrb	r3, [r7, #18]
 8000dc2:	029b      	lsls	r3, r3, #10
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4413      	add	r3, r2
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000dd4:	8bfa      	ldrh	r2, [r7, #30]
 8000dd6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dda:	3b09      	subs	r3, #9
 8000ddc:	409a      	lsls	r2, r3
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000de8:	e056      	b.n	8000e98 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000df0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000df8:	e055      	b.n	8000ea6 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000dfa:	f7ff fc13 	bl	8000624 <SD_ReadyWait>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2bff      	cmp	r3, #255	@ 0xff
 8000e02:	d14b      	bne.n	8000e9c <SD_disk_ioctl+0x230>
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000e0a:	e047      	b.n	8000e9c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2049      	movs	r0, #73	@ 0x49
 8000e10:	f7ff fced 	bl	80007ee <SD_SendCmd>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d142      	bne.n	8000ea0 <SD_disk_ioctl+0x234>
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	6a38      	ldr	r0, [r7, #32]
 8000e1e:	f7ff fc75 	bl	800070c <SD_RxDataBlock>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d03b      	beq.n	8000ea0 <SD_disk_ioctl+0x234>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000e2e:	e037      	b.n	8000ea0 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e30:	2100      	movs	r1, #0
 8000e32:	204a      	movs	r0, #74	@ 0x4a
 8000e34:	f7ff fcdb 	bl	80007ee <SD_SendCmd>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d132      	bne.n	8000ea4 <SD_disk_ioctl+0x238>
 8000e3e:	2110      	movs	r1, #16
 8000e40:	6a38      	ldr	r0, [r7, #32]
 8000e42:	f7ff fc63 	bl	800070c <SD_RxDataBlock>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d02b      	beq.n	8000ea4 <SD_disk_ioctl+0x238>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000e52:	e027      	b.n	8000ea4 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000e54:	2100      	movs	r1, #0
 8000e56:	207a      	movs	r0, #122	@ 0x7a
 8000e58:	f7ff fcc9 	bl	80007ee <SD_SendCmd>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d116      	bne.n	8000e90 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e68:	e00b      	b.n	8000e82 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8000e6a:	6a3c      	ldr	r4, [r7, #32]
 8000e6c:	1c63      	adds	r3, r4, #1
 8000e6e:	623b      	str	r3, [r7, #32]
 8000e70:	f7ff fbae 	bl	80005d0 <SPI_RxByte>
 8000e74:	4603      	mov	r3, r0
 8000e76:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000e78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d9ef      	bls.n	8000e6a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8000e90:	2304      	movs	r3, #4
 8000e92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e96:	e006      	b.n	8000ea6 <SD_disk_ioctl+0x23a>
      break;
 8000e98:	bf00      	nop
 8000e9a:	e004      	b.n	8000ea6 <SD_disk_ioctl+0x23a>
      break;
 8000e9c:	bf00      	nop
 8000e9e:	e002      	b.n	8000ea6 <SD_disk_ioctl+0x23a>
      break;
 8000ea0:	bf00      	nop
 8000ea2:	e000      	b.n	8000ea6 <SD_disk_ioctl+0x23a>
      break;
 8000ea4:	bf00      	nop
    }
    DESELECT();
 8000ea6:	f7ff fb4f 	bl	8000548 <DESELECT>
    SPI_RxByte();
 8000eaa:	f7ff fb91 	bl	80005d0 <SPI_RxByte>
  }
  return res;
 8000eae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	372c      	adds	r7, #44	@ 0x2c
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000000 	.word	0x20000000

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f000 fb59 	bl	800157a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f80a 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f000 f8e0 	bl	8001090 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ed0:	f000 f862 	bl	8000f98 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000ed4:	f002 f8e6 	bl	80030a4 <MX_FATFS_Init>
  MX_SPI2_Init();
 8000ed8:	f000 f89c 	bl	8001014 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <main+0x1c>

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	@ 0x50
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	2234      	movs	r2, #52	@ 0x34
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 f99b 	bl	800322a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f04:	4b22      	ldr	r3, [pc, #136]	@ (8000f90 <SystemClock_Config+0xb0>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f08:	4a21      	ldr	r2, [pc, #132]	@ (8000f90 <SystemClock_Config+0xb0>)
 8000f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f10:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <SystemClock_Config+0xb0>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f94 <SystemClock_Config+0xb4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f24:	4a1b      	ldr	r2, [pc, #108]	@ (8000f94 <SystemClock_Config+0xb4>)
 8000f26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <SystemClock_Config+0xb4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f40:	2310      	movs	r3, #16
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fe41 	bl	8001bd4 <HAL_RCC_OscConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000f58:	f000 f9b0 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 f8d9 	bl	8002130 <HAL_RCC_ClockConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000f84:	f000 f99a 	bl	80012bc <Error_Handler>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3750      	adds	r7, #80	@ 0x50
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <MX_SPI1_Init+0x74>)
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001010 <MX_SPI1_Init+0x78>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <MX_SPI1_Init+0x74>)
 8000fa4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_SPI1_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	@ (800100c <MX_SPI1_Init+0x74>)
 8000fb2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000fb6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	@ (800100c <MX_SPI1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <MX_SPI1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	@ (800100c <MX_SPI1_Init+0x74>)
 8000fc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <MX_SPI1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <MX_SPI1_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <MX_SPI1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <MX_SPI1_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_SPI1_Init+0x74>)
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <MX_SPI1_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <MX_SPI1_Init+0x74>)
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	@ (800100c <MX_SPI1_Init+0x74>)
 8000ff8:	f001 fa8a 	bl	8002510 <HAL_SPI_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001002:	f000 f95b 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000048 	.word	0x20000048
 8001010:	40013000 	.word	0x40013000

08001014 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <MX_SPI2_Init+0x74>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	@ (800108c <MX_SPI2_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800101e:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <MX_SPI2_Init+0x74>)
 8001020:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001024:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <MX_SPI2_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <MX_SPI2_Init+0x74>)
 800102e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001032:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_SPI2_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103a:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <MX_SPI2_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_SPI2_Init+0x74>)
 8001042:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001046:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_SPI2_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_SPI2_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_SPI2_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <MX_SPI2_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001060:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_SPI2_Init+0x74>)
 8001062:	2207      	movs	r2, #7
 8001064:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <MX_SPI2_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_SPI2_Init+0x74>)
 800106e:	2208      	movs	r2, #8
 8001070:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_SPI2_Init+0x74>)
 8001074:	f001 fa4c 	bl	8002510 <HAL_SPI_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800107e:	f000 f91d 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000ac 	.word	0x200000ac
 800108c:	40003800 	.word	0x40003800

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	@ 0x30
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b7f      	ldr	r3, [pc, #508]	@ (80012a4 <MX_GPIO_Init+0x214>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a7e      	ldr	r2, [pc, #504]	@ (80012a4 <MX_GPIO_Init+0x214>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b7c      	ldr	r3, [pc, #496]	@ (80012a4 <MX_GPIO_Init+0x214>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	61bb      	str	r3, [r7, #24]
 80010bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	4b79      	ldr	r3, [pc, #484]	@ (80012a4 <MX_GPIO_Init+0x214>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a78      	ldr	r2, [pc, #480]	@ (80012a4 <MX_GPIO_Init+0x214>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b76      	ldr	r3, [pc, #472]	@ (80012a4 <MX_GPIO_Init+0x214>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b73      	ldr	r3, [pc, #460]	@ (80012a4 <MX_GPIO_Init+0x214>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a72      	ldr	r2, [pc, #456]	@ (80012a4 <MX_GPIO_Init+0x214>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b70      	ldr	r3, [pc, #448]	@ (80012a4 <MX_GPIO_Init+0x214>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b6d      	ldr	r3, [pc, #436]	@ (80012a4 <MX_GPIO_Init+0x214>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	4a6c      	ldr	r2, [pc, #432]	@ (80012a4 <MX_GPIO_Init+0x214>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fa:	4b6a      	ldr	r3, [pc, #424]	@ (80012a4 <MX_GPIO_Init+0x214>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	4b67      	ldr	r3, [pc, #412]	@ (80012a4 <MX_GPIO_Init+0x214>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a66      	ldr	r2, [pc, #408]	@ (80012a4 <MX_GPIO_Init+0x214>)
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b64      	ldr	r3, [pc, #400]	@ (80012a4 <MX_GPIO_Init+0x214>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800111e:	4b61      	ldr	r3, [pc, #388]	@ (80012a4 <MX_GPIO_Init+0x214>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a60      	ldr	r2, [pc, #384]	@ (80012a4 <MX_GPIO_Init+0x214>)
 8001124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b5e      	ldr	r3, [pc, #376]	@ (80012a4 <MX_GPIO_Init+0x214>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f244 0181 	movw	r1, #16513	@ 0x4081
 800113c:	485a      	ldr	r0, [pc, #360]	@ (80012a8 <MX_GPIO_Init+0x218>)
 800113e:	f000 fd2f 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2140      	movs	r1, #64	@ 0x40
 8001146:	4859      	ldr	r0, [pc, #356]	@ (80012ac <MX_GPIO_Init+0x21c>)
 8001148:	f000 fd2a 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800114c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001152:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	4853      	ldr	r0, [pc, #332]	@ (80012b0 <MX_GPIO_Init+0x220>)
 8001164:	f000 fb70 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001168:	2332      	movs	r3, #50	@ 0x32
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001178:	230b      	movs	r3, #11
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	484b      	ldr	r0, [pc, #300]	@ (80012b0 <MX_GPIO_Init+0x220>)
 8001184:	f000 fb60 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001188:	2386      	movs	r3, #134	@ 0x86
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001198:	230b      	movs	r3, #11
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	4844      	ldr	r0, [pc, #272]	@ (80012b4 <MX_GPIO_Init+0x224>)
 80011a4:	f000 fb50 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011a8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	4839      	ldr	r0, [pc, #228]	@ (80012a8 <MX_GPIO_Init+0x218>)
 80011c2:	f000 fb41 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d8:	230b      	movs	r3, #11
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	4831      	ldr	r0, [pc, #196]	@ (80012a8 <MX_GPIO_Init+0x218>)
 80011e4:	f000 fb30 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011fa:	2307      	movs	r3, #7
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	482c      	ldr	r0, [pc, #176]	@ (80012b8 <MX_GPIO_Init+0x228>)
 8001206:	f000 fb1f 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800120a:	2340      	movs	r3, #64	@ 0x40
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4822      	ldr	r0, [pc, #136]	@ (80012ac <MX_GPIO_Init+0x21c>)
 8001222:	f000 fb11 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001226:	2380      	movs	r3, #128	@ 0x80
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	481c      	ldr	r0, [pc, #112]	@ (80012ac <MX_GPIO_Init+0x21c>)
 800123a:	f000 fb05 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800123e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001250:	230a      	movs	r3, #10
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4816      	ldr	r0, [pc, #88]	@ (80012b4 <MX_GPIO_Init+0x224>)
 800125c:	f000 faf4 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001260:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	480f      	ldr	r0, [pc, #60]	@ (80012b4 <MX_GPIO_Init+0x224>)
 8001276:	f000 fae7 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800127a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800128c:	230b      	movs	r3, #11
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_GPIO_Init+0x21c>)
 8001298:	f000 fad6 	bl	8001848 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800129c:	bf00      	nop
 800129e:	3730      	adds	r7, #48	@ 0x30
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40021800 	.word	0x40021800
 80012b0:	40020800 	.word	0x40020800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40020c00 	.word	0x40020c00

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <Error_Handler+0x8>

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <HAL_MspInit+0x44>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	4a0e      	ldr	r2, [pc, #56]	@ (800130c <HAL_MspInit+0x44>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012da:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <HAL_MspInit+0x44>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_MspInit+0x44>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	4a08      	ldr	r2, [pc, #32]	@ (800130c <HAL_MspInit+0x44>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_MspInit+0x44>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	@ 0x38
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a4a      	ldr	r2, [pc, #296]	@ (8001458 <HAL_SPI_MspInit+0x148>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d144      	bne.n	80013bc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001332:	4b4a      	ldr	r3, [pc, #296]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	4a49      	ldr	r2, [pc, #292]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 8001338:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800133c:	6453      	str	r3, [r2, #68]	@ 0x44
 800133e:	4b47      	ldr	r3, [pc, #284]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001342:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001346:	623b      	str	r3, [r7, #32]
 8001348:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b44      	ldr	r3, [pc, #272]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a43      	ldr	r2, [pc, #268]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b41      	ldr	r3, [pc, #260]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001362:	4b3e      	ldr	r3, [pc, #248]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a3d      	ldr	r2, [pc, #244]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b3b      	ldr	r3, [pc, #236]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800137a:	2360      	movs	r3, #96	@ 0x60
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800138a:	2305      	movs	r3, #5
 800138c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001392:	4619      	mov	r1, r3
 8001394:	4832      	ldr	r0, [pc, #200]	@ (8001460 <HAL_SPI_MspInit+0x150>)
 8001396:	f000 fa57 	bl	8001848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800139a:	2380      	movs	r3, #128	@ 0x80
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013aa:	2305      	movs	r3, #5
 80013ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	482b      	ldr	r0, [pc, #172]	@ (8001464 <HAL_SPI_MspInit+0x154>)
 80013b6:	f000 fa47 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013ba:	e049      	b.n	8001450 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a29      	ldr	r2, [pc, #164]	@ (8001468 <HAL_SPI_MspInit+0x158>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d144      	bne.n	8001450 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013c6:	4b25      	ldr	r3, [pc, #148]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	4a24      	ldr	r2, [pc, #144]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d2:	4b22      	ldr	r3, [pc, #136]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a1e      	ldr	r2, [pc, #120]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a18      	ldr	r2, [pc, #96]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b16      	ldr	r3, [pc, #88]	@ (800145c <HAL_SPI_MspInit+0x14c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800140e:	230c      	movs	r3, #12
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800141e:	2305      	movs	r3, #5
 8001420:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	4810      	ldr	r0, [pc, #64]	@ (800146c <HAL_SPI_MspInit+0x15c>)
 800142a:	f000 fa0d 	bl	8001848 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800142e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001440:	2305      	movs	r3, #5
 8001442:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	4809      	ldr	r0, [pc, #36]	@ (8001470 <HAL_SPI_MspInit+0x160>)
 800144c:	f000 f9fc 	bl	8001848 <HAL_GPIO_Init>
}
 8001450:	bf00      	nop
 8001452:	3738      	adds	r7, #56	@ 0x38
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40013000 	.word	0x40013000
 800145c:	40023800 	.word	0x40023800
 8001460:	40020000 	.word	0x40020000
 8001464:	40020c00 	.word	0x40020c00
 8001468:	40003800 	.word	0x40003800
 800146c:	40020800 	.word	0x40020800
 8001470:	40020400 	.word	0x40020400

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <NMI_Handler+0x4>

0800147c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <MemManage_Handler+0x4>

0800148c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <UsageFault_Handler+0x4>

0800149c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <SysTick_Handler+0x34>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <SysTick_Handler+0x18>
	  Timer1--;
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <SysTick_Handler+0x34>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <SysTick_Handler+0x34>)
 80014de:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80014e0:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <SysTick_Handler+0x38>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <SysTick_Handler+0x2c>
	  Timer2--;
 80014e8:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <SysTick_Handler+0x38>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4b03      	ldr	r3, [pc, #12]	@ (8001500 <SysTick_Handler+0x38>)
 80014f2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f4:	f000 f87e 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000040 	.word	0x20000040
 8001500:	20000042 	.word	0x20000042

08001504 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <SystemInit+0x20>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800150e:	4a05      	ldr	r2, [pc, #20]	@ (8001524 <SystemInit+0x20>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001528:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001560 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800152c:	f7ff ffea 	bl	8001504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001530:	480c      	ldr	r0, [pc, #48]	@ (8001564 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001532:	490d      	ldr	r1, [pc, #52]	@ (8001568 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001534:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001548:	4c0a      	ldr	r4, [pc, #40]	@ (8001574 <LoopFillZerobss+0x22>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001556:	f001 fe71 	bl	800323c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155a:	f7ff fcb1 	bl	8000ec0 <main>
  bx  lr    
 800155e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001560:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001568:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800156c:	080032bc 	.word	0x080032bc
  ldr r2, =_sbss
 8001570:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001574:	20000128 	.word	0x20000128

08001578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC_IRQHandler>

0800157a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157e:	2003      	movs	r0, #3
 8001580:	f000 f92e 	bl	80017e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001584:	2000      	movs	r0, #0
 8001586:	f000 f805 	bl	8001594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158a:	f7ff fe9d 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_InitTick+0x54>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_InitTick+0x58>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f93b 	bl	800182e <HAL_SYSTICK_Config>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e00e      	b.n	80015e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d80a      	bhi.n	80015de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f000 f911 	bl	80017f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d4:	4a06      	ldr	r2, [pc, #24]	@ (80015f0 <HAL_InitTick+0x5c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000004 	.word	0x20000004
 80015ec:	2000000c 	.word	0x2000000c
 80015f0:	20000008 	.word	0x20000008

080015f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_IncTick+0x20>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_IncTick+0x24>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <HAL_IncTick+0x24>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	2000000c 	.word	0x2000000c
 8001618:	20000110 	.word	0x20000110

0800161c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b03      	ldr	r3, [pc, #12]	@ (8001630 <HAL_GetTick+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000110 	.word	0x20000110

08001634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff ffee 	bl	800161c <HAL_GetTick>
 8001640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164c:	d005      	beq.n	800165a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <HAL_Delay+0x44>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4413      	add	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800165a:	bf00      	nop
 800165c:	f7ff ffde 	bl	800161c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	429a      	cmp	r2, r3
 800166a:	d8f7      	bhi.n	800165c <HAL_Delay+0x28>
  {
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2000000c 	.word	0x2000000c

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <__NVIC_SetPriorityGrouping+0x40>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	@ (80016bc <__NVIC_SetPriorityGrouping+0x40>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00
 80016c0:	05fa0000 	.word	0x05fa0000

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	@ (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	@ (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	@ 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	@ 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017ac:	d301      	bcc.n	80017b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00f      	b.n	80017d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b2:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <SysTick_Config+0x40>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ba:	210f      	movs	r1, #15
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f7ff ff8e 	bl	80016e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <SysTick_Config+0x40>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ca:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <SysTick_Config+0x40>)
 80017cc:	2207      	movs	r2, #7
 80017ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	e000e010 	.word	0xe000e010

080017e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff47 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001808:	f7ff ff5c 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 800180c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	6978      	ldr	r0, [r7, #20]
 8001814:	f7ff ff8e 	bl	8001734 <NVIC_EncodePriority>
 8001818:	4602      	mov	r2, r0
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff5d 	bl	80016e0 <__NVIC_SetPriority>
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffb0 	bl	800179c <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	@ 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	e175      	b.n	8001b54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	429a      	cmp	r2, r3
 8001882:	f040 8164 	bne.w	8001b4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b01      	cmp	r3, #1
 8001890:	d005      	beq.n	800189e <HAL_GPIO_Init+0x56>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d130      	bne.n	8001900 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d4:	2201      	movs	r2, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 0201 	and.w	r2, r3, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b03      	cmp	r3, #3
 800190a:	d017      	beq.n	800193c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d123      	bne.n	8001990 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	08da      	lsrs	r2, r3, #3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3208      	adds	r2, #8
 800198a:	69b9      	ldr	r1, [r7, #24]
 800198c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80be 	beq.w	8001b4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	4b66      	ldr	r3, [pc, #408]	@ (8001b6c <HAL_GPIO_Init+0x324>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	4a65      	ldr	r2, [pc, #404]	@ (8001b6c <HAL_GPIO_Init+0x324>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019de:	4b63      	ldr	r3, [pc, #396]	@ (8001b6c <HAL_GPIO_Init+0x324>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019ea:	4a61      	ldr	r2, [pc, #388]	@ (8001b70 <HAL_GPIO_Init+0x328>)
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	3302      	adds	r3, #2
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	220f      	movs	r2, #15
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a58      	ldr	r2, [pc, #352]	@ (8001b74 <HAL_GPIO_Init+0x32c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d037      	beq.n	8001a86 <HAL_GPIO_Init+0x23e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a57      	ldr	r2, [pc, #348]	@ (8001b78 <HAL_GPIO_Init+0x330>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d031      	beq.n	8001a82 <HAL_GPIO_Init+0x23a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a56      	ldr	r2, [pc, #344]	@ (8001b7c <HAL_GPIO_Init+0x334>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d02b      	beq.n	8001a7e <HAL_GPIO_Init+0x236>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a55      	ldr	r2, [pc, #340]	@ (8001b80 <HAL_GPIO_Init+0x338>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d025      	beq.n	8001a7a <HAL_GPIO_Init+0x232>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a54      	ldr	r2, [pc, #336]	@ (8001b84 <HAL_GPIO_Init+0x33c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d01f      	beq.n	8001a76 <HAL_GPIO_Init+0x22e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a53      	ldr	r2, [pc, #332]	@ (8001b88 <HAL_GPIO_Init+0x340>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d019      	beq.n	8001a72 <HAL_GPIO_Init+0x22a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a52      	ldr	r2, [pc, #328]	@ (8001b8c <HAL_GPIO_Init+0x344>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0x226>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a51      	ldr	r2, [pc, #324]	@ (8001b90 <HAL_GPIO_Init+0x348>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_GPIO_Init+0x222>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a50      	ldr	r2, [pc, #320]	@ (8001b94 <HAL_GPIO_Init+0x34c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <HAL_GPIO_Init+0x21e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4f      	ldr	r2, [pc, #316]	@ (8001b98 <HAL_GPIO_Init+0x350>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_GPIO_Init+0x21a>
 8001a5e:	2309      	movs	r3, #9
 8001a60:	e012      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a62:	230a      	movs	r3, #10
 8001a64:	e010      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a66:	2308      	movs	r3, #8
 8001a68:	e00e      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a6e:	2306      	movs	r3, #6
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a86:	2300      	movs	r3, #0
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a98:	4935      	ldr	r1, [pc, #212]	@ (8001b70 <HAL_GPIO_Init+0x328>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8001b9c <HAL_GPIO_Init+0x354>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aca:	4a34      	ldr	r2, [pc, #208]	@ (8001b9c <HAL_GPIO_Init+0x354>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad0:	4b32      	ldr	r3, [pc, #200]	@ (8001b9c <HAL_GPIO_Init+0x354>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af4:	4a29      	ldr	r2, [pc, #164]	@ (8001b9c <HAL_GPIO_Init+0x354>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001afa:	4b28      	ldr	r3, [pc, #160]	@ (8001b9c <HAL_GPIO_Init+0x354>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b9c <HAL_GPIO_Init+0x354>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <HAL_GPIO_Init+0x354>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b48:	4a14      	ldr	r2, [pc, #80]	@ (8001b9c <HAL_GPIO_Init+0x354>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f ae86 	bls.w	8001868 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3724      	adds	r7, #36	@ 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40013800 	.word	0x40013800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40021400 	.word	0x40021400
 8001b8c:	40021800 	.word	0x40021800
 8001b90:	40021c00 	.word	0x40021c00
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40022400 	.word	0x40022400
 8001b9c:	40013c00 	.word	0x40013c00

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bbc:	e003      	b.n	8001bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bbe:	887b      	ldrh	r3, [r7, #2]
 8001bc0:	041a      	lsls	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	619a      	str	r2, [r3, #24]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e29b      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8087 	beq.w	8001d06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf8:	4b96      	ldr	r3, [pc, #600]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d00c      	beq.n	8001c1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c04:	4b93      	ldr	r3, [pc, #588]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d112      	bne.n	8001c36 <HAL_RCC_OscConfig+0x62>
 8001c10:	4b90      	ldr	r3, [pc, #576]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c1c:	d10b      	bne.n	8001c36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1e:	4b8d      	ldr	r3, [pc, #564]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d06c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x130>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d168      	bne.n	8001d04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e275      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x7a>
 8001c40:	4b84      	ldr	r3, [pc, #528]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a83      	ldr	r2, [pc, #524]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	e02e      	b.n	8001cac <HAL_RCC_OscConfig+0xd8>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x9c>
 8001c56:	4b7f      	ldr	r3, [pc, #508]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b7c      	ldr	r3, [pc, #496]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a7b      	ldr	r2, [pc, #492]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e01d      	b.n	8001cac <HAL_RCC_OscConfig+0xd8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0xc0>
 8001c7a:	4b76      	ldr	r3, [pc, #472]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a75      	ldr	r2, [pc, #468]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b73      	ldr	r3, [pc, #460]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a72      	ldr	r2, [pc, #456]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_OscConfig+0xd8>
 8001c94:	4b6f      	ldr	r3, [pc, #444]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a6e      	ldr	r2, [pc, #440]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b6c      	ldr	r3, [pc, #432]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a6b      	ldr	r2, [pc, #428]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d013      	beq.n	8001cdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fcb2 	bl	800161c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7ff fcae 	bl	800161c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	@ 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e229      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	4b61      	ldr	r3, [pc, #388]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0xe8>
 8001cda:	e014      	b.n	8001d06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fc9e 	bl	800161c <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fc9a 	bl	800161c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	@ 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e215      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	4b57      	ldr	r3, [pc, #348]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x110>
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d069      	beq.n	8001de6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d12:	4b50      	ldr	r3, [pc, #320]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d1e:	4b4d      	ldr	r3, [pc, #308]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d11c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x190>
 8001d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d116      	bne.n	8001d64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	4b47      	ldr	r3, [pc, #284]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <HAL_RCC_OscConfig+0x17a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e1e9      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4e:	4b41      	ldr	r3, [pc, #260]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	493d      	ldr	r1, [pc, #244]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	e040      	b.n	8001de6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d023      	beq.n	8001db4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6c:	4b39      	ldr	r3, [pc, #228]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a38      	ldr	r2, [pc, #224]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff fc50 	bl	800161c <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff fc4c 	bl	800161c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1c7      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d92:	4b30      	ldr	r3, [pc, #192]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4929      	ldr	r1, [pc, #164]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
 8001db2:	e018      	b.n	8001de6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db4:	4b27      	ldr	r3, [pc, #156]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a26      	ldr	r2, [pc, #152]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fc2c 	bl	800161c <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fc28 	bl	800161c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1a3      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	4b1e      	ldr	r3, [pc, #120]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d038      	beq.n	8001e64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d019      	beq.n	8001e2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b16      	ldr	r3, [pc, #88]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dfe:	4a15      	ldr	r2, [pc, #84]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e06:	f7ff fc09 	bl	800161c <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fc05 	bl	800161c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e180      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x23a>
 8001e2c:	e01a      	b.n	8001e64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2e:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e32:	4a08      	ldr	r2, [pc, #32]	@ (8001e54 <HAL_RCC_OscConfig+0x280>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fbef 	bl	800161c <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e42:	f7ff fbeb 	bl	800161c <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d903      	bls.n	8001e58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e166      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
 8001e54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e58:	4b92      	ldr	r3, [pc, #584]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ee      	bne.n	8001e42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80a4 	beq.w	8001fba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e72:	4b8c      	ldr	r3, [pc, #560]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10d      	bne.n	8001e9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b89      	ldr	r3, [pc, #548]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	4a88      	ldr	r2, [pc, #544]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8a:	4b86      	ldr	r3, [pc, #536]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e96:	2301      	movs	r3, #1
 8001e98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e9a:	4b83      	ldr	r3, [pc, #524]	@ (80020a8 <HAL_RCC_OscConfig+0x4d4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d118      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ea6:	4b80      	ldr	r3, [pc, #512]	@ (80020a8 <HAL_RCC_OscConfig+0x4d4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a7f      	ldr	r2, [pc, #508]	@ (80020a8 <HAL_RCC_OscConfig+0x4d4>)
 8001eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fbb3 	bl	800161c <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eba:	f7ff fbaf 	bl	800161c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b64      	cmp	r3, #100	@ 0x64
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e12a      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ecc:	4b76      	ldr	r3, [pc, #472]	@ (80020a8 <HAL_RCC_OscConfig+0x4d4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x31a>
 8001ee0:	4b70      	ldr	r3, [pc, #448]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee4:	4a6f      	ldr	r2, [pc, #444]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eec:	e02d      	b.n	8001f4a <HAL_RCC_OscConfig+0x376>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x33c>
 8001ef6:	4b6b      	ldr	r3, [pc, #428]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efa:	4a6a      	ldr	r2, [pc, #424]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f02:	4b68      	ldr	r3, [pc, #416]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f06:	4a67      	ldr	r2, [pc, #412]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f0e:	e01c      	b.n	8001f4a <HAL_RCC_OscConfig+0x376>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d10c      	bne.n	8001f32 <HAL_RCC_OscConfig+0x35e>
 8001f18:	4b62      	ldr	r3, [pc, #392]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1c:	4a61      	ldr	r2, [pc, #388]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001f1e:	f043 0304 	orr.w	r3, r3, #4
 8001f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f24:	4b5f      	ldr	r3, [pc, #380]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f28:	4a5e      	ldr	r2, [pc, #376]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f30:	e00b      	b.n	8001f4a <HAL_RCC_OscConfig+0x376>
 8001f32:	4b5c      	ldr	r3, [pc, #368]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f36:	4a5b      	ldr	r2, [pc, #364]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f3e:	4b59      	ldr	r3, [pc, #356]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f42:	4a58      	ldr	r2, [pc, #352]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001f44:	f023 0304 	bic.w	r3, r3, #4
 8001f48:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d015      	beq.n	8001f7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f52:	f7ff fb63 	bl	800161c <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7ff fb5f 	bl	800161c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e0d8      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f70:	4b4c      	ldr	r3, [pc, #304]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ee      	beq.n	8001f5a <HAL_RCC_OscConfig+0x386>
 8001f7c:	e014      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fb4d 	bl	800161c <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7ff fb49 	bl	800161c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0c2      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9c:	4b41      	ldr	r3, [pc, #260]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1ee      	bne.n	8001f86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d105      	bne.n	8001fba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fae:	4b3d      	ldr	r3, [pc, #244]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	4a3c      	ldr	r2, [pc, #240]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001fb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fb8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80ae 	beq.w	8002120 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc4:	4b37      	ldr	r3, [pc, #220]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d06d      	beq.n	80020ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d14b      	bne.n	8002070 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd8:	4b32      	ldr	r3, [pc, #200]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a31      	ldr	r2, [pc, #196]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8001fde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fb1a 	bl	800161c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7ff fb16 	bl	800161c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e091      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffe:	4b29      	ldr	r3, [pc, #164]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69da      	ldr	r2, [r3, #28]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	085b      	lsrs	r3, r3, #1
 8002022:	3b01      	subs	r3, #1
 8002024:	041b      	lsls	r3, r3, #16
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	061b      	lsls	r3, r3, #24
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	071b      	lsls	r3, r3, #28
 8002036:	491b      	ldr	r1, [pc, #108]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203c:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a18      	ldr	r2, [pc, #96]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8002042:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7ff fae8 	bl	800161c <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002050:	f7ff fae4 	bl	800161c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e05f      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002062:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x47c>
 800206e:	e057      	b.n	8002120 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002070:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0b      	ldr	r2, [pc, #44]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8002076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800207a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7ff face 	bl	800161c <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002084:	f7ff faca 	bl	800161c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e045      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002096:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <HAL_RCC_OscConfig+0x4d0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x4b0>
 80020a2:	e03d      	b.n	8002120 <HAL_RCC_OscConfig+0x54c>
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80020ac:	4b1f      	ldr	r3, [pc, #124]	@ (800212c <HAL_RCC_OscConfig+0x558>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d030      	beq.n	800211c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d129      	bne.n	800211c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d122      	bne.n	800211c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020dc:	4013      	ands	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d119      	bne.n	800211c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	3b01      	subs	r3, #1
 80020f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d10f      	bne.n	800211c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002106:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002108:	429a      	cmp	r2, r3
 800210a:	d107      	bne.n	800211c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800

08002130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0d0      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002148:	4b6a      	ldr	r3, [pc, #424]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d910      	bls.n	8002178 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b67      	ldr	r3, [pc, #412]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 020f 	bic.w	r2, r3, #15
 800215e:	4965      	ldr	r1, [pc, #404]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b63      	ldr	r3, [pc, #396]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0b8      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002190:	4b59      	ldr	r3, [pc, #356]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4a58      	ldr	r2, [pc, #352]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002196:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800219a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a8:	4b53      	ldr	r3, [pc, #332]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4a52      	ldr	r2, [pc, #328]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b4:	4b50      	ldr	r3, [pc, #320]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	494d      	ldr	r1, [pc, #308]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d040      	beq.n	8002254 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d107      	bne.n	80021ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b47      	ldr	r3, [pc, #284]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d115      	bne.n	8002212 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e07f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f2:	4b41      	ldr	r3, [pc, #260]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e073      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	4b3d      	ldr	r3, [pc, #244]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e06b      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002212:	4b39      	ldr	r3, [pc, #228]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f023 0203 	bic.w	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4936      	ldr	r1, [pc, #216]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002224:	f7ff f9fa 	bl	800161c <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222a:	e00a      	b.n	8002242 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222c:	f7ff f9f6 	bl	800161c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e053      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	4b2d      	ldr	r3, [pc, #180]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 020c 	and.w	r2, r3, #12
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	429a      	cmp	r2, r3
 8002252:	d1eb      	bne.n	800222c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002254:	4b27      	ldr	r3, [pc, #156]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d210      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b24      	ldr	r3, [pc, #144]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 020f 	bic.w	r2, r3, #15
 800226a:	4922      	ldr	r1, [pc, #136]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e032      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002290:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4916      	ldr	r1, [pc, #88]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ae:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	490e      	ldr	r1, [pc, #56]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022c2:	f000 f821 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	490a      	ldr	r1, [pc, #40]	@ (80022fc <HAL_RCC_ClockConfig+0x1cc>)
 80022d4:	5ccb      	ldrb	r3, [r1, r3]
 80022d6:	fa22 f303 	lsr.w	r3, r2, r3
 80022da:	4a09      	ldr	r2, [pc, #36]	@ (8002300 <HAL_RCC_ClockConfig+0x1d0>)
 80022dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022de:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <HAL_RCC_ClockConfig+0x1d4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f956 	bl	8001594 <HAL_InitTick>

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023c00 	.word	0x40023c00
 80022f8:	40023800 	.word	0x40023800
 80022fc:	0800329c 	.word	0x0800329c
 8002300:	20000004 	.word	0x20000004
 8002304:	20000008 	.word	0x20000008

08002308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800230c:	b094      	sub	sp, #80	@ 0x50
 800230e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	647b      	str	r3, [r7, #68]	@ 0x44
 8002314:	2300      	movs	r3, #0
 8002316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002318:	2300      	movs	r3, #0
 800231a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002320:	4b79      	ldr	r3, [pc, #484]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b08      	cmp	r3, #8
 800232a:	d00d      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x40>
 800232c:	2b08      	cmp	r3, #8
 800232e:	f200 80e1 	bhi.w	80024f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x34>
 8002336:	2b04      	cmp	r3, #4
 8002338:	d003      	beq.n	8002342 <HAL_RCC_GetSysClockFreq+0x3a>
 800233a:	e0db      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800233c:	4b73      	ldr	r3, [pc, #460]	@ (800250c <HAL_RCC_GetSysClockFreq+0x204>)
 800233e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002340:	e0db      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002342:	4b72      	ldr	r3, [pc, #456]	@ (800250c <HAL_RCC_GetSysClockFreq+0x204>)
 8002344:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002346:	e0d8      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002348:	4b6f      	ldr	r3, [pc, #444]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002350:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002352:	4b6d      	ldr	r3, [pc, #436]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d063      	beq.n	8002426 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235e:	4b6a      	ldr	r3, [pc, #424]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	099b      	lsrs	r3, r3, #6
 8002364:	2200      	movs	r2, #0
 8002366:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002368:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800236a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800236c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002370:	633b      	str	r3, [r7, #48]	@ 0x30
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	@ 0x34
 8002376:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800237a:	4622      	mov	r2, r4
 800237c:	462b      	mov	r3, r5
 800237e:	f04f 0000 	mov.w	r0, #0
 8002382:	f04f 0100 	mov.w	r1, #0
 8002386:	0159      	lsls	r1, r3, #5
 8002388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800238c:	0150      	lsls	r0, r2, #5
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4621      	mov	r1, r4
 8002394:	1a51      	subs	r1, r2, r1
 8002396:	6139      	str	r1, [r7, #16]
 8002398:	4629      	mov	r1, r5
 800239a:	eb63 0301 	sbc.w	r3, r3, r1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023ac:	4659      	mov	r1, fp
 80023ae:	018b      	lsls	r3, r1, #6
 80023b0:	4651      	mov	r1, sl
 80023b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023b6:	4651      	mov	r1, sl
 80023b8:	018a      	lsls	r2, r1, #6
 80023ba:	4651      	mov	r1, sl
 80023bc:	ebb2 0801 	subs.w	r8, r2, r1
 80023c0:	4659      	mov	r1, fp
 80023c2:	eb63 0901 	sbc.w	r9, r3, r1
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023da:	4690      	mov	r8, r2
 80023dc:	4699      	mov	r9, r3
 80023de:	4623      	mov	r3, r4
 80023e0:	eb18 0303 	adds.w	r3, r8, r3
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	462b      	mov	r3, r5
 80023e8:	eb49 0303 	adc.w	r3, r9, r3
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023fa:	4629      	mov	r1, r5
 80023fc:	028b      	lsls	r3, r1, #10
 80023fe:	4621      	mov	r1, r4
 8002400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002404:	4621      	mov	r1, r4
 8002406:	028a      	lsls	r2, r1, #10
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800240e:	2200      	movs	r2, #0
 8002410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002412:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002414:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002418:	f7fd ff0e 	bl	8000238 <__aeabi_uldivmod>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4613      	mov	r3, r2
 8002422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002424:	e058      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002426:	4b38      	ldr	r3, [pc, #224]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	099b      	lsrs	r3, r3, #6
 800242c:	2200      	movs	r2, #0
 800242e:	4618      	mov	r0, r3
 8002430:	4611      	mov	r1, r2
 8002432:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002436:	623b      	str	r3, [r7, #32]
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
 800243c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002440:	4642      	mov	r2, r8
 8002442:	464b      	mov	r3, r9
 8002444:	f04f 0000 	mov.w	r0, #0
 8002448:	f04f 0100 	mov.w	r1, #0
 800244c:	0159      	lsls	r1, r3, #5
 800244e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002452:	0150      	lsls	r0, r2, #5
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4641      	mov	r1, r8
 800245a:	ebb2 0a01 	subs.w	sl, r2, r1
 800245e:	4649      	mov	r1, r9
 8002460:	eb63 0b01 	sbc.w	fp, r3, r1
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002470:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002474:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002478:	ebb2 040a 	subs.w	r4, r2, sl
 800247c:	eb63 050b 	sbc.w	r5, r3, fp
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	00eb      	lsls	r3, r5, #3
 800248a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800248e:	00e2      	lsls	r2, r4, #3
 8002490:	4614      	mov	r4, r2
 8002492:	461d      	mov	r5, r3
 8002494:	4643      	mov	r3, r8
 8002496:	18e3      	adds	r3, r4, r3
 8002498:	603b      	str	r3, [r7, #0]
 800249a:	464b      	mov	r3, r9
 800249c:	eb45 0303 	adc.w	r3, r5, r3
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ae:	4629      	mov	r1, r5
 80024b0:	028b      	lsls	r3, r1, #10
 80024b2:	4621      	mov	r1, r4
 80024b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024b8:	4621      	mov	r1, r4
 80024ba:	028a      	lsls	r2, r1, #10
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024c2:	2200      	movs	r2, #0
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	61fa      	str	r2, [r7, #28]
 80024c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024cc:	f7fd feb4 	bl	8000238 <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4613      	mov	r3, r2
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80024d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	3301      	adds	r3, #1
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80024e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024f2:	e002      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f4:	4b05      	ldr	r3, [pc, #20]	@ (800250c <HAL_RCC_GetSysClockFreq+0x204>)
 80024f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3750      	adds	r7, #80	@ 0x50
 8002500:	46bd      	mov	sp, r7
 8002502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	00f42400 	.word	0x00f42400

08002510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e09d      	b.n	800265e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	2b00      	cmp	r3, #0
 8002528:	d108      	bne.n	800253c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002532:	d009      	beq.n	8002548 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
 800253a:	e005      	b.n	8002548 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe fed4 	bl	8001310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800257e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002588:	d902      	bls.n	8002590 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	e002      	b.n	8002596 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002594:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800259e:	d007      	beq.n	80025b0 <HAL_SPI_Init+0xa0>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025a8:	d002      	beq.n	80025b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f2:	ea42 0103 	orr.w	r1, r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	0c1b      	lsrs	r3, r3, #16
 800260c:	f003 0204 	and.w	r2, r3, #4
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800262c:	ea42 0103 	orr.w	r1, r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69da      	ldr	r2, [r3, #28]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800264c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b088      	sub	sp, #32
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	4613      	mov	r3, r2
 8002674:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_SPI_Transmit+0x22>
 8002684:	2302      	movs	r3, #2
 8002686:	e15f      	b.n	8002948 <HAL_SPI_Transmit+0x2e2>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002690:	f7fe ffc4 	bl	800161c <HAL_GetTick>
 8002694:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d002      	beq.n	80026ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
 80026a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026aa:	e148      	b.n	800293e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_SPI_Transmit+0x52>
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026bc:	e13f      	b.n	800293e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2203      	movs	r2, #3
 80026c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	88fa      	ldrh	r2, [r7, #6]
 80026d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	88fa      	ldrh	r2, [r7, #6]
 80026dc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002708:	d10f      	bne.n	800272a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002718:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002728:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002734:	2b40      	cmp	r3, #64	@ 0x40
 8002736:	d007      	beq.n	8002748 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002746:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002750:	d94f      	bls.n	80027f2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_SPI_Transmit+0xfa>
 800275a:	8afb      	ldrh	r3, [r7, #22]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d142      	bne.n	80027e6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002764:	881a      	ldrh	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002770:	1c9a      	adds	r2, r3, #2
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800277a:	b29b      	uxth	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002784:	e02f      	b.n	80027e6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b02      	cmp	r3, #2
 8002792:	d112      	bne.n	80027ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002798:	881a      	ldrh	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a4:	1c9a      	adds	r2, r3, #2
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027b8:	e015      	b.n	80027e6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ba:	f7fe ff2f 	bl	800161c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d803      	bhi.n	80027d2 <HAL_SPI_Transmit+0x16c>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d102      	bne.n	80027d8 <HAL_SPI_Transmit+0x172>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d106      	bne.n	80027e6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80027e4:	e0ab      	b.n	800293e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ca      	bne.n	8002786 <HAL_SPI_Transmit+0x120>
 80027f0:	e080      	b.n	80028f4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_SPI_Transmit+0x19a>
 80027fa:	8afb      	ldrh	r3, [r7, #22]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d174      	bne.n	80028ea <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d912      	bls.n	8002830 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280e:	881a      	ldrh	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281a:	1c9a      	adds	r2, r3, #2
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b02      	subs	r3, #2
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800282e:	e05c      	b.n	80028ea <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	7812      	ldrb	r2, [r2, #0]
 800283c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002856:	e048      	b.n	80028ea <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b02      	cmp	r3, #2
 8002864:	d12b      	bne.n	80028be <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d912      	bls.n	8002896 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002880:	1c9a      	adds	r2, r3, #2
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b02      	subs	r3, #2
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002894:	e029      	b.n	80028ea <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	330c      	adds	r3, #12
 80028a0:	7812      	ldrb	r2, [r2, #0]
 80028a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80028bc:	e015      	b.n	80028ea <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028be:	f7fe fead 	bl	800161c <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d803      	bhi.n	80028d6 <HAL_SPI_Transmit+0x270>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d102      	bne.n	80028dc <HAL_SPI_Transmit+0x276>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d106      	bne.n	80028ea <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80028e8:	e029      	b.n	800293e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1b1      	bne.n	8002858 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	6839      	ldr	r1, [r7, #0]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fb69 	bl	8002fd0 <SPI_EndRxTxTransaction>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e003      	b.n	800293e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002946:	7ffb      	ldrb	r3, [r7, #31]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	@ 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800295e:	2301      	movs	r3, #1
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_SPI_TransmitReceive+0x26>
 8002972:	2302      	movs	r3, #2
 8002974:	e20a      	b.n	8002d8c <HAL_SPI_TransmitReceive+0x43c>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800297e:	f7fe fe4d 	bl	800161c <HAL_GetTick>
 8002982:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800298a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002996:	887b      	ldrh	r3, [r7, #2]
 8002998:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800299a:	7efb      	ldrb	r3, [r7, #27]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d00e      	beq.n	80029be <HAL_SPI_TransmitReceive+0x6e>
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029a6:	d106      	bne.n	80029b6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <HAL_SPI_TransmitReceive+0x66>
 80029b0:	7efb      	ldrb	r3, [r7, #27]
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d003      	beq.n	80029be <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
 80029b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80029bc:	e1e0      	b.n	8002d80 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_SPI_TransmitReceive+0x80>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_SPI_TransmitReceive+0x80>
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d103      	bne.n	80029d8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80029d6:	e1d3      	b.n	8002d80 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d003      	beq.n	80029ec <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2205      	movs	r2, #5
 80029e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	887a      	ldrh	r2, [r7, #2]
 8002a12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a2e:	d802      	bhi.n	8002a36 <HAL_SPI_TransmitReceive+0xe6>
 8002a30:	8a3b      	ldrh	r3, [r7, #16]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d908      	bls.n	8002a48 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	e007      	b.n	8002a58 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a56:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a62:	2b40      	cmp	r3, #64	@ 0x40
 8002a64:	d007      	beq.n	8002a76 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a7e:	f240 8081 	bls.w	8002b84 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x140>
 8002a8a:	8a7b      	ldrh	r3, [r7, #18]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d16d      	bne.n	8002b6c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a94:	881a      	ldrh	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa0:	1c9a      	adds	r2, r3, #2
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab4:	e05a      	b.n	8002b6c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d11b      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x1ac>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <HAL_SPI_TransmitReceive+0x1ac>
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d113      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad8:	881a      	ldrh	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae4:	1c9a      	adds	r2, r3, #2
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d11c      	bne.n	8002b44 <HAL_SPI_TransmitReceive+0x1f4>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	b292      	uxth	r2, r2
 8002b22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	1c9a      	adds	r2, r3, #2
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b40:	2301      	movs	r3, #1
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b44:	f7fe fd6a 	bl	800161c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d80b      	bhi.n	8002b6c <HAL_SPI_TransmitReceive+0x21c>
 8002b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5a:	d007      	beq.n	8002b6c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002b6a:	e109      	b.n	8002d80 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d19f      	bne.n	8002ab6 <HAL_SPI_TransmitReceive+0x166>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d199      	bne.n	8002ab6 <HAL_SPI_TransmitReceive+0x166>
 8002b82:	e0e3      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_SPI_TransmitReceive+0x244>
 8002b8c:	8a7b      	ldrh	r3, [r7, #18]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	f040 80cf 	bne.w	8002d32 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d912      	bls.n	8002bc4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba2:	881a      	ldrh	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bae:	1c9a      	adds	r2, r3, #2
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b02      	subs	r3, #2
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002bc2:	e0b6      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	7812      	ldrb	r2, [r2, #0]
 8002bd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bea:	e0a2      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d134      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x314>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d02f      	beq.n	8002c64 <HAL_SPI_TransmitReceive+0x314>
 8002c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d12c      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d912      	bls.n	8002c3a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c18:	881a      	ldrh	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c24:	1c9a      	adds	r2, r3, #2
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b02      	subs	r3, #2
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c38:	e012      	b.n	8002c60 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	330c      	adds	r3, #12
 8002c44:	7812      	ldrb	r2, [r2, #0]
 8002c46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d148      	bne.n	8002d04 <HAL_SPI_TransmitReceive+0x3b4>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d042      	beq.n	8002d04 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d923      	bls.n	8002cd2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	b292      	uxth	r2, r2
 8002c96:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	1c9a      	adds	r2, r3, #2
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b02      	subs	r3, #2
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d81f      	bhi.n	8002d00 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	e016      	b.n	8002d00 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f103 020c 	add.w	r2, r3, #12
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d00:	2301      	movs	r3, #1
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d04:	f7fe fc8a 	bl	800161c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d803      	bhi.n	8002d1c <HAL_SPI_TransmitReceive+0x3cc>
 8002d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d102      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x3d2>
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d107      	bne.n	8002d32 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002d30:	e026      	b.n	8002d80 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f47f af57 	bne.w	8002bec <HAL_SPI_TransmitReceive+0x29c>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f47f af50 	bne.w	8002bec <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f93d 	bl	8002fd0 <SPI_EndRxTxTransaction>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d76:	e003      	b.n	8002d80 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002d88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3728      	adds	r7, #40	@ 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002da4:	f7fe fc3a 	bl	800161c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	4413      	add	r3, r2
 8002db2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002db4:	f7fe fc32 	bl	800161c <HAL_GetTick>
 8002db8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dba:	4b39      	ldr	r3, [pc, #228]	@ (8002ea0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	015b      	lsls	r3, r3, #5
 8002dc0:	0d1b      	lsrs	r3, r3, #20
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	fb02 f303 	mul.w	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dca:	e054      	b.n	8002e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d050      	beq.n	8002e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dd4:	f7fe fc22 	bl	800161c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d902      	bls.n	8002dea <SPI_WaitFlagStateUntilTimeout+0x56>
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d13d      	bne.n	8002e66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002df8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e02:	d111      	bne.n	8002e28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e0c:	d004      	beq.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e16:	d107      	bne.n	8002e28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e30:	d10f      	bne.n	8002e52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e017      	b.n	8002e96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	bf0c      	ite	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	2300      	movne	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d19b      	bne.n	8002dcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000004 	.word	0x20000004

08002ea4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	@ 0x28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002eb6:	f7fe fbb1 	bl	800161c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002ec6:	f7fe fba9 	bl	800161c <HAL_GetTick>
 8002eca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002ed4:	4b3d      	ldr	r3, [pc, #244]	@ (8002fcc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00da      	lsls	r2, r3, #3
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	0d1b      	lsrs	r3, r3, #20
 8002ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002eec:	e060      	b.n	8002fb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002ef4:	d107      	bne.n	8002f06 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d104      	bne.n	8002f06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d050      	beq.n	8002fb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f0e:	f7fe fb85 	bl	800161c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d902      	bls.n	8002f24 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d13d      	bne.n	8002fa0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f3c:	d111      	bne.n	8002f62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f46:	d004      	beq.n	8002f52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f50:	d107      	bne.n	8002f62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f6a:	d10f      	bne.n	8002f8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e010      	b.n	8002fc2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d196      	bne.n	8002eee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3728      	adds	r7, #40	@ 0x28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000004 	.word	0x20000004

08002fd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f7ff ff5b 	bl	8002ea4 <SPI_WaitFifoStateUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff8:	f043 0220 	orr.w	r2, r3, #32
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e046      	b.n	8003092 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003004:	4b25      	ldr	r3, [pc, #148]	@ (800309c <SPI_EndRxTxTransaction+0xcc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a25      	ldr	r2, [pc, #148]	@ (80030a0 <SPI_EndRxTxTransaction+0xd0>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0d5b      	lsrs	r3, r3, #21
 8003010:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003014:	fb02 f303 	mul.w	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003022:	d112      	bne.n	800304a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2200      	movs	r2, #0
 800302c:	2180      	movs	r1, #128	@ 0x80
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7ff feb0 	bl	8002d94 <SPI_WaitFlagStateUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d016      	beq.n	8003068 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303e:	f043 0220 	orr.w	r2, r3, #32
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e023      	b.n	8003092 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	3b01      	subs	r3, #1
 8003054:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003060:	2b80      	cmp	r3, #128	@ 0x80
 8003062:	d0f2      	beq.n	800304a <SPI_EndRxTxTransaction+0x7a>
 8003064:	e000      	b.n	8003068 <SPI_EndRxTxTransaction+0x98>
        break;
 8003066:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2200      	movs	r2, #0
 8003070:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f7ff ff15 	bl	8002ea4 <SPI_WaitFifoStateUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e000      	b.n	8003092 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000004 	.word	0x20000004
 80030a0:	165e9f81 	.word	0x165e9f81

080030a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80030a8:	4904      	ldr	r1, [pc, #16]	@ (80030bc <MX_FATFS_Init+0x18>)
 80030aa:	4805      	ldr	r0, [pc, #20]	@ (80030c0 <MX_FATFS_Init+0x1c>)
 80030ac:	f000 f8ae 	bl	800320c <FATFS_LinkDriver>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b03      	ldr	r3, [pc, #12]	@ (80030c4 <MX_FATFS_Init+0x20>)
 80030b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000118 	.word	0x20000118
 80030c0:	20000010 	.word	0x20000010
 80030c4:	20000114 	.word	0x20000114

080030c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd fbdf 	bl	8000898 <SD_disk_initialize>
 80030da:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status(pdrv);
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd fcb7 	bl	8000a64 <SD_disk_status>
 80030f6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4603      	mov	r3, r0
 800310e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003110:	7bf8      	ldrb	r0, [r7, #15]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	f7fd fcba 	bl	8000a90 <SD_disk_read>
 800311c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	4603      	mov	r3, r0
 8003134:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003136:	7bf8      	ldrb	r0, [r7, #15]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	f7fd fd11 	bl	8000b64 <SD_disk_write>
 8003142:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	603a      	str	r2, [r7, #0]
 8003156:	71fb      	strb	r3, [r7, #7]
 8003158:	460b      	mov	r3, r1
 800315a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800315c:	79b9      	ldrb	r1, [r7, #6]
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd fd82 	bl	8000c6c <SD_disk_ioctl>
 8003168:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800318a:	4b1f      	ldr	r3, [pc, #124]	@ (8003208 <FATFS_LinkDriverEx+0x94>)
 800318c:	7a5b      	ldrb	r3, [r3, #9]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d131      	bne.n	80031f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003194:	4b1c      	ldr	r3, [pc, #112]	@ (8003208 <FATFS_LinkDriverEx+0x94>)
 8003196:	7a5b      	ldrb	r3, [r3, #9]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	4b1a      	ldr	r3, [pc, #104]	@ (8003208 <FATFS_LinkDriverEx+0x94>)
 800319e:	2100      	movs	r1, #0
 80031a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80031a2:	4b19      	ldr	r3, [pc, #100]	@ (8003208 <FATFS_LinkDriverEx+0x94>)
 80031a4:	7a5b      	ldrb	r3, [r3, #9]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	4a17      	ldr	r2, [pc, #92]	@ (8003208 <FATFS_LinkDriverEx+0x94>)
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80031b2:	4b15      	ldr	r3, [pc, #84]	@ (8003208 <FATFS_LinkDriverEx+0x94>)
 80031b4:	7a5b      	ldrb	r3, [r3, #9]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b13      	ldr	r3, [pc, #76]	@ (8003208 <FATFS_LinkDriverEx+0x94>)
 80031bc:	4413      	add	r3, r2
 80031be:	79fa      	ldrb	r2, [r7, #7]
 80031c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80031c2:	4b11      	ldr	r3, [pc, #68]	@ (8003208 <FATFS_LinkDriverEx+0x94>)
 80031c4:	7a5b      	ldrb	r3, [r3, #9]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	b2d1      	uxtb	r1, r2
 80031cc:	4a0e      	ldr	r2, [pc, #56]	@ (8003208 <FATFS_LinkDriverEx+0x94>)
 80031ce:	7251      	strb	r1, [r2, #9]
 80031d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80031d2:	7dbb      	ldrb	r3, [r7, #22]
 80031d4:	3330      	adds	r3, #48	@ 0x30
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	3301      	adds	r3, #1
 80031e0:	223a      	movs	r2, #58	@ 0x3a
 80031e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3302      	adds	r3, #2
 80031e8:	222f      	movs	r2, #47	@ 0x2f
 80031ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3303      	adds	r3, #3
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	2000011c 	.word	0x2000011c

0800320c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	6839      	ldr	r1, [r7, #0]
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff ffaa 	bl	8003174 <FATFS_LinkDriverEx>
 8003220:	4603      	mov	r3, r0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <memset>:
 800322a:	4402      	add	r2, r0
 800322c:	4603      	mov	r3, r0
 800322e:	4293      	cmp	r3, r2
 8003230:	d100      	bne.n	8003234 <memset+0xa>
 8003232:	4770      	bx	lr
 8003234:	f803 1b01 	strb.w	r1, [r3], #1
 8003238:	e7f9      	b.n	800322e <memset+0x4>
	...

0800323c <__libc_init_array>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	4d0d      	ldr	r5, [pc, #52]	@ (8003274 <__libc_init_array+0x38>)
 8003240:	4c0d      	ldr	r4, [pc, #52]	@ (8003278 <__libc_init_array+0x3c>)
 8003242:	1b64      	subs	r4, r4, r5
 8003244:	10a4      	asrs	r4, r4, #2
 8003246:	2600      	movs	r6, #0
 8003248:	42a6      	cmp	r6, r4
 800324a:	d109      	bne.n	8003260 <__libc_init_array+0x24>
 800324c:	4d0b      	ldr	r5, [pc, #44]	@ (800327c <__libc_init_array+0x40>)
 800324e:	4c0c      	ldr	r4, [pc, #48]	@ (8003280 <__libc_init_array+0x44>)
 8003250:	f000 f818 	bl	8003284 <_init>
 8003254:	1b64      	subs	r4, r4, r5
 8003256:	10a4      	asrs	r4, r4, #2
 8003258:	2600      	movs	r6, #0
 800325a:	42a6      	cmp	r6, r4
 800325c:	d105      	bne.n	800326a <__libc_init_array+0x2e>
 800325e:	bd70      	pop	{r4, r5, r6, pc}
 8003260:	f855 3b04 	ldr.w	r3, [r5], #4
 8003264:	4798      	blx	r3
 8003266:	3601      	adds	r6, #1
 8003268:	e7ee      	b.n	8003248 <__libc_init_array+0xc>
 800326a:	f855 3b04 	ldr.w	r3, [r5], #4
 800326e:	4798      	blx	r3
 8003270:	3601      	adds	r6, #1
 8003272:	e7f2      	b.n	800325a <__libc_init_array+0x1e>
 8003274:	080032b4 	.word	0x080032b4
 8003278:	080032b4 	.word	0x080032b4
 800327c:	080032b4 	.word	0x080032b4
 8003280:	080032b8 	.word	0x080032b8

08003284 <_init>:
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	bf00      	nop
 8003288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328a:	bc08      	pop	{r3}
 800328c:	469e      	mov	lr, r3
 800328e:	4770      	bx	lr

08003290 <_fini>:
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	bf00      	nop
 8003294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003296:	bc08      	pop	{r3}
 8003298:	469e      	mov	lr, r3
 800329a:	4770      	bx	lr
