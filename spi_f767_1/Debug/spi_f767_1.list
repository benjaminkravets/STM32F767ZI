
spi_f767_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d64  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006f64  08006f64  00007f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007010  08007010  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007010  08007010  00008010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007018  08007018  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007018  08007018  00008018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800701c  0800701c  0000801c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007020  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cb0  20000060  08007080  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d10  08007080  00009d10  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001238a  00000000  00000000  0000908e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb7  00000000  00000000  0001b418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0001dfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad4  00000000  00000000  0001ee00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a7e  00000000  00000000  0001f8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bfa  00000000  00000000  00022352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7c61  00000000  00000000  00032f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012abad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf0  00000000  00000000  0012abf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0012e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08006f4c 	.word	0x08006f4c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08006f4c 	.word	0x08006f4c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_SPI_RxCpltCallback>:
#define TRANSFER_SIZE 64

uint8_t transfer_bytes[TRANSFER_SIZE] = {0};

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	//HAL_SPI_Receive_IT(&hspi2, transfer_bytes, TRANSFER_SIZE);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000538:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <HAL_SPI_RxCpltCallback+0x24>)
 800053e:	f001 faae 	bl	8001a9e <HAL_GPIO_TogglePin>
	osSemaphoreRelease(spi_dataHandle);
 8000542:	4b05      	ldr	r3, [pc, #20]	@ (8000558 <HAL_SPI_RxCpltCallback+0x28>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4618      	mov	r0, r3
 8000548:	f003 fa76 	bl	8003a38 <osSemaphoreRelease>

}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40020400 	.word	0x40020400
 8000558:	200001a8 	.word	0x200001a8

0800055c <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_DMA(&hspi2, transfer_bytes, TRANSFER_SIZE);
 8000564:	2240      	movs	r2, #64	@ 0x40
 8000566:	4904      	ldr	r1, [pc, #16]	@ (8000578 <HAL_SPI_TxCpltCallback+0x1c>)
 8000568:	4804      	ldr	r0, [pc, #16]	@ (800057c <HAL_SPI_TxCpltCallback+0x20>)
 800056a:	f002 f8f1 	bl	8002750 <HAL_SPI_Receive_DMA>

}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200001ac 	.word	0x200001ac
 800057c:	2000007c 	.word	0x2000007c

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fbbd 	bl	8000d02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f83e 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f8f6 	bl	800077c <MX_GPIO_Init>
  MX_DMA_Init();
 8000590:	f000 f8ce 	bl	8000730 <MX_DMA_Init>
  MX_SPI2_Init();
 8000594:	f000 f894 	bl	80006c0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_DMA(&hspi2, transfer_bytes, TRANSFER_SIZE);
 8000598:	2240      	movs	r2, #64	@ 0x40
 800059a:	4911      	ldr	r1, [pc, #68]	@ (80005e0 <main+0x60>)
 800059c:	4811      	ldr	r0, [pc, #68]	@ (80005e4 <main+0x64>)
 800059e:	f002 f8d7 	bl	8002750 <HAL_SPI_Receive_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a2:	f003 f809 	bl	80035b8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of spi_data */
  spi_dataHandle = osSemaphoreNew(1, 0, &spi_data_attributes);
 80005a6:	4a10      	ldr	r2, [pc, #64]	@ (80005e8 <main+0x68>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	2001      	movs	r0, #1
 80005ac:	f003 f942 	bl	8003834 <osSemaphoreNew>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a0e      	ldr	r2, [pc, #56]	@ (80005ec <main+0x6c>)
 80005b4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b6:	4a0e      	ldr	r2, [pc, #56]	@ (80005f0 <main+0x70>)
 80005b8:	2100      	movs	r1, #0
 80005ba:	480e      	ldr	r0, [pc, #56]	@ (80005f4 <main+0x74>)
 80005bc:	f003 f866 	bl	800368c <osThreadNew>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a0d      	ldr	r2, [pc, #52]	@ (80005f8 <main+0x78>)
 80005c4:	6013      	str	r3, [r2, #0]

  /* creation of spi_handler */
  spi_handlerHandle = osThreadNew(spi_handler_entry, NULL, &spi_handler_attributes);
 80005c6:	4a0d      	ldr	r2, [pc, #52]	@ (80005fc <main+0x7c>)
 80005c8:	2100      	movs	r1, #0
 80005ca:	480d      	ldr	r0, [pc, #52]	@ (8000600 <main+0x80>)
 80005cc:	f003 f85e 	bl	800368c <osThreadNew>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000604 <main+0x84>)
 80005d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d6:	f003 f823 	bl	8003620 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005da:	bf00      	nop
 80005dc:	e7fd      	b.n	80005da <main+0x5a>
 80005de:	bf00      	nop
 80005e0:	200001ac 	.word	0x200001ac
 80005e4:	2000007c 	.word	0x2000007c
 80005e8:	08006fe8 	.word	0x08006fe8
 80005ec:	200001a8 	.word	0x200001a8
 80005f0:	08006fa0 	.word	0x08006fa0
 80005f4:	080009a9 	.word	0x080009a9
 80005f8:	200001a0 	.word	0x200001a0
 80005fc:	08006fc4 	.word	0x08006fc4
 8000600:	080009b9 	.word	0x080009b9
 8000604:	200001a4 	.word	0x200001a4

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2234      	movs	r2, #52	@ 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f006 fbb0 	bl	8006d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <SystemClock_Config+0xb0>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <SystemClock_Config+0xb0>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	@ 0x40
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <SystemClock_Config+0xb0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000644:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <SystemClock_Config+0xb4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800064c:	4a1b      	ldr	r2, [pc, #108]	@ (80006bc <SystemClock_Config+0xb4>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <SystemClock_Config+0xb4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fa2d 	bl	8001ad4 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000680:	f000 f9c2 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fcc5 	bl	8002030 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006ac:	f000 f9ac 	bl	8000a08 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	@ 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006c4:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <MX_SPI2_Init+0x68>)
 80006c6:	4a19      	ldr	r2, [pc, #100]	@ (800072c <MX_SPI2_Init+0x6c>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <MX_SPI2_Init+0x68>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006d0:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <MX_SPI2_Init+0x68>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_SPI2_Init+0x68>)
 80006d8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80006dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_SPI2_Init+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e4:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_SPI2_Init+0x68>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_SPI2_Init+0x68>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <MX_SPI2_Init+0x68>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_SPI2_Init+0x68>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <MX_SPI2_Init+0x68>)
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_SPI2_Init+0x68>)
 8000704:	2207      	movs	r2, #7
 8000706:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000708:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <MX_SPI2_Init+0x68>)
 800070a:	2200      	movs	r2, #0
 800070c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_SPI2_Init+0x68>)
 8000710:	2200      	movs	r2, #0
 8000712:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	@ (8000728 <MX_SPI2_Init+0x68>)
 8000716:	f001 fe7b 	bl	8002410 <HAL_SPI_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8000720:	f000 f972 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000007c 	.word	0x2000007c
 800072c:	40003800 	.word	0x40003800

08000730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_DMA_Init+0x48>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a0f      	ldr	r2, [pc, #60]	@ (8000778 <MX_DMA_Init+0x48>)
 800073c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <MX_DMA_Init+0x48>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2105      	movs	r1, #5
 8000752:	200c      	movs	r0, #12
 8000754:	f000 fc0d 	bl	8000f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000758:	200c      	movs	r0, #12
 800075a:	f000 fc26 	bl	8000faa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2105      	movs	r1, #5
 8000762:	200f      	movs	r0, #15
 8000764:	f000 fc05 	bl	8000f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000768:	200f      	movs	r0, #15
 800076a:	f000 fc1e 	bl	8000faa <HAL_NVIC_EnableIRQ>

}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08c      	sub	sp, #48	@ 0x30
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b7f      	ldr	r3, [pc, #508]	@ (8000990 <MX_GPIO_Init+0x214>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a7e      	ldr	r2, [pc, #504]	@ (8000990 <MX_GPIO_Init+0x214>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b7c      	ldr	r3, [pc, #496]	@ (8000990 <MX_GPIO_Init+0x214>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	4b79      	ldr	r3, [pc, #484]	@ (8000990 <MX_GPIO_Init+0x214>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a78      	ldr	r2, [pc, #480]	@ (8000990 <MX_GPIO_Init+0x214>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b76      	ldr	r3, [pc, #472]	@ (8000990 <MX_GPIO_Init+0x214>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b73      	ldr	r3, [pc, #460]	@ (8000990 <MX_GPIO_Init+0x214>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a72      	ldr	r2, [pc, #456]	@ (8000990 <MX_GPIO_Init+0x214>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b70      	ldr	r3, [pc, #448]	@ (8000990 <MX_GPIO_Init+0x214>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b6d      	ldr	r3, [pc, #436]	@ (8000990 <MX_GPIO_Init+0x214>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a6c      	ldr	r2, [pc, #432]	@ (8000990 <MX_GPIO_Init+0x214>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b6a      	ldr	r3, [pc, #424]	@ (8000990 <MX_GPIO_Init+0x214>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	4b67      	ldr	r3, [pc, #412]	@ (8000990 <MX_GPIO_Init+0x214>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a66      	ldr	r2, [pc, #408]	@ (8000990 <MX_GPIO_Init+0x214>)
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b64      	ldr	r3, [pc, #400]	@ (8000990 <MX_GPIO_Init+0x214>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0308 	and.w	r3, r3, #8
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800080a:	4b61      	ldr	r3, [pc, #388]	@ (8000990 <MX_GPIO_Init+0x214>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a60      	ldr	r2, [pc, #384]	@ (8000990 <MX_GPIO_Init+0x214>)
 8000810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b5e      	ldr	r3, [pc, #376]	@ (8000990 <MX_GPIO_Init+0x214>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000828:	485a      	ldr	r0, [pc, #360]	@ (8000994 <MX_GPIO_Init+0x218>)
 800082a:	f001 f91f 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2140      	movs	r1, #64	@ 0x40
 8000832:	4859      	ldr	r0, [pc, #356]	@ (8000998 <MX_GPIO_Init+0x21c>)
 8000834:	f001 f91a 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000838:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4853      	ldr	r0, [pc, #332]	@ (800099c <MX_GPIO_Init+0x220>)
 8000850:	f000 ff60 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000854:	2332      	movs	r3, #50	@ 0x32
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000864:	230b      	movs	r3, #11
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	484b      	ldr	r0, [pc, #300]	@ (800099c <MX_GPIO_Init+0x220>)
 8000870:	f000 ff50 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000874:	2386      	movs	r3, #134	@ 0x86
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000884:	230b      	movs	r3, #11
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4844      	ldr	r0, [pc, #272]	@ (80009a0 <MX_GPIO_Init+0x224>)
 8000890:	f000 ff40 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000894:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4839      	ldr	r0, [pc, #228]	@ (8000994 <MX_GPIO_Init+0x218>)
 80008ae:	f000 ff31 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c4:	230b      	movs	r3, #11
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4831      	ldr	r0, [pc, #196]	@ (8000994 <MX_GPIO_Init+0x218>)
 80008d0:	f000 ff20 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008e6:	2307      	movs	r3, #7
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	482c      	ldr	r0, [pc, #176]	@ (80009a4 <MX_GPIO_Init+0x228>)
 80008f2:	f000 ff0f 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008f6:	2340      	movs	r3, #64	@ 0x40
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4822      	ldr	r0, [pc, #136]	@ (8000998 <MX_GPIO_Init+0x21c>)
 800090e:	f000 ff01 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000912:	2380      	movs	r3, #128	@ 0x80
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	481c      	ldr	r0, [pc, #112]	@ (8000998 <MX_GPIO_Init+0x21c>)
 8000926:	f000 fef5 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800092a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800093c:	230a      	movs	r3, #10
 800093e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	4816      	ldr	r0, [pc, #88]	@ (80009a0 <MX_GPIO_Init+0x224>)
 8000948:	f000 fee4 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800094c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	480f      	ldr	r0, [pc, #60]	@ (80009a0 <MX_GPIO_Init+0x224>)
 8000962:	f000 fed7 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000966:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000978:	230b      	movs	r3, #11
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_GPIO_Init+0x21c>)
 8000984:	f000 fec6 	bl	8001714 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000988:	bf00      	nop
 800098a:	3730      	adds	r7, #48	@ 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40020400 	.word	0x40020400
 8000998:	40021800 	.word	0x40021800
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020c00 	.word	0x40020c00

080009a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f002 ff11 	bl	80037d8 <osDelay>
 80009b6:	e7fb      	b.n	80009b0 <StartDefaultTask+0x8>

080009b8 <spi_handler_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_spi_handler_entry */
void spi_handler_entry(void *argument)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN spi_handler_entry */
  /* Infinite loop */
  for(;;)
  {

	osSemaphoreAcquire(spi_dataHandle, portMAX_DELAY);
 80009c0:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <spi_handler_entry+0x44>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 ffcf 	bl	800396c <osSemaphoreAcquire>
	/*
	if (HAL_SPI_Transmit(&hspi2, transfer_bytes, TRANSFER_SIZE, 1000) != HAL_OK){
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	} */

	for(uint8_t i = 0; i < TRANSFER_SIZE; i++){
 80009ce:	2300      	movs	r3, #0
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	e00a      	b.n	80009ea <spi_handler_entry+0x32>
	  transfer_bytes[i] += 1;
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <spi_handler_entry+0x48>)
 80009d8:	5cd2      	ldrb	r2, [r2, r3]
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	3201      	adds	r2, #1
 80009de:	b2d1      	uxtb	r1, r2
 80009e0:	4a07      	ldr	r2, [pc, #28]	@ (8000a00 <spi_handler_entry+0x48>)
 80009e2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < TRANSFER_SIZE; i++){
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	3301      	adds	r3, #1
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80009ee:	d9f1      	bls.n	80009d4 <spi_handler_entry+0x1c>
	}

	HAL_SPI_Transmit_DMA(&hspi2, transfer_bytes, TRANSFER_SIZE);
 80009f0:	2240      	movs	r2, #64	@ 0x40
 80009f2:	4903      	ldr	r1, [pc, #12]	@ (8000a00 <spi_handler_entry+0x48>)
 80009f4:	4803      	ldr	r0, [pc, #12]	@ (8000a04 <spi_handler_entry+0x4c>)
 80009f6:	f001 fdb7 	bl	8002568 <HAL_SPI_Transmit_DMA>
	osSemaphoreAcquire(spi_dataHandle, portMAX_DELAY);
 80009fa:	e7e1      	b.n	80009c0 <spi_handler_entry+0x8>
 80009fc:	200001a8 	.word	0x200001a8
 8000a00:	200001ac 	.word	0x200001ac
 8000a04:	2000007c 	.word	0x2000007c

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	210f      	movs	r1, #15
 8000a4e:	f06f 0001 	mvn.w	r0, #1
 8000a52:	f000 fa8e 	bl	8000f72 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	@ 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a57      	ldr	r2, [pc, #348]	@ (8000be0 <HAL_SPI_MspInit+0x17c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	f040 80a8 	bne.w	8000bd8 <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a88:	4b56      	ldr	r3, [pc, #344]	@ (8000be4 <HAL_SPI_MspInit+0x180>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	4a55      	ldr	r2, [pc, #340]	@ (8000be4 <HAL_SPI_MspInit+0x180>)
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a94:	4b53      	ldr	r3, [pc, #332]	@ (8000be4 <HAL_SPI_MspInit+0x180>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa0:	4b50      	ldr	r3, [pc, #320]	@ (8000be4 <HAL_SPI_MspInit+0x180>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa4:	4a4f      	ldr	r2, [pc, #316]	@ (8000be4 <HAL_SPI_MspInit+0x180>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aac:	4b4d      	ldr	r3, [pc, #308]	@ (8000be4 <HAL_SPI_MspInit+0x180>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8000be4 <HAL_SPI_MspInit+0x180>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	4a49      	ldr	r2, [pc, #292]	@ (8000be4 <HAL_SPI_MspInit+0x180>)
 8000abe:	f043 0302 	orr.w	r3, r3, #2
 8000ac2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac4:	4b47      	ldr	r3, [pc, #284]	@ (8000be4 <HAL_SPI_MspInit+0x180>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad0:	230c      	movs	r3, #12
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ae0:	2305      	movs	r3, #5
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	483f      	ldr	r0, [pc, #252]	@ (8000be8 <HAL_SPI_MspInit+0x184>)
 8000aec:	f000 fe12 	bl	8001714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000af0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b02:	2305      	movs	r3, #5
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4837      	ldr	r0, [pc, #220]	@ (8000bec <HAL_SPI_MspInit+0x188>)
 8000b0e:	f000 fe01 	bl	8001714 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8000b12:	4b37      	ldr	r3, [pc, #220]	@ (8000bf0 <HAL_SPI_MspInit+0x18c>)
 8000b14:	4a37      	ldr	r2, [pc, #220]	@ (8000bf4 <HAL_SPI_MspInit+0x190>)
 8000b16:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 8000b18:	4b35      	ldr	r3, [pc, #212]	@ (8000bf0 <HAL_SPI_MspInit+0x18c>)
 8000b1a:	f04f 5290 	mov.w	r2, #301989888	@ 0x12000000
 8000b1e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b20:	4b33      	ldr	r3, [pc, #204]	@ (8000bf0 <HAL_SPI_MspInit+0x18c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b26:	4b32      	ldr	r3, [pc, #200]	@ (8000bf0 <HAL_SPI_MspInit+0x18c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b2c:	4b30      	ldr	r3, [pc, #192]	@ (8000bf0 <HAL_SPI_MspInit+0x18c>)
 8000b2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b32:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b34:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf0 <HAL_SPI_MspInit+0x18c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf0 <HAL_SPI_MspInit+0x18c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000b40:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf0 <HAL_SPI_MspInit+0x18c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b46:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf0 <HAL_SPI_MspInit+0x18c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b4c:	4b28      	ldr	r3, [pc, #160]	@ (8000bf0 <HAL_SPI_MspInit+0x18c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000b52:	4827      	ldr	r0, [pc, #156]	@ (8000bf0 <HAL_SPI_MspInit+0x18c>)
 8000b54:	f000 fa44 	bl	8000fe0 <HAL_DMA_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_SPI_MspInit+0xfe>
    {
      Error_Handler();
 8000b5e:	f7ff ff53 	bl	8000a08 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a22      	ldr	r2, [pc, #136]	@ (8000bf0 <HAL_SPI_MspInit+0x18c>)
 8000b66:	659a      	str	r2, [r3, #88]	@ 0x58
 8000b68:	4a21      	ldr	r2, [pc, #132]	@ (8000bf0 <HAL_SPI_MspInit+0x18c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000b6e:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <HAL_SPI_MspInit+0x194>)
 8000b70:	4a22      	ldr	r2, [pc, #136]	@ (8000bfc <HAL_SPI_MspInit+0x198>)
 8000b72:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000b74:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <HAL_SPI_MspInit+0x194>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <HAL_SPI_MspInit+0x194>)
 8000b7c:	2240      	movs	r2, #64	@ 0x40
 8000b7e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <HAL_SPI_MspInit+0x194>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <HAL_SPI_MspInit+0x194>)
 8000b88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b8c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <HAL_SPI_MspInit+0x194>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b94:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <HAL_SPI_MspInit+0x194>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <HAL_SPI_MspInit+0x194>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <HAL_SPI_MspInit+0x194>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <HAL_SPI_MspInit+0x194>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000bac:	4812      	ldr	r0, [pc, #72]	@ (8000bf8 <HAL_SPI_MspInit+0x194>)
 8000bae:	f000 fa17 	bl	8000fe0 <HAL_DMA_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8000bb8:	f7ff ff26 	bl	8000a08 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf8 <HAL_SPI_MspInit+0x194>)
 8000bc0:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <HAL_SPI_MspInit+0x194>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2105      	movs	r1, #5
 8000bcc:	2024      	movs	r0, #36	@ 0x24
 8000bce:	f000 f9d0 	bl	8000f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000bd2:	2024      	movs	r0, #36	@ 0x24
 8000bd4:	f000 f9e9 	bl	8000faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	@ 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40003800 	.word	0x40003800
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020800 	.word	0x40020800
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	200000e0 	.word	0x200000e0
 8000bf4:	40026028 	.word	0x40026028
 8000bf8:	20000140 	.word	0x20000140
 8000bfc:	40026070 	.word	0x40026070

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <NMI_Handler+0x4>

08000c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 f89f 	bl	8000d7c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c3e:	f004 ff27 	bl	8005a90 <xTaskGetSchedulerState>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d001      	beq.n	8000c4c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c48:	f005 fe16 	bl	8006878 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000c54:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <DMA1_Stream1_IRQHandler+0x10>)
 8000c56:	f000 faf3 	bl	8001240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000e0 	.word	0x200000e0

08000c64 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <DMA1_Stream4_IRQHandler+0x10>)
 8000c6a:	f000 fae9 	bl	8001240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000140 	.word	0x20000140

08000c78 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000c7c:	4802      	ldr	r0, [pc, #8]	@ (8000c88 <SPI2_IRQHandler+0x10>)
 8000c7e:	f002 f817 	bl	8002cb0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000007c 	.word	0x2000007c

08000c8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb4:	480d      	ldr	r0, [pc, #52]	@ (8000cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb6:	490e      	ldr	r1, [pc, #56]	@ (8000cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ccc:	4c0b      	ldr	r4, [pc, #44]	@ (8000cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cda:	f7ff ffd7 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f006 f8ab 	bl	8006e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fc4d 	bl	8000580 <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000cf4:	08007020 	.word	0x08007020
  ldr r2, =_sbss
 8000cf8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000cfc:	20004d10 	.word	0x20004d10

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>

08000d02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d06:	2003      	movs	r0, #3
 8000d08:	f000 f928 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0c:	200f      	movs	r0, #15
 8000d0e:	f000 f805 	bl	8000d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d12:	f7ff fe7f 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <HAL_InitTick+0x54>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <HAL_InitTick+0x58>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f943 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00e      	b.n	8000d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d80a      	bhi.n	8000d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f000 f90b 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d5c:	4a06      	ldr	r2, [pc, #24]	@ (8000d78 <HAL_InitTick+0x5c>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000000 	.word	0x20000000
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000004 	.word	0x20000004

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	200001ec 	.word	0x200001ec

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	200001ec 	.word	0x200001ec

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x40>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	4313      	orrs	r3, r2
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x40>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00
 8000e00:	05fa0000 	.word	0x05fa0000

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	@ (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	@ (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	@ (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	@ 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	@ 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff29 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff3e 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff8e 	bl	8000eb0 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff31 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffa2 	bl	8000f18 <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff feda 	bl	8000da4 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e099      	b.n	8001130 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2202      	movs	r2, #2
 8001000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0201 	bic.w	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800101c:	e00f      	b.n	800103e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800101e:	f7ff fec1 	bl	8000da4 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b05      	cmp	r3, #5
 800102a:	d908      	bls.n	800103e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2220      	movs	r2, #32
 8001030:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2203      	movs	r2, #3
 8001036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e078      	b.n	8001130 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e8      	bne.n	800101e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	4b38      	ldr	r3, [pc, #224]	@ (8001138 <HAL_DMA_Init+0x158>)
 8001058:	4013      	ands	r3, r2
 800105a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800106a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001076:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001082:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4313      	orrs	r3, r2
 800108e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001094:	2b04      	cmp	r3, #4
 8001096:	d107      	bne.n	80010a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	4313      	orrs	r3, r2
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f023 0307 	bic.w	r3, r3, #7
 80010be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	d117      	bne.n	8001102 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4313      	orrs	r3, r2
 80010da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00e      	beq.n	8001102 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 fa99 	bl	800161c <DMA_CheckFifoParam>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d008      	beq.n	8001102 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2240      	movs	r2, #64	@ 0x40
 80010f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80010fe:	2301      	movs	r3, #1
 8001100:	e016      	b.n	8001130 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 fa50 	bl	80015b0 <DMA_CalcBaseAndBitshift>
 8001110:	4603      	mov	r3, r0
 8001112:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001118:	223f      	movs	r2, #63	@ 0x3f
 800111a:	409a      	lsls	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	e010803f 	.word	0xe010803f

0800113c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001152:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <HAL_DMA_Start_IT+0x26>
 800115e:	2302      	movs	r3, #2
 8001160:	e048      	b.n	80011f4 <HAL_DMA_Start_IT+0xb8>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d137      	bne.n	80011e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2202      	movs	r2, #2
 800117a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2200      	movs	r2, #0
 8001182:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f000 f9e2 	bl	8001554 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001194:	223f      	movs	r2, #63	@ 0x3f
 8001196:	409a      	lsls	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0216 	orr.w	r2, r2, #22
 80011aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011ba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0208 	orr.w	r2, r2, #8
 80011d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e005      	b.n	80011f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011ee:	2302      	movs	r3, #2
 80011f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d004      	beq.n	800121a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2280      	movs	r2, #128	@ 0x80
 8001214:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00c      	b.n	8001234 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2205      	movs	r2, #5
 800121e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0201 	bic.w	r2, r2, #1
 8001230:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800124c:	4b8e      	ldr	r3, [pc, #568]	@ (8001488 <HAL_DMA_IRQHandler+0x248>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a8e      	ldr	r2, [pc, #568]	@ (800148c <HAL_DMA_IRQHandler+0x24c>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	0a9b      	lsrs	r3, r3, #10
 8001258:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800126a:	2208      	movs	r2, #8
 800126c:	409a      	lsls	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d01a      	beq.n	80012ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0204 	bic.w	r2, r2, #4
 8001292:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001298:	2208      	movs	r2, #8
 800129a:	409a      	lsls	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012a4:	f043 0201 	orr.w	r2, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b0:	2201      	movs	r2, #1
 80012b2:	409a      	lsls	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d012      	beq.n	80012e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00b      	beq.n	80012e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ce:	2201      	movs	r2, #1
 80012d0:	409a      	lsls	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012da:	f043 0202 	orr.w	r2, r3, #2
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e6:	2204      	movs	r2, #4
 80012e8:	409a      	lsls	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d012      	beq.n	8001318 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00b      	beq.n	8001318 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001304:	2204      	movs	r2, #4
 8001306:	409a      	lsls	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001310:	f043 0204 	orr.w	r2, r3, #4
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800131c:	2210      	movs	r2, #16
 800131e:	409a      	lsls	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d043      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d03c      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133a:	2210      	movs	r2, #16
 800133c:	409a      	lsls	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d018      	beq.n	8001382 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d108      	bne.n	8001370 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	2b00      	cmp	r3, #0
 8001364:	d024      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	4798      	blx	r3
 800136e:	e01f      	b.n	80013b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01b      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	4798      	blx	r3
 8001380:	e016      	b.n	80013b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0208 	bic.w	r2, r2, #8
 800139e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b4:	2220      	movs	r2, #32
 80013b6:	409a      	lsls	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 808f 	beq.w	80014e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 8087 	beq.w	80014e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013d6:	2220      	movs	r2, #32
 80013d8:	409a      	lsls	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b05      	cmp	r3, #5
 80013e8:	d136      	bne.n	8001458 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0216 	bic.w	r2, r2, #22
 80013f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	695a      	ldr	r2, [r3, #20]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001408:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	2b00      	cmp	r3, #0
 8001410:	d103      	bne.n	800141a <HAL_DMA_IRQHandler+0x1da>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0208 	bic.w	r2, r2, #8
 8001428:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800142e:	223f      	movs	r2, #63	@ 0x3f
 8001430:	409a      	lsls	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800144a:	2b00      	cmp	r3, #0
 800144c:	d07e      	beq.n	800154c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	4798      	blx	r3
        }
        return;
 8001456:	e079      	b.n	800154c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d01d      	beq.n	80014a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10d      	bne.n	8001490 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001478:	2b00      	cmp	r3, #0
 800147a:	d031      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	4798      	blx	r3
 8001484:	e02c      	b.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
 8001486:	bf00      	nop
 8001488:	20000000 	.word	0x20000000
 800148c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d023      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4798      	blx	r3
 80014a0:	e01e      	b.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10f      	bne.n	80014d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0210 	bic.w	r2, r2, #16
 80014be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d032      	beq.n	800154e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d022      	beq.n	800153a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2205      	movs	r2, #5
 80014f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0201 	bic.w	r2, r2, #1
 800150a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	3301      	adds	r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	429a      	cmp	r2, r3
 8001516:	d307      	bcc.n	8001528 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f2      	bne.n	800150c <HAL_DMA_IRQHandler+0x2cc>
 8001526:	e000      	b.n	800152a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001528:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4798      	blx	r3
 800154a:	e000      	b.n	800154e <HAL_DMA_IRQHandler+0x30e>
        return;
 800154c:	bf00      	nop
    }
  }
}
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001570:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b40      	cmp	r3, #64	@ 0x40
 8001580:	d108      	bne.n	8001594 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001592:	e007      	b.n	80015a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	60da      	str	r2, [r3, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	3b10      	subs	r3, #16
 80015c0:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <DMA_CalcBaseAndBitshift+0x60>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015ca:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <DMA_CalcBaseAndBitshift+0x64>)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d908      	bls.n	80015f0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <DMA_CalcBaseAndBitshift+0x68>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	1d1a      	adds	r2, r3, #4
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80015ee:	e006      	b.n	80015fe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <DMA_CalcBaseAndBitshift+0x68>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	aaaaaaab 	.word	0xaaaaaaab
 8001614:	08007008 	.word	0x08007008
 8001618:	fffffc00 	.word	0xfffffc00

0800161c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d11f      	bne.n	8001676 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d856      	bhi.n	80016ea <DMA_CheckFifoParam+0xce>
 800163c:	a201      	add	r2, pc, #4	@ (adr r2, 8001644 <DMA_CheckFifoParam+0x28>)
 800163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001642:	bf00      	nop
 8001644:	08001655 	.word	0x08001655
 8001648:	08001667 	.word	0x08001667
 800164c:	08001655 	.word	0x08001655
 8001650:	080016eb 	.word	0x080016eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d046      	beq.n	80016ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001664:	e043      	b.n	80016ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800166e:	d140      	bne.n	80016f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001674:	e03d      	b.n	80016f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800167e:	d121      	bne.n	80016c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d837      	bhi.n	80016f6 <DMA_CheckFifoParam+0xda>
 8001686:	a201      	add	r2, pc, #4	@ (adr r2, 800168c <DMA_CheckFifoParam+0x70>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	0800169d 	.word	0x0800169d
 8001690:	080016a3 	.word	0x080016a3
 8001694:	0800169d 	.word	0x0800169d
 8001698:	080016b5 	.word	0x080016b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
      break;
 80016a0:	e030      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d025      	beq.n	80016fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016b2:	e022      	b.n	80016fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80016bc:	d11f      	bne.n	80016fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016c2:	e01c      	b.n	80016fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d903      	bls.n	80016d2 <DMA_CheckFifoParam+0xb6>
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d003      	beq.n	80016d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016d0:	e018      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
      break;
 80016d6:	e015      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00e      	beq.n	8001702 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
      break;
 80016e8:	e00b      	b.n	8001702 <DMA_CheckFifoParam+0xe6>
      break;
 80016ea:	bf00      	nop
 80016ec:	e00a      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      break;
 80016ee:	bf00      	nop
 80016f0:	e008      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      break;
 80016f2:	bf00      	nop
 80016f4:	e006      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      break;
 80016f6:	bf00      	nop
 80016f8:	e004      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      break;
 80016fa:	bf00      	nop
 80016fc:	e002      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      break;   
 80016fe:	bf00      	nop
 8001700:	e000      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      break;
 8001702:	bf00      	nop
    }
  } 
  
  return status; 
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	@ 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	e175      	b.n	8001a20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001734:	2201      	movs	r2, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	429a      	cmp	r2, r3
 800174e:	f040 8164 	bne.w	8001a1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d005      	beq.n	800176a <HAL_GPIO_Init+0x56>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d130      	bne.n	80017cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 0201 	and.w	r2, r3, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d017      	beq.n	8001808 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d123      	bne.n	800185c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	08da      	lsrs	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3208      	adds	r2, #8
 800181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	08da      	lsrs	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3208      	adds	r2, #8
 8001856:	69b9      	ldr	r1, [r7, #24]
 8001858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0203 	and.w	r2, r3, #3
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80be 	beq.w	8001a1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	4b66      	ldr	r3, [pc, #408]	@ (8001a38 <HAL_GPIO_Init+0x324>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	4a65      	ldr	r2, [pc, #404]	@ (8001a38 <HAL_GPIO_Init+0x324>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018aa:	4b63      	ldr	r3, [pc, #396]	@ (8001a38 <HAL_GPIO_Init+0x324>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018b6:	4a61      	ldr	r2, [pc, #388]	@ (8001a3c <HAL_GPIO_Init+0x328>)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	220f      	movs	r2, #15
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a58      	ldr	r2, [pc, #352]	@ (8001a40 <HAL_GPIO_Init+0x32c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d037      	beq.n	8001952 <HAL_GPIO_Init+0x23e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a57      	ldr	r2, [pc, #348]	@ (8001a44 <HAL_GPIO_Init+0x330>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d031      	beq.n	800194e <HAL_GPIO_Init+0x23a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a56      	ldr	r2, [pc, #344]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d02b      	beq.n	800194a <HAL_GPIO_Init+0x236>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a55      	ldr	r2, [pc, #340]	@ (8001a4c <HAL_GPIO_Init+0x338>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d025      	beq.n	8001946 <HAL_GPIO_Init+0x232>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a54      	ldr	r2, [pc, #336]	@ (8001a50 <HAL_GPIO_Init+0x33c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d01f      	beq.n	8001942 <HAL_GPIO_Init+0x22e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a53      	ldr	r2, [pc, #332]	@ (8001a54 <HAL_GPIO_Init+0x340>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d019      	beq.n	800193e <HAL_GPIO_Init+0x22a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a52      	ldr	r2, [pc, #328]	@ (8001a58 <HAL_GPIO_Init+0x344>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0x226>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a51      	ldr	r2, [pc, #324]	@ (8001a5c <HAL_GPIO_Init+0x348>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d00d      	beq.n	8001936 <HAL_GPIO_Init+0x222>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a50      	ldr	r2, [pc, #320]	@ (8001a60 <HAL_GPIO_Init+0x34c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d007      	beq.n	8001932 <HAL_GPIO_Init+0x21e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4f      	ldr	r2, [pc, #316]	@ (8001a64 <HAL_GPIO_Init+0x350>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d101      	bne.n	800192e <HAL_GPIO_Init+0x21a>
 800192a:	2309      	movs	r3, #9
 800192c:	e012      	b.n	8001954 <HAL_GPIO_Init+0x240>
 800192e:	230a      	movs	r3, #10
 8001930:	e010      	b.n	8001954 <HAL_GPIO_Init+0x240>
 8001932:	2308      	movs	r3, #8
 8001934:	e00e      	b.n	8001954 <HAL_GPIO_Init+0x240>
 8001936:	2307      	movs	r3, #7
 8001938:	e00c      	b.n	8001954 <HAL_GPIO_Init+0x240>
 800193a:	2306      	movs	r3, #6
 800193c:	e00a      	b.n	8001954 <HAL_GPIO_Init+0x240>
 800193e:	2305      	movs	r3, #5
 8001940:	e008      	b.n	8001954 <HAL_GPIO_Init+0x240>
 8001942:	2304      	movs	r3, #4
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x240>
 8001946:	2303      	movs	r3, #3
 8001948:	e004      	b.n	8001954 <HAL_GPIO_Init+0x240>
 800194a:	2302      	movs	r3, #2
 800194c:	e002      	b.n	8001954 <HAL_GPIO_Init+0x240>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_GPIO_Init+0x240>
 8001952:	2300      	movs	r3, #0
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	f002 0203 	and.w	r2, r2, #3
 800195a:	0092      	lsls	r2, r2, #2
 800195c:	4093      	lsls	r3, r2
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001964:	4935      	ldr	r1, [pc, #212]	@ (8001a3c <HAL_GPIO_Init+0x328>)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001972:	4b3d      	ldr	r3, [pc, #244]	@ (8001a68 <HAL_GPIO_Init+0x354>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001996:	4a34      	ldr	r2, [pc, #208]	@ (8001a68 <HAL_GPIO_Init+0x354>)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800199c:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <HAL_GPIO_Init+0x354>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c0:	4a29      	ldr	r2, [pc, #164]	@ (8001a68 <HAL_GPIO_Init+0x354>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019c6:	4b28      	ldr	r3, [pc, #160]	@ (8001a68 <HAL_GPIO_Init+0x354>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001a68 <HAL_GPIO_Init+0x354>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <HAL_GPIO_Init+0x354>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a14:	4a14      	ldr	r2, [pc, #80]	@ (8001a68 <HAL_GPIO_Init+0x354>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	2b0f      	cmp	r3, #15
 8001a24:	f67f ae86 	bls.w	8001734 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3724      	adds	r7, #36	@ 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40013800 	.word	0x40013800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020400 	.word	0x40020400
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	40020c00 	.word	0x40020c00
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40021400 	.word	0x40021400
 8001a58:	40021800 	.word	0x40021800
 8001a5c:	40021c00 	.word	0x40021c00
 8001a60:	40022000 	.word	0x40022000
 8001a64:	40022400 	.word	0x40022400
 8001a68:	40013c00 	.word	0x40013c00

08001a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a7c:	787b      	ldrb	r3, [r7, #1]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a88:	e003      	b.n	8001a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	041a      	lsls	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	619a      	str	r2, [r3, #24]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b085      	sub	sp, #20
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ab0:	887a      	ldrh	r2, [r7, #2]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	041a      	lsls	r2, r3, #16
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	400b      	ands	r3, r1
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	619a      	str	r2, [r3, #24]
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e29b      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8087 	beq.w	8001c06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af8:	4b96      	ldr	r3, [pc, #600]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d00c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b04:	4b93      	ldr	r3, [pc, #588]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d112      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62>
 8001b10:	4b90      	ldr	r3, [pc, #576]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b1c:	d10b      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1e:	4b8d      	ldr	r3, [pc, #564]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d06c      	beq.n	8001c04 <HAL_RCC_OscConfig+0x130>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d168      	bne.n	8001c04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e275      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x7a>
 8001b40:	4b84      	ldr	r3, [pc, #528]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a83      	ldr	r2, [pc, #524]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	e02e      	b.n	8001bac <HAL_RCC_OscConfig+0xd8>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x9c>
 8001b56:	4b7f      	ldr	r3, [pc, #508]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b7c      	ldr	r3, [pc, #496]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a7b      	ldr	r2, [pc, #492]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e01d      	b.n	8001bac <HAL_RCC_OscConfig+0xd8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0xc0>
 8001b7a:	4b76      	ldr	r3, [pc, #472]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a75      	ldr	r2, [pc, #468]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b73      	ldr	r3, [pc, #460]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a72      	ldr	r2, [pc, #456]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0xd8>
 8001b94:	4b6f      	ldr	r3, [pc, #444]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6e      	ldr	r2, [pc, #440]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a6b      	ldr	r2, [pc, #428]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001ba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f8f6 	bl	8000da4 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff f8f2 	bl	8000da4 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	@ 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e229      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b61      	ldr	r3, [pc, #388]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0xe8>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f8e2 	bl	8000da4 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff f8de 	bl	8000da4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	@ 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e215      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	4b57      	ldr	r3, [pc, #348]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x110>
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d069      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c12:	4b50      	ldr	r3, [pc, #320]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00b      	beq.n	8001c36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1e:	4b4d      	ldr	r3, [pc, #308]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d11c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x190>
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d116      	bne.n	8001c64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	4b47      	ldr	r3, [pc, #284]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x17a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e1e9      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4e:	4b41      	ldr	r3, [pc, #260]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	493d      	ldr	r1, [pc, #244]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	e040      	b.n	8001ce6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d023      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c6c:	4b39      	ldr	r3, [pc, #228]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a38      	ldr	r2, [pc, #224]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff f894 	bl	8000da4 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c80:	f7ff f890 	bl	8000da4 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1c7      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c92:	4b30      	ldr	r3, [pc, #192]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4929      	ldr	r1, [pc, #164]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
 8001cb2:	e018      	b.n	8001ce6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb4:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a26      	ldr	r2, [pc, #152]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f870 	bl	8000da4 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f86c 	bl	8000da4 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1a3      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	4b1e      	ldr	r3, [pc, #120]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d038      	beq.n	8001d64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d019      	beq.n	8001d2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfa:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cfe:	4a15      	ldr	r2, [pc, #84]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d06:	f7ff f84d 	bl	8000da4 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0e:	f7ff f849 	bl	8000da4 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e180      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x23a>
 8001d2c:	e01a      	b.n	8001d64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d32:	4a08      	ldr	r2, [pc, #32]	@ (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f833 	bl	8000da4 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d42:	f7ff f82f 	bl	8000da4 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d903      	bls.n	8001d58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e166      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
 8001d54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d58:	4b92      	ldr	r3, [pc, #584]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ee      	bne.n	8001d42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80a4 	beq.w	8001eba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d72:	4b8c      	ldr	r3, [pc, #560]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10d      	bne.n	8001d9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4b89      	ldr	r3, [pc, #548]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	4a88      	ldr	r2, [pc, #544]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8a:	4b86      	ldr	r3, [pc, #536]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d96:	2301      	movs	r3, #1
 8001d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9a:	4b83      	ldr	r3, [pc, #524]	@ (8001fa8 <HAL_RCC_OscConfig+0x4d4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d118      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001da6:	4b80      	ldr	r3, [pc, #512]	@ (8001fa8 <HAL_RCC_OscConfig+0x4d4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a7f      	ldr	r2, [pc, #508]	@ (8001fa8 <HAL_RCC_OscConfig+0x4d4>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db2:	f7fe fff7 	bl	8000da4 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dba:	f7fe fff3 	bl	8000da4 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b64      	cmp	r3, #100	@ 0x64
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e12a      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dcc:	4b76      	ldr	r3, [pc, #472]	@ (8001fa8 <HAL_RCC_OscConfig+0x4d4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x31a>
 8001de0:	4b70      	ldr	r3, [pc, #448]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de4:	4a6f      	ldr	r2, [pc, #444]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dec:	e02d      	b.n	8001e4a <HAL_RCC_OscConfig+0x376>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x33c>
 8001df6:	4b6b      	ldr	r3, [pc, #428]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfa:	4a6a      	ldr	r2, [pc, #424]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e02:	4b68      	ldr	r3, [pc, #416]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e06:	4a67      	ldr	r2, [pc, #412]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001e08:	f023 0304 	bic.w	r3, r3, #4
 8001e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e0e:	e01c      	b.n	8001e4a <HAL_RCC_OscConfig+0x376>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d10c      	bne.n	8001e32 <HAL_RCC_OscConfig+0x35e>
 8001e18:	4b62      	ldr	r3, [pc, #392]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1c:	4a61      	ldr	r2, [pc, #388]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e24:	4b5f      	ldr	r3, [pc, #380]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e28:	4a5e      	ldr	r2, [pc, #376]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e30:	e00b      	b.n	8001e4a <HAL_RCC_OscConfig+0x376>
 8001e32:	4b5c      	ldr	r3, [pc, #368]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e36:	4a5b      	ldr	r2, [pc, #364]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e3e:	4b59      	ldr	r3, [pc, #356]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e42:	4a58      	ldr	r2, [pc, #352]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d015      	beq.n	8001e7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7fe ffa7 	bl	8000da4 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	e00a      	b.n	8001e70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7fe ffa3 	bl	8000da4 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e0d8      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	4b4c      	ldr	r3, [pc, #304]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ee      	beq.n	8001e5a <HAL_RCC_OscConfig+0x386>
 8001e7c:	e014      	b.n	8001ea8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7fe ff91 	bl	8000da4 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7fe ff8d 	bl	8000da4 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0c2      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9c:	4b41      	ldr	r3, [pc, #260]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1ee      	bne.n	8001e86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d105      	bne.n	8001eba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eae:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	4a3c      	ldr	r2, [pc, #240]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001eb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80ae 	beq.w	8002020 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec4:	4b37      	ldr	r3, [pc, #220]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d06d      	beq.n	8001fac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d14b      	bne.n	8001f70 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed8:	4b32      	ldr	r3, [pc, #200]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a31      	ldr	r2, [pc, #196]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001ede:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7fe ff5e 	bl	8000da4 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7fe ff5a 	bl	8000da4 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e091      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	4b29      	ldr	r3, [pc, #164]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f20:	085b      	lsrs	r3, r3, #1
 8001f22:	3b01      	subs	r3, #1
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f34:	071b      	lsls	r3, r3, #28
 8001f36:	491b      	ldr	r1, [pc, #108]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f3c:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a18      	ldr	r2, [pc, #96]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe ff2c 	bl	8000da4 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7fe ff28 	bl	8000da4 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e05f      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x47c>
 8001f6e:	e057      	b.n	8002020 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ff12 	bl	8000da4 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f84:	f7fe ff0e 	bl	8000da4 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e045      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4b0>
 8001fa2:	e03d      	b.n	8002020 <HAL_RCC_OscConfig+0x54c>
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001fac:	4b1f      	ldr	r3, [pc, #124]	@ (800202c <HAL_RCC_OscConfig+0x558>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d030      	beq.n	800201c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d129      	bne.n	800201c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d122      	bne.n	800201c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fdc:	4013      	ands	r3, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fe2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d119      	bne.n	800201c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff2:	085b      	lsrs	r3, r3, #1
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d10f      	bne.n	800201c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d107      	bne.n	800201c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800

08002030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0d0      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b6a      	ldr	r3, [pc, #424]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d910      	bls.n	8002078 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b67      	ldr	r3, [pc, #412]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 020f 	bic.w	r2, r3, #15
 800205e:	4965      	ldr	r1, [pc, #404]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b63      	ldr	r3, [pc, #396]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0b8      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d020      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002090:	4b59      	ldr	r3, [pc, #356]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a58      	ldr	r2, [pc, #352]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002096:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800209a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a8:	4b53      	ldr	r3, [pc, #332]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4a52      	ldr	r2, [pc, #328]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80020ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b4:	4b50      	ldr	r3, [pc, #320]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	494d      	ldr	r1, [pc, #308]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d040      	beq.n	8002154 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	4b47      	ldr	r3, [pc, #284]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d115      	bne.n	8002112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e07f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	4b41      	ldr	r3, [pc, #260]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e073      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	4b3d      	ldr	r3, [pc, #244]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e06b      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002112:	4b39      	ldr	r3, [pc, #228]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 0203 	bic.w	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4936      	ldr	r1, [pc, #216]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002120:	4313      	orrs	r3, r2
 8002122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002124:	f7fe fe3e 	bl	8000da4 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	e00a      	b.n	8002142 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212c:	f7fe fe3a 	bl	8000da4 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e053      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	4b2d      	ldr	r3, [pc, #180]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 020c 	and.w	r2, r3, #12
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	429a      	cmp	r2, r3
 8002152:	d1eb      	bne.n	800212c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002154:	4b27      	ldr	r3, [pc, #156]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d210      	bcs.n	8002184 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b24      	ldr	r3, [pc, #144]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 020f 	bic.w	r2, r3, #15
 800216a:	4922      	ldr	r1, [pc, #136]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b20      	ldr	r3, [pc, #128]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e032      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002190:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4916      	ldr	r1, [pc, #88]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ae:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	490e      	ldr	r1, [pc, #56]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021c2:	f000 f821 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80021c6:	4602      	mov	r2, r0
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	490a      	ldr	r1, [pc, #40]	@ (80021fc <HAL_RCC_ClockConfig+0x1cc>)
 80021d4:	5ccb      	ldrb	r3, [r1, r3]
 80021d6:	fa22 f303 	lsr.w	r3, r2, r3
 80021da:	4a09      	ldr	r2, [pc, #36]	@ (8002200 <HAL_RCC_ClockConfig+0x1d0>)
 80021dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021de:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <HAL_RCC_ClockConfig+0x1d4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fd9a 	bl	8000d1c <HAL_InitTick>

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023c00 	.word	0x40023c00
 80021f8:	40023800 	.word	0x40023800
 80021fc:	08006ff8 	.word	0x08006ff8
 8002200:	20000000 	.word	0x20000000
 8002204:	20000004 	.word	0x20000004

08002208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800220c:	b094      	sub	sp, #80	@ 0x50
 800220e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	647b      	str	r3, [r7, #68]	@ 0x44
 8002214:	2300      	movs	r3, #0
 8002216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002218:	2300      	movs	r3, #0
 800221a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002220:	4b79      	ldr	r3, [pc, #484]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x200>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	d00d      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x40>
 800222c:	2b08      	cmp	r3, #8
 800222e:	f200 80e1 	bhi.w	80023f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x34>
 8002236:	2b04      	cmp	r3, #4
 8002238:	d003      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x3a>
 800223a:	e0db      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800223c:	4b73      	ldr	r3, [pc, #460]	@ (800240c <HAL_RCC_GetSysClockFreq+0x204>)
 800223e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002240:	e0db      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002242:	4b72      	ldr	r3, [pc, #456]	@ (800240c <HAL_RCC_GetSysClockFreq+0x204>)
 8002244:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002246:	e0d8      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002248:	4b6f      	ldr	r3, [pc, #444]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x200>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002250:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002252:	4b6d      	ldr	r3, [pc, #436]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x200>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d063      	beq.n	8002326 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225e:	4b6a      	ldr	r3, [pc, #424]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x200>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	099b      	lsrs	r3, r3, #6
 8002264:	2200      	movs	r2, #0
 8002266:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002268:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800226a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800226c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002270:	633b      	str	r3, [r7, #48]	@ 0x30
 8002272:	2300      	movs	r3, #0
 8002274:	637b      	str	r3, [r7, #52]	@ 0x34
 8002276:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800227a:	4622      	mov	r2, r4
 800227c:	462b      	mov	r3, r5
 800227e:	f04f 0000 	mov.w	r0, #0
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	0159      	lsls	r1, r3, #5
 8002288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800228c:	0150      	lsls	r0, r2, #5
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4621      	mov	r1, r4
 8002294:	1a51      	subs	r1, r2, r1
 8002296:	6139      	str	r1, [r7, #16]
 8002298:	4629      	mov	r1, r5
 800229a:	eb63 0301 	sbc.w	r3, r3, r1
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022ac:	4659      	mov	r1, fp
 80022ae:	018b      	lsls	r3, r1, #6
 80022b0:	4651      	mov	r1, sl
 80022b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022b6:	4651      	mov	r1, sl
 80022b8:	018a      	lsls	r2, r1, #6
 80022ba:	4651      	mov	r1, sl
 80022bc:	ebb2 0801 	subs.w	r8, r2, r1
 80022c0:	4659      	mov	r1, fp
 80022c2:	eb63 0901 	sbc.w	r9, r3, r1
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022da:	4690      	mov	r8, r2
 80022dc:	4699      	mov	r9, r3
 80022de:	4623      	mov	r3, r4
 80022e0:	eb18 0303 	adds.w	r3, r8, r3
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	462b      	mov	r3, r5
 80022e8:	eb49 0303 	adc.w	r3, r9, r3
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022fa:	4629      	mov	r1, r5
 80022fc:	028b      	lsls	r3, r1, #10
 80022fe:	4621      	mov	r1, r4
 8002300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002304:	4621      	mov	r1, r4
 8002306:	028a      	lsls	r2, r1, #10
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800230e:	2200      	movs	r2, #0
 8002310:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002312:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002314:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002318:	f7fd ff92 	bl	8000240 <__aeabi_uldivmod>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4613      	mov	r3, r2
 8002322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002324:	e058      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002326:	4b38      	ldr	r3, [pc, #224]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x200>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	099b      	lsrs	r3, r3, #6
 800232c:	2200      	movs	r2, #0
 800232e:	4618      	mov	r0, r3
 8002330:	4611      	mov	r1, r2
 8002332:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	2300      	movs	r3, #0
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
 800233c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002340:	4642      	mov	r2, r8
 8002342:	464b      	mov	r3, r9
 8002344:	f04f 0000 	mov.w	r0, #0
 8002348:	f04f 0100 	mov.w	r1, #0
 800234c:	0159      	lsls	r1, r3, #5
 800234e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002352:	0150      	lsls	r0, r2, #5
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4641      	mov	r1, r8
 800235a:	ebb2 0a01 	subs.w	sl, r2, r1
 800235e:	4649      	mov	r1, r9
 8002360:	eb63 0b01 	sbc.w	fp, r3, r1
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002370:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002374:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002378:	ebb2 040a 	subs.w	r4, r2, sl
 800237c:	eb63 050b 	sbc.w	r5, r3, fp
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	00eb      	lsls	r3, r5, #3
 800238a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800238e:	00e2      	lsls	r2, r4, #3
 8002390:	4614      	mov	r4, r2
 8002392:	461d      	mov	r5, r3
 8002394:	4643      	mov	r3, r8
 8002396:	18e3      	adds	r3, r4, r3
 8002398:	603b      	str	r3, [r7, #0]
 800239a:	464b      	mov	r3, r9
 800239c:	eb45 0303 	adc.w	r3, r5, r3
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ae:	4629      	mov	r1, r5
 80023b0:	028b      	lsls	r3, r1, #10
 80023b2:	4621      	mov	r1, r4
 80023b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023b8:	4621      	mov	r1, r4
 80023ba:	028a      	lsls	r2, r1, #10
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023c2:	2200      	movs	r2, #0
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	61fa      	str	r2, [r7, #28]
 80023c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023cc:	f7fd ff38 	bl	8000240 <__aeabi_uldivmod>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4613      	mov	r3, r2
 80023d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x200>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	3301      	adds	r3, #1
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80023e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023f2:	e002      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023f4:	4b05      	ldr	r3, [pc, #20]	@ (800240c <HAL_RCC_GetSysClockFreq+0x204>)
 80023f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3750      	adds	r7, #80	@ 0x50
 8002400:	46bd      	mov	sp, r7
 8002402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	00f42400 	.word	0x00f42400

08002410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e09d      	b.n	800255e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002426:	2b00      	cmp	r3, #0
 8002428:	d108      	bne.n	800243c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002432:	d009      	beq.n	8002448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
 800243a:	e005      	b.n	8002448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe fafe 	bl	8000a64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800247e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002488:	d902      	bls.n	8002490 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e002      	b.n	8002496 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002494:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800249e:	d007      	beq.n	80024b0 <HAL_SPI_Init+0xa0>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80024a8:	d002      	beq.n	80024b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f2:	ea42 0103 	orr.w	r1, r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	0c1b      	lsrs	r3, r3, #16
 800250c:	f003 0204 	and.w	r2, r3, #4
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800252c:	ea42 0103 	orr.w	r1, r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800254c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	4613      	mov	r3, r2
 8002574:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_SPI_Transmit_DMA+0x20>
 8002584:	2302      	movs	r3, #2
 8002586:	e0d8      	b.n	800273a <HAL_SPI_Transmit_DMA+0x1d2>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d002      	beq.n	80025a2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800259c:	2302      	movs	r3, #2
 800259e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025a0:	e0c6      	b.n	8002730 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_SPI_Transmit_DMA+0x46>
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025b2:	e0bd      	b.n	8002730 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2203      	movs	r2, #3
 80025b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	88fa      	ldrh	r2, [r7, #6]
 80025d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025fe:	d10f      	bne.n	8002620 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800260e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800261e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002624:	4a47      	ldr	r2, [pc, #284]	@ (8002744 <HAL_SPI_Transmit_DMA+0x1dc>)
 8002626:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262c:	4a46      	ldr	r2, [pc, #280]	@ (8002748 <HAL_SPI_Transmit_DMA+0x1e0>)
 800262e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002634:	4a45      	ldr	r2, [pc, #276]	@ (800274c <HAL_SPI_Transmit_DMA+0x1e4>)
 8002636:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263c:	2200      	movs	r2, #0
 800263e:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800264e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002658:	d82d      	bhi.n	80026b6 <HAL_SPI_Transmit_DMA+0x14e>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002664:	d127      	bne.n	80026b6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800266a:	b29b      	uxth	r3, r3
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10f      	bne.n	8002694 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002682:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002688:	b29b      	uxth	r3, r3
 800268a:	085b      	lsrs	r3, r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002692:	e010      	b.n	80026b6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026a2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3301      	adds	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026be:	4619      	mov	r1, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	330c      	adds	r3, #12
 80026c6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026cc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80026ce:	f7fe fd35 	bl	800113c <HAL_DMA_Start_IT>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00c      	beq.n	80026f2 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026dc:	f043 0210 	orr.w	r2, r3, #16
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 80026f0:	e01e      	b.n	8002730 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fc:	2b40      	cmp	r3, #64	@ 0x40
 80026fe:	d007      	beq.n	8002710 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800270e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0220 	orr.w	r2, r2, #32
 800271e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0202 	orr.w	r2, r2, #2
 800272e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002738:	7dfb      	ldrb	r3, [r7, #23]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	080030e1 	.word	0x080030e1
 8002748:	08002efd 	.word	0x08002efd
 800274c:	08003135 	.word	0x08003135

08002750 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d110      	bne.n	800278c <HAL_SPI_Receive_DMA+0x3c>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002772:	d10b      	bne.n	800278c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2204      	movs	r2, #4
 8002778:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f908 	bl	8002998 <HAL_SPI_TransmitReceive_DMA>
 8002788:	4603      	mov	r3, r0
 800278a:	e0fb      	b.n	8002984 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_SPI_Receive_DMA+0x4a>
 8002796:	2302      	movs	r3, #2
 8002798:	e0f4      	b.n	8002984 <HAL_SPI_Receive_DMA+0x234>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d002      	beq.n	80027b4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027b2:	e0e2      	b.n	800297a <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_SPI_Receive_DMA+0x70>
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027c4:	e0d9      	b.n	800297a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2204      	movs	r2, #4
 80027ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	88fa      	ldrh	r2, [r7, #6]
 80027de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	88fa      	ldrh	r2, [r7, #6]
 80027e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800280a:	d10f      	bne.n	800282c <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800281a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800282a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800283a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002844:	d908      	bls.n	8002858 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	e042      	b.n	80028de <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002866:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002872:	d134      	bne.n	80028de <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002882:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800288a:	b29b      	uxth	r3, r3
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d111      	bne.n	80028b8 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028a2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80028b6:	e012      	b.n	80028de <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028c6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e2:	4a2a      	ldr	r2, [pc, #168]	@ (800298c <HAL_SPI_Receive_DMA+0x23c>)
 80028e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ea:	4a29      	ldr	r2, [pc, #164]	@ (8002990 <HAL_SPI_Receive_DMA+0x240>)
 80028ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f2:	4a28      	ldr	r2, [pc, #160]	@ (8002994 <HAL_SPI_Receive_DMA+0x244>)
 80028f4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fa:	2200      	movs	r2, #0
 80028fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	330c      	adds	r3, #12
 8002908:	4619      	mov	r1, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002916:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002918:	f7fe fc10 	bl	800113c <HAL_DMA_Start_IT>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00c      	beq.n	800293c <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002926:	f043 0210 	orr.w	r2, r3, #16
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 800293a:	e01e      	b.n	800297a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002946:	2b40      	cmp	r3, #64	@ 0x40
 8002948:	d007      	beq.n	800295a <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002958:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0220 	orr.w	r2, r2, #32
 8002968:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0201 	orr.w	r2, r2, #1
 8002978:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002982:	7dfb      	ldrb	r3, [r7, #23]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	080030fd 	.word	0x080030fd
 8002990:	08002fa5 	.word	0x08002fa5
 8002994:	08003135 	.word	0x08003135

08002998 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e16c      	b.n	8002c92 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029c6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80029ce:	7dbb      	ldrb	r3, [r7, #22]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d00d      	beq.n	80029f0 <HAL_SPI_TransmitReceive_DMA+0x58>
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029da:	d106      	bne.n	80029ea <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <HAL_SPI_TransmitReceive_DMA+0x52>
 80029e4:	7dbb      	ldrb	r3, [r7, #22]
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d002      	beq.n	80029f0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80029ea:	2302      	movs	r3, #2
 80029ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029ee:	e14b      	b.n	8002c88 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80029fc:	887b      	ldrh	r3, [r7, #2]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a06:	e13f      	b.n	8002c88 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d003      	beq.n	8002a1c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2205      	movs	r2, #5
 8002a18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	887a      	ldrh	r2, [r7, #2]
 8002a32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	887a      	ldrh	r2, [r7, #2]
 8002a3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	887a      	ldrh	r2, [r7, #2]
 8002a46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8002a64:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a6e:	d908      	bls.n	8002a82 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	e06f      	b.n	8002b62 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a90:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a9c:	d126      	bne.n	8002aec <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10f      	bne.n	8002aca <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ab8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ac8:	e010      	b.n	8002aec <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ad8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	085b      	lsrs	r3, r3, #1
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002af6:	d134      	bne.n	8002b62 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b06:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d111      	bne.n	8002b3c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b26:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	085b      	lsrs	r3, r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002b3a:	e012      	b.n	8002b62 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b4a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d108      	bne.n	8002b80 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b72:	4a4a      	ldr	r2, [pc, #296]	@ (8002c9c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8002b74:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7a:	4a49      	ldr	r2, [pc, #292]	@ (8002ca0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8002b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b7e:	e007      	b.n	8002b90 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b84:	4a47      	ldr	r2, [pc, #284]	@ (8002ca4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8002b86:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8c:	4a46      	ldr	r2, [pc, #280]	@ (8002ca8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8002b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	4a45      	ldr	r2, [pc, #276]	@ (8002cac <HAL_SPI_TransmitReceive_DMA+0x314>)
 8002b96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	4619      	mov	r1, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002bb8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002bba:	f7fe fabf 	bl	800113c <HAL_DMA_Start_IT>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00c      	beq.n	8002bde <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc8:	f043 0210 	orr.w	r2, r3, #16
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 8002bdc:	e054      	b.n	8002c88 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c02:	2200      	movs	r2, #0
 8002c04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c16:	4619      	mov	r1, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c24:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002c26:	f7fe fa89 	bl	800113c <HAL_DMA_Start_IT>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00c      	beq.n	8002c4a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c34:	f043 0210 	orr.w	r2, r3, #16
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 8002c48:	e01e      	b.n	8002c88 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c54:	2b40      	cmp	r3, #64	@ 0x40
 8002c56:	d007      	beq.n	8002c68 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c66:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0220 	orr.w	r2, r2, #32
 8002c76:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0202 	orr.w	r2, r2, #2
 8002c86:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	080030fd 	.word	0x080030fd
 8002ca0:	08002fa5 	.word	0x08002fa5
 8002ca4:	08003119 	.word	0x08003119
 8002ca8:	0800304f 	.word	0x0800304f
 8002cac:	08003135 	.word	0x08003135

08002cb0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d009      	beq.n	8002cf0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
    return;
 8002cee:	e0ce      	b.n	8002e8e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <HAL_SPI_IRQHandler+0x5e>
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	4798      	blx	r3
    return;
 8002d0c:	e0bf      	b.n	8002e8e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <HAL_SPI_IRQHandler+0x7e>
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d105      	bne.n	8002d2e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80b0 	beq.w	8002e8e <HAL_SPI_IRQHandler+0x1de>
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80aa 	beq.w	8002e8e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d023      	beq.n	8002d8c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d011      	beq.n	8002d74 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	e00b      	b.n	8002d8c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	693b      	ldr	r3, [r7, #16]
        return;
 8002d8a:	e080      	b.n	8002e8e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d014      	beq.n	8002dc0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9a:	f043 0201 	orr.w	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00c      	beq.n	8002de4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dce:	f043 0208 	orr.w	r2, r3, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d04f      	beq.n	8002e8c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002dfa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d104      	bne.n	8002e18 <HAL_SPI_IRQHandler+0x168>
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d034      	beq.n	8002e82 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0203 	bic.w	r2, r2, #3
 8002e26:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d011      	beq.n	8002e54 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e34:	4a17      	ldr	r2, [pc, #92]	@ (8002e94 <HAL_SPI_IRQHandler+0x1e4>)
 8002e36:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe f9dd 	bl	80011fc <HAL_DMA_Abort_IT>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d016      	beq.n	8002e8a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e60:	4a0c      	ldr	r2, [pc, #48]	@ (8002e94 <HAL_SPI_IRQHandler+0x1e4>)
 8002e62:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe f9c7 	bl	80011fc <HAL_DMA_Abort_IT>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002e80:	e003      	b.n	8002e8a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f830 	bl	8002ee8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002e88:	e000      	b.n	8002e8c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002e8a:	bf00      	nop
    return;
 8002e8c:	bf00      	nop
  }
}
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	08003175 	.word	0x08003175

08002e98 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f0a:	f7fd ff4b 	bl	8000da4 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f1e:	d03b      	beq.n	8002f98 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0220 	bic.w	r2, r2, #32
 8002f2e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0202 	bic.w	r2, r2, #2
 8002f3e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	2164      	movs	r1, #100	@ 0x64
 8002f44:	6978      	ldr	r0, [r7, #20]
 8002f46:	f000 fac5 	bl	80034d4 <SPI_EndRxTxTransaction>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f54:	f043 0220 	orr.w	r2, r3, #32
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002f90:	6978      	ldr	r0, [r7, #20]
 8002f92:	f7ff ffa9 	bl	8002ee8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002f96:	e002      	b.n	8002f9e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002f98:	6978      	ldr	r0, [r7, #20]
 8002f9a:	f7fd fadf 	bl	800055c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb2:	f7fd fef7 	bl	8000da4 <HAL_GetTick>
 8002fb6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fc6:	d03c      	beq.n	8003042 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0220 	bic.w	r2, r2, #32
 8002fd6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10d      	bne.n	8002ffc <SPI_DMAReceiveCplt+0x58>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fe8:	d108      	bne.n	8002ffc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0203 	bic.w	r2, r2, #3
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	e007      	b.n	800300c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	2164      	movs	r1, #100	@ 0x64
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f9e3 	bl	80033dc <SPI_EndRxTransaction>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f7ff ff54 	bl	8002ee8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003040:	e002      	b.n	8003048 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7fd fa74 	bl	8000530 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800305c:	f7fd fea2 	bl	8000da4 <HAL_GetTick>
 8003060:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003070:	d030      	beq.n	80030d4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0220 	bic.w	r2, r2, #32
 8003080:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	2164      	movs	r1, #100	@ 0x64
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fa24 	bl	80034d4 <SPI_EndRxTxTransaction>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003096:	f043 0220 	orr.w	r2, r3, #32
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0203 	bic.w	r2, r2, #3
 80030ac:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff ff0b 	bl	8002ee8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80030d2:	e002      	b.n	80030da <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f7ff fedf 	bl	8002e98 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f7ff fedc 	bl	8002eac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003108:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7ff fed8 	bl	8002ec0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003124:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff fed4 	bl	8002ed4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003140:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0203 	bic.w	r2, r2, #3
 8003150:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003156:	f043 0210 	orr.w	r2, r3, #16
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f7ff febe 	bl	8002ee8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003180:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7ff fea9 	bl	8002ee8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031b0:	f7fd fdf8 	bl	8000da4 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	4413      	add	r3, r2
 80031be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031c0:	f7fd fdf0 	bl	8000da4 <HAL_GetTick>
 80031c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031c6:	4b39      	ldr	r3, [pc, #228]	@ (80032ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	015b      	lsls	r3, r3, #5
 80031cc:	0d1b      	lsrs	r3, r3, #20
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031d6:	e054      	b.n	8003282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031de:	d050      	beq.n	8003282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031e0:	f7fd fde0 	bl	8000da4 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d902      	bls.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d13d      	bne.n	8003272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800320e:	d111      	bne.n	8003234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003218:	d004      	beq.n	8003224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003222:	d107      	bne.n	8003234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800323c:	d10f      	bne.n	800325e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800325c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e017      	b.n	80032a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	3b01      	subs	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4013      	ands	r3, r2
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	429a      	cmp	r2, r3
 800329e:	d19b      	bne.n	80031d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3720      	adds	r7, #32
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000000 	.word	0x20000000

080032b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	@ 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032c2:	f7fd fd6f 	bl	8000da4 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	4413      	add	r3, r2
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80032d2:	f7fd fd67 	bl	8000da4 <HAL_GetTick>
 80032d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	330c      	adds	r3, #12
 80032de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032e0:	4b3d      	ldr	r3, [pc, #244]	@ (80033d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00da      	lsls	r2, r3, #3
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	0d1b      	lsrs	r3, r3, #20
 80032f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032f8:	e060      	b.n	80033bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003300:	d107      	bne.n	8003312 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d104      	bne.n	8003312 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003310:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d050      	beq.n	80033bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800331a:	f7fd fd43 	bl	8000da4 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003326:	429a      	cmp	r2, r3
 8003328:	d902      	bls.n	8003330 <SPI_WaitFifoStateUntilTimeout+0x80>
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	2b00      	cmp	r3, #0
 800332e:	d13d      	bne.n	80033ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800333e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003348:	d111      	bne.n	800336e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003352:	d004      	beq.n	800335e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800335c:	d107      	bne.n	800336e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800336c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003376:	d10f      	bne.n	8003398 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003396:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e010      	b.n	80033ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d196      	bne.n	80032fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3728      	adds	r7, #40	@ 0x28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000000 	.word	0x20000000

080033dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033f0:	d111      	bne.n	8003416 <SPI_EndRxTransaction+0x3a>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033fa:	d004      	beq.n	8003406 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003404:	d107      	bne.n	8003416 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800341e:	d112      	bne.n	8003446 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2200      	movs	r2, #0
 8003428:	2180      	movs	r1, #128	@ 0x80
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f7ff feb8 	bl	80031a0 <SPI_WaitFlagStateUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d021      	beq.n	800347a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343a:	f043 0220 	orr.w	r2, r3, #32
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e03d      	b.n	80034c2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003446:	4b21      	ldr	r3, [pc, #132]	@ (80034cc <SPI_EndRxTransaction+0xf0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a21      	ldr	r2, [pc, #132]	@ (80034d0 <SPI_EndRxTransaction+0xf4>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	0d5b      	lsrs	r3, r3, #21
 8003452:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	3b01      	subs	r3, #1
 8003466:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003472:	2b80      	cmp	r3, #128	@ 0x80
 8003474:	d0f2      	beq.n	800345c <SPI_EndRxTransaction+0x80>
 8003476:	e000      	b.n	800347a <SPI_EndRxTransaction+0x9e>
        break;
 8003478:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003482:	d11d      	bne.n	80034c0 <SPI_EndRxTransaction+0xe4>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800348c:	d004      	beq.n	8003498 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003496:	d113      	bne.n	80034c0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2200      	movs	r2, #0
 80034a0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7ff ff03 	bl	80032b0 <SPI_WaitFifoStateUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e000      	b.n	80034c2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000000 	.word	0x20000000
 80034d0:	165e9f81 	.word	0x165e9f81

080034d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7ff fedf 	bl	80032b0 <SPI_WaitFifoStateUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fc:	f043 0220 	orr.w	r2, r3, #32
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e046      	b.n	8003596 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003508:	4b25      	ldr	r3, [pc, #148]	@ (80035a0 <SPI_EndRxTxTransaction+0xcc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a25      	ldr	r2, [pc, #148]	@ (80035a4 <SPI_EndRxTxTransaction+0xd0>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	0d5b      	lsrs	r3, r3, #21
 8003514:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003526:	d112      	bne.n	800354e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2200      	movs	r2, #0
 8003530:	2180      	movs	r1, #128	@ 0x80
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff fe34 	bl	80031a0 <SPI_WaitFlagStateUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003542:	f043 0220 	orr.w	r2, r3, #32
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e023      	b.n	8003596 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3b01      	subs	r3, #1
 8003558:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003564:	2b80      	cmp	r3, #128	@ 0x80
 8003566:	d0f2      	beq.n	800354e <SPI_EndRxTxTransaction+0x7a>
 8003568:	e000      	b.n	800356c <SPI_EndRxTxTransaction+0x98>
        break;
 800356a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2200      	movs	r2, #0
 8003574:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f7ff fe99 	bl	80032b0 <SPI_WaitFifoStateUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e000      	b.n	8003596 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000000 	.word	0x20000000
 80035a4:	165e9f81 	.word	0x165e9f81

080035a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035be:	f3ef 8305 	mrs	r3, IPSR
 80035c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80035c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10f      	bne.n	80035ea <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ca:	f3ef 8310 	mrs	r3, PRIMASK
 80035ce:	607b      	str	r3, [r7, #4]
  return(result);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d105      	bne.n	80035e2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035d6:	f3ef 8311 	mrs	r3, BASEPRI
 80035da:	603b      	str	r3, [r7, #0]
  return(result);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <osKernelInitialize+0x3a>
 80035e2:	4b0e      	ldr	r3, [pc, #56]	@ (800361c <osKernelInitialize+0x64>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d103      	bne.n	80035f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80035ea:	f06f 0305 	mvn.w	r3, #5
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e00c      	b.n	800360c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80035f2:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <osKernelInitialize+0x64>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d105      	bne.n	8003606 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80035fa:	4b08      	ldr	r3, [pc, #32]	@ (800361c <osKernelInitialize+0x64>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e002      	b.n	800360c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800360c:	68fb      	ldr	r3, [r7, #12]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	200001f0 	.word	0x200001f0

08003620 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003626:	f3ef 8305 	mrs	r3, IPSR
 800362a:	60bb      	str	r3, [r7, #8]
  return(result);
 800362c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003632:	f3ef 8310 	mrs	r3, PRIMASK
 8003636:	607b      	str	r3, [r7, #4]
  return(result);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800363e:	f3ef 8311 	mrs	r3, BASEPRI
 8003642:	603b      	str	r3, [r7, #0]
  return(result);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d007      	beq.n	800365a <osKernelStart+0x3a>
 800364a:	4b0f      	ldr	r3, [pc, #60]	@ (8003688 <osKernelStart+0x68>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d103      	bne.n	800365a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003652:	f06f 0305 	mvn.w	r3, #5
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	e010      	b.n	800367c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800365a:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <osKernelStart+0x68>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d109      	bne.n	8003676 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003662:	f7ff ffa1 	bl	80035a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003666:	4b08      	ldr	r3, [pc, #32]	@ (8003688 <osKernelStart+0x68>)
 8003668:	2202      	movs	r2, #2
 800366a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800366c:	f001 fd96 	bl	800519c <vTaskStartScheduler>
      stat = osOK;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e002      	b.n	800367c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
 800367a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800367c:	68fb      	ldr	r3, [r7, #12]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	200001f0 	.word	0x200001f0

0800368c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800368c:	b580      	push	{r7, lr}
 800368e:	b090      	sub	sp, #64	@ 0x40
 8003690:	af04      	add	r7, sp, #16
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800369c:	f3ef 8305 	mrs	r3, IPSR
 80036a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80036a2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f040 808f 	bne.w	80037c8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036aa:	f3ef 8310 	mrs	r3, PRIMASK
 80036ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036b6:	f3ef 8311 	mrs	r3, BASEPRI
 80036ba:	617b      	str	r3, [r7, #20]
  return(result);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <osThreadNew+0x3e>
 80036c2:	4b44      	ldr	r3, [pc, #272]	@ (80037d4 <osThreadNew+0x148>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d07e      	beq.n	80037c8 <osThreadNew+0x13c>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d07b      	beq.n	80037c8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80036d0:	2380      	movs	r3, #128	@ 0x80
 80036d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80036d4:	2318      	movs	r3, #24
 80036d6:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80036dc:	f04f 33ff 	mov.w	r3, #4294967295
 80036e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d045      	beq.n	8003774 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <osThreadNew+0x6a>
        name = attr->name;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <osThreadNew+0x90>
 800370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370c:	2b38      	cmp	r3, #56	@ 0x38
 800370e:	d805      	bhi.n	800371c <osThreadNew+0x90>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <osThreadNew+0x94>
        return (NULL);
 800371c:	2300      	movs	r3, #0
 800371e:	e054      	b.n	80037ca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00e      	beq.n	8003756 <osThreadNew+0xca>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2ba7      	cmp	r3, #167	@ 0xa7
 800373e:	d90a      	bls.n	8003756 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003744:	2b00      	cmp	r3, #0
 8003746:	d006      	beq.n	8003756 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <osThreadNew+0xca>
        mem = 1;
 8003750:	2301      	movs	r3, #1
 8003752:	623b      	str	r3, [r7, #32]
 8003754:	e010      	b.n	8003778 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10c      	bne.n	8003778 <osThreadNew+0xec>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d108      	bne.n	8003778 <osThreadNew+0xec>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d104      	bne.n	8003778 <osThreadNew+0xec>
          mem = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	623b      	str	r3, [r7, #32]
 8003772:	e001      	b.n	8003778 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d110      	bne.n	80037a0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003786:	9202      	str	r2, [sp, #8]
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f001 fb03 	bl	8004da0 <xTaskCreateStatic>
 800379a:	4603      	mov	r3, r0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	e013      	b.n	80037c8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d110      	bne.n	80037c8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80037a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	f107 0310 	add.w	r3, r7, #16
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f001 fb57 	bl	8004e6c <xTaskCreate>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d001      	beq.n	80037c8 <osThreadNew+0x13c>
          hTask = NULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037c8:	693b      	ldr	r3, [r7, #16]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3730      	adds	r7, #48	@ 0x30
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	200001f0 	.word	0x200001f0

080037d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037e0:	f3ef 8305 	mrs	r3, IPSR
 80037e4:	613b      	str	r3, [r7, #16]
  return(result);
 80037e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10f      	bne.n	800380c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ec:	f3ef 8310 	mrs	r3, PRIMASK
 80037f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d105      	bne.n	8003804 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037f8:	f3ef 8311 	mrs	r3, BASEPRI
 80037fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <osDelay+0x3c>
 8003804:	4b0a      	ldr	r3, [pc, #40]	@ (8003830 <osDelay+0x58>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d103      	bne.n	8003814 <osDelay+0x3c>
    stat = osErrorISR;
 800380c:	f06f 0305 	mvn.w	r3, #5
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	e007      	b.n	8003824 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <osDelay+0x4c>
      vTaskDelay(ticks);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f001 fc84 	bl	800512c <vTaskDelay>
    }
  }

  return (stat);
 8003824:	697b      	ldr	r3, [r7, #20]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	200001f0 	.word	0x200001f0

08003834 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003834:	b580      	push	{r7, lr}
 8003836:	b08c      	sub	sp, #48	@ 0x30
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003840:	2300      	movs	r3, #0
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003844:	f3ef 8305 	mrs	r3, IPSR
 8003848:	61bb      	str	r3, [r7, #24]
  return(result);
 800384a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800384c:	2b00      	cmp	r3, #0
 800384e:	f040 8086 	bne.w	800395e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003852:	f3ef 8310 	mrs	r3, PRIMASK
 8003856:	617b      	str	r3, [r7, #20]
  return(result);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d105      	bne.n	800386a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800385e:	f3ef 8311 	mrs	r3, BASEPRI
 8003862:	613b      	str	r3, [r7, #16]
  return(result);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <osSemaphoreNew+0x3e>
 800386a:	4b3f      	ldr	r3, [pc, #252]	@ (8003968 <osSemaphoreNew+0x134>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d075      	beq.n	800395e <osSemaphoreNew+0x12a>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d072      	beq.n	800395e <osSemaphoreNew+0x12a>
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	429a      	cmp	r2, r3
 800387e:	d86e      	bhi.n	800395e <osSemaphoreNew+0x12a>
    mem = -1;
 8003880:	f04f 33ff 	mov.w	r3, #4294967295
 8003884:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d015      	beq.n	80038b8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <osSemaphoreNew+0x6e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b4f      	cmp	r3, #79	@ 0x4f
 800389a:	d902      	bls.n	80038a2 <osSemaphoreNew+0x6e>
        mem = 1;
 800389c:	2301      	movs	r3, #1
 800389e:	623b      	str	r3, [r7, #32]
 80038a0:	e00c      	b.n	80038bc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d108      	bne.n	80038bc <osSemaphoreNew+0x88>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <osSemaphoreNew+0x88>
          mem = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	623b      	str	r3, [r7, #32]
 80038b6:	e001      	b.n	80038bc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c2:	d04c      	beq.n	800395e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d128      	bne.n	800391c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10a      	bne.n	80038e6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2203      	movs	r2, #3
 80038d6:	9200      	str	r2, [sp, #0]
 80038d8:	2200      	movs	r2, #0
 80038da:	2100      	movs	r1, #0
 80038dc:	2001      	movs	r0, #1
 80038de:	f000 fa57 	bl	8003d90 <xQueueGenericCreateStatic>
 80038e2:	6278      	str	r0, [r7, #36]	@ 0x24
 80038e4:	e005      	b.n	80038f2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80038e6:	2203      	movs	r2, #3
 80038e8:	2100      	movs	r1, #0
 80038ea:	2001      	movs	r0, #1
 80038ec:	f000 fad7 	bl	8003e9e <xQueueGenericCreate>
 80038f0:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d022      	beq.n	800393e <osSemaphoreNew+0x10a>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d01f      	beq.n	800393e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80038fe:	2300      	movs	r3, #0
 8003900:	2200      	movs	r2, #0
 8003902:	2100      	movs	r1, #0
 8003904:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003906:	f000 fba7 	bl	8004058 <xQueueGenericSend>
 800390a:	4603      	mov	r3, r0
 800390c:	2b01      	cmp	r3, #1
 800390e:	d016      	beq.n	800393e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8003910:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003912:	f001 f86f 	bl	80049f4 <vQueueDelete>
            hSemaphore = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
 800391a:	e010      	b.n	800393e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d108      	bne.n	8003934 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	461a      	mov	r2, r3
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fb1d 	bl	8003f6a <xQueueCreateCountingSemaphoreStatic>
 8003930:	6278      	str	r0, [r7, #36]	@ 0x24
 8003932:	e004      	b.n	800393e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fb54 	bl	8003fe4 <xQueueCreateCountingSemaphore>
 800393c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00c      	beq.n	800395e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <osSemaphoreNew+0x11e>
          name = attr->name;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	e001      	b.n	8003956 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003956:	69f9      	ldr	r1, [r7, #28]
 8003958:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800395a:	f001 f999 	bl	8004c90 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003960:	4618      	mov	r0, r3
 8003962:	3728      	adds	r7, #40	@ 0x28
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	200001f0 	.word	0x200001f0

0800396c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003984:	f06f 0303 	mvn.w	r3, #3
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e04b      	b.n	8003a24 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800398c:	f3ef 8305 	mrs	r3, IPSR
 8003990:	617b      	str	r3, [r7, #20]
  return(result);
 8003992:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10f      	bne.n	80039b8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003998:	f3ef 8310 	mrs	r3, PRIMASK
 800399c:	613b      	str	r3, [r7, #16]
  return(result);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d105      	bne.n	80039b0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039a4:	f3ef 8311 	mrs	r3, BASEPRI
 80039a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d026      	beq.n	80039fe <osSemaphoreAcquire+0x92>
 80039b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a30 <osSemaphoreAcquire+0xc4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d122      	bne.n	80039fe <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80039be:	f06f 0303 	mvn.w	r3, #3
 80039c2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80039c4:	e02d      	b.n	8003a22 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	461a      	mov	r2, r3
 80039d0:	2100      	movs	r1, #0
 80039d2:	69b8      	ldr	r0, [r7, #24]
 80039d4:	f000 ff86 	bl	80048e4 <xQueueReceiveFromISR>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d003      	beq.n	80039e6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80039de:	f06f 0302 	mvn.w	r3, #2
 80039e2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80039e4:	e01d      	b.n	8003a22 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01a      	beq.n	8003a22 <osSemaphoreAcquire+0xb6>
 80039ec:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <osSemaphoreAcquire+0xc8>)
 80039ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80039fc:	e011      	b.n	8003a22 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80039fe:	6839      	ldr	r1, [r7, #0]
 8003a00:	69b8      	ldr	r0, [r7, #24]
 8003a02:	f000 fe57 	bl	80046b4 <xQueueSemaphoreTake>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d00b      	beq.n	8003a24 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8003a12:	f06f 0301 	mvn.w	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	e004      	b.n	8003a24 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8003a1a:	f06f 0302 	mvn.w	r3, #2
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	e000      	b.n	8003a24 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8003a22:	bf00      	nop
      }
    }
  }

  return (stat);
 8003a24:	69fb      	ldr	r3, [r7, #28]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200001f0 	.word	0x200001f0
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003a4e:	f06f 0303 	mvn.w	r3, #3
 8003a52:	61fb      	str	r3, [r7, #28]
 8003a54:	e03e      	b.n	8003ad4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a56:	f3ef 8305 	mrs	r3, IPSR
 8003a5a:	617b      	str	r3, [r7, #20]
  return(result);
 8003a5c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a62:	f3ef 8310 	mrs	r3, PRIMASK
 8003a66:	613b      	str	r3, [r7, #16]
  return(result);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a6e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a72:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01e      	beq.n	8003ab8 <osSemaphoreRelease+0x80>
 8003a7a:	4b19      	ldr	r3, [pc, #100]	@ (8003ae0 <osSemaphoreRelease+0xa8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d11a      	bne.n	8003ab8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003a86:	f107 0308 	add.w	r3, r7, #8
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	69b8      	ldr	r0, [r7, #24]
 8003a8e:	f000 fc90 	bl	80043b2 <xQueueGiveFromISR>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d003      	beq.n	8003aa0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003a98:	f06f 0302 	mvn.w	r3, #2
 8003a9c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003a9e:	e018      	b.n	8003ad2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d015      	beq.n	8003ad2 <osSemaphoreRelease+0x9a>
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae4 <osSemaphoreRelease+0xac>)
 8003aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003ab6:	e00c      	b.n	8003ad2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2200      	movs	r2, #0
 8003abc:	2100      	movs	r1, #0
 8003abe:	69b8      	ldr	r0, [r7, #24]
 8003ac0:	f000 faca 	bl	8004058 <xQueueGenericSend>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d004      	beq.n	8003ad4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003aca:	f06f 0302 	mvn.w	r3, #2
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	e000      	b.n	8003ad4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003ad2:	bf00      	nop
    }
  }

  return (stat);
 8003ad4:	69fb      	ldr	r3, [r7, #28]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3720      	adds	r7, #32
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	200001f0 	.word	0x200001f0
 8003ae4:	e000ed04 	.word	0xe000ed04

08003ae8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4a07      	ldr	r2, [pc, #28]	@ (8003b14 <vApplicationGetIdleTaskMemory+0x2c>)
 8003af8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	4a06      	ldr	r2, [pc, #24]	@ (8003b18 <vApplicationGetIdleTaskMemory+0x30>)
 8003afe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2280      	movs	r2, #128	@ 0x80
 8003b04:	601a      	str	r2, [r3, #0]
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	200001f4 	.word	0x200001f4
 8003b18:	2000029c 	.word	0x2000029c

08003b1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a07      	ldr	r2, [pc, #28]	@ (8003b48 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4a06      	ldr	r2, [pc, #24]	@ (8003b4c <vApplicationGetTimerTaskMemory+0x30>)
 8003b32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b3a:	601a      	str	r2, [r3, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	2000049c 	.word	0x2000049c
 8003b4c:	20000544 	.word	0x20000544

08003b50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f103 0208 	add.w	r2, r3, #8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295
 8003b68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f103 0208 	add.w	r2, r3, #8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f103 0208 	add.w	r2, r3, #8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c08:	d103      	bne.n	8003c12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	e00c      	b.n	8003c2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3308      	adds	r3, #8
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	e002      	b.n	8003c20 <vListInsert+0x2e>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d2f6      	bcs.n	8003c1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	601a      	str	r2, [r3, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6892      	ldr	r2, [r2, #8]
 8003c7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6852      	ldr	r2, [r2, #4]
 8003c84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d103      	bne.n	8003c98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	1e5a      	subs	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10d      	bne.n	8003ce8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd0:	b672      	cpsid	i
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	b662      	cpsie	i
 8003ce0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ce2:	bf00      	nop
 8003ce4:	bf00      	nop
 8003ce6:	e7fd      	b.n	8003ce4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003ce8:	f002 fd30 	bl	800674c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf4:	68f9      	ldr	r1, [r7, #12]
 8003cf6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	441a      	add	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	68f9      	ldr	r1, [r7, #12]
 8003d1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	441a      	add	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	22ff      	movs	r2, #255	@ 0xff
 8003d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	22ff      	movs	r2, #255	@ 0xff
 8003d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d114      	bne.n	8003d68 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01a      	beq.n	8003d7c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3310      	adds	r3, #16
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 fcd2 	bl	80056f4 <xTaskRemoveFromEventList>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d012      	beq.n	8003d7c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d56:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <xQueueGenericReset+0xd4>)
 8003d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	e009      	b.n	8003d7c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3310      	adds	r3, #16
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff feef 	bl	8003b50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3324      	adds	r3, #36	@ 0x24
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff feea 	bl	8003b50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d7c:	f002 fd1c 	bl	80067b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d80:	2301      	movs	r3, #1
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	e000ed04 	.word	0xe000ed04

08003d90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08e      	sub	sp, #56	@ 0x38
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10d      	bne.n	8003dc0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da8:	b672      	cpsid	i
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	b662      	cpsie	i
 8003db8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003dba:	bf00      	nop
 8003dbc:	bf00      	nop
 8003dbe:	e7fd      	b.n	8003dbc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dca:	b672      	cpsid	i
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	b662      	cpsie	i
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	e7fd      	b.n	8003dde <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <xQueueGenericCreateStatic+0x5e>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <xQueueGenericCreateStatic+0x62>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <xQueueGenericCreateStatic+0x64>
 8003df2:	2300      	movs	r3, #0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10d      	bne.n	8003e14 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8003df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfc:	b672      	cpsid	i
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	b662      	cpsie	i
 8003e0c:	623b      	str	r3, [r7, #32]
}
 8003e0e:	bf00      	nop
 8003e10:	bf00      	nop
 8003e12:	e7fd      	b.n	8003e10 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <xQueueGenericCreateStatic+0x90>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <xQueueGenericCreateStatic+0x94>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <xQueueGenericCreateStatic+0x96>
 8003e24:	2300      	movs	r3, #0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10d      	bne.n	8003e46 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2e:	b672      	cpsid	i
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	b662      	cpsie	i
 8003e3e:	61fb      	str	r3, [r7, #28]
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	e7fd      	b.n	8003e42 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e46:	2350      	movs	r3, #80	@ 0x50
 8003e48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b50      	cmp	r3, #80	@ 0x50
 8003e4e:	d00d      	beq.n	8003e6c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	b672      	cpsid	i
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	b662      	cpsie	i
 8003e64:	61bb      	str	r3, [r7, #24]
}
 8003e66:	bf00      	nop
 8003e68:	bf00      	nop
 8003e6a:	e7fd      	b.n	8003e68 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00d      	beq.n	8003e94 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f848 	bl	8003f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3730      	adds	r7, #48	@ 0x30
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b08a      	sub	sp, #40	@ 0x28
 8003ea2:	af02      	add	r7, sp, #8
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10d      	bne.n	8003ece <xQueueGenericCreate+0x30>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb6:	b672      	cpsid	i
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	b662      	cpsie	i
 8003ec6:	613b      	str	r3, [r7, #16]
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	e7fd      	b.n	8003eca <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	e004      	b.n	8003ee4 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	3350      	adds	r3, #80	@ 0x50
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f002 fd5d 	bl	80069a8 <pvPortMalloc>
 8003eee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d011      	beq.n	8003f1a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	3350      	adds	r3, #80	@ 0x50
 8003efe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f08:	79fa      	ldrb	r2, [r7, #7]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f805 	bl	8003f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
	}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e002      	b.n	8003f46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f52:	2101      	movs	r1, #1
 8003f54:	69b8      	ldr	r0, [r7, #24]
 8003f56:	f7ff feaf 	bl	8003cb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b08a      	sub	sp, #40	@ 0x28
 8003f6e:	af02      	add	r7, sp, #8
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10d      	bne.n	8003f98 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f80:	b672      	cpsid	i
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	b662      	cpsie	i
 8003f90:	61bb      	str	r3, [r7, #24]
}
 8003f92:	bf00      	nop
 8003f94:	bf00      	nop
 8003f96:	e7fd      	b.n	8003f94 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d90d      	bls.n	8003fbc <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa4:	b672      	cpsid	i
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	b662      	cpsie	i
 8003fb4:	617b      	str	r3, [r7, #20]
}
 8003fb6:	bf00      	nop
 8003fb8:	bf00      	nop
 8003fba:	e7fd      	b.n	8003fb8 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f7ff fee2 	bl	8003d90 <xQueueGenericCreateStatic>
 8003fcc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003fda:	69fb      	ldr	r3, [r7, #28]
	}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10d      	bne.n	8004010 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff8:	b672      	cpsid	i
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	b662      	cpsie	i
 8004008:	613b      	str	r3, [r7, #16]
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	d90d      	bls.n	8004034 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401c:	b672      	cpsid	i
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	b662      	cpsie	i
 800402c:	60fb      	str	r3, [r7, #12]
}
 800402e:	bf00      	nop
 8004030:	bf00      	nop
 8004032:	e7fd      	b.n	8004030 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004034:	2202      	movs	r2, #2
 8004036:	2100      	movs	r1, #0
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ff30 	bl	8003e9e <xQueueGenericCreate>
 800403e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800404c:	697b      	ldr	r3, [r7, #20]
	}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08e      	sub	sp, #56	@ 0x38
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004066:	2300      	movs	r3, #0
 8004068:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10d      	bne.n	8004090 <xQueueGenericSend+0x38>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004078:	b672      	cpsid	i
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	b662      	cpsie	i
 8004088:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800408a:	bf00      	nop
 800408c:	bf00      	nop
 800408e:	e7fd      	b.n	800408c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <xQueueGenericSend+0x46>
 8004096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <xQueueGenericSend+0x4a>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <xQueueGenericSend+0x4c>
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10d      	bne.n	80040c4 <xQueueGenericSend+0x6c>
	__asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ac:	b672      	cpsid	i
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	b662      	cpsie	i
 80040bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040be:	bf00      	nop
 80040c0:	bf00      	nop
 80040c2:	e7fd      	b.n	80040c0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d103      	bne.n	80040d2 <xQueueGenericSend+0x7a>
 80040ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <xQueueGenericSend+0x7e>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <xQueueGenericSend+0x80>
 80040d6:	2300      	movs	r3, #0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10d      	bne.n	80040f8 <xQueueGenericSend+0xa0>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e0:	b672      	cpsid	i
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	b662      	cpsie	i
 80040f0:	623b      	str	r3, [r7, #32]
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040f8:	f001 fcca 	bl	8005a90 <xTaskGetSchedulerState>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d102      	bne.n	8004108 <xQueueGenericSend+0xb0>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <xQueueGenericSend+0xb4>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <xQueueGenericSend+0xb6>
 800410c:	2300      	movs	r3, #0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10d      	bne.n	800412e <xQueueGenericSend+0xd6>
	__asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004116:	b672      	cpsid	i
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	b662      	cpsie	i
 8004126:	61fb      	str	r3, [r7, #28]
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	e7fd      	b.n	800412a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800412e:	f002 fb0d 	bl	800674c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413a:	429a      	cmp	r2, r3
 800413c:	d302      	bcc.n	8004144 <xQueueGenericSend+0xec>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d129      	bne.n	8004198 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800414a:	f000 fc91 	bl	8004a70 <prvCopyDataToQueue>
 800414e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	2b00      	cmp	r3, #0
 8004156:	d010      	beq.n	800417a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415a:	3324      	adds	r3, #36	@ 0x24
 800415c:	4618      	mov	r0, r3
 800415e:	f001 fac9 	bl	80056f4 <xTaskRemoveFromEventList>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d013      	beq.n	8004190 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004168:	4b3f      	ldr	r3, [pc, #252]	@ (8004268 <xQueueGenericSend+0x210>)
 800416a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	e00a      	b.n	8004190 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800417a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004180:	4b39      	ldr	r3, [pc, #228]	@ (8004268 <xQueueGenericSend+0x210>)
 8004182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004190:	f002 fb12 	bl	80067b8 <vPortExitCritical>
				return pdPASS;
 8004194:	2301      	movs	r3, #1
 8004196:	e063      	b.n	8004260 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800419e:	f002 fb0b 	bl	80067b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e05c      	b.n	8004260 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041ac:	f107 0314 	add.w	r3, r7, #20
 80041b0:	4618      	mov	r0, r3
 80041b2:	f001 fb05 	bl	80057c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041b6:	2301      	movs	r3, #1
 80041b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041ba:	f002 fafd 	bl	80067b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041be:	f001 f861 	bl	8005284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041c2:	f002 fac3 	bl	800674c <vPortEnterCritical>
 80041c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041cc:	b25b      	sxtb	r3, r3
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d103      	bne.n	80041dc <xQueueGenericSend+0x184>
 80041d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041e2:	b25b      	sxtb	r3, r3
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e8:	d103      	bne.n	80041f2 <xQueueGenericSend+0x19a>
 80041ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041f2:	f002 fae1 	bl	80067b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041f6:	1d3a      	adds	r2, r7, #4
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 faf4 	bl	80057ec <xTaskCheckForTimeOut>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d124      	bne.n	8004254 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800420a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800420c:	f000 fd28 	bl	8004c60 <prvIsQueueFull>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d018      	beq.n	8004248 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004218:	3310      	adds	r3, #16
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	4611      	mov	r1, r2
 800421e:	4618      	mov	r0, r3
 8004220:	f001 fa12 	bl	8005648 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004226:	f000 fcb3 	bl	8004b90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800422a:	f001 f839 	bl	80052a0 <xTaskResumeAll>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	f47f af7c 	bne.w	800412e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8004236:	4b0c      	ldr	r3, [pc, #48]	@ (8004268 <xQueueGenericSend+0x210>)
 8004238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	e772      	b.n	800412e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800424a:	f000 fca1 	bl	8004b90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800424e:	f001 f827 	bl	80052a0 <xTaskResumeAll>
 8004252:	e76c      	b.n	800412e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004256:	f000 fc9b 	bl	8004b90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800425a:	f001 f821 	bl	80052a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800425e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004260:	4618      	mov	r0, r3
 8004262:	3738      	adds	r7, #56	@ 0x38
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08e      	sub	sp, #56	@ 0x38
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10d      	bne.n	80042a0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004288:	b672      	cpsid	i
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	b662      	cpsie	i
 8004298:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800429a:	bf00      	nop
 800429c:	bf00      	nop
 800429e:	e7fd      	b.n	800429c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <xQueueGenericSendFromISR+0x42>
 80042a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <xQueueGenericSendFromISR+0x46>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <xQueueGenericSendFromISR+0x48>
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10d      	bne.n	80042d4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042bc:	b672      	cpsid	i
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	b662      	cpsie	i
 80042cc:	623b      	str	r3, [r7, #32]
}
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	e7fd      	b.n	80042d0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d103      	bne.n	80042e2 <xQueueGenericSendFromISR+0x76>
 80042da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <xQueueGenericSendFromISR+0x7a>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <xQueueGenericSendFromISR+0x7c>
 80042e6:	2300      	movs	r3, #0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10d      	bne.n	8004308 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f0:	b672      	cpsid	i
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	b662      	cpsie	i
 8004300:	61fb      	str	r3, [r7, #28]
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	e7fd      	b.n	8004304 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004308:	f002 fb08 	bl	800691c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800430c:	f3ef 8211 	mrs	r2, BASEPRI
 8004310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004314:	b672      	cpsid	i
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	b662      	cpsie	i
 8004324:	61ba      	str	r2, [r7, #24]
 8004326:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004328:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800432a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004334:	429a      	cmp	r2, r3
 8004336:	d302      	bcc.n	800433e <xQueueGenericSendFromISR+0xd2>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d12c      	bne.n	8004398 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800433e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004340:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800434e:	f000 fb8f 	bl	8004a70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004352:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d112      	bne.n	8004382 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800435c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	2b00      	cmp	r3, #0
 8004362:	d016      	beq.n	8004392 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	3324      	adds	r3, #36	@ 0x24
 8004368:	4618      	mov	r0, r3
 800436a:	f001 f9c3 	bl	80056f4 <xTaskRemoveFromEventList>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00e      	beq.n	8004392 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	e007      	b.n	8004392 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004382:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004386:	3301      	adds	r3, #1
 8004388:	b2db      	uxtb	r3, r3
 800438a:	b25a      	sxtb	r2, r3
 800438c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004392:	2301      	movs	r3, #1
 8004394:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004396:	e001      	b.n	800439c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004398:	2300      	movs	r3, #0
 800439a:	637b      	str	r3, [r7, #52]	@ 0x34
 800439c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3738      	adds	r7, #56	@ 0x38
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b08e      	sub	sp, #56	@ 0x38
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80043c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10d      	bne.n	80043e2 <xQueueGiveFromISR+0x30>
	__asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ca:	b672      	cpsid	i
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	b662      	cpsie	i
 80043da:	623b      	str	r3, [r7, #32]
}
 80043dc:	bf00      	nop
 80043de:	bf00      	nop
 80043e0:	e7fd      	b.n	80043de <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80043e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00d      	beq.n	8004406 <xQueueGiveFromISR+0x54>
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ee:	b672      	cpsid	i
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	b662      	cpsie	i
 80043fe:	61fb      	str	r3, [r7, #28]
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	e7fd      	b.n	8004402 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <xQueueGiveFromISR+0x64>
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <xQueueGiveFromISR+0x68>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <xQueueGiveFromISR+0x6a>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10d      	bne.n	800443c <xQueueGiveFromISR+0x8a>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004424:	b672      	cpsid	i
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	b662      	cpsie	i
 8004434:	61bb      	str	r3, [r7, #24]
}
 8004436:	bf00      	nop
 8004438:	bf00      	nop
 800443a:	e7fd      	b.n	8004438 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800443c:	f002 fa6e 	bl	800691c <vPortValidateInterruptPriority>
	__asm volatile
 8004440:	f3ef 8211 	mrs	r2, BASEPRI
 8004444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004448:	b672      	cpsid	i
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	b662      	cpsie	i
 8004458:	617a      	str	r2, [r7, #20]
 800445a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800445c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800445e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004464:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800446c:	429a      	cmp	r2, r3
 800446e:	d22b      	bcs.n	80044c8 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004472:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800447a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004480:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004482:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d112      	bne.n	80044b2 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800448c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004490:	2b00      	cmp	r3, #0
 8004492:	d016      	beq.n	80044c2 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004496:	3324      	adds	r3, #36	@ 0x24
 8004498:	4618      	mov	r0, r3
 800449a:	f001 f92b 	bl	80056f4 <xTaskRemoveFromEventList>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00e      	beq.n	80044c2 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	e007      	b.n	80044c2 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044b6:	3301      	adds	r3, #1
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	b25a      	sxtb	r2, r3
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80044c2:	2301      	movs	r3, #1
 80044c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c6:	e001      	b.n	80044cc <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80044cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ce:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f383 8811 	msr	BASEPRI, r3
}
 80044d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3738      	adds	r7, #56	@ 0x38
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08c      	sub	sp, #48	@ 0x30
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10d      	bne.n	800451a <xQueueReceive+0x36>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004502:	b672      	cpsid	i
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	b662      	cpsie	i
 8004512:	623b      	str	r3, [r7, #32]
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	e7fd      	b.n	8004516 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d103      	bne.n	8004528 <xQueueReceive+0x44>
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <xQueueReceive+0x48>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <xQueueReceive+0x4a>
 800452c:	2300      	movs	r3, #0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10d      	bne.n	800454e <xQueueReceive+0x6a>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004536:	b672      	cpsid	i
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	b662      	cpsie	i
 8004546:	61fb      	str	r3, [r7, #28]
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop
 800454c:	e7fd      	b.n	800454a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800454e:	f001 fa9f 	bl	8005a90 <xTaskGetSchedulerState>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d102      	bne.n	800455e <xQueueReceive+0x7a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <xQueueReceive+0x7e>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <xQueueReceive+0x80>
 8004562:	2300      	movs	r3, #0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10d      	bne.n	8004584 <xQueueReceive+0xa0>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456c:	b672      	cpsid	i
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	b662      	cpsie	i
 800457c:	61bb      	str	r3, [r7, #24]
}
 800457e:	bf00      	nop
 8004580:	bf00      	nop
 8004582:	e7fd      	b.n	8004580 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004584:	f002 f8e2 	bl	800674c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01f      	beq.n	80045d4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004598:	f000 fad4 	bl	8004b44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	1e5a      	subs	r2, r3, #1
 80045a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00f      	beq.n	80045cc <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ae:	3310      	adds	r3, #16
 80045b0:	4618      	mov	r0, r3
 80045b2:	f001 f89f 	bl	80056f4 <xTaskRemoveFromEventList>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d007      	beq.n	80045cc <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045bc:	4b3c      	ldr	r3, [pc, #240]	@ (80046b0 <xQueueReceive+0x1cc>)
 80045be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045cc:	f002 f8f4 	bl	80067b8 <vPortExitCritical>
				return pdPASS;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e069      	b.n	80046a8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d103      	bne.n	80045e2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045da:	f002 f8ed 	bl	80067b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045de:	2300      	movs	r3, #0
 80045e0:	e062      	b.n	80046a8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045e8:	f107 0310 	add.w	r3, r7, #16
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 f8e7 	bl	80057c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045f2:	2301      	movs	r3, #1
 80045f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045f6:	f002 f8df 	bl	80067b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045fa:	f000 fe43 	bl	8005284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045fe:	f002 f8a5 	bl	800674c <vPortEnterCritical>
 8004602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004608:	b25b      	sxtb	r3, r3
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d103      	bne.n	8004618 <xQueueReceive+0x134>
 8004610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800461e:	b25b      	sxtb	r3, r3
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d103      	bne.n	800462e <xQueueReceive+0x14a>
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800462e:	f002 f8c3 	bl	80067b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004632:	1d3a      	adds	r2, r7, #4
 8004634:	f107 0310 	add.w	r3, r7, #16
 8004638:	4611      	mov	r1, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f001 f8d6 	bl	80057ec <xTaskCheckForTimeOut>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d123      	bne.n	800468e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004648:	f000 faf4 	bl	8004c34 <prvIsQueueEmpty>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d017      	beq.n	8004682 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004654:	3324      	adds	r3, #36	@ 0x24
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	4611      	mov	r1, r2
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fff4 	bl	8005648 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004660:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004662:	f000 fa95 	bl	8004b90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004666:	f000 fe1b 	bl	80052a0 <xTaskResumeAll>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d189      	bne.n	8004584 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8004670:	4b0f      	ldr	r3, [pc, #60]	@ (80046b0 <xQueueReceive+0x1cc>)
 8004672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	e780      	b.n	8004584 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004684:	f000 fa84 	bl	8004b90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004688:	f000 fe0a 	bl	80052a0 <xTaskResumeAll>
 800468c:	e77a      	b.n	8004584 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800468e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004690:	f000 fa7e 	bl	8004b90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004694:	f000 fe04 	bl	80052a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004698:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800469a:	f000 facb 	bl	8004c34 <prvIsQueueEmpty>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f43f af6f 	beq.w	8004584 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3730      	adds	r7, #48	@ 0x30
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08e      	sub	sp, #56	@ 0x38
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80046be:	2300      	movs	r3, #0
 80046c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10d      	bne.n	80046ec <xQueueSemaphoreTake+0x38>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d4:	b672      	cpsid	i
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	b662      	cpsie	i
 80046e4:	623b      	str	r3, [r7, #32]
}
 80046e6:	bf00      	nop
 80046e8:	bf00      	nop
 80046ea:	e7fd      	b.n	80046e8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00d      	beq.n	8004710 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f8:	b672      	cpsid	i
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	b662      	cpsie	i
 8004708:	61fb      	str	r3, [r7, #28]
}
 800470a:	bf00      	nop
 800470c:	bf00      	nop
 800470e:	e7fd      	b.n	800470c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004710:	f001 f9be 	bl	8005a90 <xTaskGetSchedulerState>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <xQueueSemaphoreTake+0x6c>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <xQueueSemaphoreTake+0x70>
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <xQueueSemaphoreTake+0x72>
 8004724:	2300      	movs	r3, #0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10d      	bne.n	8004746 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472e:	b672      	cpsid	i
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	b662      	cpsie	i
 800473e:	61bb      	str	r3, [r7, #24]
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	e7fd      	b.n	8004742 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004746:	f002 f801 	bl	800674c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800474a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800474c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004752:	2b00      	cmp	r3, #0
 8004754:	d024      	beq.n	80047a0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004758:	1e5a      	subs	r2, r3, #1
 800475a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800475e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d104      	bne.n	8004770 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004766:	f001 fb15 	bl	8005d94 <pvTaskIncrementMutexHeldCount>
 800476a:	4602      	mov	r2, r0
 800476c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00f      	beq.n	8004798 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477a:	3310      	adds	r3, #16
 800477c:	4618      	mov	r0, r3
 800477e:	f000 ffb9 	bl	80056f4 <xTaskRemoveFromEventList>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004788:	4b55      	ldr	r3, [pc, #340]	@ (80048e0 <xQueueSemaphoreTake+0x22c>)
 800478a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004798:	f002 f80e 	bl	80067b8 <vPortExitCritical>
				return pdPASS;
 800479c:	2301      	movs	r3, #1
 800479e:	e09a      	b.n	80048d6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d114      	bne.n	80047d0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00d      	beq.n	80047c8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b0:	b672      	cpsid	i
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	b662      	cpsie	i
 80047c0:	617b      	str	r3, [r7, #20]
}
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
 80047c6:	e7fd      	b.n	80047c4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80047c8:	f001 fff6 	bl	80067b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e082      	b.n	80048d6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047d6:	f107 030c 	add.w	r3, r7, #12
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fff0 	bl	80057c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047e0:	2301      	movs	r3, #1
 80047e2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047e4:	f001 ffe8 	bl	80067b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047e8:	f000 fd4c 	bl	8005284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047ec:	f001 ffae 	bl	800674c <vPortEnterCritical>
 80047f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047f6:	b25b      	sxtb	r3, r3
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d103      	bne.n	8004806 <xQueueSemaphoreTake+0x152>
 80047fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004808:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800480c:	b25b      	sxtb	r3, r3
 800480e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004812:	d103      	bne.n	800481c <xQueueSemaphoreTake+0x168>
 8004814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800481c:	f001 ffcc 	bl	80067b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004820:	463a      	mov	r2, r7
 8004822:	f107 030c 	add.w	r3, r7, #12
 8004826:	4611      	mov	r1, r2
 8004828:	4618      	mov	r0, r3
 800482a:	f000 ffdf 	bl	80057ec <xTaskCheckForTimeOut>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d132      	bne.n	800489a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004834:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004836:	f000 f9fd 	bl	8004c34 <prvIsQueueEmpty>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d026      	beq.n	800488e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d109      	bne.n	800485c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8004848:	f001 ff80 	bl	800674c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800484c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	4618      	mov	r0, r3
 8004852:	f001 f93b 	bl	8005acc <xTaskPriorityInherit>
 8004856:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004858:	f001 ffae 	bl	80067b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800485c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485e:	3324      	adds	r3, #36	@ 0x24
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f000 feef 	bl	8005648 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800486a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800486c:	f000 f990 	bl	8004b90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004870:	f000 fd16 	bl	80052a0 <xTaskResumeAll>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	f47f af65 	bne.w	8004746 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800487c:	4b18      	ldr	r3, [pc, #96]	@ (80048e0 <xQueueSemaphoreTake+0x22c>)
 800487e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	e75b      	b.n	8004746 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800488e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004890:	f000 f97e 	bl	8004b90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004894:	f000 fd04 	bl	80052a0 <xTaskResumeAll>
 8004898:	e755      	b.n	8004746 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800489a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800489c:	f000 f978 	bl	8004b90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048a0:	f000 fcfe 	bl	80052a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048a6:	f000 f9c5 	bl	8004c34 <prvIsQueueEmpty>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f43f af4a 	beq.w	8004746 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80048b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00d      	beq.n	80048d4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80048b8:	f001 ff48 	bl	800674c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80048bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048be:	f000 f8bf 	bl	8004a40 <prvGetDisinheritPriorityAfterTimeout>
 80048c2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80048c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 f9da 	bl	8005c84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80048d0:	f001 ff72 	bl	80067b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3738      	adds	r7, #56	@ 0x38
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	e000ed04 	.word	0xe000ed04

080048e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08e      	sub	sp, #56	@ 0x38
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80048f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10d      	bne.n	8004916 <xQueueReceiveFromISR+0x32>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fe:	b672      	cpsid	i
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	b662      	cpsie	i
 800490e:	623b      	str	r3, [r7, #32]
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	e7fd      	b.n	8004912 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d103      	bne.n	8004924 <xQueueReceiveFromISR+0x40>
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <xQueueReceiveFromISR+0x44>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <xQueueReceiveFromISR+0x46>
 8004928:	2300      	movs	r3, #0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10d      	bne.n	800494a <xQueueReceiveFromISR+0x66>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	b672      	cpsid	i
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	b662      	cpsie	i
 8004942:	61fb      	str	r3, [r7, #28]
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	e7fd      	b.n	8004946 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800494a:	f001 ffe7 	bl	800691c <vPortValidateInterruptPriority>
	__asm volatile
 800494e:	f3ef 8211 	mrs	r2, BASEPRI
 8004952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004956:	b672      	cpsid	i
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	b662      	cpsie	i
 8004966:	61ba      	str	r2, [r7, #24]
 8004968:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800496a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800496c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800496e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004972:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004976:	2b00      	cmp	r3, #0
 8004978:	d02f      	beq.n	80049da <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800497a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004988:	f000 f8dc 	bl	8004b44 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800498c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498e:	1e5a      	subs	r2, r3, #1
 8004990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004992:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004994:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d112      	bne.n	80049c4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d016      	beq.n	80049d4 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a8:	3310      	adds	r3, #16
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fea2 	bl	80056f4 <xTaskRemoveFromEventList>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00e      	beq.n	80049d4 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00b      	beq.n	80049d4 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e007      	b.n	80049d4 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80049c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049c8:	3301      	adds	r3, #1
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	b25a      	sxtb	r2, r3
 80049ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80049d4:	2301      	movs	r3, #1
 80049d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d8:	e001      	b.n	80049de <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80049da:	2300      	movs	r3, #0
 80049dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80049de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f383 8811 	msr	BASEPRI, r3
}
 80049e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3738      	adds	r7, #56	@ 0x38
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10d      	bne.n	8004a22 <vQueueDelete+0x2e>
	__asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0a:	b672      	cpsid	i
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	b662      	cpsie	i
 8004a1a:	60bb      	str	r3, [r7, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	e7fd      	b.n	8004a1e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f95e 	bl	8004ce4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d102      	bne.n	8004a38 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f002 f886 	bl	8006b44 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d006      	beq.n	8004a5e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e001      	b.n	8004a62 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004a62:	68fb      	ldr	r3, [r7, #12]
	}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10d      	bne.n	8004aaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d14d      	bne.n	8004b32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 f87e 	bl	8005b9c <xTaskPriorityDisinherit>
 8004aa0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	609a      	str	r2, [r3, #8]
 8004aa8:	e043      	b.n	8004b32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d119      	bne.n	8004ae4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6858      	ldr	r0, [r3, #4]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	461a      	mov	r2, r3
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	f002 f9e2 	bl	8006e84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac8:	441a      	add	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d32b      	bcc.n	8004b32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	605a      	str	r2, [r3, #4]
 8004ae2:	e026      	b.n	8004b32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	68d8      	ldr	r0, [r3, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	461a      	mov	r2, r3
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	f002 f9c8 	bl	8006e84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afc:	425b      	negs	r3, r3
 8004afe:	441a      	add	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d207      	bcs.n	8004b20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b18:	425b      	negs	r3, r3
 8004b1a:	441a      	add	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d105      	bne.n	8004b32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004b3a:	697b      	ldr	r3, [r7, #20]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d018      	beq.n	8004b88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	441a      	add	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d303      	bcc.n	8004b78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68d9      	ldr	r1, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b80:	461a      	mov	r2, r3
 8004b82:	6838      	ldr	r0, [r7, #0]
 8004b84:	f002 f97e 	bl	8006e84 <memcpy>
	}
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b98:	f001 fdd8 	bl	800674c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ba2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ba4:	e011      	b.n	8004bca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d012      	beq.n	8004bd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3324      	adds	r3, #36	@ 0x24
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fd9e 	bl	80056f4 <xTaskRemoveFromEventList>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bbe:	f000 fe7d 	bl	80058bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	dce9      	bgt.n	8004ba6 <prvUnlockQueue+0x16>
 8004bd2:	e000      	b.n	8004bd6 <prvUnlockQueue+0x46>
					break;
 8004bd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	22ff      	movs	r2, #255	@ 0xff
 8004bda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004bde:	f001 fdeb 	bl	80067b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004be2:	f001 fdb3 	bl	800674c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bee:	e011      	b.n	8004c14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d012      	beq.n	8004c1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3310      	adds	r3, #16
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fd79 	bl	80056f4 <xTaskRemoveFromEventList>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c08:	f000 fe58 	bl	80058bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c0c:	7bbb      	ldrb	r3, [r7, #14]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	dce9      	bgt.n	8004bf0 <prvUnlockQueue+0x60>
 8004c1c:	e000      	b.n	8004c20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	22ff      	movs	r2, #255	@ 0xff
 8004c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004c28:	f001 fdc6 	bl	80067b8 <vPortExitCritical>
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c3c:	f001 fd86 	bl	800674c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e001      	b.n	8004c52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c52:	f001 fdb1 	bl	80067b8 <vPortExitCritical>

	return xReturn;
 8004c56:	68fb      	ldr	r3, [r7, #12]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c68:	f001 fd70 	bl	800674c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d102      	bne.n	8004c7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	e001      	b.n	8004c82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c82:	f001 fd99 	bl	80067b8 <vPortExitCritical>

	return xReturn;
 8004c86:	68fb      	ldr	r3, [r7, #12]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	e014      	b.n	8004cca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8004ce0 <vQueueAddToRegistry+0x50>)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10b      	bne.n	8004cc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004cac:	490c      	ldr	r1, [pc, #48]	@ (8004ce0 <vQueueAddToRegistry+0x50>)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce0 <vQueueAddToRegistry+0x50>)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004cc2:	e006      	b.n	8004cd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b07      	cmp	r3, #7
 8004cce:	d9e7      	bls.n	8004ca0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000944 	.word	0x20000944

08004ce4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	e016      	b.n	8004d20 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004cf2:	4a10      	ldr	r2, [pc, #64]	@ (8004d34 <vQueueUnregisterQueue+0x50>)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d10b      	bne.n	8004d1a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004d02:	4a0c      	ldr	r2, [pc, #48]	@ (8004d34 <vQueueUnregisterQueue+0x50>)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2100      	movs	r1, #0
 8004d08:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004d0c:	4a09      	ldr	r2, [pc, #36]	@ (8004d34 <vQueueUnregisterQueue+0x50>)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	4413      	add	r3, r2
 8004d14:	2200      	movs	r2, #0
 8004d16:	605a      	str	r2, [r3, #4]
				break;
 8004d18:	e006      	b.n	8004d28 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b07      	cmp	r3, #7
 8004d24:	d9e5      	bls.n	8004cf2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	20000944 	.word	0x20000944

08004d38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d48:	f001 fd00 	bl	800674c <vPortEnterCritical>
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d52:	b25b      	sxtb	r3, r3
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d103      	bne.n	8004d62 <vQueueWaitForMessageRestricted+0x2a>
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d68:	b25b      	sxtb	r3, r3
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6e:	d103      	bne.n	8004d78 <vQueueWaitForMessageRestricted+0x40>
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d78:	f001 fd1e 	bl	80067b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d106      	bne.n	8004d92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	3324      	adds	r3, #36	@ 0x24
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fc83 	bl	8005698 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d92:	6978      	ldr	r0, [r7, #20]
 8004d94:	f7ff fefc 	bl	8004b90 <prvUnlockQueue>
	}
 8004d98:	bf00      	nop
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08e      	sub	sp, #56	@ 0x38
 8004da4:	af04      	add	r7, sp, #16
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10d      	bne.n	8004dd0 <xTaskCreateStatic+0x30>
	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db8:	b672      	cpsid	i
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	b662      	cpsie	i
 8004dc8:	623b      	str	r3, [r7, #32]
}
 8004dca:	bf00      	nop
 8004dcc:	bf00      	nop
 8004dce:	e7fd      	b.n	8004dcc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10d      	bne.n	8004df2 <xTaskCreateStatic+0x52>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dda:	b672      	cpsid	i
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	b662      	cpsie	i
 8004dea:	61fb      	str	r3, [r7, #28]
}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	e7fd      	b.n	8004dee <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004df2:	23a8      	movs	r3, #168	@ 0xa8
 8004df4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2ba8      	cmp	r3, #168	@ 0xa8
 8004dfa:	d00d      	beq.n	8004e18 <xTaskCreateStatic+0x78>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e00:	b672      	cpsid	i
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	b662      	cpsie	i
 8004e10:	61bb      	str	r3, [r7, #24]
}
 8004e12:	bf00      	nop
 8004e14:	bf00      	nop
 8004e16:	e7fd      	b.n	8004e14 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01e      	beq.n	8004e5e <xTaskCreateStatic+0xbe>
 8004e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01b      	beq.n	8004e5e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e2e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e38:	2300      	movs	r3, #0
 8004e3a:	9303      	str	r3, [sp, #12]
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	9302      	str	r3, [sp, #8]
 8004e40:	f107 0314 	add.w	r3, r7, #20
 8004e44:	9301      	str	r3, [sp, #4]
 8004e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f851 	bl	8004ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e58:	f000 f8f8 	bl	800504c <prvAddNewTaskToReadyList>
 8004e5c:	e001      	b.n	8004e62 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e62:	697b      	ldr	r3, [r7, #20]
	}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3728      	adds	r7, #40	@ 0x28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08c      	sub	sp, #48	@ 0x30
 8004e70:	af04      	add	r7, sp, #16
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f001 fd91 	bl	80069a8 <pvPortMalloc>
 8004e86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00e      	beq.n	8004eac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e8e:	20a8      	movs	r0, #168	@ 0xa8
 8004e90:	f001 fd8a 	bl	80069a8 <pvPortMalloc>
 8004e94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ea2:	e005      	b.n	8004eb0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ea4:	6978      	ldr	r0, [r7, #20]
 8004ea6:	f001 fe4d 	bl	8006b44 <vPortFree>
 8004eaa:	e001      	b.n	8004eb0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d017      	beq.n	8004ee6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9303      	str	r3, [sp, #12]
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	9302      	str	r3, [sp, #8]
 8004ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eca:	9301      	str	r3, [sp, #4]
 8004ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68b9      	ldr	r1, [r7, #8]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f80f 	bl	8004ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004eda:	69f8      	ldr	r0, [r7, #28]
 8004edc:	f000 f8b6 	bl	800504c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	e002      	b.n	8004eec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004eec:	69bb      	ldr	r3, [r7, #24]
	}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f08:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	461a      	mov	r2, r3
 8004f10:	21a5      	movs	r1, #165	@ 0xa5
 8004f12:	f001 ff33 	bl	8006d7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004f20:	440b      	add	r3, r1
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f023 0307 	bic.w	r3, r3, #7
 8004f2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00d      	beq.n	8004f56 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3e:	b672      	cpsid	i
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	b662      	cpsie	i
 8004f4e:	617b      	str	r3, [r7, #20]
}
 8004f50:	bf00      	nop
 8004f52:	bf00      	nop
 8004f54:	e7fd      	b.n	8004f52 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01f      	beq.n	8004f9c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	e012      	b.n	8004f88 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	7819      	ldrb	r1, [r3, #0]
 8004f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	4413      	add	r3, r2
 8004f70:	3334      	adds	r3, #52	@ 0x34
 8004f72:	460a      	mov	r2, r1
 8004f74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d006      	beq.n	8004f90 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	3301      	adds	r3, #1
 8004f86:	61fb      	str	r3, [r7, #28]
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	2b0f      	cmp	r3, #15
 8004f8c:	d9e9      	bls.n	8004f62 <prvInitialiseNewTask+0x6a>
 8004f8e:	e000      	b.n	8004f92 <prvInitialiseNewTask+0x9a>
			{
				break;
 8004f90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f9a:	e003      	b.n	8004fa4 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa6:	2b37      	cmp	r3, #55	@ 0x37
 8004fa8:	d901      	bls.n	8004fae <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004faa:	2337      	movs	r3, #55	@ 0x37
 8004fac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fe fde3 	bl	8003b90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fcc:	3318      	adds	r3, #24
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe fdde 	bl	8003b90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fd8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fdc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fe8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffc:	3354      	adds	r3, #84	@ 0x54
 8004ffe:	224c      	movs	r2, #76	@ 0x4c
 8005000:	2100      	movs	r1, #0
 8005002:	4618      	mov	r0, r3
 8005004:	f001 feba 	bl	8006d7c <memset>
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	4a0d      	ldr	r2, [pc, #52]	@ (8005040 <prvInitialiseNewTask+0x148>)
 800500c:	659a      	str	r2, [r3, #88]	@ 0x58
 800500e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005010:	4a0c      	ldr	r2, [pc, #48]	@ (8005044 <prvInitialiseNewTask+0x14c>)
 8005012:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005016:	4a0c      	ldr	r2, [pc, #48]	@ (8005048 <prvInitialiseNewTask+0x150>)
 8005018:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	68f9      	ldr	r1, [r7, #12]
 800501e:	69b8      	ldr	r0, [r7, #24]
 8005020:	f001 fa88 	bl	8006534 <pxPortInitialiseStack>
 8005024:	4602      	mov	r2, r0
 8005026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005028:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800502a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005036:	bf00      	nop
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20004bd0 	.word	0x20004bd0
 8005044:	20004c38 	.word	0x20004c38
 8005048:	20004ca0 	.word	0x20004ca0

0800504c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005054:	f001 fb7a 	bl	800674c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005058:	4b2d      	ldr	r3, [pc, #180]	@ (8005110 <prvAddNewTaskToReadyList+0xc4>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3301      	adds	r3, #1
 800505e:	4a2c      	ldr	r2, [pc, #176]	@ (8005110 <prvAddNewTaskToReadyList+0xc4>)
 8005060:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005062:	4b2c      	ldr	r3, [pc, #176]	@ (8005114 <prvAddNewTaskToReadyList+0xc8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800506a:	4a2a      	ldr	r2, [pc, #168]	@ (8005114 <prvAddNewTaskToReadyList+0xc8>)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005070:	4b27      	ldr	r3, [pc, #156]	@ (8005110 <prvAddNewTaskToReadyList+0xc4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d110      	bne.n	800509a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005078:	f000 fc44 	bl	8005904 <prvInitialiseTaskLists>
 800507c:	e00d      	b.n	800509a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800507e:	4b26      	ldr	r3, [pc, #152]	@ (8005118 <prvAddNewTaskToReadyList+0xcc>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005086:	4b23      	ldr	r3, [pc, #140]	@ (8005114 <prvAddNewTaskToReadyList+0xc8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005090:	429a      	cmp	r2, r3
 8005092:	d802      	bhi.n	800509a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005094:	4a1f      	ldr	r2, [pc, #124]	@ (8005114 <prvAddNewTaskToReadyList+0xc8>)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800509a:	4b20      	ldr	r3, [pc, #128]	@ (800511c <prvAddNewTaskToReadyList+0xd0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3301      	adds	r3, #1
 80050a0:	4a1e      	ldr	r2, [pc, #120]	@ (800511c <prvAddNewTaskToReadyList+0xd0>)
 80050a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050a4:	4b1d      	ldr	r3, [pc, #116]	@ (800511c <prvAddNewTaskToReadyList+0xd0>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005120 <prvAddNewTaskToReadyList+0xd4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d903      	bls.n	80050c0 <prvAddNewTaskToReadyList+0x74>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050bc:	4a18      	ldr	r2, [pc, #96]	@ (8005120 <prvAddNewTaskToReadyList+0xd4>)
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4a15      	ldr	r2, [pc, #84]	@ (8005124 <prvAddNewTaskToReadyList+0xd8>)
 80050ce:	441a      	add	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3304      	adds	r3, #4
 80050d4:	4619      	mov	r1, r3
 80050d6:	4610      	mov	r0, r2
 80050d8:	f7fe fd67 	bl	8003baa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050dc:	f001 fb6c 	bl	80067b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005118 <prvAddNewTaskToReadyList+0xcc>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00e      	beq.n	8005106 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005114 <prvAddNewTaskToReadyList+0xc8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d207      	bcs.n	8005106 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005128 <prvAddNewTaskToReadyList+0xdc>)
 80050f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000e58 	.word	0x20000e58
 8005114:	20000984 	.word	0x20000984
 8005118:	20000e64 	.word	0x20000e64
 800511c:	20000e74 	.word	0x20000e74
 8005120:	20000e60 	.word	0x20000e60
 8005124:	20000988 	.word	0x20000988
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01a      	beq.n	8005174 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800513e:	4b15      	ldr	r3, [pc, #84]	@ (8005194 <vTaskDelay+0x68>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00d      	beq.n	8005162 <vTaskDelay+0x36>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	b672      	cpsid	i
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	b662      	cpsie	i
 800515a:	60bb      	str	r3, [r7, #8]
}
 800515c:	bf00      	nop
 800515e:	bf00      	nop
 8005160:	e7fd      	b.n	800515e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005162:	f000 f88f 	bl	8005284 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005166:	2100      	movs	r1, #0
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fe27 	bl	8005dbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800516e:	f000 f897 	bl	80052a0 <xTaskResumeAll>
 8005172:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d107      	bne.n	800518a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800517a:	4b07      	ldr	r3, [pc, #28]	@ (8005198 <vTaskDelay+0x6c>)
 800517c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800518a:	bf00      	nop
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000e80 	.word	0x20000e80
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08a      	sub	sp, #40	@ 0x28
 80051a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051aa:	463a      	mov	r2, r7
 80051ac:	1d39      	adds	r1, r7, #4
 80051ae:	f107 0308 	add.w	r3, r7, #8
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe fc98 	bl	8003ae8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	9202      	str	r2, [sp, #8]
 80051c0:	9301      	str	r3, [sp, #4]
 80051c2:	2300      	movs	r3, #0
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	2300      	movs	r3, #0
 80051c8:	460a      	mov	r2, r1
 80051ca:	4926      	ldr	r1, [pc, #152]	@ (8005264 <vTaskStartScheduler+0xc8>)
 80051cc:	4826      	ldr	r0, [pc, #152]	@ (8005268 <vTaskStartScheduler+0xcc>)
 80051ce:	f7ff fde7 	bl	8004da0 <xTaskCreateStatic>
 80051d2:	4603      	mov	r3, r0
 80051d4:	4a25      	ldr	r2, [pc, #148]	@ (800526c <vTaskStartScheduler+0xd0>)
 80051d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051d8:	4b24      	ldr	r3, [pc, #144]	@ (800526c <vTaskStartScheduler+0xd0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051e0:	2301      	movs	r3, #1
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	e001      	b.n	80051ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d102      	bne.n	80051f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051f0:	f000 fe38 	bl	8005e64 <xTimerCreateTimerTask>
 80051f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d11d      	bne.n	8005238 <vTaskStartScheduler+0x9c>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005200:	b672      	cpsid	i
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	b662      	cpsie	i
 8005210:	613b      	str	r3, [r7, #16]
}
 8005212:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005214:	4b16      	ldr	r3, [pc, #88]	@ (8005270 <vTaskStartScheduler+0xd4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3354      	adds	r3, #84	@ 0x54
 800521a:	4a16      	ldr	r2, [pc, #88]	@ (8005274 <vTaskStartScheduler+0xd8>)
 800521c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800521e:	4b16      	ldr	r3, [pc, #88]	@ (8005278 <vTaskStartScheduler+0xdc>)
 8005220:	f04f 32ff 	mov.w	r2, #4294967295
 8005224:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005226:	4b15      	ldr	r3, [pc, #84]	@ (800527c <vTaskStartScheduler+0xe0>)
 8005228:	2201      	movs	r2, #1
 800522a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800522c:	4b14      	ldr	r3, [pc, #80]	@ (8005280 <vTaskStartScheduler+0xe4>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005232:	f001 fa0d 	bl	8006650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005236:	e011      	b.n	800525c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d10d      	bne.n	800525c <vTaskStartScheduler+0xc0>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005244:	b672      	cpsid	i
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	b662      	cpsie	i
 8005254:	60fb      	str	r3, [r7, #12]
}
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	e7fd      	b.n	8005258 <vTaskStartScheduler+0xbc>
}
 800525c:	bf00      	nop
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	08006f88 	.word	0x08006f88
 8005268:	080058d5 	.word	0x080058d5
 800526c:	20000e7c 	.word	0x20000e7c
 8005270:	20000984 	.word	0x20000984
 8005274:	20000010 	.word	0x20000010
 8005278:	20000e78 	.word	0x20000e78
 800527c:	20000e64 	.word	0x20000e64
 8005280:	20000e5c 	.word	0x20000e5c

08005284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005288:	4b04      	ldr	r3, [pc, #16]	@ (800529c <vTaskSuspendAll+0x18>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3301      	adds	r3, #1
 800528e:	4a03      	ldr	r2, [pc, #12]	@ (800529c <vTaskSuspendAll+0x18>)
 8005290:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005292:	bf00      	nop
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	20000e80 	.word	0x20000e80

080052a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052ae:	4b43      	ldr	r3, [pc, #268]	@ (80053bc <xTaskResumeAll+0x11c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10d      	bne.n	80052d2 <xTaskResumeAll+0x32>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ba:	b672      	cpsid	i
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	b662      	cpsie	i
 80052ca:	603b      	str	r3, [r7, #0]
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	e7fd      	b.n	80052ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052d2:	f001 fa3b 	bl	800674c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052d6:	4b39      	ldr	r3, [pc, #228]	@ (80053bc <xTaskResumeAll+0x11c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3b01      	subs	r3, #1
 80052dc:	4a37      	ldr	r2, [pc, #220]	@ (80053bc <xTaskResumeAll+0x11c>)
 80052de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052e0:	4b36      	ldr	r3, [pc, #216]	@ (80053bc <xTaskResumeAll+0x11c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d162      	bne.n	80053ae <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052e8:	4b35      	ldr	r3, [pc, #212]	@ (80053c0 <xTaskResumeAll+0x120>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d05e      	beq.n	80053ae <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052f0:	e02f      	b.n	8005352 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052f2:	4b34      	ldr	r3, [pc, #208]	@ (80053c4 <xTaskResumeAll+0x124>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3318      	adds	r3, #24
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fe fcb0 	bl	8003c64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3304      	adds	r3, #4
 8005308:	4618      	mov	r0, r3
 800530a:	f7fe fcab 	bl	8003c64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005312:	4b2d      	ldr	r3, [pc, #180]	@ (80053c8 <xTaskResumeAll+0x128>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d903      	bls.n	8005322 <xTaskResumeAll+0x82>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	4a2a      	ldr	r2, [pc, #168]	@ (80053c8 <xTaskResumeAll+0x128>)
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4a27      	ldr	r2, [pc, #156]	@ (80053cc <xTaskResumeAll+0x12c>)
 8005330:	441a      	add	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3304      	adds	r3, #4
 8005336:	4619      	mov	r1, r3
 8005338:	4610      	mov	r0, r2
 800533a:	f7fe fc36 	bl	8003baa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005342:	4b23      	ldr	r3, [pc, #140]	@ (80053d0 <xTaskResumeAll+0x130>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005348:	429a      	cmp	r2, r3
 800534a:	d302      	bcc.n	8005352 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800534c:	4b21      	ldr	r3, [pc, #132]	@ (80053d4 <xTaskResumeAll+0x134>)
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005352:	4b1c      	ldr	r3, [pc, #112]	@ (80053c4 <xTaskResumeAll+0x124>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1cb      	bne.n	80052f2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005360:	f000 fb76 	bl	8005a50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005364:	4b1c      	ldr	r3, [pc, #112]	@ (80053d8 <xTaskResumeAll+0x138>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d010      	beq.n	8005392 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005370:	f000 f846 	bl	8005400 <xTaskIncrementTick>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800537a:	4b16      	ldr	r3, [pc, #88]	@ (80053d4 <xTaskResumeAll+0x134>)
 800537c:	2201      	movs	r2, #1
 800537e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3b01      	subs	r3, #1
 8005384:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f1      	bne.n	8005370 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800538c:	4b12      	ldr	r3, [pc, #72]	@ (80053d8 <xTaskResumeAll+0x138>)
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005392:	4b10      	ldr	r3, [pc, #64]	@ (80053d4 <xTaskResumeAll+0x134>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d009      	beq.n	80053ae <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800539a:	2301      	movs	r3, #1
 800539c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800539e:	4b0f      	ldr	r3, [pc, #60]	@ (80053dc <xTaskResumeAll+0x13c>)
 80053a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053ae:	f001 fa03 	bl	80067b8 <vPortExitCritical>

	return xAlreadyYielded;
 80053b2:	68bb      	ldr	r3, [r7, #8]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20000e80 	.word	0x20000e80
 80053c0:	20000e58 	.word	0x20000e58
 80053c4:	20000e18 	.word	0x20000e18
 80053c8:	20000e60 	.word	0x20000e60
 80053cc:	20000988 	.word	0x20000988
 80053d0:	20000984 	.word	0x20000984
 80053d4:	20000e6c 	.word	0x20000e6c
 80053d8:	20000e68 	.word	0x20000e68
 80053dc:	e000ed04 	.word	0xe000ed04

080053e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053e6:	4b05      	ldr	r3, [pc, #20]	@ (80053fc <xTaskGetTickCount+0x1c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053ec:	687b      	ldr	r3, [r7, #4]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	20000e5c 	.word	0x20000e5c

08005400 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800540a:	4b50      	ldr	r3, [pc, #320]	@ (800554c <xTaskIncrementTick+0x14c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f040 808c 	bne.w	800552c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005414:	4b4e      	ldr	r3, [pc, #312]	@ (8005550 <xTaskIncrementTick+0x150>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800541c:	4a4c      	ldr	r2, [pc, #304]	@ (8005550 <xTaskIncrementTick+0x150>)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d123      	bne.n	8005470 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005428:	4b4a      	ldr	r3, [pc, #296]	@ (8005554 <xTaskIncrementTick+0x154>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00d      	beq.n	800544e <xTaskIncrementTick+0x4e>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005436:	b672      	cpsid	i
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	b662      	cpsie	i
 8005446:	603b      	str	r3, [r7, #0]
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	e7fd      	b.n	800544a <xTaskIncrementTick+0x4a>
 800544e:	4b41      	ldr	r3, [pc, #260]	@ (8005554 <xTaskIncrementTick+0x154>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	4b40      	ldr	r3, [pc, #256]	@ (8005558 <xTaskIncrementTick+0x158>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a3e      	ldr	r2, [pc, #248]	@ (8005554 <xTaskIncrementTick+0x154>)
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	4a3e      	ldr	r2, [pc, #248]	@ (8005558 <xTaskIncrementTick+0x158>)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	4b3e      	ldr	r3, [pc, #248]	@ (800555c <xTaskIncrementTick+0x15c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3301      	adds	r3, #1
 8005468:	4a3c      	ldr	r2, [pc, #240]	@ (800555c <xTaskIncrementTick+0x15c>)
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	f000 faf0 	bl	8005a50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005470:	4b3b      	ldr	r3, [pc, #236]	@ (8005560 <xTaskIncrementTick+0x160>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	429a      	cmp	r2, r3
 8005478:	d349      	bcc.n	800550e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800547a:	4b36      	ldr	r3, [pc, #216]	@ (8005554 <xTaskIncrementTick+0x154>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d104      	bne.n	800548e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005484:	4b36      	ldr	r3, [pc, #216]	@ (8005560 <xTaskIncrementTick+0x160>)
 8005486:	f04f 32ff 	mov.w	r2, #4294967295
 800548a:	601a      	str	r2, [r3, #0]
					break;
 800548c:	e03f      	b.n	800550e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800548e:	4b31      	ldr	r3, [pc, #196]	@ (8005554 <xTaskIncrementTick+0x154>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d203      	bcs.n	80054ae <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005560 <xTaskIncrementTick+0x160>)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054ac:	e02f      	b.n	800550e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	3304      	adds	r3, #4
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe fbd6 	bl	8003c64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	3318      	adds	r3, #24
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fe fbcd 	bl	8003c64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ce:	4b25      	ldr	r3, [pc, #148]	@ (8005564 <xTaskIncrementTick+0x164>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d903      	bls.n	80054de <xTaskIncrementTick+0xde>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054da:	4a22      	ldr	r2, [pc, #136]	@ (8005564 <xTaskIncrementTick+0x164>)
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005568 <xTaskIncrementTick+0x168>)
 80054ec:	441a      	add	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	3304      	adds	r3, #4
 80054f2:	4619      	mov	r1, r3
 80054f4:	4610      	mov	r0, r2
 80054f6:	f7fe fb58 	bl	8003baa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054fe:	4b1b      	ldr	r3, [pc, #108]	@ (800556c <xTaskIncrementTick+0x16c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	429a      	cmp	r2, r3
 8005506:	d3b8      	bcc.n	800547a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8005508:	2301      	movs	r3, #1
 800550a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800550c:	e7b5      	b.n	800547a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800550e:	4b17      	ldr	r3, [pc, #92]	@ (800556c <xTaskIncrementTick+0x16c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005514:	4914      	ldr	r1, [pc, #80]	@ (8005568 <xTaskIncrementTick+0x168>)
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	440b      	add	r3, r1
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d907      	bls.n	8005536 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005526:	2301      	movs	r3, #1
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	e004      	b.n	8005536 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800552c:	4b10      	ldr	r3, [pc, #64]	@ (8005570 <xTaskIncrementTick+0x170>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	4a0f      	ldr	r2, [pc, #60]	@ (8005570 <xTaskIncrementTick+0x170>)
 8005534:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005536:	4b0f      	ldr	r3, [pc, #60]	@ (8005574 <xTaskIncrementTick+0x174>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800553e:	2301      	movs	r3, #1
 8005540:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005542:	697b      	ldr	r3, [r7, #20]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	20000e80 	.word	0x20000e80
 8005550:	20000e5c 	.word	0x20000e5c
 8005554:	20000e10 	.word	0x20000e10
 8005558:	20000e14 	.word	0x20000e14
 800555c:	20000e70 	.word	0x20000e70
 8005560:	20000e78 	.word	0x20000e78
 8005564:	20000e60 	.word	0x20000e60
 8005568:	20000988 	.word	0x20000988
 800556c:	20000984 	.word	0x20000984
 8005570:	20000e68 	.word	0x20000e68
 8005574:	20000e6c 	.word	0x20000e6c

08005578 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800557e:	4b2c      	ldr	r3, [pc, #176]	@ (8005630 <vTaskSwitchContext+0xb8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005586:	4b2b      	ldr	r3, [pc, #172]	@ (8005634 <vTaskSwitchContext+0xbc>)
 8005588:	2201      	movs	r2, #1
 800558a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800558c:	e049      	b.n	8005622 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800558e:	4b29      	ldr	r3, [pc, #164]	@ (8005634 <vTaskSwitchContext+0xbc>)
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005594:	4b28      	ldr	r3, [pc, #160]	@ (8005638 <vTaskSwitchContext+0xc0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	e013      	b.n	80055c4 <vTaskSwitchContext+0x4c>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10d      	bne.n	80055be <vTaskSwitchContext+0x46>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a6:	b672      	cpsid	i
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	b662      	cpsie	i
 80055b6:	607b      	str	r3, [r7, #4]
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	e7fd      	b.n	80055ba <vTaskSwitchContext+0x42>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	491d      	ldr	r1, [pc, #116]	@ (800563c <vTaskSwitchContext+0xc4>)
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0e1      	beq.n	800559c <vTaskSwitchContext+0x24>
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4a16      	ldr	r2, [pc, #88]	@ (800563c <vTaskSwitchContext+0xc4>)
 80055e4:	4413      	add	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	3308      	adds	r3, #8
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d104      	bne.n	8005608 <vTaskSwitchContext+0x90>
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	605a      	str	r2, [r3, #4]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	4a0c      	ldr	r2, [pc, #48]	@ (8005640 <vTaskSwitchContext+0xc8>)
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	4a09      	ldr	r2, [pc, #36]	@ (8005638 <vTaskSwitchContext+0xc0>)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005618:	4b09      	ldr	r3, [pc, #36]	@ (8005640 <vTaskSwitchContext+0xc8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3354      	adds	r3, #84	@ 0x54
 800561e:	4a09      	ldr	r2, [pc, #36]	@ (8005644 <vTaskSwitchContext+0xcc>)
 8005620:	6013      	str	r3, [r2, #0]
}
 8005622:	bf00      	nop
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	20000e80 	.word	0x20000e80
 8005634:	20000e6c 	.word	0x20000e6c
 8005638:	20000e60 	.word	0x20000e60
 800563c:	20000988 	.word	0x20000988
 8005640:	20000984 	.word	0x20000984
 8005644:	20000010 	.word	0x20000010

08005648 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10d      	bne.n	8005674 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565c:	b672      	cpsid	i
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	b662      	cpsie	i
 800566c:	60fb      	str	r3, [r7, #12]
}
 800566e:	bf00      	nop
 8005670:	bf00      	nop
 8005672:	e7fd      	b.n	8005670 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005674:	4b07      	ldr	r3, [pc, #28]	@ (8005694 <vTaskPlaceOnEventList+0x4c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3318      	adds	r3, #24
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fe fab8 	bl	8003bf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005682:	2101      	movs	r1, #1
 8005684:	6838      	ldr	r0, [r7, #0]
 8005686:	f000 fb99 	bl	8005dbc <prvAddCurrentTaskToDelayedList>
}
 800568a:	bf00      	nop
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000984 	.word	0x20000984

08005698 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10d      	bne.n	80056c6 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ae:	b672      	cpsid	i
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	b662      	cpsie	i
 80056be:	617b      	str	r3, [r7, #20]
}
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	e7fd      	b.n	80056c2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056c6:	4b0a      	ldr	r3, [pc, #40]	@ (80056f0 <vTaskPlaceOnEventListRestricted+0x58>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3318      	adds	r3, #24
 80056cc:	4619      	mov	r1, r3
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7fe fa6b 	bl	8003baa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80056da:	f04f 33ff 	mov.w	r3, #4294967295
 80056de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	68b8      	ldr	r0, [r7, #8]
 80056e4:	f000 fb6a 	bl	8005dbc <prvAddCurrentTaskToDelayedList>
	}
 80056e8:	bf00      	nop
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20000984 	.word	0x20000984

080056f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10d      	bne.n	8005726 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570e:	b672      	cpsid	i
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	b662      	cpsie	i
 800571e:	60fb      	str	r3, [r7, #12]
}
 8005720:	bf00      	nop
 8005722:	bf00      	nop
 8005724:	e7fd      	b.n	8005722 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	3318      	adds	r3, #24
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe fa9a 	bl	8003c64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005730:	4b1d      	ldr	r3, [pc, #116]	@ (80057a8 <xTaskRemoveFromEventList+0xb4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11d      	bne.n	8005774 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	3304      	adds	r3, #4
 800573c:	4618      	mov	r0, r3
 800573e:	f7fe fa91 	bl	8003c64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005746:	4b19      	ldr	r3, [pc, #100]	@ (80057ac <xTaskRemoveFromEventList+0xb8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d903      	bls.n	8005756 <xTaskRemoveFromEventList+0x62>
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005752:	4a16      	ldr	r2, [pc, #88]	@ (80057ac <xTaskRemoveFromEventList+0xb8>)
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4a13      	ldr	r2, [pc, #76]	@ (80057b0 <xTaskRemoveFromEventList+0xbc>)
 8005764:	441a      	add	r2, r3
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3304      	adds	r3, #4
 800576a:	4619      	mov	r1, r3
 800576c:	4610      	mov	r0, r2
 800576e:	f7fe fa1c 	bl	8003baa <vListInsertEnd>
 8005772:	e005      	b.n	8005780 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	3318      	adds	r3, #24
 8005778:	4619      	mov	r1, r3
 800577a:	480e      	ldr	r0, [pc, #56]	@ (80057b4 <xTaskRemoveFromEventList+0xc0>)
 800577c:	f7fe fa15 	bl	8003baa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005784:	4b0c      	ldr	r3, [pc, #48]	@ (80057b8 <xTaskRemoveFromEventList+0xc4>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	429a      	cmp	r2, r3
 800578c:	d905      	bls.n	800579a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800578e:	2301      	movs	r3, #1
 8005790:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005792:	4b0a      	ldr	r3, [pc, #40]	@ (80057bc <xTaskRemoveFromEventList+0xc8>)
 8005794:	2201      	movs	r2, #1
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	e001      	b.n	800579e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800579e:	697b      	ldr	r3, [r7, #20]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20000e80 	.word	0x20000e80
 80057ac:	20000e60 	.word	0x20000e60
 80057b0:	20000988 	.word	0x20000988
 80057b4:	20000e18 	.word	0x20000e18
 80057b8:	20000984 	.word	0x20000984
 80057bc:	20000e6c 	.word	0x20000e6c

080057c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057c8:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <vTaskInternalSetTimeOutState+0x24>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <vTaskInternalSetTimeOutState+0x28>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	605a      	str	r2, [r3, #4]
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	20000e70 	.word	0x20000e70
 80057e8:	20000e5c 	.word	0x20000e5c

080057ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10d      	bne.n	8005818 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005800:	b672      	cpsid	i
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	b662      	cpsie	i
 8005810:	613b      	str	r3, [r7, #16]
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	e7fd      	b.n	8005814 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10d      	bne.n	800583a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005822:	b672      	cpsid	i
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	b662      	cpsie	i
 8005832:	60fb      	str	r3, [r7, #12]
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	e7fd      	b.n	8005836 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800583a:	f000 ff87 	bl	800674c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800583e:	4b1d      	ldr	r3, [pc, #116]	@ (80058b4 <xTaskCheckForTimeOut+0xc8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d102      	bne.n	800585e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005858:	2300      	movs	r3, #0
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	e023      	b.n	80058a6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	4b15      	ldr	r3, [pc, #84]	@ (80058b8 <xTaskCheckForTimeOut+0xcc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d007      	beq.n	800587a <xTaskCheckForTimeOut+0x8e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	429a      	cmp	r2, r3
 8005872:	d302      	bcc.n	800587a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005874:	2301      	movs	r3, #1
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	e015      	b.n	80058a6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	429a      	cmp	r2, r3
 8005882:	d20b      	bcs.n	800589c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	1ad2      	subs	r2, r2, r3
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff ff95 	bl	80057c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005896:	2300      	movs	r3, #0
 8005898:	61fb      	str	r3, [r7, #28]
 800589a:	e004      	b.n	80058a6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058a2:	2301      	movs	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058a6:	f000 ff87 	bl	80067b8 <vPortExitCritical>

	return xReturn;
 80058aa:	69fb      	ldr	r3, [r7, #28]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3720      	adds	r7, #32
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20000e5c 	.word	0x20000e5c
 80058b8:	20000e70 	.word	0x20000e70

080058bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058c0:	4b03      	ldr	r3, [pc, #12]	@ (80058d0 <vTaskMissedYield+0x14>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
}
 80058c6:	bf00      	nop
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	20000e6c 	.word	0x20000e6c

080058d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058dc:	f000 f852 	bl	8005984 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058e0:	4b06      	ldr	r3, [pc, #24]	@ (80058fc <prvIdleTask+0x28>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d9f9      	bls.n	80058dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80058e8:	4b05      	ldr	r3, [pc, #20]	@ (8005900 <prvIdleTask+0x2c>)
 80058ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058f8:	e7f0      	b.n	80058dc <prvIdleTask+0x8>
 80058fa:	bf00      	nop
 80058fc:	20000988 	.word	0x20000988
 8005900:	e000ed04 	.word	0xe000ed04

08005904 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800590a:	2300      	movs	r3, #0
 800590c:	607b      	str	r3, [r7, #4]
 800590e:	e00c      	b.n	800592a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4a12      	ldr	r2, [pc, #72]	@ (8005964 <prvInitialiseTaskLists+0x60>)
 800591c:	4413      	add	r3, r2
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe f916 	bl	8003b50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3301      	adds	r3, #1
 8005928:	607b      	str	r3, [r7, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b37      	cmp	r3, #55	@ 0x37
 800592e:	d9ef      	bls.n	8005910 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005930:	480d      	ldr	r0, [pc, #52]	@ (8005968 <prvInitialiseTaskLists+0x64>)
 8005932:	f7fe f90d 	bl	8003b50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005936:	480d      	ldr	r0, [pc, #52]	@ (800596c <prvInitialiseTaskLists+0x68>)
 8005938:	f7fe f90a 	bl	8003b50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800593c:	480c      	ldr	r0, [pc, #48]	@ (8005970 <prvInitialiseTaskLists+0x6c>)
 800593e:	f7fe f907 	bl	8003b50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005942:	480c      	ldr	r0, [pc, #48]	@ (8005974 <prvInitialiseTaskLists+0x70>)
 8005944:	f7fe f904 	bl	8003b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005948:	480b      	ldr	r0, [pc, #44]	@ (8005978 <prvInitialiseTaskLists+0x74>)
 800594a:	f7fe f901 	bl	8003b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800594e:	4b0b      	ldr	r3, [pc, #44]	@ (800597c <prvInitialiseTaskLists+0x78>)
 8005950:	4a05      	ldr	r2, [pc, #20]	@ (8005968 <prvInitialiseTaskLists+0x64>)
 8005952:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005954:	4b0a      	ldr	r3, [pc, #40]	@ (8005980 <prvInitialiseTaskLists+0x7c>)
 8005956:	4a05      	ldr	r2, [pc, #20]	@ (800596c <prvInitialiseTaskLists+0x68>)
 8005958:	601a      	str	r2, [r3, #0]
}
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20000988 	.word	0x20000988
 8005968:	20000de8 	.word	0x20000de8
 800596c:	20000dfc 	.word	0x20000dfc
 8005970:	20000e18 	.word	0x20000e18
 8005974:	20000e2c 	.word	0x20000e2c
 8005978:	20000e44 	.word	0x20000e44
 800597c:	20000e10 	.word	0x20000e10
 8005980:	20000e14 	.word	0x20000e14

08005984 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800598a:	e019      	b.n	80059c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800598c:	f000 fede 	bl	800674c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005990:	4b10      	ldr	r3, [pc, #64]	@ (80059d4 <prvCheckTasksWaitingTermination+0x50>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	4618      	mov	r0, r3
 800599e:	f7fe f961 	bl	8003c64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059a2:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <prvCheckTasksWaitingTermination+0x54>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	4a0b      	ldr	r2, [pc, #44]	@ (80059d8 <prvCheckTasksWaitingTermination+0x54>)
 80059aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059ac:	4b0b      	ldr	r3, [pc, #44]	@ (80059dc <prvCheckTasksWaitingTermination+0x58>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	4a0a      	ldr	r2, [pc, #40]	@ (80059dc <prvCheckTasksWaitingTermination+0x58>)
 80059b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059b6:	f000 feff 	bl	80067b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f810 	bl	80059e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059c0:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <prvCheckTasksWaitingTermination+0x58>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e1      	bne.n	800598c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000e2c 	.word	0x20000e2c
 80059d8:	20000e58 	.word	0x20000e58
 80059dc:	20000e40 	.word	0x20000e40

080059e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3354      	adds	r3, #84	@ 0x54
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 f9cd 	bl	8006d8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d108      	bne.n	8005a0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a00:	4618      	mov	r0, r3
 8005a02:	f001 f89f 	bl	8006b44 <vPortFree>
				vPortFree( pxTCB );
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 f89c 	bl	8006b44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a0c:	e01b      	b.n	8005a46 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d103      	bne.n	8005a20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 f893 	bl	8006b44 <vPortFree>
	}
 8005a1e:	e012      	b.n	8005a46 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d00d      	beq.n	8005a46 <prvDeleteTCB+0x66>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2e:	b672      	cpsid	i
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	b662      	cpsie	i
 8005a3e:	60fb      	str	r3, [r7, #12]
}
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	e7fd      	b.n	8005a42 <prvDeleteTCB+0x62>
	}
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a56:	4b0c      	ldr	r3, [pc, #48]	@ (8005a88 <prvResetNextTaskUnblockTime+0x38>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d104      	bne.n	8005a6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a60:	4b0a      	ldr	r3, [pc, #40]	@ (8005a8c <prvResetNextTaskUnblockTime+0x3c>)
 8005a62:	f04f 32ff 	mov.w	r2, #4294967295
 8005a66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a68:	e008      	b.n	8005a7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a6a:	4b07      	ldr	r3, [pc, #28]	@ (8005a88 <prvResetNextTaskUnblockTime+0x38>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4a04      	ldr	r2, [pc, #16]	@ (8005a8c <prvResetNextTaskUnblockTime+0x3c>)
 8005a7a:	6013      	str	r3, [r2, #0]
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	20000e10 	.word	0x20000e10
 8005a8c:	20000e78 	.word	0x20000e78

08005a90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a96:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac4 <xTaskGetSchedulerState+0x34>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	607b      	str	r3, [r7, #4]
 8005aa2:	e008      	b.n	8005ab6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aa4:	4b08      	ldr	r3, [pc, #32]	@ (8005ac8 <xTaskGetSchedulerState+0x38>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d102      	bne.n	8005ab2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005aac:	2302      	movs	r3, #2
 8005aae:	607b      	str	r3, [r7, #4]
 8005ab0:	e001      	b.n	8005ab6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ab6:	687b      	ldr	r3, [r7, #4]
	}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	20000e64 	.word	0x20000e64
 8005ac8:	20000e80 	.word	0x20000e80

08005acc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d051      	beq.n	8005b86 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8005b90 <xTaskPriorityInherit+0xc4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d241      	bcs.n	8005b74 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	db06      	blt.n	8005b06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af8:	4b25      	ldr	r3, [pc, #148]	@ (8005b90 <xTaskPriorityInherit+0xc4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6959      	ldr	r1, [r3, #20]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4a1f      	ldr	r2, [pc, #124]	@ (8005b94 <xTaskPriorityInherit+0xc8>)
 8005b18:	4413      	add	r3, r2
 8005b1a:	4299      	cmp	r1, r3
 8005b1c:	d122      	bne.n	8005b64 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe f89e 	bl	8003c64 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b28:	4b19      	ldr	r3, [pc, #100]	@ (8005b90 <xTaskPriorityInherit+0xc4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b36:	4b18      	ldr	r3, [pc, #96]	@ (8005b98 <xTaskPriorityInherit+0xcc>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d903      	bls.n	8005b46 <xTaskPriorityInherit+0x7a>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b42:	4a15      	ldr	r2, [pc, #84]	@ (8005b98 <xTaskPriorityInherit+0xcc>)
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4a10      	ldr	r2, [pc, #64]	@ (8005b94 <xTaskPriorityInherit+0xc8>)
 8005b54:	441a      	add	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	f7fe f824 	bl	8003baa <vListInsertEnd>
 8005b62:	e004      	b.n	8005b6e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b64:	4b0a      	ldr	r3, [pc, #40]	@ (8005b90 <xTaskPriorityInherit+0xc4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	e008      	b.n	8005b86 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b78:	4b05      	ldr	r3, [pc, #20]	@ (8005b90 <xTaskPriorityInherit+0xc4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d201      	bcs.n	8005b86 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005b82:	2301      	movs	r3, #1
 8005b84:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b86:	68fb      	ldr	r3, [r7, #12]
	}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20000984 	.word	0x20000984
 8005b94:	20000988 	.word	0x20000988
 8005b98:	20000e60 	.word	0x20000e60

08005b9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d05c      	beq.n	8005c6c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bb2:	4b31      	ldr	r3, [pc, #196]	@ (8005c78 <xTaskPriorityDisinherit+0xdc>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d00d      	beq.n	8005bd8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc0:	b672      	cpsid	i
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	b662      	cpsie	i
 8005bd0:	60fb      	str	r3, [r7, #12]
}
 8005bd2:	bf00      	nop
 8005bd4:	bf00      	nop
 8005bd6:	e7fd      	b.n	8005bd4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10d      	bne.n	8005bfc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be4:	b672      	cpsid	i
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	b662      	cpsie	i
 8005bf4:	60bb      	str	r3, [r7, #8]
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c00:	1e5a      	subs	r2, r3, #1
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d02c      	beq.n	8005c6c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d128      	bne.n	8005c6c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe f820 	bl	8003c64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c7c <xTaskPriorityDisinherit+0xe0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d903      	bls.n	8005c4c <xTaskPriorityDisinherit+0xb0>
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	4a0c      	ldr	r2, [pc, #48]	@ (8005c7c <xTaskPriorityDisinherit+0xe0>)
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4a09      	ldr	r2, [pc, #36]	@ (8005c80 <xTaskPriorityDisinherit+0xe4>)
 8005c5a:	441a      	add	r2, r3
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4619      	mov	r1, r3
 8005c62:	4610      	mov	r0, r2
 8005c64:	f7fd ffa1 	bl	8003baa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c6c:	697b      	ldr	r3, [r7, #20]
	}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000984 	.word	0x20000984
 8005c7c:	20000e60 	.word	0x20000e60
 8005c80:	20000988 	.word	0x20000988

08005c84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c92:	2301      	movs	r3, #1
 8005c94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d070      	beq.n	8005d7e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10d      	bne.n	8005cc0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca8:	b672      	cpsid	i
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	b662      	cpsie	i
 8005cb8:	60fb      	str	r3, [r7, #12]
}
 8005cba:	bf00      	nop
 8005cbc:	bf00      	nop
 8005cbe:	e7fd      	b.n	8005cbc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d902      	bls.n	8005cd0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	e002      	b.n	8005cd6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cd4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d04e      	beq.n	8005d7e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d149      	bne.n	8005d7e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005cea:	4b27      	ldr	r3, [pc, #156]	@ (8005d88 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d10d      	bne.n	8005d10 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf8:	b672      	cpsid	i
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	b662      	cpsie	i
 8005d08:	60bb      	str	r3, [r7, #8]
}
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
 8005d0e:	e7fd      	b.n	8005d0c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	69fa      	ldr	r2, [r7, #28]
 8005d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	db04      	blt.n	8005d2e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	6959      	ldr	r1, [r3, #20]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4a13      	ldr	r2, [pc, #76]	@ (8005d8c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005d3e:	4413      	add	r3, r2
 8005d40:	4299      	cmp	r1, r3
 8005d42:	d11c      	bne.n	8005d7e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fd ff8b 	bl	8003c64 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d52:	4b0f      	ldr	r3, [pc, #60]	@ (8005d90 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d903      	bls.n	8005d62 <vTaskPriorityDisinheritAfterTimeout+0xde>
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8005d90 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4a07      	ldr	r2, [pc, #28]	@ (8005d8c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005d70:	441a      	add	r2, r3
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	3304      	adds	r3, #4
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f7fd ff16 	bl	8003baa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d7e:	bf00      	nop
 8005d80:	3720      	adds	r7, #32
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000984 	.word	0x20000984
 8005d8c:	20000988 	.word	0x20000988
 8005d90:	20000e60 	.word	0x20000e60

08005d94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d98:	4b07      	ldr	r3, [pc, #28]	@ (8005db8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d004      	beq.n	8005daa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005da0:	4b05      	ldr	r3, [pc, #20]	@ (8005db8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005da6:	3201      	adds	r2, #1
 8005da8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005daa:	4b03      	ldr	r3, [pc, #12]	@ (8005db8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005dac:	681b      	ldr	r3, [r3, #0]
	}
 8005dae:	4618      	mov	r0, r3
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	20000984 	.word	0x20000984

08005dbc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dc6:	4b21      	ldr	r3, [pc, #132]	@ (8005e4c <prvAddCurrentTaskToDelayedList+0x90>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dcc:	4b20      	ldr	r3, [pc, #128]	@ (8005e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fd ff46 	bl	8003c64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d10a      	bne.n	8005df6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005de6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4619      	mov	r1, r3
 8005dee:	4819      	ldr	r0, [pc, #100]	@ (8005e54 <prvAddCurrentTaskToDelayedList+0x98>)
 8005df0:	f7fd fedb 	bl	8003baa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005df4:	e026      	b.n	8005e44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dfe:	4b14      	ldr	r3, [pc, #80]	@ (8005e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d209      	bcs.n	8005e22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e0e:	4b12      	ldr	r3, [pc, #72]	@ (8005e58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4b0f      	ldr	r3, [pc, #60]	@ (8005e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f7fd fee9 	bl	8003bf2 <vListInsert>
}
 8005e20:	e010      	b.n	8005e44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e22:	4b0e      	ldr	r3, [pc, #56]	@ (8005e5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	4b0a      	ldr	r3, [pc, #40]	@ (8005e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4610      	mov	r0, r2
 8005e30:	f7fd fedf 	bl	8003bf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e34:	4b0a      	ldr	r3, [pc, #40]	@ (8005e60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d202      	bcs.n	8005e44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e3e:	4a08      	ldr	r2, [pc, #32]	@ (8005e60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	6013      	str	r3, [r2, #0]
}
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20000e5c 	.word	0x20000e5c
 8005e50:	20000984 	.word	0x20000984
 8005e54:	20000e44 	.word	0x20000e44
 8005e58:	20000e14 	.word	0x20000e14
 8005e5c:	20000e10 	.word	0x20000e10
 8005e60:	20000e78 	.word	0x20000e78

08005e64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08a      	sub	sp, #40	@ 0x28
 8005e68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e6e:	f000 fb21 	bl	80064b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e72:	4b1e      	ldr	r3, [pc, #120]	@ (8005eec <xTimerCreateTimerTask+0x88>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d021      	beq.n	8005ebe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e82:	1d3a      	adds	r2, r7, #4
 8005e84:	f107 0108 	add.w	r1, r7, #8
 8005e88:	f107 030c 	add.w	r3, r7, #12
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fd fe45 	bl	8003b1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	9202      	str	r2, [sp, #8]
 8005e9a:	9301      	str	r3, [sp, #4]
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	460a      	mov	r2, r1
 8005ea4:	4912      	ldr	r1, [pc, #72]	@ (8005ef0 <xTimerCreateTimerTask+0x8c>)
 8005ea6:	4813      	ldr	r0, [pc, #76]	@ (8005ef4 <xTimerCreateTimerTask+0x90>)
 8005ea8:	f7fe ff7a 	bl	8004da0 <xTaskCreateStatic>
 8005eac:	4603      	mov	r3, r0
 8005eae:	4a12      	ldr	r2, [pc, #72]	@ (8005ef8 <xTimerCreateTimerTask+0x94>)
 8005eb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005eb2:	4b11      	ldr	r3, [pc, #68]	@ (8005ef8 <xTimerCreateTimerTask+0x94>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10d      	bne.n	8005ee0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec8:	b672      	cpsid	i
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	b662      	cpsie	i
 8005ed8:	613b      	str	r3, [r7, #16]
}
 8005eda:	bf00      	nop
 8005edc:	bf00      	nop
 8005ede:	e7fd      	b.n	8005edc <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005ee0:	697b      	ldr	r3, [r7, #20]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000eb4 	.word	0x20000eb4
 8005ef0:	08006f90 	.word	0x08006f90
 8005ef4:	0800603d 	.word	0x0800603d
 8005ef8:	20000eb8 	.word	0x20000eb8

08005efc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08a      	sub	sp, #40	@ 0x28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10d      	bne.n	8005f30 <xTimerGenericCommand+0x34>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f18:	b672      	cpsid	i
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	b662      	cpsie	i
 8005f28:	623b      	str	r3, [r7, #32]
}
 8005f2a:	bf00      	nop
 8005f2c:	bf00      	nop
 8005f2e:	e7fd      	b.n	8005f2c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f30:	4b19      	ldr	r3, [pc, #100]	@ (8005f98 <xTimerGenericCommand+0x9c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d02a      	beq.n	8005f8e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	dc18      	bgt.n	8005f7c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f4a:	f7ff fda1 	bl	8005a90 <xTaskGetSchedulerState>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d109      	bne.n	8005f68 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f54:	4b10      	ldr	r3, [pc, #64]	@ (8005f98 <xTimerGenericCommand+0x9c>)
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	f107 0110 	add.w	r1, r7, #16
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f60:	f7fe f87a 	bl	8004058 <xQueueGenericSend>
 8005f64:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f66:	e012      	b.n	8005f8e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f68:	4b0b      	ldr	r3, [pc, #44]	@ (8005f98 <xTimerGenericCommand+0x9c>)
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	f107 0110 	add.w	r1, r7, #16
 8005f70:	2300      	movs	r3, #0
 8005f72:	2200      	movs	r2, #0
 8005f74:	f7fe f870 	bl	8004058 <xQueueGenericSend>
 8005f78:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f7a:	e008      	b.n	8005f8e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f7c:	4b06      	ldr	r3, [pc, #24]	@ (8005f98 <xTimerGenericCommand+0x9c>)
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	f107 0110 	add.w	r1, r7, #16
 8005f84:	2300      	movs	r3, #0
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	f7fe f970 	bl	800426c <xQueueGenericSendFromISR>
 8005f8c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3728      	adds	r7, #40	@ 0x28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20000eb4 	.word	0x20000eb4

08005f9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa6:	4b24      	ldr	r3, [pc, #144]	@ (8006038 <prvProcessExpiredTimer+0x9c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fd fe55 	bl	8003c64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d025      	beq.n	8006014 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	18d1      	adds	r1, r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	6978      	ldr	r0, [r7, #20]
 8005fd6:	f000 f8d7 	bl	8006188 <prvInsertTimerInActiveList>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d022      	beq.n	8006026 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	6978      	ldr	r0, [r7, #20]
 8005fec:	f7ff ff86 	bl	8005efc <xTimerGenericCommand>
 8005ff0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d116      	bne.n	8006026 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffc:	b672      	cpsid	i
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	b662      	cpsie	i
 800600c:	60fb      	str	r3, [r7, #12]
}
 800600e:	bf00      	nop
 8006010:	bf00      	nop
 8006012:	e7fd      	b.n	8006010 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800601a:	f023 0301 	bic.w	r3, r3, #1
 800601e:	b2da      	uxtb	r2, r3
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	6978      	ldr	r0, [r7, #20]
 800602c:	4798      	blx	r3
}
 800602e:	bf00      	nop
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000eac 	.word	0x20000eac

0800603c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006044:	f107 0308 	add.w	r3, r7, #8
 8006048:	4618      	mov	r0, r3
 800604a:	f000 f859 	bl	8006100 <prvGetNextExpireTime>
 800604e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4619      	mov	r1, r3
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 f805 	bl	8006064 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800605a:	f000 f8d7 	bl	800620c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800605e:	bf00      	nop
 8006060:	e7f0      	b.n	8006044 <prvTimerTask+0x8>
	...

08006064 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800606e:	f7ff f909 	bl	8005284 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006072:	f107 0308 	add.w	r3, r7, #8
 8006076:	4618      	mov	r0, r3
 8006078:	f000 f866 	bl	8006148 <prvSampleTimeNow>
 800607c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d130      	bne.n	80060e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <prvProcessTimerOrBlockTask+0x3c>
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	429a      	cmp	r2, r3
 8006090:	d806      	bhi.n	80060a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006092:	f7ff f905 	bl	80052a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006096:	68f9      	ldr	r1, [r7, #12]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff ff7f 	bl	8005f9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800609e:	e024      	b.n	80060ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060a6:	4b13      	ldr	r3, [pc, #76]	@ (80060f4 <prvProcessTimerOrBlockTask+0x90>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <prvProcessTimerOrBlockTask+0x50>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <prvProcessTimerOrBlockTask+0x52>
 80060b4:	2300      	movs	r3, #0
 80060b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060b8:	4b0f      	ldr	r3, [pc, #60]	@ (80060f8 <prvProcessTimerOrBlockTask+0x94>)
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	4619      	mov	r1, r3
 80060c6:	f7fe fe37 	bl	8004d38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060ca:	f7ff f8e9 	bl	80052a0 <xTaskResumeAll>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060d4:	4b09      	ldr	r3, [pc, #36]	@ (80060fc <prvProcessTimerOrBlockTask+0x98>)
 80060d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	f3bf 8f6f 	isb	sy
}
 80060e4:	e001      	b.n	80060ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060e6:	f7ff f8db 	bl	80052a0 <xTaskResumeAll>
}
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20000eb0 	.word	0x20000eb0
 80060f8:	20000eb4 	.word	0x20000eb4
 80060fc:	e000ed04 	.word	0xe000ed04

08006100 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006108:	4b0e      	ldr	r3, [pc, #56]	@ (8006144 <prvGetNextExpireTime+0x44>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <prvGetNextExpireTime+0x16>
 8006112:	2201      	movs	r2, #1
 8006114:	e000      	b.n	8006118 <prvGetNextExpireTime+0x18>
 8006116:	2200      	movs	r2, #0
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006124:	4b07      	ldr	r3, [pc, #28]	@ (8006144 <prvGetNextExpireTime+0x44>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	e001      	b.n	8006134 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006134:	68fb      	ldr	r3, [r7, #12]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20000eac 	.word	0x20000eac

08006148 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006150:	f7ff f946 	bl	80053e0 <xTaskGetTickCount>
 8006154:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006156:	4b0b      	ldr	r3, [pc, #44]	@ (8006184 <prvSampleTimeNow+0x3c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	429a      	cmp	r2, r3
 800615e:	d205      	bcs.n	800616c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006160:	f000 f940 	bl	80063e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e002      	b.n	8006172 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006172:	4a04      	ldr	r2, [pc, #16]	@ (8006184 <prvSampleTimeNow+0x3c>)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006178:	68fb      	ldr	r3, [r7, #12]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000ebc 	.word	0x20000ebc

08006188 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d812      	bhi.n	80061d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	1ad2      	subs	r2, r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d302      	bcc.n	80061c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	e01b      	b.n	80061fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061c2:	4b10      	ldr	r3, [pc, #64]	@ (8006204 <prvInsertTimerInActiveList+0x7c>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4619      	mov	r1, r3
 80061cc:	4610      	mov	r0, r2
 80061ce:	f7fd fd10 	bl	8003bf2 <vListInsert>
 80061d2:	e012      	b.n	80061fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d206      	bcs.n	80061ea <prvInsertTimerInActiveList+0x62>
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d302      	bcc.n	80061ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061e4:	2301      	movs	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	e007      	b.n	80061fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061ea:	4b07      	ldr	r3, [pc, #28]	@ (8006208 <prvInsertTimerInActiveList+0x80>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f7fd fcfc 	bl	8003bf2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061fa:	697b      	ldr	r3, [r7, #20]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20000eb0 	.word	0x20000eb0
 8006208:	20000eac 	.word	0x20000eac

0800620c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08e      	sub	sp, #56	@ 0x38
 8006210:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006212:	e0d4      	b.n	80063be <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	da1b      	bge.n	8006252 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800621a:	1d3b      	adds	r3, r7, #4
 800621c:	3304      	adds	r3, #4
 800621e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10d      	bne.n	8006242 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	b672      	cpsid	i
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	b662      	cpsie	i
 800623a:	61fb      	str	r3, [r7, #28]
}
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	e7fd      	b.n	800623e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006248:	6850      	ldr	r0, [r2, #4]
 800624a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800624c:	6892      	ldr	r2, [r2, #8]
 800624e:	4611      	mov	r1, r2
 8006250:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f2c0 80b2 	blt.w	80063be <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800625e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d004      	beq.n	8006270 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	3304      	adds	r3, #4
 800626a:	4618      	mov	r0, r3
 800626c:	f7fd fcfa 	bl	8003c64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006270:	463b      	mov	r3, r7
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff ff68 	bl	8006148 <prvSampleTimeNow>
 8006278:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b09      	cmp	r3, #9
 800627e:	f200 809b 	bhi.w	80063b8 <prvProcessReceivedCommands+0x1ac>
 8006282:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <prvProcessReceivedCommands+0x7c>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062b1 	.word	0x080062b1
 800628c:	080062b1 	.word	0x080062b1
 8006290:	080062b1 	.word	0x080062b1
 8006294:	0800632b 	.word	0x0800632b
 8006298:	0800633f 	.word	0x0800633f
 800629c:	0800638f 	.word	0x0800638f
 80062a0:	080062b1 	.word	0x080062b1
 80062a4:	080062b1 	.word	0x080062b1
 80062a8:	0800632b 	.word	0x0800632b
 80062ac:	0800633f 	.word	0x0800633f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	18d1      	adds	r1, r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062d0:	f7ff ff5a 	bl	8006188 <prvInsertTimerInActiveList>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d070      	beq.n	80063bc <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d065      	beq.n	80063bc <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	441a      	add	r2, r3
 80062f8:	2300      	movs	r3, #0
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	2300      	movs	r3, #0
 80062fe:	2100      	movs	r1, #0
 8006300:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006302:	f7ff fdfb 	bl	8005efc <xTimerGenericCommand>
 8006306:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d156      	bne.n	80063bc <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	b672      	cpsid	i
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	b662      	cpsie	i
 8006322:	61bb      	str	r3, [r7, #24]
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop
 8006328:	e7fd      	b.n	8006326 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800632a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	b2da      	uxtb	r2, r3
 8006336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006338:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800633c:	e03f      	b.n	80063be <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006344:	f043 0301 	orr.w	r3, r3, #1
 8006348:	b2da      	uxtb	r2, r3
 800634a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006354:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10d      	bne.n	800637a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	b672      	cpsid	i
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	b662      	cpsie	i
 8006372:	617b      	str	r3, [r7, #20]
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	e7fd      	b.n	8006376 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800637a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637c:	699a      	ldr	r2, [r3, #24]
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	18d1      	adds	r1, r2, r3
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006386:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006388:	f7ff fefe 	bl	8006188 <prvInsertTimerInActiveList>
					break;
 800638c:	e017      	b.n	80063be <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d103      	bne.n	80063a4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800639c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800639e:	f000 fbd1 	bl	8006b44 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063a2:	e00c      	b.n	80063be <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063aa:	f023 0301 	bic.w	r3, r3, #1
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063b6:	e002      	b.n	80063be <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80063b8:	bf00      	nop
 80063ba:	e000      	b.n	80063be <prvProcessReceivedCommands+0x1b2>
					break;
 80063bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063be:	4b08      	ldr	r3, [pc, #32]	@ (80063e0 <prvProcessReceivedCommands+0x1d4>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	1d39      	adds	r1, r7, #4
 80063c4:	2200      	movs	r2, #0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe f88c 	bl	80044e4 <xQueueReceive>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f47f af20 	bne.w	8006214 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop
 80063d8:	3730      	adds	r7, #48	@ 0x30
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000eb4 	.word	0x20000eb4

080063e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063ea:	e04b      	b.n	8006484 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063ec:	4b2f      	ldr	r3, [pc, #188]	@ (80064ac <prvSwitchTimerLists+0xc8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f6:	4b2d      	ldr	r3, [pc, #180]	@ (80064ac <prvSwitchTimerLists+0xc8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3304      	adds	r3, #4
 8006404:	4618      	mov	r0, r3
 8006406:	f7fd fc2d 	bl	8003c64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d031      	beq.n	8006484 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4413      	add	r3, r2
 8006428:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	429a      	cmp	r2, r3
 8006430:	d90e      	bls.n	8006450 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800643e:	4b1b      	ldr	r3, [pc, #108]	@ (80064ac <prvSwitchTimerLists+0xc8>)
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3304      	adds	r3, #4
 8006446:	4619      	mov	r1, r3
 8006448:	4610      	mov	r0, r2
 800644a:	f7fd fbd2 	bl	8003bf2 <vListInsert>
 800644e:	e019      	b.n	8006484 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006450:	2300      	movs	r3, #0
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	2100      	movs	r1, #0
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7ff fd4e 	bl	8005efc <xTimerGenericCommand>
 8006460:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10d      	bne.n	8006484 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646c:	b672      	cpsid	i
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	b662      	cpsie	i
 800647c:	603b      	str	r3, [r7, #0]
}
 800647e:	bf00      	nop
 8006480:	bf00      	nop
 8006482:	e7fd      	b.n	8006480 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006484:	4b09      	ldr	r3, [pc, #36]	@ (80064ac <prvSwitchTimerLists+0xc8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1ae      	bne.n	80063ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800648e:	4b07      	ldr	r3, [pc, #28]	@ (80064ac <prvSwitchTimerLists+0xc8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006494:	4b06      	ldr	r3, [pc, #24]	@ (80064b0 <prvSwitchTimerLists+0xcc>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a04      	ldr	r2, [pc, #16]	@ (80064ac <prvSwitchTimerLists+0xc8>)
 800649a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800649c:	4a04      	ldr	r2, [pc, #16]	@ (80064b0 <prvSwitchTimerLists+0xcc>)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	6013      	str	r3, [r2, #0]
}
 80064a2:	bf00      	nop
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000eac 	.word	0x20000eac
 80064b0:	20000eb0 	.word	0x20000eb0

080064b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80064ba:	f000 f947 	bl	800674c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064be:	4b15      	ldr	r3, [pc, #84]	@ (8006514 <prvCheckForValidListAndQueue+0x60>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d120      	bne.n	8006508 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064c6:	4814      	ldr	r0, [pc, #80]	@ (8006518 <prvCheckForValidListAndQueue+0x64>)
 80064c8:	f7fd fb42 	bl	8003b50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064cc:	4813      	ldr	r0, [pc, #76]	@ (800651c <prvCheckForValidListAndQueue+0x68>)
 80064ce:	f7fd fb3f 	bl	8003b50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064d2:	4b13      	ldr	r3, [pc, #76]	@ (8006520 <prvCheckForValidListAndQueue+0x6c>)
 80064d4:	4a10      	ldr	r2, [pc, #64]	@ (8006518 <prvCheckForValidListAndQueue+0x64>)
 80064d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064d8:	4b12      	ldr	r3, [pc, #72]	@ (8006524 <prvCheckForValidListAndQueue+0x70>)
 80064da:	4a10      	ldr	r2, [pc, #64]	@ (800651c <prvCheckForValidListAndQueue+0x68>)
 80064dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064de:	2300      	movs	r3, #0
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	4b11      	ldr	r3, [pc, #68]	@ (8006528 <prvCheckForValidListAndQueue+0x74>)
 80064e4:	4a11      	ldr	r2, [pc, #68]	@ (800652c <prvCheckForValidListAndQueue+0x78>)
 80064e6:	2110      	movs	r1, #16
 80064e8:	200a      	movs	r0, #10
 80064ea:	f7fd fc51 	bl	8003d90 <xQueueGenericCreateStatic>
 80064ee:	4603      	mov	r3, r0
 80064f0:	4a08      	ldr	r2, [pc, #32]	@ (8006514 <prvCheckForValidListAndQueue+0x60>)
 80064f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064f4:	4b07      	ldr	r3, [pc, #28]	@ (8006514 <prvCheckForValidListAndQueue+0x60>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064fc:	4b05      	ldr	r3, [pc, #20]	@ (8006514 <prvCheckForValidListAndQueue+0x60>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	490b      	ldr	r1, [pc, #44]	@ (8006530 <prvCheckForValidListAndQueue+0x7c>)
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe fbc4 	bl	8004c90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006508:	f000 f956 	bl	80067b8 <vPortExitCritical>
}
 800650c:	bf00      	nop
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000eb4 	.word	0x20000eb4
 8006518:	20000e84 	.word	0x20000e84
 800651c:	20000e98 	.word	0x20000e98
 8006520:	20000eac 	.word	0x20000eac
 8006524:	20000eb0 	.word	0x20000eb0
 8006528:	20000f60 	.word	0x20000f60
 800652c:	20000ec0 	.word	0x20000ec0
 8006530:	08006f98 	.word	0x08006f98

08006534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3b04      	subs	r3, #4
 8006544:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800654c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3b04      	subs	r3, #4
 8006552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f023 0201 	bic.w	r2, r3, #1
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3b04      	subs	r3, #4
 8006562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006564:	4a0c      	ldr	r2, [pc, #48]	@ (8006598 <pxPortInitialiseStack+0x64>)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3b14      	subs	r3, #20
 800656e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	3b04      	subs	r3, #4
 800657a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f06f 0202 	mvn.w	r2, #2
 8006582:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3b20      	subs	r3, #32
 8006588:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800658a:	68fb      	ldr	r3, [r7, #12]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	0800659d 	.word	0x0800659d

0800659c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065a6:	4b15      	ldr	r3, [pc, #84]	@ (80065fc <prvTaskExitError+0x60>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ae:	d00d      	beq.n	80065cc <prvTaskExitError+0x30>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b4:	b672      	cpsid	i
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	b662      	cpsie	i
 80065c4:	60fb      	str	r3, [r7, #12]
}
 80065c6:	bf00      	nop
 80065c8:	bf00      	nop
 80065ca:	e7fd      	b.n	80065c8 <prvTaskExitError+0x2c>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d0:	b672      	cpsid	i
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	b662      	cpsie	i
 80065e0:	60bb      	str	r3, [r7, #8]
}
 80065e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065e4:	bf00      	nop
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0fc      	beq.n	80065e6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	2000000c 	.word	0x2000000c

08006600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006600:	4b07      	ldr	r3, [pc, #28]	@ (8006620 <pxCurrentTCBConst2>)
 8006602:	6819      	ldr	r1, [r3, #0]
 8006604:	6808      	ldr	r0, [r1, #0]
 8006606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660a:	f380 8809 	msr	PSP, r0
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f04f 0000 	mov.w	r0, #0
 8006616:	f380 8811 	msr	BASEPRI, r0
 800661a:	4770      	bx	lr
 800661c:	f3af 8000 	nop.w

08006620 <pxCurrentTCBConst2>:
 8006620:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop

08006628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006628:	4808      	ldr	r0, [pc, #32]	@ (800664c <prvPortStartFirstTask+0x24>)
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	6800      	ldr	r0, [r0, #0]
 800662e:	f380 8808 	msr	MSP, r0
 8006632:	f04f 0000 	mov.w	r0, #0
 8006636:	f380 8814 	msr	CONTROL, r0
 800663a:	b662      	cpsie	i
 800663c:	b661      	cpsie	f
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	df00      	svc	0
 8006648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800664a:	bf00      	nop
 800664c:	e000ed08 	.word	0xe000ed08

08006650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006656:	4b37      	ldr	r3, [pc, #220]	@ (8006734 <xPortStartScheduler+0xe4>)
 8006658:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	22ff      	movs	r2, #255	@ 0xff
 8006666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006678:	b2da      	uxtb	r2, r3
 800667a:	4b2f      	ldr	r3, [pc, #188]	@ (8006738 <xPortStartScheduler+0xe8>)
 800667c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800667e:	4b2f      	ldr	r3, [pc, #188]	@ (800673c <xPortStartScheduler+0xec>)
 8006680:	2207      	movs	r2, #7
 8006682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006684:	e009      	b.n	800669a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006686:	4b2d      	ldr	r3, [pc, #180]	@ (800673c <xPortStartScheduler+0xec>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3b01      	subs	r3, #1
 800668c:	4a2b      	ldr	r2, [pc, #172]	@ (800673c <xPortStartScheduler+0xec>)
 800668e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	b2db      	uxtb	r3, r3
 8006698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a2:	2b80      	cmp	r3, #128	@ 0x80
 80066a4:	d0ef      	beq.n	8006686 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066a6:	4b25      	ldr	r3, [pc, #148]	@ (800673c <xPortStartScheduler+0xec>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f1c3 0307 	rsb	r3, r3, #7
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d00d      	beq.n	80066ce <xPortStartScheduler+0x7e>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b6:	b672      	cpsid	i
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	b662      	cpsie	i
 80066c6:	60bb      	str	r3, [r7, #8]
}
 80066c8:	bf00      	nop
 80066ca:	bf00      	nop
 80066cc:	e7fd      	b.n	80066ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066ce:	4b1b      	ldr	r3, [pc, #108]	@ (800673c <xPortStartScheduler+0xec>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	021b      	lsls	r3, r3, #8
 80066d4:	4a19      	ldr	r2, [pc, #100]	@ (800673c <xPortStartScheduler+0xec>)
 80066d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066d8:	4b18      	ldr	r3, [pc, #96]	@ (800673c <xPortStartScheduler+0xec>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066e0:	4a16      	ldr	r2, [pc, #88]	@ (800673c <xPortStartScheduler+0xec>)
 80066e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066ec:	4b14      	ldr	r3, [pc, #80]	@ (8006740 <xPortStartScheduler+0xf0>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a13      	ldr	r2, [pc, #76]	@ (8006740 <xPortStartScheduler+0xf0>)
 80066f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80066f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066f8:	4b11      	ldr	r3, [pc, #68]	@ (8006740 <xPortStartScheduler+0xf0>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a10      	ldr	r2, [pc, #64]	@ (8006740 <xPortStartScheduler+0xf0>)
 80066fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006704:	f000 f8dc 	bl	80068c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006708:	4b0e      	ldr	r3, [pc, #56]	@ (8006744 <xPortStartScheduler+0xf4>)
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800670e:	f000 f8fb 	bl	8006908 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006712:	4b0d      	ldr	r3, [pc, #52]	@ (8006748 <xPortStartScheduler+0xf8>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a0c      	ldr	r2, [pc, #48]	@ (8006748 <xPortStartScheduler+0xf8>)
 8006718:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800671c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800671e:	f7ff ff83 	bl	8006628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006722:	f7fe ff29 	bl	8005578 <vTaskSwitchContext>
	prvTaskExitError();
 8006726:	f7ff ff39 	bl	800659c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	e000e400 	.word	0xe000e400
 8006738:	20000fb0 	.word	0x20000fb0
 800673c:	20000fb4 	.word	0x20000fb4
 8006740:	e000ed20 	.word	0xe000ed20
 8006744:	2000000c 	.word	0x2000000c
 8006748:	e000ef34 	.word	0xe000ef34

0800674c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006756:	b672      	cpsid	i
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	b662      	cpsie	i
 8006766:	607b      	str	r3, [r7, #4]
}
 8006768:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800676a:	4b11      	ldr	r3, [pc, #68]	@ (80067b0 <vPortEnterCritical+0x64>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3301      	adds	r3, #1
 8006770:	4a0f      	ldr	r2, [pc, #60]	@ (80067b0 <vPortEnterCritical+0x64>)
 8006772:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006774:	4b0e      	ldr	r3, [pc, #56]	@ (80067b0 <vPortEnterCritical+0x64>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d112      	bne.n	80067a2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800677c:	4b0d      	ldr	r3, [pc, #52]	@ (80067b4 <vPortEnterCritical+0x68>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00d      	beq.n	80067a2 <vPortEnterCritical+0x56>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678a:	b672      	cpsid	i
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	b662      	cpsie	i
 800679a:	603b      	str	r3, [r7, #0]
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	e7fd      	b.n	800679e <vPortEnterCritical+0x52>
	}
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	2000000c 	.word	0x2000000c
 80067b4:	e000ed04 	.word	0xe000ed04

080067b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067be:	4b13      	ldr	r3, [pc, #76]	@ (800680c <vPortExitCritical+0x54>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10d      	bne.n	80067e2 <vPortExitCritical+0x2a>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ca:	b672      	cpsid	i
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	b662      	cpsie	i
 80067da:	607b      	str	r3, [r7, #4]
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	e7fd      	b.n	80067de <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80067e2:	4b0a      	ldr	r3, [pc, #40]	@ (800680c <vPortExitCritical+0x54>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	4a08      	ldr	r2, [pc, #32]	@ (800680c <vPortExitCritical+0x54>)
 80067ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067ec:	4b07      	ldr	r3, [pc, #28]	@ (800680c <vPortExitCritical+0x54>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <vPortExitCritical+0x48>
 80067f4:	2300      	movs	r3, #0
 80067f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	f383 8811 	msr	BASEPRI, r3
}
 80067fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	2000000c 	.word	0x2000000c

08006810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006810:	f3ef 8009 	mrs	r0, PSP
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	4b15      	ldr	r3, [pc, #84]	@ (8006870 <pxCurrentTCBConst>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	f01e 0f10 	tst.w	lr, #16
 8006820:	bf08      	it	eq
 8006822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	6010      	str	r0, [r2, #0]
 800682c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006830:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006834:	b672      	cpsid	i
 8006836:	f380 8811 	msr	BASEPRI, r0
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	b662      	cpsie	i
 8006844:	f7fe fe98 	bl	8005578 <vTaskSwitchContext>
 8006848:	f04f 0000 	mov.w	r0, #0
 800684c:	f380 8811 	msr	BASEPRI, r0
 8006850:	bc09      	pop	{r0, r3}
 8006852:	6819      	ldr	r1, [r3, #0]
 8006854:	6808      	ldr	r0, [r1, #0]
 8006856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	f01e 0f10 	tst.w	lr, #16
 800685e:	bf08      	it	eq
 8006860:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006864:	f380 8809 	msr	PSP, r0
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop

08006870 <pxCurrentTCBConst>:
 8006870:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop

08006878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006882:	b672      	cpsid	i
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	b662      	cpsie	i
 8006892:	607b      	str	r3, [r7, #4]
}
 8006894:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006896:	f7fe fdb3 	bl	8005400 <xTaskIncrementTick>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068a0:	4b06      	ldr	r3, [pc, #24]	@ (80068bc <xPortSysTickHandler+0x44>)
 80068a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	2300      	movs	r3, #0
 80068aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	f383 8811 	msr	BASEPRI, r3
}
 80068b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068b4:	bf00      	nop
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	e000ed04 	.word	0xe000ed04

080068c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068c4:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <vPortSetupTimerInterrupt+0x34>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068ca:	4b0b      	ldr	r3, [pc, #44]	@ (80068f8 <vPortSetupTimerInterrupt+0x38>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068d0:	4b0a      	ldr	r3, [pc, #40]	@ (80068fc <vPortSetupTimerInterrupt+0x3c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006900 <vPortSetupTimerInterrupt+0x40>)
 80068d6:	fba2 2303 	umull	r2, r3, r2, r3
 80068da:	099b      	lsrs	r3, r3, #6
 80068dc:	4a09      	ldr	r2, [pc, #36]	@ (8006904 <vPortSetupTimerInterrupt+0x44>)
 80068de:	3b01      	subs	r3, #1
 80068e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068e2:	4b04      	ldr	r3, [pc, #16]	@ (80068f4 <vPortSetupTimerInterrupt+0x34>)
 80068e4:	2207      	movs	r2, #7
 80068e6:	601a      	str	r2, [r3, #0]
}
 80068e8:	bf00      	nop
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	e000e010 	.word	0xe000e010
 80068f8:	e000e018 	.word	0xe000e018
 80068fc:	20000000 	.word	0x20000000
 8006900:	10624dd3 	.word	0x10624dd3
 8006904:	e000e014 	.word	0xe000e014

08006908 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006908:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006918 <vPortEnableVFP+0x10>
 800690c:	6801      	ldr	r1, [r0, #0]
 800690e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006912:	6001      	str	r1, [r0, #0]
 8006914:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006916:	bf00      	nop
 8006918:	e000ed88 	.word	0xe000ed88

0800691c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006922:	f3ef 8305 	mrs	r3, IPSR
 8006926:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b0f      	cmp	r3, #15
 800692c:	d917      	bls.n	800695e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800692e:	4a1a      	ldr	r2, [pc, #104]	@ (8006998 <vPortValidateInterruptPriority+0x7c>)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4413      	add	r3, r2
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006938:	4b18      	ldr	r3, [pc, #96]	@ (800699c <vPortValidateInterruptPriority+0x80>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	7afa      	ldrb	r2, [r7, #11]
 800693e:	429a      	cmp	r2, r3
 8006940:	d20d      	bcs.n	800695e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006946:	b672      	cpsid	i
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	b662      	cpsie	i
 8006956:	607b      	str	r3, [r7, #4]
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	e7fd      	b.n	800695a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800695e:	4b10      	ldr	r3, [pc, #64]	@ (80069a0 <vPortValidateInterruptPriority+0x84>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006966:	4b0f      	ldr	r3, [pc, #60]	@ (80069a4 <vPortValidateInterruptPriority+0x88>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d90d      	bls.n	800698a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	b672      	cpsid	i
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	b662      	cpsie	i
 8006982:	603b      	str	r3, [r7, #0]
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop
 8006988:	e7fd      	b.n	8006986 <vPortValidateInterruptPriority+0x6a>
	}
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	e000e3f0 	.word	0xe000e3f0
 800699c:	20000fb0 	.word	0x20000fb0
 80069a0:	e000ed0c 	.word	0xe000ed0c
 80069a4:	20000fb4 	.word	0x20000fb4

080069a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	@ 0x28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069b4:	f7fe fc66 	bl	8005284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069b8:	4b5d      	ldr	r3, [pc, #372]	@ (8006b30 <pvPortMalloc+0x188>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069c0:	f000 f920 	bl	8006c04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069c4:	4b5b      	ldr	r3, [pc, #364]	@ (8006b34 <pvPortMalloc+0x18c>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4013      	ands	r3, r2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f040 8094 	bne.w	8006afa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d020      	beq.n	8006a1a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80069d8:	2208      	movs	r2, #8
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4413      	add	r3, r2
 80069de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d017      	beq.n	8006a1a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f023 0307 	bic.w	r3, r3, #7
 80069f0:	3308      	adds	r3, #8
 80069f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00d      	beq.n	8006a1a <pvPortMalloc+0x72>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a02:	b672      	cpsid	i
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	b662      	cpsie	i
 8006a12:	617b      	str	r3, [r7, #20]
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop
 8006a18:	e7fd      	b.n	8006a16 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d06c      	beq.n	8006afa <pvPortMalloc+0x152>
 8006a20:	4b45      	ldr	r3, [pc, #276]	@ (8006b38 <pvPortMalloc+0x190>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d867      	bhi.n	8006afa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a2a:	4b44      	ldr	r3, [pc, #272]	@ (8006b3c <pvPortMalloc+0x194>)
 8006a2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a2e:	4b43      	ldr	r3, [pc, #268]	@ (8006b3c <pvPortMalloc+0x194>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a34:	e004      	b.n	8006a40 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d903      	bls.n	8006a52 <pvPortMalloc+0xaa>
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f1      	bne.n	8006a36 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a52:	4b37      	ldr	r3, [pc, #220]	@ (8006b30 <pvPortMalloc+0x188>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d04e      	beq.n	8006afa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2208      	movs	r2, #8
 8006a62:	4413      	add	r3, r2
 8006a64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	1ad2      	subs	r2, r2, r3
 8006a76:	2308      	movs	r3, #8
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d922      	bls.n	8006ac4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4413      	add	r3, r2
 8006a84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	f003 0307 	and.w	r3, r3, #7
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00d      	beq.n	8006aac <pvPortMalloc+0x104>
	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a94:	b672      	cpsid	i
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	b662      	cpsie	i
 8006aa4:	613b      	str	r3, [r7, #16]
}
 8006aa6:	bf00      	nop
 8006aa8:	bf00      	nop
 8006aaa:	e7fd      	b.n	8006aa8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	1ad2      	subs	r2, r2, r3
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006abe:	69b8      	ldr	r0, [r7, #24]
 8006ac0:	f000 f902 	bl	8006cc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8006b38 <pvPortMalloc+0x190>)
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	4a1a      	ldr	r2, [pc, #104]	@ (8006b38 <pvPortMalloc+0x190>)
 8006ad0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ad2:	4b19      	ldr	r3, [pc, #100]	@ (8006b38 <pvPortMalloc+0x190>)
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8006b40 <pvPortMalloc+0x198>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d203      	bcs.n	8006ae6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ade:	4b16      	ldr	r3, [pc, #88]	@ (8006b38 <pvPortMalloc+0x190>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a17      	ldr	r2, [pc, #92]	@ (8006b40 <pvPortMalloc+0x198>)
 8006ae4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	4b12      	ldr	r3, [pc, #72]	@ (8006b34 <pvPortMalloc+0x18c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006afa:	f7fe fbd1 	bl	80052a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00d      	beq.n	8006b24 <pvPortMalloc+0x17c>
	__asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0c:	b672      	cpsid	i
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	b662      	cpsie	i
 8006b1c:	60fb      	str	r3, [r7, #12]
}
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	e7fd      	b.n	8006b20 <pvPortMalloc+0x178>
	return pvReturn;
 8006b24:	69fb      	ldr	r3, [r7, #28]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3728      	adds	r7, #40	@ 0x28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20004bc0 	.word	0x20004bc0
 8006b34:	20004bcc 	.word	0x20004bcc
 8006b38:	20004bc4 	.word	0x20004bc4
 8006b3c:	20004bb8 	.word	0x20004bb8
 8006b40:	20004bc8 	.word	0x20004bc8

08006b44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d04e      	beq.n	8006bf4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b56:	2308      	movs	r3, #8
 8006b58:	425b      	negs	r3, r3
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	4b24      	ldr	r3, [pc, #144]	@ (8006bfc <vPortFree+0xb8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10d      	bne.n	8006b8e <vPortFree+0x4a>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b76:	b672      	cpsid	i
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	b662      	cpsie	i
 8006b86:	60fb      	str	r3, [r7, #12]
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	e7fd      	b.n	8006b8a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00d      	beq.n	8006bb2 <vPortFree+0x6e>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9a:	b672      	cpsid	i
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	b662      	cpsie	i
 8006baa:	60bb      	str	r3, [r7, #8]
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	e7fd      	b.n	8006bae <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	4b11      	ldr	r3, [pc, #68]	@ (8006bfc <vPortFree+0xb8>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d019      	beq.n	8006bf4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d115      	bne.n	8006bf4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8006bfc <vPortFree+0xb8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	401a      	ands	r2, r3
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bd8:	f7fe fb54 	bl	8005284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	4b07      	ldr	r3, [pc, #28]	@ (8006c00 <vPortFree+0xbc>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4413      	add	r3, r2
 8006be6:	4a06      	ldr	r2, [pc, #24]	@ (8006c00 <vPortFree+0xbc>)
 8006be8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bea:	6938      	ldr	r0, [r7, #16]
 8006bec:	f000 f86c 	bl	8006cc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006bf0:	f7fe fb56 	bl	80052a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bf4:	bf00      	nop
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20004bcc 	.word	0x20004bcc
 8006c00:	20004bc4 	.word	0x20004bc4

08006c04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c0a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006c0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c10:	4b27      	ldr	r3, [pc, #156]	@ (8006cb0 <prvHeapInit+0xac>)
 8006c12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00c      	beq.n	8006c38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3307      	adds	r3, #7
 8006c22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0307 	bic.w	r3, r3, #7
 8006c2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	4a1f      	ldr	r2, [pc, #124]	@ (8006cb0 <prvHeapInit+0xac>)
 8006c34:	4413      	add	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006cb4 <prvHeapInit+0xb0>)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c42:	4b1c      	ldr	r3, [pc, #112]	@ (8006cb4 <prvHeapInit+0xb0>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c50:	2208      	movs	r2, #8
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0307 	bic.w	r3, r3, #7
 8006c5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4a15      	ldr	r2, [pc, #84]	@ (8006cb8 <prvHeapInit+0xb4>)
 8006c64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c66:	4b14      	ldr	r3, [pc, #80]	@ (8006cb8 <prvHeapInit+0xb4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c6e:	4b12      	ldr	r3, [pc, #72]	@ (8006cb8 <prvHeapInit+0xb4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	1ad2      	subs	r2, r2, r3
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c84:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb8 <prvHeapInit+0xb4>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	4a0a      	ldr	r2, [pc, #40]	@ (8006cbc <prvHeapInit+0xb8>)
 8006c92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4a09      	ldr	r2, [pc, #36]	@ (8006cc0 <prvHeapInit+0xbc>)
 8006c9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c9c:	4b09      	ldr	r3, [pc, #36]	@ (8006cc4 <prvHeapInit+0xc0>)
 8006c9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	20000fb8 	.word	0x20000fb8
 8006cb4:	20004bb8 	.word	0x20004bb8
 8006cb8:	20004bc0 	.word	0x20004bc0
 8006cbc:	20004bc8 	.word	0x20004bc8
 8006cc0:	20004bc4 	.word	0x20004bc4
 8006cc4:	20004bcc 	.word	0x20004bcc

08006cc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cd0:	4b28      	ldr	r3, [pc, #160]	@ (8006d74 <prvInsertBlockIntoFreeList+0xac>)
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	e002      	b.n	8006cdc <prvInsertBlockIntoFreeList+0x14>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d8f7      	bhi.n	8006cd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d108      	bne.n	8006d0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	441a      	add	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	441a      	add	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d118      	bne.n	8006d50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b15      	ldr	r3, [pc, #84]	@ (8006d78 <prvInsertBlockIntoFreeList+0xb0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d00d      	beq.n	8006d46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	441a      	add	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e008      	b.n	8006d58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d46:	4b0c      	ldr	r3, [pc, #48]	@ (8006d78 <prvInsertBlockIntoFreeList+0xb0>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e003      	b.n	8006d58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d002      	beq.n	8006d66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20004bb8 	.word	0x20004bb8
 8006d78:	20004bc0 	.word	0x20004bc0

08006d7c <memset>:
 8006d7c:	4402      	add	r2, r0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d100      	bne.n	8006d86 <memset+0xa>
 8006d84:	4770      	bx	lr
 8006d86:	f803 1b01 	strb.w	r1, [r3], #1
 8006d8a:	e7f9      	b.n	8006d80 <memset+0x4>

08006d8c <_reclaim_reent>:
 8006d8c:	4b29      	ldr	r3, [pc, #164]	@ (8006e34 <_reclaim_reent+0xa8>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4283      	cmp	r3, r0
 8006d92:	b570      	push	{r4, r5, r6, lr}
 8006d94:	4604      	mov	r4, r0
 8006d96:	d04b      	beq.n	8006e30 <_reclaim_reent+0xa4>
 8006d98:	69c3      	ldr	r3, [r0, #28]
 8006d9a:	b1ab      	cbz	r3, 8006dc8 <_reclaim_reent+0x3c>
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	b16b      	cbz	r3, 8006dbc <_reclaim_reent+0x30>
 8006da0:	2500      	movs	r5, #0
 8006da2:	69e3      	ldr	r3, [r4, #28]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	5959      	ldr	r1, [r3, r5]
 8006da8:	2900      	cmp	r1, #0
 8006daa:	d13b      	bne.n	8006e24 <_reclaim_reent+0x98>
 8006dac:	3504      	adds	r5, #4
 8006dae:	2d80      	cmp	r5, #128	@ 0x80
 8006db0:	d1f7      	bne.n	8006da2 <_reclaim_reent+0x16>
 8006db2:	69e3      	ldr	r3, [r4, #28]
 8006db4:	4620      	mov	r0, r4
 8006db6:	68d9      	ldr	r1, [r3, #12]
 8006db8:	f000 f872 	bl	8006ea0 <_free_r>
 8006dbc:	69e3      	ldr	r3, [r4, #28]
 8006dbe:	6819      	ldr	r1, [r3, #0]
 8006dc0:	b111      	cbz	r1, 8006dc8 <_reclaim_reent+0x3c>
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 f86c 	bl	8006ea0 <_free_r>
 8006dc8:	6961      	ldr	r1, [r4, #20]
 8006dca:	b111      	cbz	r1, 8006dd2 <_reclaim_reent+0x46>
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f000 f867 	bl	8006ea0 <_free_r>
 8006dd2:	69e1      	ldr	r1, [r4, #28]
 8006dd4:	b111      	cbz	r1, 8006ddc <_reclaim_reent+0x50>
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 f862 	bl	8006ea0 <_free_r>
 8006ddc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006dde:	b111      	cbz	r1, 8006de6 <_reclaim_reent+0x5a>
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 f85d 	bl	8006ea0 <_free_r>
 8006de6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006de8:	b111      	cbz	r1, 8006df0 <_reclaim_reent+0x64>
 8006dea:	4620      	mov	r0, r4
 8006dec:	f000 f858 	bl	8006ea0 <_free_r>
 8006df0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006df2:	b111      	cbz	r1, 8006dfa <_reclaim_reent+0x6e>
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 f853 	bl	8006ea0 <_free_r>
 8006dfa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006dfc:	b111      	cbz	r1, 8006e04 <_reclaim_reent+0x78>
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 f84e 	bl	8006ea0 <_free_r>
 8006e04:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006e06:	b111      	cbz	r1, 8006e0e <_reclaim_reent+0x82>
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 f849 	bl	8006ea0 <_free_r>
 8006e0e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006e10:	b111      	cbz	r1, 8006e18 <_reclaim_reent+0x8c>
 8006e12:	4620      	mov	r0, r4
 8006e14:	f000 f844 	bl	8006ea0 <_free_r>
 8006e18:	6a23      	ldr	r3, [r4, #32]
 8006e1a:	b14b      	cbz	r3, 8006e30 <_reclaim_reent+0xa4>
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e22:	4718      	bx	r3
 8006e24:	680e      	ldr	r6, [r1, #0]
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 f83a 	bl	8006ea0 <_free_r>
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	e7bb      	b.n	8006da8 <_reclaim_reent+0x1c>
 8006e30:	bd70      	pop	{r4, r5, r6, pc}
 8006e32:	bf00      	nop
 8006e34:	20000010 	.word	0x20000010

08006e38 <__libc_init_array>:
 8006e38:	b570      	push	{r4, r5, r6, lr}
 8006e3a:	4d0d      	ldr	r5, [pc, #52]	@ (8006e70 <__libc_init_array+0x38>)
 8006e3c:	4c0d      	ldr	r4, [pc, #52]	@ (8006e74 <__libc_init_array+0x3c>)
 8006e3e:	1b64      	subs	r4, r4, r5
 8006e40:	10a4      	asrs	r4, r4, #2
 8006e42:	2600      	movs	r6, #0
 8006e44:	42a6      	cmp	r6, r4
 8006e46:	d109      	bne.n	8006e5c <__libc_init_array+0x24>
 8006e48:	4d0b      	ldr	r5, [pc, #44]	@ (8006e78 <__libc_init_array+0x40>)
 8006e4a:	4c0c      	ldr	r4, [pc, #48]	@ (8006e7c <__libc_init_array+0x44>)
 8006e4c:	f000 f87e 	bl	8006f4c <_init>
 8006e50:	1b64      	subs	r4, r4, r5
 8006e52:	10a4      	asrs	r4, r4, #2
 8006e54:	2600      	movs	r6, #0
 8006e56:	42a6      	cmp	r6, r4
 8006e58:	d105      	bne.n	8006e66 <__libc_init_array+0x2e>
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
 8006e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e60:	4798      	blx	r3
 8006e62:	3601      	adds	r6, #1
 8006e64:	e7ee      	b.n	8006e44 <__libc_init_array+0xc>
 8006e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e6a:	4798      	blx	r3
 8006e6c:	3601      	adds	r6, #1
 8006e6e:	e7f2      	b.n	8006e56 <__libc_init_array+0x1e>
 8006e70:	08007018 	.word	0x08007018
 8006e74:	08007018 	.word	0x08007018
 8006e78:	08007018 	.word	0x08007018
 8006e7c:	0800701c 	.word	0x0800701c

08006e80 <__retarget_lock_acquire_recursive>:
 8006e80:	4770      	bx	lr

08006e82 <__retarget_lock_release_recursive>:
 8006e82:	4770      	bx	lr

08006e84 <memcpy>:
 8006e84:	440a      	add	r2, r1
 8006e86:	4291      	cmp	r1, r2
 8006e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e8c:	d100      	bne.n	8006e90 <memcpy+0xc>
 8006e8e:	4770      	bx	lr
 8006e90:	b510      	push	{r4, lr}
 8006e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e9a:	4291      	cmp	r1, r2
 8006e9c:	d1f9      	bne.n	8006e92 <memcpy+0xe>
 8006e9e:	bd10      	pop	{r4, pc}

08006ea0 <_free_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	2900      	cmp	r1, #0
 8006ea6:	d041      	beq.n	8006f2c <_free_r+0x8c>
 8006ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eac:	1f0c      	subs	r4, r1, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	bfb8      	it	lt
 8006eb2:	18e4      	addlt	r4, r4, r3
 8006eb4:	f000 f83e 	bl	8006f34 <__malloc_lock>
 8006eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f30 <_free_r+0x90>)
 8006eba:	6813      	ldr	r3, [r2, #0]
 8006ebc:	b933      	cbnz	r3, 8006ecc <_free_r+0x2c>
 8006ebe:	6063      	str	r3, [r4, #4]
 8006ec0:	6014      	str	r4, [r2, #0]
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ec8:	f000 b83a 	b.w	8006f40 <__malloc_unlock>
 8006ecc:	42a3      	cmp	r3, r4
 8006ece:	d908      	bls.n	8006ee2 <_free_r+0x42>
 8006ed0:	6820      	ldr	r0, [r4, #0]
 8006ed2:	1821      	adds	r1, r4, r0
 8006ed4:	428b      	cmp	r3, r1
 8006ed6:	bf01      	itttt	eq
 8006ed8:	6819      	ldreq	r1, [r3, #0]
 8006eda:	685b      	ldreq	r3, [r3, #4]
 8006edc:	1809      	addeq	r1, r1, r0
 8006ede:	6021      	streq	r1, [r4, #0]
 8006ee0:	e7ed      	b.n	8006ebe <_free_r+0x1e>
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	b10b      	cbz	r3, 8006eec <_free_r+0x4c>
 8006ee8:	42a3      	cmp	r3, r4
 8006eea:	d9fa      	bls.n	8006ee2 <_free_r+0x42>
 8006eec:	6811      	ldr	r1, [r2, #0]
 8006eee:	1850      	adds	r0, r2, r1
 8006ef0:	42a0      	cmp	r0, r4
 8006ef2:	d10b      	bne.n	8006f0c <_free_r+0x6c>
 8006ef4:	6820      	ldr	r0, [r4, #0]
 8006ef6:	4401      	add	r1, r0
 8006ef8:	1850      	adds	r0, r2, r1
 8006efa:	4283      	cmp	r3, r0
 8006efc:	6011      	str	r1, [r2, #0]
 8006efe:	d1e0      	bne.n	8006ec2 <_free_r+0x22>
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	6053      	str	r3, [r2, #4]
 8006f06:	4408      	add	r0, r1
 8006f08:	6010      	str	r0, [r2, #0]
 8006f0a:	e7da      	b.n	8006ec2 <_free_r+0x22>
 8006f0c:	d902      	bls.n	8006f14 <_free_r+0x74>
 8006f0e:	230c      	movs	r3, #12
 8006f10:	602b      	str	r3, [r5, #0]
 8006f12:	e7d6      	b.n	8006ec2 <_free_r+0x22>
 8006f14:	6820      	ldr	r0, [r4, #0]
 8006f16:	1821      	adds	r1, r4, r0
 8006f18:	428b      	cmp	r3, r1
 8006f1a:	bf04      	itt	eq
 8006f1c:	6819      	ldreq	r1, [r3, #0]
 8006f1e:	685b      	ldreq	r3, [r3, #4]
 8006f20:	6063      	str	r3, [r4, #4]
 8006f22:	bf04      	itt	eq
 8006f24:	1809      	addeq	r1, r1, r0
 8006f26:	6021      	streq	r1, [r4, #0]
 8006f28:	6054      	str	r4, [r2, #4]
 8006f2a:	e7ca      	b.n	8006ec2 <_free_r+0x22>
 8006f2c:	bd38      	pop	{r3, r4, r5, pc}
 8006f2e:	bf00      	nop
 8006f30:	20004d0c 	.word	0x20004d0c

08006f34 <__malloc_lock>:
 8006f34:	4801      	ldr	r0, [pc, #4]	@ (8006f3c <__malloc_lock+0x8>)
 8006f36:	f7ff bfa3 	b.w	8006e80 <__retarget_lock_acquire_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	20004d08 	.word	0x20004d08

08006f40 <__malloc_unlock>:
 8006f40:	4801      	ldr	r0, [pc, #4]	@ (8006f48 <__malloc_unlock+0x8>)
 8006f42:	f7ff bf9e 	b.w	8006e82 <__retarget_lock_release_recursive>
 8006f46:	bf00      	nop
 8006f48:	20004d08 	.word	0x20004d08

08006f4c <_init>:
 8006f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4e:	bf00      	nop
 8006f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f52:	bc08      	pop	{r3}
 8006f54:	469e      	mov	lr, r3
 8006f56:	4770      	bx	lr

08006f58 <_fini>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	bf00      	nop
 8006f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5e:	bc08      	pop	{r3}
 8006f60:	469e      	mov	lr, r3
 8006f62:	4770      	bx	lr
