
spi_f767_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004524  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004724  08004724  00005724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800477c  0800477c  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  0800477c  0800477c  0000577c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004784  08004784  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004788  08004788  00005788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800478c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b44  20000060  080047ec  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ba4  080047ec  00006ba4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebda  00000000  00000000  0000608e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002484  00000000  00000000  00014c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  000170f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ae  00000000  00000000  00017c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000261b  00000000  00000000  00018516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8e9  00000000  00000000  0001ab31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f52a4  00000000  00000000  0002841a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d6be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030fc  00000000  00000000  0011d704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00120800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800470c 	.word	0x0800470c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800470c 	.word	0x0800470c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fa23 	bl	800097e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f816 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f870 	bl	8000620 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000540:	f001 f9cc 	bl	80018dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000544:	4a05      	ldr	r2, [pc, #20]	@ (800055c <main+0x2c>)
 8000546:	2100      	movs	r1, #0
 8000548:	4805      	ldr	r0, [pc, #20]	@ (8000560 <main+0x30>)
 800054a:	f001 fa31 	bl	80019b0 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <main+0x34>)
 8000552:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000554:	f001 f9f6 	bl	8001944 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <main+0x28>
 800055c:	08004748 	.word	0x08004748
 8000560:	0800084d 	.word	0x0800084d
 8000564:	2000007c 	.word	0x2000007c

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	@ 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2234      	movs	r2, #52	@ 0x34
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 ffe0 	bl	800453c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	4b22      	ldr	r3, [pc, #136]	@ (8000618 <SystemClock_Config+0xb0>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	4a21      	ldr	r2, [pc, #132]	@ (8000618 <SystemClock_Config+0xb0>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	@ 0x40
 8000598:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <SystemClock_Config+0xb0>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a4:	4b1d      	ldr	r3, [pc, #116]	@ (800061c <SystemClock_Config+0xb4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005ac:	4a1b      	ldr	r2, [pc, #108]	@ (800061c <SystemClock_Config+0xb4>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b19      	ldr	r3, [pc, #100]	@ (800061c <SystemClock_Config+0xb4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fcdb 	bl	8000f90 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005e0:	f000 f93c 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f000 ff73 	bl	80014ec <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800060c:	f000 f926 	bl	800085c <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	@ 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08c      	sub	sp, #48	@ 0x30
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b7f      	ldr	r3, [pc, #508]	@ (8000834 <MX_GPIO_Init+0x214>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a7e      	ldr	r2, [pc, #504]	@ (8000834 <MX_GPIO_Init+0x214>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
 8000642:	4b7c      	ldr	r3, [pc, #496]	@ (8000834 <MX_GPIO_Init+0x214>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	61bb      	str	r3, [r7, #24]
 800064c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064e:	4b79      	ldr	r3, [pc, #484]	@ (8000834 <MX_GPIO_Init+0x214>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a78      	ldr	r2, [pc, #480]	@ (8000834 <MX_GPIO_Init+0x214>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b76      	ldr	r3, [pc, #472]	@ (8000834 <MX_GPIO_Init+0x214>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b73      	ldr	r3, [pc, #460]	@ (8000834 <MX_GPIO_Init+0x214>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a72      	ldr	r2, [pc, #456]	@ (8000834 <MX_GPIO_Init+0x214>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b70      	ldr	r3, [pc, #448]	@ (8000834 <MX_GPIO_Init+0x214>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b6d      	ldr	r3, [pc, #436]	@ (8000834 <MX_GPIO_Init+0x214>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a6c      	ldr	r2, [pc, #432]	@ (8000834 <MX_GPIO_Init+0x214>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b6a      	ldr	r3, [pc, #424]	@ (8000834 <MX_GPIO_Init+0x214>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000696:	4b67      	ldr	r3, [pc, #412]	@ (8000834 <MX_GPIO_Init+0x214>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a66      	ldr	r2, [pc, #408]	@ (8000834 <MX_GPIO_Init+0x214>)
 800069c:	f043 0308 	orr.w	r3, r3, #8
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b64      	ldr	r3, [pc, #400]	@ (8000834 <MX_GPIO_Init+0x214>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0308 	and.w	r3, r3, #8
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ae:	4b61      	ldr	r3, [pc, #388]	@ (8000834 <MX_GPIO_Init+0x214>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a60      	ldr	r2, [pc, #384]	@ (8000834 <MX_GPIO_Init+0x214>)
 80006b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b5e      	ldr	r3, [pc, #376]	@ (8000834 <MX_GPIO_Init+0x214>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80006cc:	485a      	ldr	r0, [pc, #360]	@ (8000838 <MX_GPIO_Init+0x218>)
 80006ce:	f000 fc45 	bl	8000f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2140      	movs	r1, #64	@ 0x40
 80006d6:	4859      	ldr	r0, [pc, #356]	@ (800083c <MX_GPIO_Init+0x21c>)
 80006d8:	f000 fc40 	bl	8000f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	4853      	ldr	r0, [pc, #332]	@ (8000840 <MX_GPIO_Init+0x220>)
 80006f4:	f000 fa86 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006f8:	2332      	movs	r3, #50	@ 0x32
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000704:	2303      	movs	r3, #3
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000708:	230b      	movs	r3, #11
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	484b      	ldr	r0, [pc, #300]	@ (8000840 <MX_GPIO_Init+0x220>)
 8000714:	f000 fa76 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000718:	2386      	movs	r3, #134	@ 0x86
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000728:	230b      	movs	r3, #11
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4844      	ldr	r0, [pc, #272]	@ (8000844 <MX_GPIO_Init+0x224>)
 8000734:	f000 fa66 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000738:	f244 0381 	movw	r3, #16513	@ 0x4081
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4839      	ldr	r0, [pc, #228]	@ (8000838 <MX_GPIO_Init+0x218>)
 8000752:	f000 fa57 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000756:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000768:	230b      	movs	r3, #11
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	4831      	ldr	r0, [pc, #196]	@ (8000838 <MX_GPIO_Init+0x218>)
 8000774:	f000 fa46 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000778:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800078a:	2307      	movs	r3, #7
 800078c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	482c      	ldr	r0, [pc, #176]	@ (8000848 <MX_GPIO_Init+0x228>)
 8000796:	f000 fa35 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800079a:	2340      	movs	r3, #64	@ 0x40
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	4822      	ldr	r0, [pc, #136]	@ (800083c <MX_GPIO_Init+0x21c>)
 80007b2:	f000 fa27 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007b6:	2380      	movs	r3, #128	@ 0x80
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	481c      	ldr	r0, [pc, #112]	@ (800083c <MX_GPIO_Init+0x21c>)
 80007ca:	f000 fa1b 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80007ce:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007e0:	230a      	movs	r3, #10
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	4816      	ldr	r0, [pc, #88]	@ (8000844 <MX_GPIO_Init+0x224>)
 80007ec:	f000 fa0a 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	480f      	ldr	r0, [pc, #60]	@ (8000844 <MX_GPIO_Init+0x224>)
 8000806:	f000 f9fd 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800080a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800081c:	230b      	movs	r3, #11
 800081e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_GPIO_Init+0x21c>)
 8000828:	f000 f9ec 	bl	8000c04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082c:	bf00      	nop
 800082e:	3730      	adds	r7, #48	@ 0x30
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40020400 	.word	0x40020400
 800083c:	40021800 	.word	0x40021800
 8000840:	40020800 	.word	0x40020800
 8000844:	40020000 	.word	0x40020000
 8000848:	40020c00 	.word	0x40020c00

0800084c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000854:	2001      	movs	r0, #1
 8000856:	f001 f951 	bl	8001afc <osDelay>
 800085a:	e7fb      	b.n	8000854 <StartDefaultTask+0x8>

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <Error_Handler+0x8>

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	4a10      	ldr	r2, [pc, #64]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	@ 0x40
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	4a0a      	ldr	r2, [pc, #40]	@ (80008b4 <HAL_MspInit+0x4c>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000890:	6453      	str	r3, [r2, #68]	@ 0x44
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	210f      	movs	r1, #15
 80008a2:	f06f 0001 	mvn.w	r0, #1
 80008a6:	f000 f984 	bl	8000bb2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <NMI_Handler+0x4>

080008c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <MemManage_Handler+0x4>

080008d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <UsageFault_Handler+0x4>

080008e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f2:	f000 f881 	bl	80009f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008f6:	f002 fda9 	bl	800344c <xTaskGetSchedulerState>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d001      	beq.n	8000904 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000900:	f003 fb9a 	bl	8004038 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	@ (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000964 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000930:	480d      	ldr	r0, [pc, #52]	@ (8000968 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000932:	490e      	ldr	r1, [pc, #56]	@ (800096c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000934:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0b      	ldr	r2, [pc, #44]	@ (8000974 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000948:	4c0b      	ldr	r4, [pc, #44]	@ (8000978 <LoopFillZerobss+0x26>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000956:	f7ff ffd7 	bl	8000908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095a:	f003 fe4d 	bl	80045f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095e:	f7ff fde7 	bl	8000530 <main>
  bx  lr    
 8000962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000964:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000970:	0800478c 	.word	0x0800478c
  ldr r2, =_sbss
 8000974:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000978:	20004ba4 	.word	0x20004ba4

0800097c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>

0800097e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000982:	2003      	movs	r0, #3
 8000984:	f000 f90a 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000988:	200f      	movs	r0, #15
 800098a:	f000 f805 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098e:	f7ff ff6b 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	bd80      	pop	{r7, pc}

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_InitTick+0x54>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <HAL_InitTick+0x58>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f917 	bl	8000bea <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00e      	b.n	80009e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d80a      	bhi.n	80009e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f000 f8ed 	bl	8000bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d8:	4a06      	ldr	r2, [pc, #24]	@ (80009f4 <HAL_InitTick+0x5c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_IncTick+0x20>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_IncTick+0x24>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <HAL_IncTick+0x24>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000080 	.word	0x20000080

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b03      	ldr	r3, [pc, #12]	@ (8000a34 <HAL_GetTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000080 	.word	0x20000080

08000a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <__NVIC_SetPriorityGrouping+0x40>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	4313      	orrs	r3, r2
 8000a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a66:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <__NVIC_SetPriorityGrouping+0x40>)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	60d3      	str	r3, [r2, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00
 8000a7c:	05fa0000 	.word	0x05fa0000

08000a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <__NVIC_GetPriorityGrouping+0x18>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 0307 	and.w	r3, r3, #7
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	@ (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	@ (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	@ 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	@ 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f7ff ff8e 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff47 	bl	8000a38 <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff5c 	bl	8000a80 <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff8e 	bl	8000af0 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5d 	bl	8000a9c <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffb0 	bl	8000b58 <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	@ 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	e175      	b.n	8000f10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000c24:	2201      	movs	r2, #1
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	f040 8164 	bne.w	8000f0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0303 	and.w	r3, r3, #3
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d005      	beq.n	8000c5a <HAL_GPIO_Init+0x56>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d130      	bne.n	8000cbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c90:	2201      	movs	r2, #1
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	091b      	lsrs	r3, r3, #4
 8000ca6:	f003 0201 	and.w	r2, r3, #1
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	d017      	beq.n	8000cf8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d123      	bne.n	8000d4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	08da      	lsrs	r2, r3, #3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3208      	adds	r2, #8
 8000d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	691a      	ldr	r2, [r3, #16]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	08da      	lsrs	r2, r3, #3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3208      	adds	r2, #8
 8000d46:	69b9      	ldr	r1, [r7, #24]
 8000d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	2203      	movs	r2, #3
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0203 	and.w	r2, r3, #3
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f000 80be 	beq.w	8000f0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	4b66      	ldr	r3, [pc, #408]	@ (8000f28 <HAL_GPIO_Init+0x324>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a65      	ldr	r2, [pc, #404]	@ (8000f28 <HAL_GPIO_Init+0x324>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9a:	4b63      	ldr	r3, [pc, #396]	@ (8000f28 <HAL_GPIO_Init+0x324>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000da6:	4a61      	ldr	r2, [pc, #388]	@ (8000f2c <HAL_GPIO_Init+0x328>)
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3302      	adds	r3, #2
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a58      	ldr	r2, [pc, #352]	@ (8000f30 <HAL_GPIO_Init+0x32c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d037      	beq.n	8000e42 <HAL_GPIO_Init+0x23e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a57      	ldr	r2, [pc, #348]	@ (8000f34 <HAL_GPIO_Init+0x330>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d031      	beq.n	8000e3e <HAL_GPIO_Init+0x23a>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a56      	ldr	r2, [pc, #344]	@ (8000f38 <HAL_GPIO_Init+0x334>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d02b      	beq.n	8000e3a <HAL_GPIO_Init+0x236>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a55      	ldr	r2, [pc, #340]	@ (8000f3c <HAL_GPIO_Init+0x338>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d025      	beq.n	8000e36 <HAL_GPIO_Init+0x232>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a54      	ldr	r2, [pc, #336]	@ (8000f40 <HAL_GPIO_Init+0x33c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d01f      	beq.n	8000e32 <HAL_GPIO_Init+0x22e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a53      	ldr	r2, [pc, #332]	@ (8000f44 <HAL_GPIO_Init+0x340>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d019      	beq.n	8000e2e <HAL_GPIO_Init+0x22a>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a52      	ldr	r2, [pc, #328]	@ (8000f48 <HAL_GPIO_Init+0x344>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d013      	beq.n	8000e2a <HAL_GPIO_Init+0x226>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a51      	ldr	r2, [pc, #324]	@ (8000f4c <HAL_GPIO_Init+0x348>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d00d      	beq.n	8000e26 <HAL_GPIO_Init+0x222>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a50      	ldr	r2, [pc, #320]	@ (8000f50 <HAL_GPIO_Init+0x34c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d007      	beq.n	8000e22 <HAL_GPIO_Init+0x21e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4f      	ldr	r2, [pc, #316]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d101      	bne.n	8000e1e <HAL_GPIO_Init+0x21a>
 8000e1a:	2309      	movs	r3, #9
 8000e1c:	e012      	b.n	8000e44 <HAL_GPIO_Init+0x240>
 8000e1e:	230a      	movs	r3, #10
 8000e20:	e010      	b.n	8000e44 <HAL_GPIO_Init+0x240>
 8000e22:	2308      	movs	r3, #8
 8000e24:	e00e      	b.n	8000e44 <HAL_GPIO_Init+0x240>
 8000e26:	2307      	movs	r3, #7
 8000e28:	e00c      	b.n	8000e44 <HAL_GPIO_Init+0x240>
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	e00a      	b.n	8000e44 <HAL_GPIO_Init+0x240>
 8000e2e:	2305      	movs	r3, #5
 8000e30:	e008      	b.n	8000e44 <HAL_GPIO_Init+0x240>
 8000e32:	2304      	movs	r3, #4
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x240>
 8000e36:	2303      	movs	r3, #3
 8000e38:	e004      	b.n	8000e44 <HAL_GPIO_Init+0x240>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e002      	b.n	8000e44 <HAL_GPIO_Init+0x240>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <HAL_GPIO_Init+0x240>
 8000e42:	2300      	movs	r3, #0
 8000e44:	69fa      	ldr	r2, [r7, #28]
 8000e46:	f002 0203 	and.w	r2, r2, #3
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	4093      	lsls	r3, r2
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e54:	4935      	ldr	r1, [pc, #212]	@ (8000f2c <HAL_GPIO_Init+0x328>)
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e62:	4b3d      	ldr	r3, [pc, #244]	@ (8000f58 <HAL_GPIO_Init+0x354>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e86:	4a34      	ldr	r2, [pc, #208]	@ (8000f58 <HAL_GPIO_Init+0x354>)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e8c:	4b32      	ldr	r3, [pc, #200]	@ (8000f58 <HAL_GPIO_Init+0x354>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eb0:	4a29      	ldr	r2, [pc, #164]	@ (8000f58 <HAL_GPIO_Init+0x354>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eb6:	4b28      	ldr	r3, [pc, #160]	@ (8000f58 <HAL_GPIO_Init+0x354>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eda:	4a1f      	ldr	r2, [pc, #124]	@ (8000f58 <HAL_GPIO_Init+0x354>)
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <HAL_GPIO_Init+0x354>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f04:	4a14      	ldr	r2, [pc, #80]	@ (8000f58 <HAL_GPIO_Init+0x354>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	61fb      	str	r3, [r7, #28]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	2b0f      	cmp	r3, #15
 8000f14:	f67f ae86 	bls.w	8000c24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3724      	adds	r7, #36	@ 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40013800 	.word	0x40013800
 8000f30:	40020000 	.word	0x40020000
 8000f34:	40020400 	.word	0x40020400
 8000f38:	40020800 	.word	0x40020800
 8000f3c:	40020c00 	.word	0x40020c00
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40021400 	.word	0x40021400
 8000f48:	40021800 	.word	0x40021800
 8000f4c:	40021c00 	.word	0x40021c00
 8000f50:	40022000 	.word	0x40022000
 8000f54:	40022400 	.word	0x40022400
 8000f58:	40013c00 	.word	0x40013c00

08000f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f6c:	787b      	ldrb	r3, [r7, #1]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000f78:	e003      	b.n	8000f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	041a      	lsls	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	619a      	str	r2, [r3, #24]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e29b      	b.n	80014de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 8087 	beq.w	80010c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fb4:	4b96      	ldr	r3, [pc, #600]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 030c 	and.w	r3, r3, #12
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d00c      	beq.n	8000fda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fc0:	4b93      	ldr	r3, [pc, #588]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d112      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x62>
 8000fcc:	4b90      	ldr	r3, [pc, #576]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fd8:	d10b      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fda:	4b8d      	ldr	r3, [pc, #564]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d06c      	beq.n	80010c0 <HAL_RCC_OscConfig+0x130>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d168      	bne.n	80010c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e275      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ffa:	d106      	bne.n	800100a <HAL_RCC_OscConfig+0x7a>
 8000ffc:	4b84      	ldr	r3, [pc, #528]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a83      	ldr	r2, [pc, #524]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e02e      	b.n	8001068 <HAL_RCC_OscConfig+0xd8>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x9c>
 8001012:	4b7f      	ldr	r3, [pc, #508]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a7e      	ldr	r2, [pc, #504]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b7c      	ldr	r3, [pc, #496]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a7b      	ldr	r2, [pc, #492]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001024:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e01d      	b.n	8001068 <HAL_RCC_OscConfig+0xd8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001034:	d10c      	bne.n	8001050 <HAL_RCC_OscConfig+0xc0>
 8001036:	4b76      	ldr	r3, [pc, #472]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a75      	ldr	r2, [pc, #468]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 800103c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	4b73      	ldr	r3, [pc, #460]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a72      	ldr	r2, [pc, #456]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e00b      	b.n	8001068 <HAL_RCC_OscConfig+0xd8>
 8001050:	4b6f      	ldr	r3, [pc, #444]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a6e      	ldr	r2, [pc, #440]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b6c      	ldr	r3, [pc, #432]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a6b      	ldr	r2, [pc, #428]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001062:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d013      	beq.n	8001098 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001070:	f7ff fcd6 	bl	8000a20 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fcd2 	bl	8000a20 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	@ 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e229      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108a:	4b61      	ldr	r3, [pc, #388]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f0      	beq.n	8001078 <HAL_RCC_OscConfig+0xe8>
 8001096:	e014      	b.n	80010c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff fcc2 	bl	8000a20 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a0:	f7ff fcbe 	bl	8000a20 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b64      	cmp	r3, #100	@ 0x64
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e215      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b2:	4b57      	ldr	r3, [pc, #348]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x110>
 80010be:	e000      	b.n	80010c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d069      	beq.n	80011a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ce:	4b50      	ldr	r3, [pc, #320]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00b      	beq.n	80010f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010da:	4b4d      	ldr	r3, [pc, #308]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d11c      	bne.n	8001120 <HAL_RCC_OscConfig+0x190>
 80010e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d116      	bne.n	8001120 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f2:	4b47      	ldr	r3, [pc, #284]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <HAL_RCC_OscConfig+0x17a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d001      	beq.n	800110a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e1e9      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110a:	4b41      	ldr	r3, [pc, #260]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	493d      	ldr	r1, [pc, #244]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111e:	e040      	b.n	80011a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d023      	beq.n	8001170 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001128:	4b39      	ldr	r3, [pc, #228]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a38      	ldr	r2, [pc, #224]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001134:	f7ff fc74 	bl	8000a20 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800113c:	f7ff fc70 	bl	8000a20 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1c7      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114e:	4b30      	ldr	r3, [pc, #192]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115a:	4b2d      	ldr	r3, [pc, #180]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4929      	ldr	r1, [pc, #164]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
 800116e:	e018      	b.n	80011a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001170:	4b27      	ldr	r3, [pc, #156]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a26      	ldr	r2, [pc, #152]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001176:	f023 0301 	bic.w	r3, r3, #1
 800117a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117c:	f7ff fc50 	bl	8000a20 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001184:	f7ff fc4c 	bl	8000a20 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e1a3      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001196:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d038      	beq.n	8001220 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d019      	beq.n	80011ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 80011b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011ba:	4a15      	ldr	r2, [pc, #84]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c2:	f7ff fc2d 	bl	8000a20 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ca:	f7ff fc29 	bl	8000a20 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e180      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 80011de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0x23a>
 80011e8:	e01a      	b.n	8001220 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 80011ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011ee:	4a08      	ldr	r2, [pc, #32]	@ (8001210 <HAL_RCC_OscConfig+0x280>)
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f6:	f7ff fc13 	bl	8000a20 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011fc:	e00a      	b.n	8001214 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fe:	f7ff fc0f 	bl	8000a20 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d903      	bls.n	8001214 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e166      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
 8001210:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001214:	4b92      	ldr	r3, [pc, #584]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1ee      	bne.n	80011fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80a4 	beq.w	8001376 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800122e:	4b8c      	ldr	r3, [pc, #560]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10d      	bne.n	8001256 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	4b89      	ldr	r3, [pc, #548]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	4a88      	ldr	r2, [pc, #544]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001244:	6413      	str	r3, [r2, #64]	@ 0x40
 8001246:	4b86      	ldr	r3, [pc, #536]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001252:	2301      	movs	r3, #1
 8001254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001256:	4b83      	ldr	r3, [pc, #524]	@ (8001464 <HAL_RCC_OscConfig+0x4d4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800125e:	2b00      	cmp	r3, #0
 8001260:	d118      	bne.n	8001294 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001262:	4b80      	ldr	r3, [pc, #512]	@ (8001464 <HAL_RCC_OscConfig+0x4d4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a7f      	ldr	r2, [pc, #508]	@ (8001464 <HAL_RCC_OscConfig+0x4d4>)
 8001268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800126c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800126e:	f7ff fbd7 	bl	8000a20 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001276:	f7ff fbd3 	bl	8000a20 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b64      	cmp	r3, #100	@ 0x64
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e12a      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001288:	4b76      	ldr	r3, [pc, #472]	@ (8001464 <HAL_RCC_OscConfig+0x4d4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d106      	bne.n	80012aa <HAL_RCC_OscConfig+0x31a>
 800129c:	4b70      	ldr	r3, [pc, #448]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 800129e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a0:	4a6f      	ldr	r2, [pc, #444]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80012a8:	e02d      	b.n	8001306 <HAL_RCC_OscConfig+0x376>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x33c>
 80012b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012b6:	4a6a      	ldr	r2, [pc, #424]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80012be:	4b68      	ldr	r3, [pc, #416]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012c2:	4a67      	ldr	r2, [pc, #412]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012c4:	f023 0304 	bic.w	r3, r3, #4
 80012c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80012ca:	e01c      	b.n	8001306 <HAL_RCC_OscConfig+0x376>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0x35e>
 80012d4:	4b62      	ldr	r3, [pc, #392]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012d8:	4a61      	ldr	r2, [pc, #388]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	6713      	str	r3, [r2, #112]	@ 0x70
 80012e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012e4:	4a5e      	ldr	r2, [pc, #376]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80012ec:	e00b      	b.n	8001306 <HAL_RCC_OscConfig+0x376>
 80012ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012f4:	f023 0301 	bic.w	r3, r3, #1
 80012f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80012fa:	4b59      	ldr	r3, [pc, #356]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012fe:	4a58      	ldr	r2, [pc, #352]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001300:	f023 0304 	bic.w	r3, r3, #4
 8001304:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d015      	beq.n	800133a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130e:	f7ff fb87 	bl	8000a20 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f7ff fb83 	bl	8000a20 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001324:	4293      	cmp	r3, r2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e0d8      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132c:	4b4c      	ldr	r3, [pc, #304]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 800132e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0ee      	beq.n	8001316 <HAL_RCC_OscConfig+0x386>
 8001338:	e014      	b.n	8001364 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133a:	f7ff fb71 	bl	8000a20 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001340:	e00a      	b.n	8001358 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001342:	f7ff fb6d 	bl	8000a20 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001350:	4293      	cmp	r3, r2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e0c2      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001358:	4b41      	ldr	r3, [pc, #260]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 800135a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ee      	bne.n	8001342 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d105      	bne.n	8001376 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800136a:	4b3d      	ldr	r3, [pc, #244]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	4a3c      	ldr	r2, [pc, #240]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 80ae 	beq.w	80014dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001380:	4b37      	ldr	r3, [pc, #220]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b08      	cmp	r3, #8
 800138a:	d06d      	beq.n	8001468 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d14b      	bne.n	800142c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001394:	4b32      	ldr	r3, [pc, #200]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a31      	ldr	r2, [pc, #196]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 800139a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800139e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fb3e 	bl	8000a20 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff fb3a 	bl	8000a20 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e091      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ba:	4b29      	ldr	r3, [pc, #164]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69da      	ldr	r2, [r3, #28]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d4:	019b      	lsls	r3, r3, #6
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013dc:	085b      	lsrs	r3, r3, #1
 80013de:	3b01      	subs	r3, #1
 80013e0:	041b      	lsls	r3, r3, #16
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e8:	061b      	lsls	r3, r3, #24
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f0:	071b      	lsls	r3, r3, #28
 80013f2:	491b      	ldr	r1, [pc, #108]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f8:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a18      	ldr	r2, [pc, #96]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80013fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fb0c 	bl	8000a20 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff fb08 	bl	8000a20 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e05f      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141e:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x47c>
 800142a:	e057      	b.n	80014dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0b      	ldr	r2, [pc, #44]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001432:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff faf2 	bl	8000a20 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff faee 	bl	8000a20 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e045      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001452:	4b03      	ldr	r3, [pc, #12]	@ (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x4b0>
 800145e:	e03d      	b.n	80014dc <HAL_RCC_OscConfig+0x54c>
 8001460:	40023800 	.word	0x40023800
 8001464:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001468:	4b1f      	ldr	r3, [pc, #124]	@ (80014e8 <HAL_RCC_OscConfig+0x558>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d030      	beq.n	80014d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001480:	429a      	cmp	r2, r3
 8001482:	d129      	bne.n	80014d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148e:	429a      	cmp	r2, r3
 8001490:	d122      	bne.n	80014d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001498:	4013      	ands	r3, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800149e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d119      	bne.n	80014d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	3b01      	subs	r3, #1
 80014b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d10f      	bne.n	80014d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d107      	bne.n	80014d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0d0      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001504:	4b6a      	ldr	r3, [pc, #424]	@ (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d910      	bls.n	8001534 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b67      	ldr	r3, [pc, #412]	@ (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 020f 	bic.w	r2, r3, #15
 800151a:	4965      	ldr	r1, [pc, #404]	@ (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b63      	ldr	r3, [pc, #396]	@ (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0b8      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800154c:	4b59      	ldr	r3, [pc, #356]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4a58      	ldr	r2, [pc, #352]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001552:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001556:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001564:	4b53      	ldr	r3, [pc, #332]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4a52      	ldr	r2, [pc, #328]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800156a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800156e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001570:	4b50      	ldr	r3, [pc, #320]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	494d      	ldr	r1, [pc, #308]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d040      	beq.n	8001610 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d107      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b47      	ldr	r3, [pc, #284]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d115      	bne.n	80015ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e07f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ae:	4b41      	ldr	r3, [pc, #260]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d109      	bne.n	80015ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e073      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015be:	4b3d      	ldr	r3, [pc, #244]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e06b      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ce:	4b39      	ldr	r3, [pc, #228]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f023 0203 	bic.w	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4936      	ldr	r1, [pc, #216]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015e0:	f7ff fa1e 	bl	8000a20 <HAL_GetTick>
 80015e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e8:	f7ff fa1a 	bl	8000a20 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e053      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fe:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 020c 	and.w	r2, r3, #12
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	429a      	cmp	r2, r3
 800160e:	d1eb      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001610:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d210      	bcs.n	8001640 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161e:	4b24      	ldr	r3, [pc, #144]	@ (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 020f 	bic.w	r2, r3, #15
 8001626:	4922      	ldr	r1, [pc, #136]	@ (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e032      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4916      	ldr	r1, [pc, #88]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d009      	beq.n	800167e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	490e      	ldr	r1, [pc, #56]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800167e:	f000 f821 	bl	80016c4 <HAL_RCC_GetSysClockFreq>
 8001682:	4602      	mov	r2, r0
 8001684:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	490a      	ldr	r1, [pc, #40]	@ (80016b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001690:	5ccb      	ldrb	r3, [r1, r3]
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <HAL_RCC_ClockConfig+0x1d0>)
 8001698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_RCC_ClockConfig+0x1d4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f97a 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00
 80016b4:	40023800 	.word	0x40023800
 80016b8:	0800476c 	.word	0x0800476c
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c8:	b094      	sub	sp, #80	@ 0x50
 80016ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80016d0:	2300      	movs	r3, #0
 80016d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016d4:	2300      	movs	r3, #0
 80016d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016dc:	4b79      	ldr	r3, [pc, #484]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d00d      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0x40>
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	f200 80e1 	bhi.w	80018b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x34>
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_GetSysClockFreq+0x3a>
 80016f6:	e0db      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f8:	4b73      	ldr	r3, [pc, #460]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80016fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016fc:	e0db      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016fe:	4b72      	ldr	r3, [pc, #456]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001700:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001702:	e0d8      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001704:	4b6f      	ldr	r3, [pc, #444]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800170c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800170e:	4b6d      	ldr	r3, [pc, #436]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d063      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171a:	4b6a      	ldr	r3, [pc, #424]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	099b      	lsrs	r3, r3, #6
 8001720:	2200      	movs	r2, #0
 8001722:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001724:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800172c:	633b      	str	r3, [r7, #48]	@ 0x30
 800172e:	2300      	movs	r3, #0
 8001730:	637b      	str	r3, [r7, #52]	@ 0x34
 8001732:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001736:	4622      	mov	r2, r4
 8001738:	462b      	mov	r3, r5
 800173a:	f04f 0000 	mov.w	r0, #0
 800173e:	f04f 0100 	mov.w	r1, #0
 8001742:	0159      	lsls	r1, r3, #5
 8001744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001748:	0150      	lsls	r0, r2, #5
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4621      	mov	r1, r4
 8001750:	1a51      	subs	r1, r2, r1
 8001752:	6139      	str	r1, [r7, #16]
 8001754:	4629      	mov	r1, r5
 8001756:	eb63 0301 	sbc.w	r3, r3, r1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001768:	4659      	mov	r1, fp
 800176a:	018b      	lsls	r3, r1, #6
 800176c:	4651      	mov	r1, sl
 800176e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001772:	4651      	mov	r1, sl
 8001774:	018a      	lsls	r2, r1, #6
 8001776:	4651      	mov	r1, sl
 8001778:	ebb2 0801 	subs.w	r8, r2, r1
 800177c:	4659      	mov	r1, fp
 800177e:	eb63 0901 	sbc.w	r9, r3, r1
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800178e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001796:	4690      	mov	r8, r2
 8001798:	4699      	mov	r9, r3
 800179a:	4623      	mov	r3, r4
 800179c:	eb18 0303 	adds.w	r3, r8, r3
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	462b      	mov	r3, r5
 80017a4:	eb49 0303 	adc.w	r3, r9, r3
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017b6:	4629      	mov	r1, r5
 80017b8:	028b      	lsls	r3, r1, #10
 80017ba:	4621      	mov	r1, r4
 80017bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017c0:	4621      	mov	r1, r4
 80017c2:	028a      	lsls	r2, r1, #10
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ca:	2200      	movs	r2, #0
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017d4:	f7fe fd34 	bl	8000240 <__aeabi_uldivmod>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4613      	mov	r3, r2
 80017de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017e0:	e058      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e2:	4b38      	ldr	r3, [pc, #224]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	099b      	lsrs	r3, r3, #6
 80017e8:	2200      	movs	r2, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	4611      	mov	r1, r2
 80017ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017f2:	623b      	str	r3, [r7, #32]
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017fc:	4642      	mov	r2, r8
 80017fe:	464b      	mov	r3, r9
 8001800:	f04f 0000 	mov.w	r0, #0
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	0159      	lsls	r1, r3, #5
 800180a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800180e:	0150      	lsls	r0, r2, #5
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4641      	mov	r1, r8
 8001816:	ebb2 0a01 	subs.w	sl, r2, r1
 800181a:	4649      	mov	r1, r9
 800181c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800182c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001830:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001834:	ebb2 040a 	subs.w	r4, r2, sl
 8001838:	eb63 050b 	sbc.w	r5, r3, fp
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	00eb      	lsls	r3, r5, #3
 8001846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800184a:	00e2      	lsls	r2, r4, #3
 800184c:	4614      	mov	r4, r2
 800184e:	461d      	mov	r5, r3
 8001850:	4643      	mov	r3, r8
 8001852:	18e3      	adds	r3, r4, r3
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	464b      	mov	r3, r9
 8001858:	eb45 0303 	adc.w	r3, r5, r3
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800186a:	4629      	mov	r1, r5
 800186c:	028b      	lsls	r3, r1, #10
 800186e:	4621      	mov	r1, r4
 8001870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001874:	4621      	mov	r1, r4
 8001876:	028a      	lsls	r2, r1, #10
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800187e:	2200      	movs	r2, #0
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	61fa      	str	r2, [r7, #28]
 8001884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001888:	f7fe fcda 	bl	8000240 <__aeabi_uldivmod>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4613      	mov	r3, r2
 8001892:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001894:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	0c1b      	lsrs	r3, r3, #16
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	3301      	adds	r3, #1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80018a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018ae:	e002      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018b0:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80018b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3750      	adds	r7, #80	@ 0x50
 80018bc:	46bd      	mov	sp, r7
 80018be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	00f42400 	.word	0x00f42400

080018cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018e2:	f3ef 8305 	mrs	r3, IPSR
 80018e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80018e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10f      	bne.n	800190e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018ee:	f3ef 8310 	mrs	r3, PRIMASK
 80018f2:	607b      	str	r3, [r7, #4]
  return(result);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d105      	bne.n	8001906 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80018fa:	f3ef 8311 	mrs	r3, BASEPRI
 80018fe:	603b      	str	r3, [r7, #0]
  return(result);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <osKernelInitialize+0x3a>
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <osKernelInitialize+0x64>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d103      	bne.n	8001916 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800190e:	f06f 0305 	mvn.w	r3, #5
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	e00c      	b.n	8001930 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001916:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <osKernelInitialize+0x64>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d105      	bne.n	800192a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800191e:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <osKernelInitialize+0x64>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e002      	b.n	8001930 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001930:	68fb      	ldr	r3, [r7, #12]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000084 	.word	0x20000084

08001944 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800194a:	f3ef 8305 	mrs	r3, IPSR
 800194e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001950:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10f      	bne.n	8001976 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001956:	f3ef 8310 	mrs	r3, PRIMASK
 800195a:	607b      	str	r3, [r7, #4]
  return(result);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d105      	bne.n	800196e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001962:	f3ef 8311 	mrs	r3, BASEPRI
 8001966:	603b      	str	r3, [r7, #0]
  return(result);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d007      	beq.n	800197e <osKernelStart+0x3a>
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <osKernelStart+0x68>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d103      	bne.n	800197e <osKernelStart+0x3a>
    stat = osErrorISR;
 8001976:	f06f 0305 	mvn.w	r3, #5
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e010      	b.n	80019a0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <osKernelStart+0x68>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d109      	bne.n	800199a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001986:	f7ff ffa1 	bl	80018cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800198a:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <osKernelStart+0x68>)
 800198c:	2202      	movs	r2, #2
 800198e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001990:	f001 f8e2 	bl	8002b58 <vTaskStartScheduler>
      stat = osOK;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e002      	b.n	80019a0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80019a0:	68fb      	ldr	r3, [r7, #12]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000084 	.word	0x20000084

080019b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b090      	sub	sp, #64	@ 0x40
 80019b4:	af04      	add	r7, sp, #16
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019c0:	f3ef 8305 	mrs	r3, IPSR
 80019c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80019c6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f040 808f 	bne.w	8001aec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019ce:	f3ef 8310 	mrs	r3, PRIMASK
 80019d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d105      	bne.n	80019e6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019da:	f3ef 8311 	mrs	r3, BASEPRI
 80019de:	617b      	str	r3, [r7, #20]
  return(result);
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <osThreadNew+0x3e>
 80019e6:	4b44      	ldr	r3, [pc, #272]	@ (8001af8 <osThreadNew+0x148>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d07e      	beq.n	8001aec <osThreadNew+0x13c>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d07b      	beq.n	8001aec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80019f8:	2318      	movs	r3, #24
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
 8001a04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d045      	beq.n	8001a98 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <osThreadNew+0x6a>
        name = attr->name;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d008      	beq.n	8001a40 <osThreadNew+0x90>
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	2b38      	cmp	r3, #56	@ 0x38
 8001a32:	d805      	bhi.n	8001a40 <osThreadNew+0x90>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <osThreadNew+0x94>
        return (NULL);
 8001a40:	2300      	movs	r3, #0
 8001a42:	e054      	b.n	8001aee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	089b      	lsrs	r3, r3, #2
 8001a52:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00e      	beq.n	8001a7a <osThreadNew+0xca>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2ba7      	cmp	r3, #167	@ 0xa7
 8001a62:	d90a      	bls.n	8001a7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <osThreadNew+0xca>
        mem = 1;
 8001a74:	2301      	movs	r3, #1
 8001a76:	623b      	str	r3, [r7, #32]
 8001a78:	e010      	b.n	8001a9c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <osThreadNew+0xec>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d108      	bne.n	8001a9c <osThreadNew+0xec>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d104      	bne.n	8001a9c <osThreadNew+0xec>
          mem = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	e001      	b.n	8001a9c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d110      	bne.n	8001ac4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001aaa:	9202      	str	r2, [sp, #8]
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ab6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 fe4f 	bl	800275c <xTaskCreateStatic>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	e013      	b.n	8001aec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d110      	bne.n	8001aec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 fea3 	bl	8002828 <xTaskCreate>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d001      	beq.n	8001aec <osThreadNew+0x13c>
          hTask = NULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001aec:	693b      	ldr	r3, [r7, #16]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3730      	adds	r7, #48	@ 0x30
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000084 	.word	0x20000084

08001afc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b04:	f3ef 8305 	mrs	r3, IPSR
 8001b08:	613b      	str	r3, [r7, #16]
  return(result);
 8001b0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10f      	bne.n	8001b30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b10:	f3ef 8310 	mrs	r3, PRIMASK
 8001b14:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b1c:	f3ef 8311 	mrs	r3, BASEPRI
 8001b20:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <osDelay+0x3c>
 8001b28:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <osDelay+0x58>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d103      	bne.n	8001b38 <osDelay+0x3c>
    stat = osErrorISR;
 8001b30:	f06f 0305 	mvn.w	r3, #5
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e007      	b.n	8001b48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 ffd0 	bl	8002ae8 <vTaskDelay>
    }
  }

  return (stat);
 8001b48:	697b      	ldr	r3, [r7, #20]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000084 	.word	0x20000084

08001b58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4a07      	ldr	r2, [pc, #28]	@ (8001b84 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	4a06      	ldr	r2, [pc, #24]	@ (8001b88 <vApplicationGetIdleTaskMemory+0x30>)
 8001b6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2280      	movs	r2, #128	@ 0x80
 8001b74:	601a      	str	r2, [r3, #0]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000088 	.word	0x20000088
 8001b88:	20000130 	.word	0x20000130

08001b8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4a07      	ldr	r2, [pc, #28]	@ (8001bb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8001b9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	4a06      	ldr	r2, [pc, #24]	@ (8001bbc <vApplicationGetTimerTaskMemory+0x30>)
 8001ba2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001baa:	601a      	str	r2, [r3, #0]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	20000330 	.word	0x20000330
 8001bbc:	200003d8 	.word	0x200003d8

08001bc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f103 0208 	add.w	r2, r3, #8
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f103 0208 	add.w	r2, r3, #8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f103 0208 	add.w	r2, r3, #8
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	601a      	str	r2, [r3, #0]
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c62:	b480      	push	{r7}
 8001c64:	b085      	sub	sp, #20
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d103      	bne.n	8001c82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	e00c      	b.n	8001c9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3308      	adds	r3, #8
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	e002      	b.n	8001c90 <vListInsert+0x2e>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d2f6      	bcs.n	8001c8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	601a      	str	r2, [r3, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6892      	ldr	r2, [r2, #8]
 8001cea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6852      	ldr	r2, [r2, #4]
 8001cf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d103      	bne.n	8001d08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	1e5a      	subs	r2, r3, #1
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10d      	bne.n	8001d58 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d40:	b672      	cpsid	i
 8001d42:	f383 8811 	msr	BASEPRI, r3
 8001d46:	f3bf 8f6f 	isb	sy
 8001d4a:	f3bf 8f4f 	dsb	sy
 8001d4e:	b662      	cpsie	i
 8001d50:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8001d58:	f002 f8d8 	bl	8003f0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d64:	68f9      	ldr	r1, [r7, #12]
 8001d66:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	441a      	add	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	68f9      	ldr	r1, [r7, #12]
 8001d8c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	441a      	add	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	22ff      	movs	r2, #255	@ 0xff
 8001d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	22ff      	movs	r2, #255	@ 0xff
 8001da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d114      	bne.n	8001dd8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d01a      	beq.n	8001dec <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3310      	adds	r3, #16
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 f978 	bl	80030b0 <xTaskRemoveFromEventList>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d012      	beq.n	8001dec <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <xQueueGenericReset+0xd4>)
 8001dc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	f3bf 8f4f 	dsb	sy
 8001dd2:	f3bf 8f6f 	isb	sy
 8001dd6:	e009      	b.n	8001dec <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3310      	adds	r3, #16
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff feef 	bl	8001bc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3324      	adds	r3, #36	@ 0x24
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff feea 	bl	8001bc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001dec:	f002 f8c4 	bl	8003f78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001df0:	2301      	movs	r3, #1
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000ed04 	.word	0xe000ed04

08001e00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08e      	sub	sp, #56	@ 0x38
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10d      	bne.n	8001e30 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8001e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e18:	b672      	cpsid	i
 8001e1a:	f383 8811 	msr	BASEPRI, r3
 8001e1e:	f3bf 8f6f 	isb	sy
 8001e22:	f3bf 8f4f 	dsb	sy
 8001e26:	b662      	cpsie	i
 8001e28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10d      	bne.n	8001e52 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8001e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e3a:	b672      	cpsid	i
 8001e3c:	f383 8811 	msr	BASEPRI, r3
 8001e40:	f3bf 8f6f 	isb	sy
 8001e44:	f3bf 8f4f 	dsb	sy
 8001e48:	b662      	cpsie	i
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	e7fd      	b.n	8001e4e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <xQueueGenericCreateStatic+0x5e>
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <xQueueGenericCreateStatic+0x62>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <xQueueGenericCreateStatic+0x64>
 8001e62:	2300      	movs	r3, #0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10d      	bne.n	8001e84 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8001e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e6c:	b672      	cpsid	i
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	b662      	cpsie	i
 8001e7c:	623b      	str	r3, [r7, #32]
}
 8001e7e:	bf00      	nop
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <xQueueGenericCreateStatic+0x90>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <xQueueGenericCreateStatic+0x94>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <xQueueGenericCreateStatic+0x96>
 8001e94:	2300      	movs	r3, #0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10d      	bne.n	8001eb6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8001e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e9e:	b672      	cpsid	i
 8001ea0:	f383 8811 	msr	BASEPRI, r3
 8001ea4:	f3bf 8f6f 	isb	sy
 8001ea8:	f3bf 8f4f 	dsb	sy
 8001eac:	b662      	cpsie	i
 8001eae:	61fb      	str	r3, [r7, #28]
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	e7fd      	b.n	8001eb2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001eb6:	2350      	movs	r3, #80	@ 0x50
 8001eb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2b50      	cmp	r3, #80	@ 0x50
 8001ebe:	d00d      	beq.n	8001edc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8001ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ec4:	b672      	cpsid	i
 8001ec6:	f383 8811 	msr	BASEPRI, r3
 8001eca:	f3bf 8f6f 	isb	sy
 8001ece:	f3bf 8f4f 	dsb	sy
 8001ed2:	b662      	cpsie	i
 8001ed4:	61bb      	str	r3, [r7, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001edc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00d      	beq.n	8001f04 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ef0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f805 	bl	8001f0e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3730      	adds	r7, #48	@ 0x30
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d103      	bne.n	8001f2a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e002      	b.n	8001f30 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	69b8      	ldr	r0, [r7, #24]
 8001f40:	f7ff fef2 	bl	8001d28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08e      	sub	sp, #56	@ 0x38
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f62:	2300      	movs	r3, #0
 8001f64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10d      	bne.n	8001f8c <xQueueGenericSend+0x38>
	__asm volatile
 8001f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f74:	b672      	cpsid	i
 8001f76:	f383 8811 	msr	BASEPRI, r3
 8001f7a:	f3bf 8f6f 	isb	sy
 8001f7e:	f3bf 8f4f 	dsb	sy
 8001f82:	b662      	cpsie	i
 8001f84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d103      	bne.n	8001f9a <xQueueGenericSend+0x46>
 8001f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <xQueueGenericSend+0x4a>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <xQueueGenericSend+0x4c>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10d      	bne.n	8001fc0 <xQueueGenericSend+0x6c>
	__asm volatile
 8001fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fa8:	b672      	cpsid	i
 8001faa:	f383 8811 	msr	BASEPRI, r3
 8001fae:	f3bf 8f6f 	isb	sy
 8001fb2:	f3bf 8f4f 	dsb	sy
 8001fb6:	b662      	cpsie	i
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001fba:	bf00      	nop
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d103      	bne.n	8001fce <xQueueGenericSend+0x7a>
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <xQueueGenericSend+0x7e>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <xQueueGenericSend+0x80>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10d      	bne.n	8001ff4 <xQueueGenericSend+0xa0>
	__asm volatile
 8001fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fdc:	b672      	cpsid	i
 8001fde:	f383 8811 	msr	BASEPRI, r3
 8001fe2:	f3bf 8f6f 	isb	sy
 8001fe6:	f3bf 8f4f 	dsb	sy
 8001fea:	b662      	cpsie	i
 8001fec:	623b      	str	r3, [r7, #32]
}
 8001fee:	bf00      	nop
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ff4:	f001 fa2a 	bl	800344c <xTaskGetSchedulerState>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <xQueueGenericSend+0xb0>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <xQueueGenericSend+0xb4>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <xQueueGenericSend+0xb6>
 8002008:	2300      	movs	r3, #0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10d      	bne.n	800202a <xQueueGenericSend+0xd6>
	__asm volatile
 800200e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002012:	b672      	cpsid	i
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	b662      	cpsie	i
 8002022:	61fb      	str	r3, [r7, #28]
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	e7fd      	b.n	8002026 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800202a:	f001 ff6f 	bl	8003f0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800202e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002036:	429a      	cmp	r2, r3
 8002038:	d302      	bcc.n	8002040 <xQueueGenericSend+0xec>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d129      	bne.n	8002094 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002046:	f000 fa1b 	bl	8002480 <prvCopyDataToQueue>
 800204a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800204c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	2b00      	cmp	r3, #0
 8002052:	d010      	beq.n	8002076 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002056:	3324      	adds	r3, #36	@ 0x24
 8002058:	4618      	mov	r0, r3
 800205a:	f001 f829 	bl	80030b0 <xTaskRemoveFromEventList>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002064:	4b3f      	ldr	r3, [pc, #252]	@ (8002164 <xQueueGenericSend+0x210>)
 8002066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	f3bf 8f6f 	isb	sy
 8002074:	e00a      	b.n	800208c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800207c:	4b39      	ldr	r3, [pc, #228]	@ (8002164 <xQueueGenericSend+0x210>)
 800207e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800208c:	f001 ff74 	bl	8003f78 <vPortExitCritical>
				return pdPASS;
 8002090:	2301      	movs	r3, #1
 8002092:	e063      	b.n	800215c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d103      	bne.n	80020a2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800209a:	f001 ff6d 	bl	8003f78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	e05c      	b.n	800215c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d106      	bne.n	80020b6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	4618      	mov	r0, r3
 80020ae:	f001 f865 	bl	800317c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020b2:	2301      	movs	r3, #1
 80020b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020b6:	f001 ff5f 	bl	8003f78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020ba:	f000 fdc1 	bl	8002c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020be:	f001 ff25 	bl	8003f0c <vPortEnterCritical>
 80020c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ce:	d103      	bne.n	80020d8 <xQueueGenericSend+0x184>
 80020d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020de:	b25b      	sxtb	r3, r3
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d103      	bne.n	80020ee <xQueueGenericSend+0x19a>
 80020e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80020ee:	f001 ff43 	bl	8003f78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020f2:	1d3a      	adds	r2, r7, #4
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f001 f854 	bl	80031a8 <xTaskCheckForTimeOut>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d124      	bne.n	8002150 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002106:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002108:	f000 fab2 	bl	8002670 <prvIsQueueFull>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d018      	beq.n	8002144 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002114:	3310      	adds	r3, #16
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f000 ff72 	bl	8003004 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002122:	f000 fa3d 	bl	80025a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002126:	f000 fd99 	bl	8002c5c <xTaskResumeAll>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	f47f af7c 	bne.w	800202a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8002132:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <xQueueGenericSend+0x210>)
 8002134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f3bf 8f4f 	dsb	sy
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	e772      	b.n	800202a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002146:	f000 fa2b 	bl	80025a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800214a:	f000 fd87 	bl	8002c5c <xTaskResumeAll>
 800214e:	e76c      	b.n	800202a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002152:	f000 fa25 	bl	80025a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002156:	f000 fd81 	bl	8002c5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800215a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800215c:	4618      	mov	r0, r3
 800215e:	3738      	adds	r7, #56	@ 0x38
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	e000ed04 	.word	0xe000ed04

08002168 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08e      	sub	sp, #56	@ 0x38
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800217a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10d      	bne.n	800219c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8002180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002184:	b672      	cpsid	i
 8002186:	f383 8811 	msr	BASEPRI, r3
 800218a:	f3bf 8f6f 	isb	sy
 800218e:	f3bf 8f4f 	dsb	sy
 8002192:	b662      	cpsie	i
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d103      	bne.n	80021aa <xQueueGenericSendFromISR+0x42>
 80021a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <xQueueGenericSendFromISR+0x46>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <xQueueGenericSendFromISR+0x48>
 80021ae:	2300      	movs	r3, #0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80021b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021b8:	b672      	cpsid	i
 80021ba:	f383 8811 	msr	BASEPRI, r3
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	b662      	cpsie	i
 80021c8:	623b      	str	r3, [r7, #32]
}
 80021ca:	bf00      	nop
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d103      	bne.n	80021de <xQueueGenericSendFromISR+0x76>
 80021d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <xQueueGenericSendFromISR+0x7a>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <xQueueGenericSendFromISR+0x7c>
 80021e2:	2300      	movs	r3, #0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10d      	bne.n	8002204 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80021e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ec:	b672      	cpsid	i
 80021ee:	f383 8811 	msr	BASEPRI, r3
 80021f2:	f3bf 8f6f 	isb	sy
 80021f6:	f3bf 8f4f 	dsb	sy
 80021fa:	b662      	cpsie	i
 80021fc:	61fb      	str	r3, [r7, #28]
}
 80021fe:	bf00      	nop
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002204:	f001 ff6a 	bl	80040dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002208:	f3ef 8211 	mrs	r2, BASEPRI
 800220c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002210:	b672      	cpsid	i
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	b662      	cpsie	i
 8002220:	61ba      	str	r2, [r7, #24]
 8002222:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002224:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002226:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800222c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002230:	429a      	cmp	r2, r3
 8002232:	d302      	bcc.n	800223a <xQueueGenericSendFromISR+0xd2>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d12c      	bne.n	8002294 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002240:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800224a:	f000 f919 	bl	8002480 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800224e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002256:	d112      	bne.n	800227e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	2b00      	cmp	r3, #0
 800225e:	d016      	beq.n	800228e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002262:	3324      	adds	r3, #36	@ 0x24
 8002264:	4618      	mov	r0, r3
 8002266:	f000 ff23 	bl	80030b0 <xTaskRemoveFromEventList>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00e      	beq.n	800228e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e007      	b.n	800228e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800227e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002282:	3301      	adds	r3, #1
 8002284:	b2db      	uxtb	r3, r3
 8002286:	b25a      	sxtb	r2, r3
 8002288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800228e:	2301      	movs	r3, #1
 8002290:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002292:	e001      	b.n	8002298 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002294:	2300      	movs	r3, #0
 8002296:	637b      	str	r3, [r7, #52]	@ 0x34
 8002298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80022a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3738      	adds	r7, #56	@ 0x38
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08c      	sub	sp, #48	@ 0x30
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80022bc:	2300      	movs	r3, #0
 80022be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80022c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10d      	bne.n	80022e6 <xQueueReceive+0x36>
	__asm volatile
 80022ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ce:	b672      	cpsid	i
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	b662      	cpsie	i
 80022de:	623b      	str	r3, [r7, #32]
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	e7fd      	b.n	80022e2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d103      	bne.n	80022f4 <xQueueReceive+0x44>
 80022ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <xQueueReceive+0x48>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <xQueueReceive+0x4a>
 80022f8:	2300      	movs	r3, #0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10d      	bne.n	800231a <xQueueReceive+0x6a>
	__asm volatile
 80022fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002302:	b672      	cpsid	i
 8002304:	f383 8811 	msr	BASEPRI, r3
 8002308:	f3bf 8f6f 	isb	sy
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	b662      	cpsie	i
 8002312:	61fb      	str	r3, [r7, #28]
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	e7fd      	b.n	8002316 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800231a:	f001 f897 	bl	800344c <xTaskGetSchedulerState>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <xQueueReceive+0x7a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <xQueueReceive+0x7e>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <xQueueReceive+0x80>
 800232e:	2300      	movs	r3, #0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10d      	bne.n	8002350 <xQueueReceive+0xa0>
	__asm volatile
 8002334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002338:	b672      	cpsid	i
 800233a:	f383 8811 	msr	BASEPRI, r3
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	f3bf 8f4f 	dsb	sy
 8002346:	b662      	cpsie	i
 8002348:	61bb      	str	r3, [r7, #24]
}
 800234a:	bf00      	nop
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002350:	f001 fddc 	bl	8003f0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01f      	beq.n	80023a0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002364:	f000 f8f6 	bl	8002554 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	1e5a      	subs	r2, r3, #1
 800236c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00f      	beq.n	8002398 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237a:	3310      	adds	r3, #16
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fe97 	bl	80030b0 <xTaskRemoveFromEventList>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002388:	4b3c      	ldr	r3, [pc, #240]	@ (800247c <xQueueReceive+0x1cc>)
 800238a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002398:	f001 fdee 	bl	8003f78 <vPortExitCritical>
				return pdPASS;
 800239c:	2301      	movs	r3, #1
 800239e:	e069      	b.n	8002474 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80023a6:	f001 fde7 	bl	8003f78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e062      	b.n	8002474 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d106      	bne.n	80023c2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023b4:	f107 0310 	add.w	r3, r7, #16
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fedf 	bl	800317c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023be:	2301      	movs	r3, #1
 80023c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023c2:	f001 fdd9 	bl	8003f78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023c6:	f000 fc3b 	bl	8002c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023ca:	f001 fd9f 	bl	8003f0c <vPortEnterCritical>
 80023ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023da:	d103      	bne.n	80023e4 <xQueueReceive+0x134>
 80023dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80023ea:	b25b      	sxtb	r3, r3
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d103      	bne.n	80023fa <xQueueReceive+0x14a>
 80023f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023fa:	f001 fdbd 	bl	8003f78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023fe:	1d3a      	adds	r2, r7, #4
 8002400:	f107 0310 	add.w	r3, r7, #16
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fece 	bl	80031a8 <xTaskCheckForTimeOut>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d123      	bne.n	800245a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002414:	f000 f916 	bl	8002644 <prvIsQueueEmpty>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d017      	beq.n	800244e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800241e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002420:	3324      	adds	r3, #36	@ 0x24
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fdec 	bl	8003004 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800242c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800242e:	f000 f8b7 	bl	80025a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002432:	f000 fc13 	bl	8002c5c <xTaskResumeAll>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d189      	bne.n	8002350 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800243c:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <xQueueReceive+0x1cc>)
 800243e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	e780      	b.n	8002350 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800244e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002450:	f000 f8a6 	bl	80025a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002454:	f000 fc02 	bl	8002c5c <xTaskResumeAll>
 8002458:	e77a      	b.n	8002350 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800245a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800245c:	f000 f8a0 	bl	80025a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002460:	f000 fbfc 	bl	8002c5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002464:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002466:	f000 f8ed 	bl	8002644 <prvIsQueueEmpty>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	f43f af6f 	beq.w	8002350 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002472:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002474:	4618      	mov	r0, r3
 8002476:	3730      	adds	r7, #48	@ 0x30
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	e000ed04 	.word	0xe000ed04

08002480 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002494:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10d      	bne.n	80024ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d14d      	bne.n	8002542 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 ffec 	bl	8003488 <xTaskPriorityDisinherit>
 80024b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	e043      	b.n	8002542 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d119      	bne.n	80024f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6858      	ldr	r0, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	461a      	mov	r2, r3
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	f002 f8ba 	bl	8004644 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	441a      	add	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d32b      	bcc.n	8002542 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	e026      	b.n	8002542 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	68d8      	ldr	r0, [r3, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	461a      	mov	r2, r3
 80024fe:	68b9      	ldr	r1, [r7, #8]
 8002500:	f002 f8a0 	bl	8004644 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	425b      	negs	r3, r3
 800250e:	441a      	add	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d207      	bcs.n	8002530 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	425b      	negs	r3, r3
 800252a:	441a      	add	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d105      	bne.n	8002542 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	3b01      	subs	r3, #1
 8002540:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800254a:	697b      	ldr	r3, [r7, #20]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d018      	beq.n	8002598 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	441a      	add	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	429a      	cmp	r2, r3
 800257e:	d303      	bcc.n	8002588 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68d9      	ldr	r1, [r3, #12]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	461a      	mov	r2, r3
 8002592:	6838      	ldr	r0, [r7, #0]
 8002594:	f002 f856 	bl	8004644 <memcpy>
	}
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80025a8:	f001 fcb0 	bl	8003f0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025b4:	e011      	b.n	80025da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d012      	beq.n	80025e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3324      	adds	r3, #36	@ 0x24
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fd74 	bl	80030b0 <xTaskRemoveFromEventList>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80025ce:	f000 fe53 	bl	8003278 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	dce9      	bgt.n	80025b6 <prvUnlockQueue+0x16>
 80025e2:	e000      	b.n	80025e6 <prvUnlockQueue+0x46>
					break;
 80025e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	22ff      	movs	r2, #255	@ 0xff
 80025ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80025ee:	f001 fcc3 	bl	8003f78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80025f2:	f001 fc8b 	bl	8003f0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025fe:	e011      	b.n	8002624 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d012      	beq.n	800262e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3310      	adds	r3, #16
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fd4f 	bl	80030b0 <xTaskRemoveFromEventList>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002618:	f000 fe2e 	bl	8003278 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800261c:	7bbb      	ldrb	r3, [r7, #14]
 800261e:	3b01      	subs	r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002628:	2b00      	cmp	r3, #0
 800262a:	dce9      	bgt.n	8002600 <prvUnlockQueue+0x60>
 800262c:	e000      	b.n	8002630 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800262e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	22ff      	movs	r2, #255	@ 0xff
 8002634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002638:	f001 fc9e 	bl	8003f78 <vPortExitCritical>
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800264c:	f001 fc5e 	bl	8003f0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002658:	2301      	movs	r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	e001      	b.n	8002662 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002662:	f001 fc89 	bl	8003f78 <vPortExitCritical>

	return xReturn;
 8002666:	68fb      	ldr	r3, [r7, #12]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002678:	f001 fc48 	bl	8003f0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002684:	429a      	cmp	r2, r3
 8002686:	d102      	bne.n	800268e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002688:	2301      	movs	r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	e001      	b.n	8002692 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002692:	f001 fc71 	bl	8003f78 <vPortExitCritical>

	return xReturn;
 8002696:	68fb      	ldr	r3, [r7, #12]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	e014      	b.n	80026da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80026b0:	4a0f      	ldr	r2, [pc, #60]	@ (80026f0 <vQueueAddToRegistry+0x50>)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10b      	bne.n	80026d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80026bc:	490c      	ldr	r1, [pc, #48]	@ (80026f0 <vQueueAddToRegistry+0x50>)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <vQueueAddToRegistry+0x50>)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80026d2:	e006      	b.n	80026e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3301      	adds	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b07      	cmp	r3, #7
 80026de:	d9e7      	bls.n	80026b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	200007d8 	.word	0x200007d8

080026f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002704:	f001 fc02 	bl	8003f0c <vPortEnterCritical>
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800270e:	b25b      	sxtb	r3, r3
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d103      	bne.n	800271e <vQueueWaitForMessageRestricted+0x2a>
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002724:	b25b      	sxtb	r3, r3
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272a:	d103      	bne.n	8002734 <vQueueWaitForMessageRestricted+0x40>
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002734:	f001 fc20 	bl	8003f78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273c:	2b00      	cmp	r3, #0
 800273e:	d106      	bne.n	800274e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3324      	adds	r3, #36	@ 0x24
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fc83 	bl	8003054 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800274e:	6978      	ldr	r0, [r7, #20]
 8002750:	f7ff ff26 	bl	80025a0 <prvUnlockQueue>
	}
 8002754:	bf00      	nop
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08e      	sub	sp, #56	@ 0x38
 8002760:	af04      	add	r7, sp, #16
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800276a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10d      	bne.n	800278c <xTaskCreateStatic+0x30>
	__asm volatile
 8002770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002774:	b672      	cpsid	i
 8002776:	f383 8811 	msr	BASEPRI, r3
 800277a:	f3bf 8f6f 	isb	sy
 800277e:	f3bf 8f4f 	dsb	sy
 8002782:	b662      	cpsie	i
 8002784:	623b      	str	r3, [r7, #32]
}
 8002786:	bf00      	nop
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800278c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10d      	bne.n	80027ae <xTaskCreateStatic+0x52>
	__asm volatile
 8002792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002796:	b672      	cpsid	i
 8002798:	f383 8811 	msr	BASEPRI, r3
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	b662      	cpsie	i
 80027a6:	61fb      	str	r3, [r7, #28]
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	e7fd      	b.n	80027aa <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80027ae:	23a8      	movs	r3, #168	@ 0xa8
 80027b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2ba8      	cmp	r3, #168	@ 0xa8
 80027b6:	d00d      	beq.n	80027d4 <xTaskCreateStatic+0x78>
	__asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027bc:	b672      	cpsid	i
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	b662      	cpsie	i
 80027cc:	61bb      	str	r3, [r7, #24]
}
 80027ce:	bf00      	nop
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80027d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80027d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01e      	beq.n	800281a <xTaskCreateStatic+0xbe>
 80027dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d01b      	beq.n	800281a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027f4:	2300      	movs	r3, #0
 80027f6:	9303      	str	r3, [sp, #12]
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f851 	bl	80028b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002812:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002814:	f000 f8f8 	bl	8002a08 <prvAddNewTaskToReadyList>
 8002818:	e001      	b.n	800281e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800281e:	697b      	ldr	r3, [r7, #20]
	}
 8002820:	4618      	mov	r0, r3
 8002822:	3728      	adds	r7, #40	@ 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	@ 0x30
 800282c:	af04      	add	r7, sp, #16
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4618      	mov	r0, r3
 800283e:	f001 fc93 	bl	8004168 <pvPortMalloc>
 8002842:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00e      	beq.n	8002868 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800284a:	20a8      	movs	r0, #168	@ 0xa8
 800284c:	f001 fc8c 	bl	8004168 <pvPortMalloc>
 8002850:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	631a      	str	r2, [r3, #48]	@ 0x30
 800285e:	e005      	b.n	800286c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002860:	6978      	ldr	r0, [r7, #20]
 8002862:	f001 fd4f 	bl	8004304 <vPortFree>
 8002866:	e001      	b.n	800286c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002868:	2300      	movs	r3, #0
 800286a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d017      	beq.n	80028a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800287a:	88fa      	ldrh	r2, [r7, #6]
 800287c:	2300      	movs	r3, #0
 800287e:	9303      	str	r3, [sp, #12]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	9302      	str	r3, [sp, #8]
 8002884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f80f 	bl	80028b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002896:	69f8      	ldr	r0, [r7, #28]
 8002898:	f000 f8b6 	bl	8002a08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800289c:	2301      	movs	r3, #1
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	e002      	b.n	80028a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80028a8:	69bb      	ldr	r3, [r7, #24]
	}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	461a      	mov	r2, r3
 80028cc:	21a5      	movs	r1, #165	@ 0xa5
 80028ce:	f001 fe35 	bl	800453c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80028dc:	440b      	add	r3, r1
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	f023 0307 	bic.w	r3, r3, #7
 80028ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00d      	beq.n	8002912 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fa:	b672      	cpsid	i
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	b662      	cpsie	i
 800290a:	617b      	str	r3, [r7, #20]
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	e7fd      	b.n	800290e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01f      	beq.n	8002958 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	e012      	b.n	8002944 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	7819      	ldrb	r1, [r3, #0]
 8002926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4413      	add	r3, r2
 800292c:	3334      	adds	r3, #52	@ 0x34
 800292e:	460a      	mov	r2, r1
 8002930:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	4413      	add	r3, r2
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d006      	beq.n	800294c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3301      	adds	r3, #1
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b0f      	cmp	r3, #15
 8002948:	d9e9      	bls.n	800291e <prvInitialiseNewTask+0x6a>
 800294a:	e000      	b.n	800294e <prvInitialiseNewTask+0x9a>
			{
				break;
 800294c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800294e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002956:	e003      	b.n	8002960 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002962:	2b37      	cmp	r3, #55	@ 0x37
 8002964:	d901      	bls.n	800296a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002966:	2337      	movs	r3, #55	@ 0x37
 8002968:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800296a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800296e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002972:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002974:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002978:	2200      	movs	r2, #0
 800297a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800297c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297e:	3304      	adds	r3, #4
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff f93d 	bl	8001c00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	3318      	adds	r3, #24
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff f938 	bl	8001c00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002994:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002998:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800299c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80029a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a8:	2200      	movs	r2, #0
 80029aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80029b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b8:	3354      	adds	r3, #84	@ 0x54
 80029ba:	224c      	movs	r2, #76	@ 0x4c
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f001 fdbc 	bl	800453c <memset>
 80029c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c6:	4a0d      	ldr	r2, [pc, #52]	@ (80029fc <prvInitialiseNewTask+0x148>)
 80029c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80029ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002a00 <prvInitialiseNewTask+0x14c>)
 80029ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002a04 <prvInitialiseNewTask+0x150>)
 80029d4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	68f9      	ldr	r1, [r7, #12]
 80029da:	69b8      	ldr	r0, [r7, #24]
 80029dc:	f001 f984 	bl	8003ce8 <pxPortInitialiseStack>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80029e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029f2:	bf00      	nop
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20004a64 	.word	0x20004a64
 8002a00:	20004acc 	.word	0x20004acc
 8002a04:	20004b34 	.word	0x20004b34

08002a08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a10:	f001 fa7c 	bl	8003f0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a14:	4b2d      	ldr	r3, [pc, #180]	@ (8002acc <prvAddNewTaskToReadyList+0xc4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8002acc <prvAddNewTaskToReadyList+0xc4>)
 8002a1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad0 <prvAddNewTaskToReadyList+0xc8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a26:	4a2a      	ldr	r2, [pc, #168]	@ (8002ad0 <prvAddNewTaskToReadyList+0xc8>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a2c:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <prvAddNewTaskToReadyList+0xc4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d110      	bne.n	8002a56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002a34:	f000 fc44 	bl	80032c0 <prvInitialiseTaskLists>
 8002a38:	e00d      	b.n	8002a56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002a3a:	4b26      	ldr	r3, [pc, #152]	@ (8002ad4 <prvAddNewTaskToReadyList+0xcc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a42:	4b23      	ldr	r3, [pc, #140]	@ (8002ad0 <prvAddNewTaskToReadyList+0xc8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d802      	bhi.n	8002a56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a50:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad0 <prvAddNewTaskToReadyList+0xc8>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a56:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <prvAddNewTaskToReadyList+0xd0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ad8 <prvAddNewTaskToReadyList+0xd0>)
 8002a5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a60:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad8 <prvAddNewTaskToReadyList+0xd0>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002adc <prvAddNewTaskToReadyList+0xd4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d903      	bls.n	8002a7c <prvAddNewTaskToReadyList+0x74>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a78:	4a18      	ldr	r2, [pc, #96]	@ (8002adc <prvAddNewTaskToReadyList+0xd4>)
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4a15      	ldr	r2, [pc, #84]	@ (8002ae0 <prvAddNewTaskToReadyList+0xd8>)
 8002a8a:	441a      	add	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	4619      	mov	r1, r3
 8002a92:	4610      	mov	r0, r2
 8002a94:	f7ff f8c1 	bl	8001c1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a98:	f001 fa6e 	bl	8003f78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <prvAddNewTaskToReadyList+0xcc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00e      	beq.n	8002ac2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad0 <prvAddNewTaskToReadyList+0xc8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d207      	bcs.n	8002ac2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <prvAddNewTaskToReadyList+0xdc>)
 8002ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000cec 	.word	0x20000cec
 8002ad0:	20000818 	.word	0x20000818
 8002ad4:	20000cf8 	.word	0x20000cf8
 8002ad8:	20000d08 	.word	0x20000d08
 8002adc:	20000cf4 	.word	0x20000cf4
 8002ae0:	2000081c 	.word	0x2000081c
 8002ae4:	e000ed04 	.word	0xe000ed04

08002ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01a      	beq.n	8002b30 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002afa:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <vTaskDelay+0x68>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00d      	beq.n	8002b1e <vTaskDelay+0x36>
	__asm volatile
 8002b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b06:	b672      	cpsid	i
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	b662      	cpsie	i
 8002b16:	60bb      	str	r3, [r7, #8]
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	e7fd      	b.n	8002b1a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8002b1e:	f000 f88f 	bl	8002c40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b22:	2100      	movs	r1, #0
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fd23 	bl	8003570 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002b2a:	f000 f897 	bl	8002c5c <xTaskResumeAll>
 8002b2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d107      	bne.n	8002b46 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8002b36:	4b07      	ldr	r3, [pc, #28]	@ (8002b54 <vTaskDelay+0x6c>)
 8002b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000d14 	.word	0x20000d14
 8002b54:	e000ed04 	.word	0xe000ed04

08002b58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	@ 0x28
 8002b5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b66:	463a      	mov	r2, r7
 8002b68:	1d39      	adds	r1, r7, #4
 8002b6a:	f107 0308 	add.w	r3, r7, #8
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fff2 	bl	8001b58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b74:	6839      	ldr	r1, [r7, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	9202      	str	r2, [sp, #8]
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	2300      	movs	r3, #0
 8002b84:	460a      	mov	r2, r1
 8002b86:	4926      	ldr	r1, [pc, #152]	@ (8002c20 <vTaskStartScheduler+0xc8>)
 8002b88:	4826      	ldr	r0, [pc, #152]	@ (8002c24 <vTaskStartScheduler+0xcc>)
 8002b8a:	f7ff fde7 	bl	800275c <xTaskCreateStatic>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4a25      	ldr	r2, [pc, #148]	@ (8002c28 <vTaskStartScheduler+0xd0>)
 8002b92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b94:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <vTaskStartScheduler+0xd0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	e001      	b.n	8002ba6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d102      	bne.n	8002bb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002bac:	f000 fd34 	bl	8003618 <xTimerCreateTimerTask>
 8002bb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d11d      	bne.n	8002bf4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bbc:	b672      	cpsid	i
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	b662      	cpsie	i
 8002bcc:	613b      	str	r3, [r7, #16]
}
 8002bce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002bd0:	4b16      	ldr	r3, [pc, #88]	@ (8002c2c <vTaskStartScheduler+0xd4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3354      	adds	r3, #84	@ 0x54
 8002bd6:	4a16      	ldr	r2, [pc, #88]	@ (8002c30 <vTaskStartScheduler+0xd8>)
 8002bd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002bda:	4b16      	ldr	r3, [pc, #88]	@ (8002c34 <vTaskStartScheduler+0xdc>)
 8002bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002be0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002be2:	4b15      	ldr	r3, [pc, #84]	@ (8002c38 <vTaskStartScheduler+0xe0>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002be8:	4b14      	ldr	r3, [pc, #80]	@ (8002c3c <vTaskStartScheduler+0xe4>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002bee:	f001 f90f 	bl	8003e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002bf2:	e011      	b.n	8002c18 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfa:	d10d      	bne.n	8002c18 <vTaskStartScheduler+0xc0>
	__asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c00:	b672      	cpsid	i
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	b662      	cpsie	i
 8002c10:	60fb      	str	r3, [r7, #12]
}
 8002c12:	bf00      	nop
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <vTaskStartScheduler+0xbc>
}
 8002c18:	bf00      	nop
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	08004730 	.word	0x08004730
 8002c24:	08003291 	.word	0x08003291
 8002c28:	20000d10 	.word	0x20000d10
 8002c2c:	20000818 	.word	0x20000818
 8002c30:	20000010 	.word	0x20000010
 8002c34:	20000d0c 	.word	0x20000d0c
 8002c38:	20000cf8 	.word	0x20000cf8
 8002c3c:	20000cf0 	.word	0x20000cf0

08002c40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002c44:	4b04      	ldr	r3, [pc, #16]	@ (8002c58 <vTaskSuspendAll+0x18>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	4a03      	ldr	r2, [pc, #12]	@ (8002c58 <vTaskSuspendAll+0x18>)
 8002c4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	20000d14 	.word	0x20000d14

08002c5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c6a:	4b43      	ldr	r3, [pc, #268]	@ (8002d78 <xTaskResumeAll+0x11c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10d      	bne.n	8002c8e <xTaskResumeAll+0x32>
	__asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c76:	b672      	cpsid	i
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	b662      	cpsie	i
 8002c86:	603b      	str	r3, [r7, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	e7fd      	b.n	8002c8a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c8e:	f001 f93d 	bl	8003f0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c92:	4b39      	ldr	r3, [pc, #228]	@ (8002d78 <xTaskResumeAll+0x11c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	4a37      	ldr	r2, [pc, #220]	@ (8002d78 <xTaskResumeAll+0x11c>)
 8002c9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c9c:	4b36      	ldr	r3, [pc, #216]	@ (8002d78 <xTaskResumeAll+0x11c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d162      	bne.n	8002d6a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ca4:	4b35      	ldr	r3, [pc, #212]	@ (8002d7c <xTaskResumeAll+0x120>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d05e      	beq.n	8002d6a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cac:	e02f      	b.n	8002d0e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cae:	4b34      	ldr	r3, [pc, #208]	@ (8002d80 <xTaskResumeAll+0x124>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3318      	adds	r3, #24
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff f80a 	bl	8001cd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff f805 	bl	8001cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cce:	4b2d      	ldr	r3, [pc, #180]	@ (8002d84 <xTaskResumeAll+0x128>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d903      	bls.n	8002cde <xTaskResumeAll+0x82>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	4a2a      	ldr	r2, [pc, #168]	@ (8002d84 <xTaskResumeAll+0x128>)
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4a27      	ldr	r2, [pc, #156]	@ (8002d88 <xTaskResumeAll+0x12c>)
 8002cec:	441a      	add	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	f7fe ff90 	bl	8001c1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cfe:	4b23      	ldr	r3, [pc, #140]	@ (8002d8c <xTaskResumeAll+0x130>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d302      	bcc.n	8002d0e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8002d08:	4b21      	ldr	r3, [pc, #132]	@ (8002d90 <xTaskResumeAll+0x134>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002d80 <xTaskResumeAll+0x124>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1cb      	bne.n	8002cae <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002d1c:	f000 fb76 	bl	800340c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002d20:	4b1c      	ldr	r3, [pc, #112]	@ (8002d94 <xTaskResumeAll+0x138>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d010      	beq.n	8002d4e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002d2c:	f000 f846 	bl	8002dbc <xTaskIncrementTick>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8002d36:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <xTaskResumeAll+0x134>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f1      	bne.n	8002d2c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8002d48:	4b12      	ldr	r3, [pc, #72]	@ (8002d94 <xTaskResumeAll+0x138>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002d4e:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <xTaskResumeAll+0x134>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002d56:	2301      	movs	r3, #1
 8002d58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <xTaskResumeAll+0x13c>)
 8002d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d6a:	f001 f905 	bl	8003f78 <vPortExitCritical>

	return xAlreadyYielded;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000d14 	.word	0x20000d14
 8002d7c:	20000cec 	.word	0x20000cec
 8002d80:	20000cac 	.word	0x20000cac
 8002d84:	20000cf4 	.word	0x20000cf4
 8002d88:	2000081c 	.word	0x2000081c
 8002d8c:	20000818 	.word	0x20000818
 8002d90:	20000d00 	.word	0x20000d00
 8002d94:	20000cfc 	.word	0x20000cfc
 8002d98:	e000ed04 	.word	0xe000ed04

08002d9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002da2:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <xTaskGetTickCount+0x1c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002da8:	687b      	ldr	r3, [r7, #4]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000cf0 	.word	0x20000cf0

08002dbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dc6:	4b50      	ldr	r3, [pc, #320]	@ (8002f08 <xTaskIncrementTick+0x14c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f040 808c 	bne.w	8002ee8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002dd0:	4b4e      	ldr	r3, [pc, #312]	@ (8002f0c <xTaskIncrementTick+0x150>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8002f0c <xTaskIncrementTick+0x150>)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d123      	bne.n	8002e2c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8002de4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f10 <xTaskIncrementTick+0x154>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <xTaskIncrementTick+0x4e>
	__asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df2:	b672      	cpsid	i
 8002df4:	f383 8811 	msr	BASEPRI, r3
 8002df8:	f3bf 8f6f 	isb	sy
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	b662      	cpsie	i
 8002e02:	603b      	str	r3, [r7, #0]
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	e7fd      	b.n	8002e06 <xTaskIncrementTick+0x4a>
 8002e0a:	4b41      	ldr	r3, [pc, #260]	@ (8002f10 <xTaskIncrementTick+0x154>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	4b40      	ldr	r3, [pc, #256]	@ (8002f14 <xTaskIncrementTick+0x158>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a3e      	ldr	r2, [pc, #248]	@ (8002f10 <xTaskIncrementTick+0x154>)
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4a3e      	ldr	r2, [pc, #248]	@ (8002f14 <xTaskIncrementTick+0x158>)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f18 <xTaskIncrementTick+0x15c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3301      	adds	r3, #1
 8002e24:	4a3c      	ldr	r2, [pc, #240]	@ (8002f18 <xTaskIncrementTick+0x15c>)
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	f000 faf0 	bl	800340c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f1c <xTaskIncrementTick+0x160>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d349      	bcc.n	8002eca <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e36:	4b36      	ldr	r3, [pc, #216]	@ (8002f10 <xTaskIncrementTick+0x154>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d104      	bne.n	8002e4a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e40:	4b36      	ldr	r3, [pc, #216]	@ (8002f1c <xTaskIncrementTick+0x160>)
 8002e42:	f04f 32ff 	mov.w	r2, #4294967295
 8002e46:	601a      	str	r2, [r3, #0]
					break;
 8002e48:	e03f      	b.n	8002eca <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e4a:	4b31      	ldr	r3, [pc, #196]	@ (8002f10 <xTaskIncrementTick+0x154>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d203      	bcs.n	8002e6a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002e62:	4a2e      	ldr	r2, [pc, #184]	@ (8002f1c <xTaskIncrementTick+0x160>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e68:	e02f      	b.n	8002eca <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe ff30 	bl	8001cd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	3318      	adds	r3, #24
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe ff27 	bl	8001cd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e8a:	4b25      	ldr	r3, [pc, #148]	@ (8002f20 <xTaskIncrementTick+0x164>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d903      	bls.n	8002e9a <xTaskIncrementTick+0xde>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e96:	4a22      	ldr	r2, [pc, #136]	@ (8002f20 <xTaskIncrementTick+0x164>)
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f24 <xTaskIncrementTick+0x168>)
 8002ea8:	441a      	add	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	3304      	adds	r3, #4
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f7fe feb2 	bl	8001c1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eba:	4b1b      	ldr	r3, [pc, #108]	@ (8002f28 <xTaskIncrementTick+0x16c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d3b8      	bcc.n	8002e36 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ec8:	e7b5      	b.n	8002e36 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002eca:	4b17      	ldr	r3, [pc, #92]	@ (8002f28 <xTaskIncrementTick+0x16c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed0:	4914      	ldr	r1, [pc, #80]	@ (8002f24 <xTaskIncrementTick+0x168>)
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d907      	bls.n	8002ef2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	e004      	b.n	8002ef2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002ee8:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <xTaskIncrementTick+0x170>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	4a0f      	ldr	r2, [pc, #60]	@ (8002f2c <xTaskIncrementTick+0x170>)
 8002ef0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f30 <xTaskIncrementTick+0x174>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002efa:	2301      	movs	r3, #1
 8002efc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002efe:	697b      	ldr	r3, [r7, #20]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000d14 	.word	0x20000d14
 8002f0c:	20000cf0 	.word	0x20000cf0
 8002f10:	20000ca4 	.word	0x20000ca4
 8002f14:	20000ca8 	.word	0x20000ca8
 8002f18:	20000d04 	.word	0x20000d04
 8002f1c:	20000d0c 	.word	0x20000d0c
 8002f20:	20000cf4 	.word	0x20000cf4
 8002f24:	2000081c 	.word	0x2000081c
 8002f28:	20000818 	.word	0x20000818
 8002f2c:	20000cfc 	.word	0x20000cfc
 8002f30:	20000d00 	.word	0x20000d00

08002f34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8002fec <vTaskSwitchContext+0xb8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002f42:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff0 <vTaskSwitchContext+0xbc>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002f48:	e049      	b.n	8002fde <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8002f4a:	4b29      	ldr	r3, [pc, #164]	@ (8002ff0 <vTaskSwitchContext+0xbc>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f50:	4b28      	ldr	r3, [pc, #160]	@ (8002ff4 <vTaskSwitchContext+0xc0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	e013      	b.n	8002f80 <vTaskSwitchContext+0x4c>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <vTaskSwitchContext+0x46>
	__asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f62:	b672      	cpsid	i
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	b662      	cpsie	i
 8002f72:	607b      	str	r3, [r7, #4]
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	e7fd      	b.n	8002f76 <vTaskSwitchContext+0x42>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	491d      	ldr	r1, [pc, #116]	@ (8002ff8 <vTaskSwitchContext+0xc4>)
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0e1      	beq.n	8002f58 <vTaskSwitchContext+0x24>
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4a16      	ldr	r2, [pc, #88]	@ (8002ff8 <vTaskSwitchContext+0xc4>)
 8002fa0:	4413      	add	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d104      	bne.n	8002fc4 <vTaskSwitchContext+0x90>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	4a0c      	ldr	r2, [pc, #48]	@ (8002ffc <vTaskSwitchContext+0xc8>)
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4a09      	ldr	r2, [pc, #36]	@ (8002ff4 <vTaskSwitchContext+0xc0>)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002fd4:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <vTaskSwitchContext+0xc8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3354      	adds	r3, #84	@ 0x54
 8002fda:	4a09      	ldr	r2, [pc, #36]	@ (8003000 <vTaskSwitchContext+0xcc>)
 8002fdc:	6013      	str	r3, [r2, #0]
}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000d14 	.word	0x20000d14
 8002ff0:	20000d00 	.word	0x20000d00
 8002ff4:	20000cf4 	.word	0x20000cf4
 8002ff8:	2000081c 	.word	0x2000081c
 8002ffc:	20000818 	.word	0x20000818
 8003000:	20000010 	.word	0x20000010

08003004 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10d      	bne.n	8003030 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003018:	b672      	cpsid	i
 800301a:	f383 8811 	msr	BASEPRI, r3
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	b662      	cpsie	i
 8003028:	60fb      	str	r3, [r7, #12]
}
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003030:	4b07      	ldr	r3, [pc, #28]	@ (8003050 <vTaskPlaceOnEventList+0x4c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3318      	adds	r3, #24
 8003036:	4619      	mov	r1, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7fe fe12 	bl	8001c62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800303e:	2101      	movs	r1, #1
 8003040:	6838      	ldr	r0, [r7, #0]
 8003042:	f000 fa95 	bl	8003570 <prvAddCurrentTaskToDelayedList>
}
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000818 	.word	0x20000818

08003054 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10d      	bne.n	8003082 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306a:	b672      	cpsid	i
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	b662      	cpsie	i
 800307a:	617b      	str	r3, [r7, #20]
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	e7fd      	b.n	800307e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003082:	4b0a      	ldr	r3, [pc, #40]	@ (80030ac <vTaskPlaceOnEventListRestricted+0x58>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3318      	adds	r3, #24
 8003088:	4619      	mov	r1, r3
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7fe fdc5 	bl	8001c1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8003096:	f04f 33ff 	mov.w	r3, #4294967295
 800309a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	68b8      	ldr	r0, [r7, #8]
 80030a0:	f000 fa66 	bl	8003570 <prvAddCurrentTaskToDelayedList>
	}
 80030a4:	bf00      	nop
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000818 	.word	0x20000818

080030b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10d      	bne.n	80030e2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80030c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ca:	b672      	cpsid	i
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	b662      	cpsie	i
 80030da:	60fb      	str	r3, [r7, #12]
}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	e7fd      	b.n	80030de <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	3318      	adds	r3, #24
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fdf4 	bl	8001cd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003164 <xTaskRemoveFromEventList+0xb4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d11d      	bne.n	8003130 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	3304      	adds	r3, #4
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fe fdeb 	bl	8001cd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003102:	4b19      	ldr	r3, [pc, #100]	@ (8003168 <xTaskRemoveFromEventList+0xb8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d903      	bls.n	8003112 <xTaskRemoveFromEventList+0x62>
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310e:	4a16      	ldr	r2, [pc, #88]	@ (8003168 <xTaskRemoveFromEventList+0xb8>)
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4a13      	ldr	r2, [pc, #76]	@ (800316c <xTaskRemoveFromEventList+0xbc>)
 8003120:	441a      	add	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	3304      	adds	r3, #4
 8003126:	4619      	mov	r1, r3
 8003128:	4610      	mov	r0, r2
 800312a:	f7fe fd76 	bl	8001c1a <vListInsertEnd>
 800312e:	e005      	b.n	800313c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	3318      	adds	r3, #24
 8003134:	4619      	mov	r1, r3
 8003136:	480e      	ldr	r0, [pc, #56]	@ (8003170 <xTaskRemoveFromEventList+0xc0>)
 8003138:	f7fe fd6f 	bl	8001c1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003140:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <xTaskRemoveFromEventList+0xc4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	429a      	cmp	r2, r3
 8003148:	d905      	bls.n	8003156 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800314a:	2301      	movs	r3, #1
 800314c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800314e:	4b0a      	ldr	r3, [pc, #40]	@ (8003178 <xTaskRemoveFromEventList+0xc8>)
 8003150:	2201      	movs	r2, #1
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e001      	b.n	800315a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800315a:	697b      	ldr	r3, [r7, #20]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000d14 	.word	0x20000d14
 8003168:	20000cf4 	.word	0x20000cf4
 800316c:	2000081c 	.word	0x2000081c
 8003170:	20000cac 	.word	0x20000cac
 8003174:	20000818 	.word	0x20000818
 8003178:	20000d00 	.word	0x20000d00

0800317c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003184:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <vTaskInternalSetTimeOutState+0x24>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800318c:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <vTaskInternalSetTimeOutState+0x28>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	605a      	str	r2, [r3, #4]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	20000d04 	.word	0x20000d04
 80031a4:	20000cf0 	.word	0x20000cf0

080031a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10d      	bne.n	80031d4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031bc:	b672      	cpsid	i
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	b662      	cpsie	i
 80031cc:	613b      	str	r3, [r7, #16]
}
 80031ce:	bf00      	nop
 80031d0:	bf00      	nop
 80031d2:	e7fd      	b.n	80031d0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10d      	bne.n	80031f6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031de:	b672      	cpsid	i
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	b662      	cpsie	i
 80031ee:	60fb      	str	r3, [r7, #12]
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	e7fd      	b.n	80031f2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80031f6:	f000 fe89 	bl	8003f0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80031fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003270 <xTaskCheckForTimeOut+0xc8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003212:	d102      	bne.n	800321a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	e023      	b.n	8003262 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <xTaskCheckForTimeOut+0xcc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d007      	beq.n	8003236 <xTaskCheckForTimeOut+0x8e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	429a      	cmp	r2, r3
 800322e:	d302      	bcc.n	8003236 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003230:	2301      	movs	r3, #1
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	e015      	b.n	8003262 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	429a      	cmp	r2, r3
 800323e:	d20b      	bcs.n	8003258 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	1ad2      	subs	r2, r2, r3
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff ff95 	bl	800317c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e004      	b.n	8003262 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800325e:	2301      	movs	r3, #1
 8003260:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003262:	f000 fe89 	bl	8003f78 <vPortExitCritical>

	return xReturn;
 8003266:	69fb      	ldr	r3, [r7, #28]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000cf0 	.word	0x20000cf0
 8003274:	20000d04 	.word	0x20000d04

08003278 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800327c:	4b03      	ldr	r3, [pc, #12]	@ (800328c <vTaskMissedYield+0x14>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]
}
 8003282:	bf00      	nop
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	20000d00 	.word	0x20000d00

08003290 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003298:	f000 f852 	bl	8003340 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800329c:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <prvIdleTask+0x28>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d9f9      	bls.n	8003298 <prvIdleTask+0x8>
			{
				taskYIELD();
 80032a4:	4b05      	ldr	r3, [pc, #20]	@ (80032bc <prvIdleTask+0x2c>)
 80032a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032b4:	e7f0      	b.n	8003298 <prvIdleTask+0x8>
 80032b6:	bf00      	nop
 80032b8:	2000081c 	.word	0x2000081c
 80032bc:	e000ed04 	.word	0xe000ed04

080032c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	e00c      	b.n	80032e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4a12      	ldr	r2, [pc, #72]	@ (8003320 <prvInitialiseTaskLists+0x60>)
 80032d8:	4413      	add	r3, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe fc70 	bl	8001bc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3301      	adds	r3, #1
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b37      	cmp	r3, #55	@ 0x37
 80032ea:	d9ef      	bls.n	80032cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80032ec:	480d      	ldr	r0, [pc, #52]	@ (8003324 <prvInitialiseTaskLists+0x64>)
 80032ee:	f7fe fc67 	bl	8001bc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032f2:	480d      	ldr	r0, [pc, #52]	@ (8003328 <prvInitialiseTaskLists+0x68>)
 80032f4:	f7fe fc64 	bl	8001bc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032f8:	480c      	ldr	r0, [pc, #48]	@ (800332c <prvInitialiseTaskLists+0x6c>)
 80032fa:	f7fe fc61 	bl	8001bc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80032fe:	480c      	ldr	r0, [pc, #48]	@ (8003330 <prvInitialiseTaskLists+0x70>)
 8003300:	f7fe fc5e 	bl	8001bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003304:	480b      	ldr	r0, [pc, #44]	@ (8003334 <prvInitialiseTaskLists+0x74>)
 8003306:	f7fe fc5b 	bl	8001bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800330a:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <prvInitialiseTaskLists+0x78>)
 800330c:	4a05      	ldr	r2, [pc, #20]	@ (8003324 <prvInitialiseTaskLists+0x64>)
 800330e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003310:	4b0a      	ldr	r3, [pc, #40]	@ (800333c <prvInitialiseTaskLists+0x7c>)
 8003312:	4a05      	ldr	r2, [pc, #20]	@ (8003328 <prvInitialiseTaskLists+0x68>)
 8003314:	601a      	str	r2, [r3, #0]
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	2000081c 	.word	0x2000081c
 8003324:	20000c7c 	.word	0x20000c7c
 8003328:	20000c90 	.word	0x20000c90
 800332c:	20000cac 	.word	0x20000cac
 8003330:	20000cc0 	.word	0x20000cc0
 8003334:	20000cd8 	.word	0x20000cd8
 8003338:	20000ca4 	.word	0x20000ca4
 800333c:	20000ca8 	.word	0x20000ca8

08003340 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003346:	e019      	b.n	800337c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003348:	f000 fde0 	bl	8003f0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800334c:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <prvCheckTasksWaitingTermination+0x50>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe fcbb 	bl	8001cd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800335e:	4b0d      	ldr	r3, [pc, #52]	@ (8003394 <prvCheckTasksWaitingTermination+0x54>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3b01      	subs	r3, #1
 8003364:	4a0b      	ldr	r2, [pc, #44]	@ (8003394 <prvCheckTasksWaitingTermination+0x54>)
 8003366:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003368:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <prvCheckTasksWaitingTermination+0x58>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3b01      	subs	r3, #1
 800336e:	4a0a      	ldr	r2, [pc, #40]	@ (8003398 <prvCheckTasksWaitingTermination+0x58>)
 8003370:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003372:	f000 fe01 	bl	8003f78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f810 	bl	800339c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800337c:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <prvCheckTasksWaitingTermination+0x58>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e1      	bne.n	8003348 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000cc0 	.word	0x20000cc0
 8003394:	20000cec 	.word	0x20000cec
 8003398:	20000cd4 	.word	0x20000cd4

0800339c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3354      	adds	r3, #84	@ 0x54
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 f8cf 	bl	800454c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d108      	bne.n	80033ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 ffa1 	bl	8004304 <vPortFree>
				vPortFree( pxTCB );
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 ff9e 	bl	8004304 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80033c8:	e01b      	b.n	8003402 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d103      	bne.n	80033dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 ff95 	bl	8004304 <vPortFree>
	}
 80033da:	e012      	b.n	8003402 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d00d      	beq.n	8003402 <prvDeleteTCB+0x66>
	__asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ea:	b672      	cpsid	i
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	b662      	cpsie	i
 80033fa:	60fb      	str	r3, [r7, #12]
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	e7fd      	b.n	80033fe <prvDeleteTCB+0x62>
	}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003412:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <prvResetNextTaskUnblockTime+0x38>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d104      	bne.n	8003426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800341c:	4b0a      	ldr	r3, [pc, #40]	@ (8003448 <prvResetNextTaskUnblockTime+0x3c>)
 800341e:	f04f 32ff 	mov.w	r2, #4294967295
 8003422:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003424:	e008      	b.n	8003438 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003426:	4b07      	ldr	r3, [pc, #28]	@ (8003444 <prvResetNextTaskUnblockTime+0x38>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <prvResetNextTaskUnblockTime+0x3c>)
 8003436:	6013      	str	r3, [r2, #0]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	20000ca4 	.word	0x20000ca4
 8003448:	20000d0c 	.word	0x20000d0c

0800344c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003452:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <xTaskGetSchedulerState+0x34>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800345a:	2301      	movs	r3, #1
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	e008      	b.n	8003472 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003460:	4b08      	ldr	r3, [pc, #32]	@ (8003484 <xTaskGetSchedulerState+0x38>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003468:	2302      	movs	r3, #2
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	e001      	b.n	8003472 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800346e:	2300      	movs	r3, #0
 8003470:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003472:	687b      	ldr	r3, [r7, #4]
	}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	20000cf8 	.word	0x20000cf8
 8003484:	20000d14 	.word	0x20000d14

08003488 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d05c      	beq.n	8003558 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800349e:	4b31      	ldr	r3, [pc, #196]	@ (8003564 <xTaskPriorityDisinherit+0xdc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d00d      	beq.n	80034c4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ac:	b672      	cpsid	i
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	b662      	cpsie	i
 80034bc:	60fb      	str	r3, [r7, #12]
}
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10d      	bne.n	80034e8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d0:	b672      	cpsid	i
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	b662      	cpsie	i
 80034e0:	60bb      	str	r3, [r7, #8]
}
 80034e2:	bf00      	nop
 80034e4:	bf00      	nop
 80034e6:	e7fd      	b.n	80034e4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ec:	1e5a      	subs	r2, r3, #1
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d02c      	beq.n	8003558 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003502:	2b00      	cmp	r3, #0
 8003504:	d128      	bne.n	8003558 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	3304      	adds	r3, #4
 800350a:	4618      	mov	r0, r3
 800350c:	f7fe fbe2 	bl	8001cd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003528:	4b0f      	ldr	r3, [pc, #60]	@ (8003568 <xTaskPriorityDisinherit+0xe0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d903      	bls.n	8003538 <xTaskPriorityDisinherit+0xb0>
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	4a0c      	ldr	r2, [pc, #48]	@ (8003568 <xTaskPriorityDisinherit+0xe0>)
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4a09      	ldr	r2, [pc, #36]	@ (800356c <xTaskPriorityDisinherit+0xe4>)
 8003546:	441a      	add	r2, r3
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f7fe fb63 	bl	8001c1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003554:	2301      	movs	r3, #1
 8003556:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003558:	697b      	ldr	r3, [r7, #20]
	}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000818 	.word	0x20000818
 8003568:	20000cf4 	.word	0x20000cf4
 800356c:	2000081c 	.word	0x2000081c

08003570 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800357a:	4b21      	ldr	r3, [pc, #132]	@ (8003600 <prvAddCurrentTaskToDelayedList+0x90>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003580:	4b20      	ldr	r3, [pc, #128]	@ (8003604 <prvAddCurrentTaskToDelayedList+0x94>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3304      	adds	r3, #4
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fba4 	bl	8001cd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003592:	d10a      	bne.n	80035aa <prvAddCurrentTaskToDelayedList+0x3a>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800359a:	4b1a      	ldr	r3, [pc, #104]	@ (8003604 <prvAddCurrentTaskToDelayedList+0x94>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	3304      	adds	r3, #4
 80035a0:	4619      	mov	r1, r3
 80035a2:	4819      	ldr	r0, [pc, #100]	@ (8003608 <prvAddCurrentTaskToDelayedList+0x98>)
 80035a4:	f7fe fb39 	bl	8001c1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035a8:	e026      	b.n	80035f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4413      	add	r3, r2
 80035b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035b2:	4b14      	ldr	r3, [pc, #80]	@ (8003604 <prvAddCurrentTaskToDelayedList+0x94>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d209      	bcs.n	80035d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035c2:	4b12      	ldr	r3, [pc, #72]	@ (800360c <prvAddCurrentTaskToDelayedList+0x9c>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003604 <prvAddCurrentTaskToDelayedList+0x94>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f7fe fb47 	bl	8001c62 <vListInsert>
}
 80035d4:	e010      	b.n	80035f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003610 <prvAddCurrentTaskToDelayedList+0xa0>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4b0a      	ldr	r3, [pc, #40]	@ (8003604 <prvAddCurrentTaskToDelayedList+0x94>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3304      	adds	r3, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f7fe fb3d 	bl	8001c62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003614 <prvAddCurrentTaskToDelayedList+0xa4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d202      	bcs.n	80035f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80035f2:	4a08      	ldr	r2, [pc, #32]	@ (8003614 <prvAddCurrentTaskToDelayedList+0xa4>)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	6013      	str	r3, [r2, #0]
}
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000cf0 	.word	0x20000cf0
 8003604:	20000818 	.word	0x20000818
 8003608:	20000cd8 	.word	0x20000cd8
 800360c:	20000ca8 	.word	0x20000ca8
 8003610:	20000ca4 	.word	0x20000ca4
 8003614:	20000d0c 	.word	0x20000d0c

08003618 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	@ 0x28
 800361c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003622:	f000 fb21 	bl	8003c68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003626:	4b1e      	ldr	r3, [pc, #120]	@ (80036a0 <xTimerCreateTimerTask+0x88>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d021      	beq.n	8003672 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003636:	1d3a      	adds	r2, r7, #4
 8003638:	f107 0108 	add.w	r1, r7, #8
 800363c:	f107 030c 	add.w	r3, r7, #12
 8003640:	4618      	mov	r0, r3
 8003642:	f7fe faa3 	bl	8001b8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	9202      	str	r2, [sp, #8]
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	2302      	movs	r3, #2
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	2300      	movs	r3, #0
 8003656:	460a      	mov	r2, r1
 8003658:	4912      	ldr	r1, [pc, #72]	@ (80036a4 <xTimerCreateTimerTask+0x8c>)
 800365a:	4813      	ldr	r0, [pc, #76]	@ (80036a8 <xTimerCreateTimerTask+0x90>)
 800365c:	f7ff f87e 	bl	800275c <xTaskCreateStatic>
 8003660:	4603      	mov	r3, r0
 8003662:	4a12      	ldr	r2, [pc, #72]	@ (80036ac <xTimerCreateTimerTask+0x94>)
 8003664:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003666:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <xTimerCreateTimerTask+0x94>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800366e:	2301      	movs	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10d      	bne.n	8003694 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800367c:	b672      	cpsid	i
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	b662      	cpsie	i
 800368c:	613b      	str	r3, [r7, #16]
}
 800368e:	bf00      	nop
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8003694:	697b      	ldr	r3, [r7, #20]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000d48 	.word	0x20000d48
 80036a4:	08004738 	.word	0x08004738
 80036a8:	080037f1 	.word	0x080037f1
 80036ac:	20000d4c 	.word	0x20000d4c

080036b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08a      	sub	sp, #40	@ 0x28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10d      	bne.n	80036e4 <xTimerGenericCommand+0x34>
	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036cc:	b672      	cpsid	i
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	b662      	cpsie	i
 80036dc:	623b      	str	r3, [r7, #32]
}
 80036de:	bf00      	nop
 80036e0:	bf00      	nop
 80036e2:	e7fd      	b.n	80036e0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80036e4:	4b19      	ldr	r3, [pc, #100]	@ (800374c <xTimerGenericCommand+0x9c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d02a      	beq.n	8003742 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b05      	cmp	r3, #5
 80036fc:	dc18      	bgt.n	8003730 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80036fe:	f7ff fea5 	bl	800344c <xTaskGetSchedulerState>
 8003702:	4603      	mov	r3, r0
 8003704:	2b02      	cmp	r3, #2
 8003706:	d109      	bne.n	800371c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003708:	4b10      	ldr	r3, [pc, #64]	@ (800374c <xTimerGenericCommand+0x9c>)
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	f107 0110 	add.w	r1, r7, #16
 8003710:	2300      	movs	r3, #0
 8003712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003714:	f7fe fc1e 	bl	8001f54 <xQueueGenericSend>
 8003718:	6278      	str	r0, [r7, #36]	@ 0x24
 800371a:	e012      	b.n	8003742 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800371c:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <xTimerGenericCommand+0x9c>)
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	f107 0110 	add.w	r1, r7, #16
 8003724:	2300      	movs	r3, #0
 8003726:	2200      	movs	r2, #0
 8003728:	f7fe fc14 	bl	8001f54 <xQueueGenericSend>
 800372c:	6278      	str	r0, [r7, #36]	@ 0x24
 800372e:	e008      	b.n	8003742 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003730:	4b06      	ldr	r3, [pc, #24]	@ (800374c <xTimerGenericCommand+0x9c>)
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	f107 0110 	add.w	r1, r7, #16
 8003738:	2300      	movs	r3, #0
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	f7fe fd14 	bl	8002168 <xQueueGenericSendFromISR>
 8003740:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003744:	4618      	mov	r0, r3
 8003746:	3728      	adds	r7, #40	@ 0x28
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000d48 	.word	0x20000d48

08003750 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af02      	add	r7, sp, #8
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800375a:	4b24      	ldr	r3, [pc, #144]	@ (80037ec <prvProcessExpiredTimer+0x9c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3304      	adds	r3, #4
 8003768:	4618      	mov	r0, r3
 800376a:	f7fe fab3 	bl	8001cd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d025      	beq.n	80037c8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	18d1      	adds	r1, r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	6978      	ldr	r0, [r7, #20]
 800378a:	f000 f8d7 	bl	800393c <prvInsertTimerInActiveList>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d022      	beq.n	80037da <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003794:	2300      	movs	r3, #0
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2300      	movs	r3, #0
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	2100      	movs	r1, #0
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7ff ff86 	bl	80036b0 <xTimerGenericCommand>
 80037a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d116      	bne.n	80037da <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b0:	b672      	cpsid	i
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	b662      	cpsie	i
 80037c0:	60fb      	str	r3, [r7, #12]
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	e7fd      	b.n	80037c4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037ce:	f023 0301 	bic.w	r3, r3, #1
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	6978      	ldr	r0, [r7, #20]
 80037e0:	4798      	blx	r3
}
 80037e2:	bf00      	nop
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000d40 	.word	0x20000d40

080037f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037f8:	f107 0308 	add.w	r3, r7, #8
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 f859 	bl	80038b4 <prvGetNextExpireTime>
 8003802:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4619      	mov	r1, r3
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f805 	bl	8003818 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800380e:	f000 f8d7 	bl	80039c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003812:	bf00      	nop
 8003814:	e7f0      	b.n	80037f8 <prvTimerTask+0x8>
	...

08003818 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003822:	f7ff fa0d 	bl	8002c40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003826:	f107 0308 	add.w	r3, r7, #8
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f866 	bl	80038fc <prvSampleTimeNow>
 8003830:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d130      	bne.n	800389a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <prvProcessTimerOrBlockTask+0x3c>
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	429a      	cmp	r2, r3
 8003844:	d806      	bhi.n	8003854 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003846:	f7ff fa09 	bl	8002c5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800384a:	68f9      	ldr	r1, [r7, #12]
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff ff7f 	bl	8003750 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003852:	e024      	b.n	800389e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800385a:	4b13      	ldr	r3, [pc, #76]	@ (80038a8 <prvProcessTimerOrBlockTask+0x90>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <prvProcessTimerOrBlockTask+0x50>
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <prvProcessTimerOrBlockTask+0x52>
 8003868:	2300      	movs	r3, #0
 800386a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800386c:	4b0f      	ldr	r3, [pc, #60]	@ (80038ac <prvProcessTimerOrBlockTask+0x94>)
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	4619      	mov	r1, r3
 800387a:	f7fe ff3b 	bl	80026f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800387e:	f7ff f9ed 	bl	8002c5c <xTaskResumeAll>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003888:	4b09      	ldr	r3, [pc, #36]	@ (80038b0 <prvProcessTimerOrBlockTask+0x98>)
 800388a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	f3bf 8f6f 	isb	sy
}
 8003898:	e001      	b.n	800389e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800389a:	f7ff f9df 	bl	8002c5c <xTaskResumeAll>
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000d44 	.word	0x20000d44
 80038ac:	20000d48 	.word	0x20000d48
 80038b0:	e000ed04 	.word	0xe000ed04

080038b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80038bc:	4b0e      	ldr	r3, [pc, #56]	@ (80038f8 <prvGetNextExpireTime+0x44>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <prvGetNextExpireTime+0x16>
 80038c6:	2201      	movs	r2, #1
 80038c8:	e000      	b.n	80038cc <prvGetNextExpireTime+0x18>
 80038ca:	2200      	movs	r2, #0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d105      	bne.n	80038e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038d8:	4b07      	ldr	r3, [pc, #28]	@ (80038f8 <prvGetNextExpireTime+0x44>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	e001      	b.n	80038e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80038e8:	68fb      	ldr	r3, [r7, #12]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000d40 	.word	0x20000d40

080038fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003904:	f7ff fa4a 	bl	8002d9c <xTaskGetTickCount>
 8003908:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800390a:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <prvSampleTimeNow+0x3c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	429a      	cmp	r2, r3
 8003912:	d205      	bcs.n	8003920 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003914:	f000 f940 	bl	8003b98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e002      	b.n	8003926 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003926:	4a04      	ldr	r2, [pc, #16]	@ (8003938 <prvSampleTimeNow+0x3c>)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800392c:	68fb      	ldr	r3, [r7, #12]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000d50 	.word	0x20000d50

0800393c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	429a      	cmp	r2, r3
 8003960:	d812      	bhi.n	8003988 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	1ad2      	subs	r2, r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	429a      	cmp	r2, r3
 800396e:	d302      	bcc.n	8003976 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003970:	2301      	movs	r3, #1
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	e01b      	b.n	80039ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003976:	4b10      	ldr	r3, [pc, #64]	@ (80039b8 <prvInsertTimerInActiveList+0x7c>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	3304      	adds	r3, #4
 800397e:	4619      	mov	r1, r3
 8003980:	4610      	mov	r0, r2
 8003982:	f7fe f96e 	bl	8001c62 <vListInsert>
 8003986:	e012      	b.n	80039ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d206      	bcs.n	800399e <prvInsertTimerInActiveList+0x62>
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d302      	bcc.n	800399e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003998:	2301      	movs	r3, #1
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	e007      	b.n	80039ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800399e:	4b07      	ldr	r3, [pc, #28]	@ (80039bc <prvInsertTimerInActiveList+0x80>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3304      	adds	r3, #4
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7fe f95a 	bl	8001c62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80039ae:	697b      	ldr	r3, [r7, #20]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000d44 	.word	0x20000d44
 80039bc:	20000d40 	.word	0x20000d40

080039c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08e      	sub	sp, #56	@ 0x38
 80039c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039c6:	e0d4      	b.n	8003b72 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	da1b      	bge.n	8003a06 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80039ce:	1d3b      	adds	r3, r7, #4
 80039d0:	3304      	adds	r3, #4
 80039d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80039d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10d      	bne.n	80039f6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039de:	b672      	cpsid	i
 80039e0:	f383 8811 	msr	BASEPRI, r3
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	b662      	cpsie	i
 80039ee:	61fb      	str	r3, [r7, #28]
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	e7fd      	b.n	80039f2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80039f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039fc:	6850      	ldr	r0, [r2, #4]
 80039fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a00:	6892      	ldr	r2, [r2, #8]
 8003a02:	4611      	mov	r1, r2
 8003a04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f2c0 80b2 	blt.w	8003b72 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d004      	beq.n	8003a24 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe f958 	bl	8001cd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a24:	463b      	mov	r3, r7
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff ff68 	bl	80038fc <prvSampleTimeNow>
 8003a2c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b09      	cmp	r3, #9
 8003a32:	f200 809b 	bhi.w	8003b6c <prvProcessReceivedCommands+0x1ac>
 8003a36:	a201      	add	r2, pc, #4	@ (adr r2, 8003a3c <prvProcessReceivedCommands+0x7c>)
 8003a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3c:	08003a65 	.word	0x08003a65
 8003a40:	08003a65 	.word	0x08003a65
 8003a44:	08003a65 	.word	0x08003a65
 8003a48:	08003adf 	.word	0x08003adf
 8003a4c:	08003af3 	.word	0x08003af3
 8003a50:	08003b43 	.word	0x08003b43
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003a65 	.word	0x08003a65
 8003a5c:	08003adf 	.word	0x08003adf
 8003a60:	08003af3 	.word	0x08003af3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	18d1      	adds	r1, r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a84:	f7ff ff5a 	bl	800393c <prvInsertTimerInActiveList>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d070      	beq.n	8003b70 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d065      	beq.n	8003b70 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	441a      	add	r2, r3
 8003aac:	2300      	movs	r3, #0
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ab6:	f7ff fdfb 	bl	80036b0 <xTimerGenericCommand>
 8003aba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d156      	bne.n	8003b70 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac6:	b672      	cpsid	i
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	b662      	cpsie	i
 8003ad6:	61bb      	str	r3, [r7, #24]
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	e7fd      	b.n	8003ada <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003af0:	e03f      	b.n	8003b72 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10d      	bne.n	8003b2e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b16:	b672      	cpsid	i
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	b662      	cpsie	i
 8003b26:	617b      	str	r3, [r7, #20]
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	e7fd      	b.n	8003b2a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	18d1      	adds	r1, r2, r3
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b3c:	f7ff fefe 	bl	800393c <prvInsertTimerInActiveList>
					break;
 8003b40:	e017      	b.n	8003b72 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d103      	bne.n	8003b58 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8003b50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b52:	f000 fbd7 	bl	8004304 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003b56:	e00c      	b.n	8003b72 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003b6a:	e002      	b.n	8003b72 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8003b6c:	bf00      	nop
 8003b6e:	e000      	b.n	8003b72 <prvProcessReceivedCommands+0x1b2>
					break;
 8003b70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b72:	4b08      	ldr	r3, [pc, #32]	@ (8003b94 <prvProcessReceivedCommands+0x1d4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	1d39      	adds	r1, r7, #4
 8003b78:	2200      	movs	r2, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fb98 	bl	80022b0 <xQueueReceive>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f47f af20 	bne.w	80039c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3730      	adds	r7, #48	@ 0x30
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000d48 	.word	0x20000d48

08003b98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b9e:	e04b      	b.n	8003c38 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8003c60 <prvSwitchTimerLists+0xc8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003baa:	4b2d      	ldr	r3, [pc, #180]	@ (8003c60 <prvSwitchTimerLists+0xc8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fe f88b 	bl	8001cd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d031      	beq.n	8003c38 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d90e      	bls.n	8003c04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c60 <prvSwitchTimerLists+0xc8>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f7fe f830 	bl	8001c62 <vListInsert>
 8003c02:	e019      	b.n	8003c38 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c04:	2300      	movs	r3, #0
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f7ff fd4e 	bl	80036b0 <xTimerGenericCommand>
 8003c14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10d      	bne.n	8003c38 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c20:	b672      	cpsid	i
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	b662      	cpsie	i
 8003c30:	603b      	str	r3, [r7, #0]
}
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
 8003c36:	e7fd      	b.n	8003c34 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c38:	4b09      	ldr	r3, [pc, #36]	@ (8003c60 <prvSwitchTimerLists+0xc8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1ae      	bne.n	8003ba0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003c42:	4b07      	ldr	r3, [pc, #28]	@ (8003c60 <prvSwitchTimerLists+0xc8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003c48:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <prvSwitchTimerLists+0xcc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a04      	ldr	r2, [pc, #16]	@ (8003c60 <prvSwitchTimerLists+0xc8>)
 8003c4e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003c50:	4a04      	ldr	r2, [pc, #16]	@ (8003c64 <prvSwitchTimerLists+0xcc>)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	6013      	str	r3, [r2, #0]
}
 8003c56:	bf00      	nop
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000d40 	.word	0x20000d40
 8003c64:	20000d44 	.word	0x20000d44

08003c68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003c6e:	f000 f94d 	bl	8003f0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003c72:	4b15      	ldr	r3, [pc, #84]	@ (8003cc8 <prvCheckForValidListAndQueue+0x60>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d120      	bne.n	8003cbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003c7a:	4814      	ldr	r0, [pc, #80]	@ (8003ccc <prvCheckForValidListAndQueue+0x64>)
 8003c7c:	f7fd ffa0 	bl	8001bc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003c80:	4813      	ldr	r0, [pc, #76]	@ (8003cd0 <prvCheckForValidListAndQueue+0x68>)
 8003c82:	f7fd ff9d 	bl	8001bc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003c86:	4b13      	ldr	r3, [pc, #76]	@ (8003cd4 <prvCheckForValidListAndQueue+0x6c>)
 8003c88:	4a10      	ldr	r2, [pc, #64]	@ (8003ccc <prvCheckForValidListAndQueue+0x64>)
 8003c8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003c8c:	4b12      	ldr	r3, [pc, #72]	@ (8003cd8 <prvCheckForValidListAndQueue+0x70>)
 8003c8e:	4a10      	ldr	r2, [pc, #64]	@ (8003cd0 <prvCheckForValidListAndQueue+0x68>)
 8003c90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003c92:	2300      	movs	r3, #0
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	4b11      	ldr	r3, [pc, #68]	@ (8003cdc <prvCheckForValidListAndQueue+0x74>)
 8003c98:	4a11      	ldr	r2, [pc, #68]	@ (8003ce0 <prvCheckForValidListAndQueue+0x78>)
 8003c9a:	2110      	movs	r1, #16
 8003c9c:	200a      	movs	r0, #10
 8003c9e:	f7fe f8af 	bl	8001e00 <xQueueGenericCreateStatic>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4a08      	ldr	r2, [pc, #32]	@ (8003cc8 <prvCheckForValidListAndQueue+0x60>)
 8003ca6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003ca8:	4b07      	ldr	r3, [pc, #28]	@ (8003cc8 <prvCheckForValidListAndQueue+0x60>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003cb0:	4b05      	ldr	r3, [pc, #20]	@ (8003cc8 <prvCheckForValidListAndQueue+0x60>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	490b      	ldr	r1, [pc, #44]	@ (8003ce4 <prvCheckForValidListAndQueue+0x7c>)
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fcf2 	bl	80026a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cbc:	f000 f95c 	bl	8003f78 <vPortExitCritical>
}
 8003cc0:	bf00      	nop
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000d48 	.word	0x20000d48
 8003ccc:	20000d18 	.word	0x20000d18
 8003cd0:	20000d2c 	.word	0x20000d2c
 8003cd4:	20000d40 	.word	0x20000d40
 8003cd8:	20000d44 	.word	0x20000d44
 8003cdc:	20000df4 	.word	0x20000df4
 8003ce0:	20000d54 	.word	0x20000d54
 8003ce4:	08004740 	.word	0x08004740

08003ce8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3b04      	subs	r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3b04      	subs	r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f023 0201 	bic.w	r2, r3, #1
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3b04      	subs	r3, #4
 8003d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d18:	4a0c      	ldr	r2, [pc, #48]	@ (8003d4c <pxPortInitialiseStack+0x64>)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3b14      	subs	r3, #20
 8003d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3b04      	subs	r3, #4
 8003d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f06f 0202 	mvn.w	r2, #2
 8003d36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3b20      	subs	r3, #32
 8003d3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	08003d51 	.word	0x08003d51

08003d50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d5a:	4b15      	ldr	r3, [pc, #84]	@ (8003db0 <prvTaskExitError+0x60>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d00d      	beq.n	8003d80 <prvTaskExitError+0x30>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d68:	b672      	cpsid	i
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	b662      	cpsie	i
 8003d78:	60fb      	str	r3, [r7, #12]
}
 8003d7a:	bf00      	nop
 8003d7c:	bf00      	nop
 8003d7e:	e7fd      	b.n	8003d7c <prvTaskExitError+0x2c>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d84:	b672      	cpsid	i
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	b662      	cpsie	i
 8003d94:	60bb      	str	r3, [r7, #8]
}
 8003d96:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d98:	bf00      	nop
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0fc      	beq.n	8003d9a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	2000000c 	.word	0x2000000c
	...

08003dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003dc0:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <pxCurrentTCBConst2>)
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	6808      	ldr	r0, [r1, #0]
 8003dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dca:	f380 8809 	msr	PSP, r0
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f380 8811 	msr	BASEPRI, r0
 8003dda:	4770      	bx	lr
 8003ddc:	f3af 8000 	nop.w

08003de0 <pxCurrentTCBConst2>:
 8003de0:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop

08003de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003de8:	4808      	ldr	r0, [pc, #32]	@ (8003e0c <prvPortStartFirstTask+0x24>)
 8003dea:	6800      	ldr	r0, [r0, #0]
 8003dec:	6800      	ldr	r0, [r0, #0]
 8003dee:	f380 8808 	msr	MSP, r0
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f380 8814 	msr	CONTROL, r0
 8003dfa:	b662      	cpsie	i
 8003dfc:	b661      	cpsie	f
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	df00      	svc	0
 8003e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e0a:	bf00      	nop
 8003e0c:	e000ed08 	.word	0xe000ed08

08003e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e16:	4b37      	ldr	r3, [pc, #220]	@ (8003ef4 <xPortStartScheduler+0xe4>)
 8003e18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	22ff      	movs	r2, #255	@ 0xff
 8003e26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef8 <xPortStartScheduler+0xe8>)
 8003e3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8003efc <xPortStartScheduler+0xec>)
 8003e40:	2207      	movs	r2, #7
 8003e42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e44:	e009      	b.n	8003e5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003e46:	4b2d      	ldr	r3, [pc, #180]	@ (8003efc <xPortStartScheduler+0xec>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003efc <xPortStartScheduler+0xec>)
 8003e4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e62:	2b80      	cmp	r3, #128	@ 0x80
 8003e64:	d0ef      	beq.n	8003e46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e66:	4b25      	ldr	r3, [pc, #148]	@ (8003efc <xPortStartScheduler+0xec>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f1c3 0307 	rsb	r3, r3, #7
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d00d      	beq.n	8003e8e <xPortStartScheduler+0x7e>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e76:	b672      	cpsid	i
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	b662      	cpsie	i
 8003e86:	60bb      	str	r3, [r7, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	e7fd      	b.n	8003e8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8003efc <xPortStartScheduler+0xec>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	4a19      	ldr	r2, [pc, #100]	@ (8003efc <xPortStartScheduler+0xec>)
 8003e96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e98:	4b18      	ldr	r3, [pc, #96]	@ (8003efc <xPortStartScheduler+0xec>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ea0:	4a16      	ldr	r2, [pc, #88]	@ (8003efc <xPortStartScheduler+0xec>)
 8003ea2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003eac:	4b14      	ldr	r3, [pc, #80]	@ (8003f00 <xPortStartScheduler+0xf0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a13      	ldr	r2, [pc, #76]	@ (8003f00 <xPortStartScheduler+0xf0>)
 8003eb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003eb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003eb8:	4b11      	ldr	r3, [pc, #68]	@ (8003f00 <xPortStartScheduler+0xf0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a10      	ldr	r2, [pc, #64]	@ (8003f00 <xPortStartScheduler+0xf0>)
 8003ebe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003ec2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ec4:	f000 f8dc 	bl	8004080 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f04 <xPortStartScheduler+0xf4>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003ece:	f000 f8fb 	bl	80040c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f08 <xPortStartScheduler+0xf8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8003f08 <xPortStartScheduler+0xf8>)
 8003ed8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003edc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ede:	f7ff ff83 	bl	8003de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ee2:	f7ff f827 	bl	8002f34 <vTaskSwitchContext>
	prvTaskExitError();
 8003ee6:	f7ff ff33 	bl	8003d50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	e000e400 	.word	0xe000e400
 8003ef8:	20000e44 	.word	0x20000e44
 8003efc:	20000e48 	.word	0x20000e48
 8003f00:	e000ed20 	.word	0xe000ed20
 8003f04:	2000000c 	.word	0x2000000c
 8003f08:	e000ef34 	.word	0xe000ef34

08003f0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f16:	b672      	cpsid	i
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	b662      	cpsie	i
 8003f26:	607b      	str	r3, [r7, #4]
}
 8003f28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f2a:	4b11      	ldr	r3, [pc, #68]	@ (8003f70 <vPortEnterCritical+0x64>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	4a0f      	ldr	r2, [pc, #60]	@ (8003f70 <vPortEnterCritical+0x64>)
 8003f32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f34:	4b0e      	ldr	r3, [pc, #56]	@ (8003f70 <vPortEnterCritical+0x64>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d112      	bne.n	8003f62 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <vPortEnterCritical+0x68>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00d      	beq.n	8003f62 <vPortEnterCritical+0x56>
	__asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4a:	b672      	cpsid	i
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	b662      	cpsie	i
 8003f5a:	603b      	str	r3, [r7, #0]
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	e7fd      	b.n	8003f5e <vPortEnterCritical+0x52>
	}
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	2000000c 	.word	0x2000000c
 8003f74:	e000ed04 	.word	0xe000ed04

08003f78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f7e:	4b13      	ldr	r3, [pc, #76]	@ (8003fcc <vPortExitCritical+0x54>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10d      	bne.n	8003fa2 <vPortExitCritical+0x2a>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8a:	b672      	cpsid	i
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	b662      	cpsie	i
 8003f9a:	607b      	str	r3, [r7, #4]
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	e7fd      	b.n	8003f9e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8003fcc <vPortExitCritical+0x54>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	4a08      	ldr	r2, [pc, #32]	@ (8003fcc <vPortExitCritical+0x54>)
 8003faa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003fac:	4b07      	ldr	r3, [pc, #28]	@ (8003fcc <vPortExitCritical+0x54>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d105      	bne.n	8003fc0 <vPortExitCritical+0x48>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f383 8811 	msr	BASEPRI, r3
}
 8003fbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	2000000c 	.word	0x2000000c

08003fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003fd0:	f3ef 8009 	mrs	r0, PSP
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	4b15      	ldr	r3, [pc, #84]	@ (8004030 <pxCurrentTCBConst>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	f01e 0f10 	tst.w	lr, #16
 8003fe0:	bf08      	it	eq
 8003fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fea:	6010      	str	r0, [r2, #0]
 8003fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ff0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003ff4:	b672      	cpsid	i
 8003ff6:	f380 8811 	msr	BASEPRI, r0
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	b662      	cpsie	i
 8004004:	f7fe ff96 	bl	8002f34 <vTaskSwitchContext>
 8004008:	f04f 0000 	mov.w	r0, #0
 800400c:	f380 8811 	msr	BASEPRI, r0
 8004010:	bc09      	pop	{r0, r3}
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	6808      	ldr	r0, [r1, #0]
 8004016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401a:	f01e 0f10 	tst.w	lr, #16
 800401e:	bf08      	it	eq
 8004020:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004024:	f380 8809 	msr	PSP, r0
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop

08004030 <pxCurrentTCBConst>:
 8004030:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop

08004038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004042:	b672      	cpsid	i
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	b662      	cpsie	i
 8004052:	607b      	str	r3, [r7, #4]
}
 8004054:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004056:	f7fe feb1 	bl	8002dbc <xTaskIncrementTick>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004060:	4b06      	ldr	r3, [pc, #24]	@ (800407c <xPortSysTickHandler+0x44>)
 8004062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	2300      	movs	r3, #0
 800406a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	f383 8811 	msr	BASEPRI, r3
}
 8004072:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	e000ed04 	.word	0xe000ed04

08004080 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004084:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <vPortSetupTimerInterrupt+0x34>)
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800408a:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <vPortSetupTimerInterrupt+0x38>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004090:	4b0a      	ldr	r3, [pc, #40]	@ (80040bc <vPortSetupTimerInterrupt+0x3c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0a      	ldr	r2, [pc, #40]	@ (80040c0 <vPortSetupTimerInterrupt+0x40>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	099b      	lsrs	r3, r3, #6
 800409c:	4a09      	ldr	r2, [pc, #36]	@ (80040c4 <vPortSetupTimerInterrupt+0x44>)
 800409e:	3b01      	subs	r3, #1
 80040a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040a2:	4b04      	ldr	r3, [pc, #16]	@ (80040b4 <vPortSetupTimerInterrupt+0x34>)
 80040a4:	2207      	movs	r2, #7
 80040a6:	601a      	str	r2, [r3, #0]
}
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	e000e010 	.word	0xe000e010
 80040b8:	e000e018 	.word	0xe000e018
 80040bc:	20000000 	.word	0x20000000
 80040c0:	10624dd3 	.word	0x10624dd3
 80040c4:	e000e014 	.word	0xe000e014

080040c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80040c8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80040d8 <vPortEnableVFP+0x10>
 80040cc:	6801      	ldr	r1, [r0, #0]
 80040ce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80040d2:	6001      	str	r1, [r0, #0]
 80040d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80040d6:	bf00      	nop
 80040d8:	e000ed88 	.word	0xe000ed88

080040dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80040e2:	f3ef 8305 	mrs	r3, IPSR
 80040e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	d917      	bls.n	800411e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80040ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004158 <vPortValidateInterruptPriority+0x7c>)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80040f8:	4b18      	ldr	r3, [pc, #96]	@ (800415c <vPortValidateInterruptPriority+0x80>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	7afa      	ldrb	r2, [r7, #11]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d20d      	bcs.n	800411e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004106:	b672      	cpsid	i
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	b662      	cpsie	i
 8004116:	607b      	str	r3, [r7, #4]
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	e7fd      	b.n	800411a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800411e:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <vPortValidateInterruptPriority+0x84>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004126:	4b0f      	ldr	r3, [pc, #60]	@ (8004164 <vPortValidateInterruptPriority+0x88>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d90d      	bls.n	800414a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004132:	b672      	cpsid	i
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	b662      	cpsie	i
 8004142:	603b      	str	r3, [r7, #0]
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	e7fd      	b.n	8004146 <vPortValidateInterruptPriority+0x6a>
	}
 800414a:	bf00      	nop
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	e000e3f0 	.word	0xe000e3f0
 800415c:	20000e44 	.word	0x20000e44
 8004160:	e000ed0c 	.word	0xe000ed0c
 8004164:	20000e48 	.word	0x20000e48

08004168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	@ 0x28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004174:	f7fe fd64 	bl	8002c40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004178:	4b5d      	ldr	r3, [pc, #372]	@ (80042f0 <pvPortMalloc+0x188>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004180:	f000 f920 	bl	80043c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004184:	4b5b      	ldr	r3, [pc, #364]	@ (80042f4 <pvPortMalloc+0x18c>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4013      	ands	r3, r2
 800418c:	2b00      	cmp	r3, #0
 800418e:	f040 8094 	bne.w	80042ba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d020      	beq.n	80041da <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8004198:	2208      	movs	r2, #8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d017      	beq.n	80041da <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f023 0307 	bic.w	r3, r3, #7
 80041b0:	3308      	adds	r3, #8
 80041b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00d      	beq.n	80041da <pvPortMalloc+0x72>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c2:	b672      	cpsid	i
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	b662      	cpsie	i
 80041d2:	617b      	str	r3, [r7, #20]
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	e7fd      	b.n	80041d6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d06c      	beq.n	80042ba <pvPortMalloc+0x152>
 80041e0:	4b45      	ldr	r3, [pc, #276]	@ (80042f8 <pvPortMalloc+0x190>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d867      	bhi.n	80042ba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041ea:	4b44      	ldr	r3, [pc, #272]	@ (80042fc <pvPortMalloc+0x194>)
 80041ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041ee:	4b43      	ldr	r3, [pc, #268]	@ (80042fc <pvPortMalloc+0x194>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041f4:	e004      	b.n	8004200 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d903      	bls.n	8004212 <pvPortMalloc+0xaa>
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f1      	bne.n	80041f6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004212:	4b37      	ldr	r3, [pc, #220]	@ (80042f0 <pvPortMalloc+0x188>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004218:	429a      	cmp	r2, r3
 800421a:	d04e      	beq.n	80042ba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2208      	movs	r2, #8
 8004222:	4413      	add	r3, r2
 8004224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	1ad2      	subs	r2, r2, r3
 8004236:	2308      	movs	r3, #8
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	429a      	cmp	r2, r3
 800423c:	d922      	bls.n	8004284 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800423e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4413      	add	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00d      	beq.n	800426c <pvPortMalloc+0x104>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004254:	b672      	cpsid	i
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	b662      	cpsie	i
 8004264:	613b      	str	r3, [r7, #16]
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	1ad2      	subs	r2, r2, r3
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800427e:	69b8      	ldr	r0, [r7, #24]
 8004280:	f000 f902 	bl	8004488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004284:	4b1c      	ldr	r3, [pc, #112]	@ (80042f8 <pvPortMalloc+0x190>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	4a1a      	ldr	r2, [pc, #104]	@ (80042f8 <pvPortMalloc+0x190>)
 8004290:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004292:	4b19      	ldr	r3, [pc, #100]	@ (80042f8 <pvPortMalloc+0x190>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b1a      	ldr	r3, [pc, #104]	@ (8004300 <pvPortMalloc+0x198>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d203      	bcs.n	80042a6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800429e:	4b16      	ldr	r3, [pc, #88]	@ (80042f8 <pvPortMalloc+0x190>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a17      	ldr	r2, [pc, #92]	@ (8004300 <pvPortMalloc+0x198>)
 80042a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	4b12      	ldr	r3, [pc, #72]	@ (80042f4 <pvPortMalloc+0x18c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042ba:	f7fe fccf 	bl	8002c5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00d      	beq.n	80042e4 <pvPortMalloc+0x17c>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042cc:	b672      	cpsid	i
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	b662      	cpsie	i
 80042dc:	60fb      	str	r3, [r7, #12]
}
 80042de:	bf00      	nop
 80042e0:	bf00      	nop
 80042e2:	e7fd      	b.n	80042e0 <pvPortMalloc+0x178>
	return pvReturn;
 80042e4:	69fb      	ldr	r3, [r7, #28]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3728      	adds	r7, #40	@ 0x28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20004a54 	.word	0x20004a54
 80042f4:	20004a60 	.word	0x20004a60
 80042f8:	20004a58 	.word	0x20004a58
 80042fc:	20004a4c 	.word	0x20004a4c
 8004300:	20004a5c 	.word	0x20004a5c

08004304 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d04e      	beq.n	80043b4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004316:	2308      	movs	r3, #8
 8004318:	425b      	negs	r3, r3
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4413      	add	r3, r2
 800431e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	4b24      	ldr	r3, [pc, #144]	@ (80043bc <vPortFree+0xb8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10d      	bne.n	800434e <vPortFree+0x4a>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004336:	b672      	cpsid	i
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	b662      	cpsie	i
 8004346:	60fb      	str	r3, [r7, #12]
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	e7fd      	b.n	800434a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00d      	beq.n	8004372 <vPortFree+0x6e>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435a:	b672      	cpsid	i
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	b662      	cpsie	i
 800436a:	60bb      	str	r3, [r7, #8]
}
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	e7fd      	b.n	800436e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	4b11      	ldr	r3, [pc, #68]	@ (80043bc <vPortFree+0xb8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d019      	beq.n	80043b4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d115      	bne.n	80043b4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <vPortFree+0xb8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	43db      	mvns	r3, r3
 8004392:	401a      	ands	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004398:	f7fe fc52 	bl	8002c40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	4b07      	ldr	r3, [pc, #28]	@ (80043c0 <vPortFree+0xbc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4413      	add	r3, r2
 80043a6:	4a06      	ldr	r2, [pc, #24]	@ (80043c0 <vPortFree+0xbc>)
 80043a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043aa:	6938      	ldr	r0, [r7, #16]
 80043ac:	f000 f86c 	bl	8004488 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80043b0:	f7fe fc54 	bl	8002c5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043b4:	bf00      	nop
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20004a60 	.word	0x20004a60
 80043c0:	20004a58 	.word	0x20004a58

080043c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043ca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80043ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043d0:	4b27      	ldr	r3, [pc, #156]	@ (8004470 <prvHeapInit+0xac>)
 80043d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3307      	adds	r3, #7
 80043e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0307 	bic.w	r3, r3, #7
 80043ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004470 <prvHeapInit+0xac>)
 80043f4:	4413      	add	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004474 <prvHeapInit+0xb0>)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004402:	4b1c      	ldr	r3, [pc, #112]	@ (8004474 <prvHeapInit+0xb0>)
 8004404:	2200      	movs	r2, #0
 8004406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	4413      	add	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004410:	2208      	movs	r2, #8
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0307 	bic.w	r3, r3, #7
 800441e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a15      	ldr	r2, [pc, #84]	@ (8004478 <prvHeapInit+0xb4>)
 8004424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004426:	4b14      	ldr	r3, [pc, #80]	@ (8004478 <prvHeapInit+0xb4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2200      	movs	r2, #0
 800442c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800442e:	4b12      	ldr	r3, [pc, #72]	@ (8004478 <prvHeapInit+0xb4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	1ad2      	subs	r2, r2, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004444:	4b0c      	ldr	r3, [pc, #48]	@ (8004478 <prvHeapInit+0xb4>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4a0a      	ldr	r2, [pc, #40]	@ (800447c <prvHeapInit+0xb8>)
 8004452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4a09      	ldr	r2, [pc, #36]	@ (8004480 <prvHeapInit+0xbc>)
 800445a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800445c:	4b09      	ldr	r3, [pc, #36]	@ (8004484 <prvHeapInit+0xc0>)
 800445e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004462:	601a      	str	r2, [r3, #0]
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	20000e4c 	.word	0x20000e4c
 8004474:	20004a4c 	.word	0x20004a4c
 8004478:	20004a54 	.word	0x20004a54
 800447c:	20004a5c 	.word	0x20004a5c
 8004480:	20004a58 	.word	0x20004a58
 8004484:	20004a60 	.word	0x20004a60

08004488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004490:	4b28      	ldr	r3, [pc, #160]	@ (8004534 <prvInsertBlockIntoFreeList+0xac>)
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e002      	b.n	800449c <prvInsertBlockIntoFreeList+0x14>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d8f7      	bhi.n	8004496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	4413      	add	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d108      	bne.n	80044ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	441a      	add	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	441a      	add	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d118      	bne.n	8004510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b15      	ldr	r3, [pc, #84]	@ (8004538 <prvInsertBlockIntoFreeList+0xb0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d00d      	beq.n	8004506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	441a      	add	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e008      	b.n	8004518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004506:	4b0c      	ldr	r3, [pc, #48]	@ (8004538 <prvInsertBlockIntoFreeList+0xb0>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	e003      	b.n	8004518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	429a      	cmp	r2, r3
 800451e:	d002      	beq.n	8004526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	20004a4c 	.word	0x20004a4c
 8004538:	20004a54 	.word	0x20004a54

0800453c <memset>:
 800453c:	4402      	add	r2, r0
 800453e:	4603      	mov	r3, r0
 8004540:	4293      	cmp	r3, r2
 8004542:	d100      	bne.n	8004546 <memset+0xa>
 8004544:	4770      	bx	lr
 8004546:	f803 1b01 	strb.w	r1, [r3], #1
 800454a:	e7f9      	b.n	8004540 <memset+0x4>

0800454c <_reclaim_reent>:
 800454c:	4b29      	ldr	r3, [pc, #164]	@ (80045f4 <_reclaim_reent+0xa8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4283      	cmp	r3, r0
 8004552:	b570      	push	{r4, r5, r6, lr}
 8004554:	4604      	mov	r4, r0
 8004556:	d04b      	beq.n	80045f0 <_reclaim_reent+0xa4>
 8004558:	69c3      	ldr	r3, [r0, #28]
 800455a:	b1ab      	cbz	r3, 8004588 <_reclaim_reent+0x3c>
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	b16b      	cbz	r3, 800457c <_reclaim_reent+0x30>
 8004560:	2500      	movs	r5, #0
 8004562:	69e3      	ldr	r3, [r4, #28]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	5959      	ldr	r1, [r3, r5]
 8004568:	2900      	cmp	r1, #0
 800456a:	d13b      	bne.n	80045e4 <_reclaim_reent+0x98>
 800456c:	3504      	adds	r5, #4
 800456e:	2d80      	cmp	r5, #128	@ 0x80
 8004570:	d1f7      	bne.n	8004562 <_reclaim_reent+0x16>
 8004572:	69e3      	ldr	r3, [r4, #28]
 8004574:	4620      	mov	r0, r4
 8004576:	68d9      	ldr	r1, [r3, #12]
 8004578:	f000 f872 	bl	8004660 <_free_r>
 800457c:	69e3      	ldr	r3, [r4, #28]
 800457e:	6819      	ldr	r1, [r3, #0]
 8004580:	b111      	cbz	r1, 8004588 <_reclaim_reent+0x3c>
 8004582:	4620      	mov	r0, r4
 8004584:	f000 f86c 	bl	8004660 <_free_r>
 8004588:	6961      	ldr	r1, [r4, #20]
 800458a:	b111      	cbz	r1, 8004592 <_reclaim_reent+0x46>
 800458c:	4620      	mov	r0, r4
 800458e:	f000 f867 	bl	8004660 <_free_r>
 8004592:	69e1      	ldr	r1, [r4, #28]
 8004594:	b111      	cbz	r1, 800459c <_reclaim_reent+0x50>
 8004596:	4620      	mov	r0, r4
 8004598:	f000 f862 	bl	8004660 <_free_r>
 800459c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800459e:	b111      	cbz	r1, 80045a6 <_reclaim_reent+0x5a>
 80045a0:	4620      	mov	r0, r4
 80045a2:	f000 f85d 	bl	8004660 <_free_r>
 80045a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045a8:	b111      	cbz	r1, 80045b0 <_reclaim_reent+0x64>
 80045aa:	4620      	mov	r0, r4
 80045ac:	f000 f858 	bl	8004660 <_free_r>
 80045b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80045b2:	b111      	cbz	r1, 80045ba <_reclaim_reent+0x6e>
 80045b4:	4620      	mov	r0, r4
 80045b6:	f000 f853 	bl	8004660 <_free_r>
 80045ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80045bc:	b111      	cbz	r1, 80045c4 <_reclaim_reent+0x78>
 80045be:	4620      	mov	r0, r4
 80045c0:	f000 f84e 	bl	8004660 <_free_r>
 80045c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80045c6:	b111      	cbz	r1, 80045ce <_reclaim_reent+0x82>
 80045c8:	4620      	mov	r0, r4
 80045ca:	f000 f849 	bl	8004660 <_free_r>
 80045ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80045d0:	b111      	cbz	r1, 80045d8 <_reclaim_reent+0x8c>
 80045d2:	4620      	mov	r0, r4
 80045d4:	f000 f844 	bl	8004660 <_free_r>
 80045d8:	6a23      	ldr	r3, [r4, #32]
 80045da:	b14b      	cbz	r3, 80045f0 <_reclaim_reent+0xa4>
 80045dc:	4620      	mov	r0, r4
 80045de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80045e2:	4718      	bx	r3
 80045e4:	680e      	ldr	r6, [r1, #0]
 80045e6:	4620      	mov	r0, r4
 80045e8:	f000 f83a 	bl	8004660 <_free_r>
 80045ec:	4631      	mov	r1, r6
 80045ee:	e7bb      	b.n	8004568 <_reclaim_reent+0x1c>
 80045f0:	bd70      	pop	{r4, r5, r6, pc}
 80045f2:	bf00      	nop
 80045f4:	20000010 	.word	0x20000010

080045f8 <__libc_init_array>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004630 <__libc_init_array+0x38>)
 80045fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004634 <__libc_init_array+0x3c>)
 80045fe:	1b64      	subs	r4, r4, r5
 8004600:	10a4      	asrs	r4, r4, #2
 8004602:	2600      	movs	r6, #0
 8004604:	42a6      	cmp	r6, r4
 8004606:	d109      	bne.n	800461c <__libc_init_array+0x24>
 8004608:	4d0b      	ldr	r5, [pc, #44]	@ (8004638 <__libc_init_array+0x40>)
 800460a:	4c0c      	ldr	r4, [pc, #48]	@ (800463c <__libc_init_array+0x44>)
 800460c:	f000 f87e 	bl	800470c <_init>
 8004610:	1b64      	subs	r4, r4, r5
 8004612:	10a4      	asrs	r4, r4, #2
 8004614:	2600      	movs	r6, #0
 8004616:	42a6      	cmp	r6, r4
 8004618:	d105      	bne.n	8004626 <__libc_init_array+0x2e>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004620:	4798      	blx	r3
 8004622:	3601      	adds	r6, #1
 8004624:	e7ee      	b.n	8004604 <__libc_init_array+0xc>
 8004626:	f855 3b04 	ldr.w	r3, [r5], #4
 800462a:	4798      	blx	r3
 800462c:	3601      	adds	r6, #1
 800462e:	e7f2      	b.n	8004616 <__libc_init_array+0x1e>
 8004630:	08004784 	.word	0x08004784
 8004634:	08004784 	.word	0x08004784
 8004638:	08004784 	.word	0x08004784
 800463c:	08004788 	.word	0x08004788

08004640 <__retarget_lock_acquire_recursive>:
 8004640:	4770      	bx	lr

08004642 <__retarget_lock_release_recursive>:
 8004642:	4770      	bx	lr

08004644 <memcpy>:
 8004644:	440a      	add	r2, r1
 8004646:	4291      	cmp	r1, r2
 8004648:	f100 33ff 	add.w	r3, r0, #4294967295
 800464c:	d100      	bne.n	8004650 <memcpy+0xc>
 800464e:	4770      	bx	lr
 8004650:	b510      	push	{r4, lr}
 8004652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800465a:	4291      	cmp	r1, r2
 800465c:	d1f9      	bne.n	8004652 <memcpy+0xe>
 800465e:	bd10      	pop	{r4, pc}

08004660 <_free_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4605      	mov	r5, r0
 8004664:	2900      	cmp	r1, #0
 8004666:	d041      	beq.n	80046ec <_free_r+0x8c>
 8004668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800466c:	1f0c      	subs	r4, r1, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	bfb8      	it	lt
 8004672:	18e4      	addlt	r4, r4, r3
 8004674:	f000 f83e 	bl	80046f4 <__malloc_lock>
 8004678:	4a1d      	ldr	r2, [pc, #116]	@ (80046f0 <_free_r+0x90>)
 800467a:	6813      	ldr	r3, [r2, #0]
 800467c:	b933      	cbnz	r3, 800468c <_free_r+0x2c>
 800467e:	6063      	str	r3, [r4, #4]
 8004680:	6014      	str	r4, [r2, #0]
 8004682:	4628      	mov	r0, r5
 8004684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004688:	f000 b83a 	b.w	8004700 <__malloc_unlock>
 800468c:	42a3      	cmp	r3, r4
 800468e:	d908      	bls.n	80046a2 <_free_r+0x42>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	1821      	adds	r1, r4, r0
 8004694:	428b      	cmp	r3, r1
 8004696:	bf01      	itttt	eq
 8004698:	6819      	ldreq	r1, [r3, #0]
 800469a:	685b      	ldreq	r3, [r3, #4]
 800469c:	1809      	addeq	r1, r1, r0
 800469e:	6021      	streq	r1, [r4, #0]
 80046a0:	e7ed      	b.n	800467e <_free_r+0x1e>
 80046a2:	461a      	mov	r2, r3
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	b10b      	cbz	r3, 80046ac <_free_r+0x4c>
 80046a8:	42a3      	cmp	r3, r4
 80046aa:	d9fa      	bls.n	80046a2 <_free_r+0x42>
 80046ac:	6811      	ldr	r1, [r2, #0]
 80046ae:	1850      	adds	r0, r2, r1
 80046b0:	42a0      	cmp	r0, r4
 80046b2:	d10b      	bne.n	80046cc <_free_r+0x6c>
 80046b4:	6820      	ldr	r0, [r4, #0]
 80046b6:	4401      	add	r1, r0
 80046b8:	1850      	adds	r0, r2, r1
 80046ba:	4283      	cmp	r3, r0
 80046bc:	6011      	str	r1, [r2, #0]
 80046be:	d1e0      	bne.n	8004682 <_free_r+0x22>
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	6053      	str	r3, [r2, #4]
 80046c6:	4408      	add	r0, r1
 80046c8:	6010      	str	r0, [r2, #0]
 80046ca:	e7da      	b.n	8004682 <_free_r+0x22>
 80046cc:	d902      	bls.n	80046d4 <_free_r+0x74>
 80046ce:	230c      	movs	r3, #12
 80046d0:	602b      	str	r3, [r5, #0]
 80046d2:	e7d6      	b.n	8004682 <_free_r+0x22>
 80046d4:	6820      	ldr	r0, [r4, #0]
 80046d6:	1821      	adds	r1, r4, r0
 80046d8:	428b      	cmp	r3, r1
 80046da:	bf04      	itt	eq
 80046dc:	6819      	ldreq	r1, [r3, #0]
 80046de:	685b      	ldreq	r3, [r3, #4]
 80046e0:	6063      	str	r3, [r4, #4]
 80046e2:	bf04      	itt	eq
 80046e4:	1809      	addeq	r1, r1, r0
 80046e6:	6021      	streq	r1, [r4, #0]
 80046e8:	6054      	str	r4, [r2, #4]
 80046ea:	e7ca      	b.n	8004682 <_free_r+0x22>
 80046ec:	bd38      	pop	{r3, r4, r5, pc}
 80046ee:	bf00      	nop
 80046f0:	20004ba0 	.word	0x20004ba0

080046f4 <__malloc_lock>:
 80046f4:	4801      	ldr	r0, [pc, #4]	@ (80046fc <__malloc_lock+0x8>)
 80046f6:	f7ff bfa3 	b.w	8004640 <__retarget_lock_acquire_recursive>
 80046fa:	bf00      	nop
 80046fc:	20004b9c 	.word	0x20004b9c

08004700 <__malloc_unlock>:
 8004700:	4801      	ldr	r0, [pc, #4]	@ (8004708 <__malloc_unlock+0x8>)
 8004702:	f7ff bf9e 	b.w	8004642 <__retarget_lock_release_recursive>
 8004706:	bf00      	nop
 8004708:	20004b9c 	.word	0x20004b9c

0800470c <_init>:
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	bf00      	nop
 8004710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004712:	bc08      	pop	{r3}
 8004714:	469e      	mov	lr, r3
 8004716:	4770      	bx	lr

08004718 <_fini>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	bf00      	nop
 800471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471e:	bc08      	pop	{r3}
 8004720:	469e      	mov	lr, r3
 8004722:	4770      	bx	lr
