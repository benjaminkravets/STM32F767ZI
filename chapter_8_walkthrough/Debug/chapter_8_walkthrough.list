
chapter_8_walkthrough.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068f8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b58  08006b58  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08006b58  08006b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b60  08006b60  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b60  08006b60  00016b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b64  08006b64  00016b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  08006b78  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  08006c18  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004ff0  20000150  08006cb8  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005140  08006cb8  00025140  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c60d  00000000  00000000  0002017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000377e  00000000  00000000  0003c78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001488  00000000  00000000  0003ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001340  00000000  00000000  00041398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003ede  00000000  00000000  000426d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017804  00000000  00000000  000465b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001035e8  00000000  00000000  0005ddba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001613a2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005604  00000000  00000000  001613f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	08006ae0 	.word	0x08006ae0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	08006ae0 	.word	0x08006ae0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fc27 	bl	8000d9a <HAL_Init>

  /* USER CODE BEGIN Init */

  //create a semaphore using the FreeRTOS Heap
  semPtr = xSemaphoreCreateBinary();
 800054c:	2203      	movs	r2, #3
 800054e:	2100      	movs	r1, #0
 8000550:	2001      	movs	r0, #1
 8000552:	f003 ff8f 	bl	8004474 <xQueueGenericCreate>
 8000556:	4603      	mov	r3, r0
 8000558:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <main+0x54>)
 800055a:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(semPtr);
 800055c:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <main+0x54>)
 800055e:	6818      	ldr	r0, [r3, #0]
 8000560:	2300      	movs	r3, #0
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	f003 ffeb 	bl	8004540 <xQueueGenericSend>
  //assert_param(semPtr != NULL);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f81d 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f939 	bl	80007e4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000572:	f000 f88b 	bl	800068c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000576:	f000 f8d7 	bl	8000728 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800057a:	f000 f905 	bl	8000788 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800057e:	f003 fc67 	bl	8003e50 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000582:	4a06      	ldr	r2, [pc, #24]	; (800059c <main+0x58>)
 8000584:	2100      	movs	r1, #0
 8000586:	4806      	ldr	r0, [pc, #24]	; (80005a0 <main+0x5c>)
 8000588:	f003 fccc 	bl	8003f24 <osThreadNew>
 800058c:	4603      	mov	r3, r0
 800058e:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <main+0x60>)
 8000590:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000592:	f003 fc91 	bl	8003eb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000596:	e7fe      	b.n	8000596 <main+0x52>
 8000598:	200007e8 	.word	0x200007e8
 800059c:	08006b1c 	.word	0x08006b1c
 80005a0:	08000929 	.word	0x08000929
 80005a4:	200007e4 	.word	0x200007e4

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2234      	movs	r2, #52	; 0x34
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f006 fa8a 	bl	8006ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005cc:	f001 fb80 	bl	8001cd0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <SystemClock_Config+0xdc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a2b      	ldr	r2, [pc, #172]	; (8000684 <SystemClock_Config+0xdc>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b29      	ldr	r3, [pc, #164]	; (8000684 <SystemClock_Config+0xdc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <SystemClock_Config+0xe0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f0:	4a25      	ldr	r2, [pc, #148]	; (8000688 <SystemClock_Config+0xe0>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b23      	ldr	r3, [pc, #140]	; (8000688 <SystemClock_Config+0xe0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000608:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800060c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800061c:	2360      	movs	r3, #96	; 0x60
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4618      	mov	r0, r3
 8000632:	f001 fbad 	bl	8001d90 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800063c:	f000 f98e 	bl	800095c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000640:	f001 fb56 	bl	8001cf0 <HAL_PWREx_EnableOverDrive>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800064a:	f000 f987 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2302      	movs	r3, #2
 8000654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2103      	movs	r1, #3
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fe3e 	bl	80022ec <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000676:	f000 f971 	bl	800095c <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	; 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_ETH_Init+0x84>)
 8000692:	4a20      	ldr	r2, [pc, #128]	; (8000714 <MX_ETH_Init+0x88>)
 8000694:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <MX_ETH_Init+0x8c>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_ETH_Init+0x8c>)
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <MX_ETH_Init+0x8c>)
 80006a4:	22e1      	movs	r2, #225	; 0xe1
 80006a6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_ETH_Init+0x8c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_ETH_Init+0x8c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_ETH_Init+0x8c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_ETH_Init+0x84>)
 80006bc:	4a16      	ldr	r2, [pc, #88]	; (8000718 <MX_ETH_Init+0x8c>)
 80006be:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_ETH_Init+0x84>)
 80006c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006c6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_ETH_Init+0x84>)
 80006ca:	4a14      	ldr	r2, [pc, #80]	; (800071c <MX_ETH_Init+0x90>)
 80006cc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_ETH_Init+0x84>)
 80006d0:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_ETH_Init+0x94>)
 80006d2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_ETH_Init+0x84>)
 80006d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006da:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006dc:	480c      	ldr	r0, [pc, #48]	; (8000710 <MX_ETH_Init+0x84>)
 80006de:	f000 fcc3 	bl	8001068 <HAL_ETH_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006e8:	f000 f938 	bl	800095c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006ec:	2238      	movs	r2, #56	; 0x38
 80006ee:	2100      	movs	r1, #0
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <MX_ETH_Init+0x98>)
 80006f2:	f006 f9ed 	bl	8006ad0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_ETH_Init+0x98>)
 80006f8:	2221      	movs	r2, #33	; 0x21
 80006fa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_ETH_Init+0x98>)
 80006fe:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000702:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_ETH_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200001a4 	.word	0x200001a4
 8000714:	40028000 	.word	0x40028000
 8000718:	200007ec 	.word	0x200007ec
 800071c:	200000b0 	.word	0x200000b0
 8000720:	20000010 	.word	0x20000010
 8000724:	2000016c 	.word	0x2000016c

08000728 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_USART3_UART_Init+0x58>)
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <MX_USART3_UART_Init+0x5c>)
 8000730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_USART3_UART_Init+0x58>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART3_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_USART3_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART3_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART3_UART_Init+0x58>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART3_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART3_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART3_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART3_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART3_UART_Init+0x58>)
 800076c:	f002 fc0c 	bl	8002f88 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 f8f1 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000254 	.word	0x20000254
 8000784:	40004800 	.word	0x40004800

08000788 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000792:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2206      	movs	r2, #6
 8000798:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	2202      	movs	r2, #2
 800079e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2202      	movs	r2, #2
 80007aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007cc:	f001 f937 	bl	8001a3e <HAL_PCD_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 f8c1 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200002dc 	.word	0x200002dc

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b47      	ldr	r3, [pc, #284]	; (8000918 <MX_GPIO_Init+0x134>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a46      	ldr	r2, [pc, #280]	; (8000918 <MX_GPIO_Init+0x134>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b44      	ldr	r3, [pc, #272]	; (8000918 <MX_GPIO_Init+0x134>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	4b41      	ldr	r3, [pc, #260]	; (8000918 <MX_GPIO_Init+0x134>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a40      	ldr	r2, [pc, #256]	; (8000918 <MX_GPIO_Init+0x134>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <MX_GPIO_Init+0x134>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b3b      	ldr	r3, [pc, #236]	; (8000918 <MX_GPIO_Init+0x134>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a3a      	ldr	r2, [pc, #232]	; (8000918 <MX_GPIO_Init+0x134>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b38      	ldr	r3, [pc, #224]	; (8000918 <MX_GPIO_Init+0x134>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b35      	ldr	r3, [pc, #212]	; (8000918 <MX_GPIO_Init+0x134>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a34      	ldr	r2, [pc, #208]	; (8000918 <MX_GPIO_Init+0x134>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b32      	ldr	r3, [pc, #200]	; (8000918 <MX_GPIO_Init+0x134>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <MX_GPIO_Init+0x134>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a2e      	ldr	r2, [pc, #184]	; (8000918 <MX_GPIO_Init+0x134>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <MX_GPIO_Init+0x134>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <MX_GPIO_Init+0x134>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a28      	ldr	r2, [pc, #160]	; (8000918 <MX_GPIO_Init+0x134>)
 8000878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <MX_GPIO_Init+0x134>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000890:	4822      	ldr	r0, [pc, #136]	; (800091c <MX_GPIO_Init+0x138>)
 8000892:	f001 f8bb 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2140      	movs	r1, #64	; 0x40
 800089a:	4821      	ldr	r0, [pc, #132]	; (8000920 <MX_GPIO_Init+0x13c>)
 800089c:	f001 f8b6 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	481b      	ldr	r0, [pc, #108]	; (8000924 <MX_GPIO_Init+0x140>)
 80008b8:	f000 fefc 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4811      	ldr	r0, [pc, #68]	; (800091c <MX_GPIO_Init+0x138>)
 80008d6:	f000 feed 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_GPIO_Init+0x13c>)
 80008f2:	f000 fedf 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_GPIO_Init+0x13c>)
 800090a:	f000 fed3 	bl	80016b4 <HAL_GPIO_Init>

}
 800090e:	bf00      	nop
 8000910:	3730      	adds	r7, #48	; 0x30
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40020400 	.word	0x40020400
 8000920:	40021800 	.word	0x40021800
 8000924:	40020800 	.word	0x40020800

08000928 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	4808      	ldr	r0, [pc, #32]	; (8000958 <StartDefaultTask+0x30>)
 8000936:	f001 f869 	bl	8001a0c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800093a:	2064      	movs	r0, #100	; 0x64
 800093c:	f000 fa8a 	bl	8000e54 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <StartDefaultTask+0x30>)
 8000946:	f001 f861 	bl	8001a0c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800094a:	2064      	movs	r0, #100	; 0x64
 800094c:	f000 fa82 	bl	8000e54 <HAL_Delay>

    osDelay(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f003 fb8d 	bl	8004070 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000956:	e7eb      	b.n	8000930 <StartDefaultTask+0x8>
 8000958:	40020400 	.word	0x40020400

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <HAL_MspInit+0x4c>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000990:	6453      	str	r3, [r2, #68]	; 0x44
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	210f      	movs	r1, #15
 80009a2:	f06f 0001 	mvn.w	r0, #1
 80009a6:	f000 fb36 	bl	8001016 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	; 0x38
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a4e      	ldr	r2, [pc, #312]	; (8000b10 <HAL_ETH_MspInit+0x158>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	f040 8096 	bne.w	8000b08 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009dc:	4b4d      	ldr	r3, [pc, #308]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	4a4c      	ldr	r2, [pc, #304]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 80009e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009e6:	6313      	str	r3, [r2, #48]	; 0x30
 80009e8:	4b4a      	ldr	r3, [pc, #296]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009f0:	623b      	str	r3, [r7, #32]
 80009f2:	6a3b      	ldr	r3, [r7, #32]
 80009f4:	4b47      	ldr	r3, [pc, #284]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	4a46      	ldr	r2, [pc, #280]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 80009fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000a00:	4b44      	ldr	r3, [pc, #272]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	4b41      	ldr	r3, [pc, #260]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	4a40      	ldr	r2, [pc, #256]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a16:	6313      	str	r3, [r2, #48]	; 0x30
 8000a18:	4b3e      	ldr	r3, [pc, #248]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a24:	4b3b      	ldr	r3, [pc, #236]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	4a3a      	ldr	r2, [pc, #232]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a2a:	f043 0304 	orr.w	r3, r3, #4
 8000a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a30:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	4a34      	ldr	r2, [pc, #208]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6313      	str	r3, [r2, #48]	; 0x30
 8000a48:	4b32      	ldr	r3, [pc, #200]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4a2e      	ldr	r2, [pc, #184]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a5a:	f043 0302 	orr.w	r3, r3, #2
 8000a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a60:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6c:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	4a28      	ldr	r2, [pc, #160]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a76:	6313      	str	r3, [r2, #48]	; 0x30
 8000a78:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <HAL_ETH_MspInit+0x15c>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a84:	2332      	movs	r3, #50	; 0x32
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a94:	230b      	movs	r3, #11
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481e      	ldr	r0, [pc, #120]	; (8000b18 <HAL_ETH_MspInit+0x160>)
 8000aa0:	f000 fe08 	bl	80016b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000aa4:	2386      	movs	r3, #134	; 0x86
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ab4:	230b      	movs	r3, #11
 8000ab6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	4817      	ldr	r0, [pc, #92]	; (8000b1c <HAL_ETH_MspInit+0x164>)
 8000ac0:	f000 fdf8 	bl	80016b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad6:	230b      	movs	r3, #11
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480f      	ldr	r0, [pc, #60]	; (8000b20 <HAL_ETH_MspInit+0x168>)
 8000ae2:	f000 fde7 	bl	80016b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ae6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af8:	230b      	movs	r3, #11
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4808      	ldr	r0, [pc, #32]	; (8000b24 <HAL_ETH_MspInit+0x16c>)
 8000b04:	f000 fdd6 	bl	80016b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	3738      	adds	r7, #56	; 0x38
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40028000 	.word	0x40028000
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	40020400 	.word	0x40020400
 8000b24:	40021800 	.word	0x40021800

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b0ae      	sub	sp, #184	; 0xb8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2290      	movs	r2, #144	; 0x90
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f005 ffc1 	bl	8006ad0 <memset>
  if(huart->Instance==USART3)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <HAL_UART_MspInit+0xb4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d13c      	bne.n	8000bd2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 fde6 	bl	8002738 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b72:	f7ff fef3 	bl	800095c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <HAL_UART_MspInit+0xbc>)
 8000bce:	f000 fd71 	bl	80016b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	37b8      	adds	r7, #184	; 0xb8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40004800 	.word	0x40004800
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020c00 	.word	0x40020c00

08000be8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0ae      	sub	sp, #184	; 0xb8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2290      	movs	r2, #144	; 0x90
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f005 ff61 	bl	8006ad0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c16:	d159      	bne.n	8000ccc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fd85 	bl	8002738 <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c34:	f7ff fe92 	bl	800095c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_PCD_MspInit+0xec>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a25      	ldr	r2, [pc, #148]	; (8000cd4 <HAL_PCD_MspInit+0xec>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <HAL_PCD_MspInit+0xec>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c50:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c6a:	230a      	movs	r3, #10
 8000c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c74:	4619      	mov	r1, r3
 8000c76:	4818      	ldr	r0, [pc, #96]	; (8000cd8 <HAL_PCD_MspInit+0xf0>)
 8000c78:	f000 fd1c 	bl	80016b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4810      	ldr	r0, [pc, #64]	; (8000cd8 <HAL_PCD_MspInit+0xf0>)
 8000c98:	f000 fd0c 	bl	80016b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_PCD_MspInit+0xec>)
 8000c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca0:	4a0c      	ldr	r2, [pc, #48]	; (8000cd4 <HAL_PCD_MspInit+0xec>)
 8000ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca6:	6353      	str	r3, [r2, #52]	; 0x34
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_PCD_MspInit+0xec>)
 8000caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <HAL_PCD_MspInit+0xec>)
 8000cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_PCD_MspInit+0xec>)
 8000cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbe:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <HAL_PCD_MspInit+0xec>)
 8000cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	37b8      	adds	r7, #184	; 0xb8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f882 	bl	8000e14 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d10:	f004 fe4e 	bl	80059b0 <xTaskGetSchedulerState>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d001      	beq.n	8000d1e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d1a:	f005 fc2d 	bl	8006578 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <SystemInit+0x20>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <SystemInit+0x20>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d4e:	490e      	ldr	r1, [pc, #56]	; (8000d88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d50:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d64:	4c0b      	ldr	r4, [pc, #44]	; (8000d94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d72:	f7ff ffd7 	bl	8000d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d76:	f005 fe79 	bl	8006a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7a:	f7ff fbe3 	bl	8000544 <main>
  bx  lr    
 8000d7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d80:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d8c:	08006b68 	.word	0x08006b68
  ldr r2, =_sbss
 8000d90:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000d94:	20005140 	.word	0x20005140

08000d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC_IRQHandler>

08000d9a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f000 f92e 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da4:	200f      	movs	r0, #15
 8000da6:	f000 f805 	bl	8000db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000daa:	f7ff fddd 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x54>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x58>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f93b 	bl	800104e <HAL_SYSTICK_Config>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00e      	b.n	8000e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d80a      	bhi.n	8000dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f000 f911 	bl	8001016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <HAL_InitTick+0x5c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e000      	b.n	8000e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008
 8000e38:	200007f4 	.word	0x200007f4

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	200007f4 	.word	0x200007f4

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff ffee 	bl	8000e3c <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_Delay+0x44>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7a:	bf00      	nop
 8000e7c:	f7ff ffde 	bl	8000e3c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <__NVIC_SetPriorityGrouping+0x40>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <__NVIC_SetPriorityGrouping+0x40>)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	60d3      	str	r3, [r2, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00
 8000ee0:	05fa0000 	.word	0x05fa0000

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f7ff ff8e 	bl	8000f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff47 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff5c 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff8e 	bl	8000f54 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5d 	bl	8000f00 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffb0 	bl	8000fbc <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e06a      	b.n	8001150 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001080:	2b00      	cmp	r3, #0
 8001082:	d106      	bne.n	8001092 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2223      	movs	r2, #35	; 0x23
 8001088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fc93 	bl	80009b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	4b31      	ldr	r3, [pc, #196]	; (8001158 <HAL_ETH_Init+0xf0>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a30      	ldr	r2, [pc, #192]	; (8001158 <HAL_ETH_Init+0xf0>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b2e      	ldr	r3, [pc, #184]	; (8001158 <HAL_ETH_Init+0xf0>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <HAL_ETH_Init+0xf4>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4a2b      	ldr	r2, [pc, #172]	; (800115c <HAL_ETH_Init+0xf4>)
 80010b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80010b4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <HAL_ETH_Init+0xf4>)
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	4927      	ldr	r1, [pc, #156]	; (800115c <HAL_ETH_Init+0xf4>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <HAL_ETH_Init+0xf4>)
 80010c6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80010de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e0:	f7ff feac 	bl	8000e3c <HAL_GetTick>
 80010e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010e6:	e011      	b.n	800110c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80010e8:	f7ff fea8 	bl	8000e3c <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010f6:	d909      	bls.n	800110c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2204      	movs	r2, #4
 80010fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	22e0      	movs	r2, #224	; 0xe0
 8001104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e021      	b.n	8001150 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1e4      	bne.n	80010e8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f958 	bl	80013d4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f9ff 	bl	8001528 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fa55 	bl	80015da <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	461a      	mov	r2, r3
 8001136:	2100      	movs	r1, #0
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f9bd 	bl	80014b8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2210      	movs	r2, #16
 800114a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40023800 	.word	0x40023800
 800115c:	40013800 	.word	0x40013800

08001160 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	4b51      	ldr	r3, [pc, #324]	; (80012bc <ETH_SetMACConfig+0x15c>)
 8001176:	4013      	ands	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	7c1b      	ldrb	r3, [r3, #16]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <ETH_SetMACConfig+0x28>
 8001182:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001186:	e000      	b.n	800118a <ETH_SetMACConfig+0x2a>
 8001188:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	7c5b      	ldrb	r3, [r3, #17]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <ETH_SetMACConfig+0x38>
 8001192:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001196:	e000      	b.n	800119a <ETH_SetMACConfig+0x3a>
 8001198:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800119a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80011a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	7fdb      	ldrb	r3, [r3, #31]
 80011a6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80011a8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80011ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	7f92      	ldrb	r2, [r2, #30]
 80011b4:	2a00      	cmp	r2, #0
 80011b6:	d102      	bne.n	80011be <ETH_SetMACConfig+0x5e>
 80011b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011bc:	e000      	b.n	80011c0 <ETH_SetMACConfig+0x60>
 80011be:	2200      	movs	r2, #0
                        macconf->Speed |
 80011c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	7f1b      	ldrb	r3, [r3, #28]
 80011c6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80011c8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80011ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	791b      	ldrb	r3, [r3, #4]
 80011d4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80011d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	f892 2020 	ldrb.w	r2, [r2, #32]
 80011de:	2a00      	cmp	r2, #0
 80011e0:	d102      	bne.n	80011e8 <ETH_SetMACConfig+0x88>
 80011e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e6:	e000      	b.n	80011ea <ETH_SetMACConfig+0x8a>
 80011e8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80011ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	7bdb      	ldrb	r3, [r3, #15]
 80011f0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80011f2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80011f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001200:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001202:	4313      	orrs	r3, r2
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800121a:	2001      	movs	r0, #1
 800121c:	f7ff fe1a 	bl	8000e54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001236:	4013      	ands	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800123e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001246:	2a00      	cmp	r2, #0
 8001248:	d101      	bne.n	800124e <ETH_SetMACConfig+0xee>
 800124a:	2280      	movs	r2, #128	; 0x80
 800124c:	e000      	b.n	8001250 <ETH_SetMACConfig+0xf0>
 800124e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001250:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001256:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800125e:	2a01      	cmp	r2, #1
 8001260:	d101      	bne.n	8001266 <ETH_SetMACConfig+0x106>
 8001262:	2208      	movs	r2, #8
 8001264:	e000      	b.n	8001268 <ETH_SetMACConfig+0x108>
 8001266:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001268:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001270:	2a01      	cmp	r2, #1
 8001272:	d101      	bne.n	8001278 <ETH_SetMACConfig+0x118>
 8001274:	2204      	movs	r2, #4
 8001276:	e000      	b.n	800127a <ETH_SetMACConfig+0x11a>
 8001278:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800127a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001282:	2a01      	cmp	r2, #1
 8001284:	d101      	bne.n	800128a <ETH_SetMACConfig+0x12a>
 8001286:	2202      	movs	r2, #2
 8001288:	e000      	b.n	800128c <ETH_SetMACConfig+0x12c>
 800128a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800128c:	4313      	orrs	r3, r2
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff fdd5 	bl	8000e54 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	619a      	str	r2, [r3, #24]
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	ff20810f 	.word	0xff20810f

080012c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4b3d      	ldr	r3, [pc, #244]	; (80013d0 <ETH_SetDMAConfig+0x110>)
 80012da:	4013      	ands	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	7b1b      	ldrb	r3, [r3, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <ETH_SetDMAConfig+0x2c>
 80012e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012ea:	e000      	b.n	80012ee <ETH_SetDMAConfig+0x2e>
 80012ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	7b5b      	ldrb	r3, [r3, #13]
 80012f2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012f4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	7f52      	ldrb	r2, [r2, #29]
 80012fa:	2a00      	cmp	r2, #0
 80012fc:	d102      	bne.n	8001304 <ETH_SetDMAConfig+0x44>
 80012fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001302:	e000      	b.n	8001306 <ETH_SetDMAConfig+0x46>
 8001304:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001306:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	7b9b      	ldrb	r3, [r3, #14]
 800130c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800130e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001314:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	7f1b      	ldrb	r3, [r3, #28]
 800131a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800131c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	7f9b      	ldrb	r3, [r3, #30]
 8001322:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001324:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800132a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001332:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001334:	4313      	orrs	r3, r2
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	4313      	orrs	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001344:	461a      	mov	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001356:	2001      	movs	r0, #1
 8001358:	f7ff fd7c 	bl	8000e54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001364:	461a      	mov	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001374:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800137a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001380:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001388:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800138a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001392:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001398:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013a6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff fd4d 	bl	8000e54 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	f8de3f23 	.word	0xf8de3f23

080013d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0a6      	sub	sp, #152	; 0x98
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80013dc:	2301      	movs	r3, #1
 80013de:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80013f2:	2301      	movs	r3, #1
 80013f4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80013fe:	2301      	movs	r3, #1
 8001400:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001410:	2300      	movs	r3, #0
 8001412:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800141a:	2300      	movs	r3, #0
 800141c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001436:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800143a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800143c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001440:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001448:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800144c:	4619      	mov	r1, r3
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fe86 	bl	8001160 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001454:	2301      	movs	r3, #1
 8001456:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001458:	2301      	movs	r3, #1
 800145a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800145c:	2301      	movs	r3, #1
 800145e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001462:	2301      	movs	r3, #1
 8001464:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001476:	2300      	movs	r3, #0
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800147a:	2301      	movs	r3, #1
 800147c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001480:	2301      	movs	r3, #1
 8001482:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001488:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800148a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800148e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001494:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001496:	2301      	movs	r3, #1
 8001498:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800149c:	2300      	movs	r3, #0
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	4619      	mov	r1, r3
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ff08 	bl	80012c0 <ETH_SetDMAConfig>
}
 80014b0:	bf00      	nop
 80014b2:	3798      	adds	r7, #152	; 0x98
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3305      	adds	r3, #5
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	3204      	adds	r2, #4
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <ETH_MACAddressConfig+0x68>)
 80014da:	4413      	add	r3, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3303      	adds	r3, #3
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	061a      	lsls	r2, r3, #24
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3302      	adds	r3, #2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	041b      	lsls	r3, r3, #16
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3301      	adds	r3, #1
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	4313      	orrs	r3, r2
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	7812      	ldrb	r2, [r2, #0]
 8001502:	4313      	orrs	r3, r2
 8001504:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <ETH_MACAddressConfig+0x6c>)
 800150a:	4413      	add	r3, r2
 800150c:	461a      	mov	r2, r3
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	6013      	str	r3, [r2, #0]
}
 8001512:	bf00      	nop
 8001514:	371c      	adds	r7, #28
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40028040 	.word	0x40028040
 8001524:	40028044 	.word	0x40028044

08001528 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	e03e      	b.n	80015b4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68d9      	ldr	r1, [r3, #12]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	3206      	adds	r2, #6
 8001568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d80c      	bhi.n	8001598 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68d9      	ldr	r1, [r3, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	461a      	mov	r2, r3
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	e004      	b.n	80015a2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	461a      	mov	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3301      	adds	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d9bd      	bls.n	8001536 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015cc:	611a      	str	r2, [r3, #16]
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	e046      	b.n	8001676 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6919      	ldr	r1, [r3, #16]
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	440b      	add	r3, r1
 80015f8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2200      	movs	r2, #0
 8001604:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2200      	movs	r2, #0
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001624:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800162c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	3212      	adds	r2, #18
 8001642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d80c      	bhi.n	8001666 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6919      	ldr	r1, [r3, #16]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	461a      	mov	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	e004      	b.n	8001670 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	461a      	mov	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3301      	adds	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d9b5      	bls.n	80015e8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a6:	60da      	str	r2, [r3, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	e175      	b.n	80019c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016d4:	2201      	movs	r2, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 8164 	bne.w	80019ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d005      	beq.n	800170a <HAL_GPIO_Init+0x56>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d130      	bne.n	800176c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001740:	2201      	movs	r2, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 0201 	and.w	r2, r3, #1
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b03      	cmp	r3, #3
 8001776:	d017      	beq.n	80017a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d123      	bne.n	80017fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	08da      	lsrs	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3208      	adds	r2, #8
 80017f6:	69b9      	ldr	r1, [r7, #24]
 80017f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0203 	and.w	r2, r3, #3
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80be 	beq.w	80019ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <HAL_GPIO_Init+0x324>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	4a65      	ldr	r2, [pc, #404]	; (80019d8 <HAL_GPIO_Init+0x324>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001848:	6453      	str	r3, [r2, #68]	; 0x44
 800184a:	4b63      	ldr	r3, [pc, #396]	; (80019d8 <HAL_GPIO_Init+0x324>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001856:	4a61      	ldr	r2, [pc, #388]	; (80019dc <HAL_GPIO_Init+0x328>)
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	3302      	adds	r3, #2
 800185e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	220f      	movs	r2, #15
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a58      	ldr	r2, [pc, #352]	; (80019e0 <HAL_GPIO_Init+0x32c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d037      	beq.n	80018f2 <HAL_GPIO_Init+0x23e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a57      	ldr	r2, [pc, #348]	; (80019e4 <HAL_GPIO_Init+0x330>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d031      	beq.n	80018ee <HAL_GPIO_Init+0x23a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a56      	ldr	r2, [pc, #344]	; (80019e8 <HAL_GPIO_Init+0x334>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d02b      	beq.n	80018ea <HAL_GPIO_Init+0x236>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a55      	ldr	r2, [pc, #340]	; (80019ec <HAL_GPIO_Init+0x338>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d025      	beq.n	80018e6 <HAL_GPIO_Init+0x232>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a54      	ldr	r2, [pc, #336]	; (80019f0 <HAL_GPIO_Init+0x33c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d01f      	beq.n	80018e2 <HAL_GPIO_Init+0x22e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a53      	ldr	r2, [pc, #332]	; (80019f4 <HAL_GPIO_Init+0x340>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d019      	beq.n	80018de <HAL_GPIO_Init+0x22a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a52      	ldr	r2, [pc, #328]	; (80019f8 <HAL_GPIO_Init+0x344>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d013      	beq.n	80018da <HAL_GPIO_Init+0x226>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a51      	ldr	r2, [pc, #324]	; (80019fc <HAL_GPIO_Init+0x348>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00d      	beq.n	80018d6 <HAL_GPIO_Init+0x222>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a50      	ldr	r2, [pc, #320]	; (8001a00 <HAL_GPIO_Init+0x34c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d007      	beq.n	80018d2 <HAL_GPIO_Init+0x21e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4f      	ldr	r2, [pc, #316]	; (8001a04 <HAL_GPIO_Init+0x350>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d101      	bne.n	80018ce <HAL_GPIO_Init+0x21a>
 80018ca:	2309      	movs	r3, #9
 80018cc:	e012      	b.n	80018f4 <HAL_GPIO_Init+0x240>
 80018ce:	230a      	movs	r3, #10
 80018d0:	e010      	b.n	80018f4 <HAL_GPIO_Init+0x240>
 80018d2:	2308      	movs	r3, #8
 80018d4:	e00e      	b.n	80018f4 <HAL_GPIO_Init+0x240>
 80018d6:	2307      	movs	r3, #7
 80018d8:	e00c      	b.n	80018f4 <HAL_GPIO_Init+0x240>
 80018da:	2306      	movs	r3, #6
 80018dc:	e00a      	b.n	80018f4 <HAL_GPIO_Init+0x240>
 80018de:	2305      	movs	r3, #5
 80018e0:	e008      	b.n	80018f4 <HAL_GPIO_Init+0x240>
 80018e2:	2304      	movs	r3, #4
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x240>
 80018e6:	2303      	movs	r3, #3
 80018e8:	e004      	b.n	80018f4 <HAL_GPIO_Init+0x240>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e002      	b.n	80018f4 <HAL_GPIO_Init+0x240>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <HAL_GPIO_Init+0x240>
 80018f2:	2300      	movs	r3, #0
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	f002 0203 	and.w	r2, r2, #3
 80018fa:	0092      	lsls	r2, r2, #2
 80018fc:	4093      	lsls	r3, r2
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001904:	4935      	ldr	r1, [pc, #212]	; (80019dc <HAL_GPIO_Init+0x328>)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	3302      	adds	r3, #2
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <HAL_GPIO_Init+0x354>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001936:	4a34      	ldr	r2, [pc, #208]	; (8001a08 <HAL_GPIO_Init+0x354>)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800193c:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <HAL_GPIO_Init+0x354>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001960:	4a29      	ldr	r2, [pc, #164]	; (8001a08 <HAL_GPIO_Init+0x354>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001966:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_GPIO_Init+0x354>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800198a:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <HAL_GPIO_Init+0x354>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_GPIO_Init+0x354>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <HAL_GPIO_Init+0x354>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3301      	adds	r3, #1
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b0f      	cmp	r3, #15
 80019c4:	f67f ae86 	bls.w	80016d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3724      	adds	r7, #36	; 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40013800 	.word	0x40013800
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40020400 	.word	0x40020400
 80019e8:	40020800 	.word	0x40020800
 80019ec:	40020c00 	.word	0x40020c00
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40021400 	.word	0x40021400
 80019f8:	40021800 	.word	0x40021800
 80019fc:	40021c00 	.word	0x40021c00
 8001a00:	40022000 	.word	0x40022000
 8001a04:	40022400 	.word	0x40022400
 8001a08:	40013c00 	.word	0x40013c00

08001a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a1c:	787b      	ldrb	r3, [r7, #1]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a28:	e003      	b.n	8001a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a2a:	887b      	ldrh	r3, [r7, #2]
 8001a2c:	041a      	lsls	r2, r3, #16
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	619a      	str	r2, [r3, #24]
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a40:	b08f      	sub	sp, #60	; 0x3c
 8001a42:	af0a      	add	r7, sp, #40	; 0x28
 8001a44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e116      	b.n	8001c7e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff f8bc 	bl	8000be8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2203      	movs	r2, #3
 8001a74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 ff3a 	bl	8003908 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	687e      	ldr	r6, [r7, #4]
 8001a9c:	466d      	mov	r5, sp
 8001a9e:	f106 0410 	add.w	r4, r6, #16
 8001aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aae:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ab2:	1d33      	adds	r3, r6, #4
 8001ab4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab6:	6838      	ldr	r0, [r7, #0]
 8001ab8:	f001 fece 	bl	8003858 <USB_CoreInit>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0d7      	b.n	8001c7e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 ff28 	bl	800392a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e04a      	b.n	8001b76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	333d      	adds	r3, #61	; 0x3d
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	333c      	adds	r3, #60	; 0x3c
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	b298      	uxth	r0, r3
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	3344      	adds	r3, #68	; 0x44
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3340      	adds	r3, #64	; 0x40
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	3348      	adds	r3, #72	; 0x48
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	334c      	adds	r3, #76	; 0x4c
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	3354      	adds	r3, #84	; 0x54
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	3301      	adds	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d3af      	bcc.n	8001ae0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	e044      	b.n	8001c10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d3b5      	bcc.n	8001b86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	687e      	ldr	r6, [r7, #4]
 8001c22:	466d      	mov	r5, sp
 8001c24:	f106 0410 	add.w	r4, r6, #16
 8001c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c34:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c38:	1d33      	adds	r3, r6, #4
 8001c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c3c:	6838      	ldr	r0, [r7, #0]
 8001c3e:	f001 fec1 	bl	80039c4 <USB_DevInit>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e014      	b.n	8001c7e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d102      	bne.n	8001c72 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f80b 	bl	8001c88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f002 f87f 	bl	8003d7a <USB_DevDisconnect>

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001c88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_PCDEx_ActivateLPM+0x44>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	10000003 	.word	0x10000003

08001cd0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40007000 	.word	0x40007000

08001cf0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4a22      	ldr	r2, [pc, #136]	; (8001d88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d12:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d1e:	f7ff f88d 	bl	8000e3c <HAL_GetTick>
 8001d22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d24:	e009      	b.n	8001d3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d26:	f7ff f889 	bl	8000e3c <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d34:	d901      	bls.n	8001d3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e022      	b.n	8001d80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d46:	d1ee      	bne.n	8001d26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d54:	f7ff f872 	bl	8000e3c <HAL_GetTick>
 8001d58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d5a:	e009      	b.n	8001d70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d5c:	f7ff f86e 	bl	8000e3c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d6a:	d901      	bls.n	8001d70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e007      	b.n	8001d80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d7c:	d1ee      	bne.n	8001d5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40007000 	.word	0x40007000

08001d90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e29b      	b.n	80022de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8087 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db4:	4b96      	ldr	r3, [pc, #600]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d00c      	beq.n	8001dda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc0:	4b93      	ldr	r3, [pc, #588]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d112      	bne.n	8001df2 <HAL_RCC_OscConfig+0x62>
 8001dcc:	4b90      	ldr	r3, [pc, #576]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd8:	d10b      	bne.n	8001df2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dda:	4b8d      	ldr	r3, [pc, #564]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d06c      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x130>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d168      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e275      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x7a>
 8001dfc:	4b84      	ldr	r3, [pc, #528]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a83      	ldr	r2, [pc, #524]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	e02e      	b.n	8001e68 <HAL_RCC_OscConfig+0xd8>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x9c>
 8001e12:	4b7f      	ldr	r3, [pc, #508]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a7e      	ldr	r2, [pc, #504]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b7c      	ldr	r3, [pc, #496]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a7b      	ldr	r2, [pc, #492]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e01d      	b.n	8001e68 <HAL_RCC_OscConfig+0xd8>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0xc0>
 8001e36:	4b76      	ldr	r3, [pc, #472]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a75      	ldr	r2, [pc, #468]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b73      	ldr	r3, [pc, #460]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a72      	ldr	r2, [pc, #456]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0xd8>
 8001e50:	4b6f      	ldr	r3, [pc, #444]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a6e      	ldr	r2, [pc, #440]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b6c      	ldr	r3, [pc, #432]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a6b      	ldr	r2, [pc, #428]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d013      	beq.n	8001e98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7fe ffe4 	bl	8000e3c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e78:	f7fe ffe0 	bl	8000e3c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	; 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e229      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	4b61      	ldr	r3, [pc, #388]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0xe8>
 8001e96:	e014      	b.n	8001ec2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7fe ffd0 	bl	8000e3c <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7fe ffcc 	bl	8000e3c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e215      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	4b57      	ldr	r3, [pc, #348]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x110>
 8001ebe:	e000      	b.n	8001ec2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d069      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ece:	4b50      	ldr	r3, [pc, #320]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00b      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eda:	4b4d      	ldr	r3, [pc, #308]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d11c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x190>
 8001ee6:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d116      	bne.n	8001f20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef2:	4b47      	ldr	r3, [pc, #284]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_RCC_OscConfig+0x17a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e1e9      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	493d      	ldr	r1, [pc, #244]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1e:	e040      	b.n	8001fa2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d023      	beq.n	8001f70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f28:	4b39      	ldr	r3, [pc, #228]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a38      	ldr	r2, [pc, #224]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7fe ff82 	bl	8000e3c <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3c:	f7fe ff7e 	bl	8000e3c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e1c7      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4e:	4b30      	ldr	r3, [pc, #192]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5a:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4929      	ldr	r1, [pc, #164]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
 8001f6e:	e018      	b.n	8001fa2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a26      	ldr	r2, [pc, #152]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ff5e 	bl	8000e3c <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f84:	f7fe ff5a 	bl	8000e3c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1a3      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d038      	beq.n	8002020 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d019      	beq.n	8001fea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fba:	4a15      	ldr	r2, [pc, #84]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7fe ff3b 	bl	8000e3c <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fca:	f7fe ff37 	bl	8000e3c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e180      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x23a>
 8001fe8:	e01a      	b.n	8002020 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fee:	4a08      	ldr	r2, [pc, #32]	; (8002010 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7fe ff21 	bl	8000e3c <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ffe:	f7fe ff1d 	bl	8000e3c <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d903      	bls.n	8002014 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e166      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
 8002010:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	4b92      	ldr	r3, [pc, #584]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 8002016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1ee      	bne.n	8001ffe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80a4 	beq.w	8002176 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202e:	4b8c      	ldr	r3, [pc, #560]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10d      	bne.n	8002056 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	4b89      	ldr	r3, [pc, #548]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a88      	ldr	r2, [pc, #544]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b86      	ldr	r3, [pc, #536]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002052:	2301      	movs	r3, #1
 8002054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002056:	4b83      	ldr	r3, [pc, #524]	; (8002264 <HAL_RCC_OscConfig+0x4d4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d118      	bne.n	8002094 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002062:	4b80      	ldr	r3, [pc, #512]	; (8002264 <HAL_RCC_OscConfig+0x4d4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a7f      	ldr	r2, [pc, #508]	; (8002264 <HAL_RCC_OscConfig+0x4d4>)
 8002068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206e:	f7fe fee5 	bl	8000e3c <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002076:	f7fe fee1 	bl	8000e3c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b64      	cmp	r3, #100	; 0x64
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e12a      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002088:	4b76      	ldr	r3, [pc, #472]	; (8002264 <HAL_RCC_OscConfig+0x4d4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d106      	bne.n	80020aa <HAL_RCC_OscConfig+0x31a>
 800209c:	4b70      	ldr	r3, [pc, #448]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	4a6f      	ldr	r2, [pc, #444]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6713      	str	r3, [r2, #112]	; 0x70
 80020a8:	e02d      	b.n	8002106 <HAL_RCC_OscConfig+0x376>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10c      	bne.n	80020cc <HAL_RCC_OscConfig+0x33c>
 80020b2:	4b6b      	ldr	r3, [pc, #428]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b6:	4a6a      	ldr	r2, [pc, #424]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6713      	str	r3, [r2, #112]	; 0x70
 80020be:	4b68      	ldr	r3, [pc, #416]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	4a67      	ldr	r2, [pc, #412]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80020c4:	f023 0304 	bic.w	r3, r3, #4
 80020c8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ca:	e01c      	b.n	8002106 <HAL_RCC_OscConfig+0x376>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b05      	cmp	r3, #5
 80020d2:	d10c      	bne.n	80020ee <HAL_RCC_OscConfig+0x35e>
 80020d4:	4b62      	ldr	r3, [pc, #392]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	4a61      	ldr	r2, [pc, #388]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6713      	str	r3, [r2, #112]	; 0x70
 80020e0:	4b5f      	ldr	r3, [pc, #380]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e4:	4a5e      	ldr	r2, [pc, #376]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6713      	str	r3, [r2, #112]	; 0x70
 80020ec:	e00b      	b.n	8002106 <HAL_RCC_OscConfig+0x376>
 80020ee:	4b5c      	ldr	r3, [pc, #368]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	4a5b      	ldr	r2, [pc, #364]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6713      	str	r3, [r2, #112]	; 0x70
 80020fa:	4b59      	ldr	r3, [pc, #356]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	4a58      	ldr	r2, [pc, #352]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d015      	beq.n	800213a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210e:	f7fe fe95 	bl	8000e3c <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002114:	e00a      	b.n	800212c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7fe fe91 	bl	8000e3c <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f241 3288 	movw	r2, #5000	; 0x1388
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e0d8      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	4b4c      	ldr	r3, [pc, #304]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0ee      	beq.n	8002116 <HAL_RCC_OscConfig+0x386>
 8002138:	e014      	b.n	8002164 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213a:	f7fe fe7f 	bl	8000e3c <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002140:	e00a      	b.n	8002158 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe fe7b 	bl	8000e3c <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e0c2      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002158:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1ee      	bne.n	8002142 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d105      	bne.n	8002176 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216a:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a3c      	ldr	r2, [pc, #240]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 8002170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80ae 	beq.w	80022dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002180:	4b37      	ldr	r3, [pc, #220]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b08      	cmp	r3, #8
 800218a:	d06d      	beq.n	8002268 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d14b      	bne.n	800222c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002194:	4b32      	ldr	r3, [pc, #200]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a31      	ldr	r2, [pc, #196]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 800219a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800219e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7fe fe4c 	bl	8000e3c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7fe fe48 	bl	8000e3c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e091      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ba:	4b29      	ldr	r3, [pc, #164]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	019b      	lsls	r3, r3, #6
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	3b01      	subs	r3, #1
 80021e0:	041b      	lsls	r3, r3, #16
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	061b      	lsls	r3, r3, #24
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	071b      	lsls	r3, r3, #28
 80021f2:	491b      	ldr	r1, [pc, #108]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a18      	ldr	r2, [pc, #96]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 80021fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7fe fe1a 	bl	8000e3c <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7fe fe16 	bl	8000e3c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e05f      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x47c>
 800222a:	e057      	b.n	80022dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 8002232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe fe00 	bl	8000e3c <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe fdfc 	bl	8000e3c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e045      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_RCC_OscConfig+0x4d0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x4b0>
 800225e:	e03d      	b.n	80022dc <HAL_RCC_OscConfig+0x54c>
 8002260:	40023800 	.word	0x40023800
 8002264:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002268:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <HAL_RCC_OscConfig+0x558>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d030      	beq.n	80022d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d129      	bne.n	80022d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d122      	bne.n	80022d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002298:	4013      	ands	r3, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800229e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d119      	bne.n	80022d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	085b      	lsrs	r3, r3, #1
 80022b0:	3b01      	subs	r3, #1
 80022b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d10f      	bne.n	80022d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800

080022ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0d0      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002304:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d910      	bls.n	8002334 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b67      	ldr	r3, [pc, #412]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 020f 	bic.w	r2, r3, #15
 800231a:	4965      	ldr	r1, [pc, #404]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b63      	ldr	r3, [pc, #396]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0b8      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800234c:	4b59      	ldr	r3, [pc, #356]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a58      	ldr	r2, [pc, #352]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002352:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002356:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002364:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4a52      	ldr	r2, [pc, #328]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 800236a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800236e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002370:	4b50      	ldr	r3, [pc, #320]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	494d      	ldr	r1, [pc, #308]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d040      	beq.n	8002410 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d115      	bne.n	80023ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e07f      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	4b41      	ldr	r3, [pc, #260]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e073      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e06b      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4936      	ldr	r1, [pc, #216]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e0:	f7fe fd2c 	bl	8000e3c <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7fe fd28 	bl	8000e3c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e053      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d210      	bcs.n	8002440 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 020f 	bic.w	r2, r3, #15
 8002426:	4922      	ldr	r1, [pc, #136]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e032      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4916      	ldr	r1, [pc, #88]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	490e      	ldr	r1, [pc, #56]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800247e:	f000 f821 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8002482:	4602      	mov	r2, r0
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	490a      	ldr	r1, [pc, #40]	; (80024b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002490:	5ccb      	ldrb	r3, [r1, r3]
 8002492:	fa22 f303 	lsr.w	r3, r2, r3
 8002496:	4a09      	ldr	r2, [pc, #36]	; (80024bc <HAL_RCC_ClockConfig+0x1d0>)
 8002498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_ClockConfig+0x1d4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fc88 	bl	8000db4 <HAL_InitTick>

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023c00 	.word	0x40023c00
 80024b4:	40023800 	.word	0x40023800
 80024b8:	08006b40 	.word	0x08006b40
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004

080024c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c8:	b094      	sub	sp, #80	; 0x50
 80024ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	647b      	str	r3, [r7, #68]	; 0x44
 80024d0:	2300      	movs	r3, #0
 80024d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d4:	2300      	movs	r3, #0
 80024d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024dc:	4b79      	ldr	r3, [pc, #484]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d00d      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x40>
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	f200 80e1 	bhi.w	80026b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x34>
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d003      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x3a>
 80024f6:	e0db      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f8:	4b73      	ldr	r3, [pc, #460]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024fc:	e0db      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024fe:	4b73      	ldr	r3, [pc, #460]	; (80026cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002500:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002502:	e0d8      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002504:	4b6f      	ldr	r3, [pc, #444]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800250c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800250e:	4b6d      	ldr	r3, [pc, #436]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d063      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251a:	4b6a      	ldr	r3, [pc, #424]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	2200      	movs	r2, #0
 8002522:	63bb      	str	r3, [r7, #56]	; 0x38
 8002524:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252c:	633b      	str	r3, [r7, #48]	; 0x30
 800252e:	2300      	movs	r3, #0
 8002530:	637b      	str	r3, [r7, #52]	; 0x34
 8002532:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002536:	4622      	mov	r2, r4
 8002538:	462b      	mov	r3, r5
 800253a:	f04f 0000 	mov.w	r0, #0
 800253e:	f04f 0100 	mov.w	r1, #0
 8002542:	0159      	lsls	r1, r3, #5
 8002544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002548:	0150      	lsls	r0, r2, #5
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4621      	mov	r1, r4
 8002550:	1a51      	subs	r1, r2, r1
 8002552:	6139      	str	r1, [r7, #16]
 8002554:	4629      	mov	r1, r5
 8002556:	eb63 0301 	sbc.w	r3, r3, r1
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002568:	4659      	mov	r1, fp
 800256a:	018b      	lsls	r3, r1, #6
 800256c:	4651      	mov	r1, sl
 800256e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002572:	4651      	mov	r1, sl
 8002574:	018a      	lsls	r2, r1, #6
 8002576:	4651      	mov	r1, sl
 8002578:	ebb2 0801 	subs.w	r8, r2, r1
 800257c:	4659      	mov	r1, fp
 800257e:	eb63 0901 	sbc.w	r9, r3, r1
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800258e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002596:	4690      	mov	r8, r2
 8002598:	4699      	mov	r9, r3
 800259a:	4623      	mov	r3, r4
 800259c:	eb18 0303 	adds.w	r3, r8, r3
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	462b      	mov	r3, r5
 80025a4:	eb49 0303 	adc.w	r3, r9, r3
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025b6:	4629      	mov	r1, r5
 80025b8:	024b      	lsls	r3, r1, #9
 80025ba:	4621      	mov	r1, r4
 80025bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025c0:	4621      	mov	r1, r4
 80025c2:	024a      	lsls	r2, r1, #9
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ca:	2200      	movs	r2, #0
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025d4:	f7fd fe34 	bl	8000240 <__aeabi_uldivmod>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4613      	mov	r3, r2
 80025de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e0:	e058      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e2:	4b38      	ldr	r3, [pc, #224]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	099b      	lsrs	r3, r3, #6
 80025e8:	2200      	movs	r2, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	4611      	mov	r1, r2
 80025ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025f2:	623b      	str	r3, [r7, #32]
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
 80025f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025fc:	4642      	mov	r2, r8
 80025fe:	464b      	mov	r3, r9
 8002600:	f04f 0000 	mov.w	r0, #0
 8002604:	f04f 0100 	mov.w	r1, #0
 8002608:	0159      	lsls	r1, r3, #5
 800260a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800260e:	0150      	lsls	r0, r2, #5
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4641      	mov	r1, r8
 8002616:	ebb2 0a01 	subs.w	sl, r2, r1
 800261a:	4649      	mov	r1, r9
 800261c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800262c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002630:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002634:	ebb2 040a 	subs.w	r4, r2, sl
 8002638:	eb63 050b 	sbc.w	r5, r3, fp
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	00eb      	lsls	r3, r5, #3
 8002646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800264a:	00e2      	lsls	r2, r4, #3
 800264c:	4614      	mov	r4, r2
 800264e:	461d      	mov	r5, r3
 8002650:	4643      	mov	r3, r8
 8002652:	18e3      	adds	r3, r4, r3
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	464b      	mov	r3, r9
 8002658:	eb45 0303 	adc.w	r3, r5, r3
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800266a:	4629      	mov	r1, r5
 800266c:	028b      	lsls	r3, r1, #10
 800266e:	4621      	mov	r1, r4
 8002670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002674:	4621      	mov	r1, r4
 8002676:	028a      	lsls	r2, r1, #10
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267e:	2200      	movs	r2, #0
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	61fa      	str	r2, [r7, #28]
 8002684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002688:	f7fd fdda 	bl	8000240 <__aeabi_uldivmod>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4613      	mov	r3, r2
 8002692:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	3301      	adds	r3, #1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80026a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ae:	e002      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80026b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3750      	adds	r7, #80	; 0x50
 80026bc:	46bd      	mov	sp, r7
 80026be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	00f42400 	.word	0x00f42400
 80026cc:	007a1200 	.word	0x007a1200

080026d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000000 	.word	0x20000000

080026e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026ec:	f7ff fff0 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0a9b      	lsrs	r3, r3, #10
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4903      	ldr	r1, [pc, #12]	; (800270c <HAL_RCC_GetPCLK1Freq+0x24>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	08006b50 	.word	0x08006b50

08002710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002714:	f7ff ffdc 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	0b5b      	lsrs	r3, r3, #13
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	08006b50 	.word	0x08006b50

08002738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d012      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002760:	4b69      	ldr	r3, [pc, #420]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4a68      	ldr	r2, [pc, #416]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002766:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800276a:	6093      	str	r3, [r2, #8]
 800276c:	4b66      	ldr	r3, [pc, #408]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002774:	4964      	ldr	r1, [pc, #400]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002782:	2301      	movs	r3, #1
 8002784:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d017      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002792:	4b5d      	ldr	r3, [pc, #372]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a0:	4959      	ldr	r1, [pc, #356]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027b0:	d101      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027be:	2301      	movs	r3, #1
 80027c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d017      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027ce:	4b4e      	ldr	r3, [pc, #312]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	494a      	ldr	r1, [pc, #296]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ec:	d101      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80027ee:	2301      	movs	r3, #1
 80027f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027fa:	2301      	movs	r3, #1
 80027fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800280a:	2301      	movs	r3, #1
 800280c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 808b 	beq.w	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800281c:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	4a39      	ldr	r2, [pc, #228]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002826:	6413      	str	r3, [r2, #64]	; 0x40
 8002828:	4b37      	ldr	r3, [pc, #220]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002834:	4b35      	ldr	r3, [pc, #212]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a34      	ldr	r2, [pc, #208]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800283a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002840:	f7fe fafc 	bl	8000e3c <HAL_GetTick>
 8002844:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002848:	f7fe faf8 	bl	8000e3c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	; 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e38f      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800285a:	4b2c      	ldr	r3, [pc, #176]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d035      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	429a      	cmp	r2, r3
 8002882:	d02e      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002884:	4b20      	ldr	r3, [pc, #128]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028a6:	4a18      	ldr	r2, [pc, #96]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028ac:	4b16      	ldr	r3, [pc, #88]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d114      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fac0 	bl	8000e3c <HAL_GetTick>
 80028bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028be:	e00a      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7fe fabc 	bl	8000e3c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e351      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0ee      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028ee:	d111      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028fe:	400b      	ands	r3, r1
 8002900:	4901      	ldr	r1, [pc, #4]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
 8002906:	e00b      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002908:	40023800 	.word	0x40023800
 800290c:	40007000 	.word	0x40007000
 8002910:	0ffffcff 	.word	0x0ffffcff
 8002914:	4bac      	ldr	r3, [pc, #688]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4aab      	ldr	r2, [pc, #684]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800291a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800291e:	6093      	str	r3, [r2, #8]
 8002920:	4ba9      	ldr	r3, [pc, #676]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002922:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	49a6      	ldr	r1, [pc, #664]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800292e:	4313      	orrs	r3, r2
 8002930:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	d010      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800293e:	4ba2      	ldr	r3, [pc, #648]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002944:	4aa0      	ldr	r2, [pc, #640]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800294a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800294e:	4b9e      	ldr	r3, [pc, #632]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002950:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	499b      	ldr	r1, [pc, #620]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800296c:	4b96      	ldr	r3, [pc, #600]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800297a:	4993      	ldr	r1, [pc, #588]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800298e:	4b8e      	ldr	r3, [pc, #568]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800299c:	498a      	ldr	r1, [pc, #552]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029b0:	4b85      	ldr	r3, [pc, #532]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029be:	4982      	ldr	r1, [pc, #520]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029d2:	4b7d      	ldr	r3, [pc, #500]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4979      	ldr	r1, [pc, #484]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029f4:	4b74      	ldr	r3, [pc, #464]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	f023 0203 	bic.w	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	4971      	ldr	r1, [pc, #452]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a16:	4b6c      	ldr	r3, [pc, #432]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1c:	f023 020c 	bic.w	r2, r3, #12
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a24:	4968      	ldr	r1, [pc, #416]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a38:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	4960      	ldr	r1, [pc, #384]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a5a:	4b5b      	ldr	r3, [pc, #364]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a68:	4957      	ldr	r1, [pc, #348]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a7c:	4b52      	ldr	r3, [pc, #328]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	494f      	ldr	r1, [pc, #316]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	4946      	ldr	r1, [pc, #280]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ac0:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	493e      	ldr	r1, [pc, #248]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ae2:	4b39      	ldr	r3, [pc, #228]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af0:	4935      	ldr	r1, [pc, #212]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b04:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b12:	492d      	ldr	r1, [pc, #180]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d011      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b26:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b34:	4924      	ldr	r1, [pc, #144]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b44:	d101      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b56:	2301      	movs	r3, #1
 8002b58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b66:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b74:	4914      	ldr	r1, [pc, #80]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00b      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b98:	490b      	ldr	r1, [pc, #44]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00f      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bbc:	4902      	ldr	r1, [pc, #8]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bc4:	e002      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00b      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bd8:	4b8a      	ldr	r3, [pc, #552]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	4986      	ldr	r1, [pc, #536]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00b      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002bfc:	4b81      	ldr	r3, [pc, #516]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c0c:	497d      	ldr	r1, [pc, #500]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d006      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80d6 	beq.w	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c28:	4b76      	ldr	r3, [pc, #472]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a75      	ldr	r2, [pc, #468]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c34:	f7fe f902 	bl	8000e3c <HAL_GetTick>
 8002c38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c3c:	f7fe f8fe 	bl	8000e3c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e195      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c4e:	4b6d      	ldr	r3, [pc, #436]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d021      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d11d      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c6e:	4b65      	ldr	r3, [pc, #404]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c7c:	4b61      	ldr	r3, [pc, #388]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c82:	0e1b      	lsrs	r3, r3, #24
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	019a      	lsls	r2, r3, #6
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	431a      	orrs	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	071b      	lsls	r3, r3, #28
 8002ca2:	4958      	ldr	r1, [pc, #352]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d02e      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cd4:	d129      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cd6:	4b4b      	ldr	r3, [pc, #300]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ce4:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cea:	0f1b      	lsrs	r3, r3, #28
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	019a      	lsls	r2, r3, #6
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	061b      	lsls	r3, r3, #24
 8002d04:	431a      	orrs	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	071b      	lsls	r3, r3, #28
 8002d0a:	493e      	ldr	r1, [pc, #248]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d12:	4b3c      	ldr	r3, [pc, #240]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d18:	f023 021f 	bic.w	r2, r3, #31
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	3b01      	subs	r3, #1
 8002d22:	4938      	ldr	r1, [pc, #224]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01d      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d36:	4b33      	ldr	r3, [pc, #204]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3c:	0e1b      	lsrs	r3, r3, #24
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d44:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4a:	0f1b      	lsrs	r3, r3, #28
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	019a      	lsls	r2, r3, #6
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	041b      	lsls	r3, r3, #16
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	061b      	lsls	r3, r3, #24
 8002d64:	431a      	orrs	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	071b      	lsls	r3, r3, #28
 8002d6a:	4926      	ldr	r1, [pc, #152]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d011      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	019a      	lsls	r2, r3, #6
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	071b      	lsls	r3, r3, #28
 8002d9a:	491a      	ldr	r1, [pc, #104]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a17      	ldr	r2, [pc, #92]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dae:	f7fe f845 	bl	8000e3c <HAL_GetTick>
 8002db2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002db6:	f7fe f841 	bl	8000e3c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b64      	cmp	r3, #100	; 0x64
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e0d8      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	f040 80ce 	bne.w	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a08      	ldr	r2, [pc, #32]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de8:	f7fe f828 	bl	8000e3c <HAL_GetTick>
 8002dec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dee:	e00b      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002df0:	f7fe f824 	bl	8000e3c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d904      	bls.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0bb      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e08:	4b5e      	ldr	r3, [pc, #376]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e14:	d0ec      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d02e      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d12a      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e3e:	4b51      	ldr	r3, [pc, #324]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e4c:	4b4d      	ldr	r3, [pc, #308]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	0f1b      	lsrs	r3, r3, #28
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	019a      	lsls	r2, r3, #6
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	041b      	lsls	r3, r3, #16
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	061b      	lsls	r3, r3, #24
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	071b      	lsls	r3, r3, #28
 8002e72:	4944      	ldr	r1, [pc, #272]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e7a:	4b42      	ldr	r3, [pc, #264]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	493d      	ldr	r1, [pc, #244]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d022      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea8:	d11d      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eaa:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb0:	0e1b      	lsrs	r3, r3, #24
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002eb8:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	0f1b      	lsrs	r3, r3, #28
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	019a      	lsls	r2, r3, #6
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	061b      	lsls	r3, r3, #24
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	071b      	lsls	r3, r3, #28
 8002ede:	4929      	ldr	r1, [pc, #164]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d028      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ef2:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	0e1b      	lsrs	r3, r3, #24
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f00:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	0c1b      	lsrs	r3, r3, #16
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	019a      	lsls	r2, r3, #6
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	041b      	lsls	r3, r3, #16
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	061b      	lsls	r3, r3, #24
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	071b      	lsls	r3, r3, #28
 8002f26:	4917      	ldr	r1, [pc, #92]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	4911      	ldr	r1, [pc, #68]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a0e      	ldr	r2, [pc, #56]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f50:	f7fd ff74 	bl	8000e3c <HAL_GetTick>
 8002f54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f58:	f7fd ff70 	bl	8000e3c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e007      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f76:	d1ef      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800

08002f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e040      	b.n	800301c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd fdbc 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2224      	movs	r2, #36	; 0x24
 8002fb4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0201 	bic.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f82c 	bl	8003024 <UART_SetConfig>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e022      	b.n	800301c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa84 	bl	80034ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fb0b 	bl	8003630 <UART_CheckIdleState>
 800301a:	4603      	mov	r3, r0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4ba6      	ldr	r3, [pc, #664]	; (80032e8 <UART_SetConfig+0x2c4>)
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	6979      	ldr	r1, [r7, #20]
 8003058:	430b      	orrs	r3, r1
 800305a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	430a      	orrs	r2, r1
 8003094:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a94      	ldr	r2, [pc, #592]	; (80032ec <UART_SetConfig+0x2c8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d120      	bne.n	80030e2 <UART_SetConfig+0xbe>
 80030a0:	4b93      	ldr	r3, [pc, #588]	; (80032f0 <UART_SetConfig+0x2cc>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d816      	bhi.n	80030dc <UART_SetConfig+0xb8>
 80030ae:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <UART_SetConfig+0x90>)
 80030b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b4:	080030c5 	.word	0x080030c5
 80030b8:	080030d1 	.word	0x080030d1
 80030bc:	080030cb 	.word	0x080030cb
 80030c0:	080030d7 	.word	0x080030d7
 80030c4:	2301      	movs	r3, #1
 80030c6:	77fb      	strb	r3, [r7, #31]
 80030c8:	e150      	b.n	800336c <UART_SetConfig+0x348>
 80030ca:	2302      	movs	r3, #2
 80030cc:	77fb      	strb	r3, [r7, #31]
 80030ce:	e14d      	b.n	800336c <UART_SetConfig+0x348>
 80030d0:	2304      	movs	r3, #4
 80030d2:	77fb      	strb	r3, [r7, #31]
 80030d4:	e14a      	b.n	800336c <UART_SetConfig+0x348>
 80030d6:	2308      	movs	r3, #8
 80030d8:	77fb      	strb	r3, [r7, #31]
 80030da:	e147      	b.n	800336c <UART_SetConfig+0x348>
 80030dc:	2310      	movs	r3, #16
 80030de:	77fb      	strb	r3, [r7, #31]
 80030e0:	e144      	b.n	800336c <UART_SetConfig+0x348>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a83      	ldr	r2, [pc, #524]	; (80032f4 <UART_SetConfig+0x2d0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d132      	bne.n	8003152 <UART_SetConfig+0x12e>
 80030ec:	4b80      	ldr	r3, [pc, #512]	; (80032f0 <UART_SetConfig+0x2cc>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d828      	bhi.n	800314c <UART_SetConfig+0x128>
 80030fa:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <UART_SetConfig+0xdc>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	08003135 	.word	0x08003135
 8003104:	0800314d 	.word	0x0800314d
 8003108:	0800314d 	.word	0x0800314d
 800310c:	0800314d 	.word	0x0800314d
 8003110:	08003141 	.word	0x08003141
 8003114:	0800314d 	.word	0x0800314d
 8003118:	0800314d 	.word	0x0800314d
 800311c:	0800314d 	.word	0x0800314d
 8003120:	0800313b 	.word	0x0800313b
 8003124:	0800314d 	.word	0x0800314d
 8003128:	0800314d 	.word	0x0800314d
 800312c:	0800314d 	.word	0x0800314d
 8003130:	08003147 	.word	0x08003147
 8003134:	2300      	movs	r3, #0
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e118      	b.n	800336c <UART_SetConfig+0x348>
 800313a:	2302      	movs	r3, #2
 800313c:	77fb      	strb	r3, [r7, #31]
 800313e:	e115      	b.n	800336c <UART_SetConfig+0x348>
 8003140:	2304      	movs	r3, #4
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e112      	b.n	800336c <UART_SetConfig+0x348>
 8003146:	2308      	movs	r3, #8
 8003148:	77fb      	strb	r3, [r7, #31]
 800314a:	e10f      	b.n	800336c <UART_SetConfig+0x348>
 800314c:	2310      	movs	r3, #16
 800314e:	77fb      	strb	r3, [r7, #31]
 8003150:	e10c      	b.n	800336c <UART_SetConfig+0x348>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a68      	ldr	r2, [pc, #416]	; (80032f8 <UART_SetConfig+0x2d4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d120      	bne.n	800319e <UART_SetConfig+0x17a>
 800315c:	4b64      	ldr	r3, [pc, #400]	; (80032f0 <UART_SetConfig+0x2cc>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003166:	2b30      	cmp	r3, #48	; 0x30
 8003168:	d013      	beq.n	8003192 <UART_SetConfig+0x16e>
 800316a:	2b30      	cmp	r3, #48	; 0x30
 800316c:	d814      	bhi.n	8003198 <UART_SetConfig+0x174>
 800316e:	2b20      	cmp	r3, #32
 8003170:	d009      	beq.n	8003186 <UART_SetConfig+0x162>
 8003172:	2b20      	cmp	r3, #32
 8003174:	d810      	bhi.n	8003198 <UART_SetConfig+0x174>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <UART_SetConfig+0x15c>
 800317a:	2b10      	cmp	r3, #16
 800317c:	d006      	beq.n	800318c <UART_SetConfig+0x168>
 800317e:	e00b      	b.n	8003198 <UART_SetConfig+0x174>
 8003180:	2300      	movs	r3, #0
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e0f2      	b.n	800336c <UART_SetConfig+0x348>
 8003186:	2302      	movs	r3, #2
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e0ef      	b.n	800336c <UART_SetConfig+0x348>
 800318c:	2304      	movs	r3, #4
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e0ec      	b.n	800336c <UART_SetConfig+0x348>
 8003192:	2308      	movs	r3, #8
 8003194:	77fb      	strb	r3, [r7, #31]
 8003196:	e0e9      	b.n	800336c <UART_SetConfig+0x348>
 8003198:	2310      	movs	r3, #16
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e0e6      	b.n	800336c <UART_SetConfig+0x348>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a56      	ldr	r2, [pc, #344]	; (80032fc <UART_SetConfig+0x2d8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d120      	bne.n	80031ea <UART_SetConfig+0x1c6>
 80031a8:	4b51      	ldr	r3, [pc, #324]	; (80032f0 <UART_SetConfig+0x2cc>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031b2:	2bc0      	cmp	r3, #192	; 0xc0
 80031b4:	d013      	beq.n	80031de <UART_SetConfig+0x1ba>
 80031b6:	2bc0      	cmp	r3, #192	; 0xc0
 80031b8:	d814      	bhi.n	80031e4 <UART_SetConfig+0x1c0>
 80031ba:	2b80      	cmp	r3, #128	; 0x80
 80031bc:	d009      	beq.n	80031d2 <UART_SetConfig+0x1ae>
 80031be:	2b80      	cmp	r3, #128	; 0x80
 80031c0:	d810      	bhi.n	80031e4 <UART_SetConfig+0x1c0>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <UART_SetConfig+0x1a8>
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	d006      	beq.n	80031d8 <UART_SetConfig+0x1b4>
 80031ca:	e00b      	b.n	80031e4 <UART_SetConfig+0x1c0>
 80031cc:	2300      	movs	r3, #0
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e0cc      	b.n	800336c <UART_SetConfig+0x348>
 80031d2:	2302      	movs	r3, #2
 80031d4:	77fb      	strb	r3, [r7, #31]
 80031d6:	e0c9      	b.n	800336c <UART_SetConfig+0x348>
 80031d8:	2304      	movs	r3, #4
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e0c6      	b.n	800336c <UART_SetConfig+0x348>
 80031de:	2308      	movs	r3, #8
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e0c3      	b.n	800336c <UART_SetConfig+0x348>
 80031e4:	2310      	movs	r3, #16
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e0c0      	b.n	800336c <UART_SetConfig+0x348>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a44      	ldr	r2, [pc, #272]	; (8003300 <UART_SetConfig+0x2dc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d125      	bne.n	8003240 <UART_SetConfig+0x21c>
 80031f4:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <UART_SetConfig+0x2cc>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003202:	d017      	beq.n	8003234 <UART_SetConfig+0x210>
 8003204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003208:	d817      	bhi.n	800323a <UART_SetConfig+0x216>
 800320a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320e:	d00b      	beq.n	8003228 <UART_SetConfig+0x204>
 8003210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003214:	d811      	bhi.n	800323a <UART_SetConfig+0x216>
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <UART_SetConfig+0x1fe>
 800321a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321e:	d006      	beq.n	800322e <UART_SetConfig+0x20a>
 8003220:	e00b      	b.n	800323a <UART_SetConfig+0x216>
 8003222:	2300      	movs	r3, #0
 8003224:	77fb      	strb	r3, [r7, #31]
 8003226:	e0a1      	b.n	800336c <UART_SetConfig+0x348>
 8003228:	2302      	movs	r3, #2
 800322a:	77fb      	strb	r3, [r7, #31]
 800322c:	e09e      	b.n	800336c <UART_SetConfig+0x348>
 800322e:	2304      	movs	r3, #4
 8003230:	77fb      	strb	r3, [r7, #31]
 8003232:	e09b      	b.n	800336c <UART_SetConfig+0x348>
 8003234:	2308      	movs	r3, #8
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e098      	b.n	800336c <UART_SetConfig+0x348>
 800323a:	2310      	movs	r3, #16
 800323c:	77fb      	strb	r3, [r7, #31]
 800323e:	e095      	b.n	800336c <UART_SetConfig+0x348>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2f      	ldr	r2, [pc, #188]	; (8003304 <UART_SetConfig+0x2e0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d125      	bne.n	8003296 <UART_SetConfig+0x272>
 800324a:	4b29      	ldr	r3, [pc, #164]	; (80032f0 <UART_SetConfig+0x2cc>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003258:	d017      	beq.n	800328a <UART_SetConfig+0x266>
 800325a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800325e:	d817      	bhi.n	8003290 <UART_SetConfig+0x26c>
 8003260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003264:	d00b      	beq.n	800327e <UART_SetConfig+0x25a>
 8003266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326a:	d811      	bhi.n	8003290 <UART_SetConfig+0x26c>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <UART_SetConfig+0x254>
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003274:	d006      	beq.n	8003284 <UART_SetConfig+0x260>
 8003276:	e00b      	b.n	8003290 <UART_SetConfig+0x26c>
 8003278:	2301      	movs	r3, #1
 800327a:	77fb      	strb	r3, [r7, #31]
 800327c:	e076      	b.n	800336c <UART_SetConfig+0x348>
 800327e:	2302      	movs	r3, #2
 8003280:	77fb      	strb	r3, [r7, #31]
 8003282:	e073      	b.n	800336c <UART_SetConfig+0x348>
 8003284:	2304      	movs	r3, #4
 8003286:	77fb      	strb	r3, [r7, #31]
 8003288:	e070      	b.n	800336c <UART_SetConfig+0x348>
 800328a:	2308      	movs	r3, #8
 800328c:	77fb      	strb	r3, [r7, #31]
 800328e:	e06d      	b.n	800336c <UART_SetConfig+0x348>
 8003290:	2310      	movs	r3, #16
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	e06a      	b.n	800336c <UART_SetConfig+0x348>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <UART_SetConfig+0x2e4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d138      	bne.n	8003312 <UART_SetConfig+0x2ee>
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <UART_SetConfig+0x2cc>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032ae:	d017      	beq.n	80032e0 <UART_SetConfig+0x2bc>
 80032b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032b4:	d82a      	bhi.n	800330c <UART_SetConfig+0x2e8>
 80032b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ba:	d00b      	beq.n	80032d4 <UART_SetConfig+0x2b0>
 80032bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c0:	d824      	bhi.n	800330c <UART_SetConfig+0x2e8>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <UART_SetConfig+0x2aa>
 80032c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ca:	d006      	beq.n	80032da <UART_SetConfig+0x2b6>
 80032cc:	e01e      	b.n	800330c <UART_SetConfig+0x2e8>
 80032ce:	2300      	movs	r3, #0
 80032d0:	77fb      	strb	r3, [r7, #31]
 80032d2:	e04b      	b.n	800336c <UART_SetConfig+0x348>
 80032d4:	2302      	movs	r3, #2
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e048      	b.n	800336c <UART_SetConfig+0x348>
 80032da:	2304      	movs	r3, #4
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	e045      	b.n	800336c <UART_SetConfig+0x348>
 80032e0:	2308      	movs	r3, #8
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e042      	b.n	800336c <UART_SetConfig+0x348>
 80032e6:	bf00      	nop
 80032e8:	efff69f3 	.word	0xefff69f3
 80032ec:	40011000 	.word	0x40011000
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40004400 	.word	0x40004400
 80032f8:	40004800 	.word	0x40004800
 80032fc:	40004c00 	.word	0x40004c00
 8003300:	40005000 	.word	0x40005000
 8003304:	40011400 	.word	0x40011400
 8003308:	40007800 	.word	0x40007800
 800330c:	2310      	movs	r3, #16
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e02c      	b.n	800336c <UART_SetConfig+0x348>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a72      	ldr	r2, [pc, #456]	; (80034e0 <UART_SetConfig+0x4bc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d125      	bne.n	8003368 <UART_SetConfig+0x344>
 800331c:	4b71      	ldr	r3, [pc, #452]	; (80034e4 <UART_SetConfig+0x4c0>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003326:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800332a:	d017      	beq.n	800335c <UART_SetConfig+0x338>
 800332c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003330:	d817      	bhi.n	8003362 <UART_SetConfig+0x33e>
 8003332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003336:	d00b      	beq.n	8003350 <UART_SetConfig+0x32c>
 8003338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333c:	d811      	bhi.n	8003362 <UART_SetConfig+0x33e>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <UART_SetConfig+0x326>
 8003342:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003346:	d006      	beq.n	8003356 <UART_SetConfig+0x332>
 8003348:	e00b      	b.n	8003362 <UART_SetConfig+0x33e>
 800334a:	2300      	movs	r3, #0
 800334c:	77fb      	strb	r3, [r7, #31]
 800334e:	e00d      	b.n	800336c <UART_SetConfig+0x348>
 8003350:	2302      	movs	r3, #2
 8003352:	77fb      	strb	r3, [r7, #31]
 8003354:	e00a      	b.n	800336c <UART_SetConfig+0x348>
 8003356:	2304      	movs	r3, #4
 8003358:	77fb      	strb	r3, [r7, #31]
 800335a:	e007      	b.n	800336c <UART_SetConfig+0x348>
 800335c:	2308      	movs	r3, #8
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e004      	b.n	800336c <UART_SetConfig+0x348>
 8003362:	2310      	movs	r3, #16
 8003364:	77fb      	strb	r3, [r7, #31]
 8003366:	e001      	b.n	800336c <UART_SetConfig+0x348>
 8003368:	2310      	movs	r3, #16
 800336a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003374:	d15b      	bne.n	800342e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003376:	7ffb      	ldrb	r3, [r7, #31]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d828      	bhi.n	80033ce <UART_SetConfig+0x3aa>
 800337c:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <UART_SetConfig+0x360>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	080033a9 	.word	0x080033a9
 8003388:	080033b1 	.word	0x080033b1
 800338c:	080033b9 	.word	0x080033b9
 8003390:	080033cf 	.word	0x080033cf
 8003394:	080033bf 	.word	0x080033bf
 8003398:	080033cf 	.word	0x080033cf
 800339c:	080033cf 	.word	0x080033cf
 80033a0:	080033cf 	.word	0x080033cf
 80033a4:	080033c7 	.word	0x080033c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a8:	f7ff f99e 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 80033ac:	61b8      	str	r0, [r7, #24]
        break;
 80033ae:	e013      	b.n	80033d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b0:	f7ff f9ae 	bl	8002710 <HAL_RCC_GetPCLK2Freq>
 80033b4:	61b8      	str	r0, [r7, #24]
        break;
 80033b6:	e00f      	b.n	80033d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b8:	4b4b      	ldr	r3, [pc, #300]	; (80034e8 <UART_SetConfig+0x4c4>)
 80033ba:	61bb      	str	r3, [r7, #24]
        break;
 80033bc:	e00c      	b.n	80033d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033be:	f7ff f881 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 80033c2:	61b8      	str	r0, [r7, #24]
        break;
 80033c4:	e008      	b.n	80033d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ca:	61bb      	str	r3, [r7, #24]
        break;
 80033cc:	e004      	b.n	80033d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	77bb      	strb	r3, [r7, #30]
        break;
 80033d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d074      	beq.n	80034c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	005a      	lsls	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	441a      	add	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2b0f      	cmp	r3, #15
 80033f8:	d916      	bls.n	8003428 <UART_SetConfig+0x404>
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003400:	d212      	bcs.n	8003428 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	b29b      	uxth	r3, r3
 8003406:	f023 030f 	bic.w	r3, r3, #15
 800340a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	b29b      	uxth	r3, r3
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	b29a      	uxth	r2, r3
 8003418:	89fb      	ldrh	r3, [r7, #14]
 800341a:	4313      	orrs	r3, r2
 800341c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	89fa      	ldrh	r2, [r7, #14]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	e04f      	b.n	80034c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	77bb      	strb	r3, [r7, #30]
 800342c:	e04c      	b.n	80034c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800342e:	7ffb      	ldrb	r3, [r7, #31]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d828      	bhi.n	8003486 <UART_SetConfig+0x462>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <UART_SetConfig+0x418>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	08003461 	.word	0x08003461
 8003440:	08003469 	.word	0x08003469
 8003444:	08003471 	.word	0x08003471
 8003448:	08003487 	.word	0x08003487
 800344c:	08003477 	.word	0x08003477
 8003450:	08003487 	.word	0x08003487
 8003454:	08003487 	.word	0x08003487
 8003458:	08003487 	.word	0x08003487
 800345c:	0800347f 	.word	0x0800347f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003460:	f7ff f942 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 8003464:	61b8      	str	r0, [r7, #24]
        break;
 8003466:	e013      	b.n	8003490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003468:	f7ff f952 	bl	8002710 <HAL_RCC_GetPCLK2Freq>
 800346c:	61b8      	str	r0, [r7, #24]
        break;
 800346e:	e00f      	b.n	8003490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <UART_SetConfig+0x4c4>)
 8003472:	61bb      	str	r3, [r7, #24]
        break;
 8003474:	e00c      	b.n	8003490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003476:	f7ff f825 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 800347a:	61b8      	str	r0, [r7, #24]
        break;
 800347c:	e008      	b.n	8003490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800347e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003482:	61bb      	str	r3, [r7, #24]
        break;
 8003484:	e004      	b.n	8003490 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	77bb      	strb	r3, [r7, #30]
        break;
 800348e:	bf00      	nop
    }

    if (pclk != 0U)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d018      	beq.n	80034c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	085a      	lsrs	r2, r3, #1
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	441a      	add	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b0f      	cmp	r3, #15
 80034ae:	d909      	bls.n	80034c4 <UART_SetConfig+0x4a0>
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b6:	d205      	bcs.n	80034c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	e001      	b.n	80034c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80034d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3720      	adds	r7, #32
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40007c00 	.word	0x40007c00
 80034e4:	40023800 	.word	0x40023800
 80034e8:	00f42400 	.word	0x00f42400

080034ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01a      	beq.n	8003602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ea:	d10a      	bne.n	8003602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
  }
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af02      	add	r7, sp, #8
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003640:	f7fd fbfc 	bl	8000e3c <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b08      	cmp	r3, #8
 8003652:	d10e      	bne.n	8003672 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f831 	bl	80036ca <UART_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e027      	b.n	80036c2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b04      	cmp	r3, #4
 800367e:	d10e      	bne.n	800369e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f81b 	bl	80036ca <UART_WaitOnFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e011      	b.n	80036c2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b09c      	sub	sp, #112	; 0x70
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	4613      	mov	r3, r2
 80036d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036da:	e0a7      	b.n	800382c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e2:	f000 80a3 	beq.w	800382c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e6:	f7fd fba9 	bl	8000e3c <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <UART_WaitOnFlagUntilTimeout+0x32>
 80036f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d13f      	bne.n	800377c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003704:	e853 3f00 	ldrex	r3, [r3]
 8003708:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800370a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003710:	667b      	str	r3, [r7, #100]	; 0x64
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800371a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800371c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003720:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003722:	e841 2300 	strex	r3, r2, [r1]
 8003726:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1e6      	bne.n	80036fc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3308      	adds	r3, #8
 8003734:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	663b      	str	r3, [r7, #96]	; 0x60
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3308      	adds	r3, #8
 800374c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800374e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003750:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003752:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800375c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1e5      	bne.n	800372e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e068      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d050      	beq.n	800382c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003798:	d148      	bne.n	800382c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c2:	637b      	str	r3, [r7, #52]	; 0x34
 80037c4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e6      	bne.n	80037a4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3308      	adds	r3, #8
 80037dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	613b      	str	r3, [r7, #16]
   return(result);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3308      	adds	r3, #8
 80037f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037f6:	623a      	str	r2, [r7, #32]
 80037f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	69f9      	ldr	r1, [r7, #28]
 80037fc:	6a3a      	ldr	r2, [r7, #32]
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	61bb      	str	r3, [r7, #24]
   return(result);
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e5      	bne.n	80037d6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2220      	movs	r2, #32
 800380e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e010      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4013      	ands	r3, r2
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	429a      	cmp	r2, r3
 8003848:	f43f af48 	beq.w	80036dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3770      	adds	r7, #112	; 0x70
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003858:	b084      	sub	sp, #16
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	f107 001c 	add.w	r0, r7, #28
 8003866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	2b01      	cmp	r3, #1
 800386e:	d120      	bne.n	80038b2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	4b20      	ldr	r3, [pc, #128]	; (8003904 <USB_CoreInit+0xac>)
 8003882:	4013      	ands	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003896:	2b01      	cmp	r3, #1
 8003898:	d105      	bne.n	80038a6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fa96 	bl	8003dd8 <USB_CoreReset>
 80038ac:	4603      	mov	r3, r0
 80038ae:	73fb      	strb	r3, [r7, #15]
 80038b0:	e010      	b.n	80038d4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fa8a 	bl	8003dd8 <USB_CoreReset>
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d10b      	bne.n	80038f2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f043 0206 	orr.w	r2, r3, #6
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f043 0220 	orr.w	r2, r3, #32
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038fe:	b004      	add	sp, #16
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	ffbdffbf 	.word	0xffbdffbf

08003908 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f023 0201 	bic.w	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d115      	bne.n	8003978 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003958:	2001      	movs	r0, #1
 800395a:	f7fd fa7b 	bl	8000e54 <HAL_Delay>
      ms++;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3301      	adds	r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fa29 	bl	8003dbc <USB_GetMode>
 800396a:	4603      	mov	r3, r0
 800396c:	2b01      	cmp	r3, #1
 800396e:	d01e      	beq.n	80039ae <USB_SetCurrentMode+0x84>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b31      	cmp	r3, #49	; 0x31
 8003974:	d9f0      	bls.n	8003958 <USB_SetCurrentMode+0x2e>
 8003976:	e01a      	b.n	80039ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d115      	bne.n	80039aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800398a:	2001      	movs	r0, #1
 800398c:	f7fd fa62 	bl	8000e54 <HAL_Delay>
      ms++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3301      	adds	r3, #1
 8003994:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fa10 	bl	8003dbc <USB_GetMode>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <USB_SetCurrentMode+0x84>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b31      	cmp	r3, #49	; 0x31
 80039a6:	d9f0      	bls.n	800398a <USB_SetCurrentMode+0x60>
 80039a8:	e001      	b.n	80039ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e005      	b.n	80039ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b32      	cmp	r3, #50	; 0x32
 80039b2:	d101      	bne.n	80039b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039c4:	b084      	sub	sp, #16
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b086      	sub	sp, #24
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	e009      	b.n	80039f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	3340      	adds	r3, #64	; 0x40
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	2200      	movs	r2, #0
 80039f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	3301      	adds	r3, #1
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	2b0e      	cmp	r3, #14
 80039fc:	d9f2      	bls.n	80039e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d11c      	bne.n	8003a3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a12:	f043 0302 	orr.w	r3, r3, #2
 8003a16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	e005      	b.n	8003a4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a50:	461a      	mov	r2, r3
 8003a52:	2300      	movs	r3, #0
 8003a54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a64:	461a      	mov	r2, r3
 8003a66:	680b      	ldr	r3, [r1, #0]
 8003a68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d10c      	bne.n	8003a8a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d104      	bne.n	8003a80 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a76:	2100      	movs	r1, #0
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f965 	bl	8003d48 <USB_SetDevSpeed>
 8003a7e:	e008      	b.n	8003a92 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a80:	2101      	movs	r1, #1
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f960 	bl	8003d48 <USB_SetDevSpeed>
 8003a88:	e003      	b.n	8003a92 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a8a:	2103      	movs	r1, #3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f95b 	bl	8003d48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a92:	2110      	movs	r1, #16
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f8f3 	bl	8003c80 <USB_FlushTxFifo>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f91f 	bl	8003ce8 <USB_FlushRxFifo>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aba:	461a      	mov	r2, r3
 8003abc:	2300      	movs	r3, #0
 8003abe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2300      	movs	r3, #0
 8003aca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	e043      	b.n	8003b66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003af4:	d118      	bne.n	8003b28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	e013      	b.n	8003b3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	e008      	b.n	8003b3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b34:	461a      	mov	r2, r3
 8003b36:	2300      	movs	r3, #0
 8003b38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b46:	461a      	mov	r2, r3
 8003b48:	2300      	movs	r3, #0
 8003b4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	3301      	adds	r3, #1
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d3b7      	bcc.n	8003ade <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	e043      	b.n	8003bfc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b8a:	d118      	bne.n	8003bbe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e013      	b.n	8003bd0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	e008      	b.n	8003bd0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2300      	movs	r3, #0
 8003bce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2300      	movs	r3, #0
 8003be0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d3b7      	bcc.n	8003b74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f043 0210 	orr.w	r2, r3, #16
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699a      	ldr	r2, [r3, #24]
 8003c3c:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <USB_DevInit+0x2b4>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f043 0208 	orr.w	r2, r3, #8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d105      	bne.n	8003c68 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <USB_DevInit+0x2b8>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c74:	b004      	add	sp, #16
 8003c76:	4770      	bx	lr
 8003c78:	803c3800 	.word	0x803c3800
 8003c7c:	40000004 	.word	0x40000004

08003c80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3301      	adds	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a13      	ldr	r2, [pc, #76]	; (8003ce4 <USB_FlushTxFifo+0x64>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d901      	bls.n	8003ca0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e01b      	b.n	8003cd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	daf2      	bge.n	8003c8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	019b      	lsls	r3, r3, #6
 8003cb0:	f043 0220 	orr.w	r2, r3, #32
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <USB_FlushTxFifo+0x64>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e006      	b.n	8003cd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d0f0      	beq.n	8003cb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	00030d40 	.word	0x00030d40

08003ce8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4a11      	ldr	r2, [pc, #68]	; (8003d44 <USB_FlushRxFifo+0x5c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e018      	b.n	8003d38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	daf2      	bge.n	8003cf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2210      	movs	r2, #16
 8003d16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <USB_FlushRxFifo+0x5c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e006      	b.n	8003d38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b10      	cmp	r3, #16
 8003d34:	d0f0      	beq.n	8003d18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	00030d40 	.word	0x00030d40

08003d48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	68f9      	ldr	r1, [r7, #12]
 8003d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d94:	f023 0303 	bic.w	r3, r3, #3
 8003d98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3301      	adds	r3, #1
 8003de8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4a13      	ldr	r2, [pc, #76]	; (8003e3c <USB_CoreReset+0x64>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e01b      	b.n	8003e2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	daf2      	bge.n	8003de4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f043 0201 	orr.w	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3301      	adds	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <USB_CoreReset+0x64>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e006      	b.n	8003e2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d0f0      	beq.n	8003e0e <USB_CoreReset+0x36>

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	00030d40 	.word	0x00030d40

08003e40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e56:	f3ef 8305 	mrs	r3, IPSR
 8003e5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10f      	bne.n	8003e82 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e62:	f3ef 8310 	mrs	r3, PRIMASK
 8003e66:	607b      	str	r3, [r7, #4]
  return(result);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d105      	bne.n	8003e7a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e72:	603b      	str	r3, [r7, #0]
  return(result);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <osKernelInitialize+0x3a>
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <osKernelInitialize+0x64>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d103      	bne.n	8003e8a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003e82:	f06f 0305 	mvn.w	r3, #5
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	e00c      	b.n	8003ea4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <osKernelInitialize+0x64>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d105      	bne.n	8003e9e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e92:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <osKernelInitialize+0x64>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	e002      	b.n	8003ea4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	200007f8 	.word	0x200007f8

08003eb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ebe:	f3ef 8305 	mrs	r3, IPSR
 8003ec2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eca:	f3ef 8310 	mrs	r3, PRIMASK
 8003ece:	607b      	str	r3, [r7, #4]
  return(result);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d105      	bne.n	8003ee2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ed6:	f3ef 8311 	mrs	r3, BASEPRI
 8003eda:	603b      	str	r3, [r7, #0]
  return(result);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <osKernelStart+0x3a>
 8003ee2:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <osKernelStart+0x68>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d103      	bne.n	8003ef2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003eea:	f06f 0305 	mvn.w	r3, #5
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e010      	b.n	8003f14 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ef2:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <osKernelStart+0x68>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d109      	bne.n	8003f0e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003efa:	f7ff ffa1 	bl	8003e40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003efe:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <osKernelStart+0x68>)
 8003f00:	2202      	movs	r2, #2
 8003f02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f04:	f001 f8f6 	bl	80050f4 <vTaskStartScheduler>
      stat = osOK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	e002      	b.n	8003f14 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f14:	68fb      	ldr	r3, [r7, #12]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	200007f8 	.word	0x200007f8

08003f24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b090      	sub	sp, #64	; 0x40
 8003f28:	af04      	add	r7, sp, #16
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f34:	f3ef 8305 	mrs	r3, IPSR
 8003f38:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f3a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f040 808f 	bne.w	8004060 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f42:	f3ef 8310 	mrs	r3, PRIMASK
 8003f46:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f4e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f52:	617b      	str	r3, [r7, #20]
  return(result);
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <osThreadNew+0x3e>
 8003f5a:	4b44      	ldr	r3, [pc, #272]	; (800406c <osThreadNew+0x148>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d07e      	beq.n	8004060 <osThreadNew+0x13c>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d07b      	beq.n	8004060 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003f6c:	2318      	movs	r3, #24
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003f74:	f04f 33ff 	mov.w	r3, #4294967295
 8003f78:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d045      	beq.n	800400c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <osThreadNew+0x6a>
        name = attr->name;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d008      	beq.n	8003fb4 <osThreadNew+0x90>
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	2b38      	cmp	r3, #56	; 0x38
 8003fa6:	d805      	bhi.n	8003fb4 <osThreadNew+0x90>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <osThreadNew+0x94>
        return (NULL);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e054      	b.n	8004062 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	089b      	lsrs	r3, r3, #2
 8003fc6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00e      	beq.n	8003fee <osThreadNew+0xca>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	2b5b      	cmp	r3, #91	; 0x5b
 8003fd6:	d90a      	bls.n	8003fee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d006      	beq.n	8003fee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <osThreadNew+0xca>
        mem = 1;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	623b      	str	r3, [r7, #32]
 8003fec:	e010      	b.n	8004010 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10c      	bne.n	8004010 <osThreadNew+0xec>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d108      	bne.n	8004010 <osThreadNew+0xec>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <osThreadNew+0xec>
          mem = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	623b      	str	r3, [r7, #32]
 800400a:	e001      	b.n	8004010 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d110      	bne.n	8004038 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800401e:	9202      	str	r2, [sp, #8]
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800402a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fe81 	bl	8004d34 <xTaskCreateStatic>
 8004032:	4603      	mov	r3, r0
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	e013      	b.n	8004060 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d110      	bne.n	8004060 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	b29a      	uxth	r2, r3
 8004042:	f107 0310 	add.w	r3, r7, #16
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 fed2 	bl	8004dfa <xTaskCreate>
 8004056:	4603      	mov	r3, r0
 8004058:	2b01      	cmp	r3, #1
 800405a:	d001      	beq.n	8004060 <osThreadNew+0x13c>
          hTask = NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004060:	693b      	ldr	r3, [r7, #16]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3730      	adds	r7, #48	; 0x30
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	200007f8 	.word	0x200007f8

08004070 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004078:	f3ef 8305 	mrs	r3, IPSR
 800407c:	613b      	str	r3, [r7, #16]
  return(result);
 800407e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10f      	bne.n	80040a4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004084:	f3ef 8310 	mrs	r3, PRIMASK
 8004088:	60fb      	str	r3, [r7, #12]
  return(result);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004090:	f3ef 8311 	mrs	r3, BASEPRI
 8004094:	60bb      	str	r3, [r7, #8]
  return(result);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <osDelay+0x3c>
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <osDelay+0x58>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d103      	bne.n	80040ac <osDelay+0x3c>
    stat = osErrorISR;
 80040a4:	f06f 0305 	mvn.w	r3, #5
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e007      	b.n	80040bc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <osDelay+0x4c>
      vTaskDelay(ticks);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 ffe6 	bl	8005088 <vTaskDelay>
    }
  }

  return (stat);
 80040bc:	697b      	ldr	r3, [r7, #20]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	200007f8 	.word	0x200007f8

080040cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4a07      	ldr	r2, [pc, #28]	; (80040f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80040dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4a06      	ldr	r2, [pc, #24]	; (80040fc <vApplicationGetIdleTaskMemory+0x30>)
 80040e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2280      	movs	r2, #128	; 0x80
 80040e8:	601a      	str	r2, [r3, #0]
}
 80040ea:	bf00      	nop
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	200007fc 	.word	0x200007fc
 80040fc:	20000858 	.word	0x20000858

08004100 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4a07      	ldr	r2, [pc, #28]	; (800412c <vApplicationGetTimerTaskMemory+0x2c>)
 8004110:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4a06      	ldr	r2, [pc, #24]	; (8004130 <vApplicationGetTimerTaskMemory+0x30>)
 8004116:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800411e:	601a      	str	r2, [r3, #0]
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	20000a58 	.word	0x20000a58
 8004130:	20000ab4 	.word	0x20000ab4

08004134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f103 0208 	add.w	r2, r3, #8
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f04f 32ff 	mov.w	r2, #4294967295
 800414c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f103 0208 	add.w	r2, r3, #8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f103 0208 	add.w	r2, r3, #8
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	601a      	str	r2, [r3, #0]
}
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d103      	bne.n	80041f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e00c      	b.n	8004210 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3308      	adds	r3, #8
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	e002      	b.n	8004204 <vListInsert+0x2e>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	429a      	cmp	r2, r3
 800420e:	d2f6      	bcs.n	80041fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	601a      	str	r2, [r3, #0]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6892      	ldr	r2, [r2, #8]
 800425e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6852      	ldr	r2, [r2, #4]
 8004268:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	429a      	cmp	r2, r3
 8004272:	d103      	bne.n	800427c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	1e5a      	subs	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10c      	bne.n	80042ca <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	b672      	cpsid	i
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	b662      	cpsie	i
 80042c4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80042ca:	f002 f8bf 	bl	800644c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	68f9      	ldr	r1, [r7, #12]
 80042d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	441a      	add	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	3b01      	subs	r3, #1
 80042fc:	68f9      	ldr	r1, [r7, #12]
 80042fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	441a      	add	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	22ff      	movs	r2, #255	; 0xff
 800430e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	22ff      	movs	r2, #255	; 0xff
 8004316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d114      	bne.n	800434a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01a      	beq.n	800435e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3310      	adds	r3, #16
 800432c:	4618      	mov	r0, r3
 800432e:	f001 f979 	bl	8005624 <xTaskRemoveFromEventList>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d012      	beq.n	800435e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <xQueueGenericReset+0xd0>)
 800433a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	e009      	b.n	800435e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3310      	adds	r3, #16
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fef0 	bl	8004134 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3324      	adds	r3, #36	; 0x24
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff feeb 	bl	8004134 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800435e:	f002 f8a9 	bl	80064b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004362:	2301      	movs	r3, #1
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	e000ed04 	.word	0xe000ed04

08004370 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08e      	sub	sp, #56	; 0x38
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10c      	bne.n	800439e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	b672      	cpsid	i
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	b662      	cpsie	i
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800439a:	bf00      	nop
 800439c:	e7fe      	b.n	800439c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10c      	bne.n	80043be <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	b672      	cpsid	i
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	b662      	cpsie	i
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043ba:	bf00      	nop
 80043bc:	e7fe      	b.n	80043bc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <xQueueGenericCreateStatic+0x5a>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <xQueueGenericCreateStatic+0x5e>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <xQueueGenericCreateStatic+0x60>
 80043ce:	2300      	movs	r3, #0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10c      	bne.n	80043ee <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	b672      	cpsid	i
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	b662      	cpsie	i
 80043e8:	623b      	str	r3, [r7, #32]
}
 80043ea:	bf00      	nop
 80043ec:	e7fe      	b.n	80043ec <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d102      	bne.n	80043fa <xQueueGenericCreateStatic+0x8a>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <xQueueGenericCreateStatic+0x8e>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <xQueueGenericCreateStatic+0x90>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10c      	bne.n	800441e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	b672      	cpsid	i
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	b662      	cpsie	i
 8004418:	61fb      	str	r3, [r7, #28]
}
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800441e:	2350      	movs	r3, #80	; 0x50
 8004420:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b50      	cmp	r3, #80	; 0x50
 8004426:	d00c      	beq.n	8004442 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	b672      	cpsid	i
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	b662      	cpsie	i
 800443c:	61bb      	str	r3, [r7, #24]
}
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004442:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00d      	beq.n	800446a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004456:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	4613      	mov	r3, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f847 	bl	80044f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800446c:	4618      	mov	r0, r3
 800446e:	3730      	adds	r7, #48	; 0x30
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	; 0x28
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10c      	bne.n	80044a2 <xQueueGenericCreate+0x2e>
	__asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448c:	b672      	cpsid	i
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	b662      	cpsie	i
 800449c:	613b      	str	r3, [r7, #16]
}
 800449e:	bf00      	nop
 80044a0:	e7fe      	b.n	80044a0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d102      	bne.n	80044ae <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	e004      	b.n	80044b8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	3350      	adds	r3, #80	; 0x50
 80044bc:	4618      	mov	r0, r3
 80044be:	f002 f8f1 	bl	80066a4 <pvPortMalloc>
 80044c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d011      	beq.n	80044ee <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	3350      	adds	r3, #80	; 0x50
 80044d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044dc:	79fa      	ldrb	r2, [r7, #7]
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	4613      	mov	r3, r2
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f805 	bl	80044f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044ee:	69bb      	ldr	r3, [r7, #24]
	}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3720      	adds	r7, #32
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d103      	bne.n	8004514 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e002      	b.n	800451a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004526:	2101      	movs	r1, #1
 8004528:	69b8      	ldr	r0, [r7, #24]
 800452a:	f7ff feb7 	bl	800429c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	78fa      	ldrb	r2, [r7, #3]
 8004532:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08e      	sub	sp, #56	; 0x38
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800454e:	2300      	movs	r3, #0
 8004550:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10c      	bne.n	8004576 <xQueueGenericSend+0x36>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	b672      	cpsid	i
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	b662      	cpsie	i
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d103      	bne.n	8004584 <xQueueGenericSend+0x44>
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <xQueueGenericSend+0x48>
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <xQueueGenericSend+0x4a>
 8004588:	2300      	movs	r3, #0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10c      	bne.n	80045a8 <xQueueGenericSend+0x68>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	b672      	cpsid	i
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	b662      	cpsie	i
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045a4:	bf00      	nop
 80045a6:	e7fe      	b.n	80045a6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d103      	bne.n	80045b6 <xQueueGenericSend+0x76>
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <xQueueGenericSend+0x7a>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <xQueueGenericSend+0x7c>
 80045ba:	2300      	movs	r3, #0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10c      	bne.n	80045da <xQueueGenericSend+0x9a>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	b672      	cpsid	i
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	b662      	cpsie	i
 80045d4:	623b      	str	r3, [r7, #32]
}
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045da:	f001 f9e9 	bl	80059b0 <xTaskGetSchedulerState>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d102      	bne.n	80045ea <xQueueGenericSend+0xaa>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <xQueueGenericSend+0xae>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <xQueueGenericSend+0xb0>
 80045ee:	2300      	movs	r3, #0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10c      	bne.n	800460e <xQueueGenericSend+0xce>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	b672      	cpsid	i
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	b662      	cpsie	i
 8004608:	61fb      	str	r3, [r7, #28]
}
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800460e:	f001 ff1d 	bl	800644c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461a:	429a      	cmp	r2, r3
 800461c:	d302      	bcc.n	8004624 <xQueueGenericSend+0xe4>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d129      	bne.n	8004678 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800462a:	f000 fa15 	bl	8004a58 <prvCopyDataToQueue>
 800462e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	2b00      	cmp	r3, #0
 8004636:	d010      	beq.n	800465a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	3324      	adds	r3, #36	; 0x24
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fff1 	bl	8005624 <xTaskRemoveFromEventList>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d013      	beq.n	8004670 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004648:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <xQueueGenericSend+0x208>)
 800464a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	e00a      	b.n	8004670 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004660:	4b39      	ldr	r3, [pc, #228]	; (8004748 <xQueueGenericSend+0x208>)
 8004662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004670:	f001 ff20 	bl	80064b4 <vPortExitCritical>
				return pdPASS;
 8004674:	2301      	movs	r3, #1
 8004676:	e063      	b.n	8004740 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800467e:	f001 ff19 	bl	80064b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004682:	2300      	movs	r3, #0
 8004684:	e05c      	b.n	8004740 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004688:	2b00      	cmp	r3, #0
 800468a:	d106      	bne.n	800469a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800468c:	f107 0314 	add.w	r3, r7, #20
 8004690:	4618      	mov	r0, r3
 8004692:	f001 f82d 	bl	80056f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004696:	2301      	movs	r3, #1
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800469a:	f001 ff0b 	bl	80064b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800469e:	f000 fd93 	bl	80051c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046a2:	f001 fed3 	bl	800644c <vPortEnterCritical>
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046ac:	b25b      	sxtb	r3, r3
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d103      	bne.n	80046bc <xQueueGenericSend+0x17c>
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046c2:	b25b      	sxtb	r3, r3
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d103      	bne.n	80046d2 <xQueueGenericSend+0x192>
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046d2:	f001 feef 	bl	80064b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046d6:	1d3a      	adds	r2, r7, #4
 80046d8:	f107 0314 	add.w	r3, r7, #20
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f001 f81c 	bl	800571c <xTaskCheckForTimeOut>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d124      	bne.n	8004734 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ec:	f000 faac 	bl	8004c48 <prvIsQueueFull>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d018      	beq.n	8004728 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	3310      	adds	r3, #16
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 ff3c 	bl	800557c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004706:	f000 fa37 	bl	8004b78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800470a:	f000 fd6b 	bl	80051e4 <xTaskResumeAll>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	f47f af7c 	bne.w	800460e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004716:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <xQueueGenericSend+0x208>)
 8004718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	e772      	b.n	800460e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800472a:	f000 fa25 	bl	8004b78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800472e:	f000 fd59 	bl	80051e4 <xTaskResumeAll>
 8004732:	e76c      	b.n	800460e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004736:	f000 fa1f 	bl	8004b78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800473a:	f000 fd53 	bl	80051e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800473e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004740:	4618      	mov	r0, r3
 8004742:	3738      	adds	r7, #56	; 0x38
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08e      	sub	sp, #56	; 0x38
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10c      	bne.n	800477e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004768:	b672      	cpsid	i
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	b662      	cpsie	i
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
}
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d103      	bne.n	800478c <xQueueGenericSendFromISR+0x40>
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <xQueueGenericSendFromISR+0x44>
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <xQueueGenericSendFromISR+0x46>
 8004790:	2300      	movs	r3, #0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10c      	bne.n	80047b0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	b672      	cpsid	i
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	b662      	cpsie	i
 80047aa:	623b      	str	r3, [r7, #32]
}
 80047ac:	bf00      	nop
 80047ae:	e7fe      	b.n	80047ae <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d103      	bne.n	80047be <xQueueGenericSendFromISR+0x72>
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <xQueueGenericSendFromISR+0x76>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <xQueueGenericSendFromISR+0x78>
 80047c2:	2300      	movs	r3, #0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10c      	bne.n	80047e2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	b672      	cpsid	i
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	b662      	cpsie	i
 80047dc:	61fb      	str	r3, [r7, #28]
}
 80047de:	bf00      	nop
 80047e0:	e7fe      	b.n	80047e0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047e2:	f001 ff1b 	bl	800661c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047e6:	f3ef 8211 	mrs	r2, BASEPRI
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	b672      	cpsid	i
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	b662      	cpsie	i
 80047fe:	61ba      	str	r2, [r7, #24]
 8004800:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004802:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480e:	429a      	cmp	r2, r3
 8004810:	d302      	bcc.n	8004818 <xQueueGenericSendFromISR+0xcc>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d12c      	bne.n	8004872 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800481e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004828:	f000 f916 	bl	8004a58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800482c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d112      	bne.n	800485c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	3324      	adds	r3, #36	; 0x24
 8004842:	4618      	mov	r0, r3
 8004844:	f000 feee 	bl	8005624 <xTaskRemoveFromEventList>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00e      	beq.n	800486c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e007      	b.n	800486c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800485c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004860:	3301      	adds	r3, #1
 8004862:	b2db      	uxtb	r3, r3
 8004864:	b25a      	sxtb	r2, r3
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800486c:	2301      	movs	r3, #1
 800486e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004870:	e001      	b.n	8004876 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004872:	2300      	movs	r3, #0
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004878:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004880:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004884:	4618      	mov	r0, r3
 8004886:	3738      	adds	r7, #56	; 0x38
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08c      	sub	sp, #48	; 0x30
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004898:	2300      	movs	r3, #0
 800489a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10c      	bne.n	80048c0 <xQueueReceive+0x34>
	__asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048aa:	b672      	cpsid	i
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	b662      	cpsie	i
 80048ba:	623b      	str	r3, [r7, #32]
}
 80048bc:	bf00      	nop
 80048be:	e7fe      	b.n	80048be <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d103      	bne.n	80048ce <xQueueReceive+0x42>
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <xQueueReceive+0x46>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <xQueueReceive+0x48>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10c      	bne.n	80048f2 <xQueueReceive+0x66>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	b672      	cpsid	i
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	b662      	cpsie	i
 80048ec:	61fb      	str	r3, [r7, #28]
}
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048f2:	f001 f85d 	bl	80059b0 <xTaskGetSchedulerState>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d102      	bne.n	8004902 <xQueueReceive+0x76>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <xQueueReceive+0x7a>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <xQueueReceive+0x7c>
 8004906:	2300      	movs	r3, #0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10c      	bne.n	8004926 <xQueueReceive+0x9a>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	b672      	cpsid	i
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	b662      	cpsie	i
 8004920:	61bb      	str	r3, [r7, #24]
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004926:	f001 fd91 	bl	800644c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	2b00      	cmp	r3, #0
 8004934:	d01f      	beq.n	8004976 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800493a:	f000 f8f7 	bl	8004b2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	1e5a      	subs	r2, r3, #1
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00f      	beq.n	800496e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	3310      	adds	r3, #16
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fe66 	bl	8005624 <xTaskRemoveFromEventList>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800495e:	4b3d      	ldr	r3, [pc, #244]	; (8004a54 <xQueueReceive+0x1c8>)
 8004960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800496e:	f001 fda1 	bl	80064b4 <vPortExitCritical>
				return pdPASS;
 8004972:	2301      	movs	r3, #1
 8004974:	e069      	b.n	8004a4a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d103      	bne.n	8004984 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800497c:	f001 fd9a 	bl	80064b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004980:	2300      	movs	r3, #0
 8004982:	e062      	b.n	8004a4a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800498a:	f107 0310 	add.w	r3, r7, #16
 800498e:	4618      	mov	r0, r3
 8004990:	f000 feae 	bl	80056f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004994:	2301      	movs	r3, #1
 8004996:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004998:	f001 fd8c 	bl	80064b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800499c:	f000 fc14 	bl	80051c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049a0:	f001 fd54 	bl	800644c <vPortEnterCritical>
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049aa:	b25b      	sxtb	r3, r3
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d103      	bne.n	80049ba <xQueueReceive+0x12e>
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049c0:	b25b      	sxtb	r3, r3
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c6:	d103      	bne.n	80049d0 <xQueueReceive+0x144>
 80049c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d0:	f001 fd70 	bl	80064b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049d4:	1d3a      	adds	r2, r7, #4
 80049d6:	f107 0310 	add.w	r3, r7, #16
 80049da:	4611      	mov	r1, r2
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fe9d 	bl	800571c <xTaskCheckForTimeOut>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d123      	bne.n	8004a30 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ea:	f000 f917 	bl	8004c1c <prvIsQueueEmpty>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d017      	beq.n	8004a24 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	3324      	adds	r3, #36	; 0x24
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	4611      	mov	r1, r2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fdbd 	bl	800557c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a04:	f000 f8b8 	bl	8004b78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a08:	f000 fbec 	bl	80051e4 <xTaskResumeAll>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d189      	bne.n	8004926 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004a12:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <xQueueReceive+0x1c8>)
 8004a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	e780      	b.n	8004926 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a26:	f000 f8a7 	bl	8004b78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a2a:	f000 fbdb 	bl	80051e4 <xTaskResumeAll>
 8004a2e:	e77a      	b.n	8004926 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a32:	f000 f8a1 	bl	8004b78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a36:	f000 fbd5 	bl	80051e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a3c:	f000 f8ee 	bl	8004c1c <prvIsQueueEmpty>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f43f af6f 	beq.w	8004926 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3730      	adds	r7, #48	; 0x30
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	e000ed04 	.word	0xe000ed04

08004a58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10d      	bne.n	8004a92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d14d      	bne.n	8004b1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 ffb2 	bl	80059ec <xTaskPriorityDisinherit>
 8004a88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	609a      	str	r2, [r3, #8]
 8004a90:	e043      	b.n	8004b1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d119      	bne.n	8004acc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6858      	ldr	r0, [r3, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	f002 f806 	bl	8006ab4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	441a      	add	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d32b      	bcc.n	8004b1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	e026      	b.n	8004b1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	68d8      	ldr	r0, [r3, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	f001 ffec 	bl	8006ab4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	425b      	negs	r3, r3
 8004ae6:	441a      	add	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d207      	bcs.n	8004b08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	425b      	negs	r3, r3
 8004b02:	441a      	add	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d105      	bne.n	8004b1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b22:	697b      	ldr	r3, [r7, #20]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d018      	beq.n	8004b70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	441a      	add	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d303      	bcc.n	8004b60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68d9      	ldr	r1, [r3, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	461a      	mov	r2, r3
 8004b6a:	6838      	ldr	r0, [r7, #0]
 8004b6c:	f001 ffa2 	bl	8006ab4 <memcpy>
	}
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b80:	f001 fc64 	bl	800644c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b8c:	e011      	b.n	8004bb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d012      	beq.n	8004bbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3324      	adds	r3, #36	; 0x24
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fd42 	bl	8005624 <xTaskRemoveFromEventList>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ba6:	f000 fe1f 	bl	80057e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	dce9      	bgt.n	8004b8e <prvUnlockQueue+0x16>
 8004bba:	e000      	b.n	8004bbe <prvUnlockQueue+0x46>
					break;
 8004bbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	22ff      	movs	r2, #255	; 0xff
 8004bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004bc6:	f001 fc75 	bl	80064b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bca:	f001 fc3f 	bl	800644c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bd6:	e011      	b.n	8004bfc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d012      	beq.n	8004c06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3310      	adds	r3, #16
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fd1d 	bl	8005624 <xTaskRemoveFromEventList>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bf0:	f000 fdfa 	bl	80057e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bf4:	7bbb      	ldrb	r3, [r7, #14]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	dce9      	bgt.n	8004bd8 <prvUnlockQueue+0x60>
 8004c04:	e000      	b.n	8004c08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	22ff      	movs	r2, #255	; 0xff
 8004c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c10:	f001 fc50 	bl	80064b4 <vPortExitCritical>
}
 8004c14:	bf00      	nop
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c24:	f001 fc12 	bl	800644c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d102      	bne.n	8004c36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c30:	2301      	movs	r3, #1
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e001      	b.n	8004c3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c3a:	f001 fc3b 	bl	80064b4 <vPortExitCritical>

	return xReturn;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c50:	f001 fbfc 	bl	800644c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d102      	bne.n	8004c66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e001      	b.n	8004c6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c6a:	f001 fc23 	bl	80064b4 <vPortExitCritical>

	return xReturn;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	e014      	b.n	8004cb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c88:	4a0f      	ldr	r2, [pc, #60]	; (8004cc8 <vQueueAddToRegistry+0x50>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c94:	490c      	ldr	r1, [pc, #48]	; (8004cc8 <vQueueAddToRegistry+0x50>)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c9e:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <vQueueAddToRegistry+0x50>)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004caa:	e006      	b.n	8004cba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b07      	cmp	r3, #7
 8004cb6:	d9e7      	bls.n	8004c88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	20000eb4 	.word	0x20000eb4

08004ccc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004cdc:	f001 fbb6 	bl	800644c <vPortEnterCritical>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ce6:	b25b      	sxtb	r3, r3
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d103      	bne.n	8004cf6 <vQueueWaitForMessageRestricted+0x2a>
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cfc:	b25b      	sxtb	r3, r3
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d02:	d103      	bne.n	8004d0c <vQueueWaitForMessageRestricted+0x40>
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d0c:	f001 fbd2 	bl	80064b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d106      	bne.n	8004d26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	3324      	adds	r3, #36	; 0x24
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fc51 	bl	80055c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d26:	6978      	ldr	r0, [r7, #20]
 8004d28:	f7ff ff26 	bl	8004b78 <prvUnlockQueue>
	}
 8004d2c:	bf00      	nop
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08e      	sub	sp, #56	; 0x38
 8004d38:	af04      	add	r7, sp, #16
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10c      	bne.n	8004d62 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	b672      	cpsid	i
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	b662      	cpsie	i
 8004d5c:	623b      	str	r3, [r7, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10c      	bne.n	8004d82 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	b672      	cpsid	i
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	b662      	cpsie	i
 8004d7c:	61fb      	str	r3, [r7, #28]
}
 8004d7e:	bf00      	nop
 8004d80:	e7fe      	b.n	8004d80 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d82:	235c      	movs	r3, #92	; 0x5c
 8004d84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	2b5c      	cmp	r3, #92	; 0x5c
 8004d8a:	d00c      	beq.n	8004da6 <xTaskCreateStatic+0x72>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	b672      	cpsid	i
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	b662      	cpsie	i
 8004da0:	61bb      	str	r3, [r7, #24]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004da6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01e      	beq.n	8004dec <xTaskCreateStatic+0xb8>
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01b      	beq.n	8004dec <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9303      	str	r3, [sp, #12]
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	9302      	str	r3, [sp, #8]
 8004dce:	f107 0314 	add.w	r3, r7, #20
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f850 	bl	8004e84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004de4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004de6:	f000 f8df 	bl	8004fa8 <prvAddNewTaskToReadyList>
 8004dea:	e001      	b.n	8004df0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004df0:	697b      	ldr	r3, [r7, #20]
	}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3728      	adds	r7, #40	; 0x28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b08c      	sub	sp, #48	; 0x30
 8004dfe:	af04      	add	r7, sp, #16
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	4613      	mov	r3, r2
 8004e08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e0a:	88fb      	ldrh	r3, [r7, #6]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 fc48 	bl	80066a4 <pvPortMalloc>
 8004e14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00e      	beq.n	8004e3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e1c:	205c      	movs	r0, #92	; 0x5c
 8004e1e:	f001 fc41 	bl	80066a4 <pvPortMalloc>
 8004e22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004e30:	e005      	b.n	8004e3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e32:	6978      	ldr	r0, [r7, #20]
 8004e34:	f001 fd00 	bl	8006838 <vPortFree>
 8004e38:	e001      	b.n	8004e3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d017      	beq.n	8004e74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e4c:	88fa      	ldrh	r2, [r7, #6]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	9303      	str	r3, [sp, #12]
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	9302      	str	r3, [sp, #8]
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	9301      	str	r3, [sp, #4]
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f80e 	bl	8004e84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e68:	69f8      	ldr	r0, [r7, #28]
 8004e6a:	f000 f89d 	bl	8004fa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	e002      	b.n	8004e7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e74:	f04f 33ff 	mov.w	r3, #4294967295
 8004e78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e7a:	69bb      	ldr	r3, [r7, #24]
	}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3720      	adds	r7, #32
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	21a5      	movs	r1, #165	; 0xa5
 8004e9e:	f001 fe17 	bl	8006ad0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004eac:	440b      	add	r3, r1
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f023 0307 	bic.w	r3, r3, #7
 8004eba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00c      	beq.n	8004ee0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	b672      	cpsid	i
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	b662      	cpsie	i
 8004eda:	617b      	str	r3, [r7, #20]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01f      	beq.n	8004f26 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
 8004eea:	e012      	b.n	8004f12 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	7819      	ldrb	r1, [r3, #0]
 8004ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	4413      	add	r3, r2
 8004efa:	3334      	adds	r3, #52	; 0x34
 8004efc:	460a      	mov	r2, r1
 8004efe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d006      	beq.n	8004f1a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	2b0f      	cmp	r3, #15
 8004f16:	d9e9      	bls.n	8004eec <prvInitialiseNewTask+0x68>
 8004f18:	e000      	b.n	8004f1c <prvInitialiseNewTask+0x98>
			{
				break;
 8004f1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f24:	e003      	b.n	8004f2e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	2b37      	cmp	r3, #55	; 0x37
 8004f32:	d901      	bls.n	8004f38 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f34:	2337      	movs	r3, #55	; 0x37
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	2200      	movs	r2, #0
 8004f48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff f910 	bl	8004174 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	3318      	adds	r3, #24
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff f90b 	bl	8004174 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	2200      	movs	r2, #0
 8004f78:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	68f9      	ldr	r1, [r7, #12]
 8004f86:	69b8      	ldr	r0, [r7, #24]
 8004f88:	f001 f952 	bl	8006230 <pxPortInitialiseStack>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f9e:	bf00      	nop
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fb0:	f001 fa4c 	bl	800644c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fb4:	4b2d      	ldr	r3, [pc, #180]	; (800506c <prvAddNewTaskToReadyList+0xc4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	4a2c      	ldr	r2, [pc, #176]	; (800506c <prvAddNewTaskToReadyList+0xc4>)
 8004fbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fbe:	4b2c      	ldr	r3, [pc, #176]	; (8005070 <prvAddNewTaskToReadyList+0xc8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fc6:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <prvAddNewTaskToReadyList+0xc8>)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fcc:	4b27      	ldr	r3, [pc, #156]	; (800506c <prvAddNewTaskToReadyList+0xc4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d110      	bne.n	8004ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fd4:	f000 fc2c 	bl	8005830 <prvInitialiseTaskLists>
 8004fd8:	e00d      	b.n	8004ff6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fda:	4b26      	ldr	r3, [pc, #152]	; (8005074 <prvAddNewTaskToReadyList+0xcc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fe2:	4b23      	ldr	r3, [pc, #140]	; (8005070 <prvAddNewTaskToReadyList+0xc8>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d802      	bhi.n	8004ff6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ff0:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <prvAddNewTaskToReadyList+0xc8>)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ff6:	4b20      	ldr	r3, [pc, #128]	; (8005078 <prvAddNewTaskToReadyList+0xd0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	4a1e      	ldr	r2, [pc, #120]	; (8005078 <prvAddNewTaskToReadyList+0xd0>)
 8004ffe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005000:	4b1d      	ldr	r3, [pc, #116]	; (8005078 <prvAddNewTaskToReadyList+0xd0>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500c:	4b1b      	ldr	r3, [pc, #108]	; (800507c <prvAddNewTaskToReadyList+0xd4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d903      	bls.n	800501c <prvAddNewTaskToReadyList+0x74>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	4a18      	ldr	r2, [pc, #96]	; (800507c <prvAddNewTaskToReadyList+0xd4>)
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4a15      	ldr	r2, [pc, #84]	; (8005080 <prvAddNewTaskToReadyList+0xd8>)
 800502a:	441a      	add	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3304      	adds	r3, #4
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f7ff f8ab 	bl	800418e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005038:	f001 fa3c 	bl	80064b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800503c:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <prvAddNewTaskToReadyList+0xcc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00e      	beq.n	8005062 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <prvAddNewTaskToReadyList+0xc8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	429a      	cmp	r2, r3
 8005050:	d207      	bcs.n	8005062 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005052:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <prvAddNewTaskToReadyList+0xdc>)
 8005054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	200013c8 	.word	0x200013c8
 8005070:	20000ef4 	.word	0x20000ef4
 8005074:	200013d4 	.word	0x200013d4
 8005078:	200013e4 	.word	0x200013e4
 800507c:	200013d0 	.word	0x200013d0
 8005080:	20000ef8 	.word	0x20000ef8
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d019      	beq.n	80050ce <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800509a:	4b14      	ldr	r3, [pc, #80]	; (80050ec <vTaskDelay+0x64>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00c      	beq.n	80050bc <vTaskDelay+0x34>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	b672      	cpsid	i
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	b662      	cpsie	i
 80050b6:	60bb      	str	r3, [r7, #8]
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <vTaskDelay+0x32>
			vTaskSuspendAll();
 80050bc:	f000 f884 	bl	80051c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050c0:	2100      	movs	r1, #0
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fd04 	bl	8005ad0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050c8:	f000 f88c 	bl	80051e4 <xTaskResumeAll>
 80050cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d107      	bne.n	80050e4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <vTaskDelay+0x68>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	200013f0 	.word	0x200013f0
 80050f0:	e000ed04 	.word	0xe000ed04

080050f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	; 0x28
 80050f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005102:	463a      	mov	r2, r7
 8005104:	1d39      	adds	r1, r7, #4
 8005106:	f107 0308 	add.w	r3, r7, #8
 800510a:	4618      	mov	r0, r3
 800510c:	f7fe ffde 	bl	80040cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005110:	6839      	ldr	r1, [r7, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	9202      	str	r2, [sp, #8]
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	2300      	movs	r3, #0
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	2300      	movs	r3, #0
 8005120:	460a      	mov	r2, r1
 8005122:	4923      	ldr	r1, [pc, #140]	; (80051b0 <vTaskStartScheduler+0xbc>)
 8005124:	4823      	ldr	r0, [pc, #140]	; (80051b4 <vTaskStartScheduler+0xc0>)
 8005126:	f7ff fe05 	bl	8004d34 <xTaskCreateStatic>
 800512a:	4603      	mov	r3, r0
 800512c:	4a22      	ldr	r2, [pc, #136]	; (80051b8 <vTaskStartScheduler+0xc4>)
 800512e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005130:	4b21      	ldr	r3, [pc, #132]	; (80051b8 <vTaskStartScheduler+0xc4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005138:	2301      	movs	r3, #1
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	e001      	b.n	8005142 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d102      	bne.n	800514e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005148:	f000 fd16 	bl	8005b78 <xTimerCreateTimerTask>
 800514c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d118      	bne.n	8005186 <vTaskStartScheduler+0x92>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	b672      	cpsid	i
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	b662      	cpsie	i
 8005168:	613b      	str	r3, [r7, #16]
}
 800516a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <vTaskStartScheduler+0xc8>)
 800516e:	f04f 32ff 	mov.w	r2, #4294967295
 8005172:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005174:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <vTaskStartScheduler+0xcc>)
 8005176:	2201      	movs	r2, #1
 8005178:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800517a:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <vTaskStartScheduler+0xd0>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005180:	f001 f8e6 	bl	8006350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005184:	e010      	b.n	80051a8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518c:	d10c      	bne.n	80051a8 <vTaskStartScheduler+0xb4>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	b672      	cpsid	i
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	b662      	cpsie	i
 80051a2:	60fb      	str	r3, [r7, #12]
}
 80051a4:	bf00      	nop
 80051a6:	e7fe      	b.n	80051a6 <vTaskStartScheduler+0xb2>
}
 80051a8:	bf00      	nop
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	08006b04 	.word	0x08006b04
 80051b4:	08005801 	.word	0x08005801
 80051b8:	200013ec 	.word	0x200013ec
 80051bc:	200013e8 	.word	0x200013e8
 80051c0:	200013d4 	.word	0x200013d4
 80051c4:	200013cc 	.word	0x200013cc

080051c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80051cc:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <vTaskSuspendAll+0x18>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3301      	adds	r3, #1
 80051d2:	4a03      	ldr	r2, [pc, #12]	; (80051e0 <vTaskSuspendAll+0x18>)
 80051d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80051d6:	bf00      	nop
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	200013f0 	.word	0x200013f0

080051e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051f2:	4b43      	ldr	r3, [pc, #268]	; (8005300 <xTaskResumeAll+0x11c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10c      	bne.n	8005214 <xTaskResumeAll+0x30>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	b672      	cpsid	i
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	b662      	cpsie	i
 800520e:	603b      	str	r3, [r7, #0]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005214:	f001 f91a 	bl	800644c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005218:	4b39      	ldr	r3, [pc, #228]	; (8005300 <xTaskResumeAll+0x11c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3b01      	subs	r3, #1
 800521e:	4a38      	ldr	r2, [pc, #224]	; (8005300 <xTaskResumeAll+0x11c>)
 8005220:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005222:	4b37      	ldr	r3, [pc, #220]	; (8005300 <xTaskResumeAll+0x11c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d162      	bne.n	80052f0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800522a:	4b36      	ldr	r3, [pc, #216]	; (8005304 <xTaskResumeAll+0x120>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d05e      	beq.n	80052f0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005232:	e02f      	b.n	8005294 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005234:	4b34      	ldr	r3, [pc, #208]	; (8005308 <xTaskResumeAll+0x124>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3318      	adds	r3, #24
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff f801 	bl	8004248 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3304      	adds	r3, #4
 800524a:	4618      	mov	r0, r3
 800524c:	f7fe fffc 	bl	8004248 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	4b2d      	ldr	r3, [pc, #180]	; (800530c <xTaskResumeAll+0x128>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d903      	bls.n	8005264 <xTaskResumeAll+0x80>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	4a2a      	ldr	r2, [pc, #168]	; (800530c <xTaskResumeAll+0x128>)
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4a27      	ldr	r2, [pc, #156]	; (8005310 <xTaskResumeAll+0x12c>)
 8005272:	441a      	add	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3304      	adds	r3, #4
 8005278:	4619      	mov	r1, r3
 800527a:	4610      	mov	r0, r2
 800527c:	f7fe ff87 	bl	800418e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005284:	4b23      	ldr	r3, [pc, #140]	; (8005314 <xTaskResumeAll+0x130>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	429a      	cmp	r2, r3
 800528c:	d302      	bcc.n	8005294 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800528e:	4b22      	ldr	r3, [pc, #136]	; (8005318 <xTaskResumeAll+0x134>)
 8005290:	2201      	movs	r2, #1
 8005292:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005294:	4b1c      	ldr	r3, [pc, #112]	; (8005308 <xTaskResumeAll+0x124>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1cb      	bne.n	8005234 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052a2:	f000 fb65 	bl	8005970 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80052a6:	4b1d      	ldr	r3, [pc, #116]	; (800531c <xTaskResumeAll+0x138>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d010      	beq.n	80052d4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052b2:	f000 f847 	bl	8005344 <xTaskIncrementTick>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80052bc:	4b16      	ldr	r3, [pc, #88]	; (8005318 <xTaskResumeAll+0x134>)
 80052be:	2201      	movs	r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3b01      	subs	r3, #1
 80052c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f1      	bne.n	80052b2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <xTaskResumeAll+0x138>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052d4:	4b10      	ldr	r3, [pc, #64]	; (8005318 <xTaskResumeAll+0x134>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d009      	beq.n	80052f0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052dc:	2301      	movs	r3, #1
 80052de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052e0:	4b0f      	ldr	r3, [pc, #60]	; (8005320 <xTaskResumeAll+0x13c>)
 80052e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052f0:	f001 f8e0 	bl	80064b4 <vPortExitCritical>

	return xAlreadyYielded;
 80052f4:	68bb      	ldr	r3, [r7, #8]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	200013f0 	.word	0x200013f0
 8005304:	200013c8 	.word	0x200013c8
 8005308:	20001388 	.word	0x20001388
 800530c:	200013d0 	.word	0x200013d0
 8005310:	20000ef8 	.word	0x20000ef8
 8005314:	20000ef4 	.word	0x20000ef4
 8005318:	200013dc 	.word	0x200013dc
 800531c:	200013d8 	.word	0x200013d8
 8005320:	e000ed04 	.word	0xe000ed04

08005324 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800532a:	4b05      	ldr	r3, [pc, #20]	; (8005340 <xTaskGetTickCount+0x1c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005330:	687b      	ldr	r3, [r7, #4]
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	200013cc 	.word	0x200013cc

08005344 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800534e:	4b50      	ldr	r3, [pc, #320]	; (8005490 <xTaskIncrementTick+0x14c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f040 808b 	bne.w	800546e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005358:	4b4e      	ldr	r3, [pc, #312]	; (8005494 <xTaskIncrementTick+0x150>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3301      	adds	r3, #1
 800535e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005360:	4a4c      	ldr	r2, [pc, #304]	; (8005494 <xTaskIncrementTick+0x150>)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d122      	bne.n	80053b2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800536c:	4b4a      	ldr	r3, [pc, #296]	; (8005498 <xTaskIncrementTick+0x154>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	b672      	cpsid	i
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	b662      	cpsie	i
 800538a:	603b      	str	r3, [r7, #0]
}
 800538c:	bf00      	nop
 800538e:	e7fe      	b.n	800538e <xTaskIncrementTick+0x4a>
 8005390:	4b41      	ldr	r3, [pc, #260]	; (8005498 <xTaskIncrementTick+0x154>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	4b41      	ldr	r3, [pc, #260]	; (800549c <xTaskIncrementTick+0x158>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a3f      	ldr	r2, [pc, #252]	; (8005498 <xTaskIncrementTick+0x154>)
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	4a3f      	ldr	r2, [pc, #252]	; (800549c <xTaskIncrementTick+0x158>)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	4b3e      	ldr	r3, [pc, #248]	; (80054a0 <xTaskIncrementTick+0x15c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	4a3d      	ldr	r2, [pc, #244]	; (80054a0 <xTaskIncrementTick+0x15c>)
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	f000 fadf 	bl	8005970 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053b2:	4b3c      	ldr	r3, [pc, #240]	; (80054a4 <xTaskIncrementTick+0x160>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d349      	bcc.n	8005450 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053bc:	4b36      	ldr	r3, [pc, #216]	; (8005498 <xTaskIncrementTick+0x154>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d104      	bne.n	80053d0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053c6:	4b37      	ldr	r3, [pc, #220]	; (80054a4 <xTaskIncrementTick+0x160>)
 80053c8:	f04f 32ff 	mov.w	r2, #4294967295
 80053cc:	601a      	str	r2, [r3, #0]
					break;
 80053ce:	e03f      	b.n	8005450 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d0:	4b31      	ldr	r3, [pc, #196]	; (8005498 <xTaskIncrementTick+0x154>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d203      	bcs.n	80053f0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053e8:	4a2e      	ldr	r2, [pc, #184]	; (80054a4 <xTaskIncrementTick+0x160>)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053ee:	e02f      	b.n	8005450 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	3304      	adds	r3, #4
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fe ff27 	bl	8004248 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	3318      	adds	r3, #24
 8005406:	4618      	mov	r0, r3
 8005408:	f7fe ff1e 	bl	8004248 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4b25      	ldr	r3, [pc, #148]	; (80054a8 <xTaskIncrementTick+0x164>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d903      	bls.n	8005420 <xTaskIncrementTick+0xdc>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	4a22      	ldr	r2, [pc, #136]	; (80054a8 <xTaskIncrementTick+0x164>)
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4a1f      	ldr	r2, [pc, #124]	; (80054ac <xTaskIncrementTick+0x168>)
 800542e:	441a      	add	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7fe fea9 	bl	800418e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005440:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <xTaskIncrementTick+0x16c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	429a      	cmp	r2, r3
 8005448:	d3b8      	bcc.n	80053bc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800544a:	2301      	movs	r3, #1
 800544c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800544e:	e7b5      	b.n	80053bc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005450:	4b17      	ldr	r3, [pc, #92]	; (80054b0 <xTaskIncrementTick+0x16c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005456:	4915      	ldr	r1, [pc, #84]	; (80054ac <xTaskIncrementTick+0x168>)
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d907      	bls.n	8005478 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e004      	b.n	8005478 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <xTaskIncrementTick+0x170>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3301      	adds	r3, #1
 8005474:	4a0f      	ldr	r2, [pc, #60]	; (80054b4 <xTaskIncrementTick+0x170>)
 8005476:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005478:	4b0f      	ldr	r3, [pc, #60]	; (80054b8 <xTaskIncrementTick+0x174>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005480:	2301      	movs	r3, #1
 8005482:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005484:	697b      	ldr	r3, [r7, #20]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	200013f0 	.word	0x200013f0
 8005494:	200013cc 	.word	0x200013cc
 8005498:	20001380 	.word	0x20001380
 800549c:	20001384 	.word	0x20001384
 80054a0:	200013e0 	.word	0x200013e0
 80054a4:	200013e8 	.word	0x200013e8
 80054a8:	200013d0 	.word	0x200013d0
 80054ac:	20000ef8 	.word	0x20000ef8
 80054b0:	20000ef4 	.word	0x20000ef4
 80054b4:	200013d8 	.word	0x200013d8
 80054b8:	200013dc 	.word	0x200013dc

080054bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054c2:	4b29      	ldr	r3, [pc, #164]	; (8005568 <vTaskSwitchContext+0xac>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054ca:	4b28      	ldr	r3, [pc, #160]	; (800556c <vTaskSwitchContext+0xb0>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054d0:	e043      	b.n	800555a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80054d2:	4b26      	ldr	r3, [pc, #152]	; (800556c <vTaskSwitchContext+0xb0>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d8:	4b25      	ldr	r3, [pc, #148]	; (8005570 <vTaskSwitchContext+0xb4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	e012      	b.n	8005506 <vTaskSwitchContext+0x4a>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10c      	bne.n	8005500 <vTaskSwitchContext+0x44>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	b672      	cpsid	i
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	b662      	cpsie	i
 80054fa:	607b      	str	r3, [r7, #4]
}
 80054fc:	bf00      	nop
 80054fe:	e7fe      	b.n	80054fe <vTaskSwitchContext+0x42>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3b01      	subs	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	491b      	ldr	r1, [pc, #108]	; (8005574 <vTaskSwitchContext+0xb8>)
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0e2      	beq.n	80054e0 <vTaskSwitchContext+0x24>
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4a13      	ldr	r2, [pc, #76]	; (8005574 <vTaskSwitchContext+0xb8>)
 8005526:	4413      	add	r3, r2
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	605a      	str	r2, [r3, #4]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	3308      	adds	r3, #8
 800553c:	429a      	cmp	r2, r3
 800553e:	d104      	bne.n	800554a <vTaskSwitchContext+0x8e>
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	605a      	str	r2, [r3, #4]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4a09      	ldr	r2, [pc, #36]	; (8005578 <vTaskSwitchContext+0xbc>)
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	4a06      	ldr	r2, [pc, #24]	; (8005570 <vTaskSwitchContext+0xb4>)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6013      	str	r3, [r2, #0]
}
 800555a:	bf00      	nop
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	200013f0 	.word	0x200013f0
 800556c:	200013dc 	.word	0x200013dc
 8005570:	200013d0 	.word	0x200013d0
 8005574:	20000ef8 	.word	0x20000ef8
 8005578:	20000ef4 	.word	0x20000ef4

0800557c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10c      	bne.n	80055a6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	b672      	cpsid	i
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	b662      	cpsie	i
 80055a0:	60fb      	str	r3, [r7, #12]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055a6:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <vTaskPlaceOnEventList+0x48>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3318      	adds	r3, #24
 80055ac:	4619      	mov	r1, r3
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fe fe11 	bl	80041d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055b4:	2101      	movs	r1, #1
 80055b6:	6838      	ldr	r0, [r7, #0]
 80055b8:	f000 fa8a 	bl	8005ad0 <prvAddCurrentTaskToDelayedList>
}
 80055bc:	bf00      	nop
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000ef4 	.word	0x20000ef4

080055c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10c      	bne.n	80055f4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	b672      	cpsid	i
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	b662      	cpsie	i
 80055ee:	617b      	str	r3, [r7, #20]
}
 80055f0:	bf00      	nop
 80055f2:	e7fe      	b.n	80055f2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <vTaskPlaceOnEventListRestricted+0x58>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3318      	adds	r3, #24
 80055fa:	4619      	mov	r1, r3
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f7fe fdc6 	bl	800418e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005608:	f04f 33ff 	mov.w	r3, #4294967295
 800560c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	68b8      	ldr	r0, [r7, #8]
 8005612:	f000 fa5d 	bl	8005ad0 <prvAddCurrentTaskToDelayedList>
	}
 8005616:	bf00      	nop
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000ef4 	.word	0x20000ef4

08005624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10c      	bne.n	8005654 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	b672      	cpsid	i
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	b662      	cpsie	i
 800564e:	60fb      	str	r3, [r7, #12]
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	3318      	adds	r3, #24
 8005658:	4618      	mov	r0, r3
 800565a:	f7fe fdf5 	bl	8004248 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800565e:	4b1e      	ldr	r3, [pc, #120]	; (80056d8 <xTaskRemoveFromEventList+0xb4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d11d      	bne.n	80056a2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	3304      	adds	r3, #4
 800566a:	4618      	mov	r0, r3
 800566c:	f7fe fdec 	bl	8004248 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005674:	4b19      	ldr	r3, [pc, #100]	; (80056dc <xTaskRemoveFromEventList+0xb8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d903      	bls.n	8005684 <xTaskRemoveFromEventList+0x60>
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	4a16      	ldr	r2, [pc, #88]	; (80056dc <xTaskRemoveFromEventList+0xb8>)
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <xTaskRemoveFromEventList+0xbc>)
 8005692:	441a      	add	r2, r3
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	3304      	adds	r3, #4
 8005698:	4619      	mov	r1, r3
 800569a:	4610      	mov	r0, r2
 800569c:	f7fe fd77 	bl	800418e <vListInsertEnd>
 80056a0:	e005      	b.n	80056ae <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	3318      	adds	r3, #24
 80056a6:	4619      	mov	r1, r3
 80056a8:	480e      	ldr	r0, [pc, #56]	; (80056e4 <xTaskRemoveFromEventList+0xc0>)
 80056aa:	f7fe fd70 	bl	800418e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b2:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <xTaskRemoveFromEventList+0xc4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d905      	bls.n	80056c8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056bc:	2301      	movs	r3, #1
 80056be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <xTaskRemoveFromEventList+0xc8>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	e001      	b.n	80056cc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056cc:	697b      	ldr	r3, [r7, #20]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	200013f0 	.word	0x200013f0
 80056dc:	200013d0 	.word	0x200013d0
 80056e0:	20000ef8 	.word	0x20000ef8
 80056e4:	20001388 	.word	0x20001388
 80056e8:	20000ef4 	.word	0x20000ef4
 80056ec:	200013dc 	.word	0x200013dc

080056f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <vTaskInternalSetTimeOutState+0x24>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <vTaskInternalSetTimeOutState+0x28>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	605a      	str	r2, [r3, #4]
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	200013e0 	.word	0x200013e0
 8005718:	200013cc 	.word	0x200013cc

0800571c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10c      	bne.n	8005746 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	b672      	cpsid	i
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	b662      	cpsie	i
 8005740:	613b      	str	r3, [r7, #16]
}
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10c      	bne.n	8005766 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	b672      	cpsid	i
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	b662      	cpsie	i
 8005760:	60fb      	str	r3, [r7, #12]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005766:	f000 fe71 	bl	800644c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800576a:	4b1d      	ldr	r3, [pc, #116]	; (80057e0 <xTaskCheckForTimeOut+0xc4>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d102      	bne.n	800578a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005784:	2300      	movs	r3, #0
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	e023      	b.n	80057d2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <xTaskCheckForTimeOut+0xc8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d007      	beq.n	80057a6 <xTaskCheckForTimeOut+0x8a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	429a      	cmp	r2, r3
 800579e:	d302      	bcc.n	80057a6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	61fb      	str	r3, [r7, #28]
 80057a4:	e015      	b.n	80057d2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d20b      	bcs.n	80057c8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	1ad2      	subs	r2, r2, r3
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff ff97 	bl	80056f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
 80057c6:	e004      	b.n	80057d2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057ce:	2301      	movs	r3, #1
 80057d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057d2:	f000 fe6f 	bl	80064b4 <vPortExitCritical>

	return xReturn;
 80057d6:	69fb      	ldr	r3, [r7, #28]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3720      	adds	r7, #32
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	200013cc 	.word	0x200013cc
 80057e4:	200013e0 	.word	0x200013e0

080057e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057ec:	4b03      	ldr	r3, [pc, #12]	; (80057fc <vTaskMissedYield+0x14>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
}
 80057f2:	bf00      	nop
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	200013dc 	.word	0x200013dc

08005800 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005808:	f000 f852 	bl	80058b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <prvIdleTask+0x28>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d9f9      	bls.n	8005808 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <prvIdleTask+0x2c>)
 8005816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005824:	e7f0      	b.n	8005808 <prvIdleTask+0x8>
 8005826:	bf00      	nop
 8005828:	20000ef8 	.word	0x20000ef8
 800582c:	e000ed04 	.word	0xe000ed04

08005830 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005836:	2300      	movs	r3, #0
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	e00c      	b.n	8005856 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4a12      	ldr	r2, [pc, #72]	; (8005890 <prvInitialiseTaskLists+0x60>)
 8005848:	4413      	add	r3, r2
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe fc72 	bl	8004134 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3301      	adds	r3, #1
 8005854:	607b      	str	r3, [r7, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b37      	cmp	r3, #55	; 0x37
 800585a:	d9ef      	bls.n	800583c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800585c:	480d      	ldr	r0, [pc, #52]	; (8005894 <prvInitialiseTaskLists+0x64>)
 800585e:	f7fe fc69 	bl	8004134 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005862:	480d      	ldr	r0, [pc, #52]	; (8005898 <prvInitialiseTaskLists+0x68>)
 8005864:	f7fe fc66 	bl	8004134 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005868:	480c      	ldr	r0, [pc, #48]	; (800589c <prvInitialiseTaskLists+0x6c>)
 800586a:	f7fe fc63 	bl	8004134 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800586e:	480c      	ldr	r0, [pc, #48]	; (80058a0 <prvInitialiseTaskLists+0x70>)
 8005870:	f7fe fc60 	bl	8004134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005874:	480b      	ldr	r0, [pc, #44]	; (80058a4 <prvInitialiseTaskLists+0x74>)
 8005876:	f7fe fc5d 	bl	8004134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800587a:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <prvInitialiseTaskLists+0x78>)
 800587c:	4a05      	ldr	r2, [pc, #20]	; (8005894 <prvInitialiseTaskLists+0x64>)
 800587e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <prvInitialiseTaskLists+0x7c>)
 8005882:	4a05      	ldr	r2, [pc, #20]	; (8005898 <prvInitialiseTaskLists+0x68>)
 8005884:	601a      	str	r2, [r3, #0]
}
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000ef8 	.word	0x20000ef8
 8005894:	20001358 	.word	0x20001358
 8005898:	2000136c 	.word	0x2000136c
 800589c:	20001388 	.word	0x20001388
 80058a0:	2000139c 	.word	0x2000139c
 80058a4:	200013b4 	.word	0x200013b4
 80058a8:	20001380 	.word	0x20001380
 80058ac:	20001384 	.word	0x20001384

080058b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058b6:	e019      	b.n	80058ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058b8:	f000 fdc8 	bl	800644c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058bc:	4b10      	ldr	r3, [pc, #64]	; (8005900 <prvCheckTasksWaitingTermination+0x50>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fe fcbd 	bl	8004248 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058ce:	4b0d      	ldr	r3, [pc, #52]	; (8005904 <prvCheckTasksWaitingTermination+0x54>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	4a0b      	ldr	r2, [pc, #44]	; (8005904 <prvCheckTasksWaitingTermination+0x54>)
 80058d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058d8:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <prvCheckTasksWaitingTermination+0x58>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3b01      	subs	r3, #1
 80058de:	4a0a      	ldr	r2, [pc, #40]	; (8005908 <prvCheckTasksWaitingTermination+0x58>)
 80058e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058e2:	f000 fde7 	bl	80064b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f810 	bl	800590c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058ec:	4b06      	ldr	r3, [pc, #24]	; (8005908 <prvCheckTasksWaitingTermination+0x58>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e1      	bne.n	80058b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	2000139c 	.word	0x2000139c
 8005904:	200013c8 	.word	0x200013c8
 8005908:	200013b0 	.word	0x200013b0

0800590c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800591a:	2b00      	cmp	r3, #0
 800591c:	d108      	bne.n	8005930 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	4618      	mov	r0, r3
 8005924:	f000 ff88 	bl	8006838 <vPortFree>
				vPortFree( pxTCB );
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 ff85 	bl	8006838 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800592e:	e01a      	b.n	8005966 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005936:	2b01      	cmp	r3, #1
 8005938:	d103      	bne.n	8005942 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 ff7c 	bl	8006838 <vPortFree>
	}
 8005940:	e011      	b.n	8005966 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005948:	2b02      	cmp	r3, #2
 800594a:	d00c      	beq.n	8005966 <prvDeleteTCB+0x5a>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005950:	b672      	cpsid	i
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	b662      	cpsie	i
 8005960:	60fb      	str	r3, [r7, #12]
}
 8005962:	bf00      	nop
 8005964:	e7fe      	b.n	8005964 <prvDeleteTCB+0x58>
	}
 8005966:	bf00      	nop
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005976:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <prvResetNextTaskUnblockTime+0x38>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d104      	bne.n	800598a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005980:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <prvResetNextTaskUnblockTime+0x3c>)
 8005982:	f04f 32ff 	mov.w	r2, #4294967295
 8005986:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005988:	e008      	b.n	800599c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598a:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <prvResetNextTaskUnblockTime+0x38>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	4a04      	ldr	r2, [pc, #16]	; (80059ac <prvResetNextTaskUnblockTime+0x3c>)
 800599a:	6013      	str	r3, [r2, #0]
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	20001380 	.word	0x20001380
 80059ac:	200013e8 	.word	0x200013e8

080059b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059b6:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <xTaskGetSchedulerState+0x34>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d102      	bne.n	80059c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059be:	2301      	movs	r3, #1
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	e008      	b.n	80059d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c4:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <xTaskGetSchedulerState+0x38>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059cc:	2302      	movs	r3, #2
 80059ce:	607b      	str	r3, [r7, #4]
 80059d0:	e001      	b.n	80059d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059d2:	2300      	movs	r3, #0
 80059d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059d6:	687b      	ldr	r3, [r7, #4]
	}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	200013d4 	.word	0x200013d4
 80059e8:	200013f0 	.word	0x200013f0

080059ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d05a      	beq.n	8005ab8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a02:	4b30      	ldr	r3, [pc, #192]	; (8005ac4 <xTaskPriorityDisinherit+0xd8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d00c      	beq.n	8005a26 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	b672      	cpsid	i
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	b662      	cpsie	i
 8005a20:	60fb      	str	r3, [r7, #12]
}
 8005a22:	bf00      	nop
 8005a24:	e7fe      	b.n	8005a24 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10c      	bne.n	8005a48 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	b672      	cpsid	i
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	b662      	cpsie	i
 8005a42:	60bb      	str	r3, [r7, #8]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4c:	1e5a      	subs	r2, r3, #1
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d02c      	beq.n	8005ab8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d128      	bne.n	8005ab8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe fbec 	bl	8004248 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <xTaskPriorityDisinherit+0xdc>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d903      	bls.n	8005a98 <xTaskPriorityDisinherit+0xac>
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4a0c      	ldr	r2, [pc, #48]	; (8005ac8 <xTaskPriorityDisinherit+0xdc>)
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4a09      	ldr	r2, [pc, #36]	; (8005acc <xTaskPriorityDisinherit+0xe0>)
 8005aa6:	441a      	add	r2, r3
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4619      	mov	r1, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	f7fe fb6d 	bl	800418e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ab8:	697b      	ldr	r3, [r7, #20]
	}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000ef4 	.word	0x20000ef4
 8005ac8:	200013d0 	.word	0x200013d0
 8005acc:	20000ef8 	.word	0x20000ef8

08005ad0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ada:	4b21      	ldr	r3, [pc, #132]	; (8005b60 <prvAddCurrentTaskToDelayedList+0x90>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ae0:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe fbae 	bl	8004248 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d10a      	bne.n	8005b0a <prvAddCurrentTaskToDelayedList+0x3a>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d007      	beq.n	8005b0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005afa:	4b1a      	ldr	r3, [pc, #104]	; (8005b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4619      	mov	r1, r3
 8005b02:	4819      	ldr	r0, [pc, #100]	; (8005b68 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b04:	f7fe fb43 	bl	800418e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b08:	e026      	b.n	8005b58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b12:	4b14      	ldr	r3, [pc, #80]	; (8005b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d209      	bcs.n	8005b36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b0f      	ldr	r3, [pc, #60]	; (8005b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4610      	mov	r0, r2
 8005b30:	f7fe fb51 	bl	80041d6 <vListInsert>
}
 8005b34:	e010      	b.n	8005b58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b36:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	4619      	mov	r1, r3
 8005b42:	4610      	mov	r0, r2
 8005b44:	f7fe fb47 	bl	80041d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b48:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d202      	bcs.n	8005b58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b52:	4a08      	ldr	r2, [pc, #32]	; (8005b74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	6013      	str	r3, [r2, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	200013cc 	.word	0x200013cc
 8005b64:	20000ef4 	.word	0x20000ef4
 8005b68:	200013b4 	.word	0x200013b4
 8005b6c:	20001384 	.word	0x20001384
 8005b70:	20001380 	.word	0x20001380
 8005b74:	200013e8 	.word	0x200013e8

08005b78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b82:	f000 fb15 	bl	80061b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b86:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <xTimerCreateTimerTask+0x84>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d021      	beq.n	8005bd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b96:	1d3a      	adds	r2, r7, #4
 8005b98:	f107 0108 	add.w	r1, r7, #8
 8005b9c:	f107 030c 	add.w	r3, r7, #12
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fe faad 	bl	8004100 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	9202      	str	r2, [sp, #8]
 8005bae:	9301      	str	r3, [sp, #4]
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	460a      	mov	r2, r1
 8005bb8:	4911      	ldr	r1, [pc, #68]	; (8005c00 <xTimerCreateTimerTask+0x88>)
 8005bba:	4812      	ldr	r0, [pc, #72]	; (8005c04 <xTimerCreateTimerTask+0x8c>)
 8005bbc:	f7ff f8ba 	bl	8004d34 <xTaskCreateStatic>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	4a11      	ldr	r2, [pc, #68]	; (8005c08 <xTimerCreateTimerTask+0x90>)
 8005bc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <xTimerCreateTimerTask+0x90>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10c      	bne.n	8005bf2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bdc:	b672      	cpsid	i
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	b662      	cpsie	i
 8005bec:	613b      	str	r3, [r7, #16]
}
 8005bee:	bf00      	nop
 8005bf0:	e7fe      	b.n	8005bf0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005bf2:	697b      	ldr	r3, [r7, #20]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	20001424 	.word	0x20001424
 8005c00:	08006b0c 	.word	0x08006b0c
 8005c04:	08005d49 	.word	0x08005d49
 8005c08:	20001428 	.word	0x20001428

08005c0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08a      	sub	sp, #40	; 0x28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10c      	bne.n	8005c3e <xTimerGenericCommand+0x32>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	b672      	cpsid	i
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	b662      	cpsie	i
 8005c38:	623b      	str	r3, [r7, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ca8 <xTimerGenericCommand+0x9c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d02a      	beq.n	8005c9c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b05      	cmp	r3, #5
 8005c56:	dc18      	bgt.n	8005c8a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c58:	f7ff feaa 	bl	80059b0 <xTaskGetSchedulerState>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d109      	bne.n	8005c76 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c62:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <xTimerGenericCommand+0x9c>)
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	f107 0110 	add.w	r1, r7, #16
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6e:	f7fe fc67 	bl	8004540 <xQueueGenericSend>
 8005c72:	6278      	str	r0, [r7, #36]	; 0x24
 8005c74:	e012      	b.n	8005c9c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c76:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <xTimerGenericCommand+0x9c>)
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	f107 0110 	add.w	r1, r7, #16
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2200      	movs	r2, #0
 8005c82:	f7fe fc5d 	bl	8004540 <xQueueGenericSend>
 8005c86:	6278      	str	r0, [r7, #36]	; 0x24
 8005c88:	e008      	b.n	8005c9c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c8a:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <xTimerGenericCommand+0x9c>)
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	f107 0110 	add.w	r1, r7, #16
 8005c92:	2300      	movs	r3, #0
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	f7fe fd59 	bl	800474c <xQueueGenericSendFromISR>
 8005c9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3728      	adds	r7, #40	; 0x28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20001424 	.word	0x20001424

08005cac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af02      	add	r7, sp, #8
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb6:	4b23      	ldr	r3, [pc, #140]	; (8005d44 <prvProcessExpiredTimer+0x98>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe fabf 	bl	8004248 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d024      	beq.n	8005d22 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	699a      	ldr	r2, [r3, #24]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	18d1      	adds	r1, r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	6978      	ldr	r0, [r7, #20]
 8005ce6:	f000 f8d3 	bl	8005e90 <prvInsertTimerInActiveList>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d021      	beq.n	8005d34 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	6978      	ldr	r0, [r7, #20]
 8005cfc:	f7ff ff86 	bl	8005c0c <xTimerGenericCommand>
 8005d00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d115      	bne.n	8005d34 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	b672      	cpsid	i
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	b662      	cpsie	i
 8005d1c:	60fb      	str	r3, [r7, #12]
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	6978      	ldr	r0, [r7, #20]
 8005d3a:	4798      	blx	r3
}
 8005d3c:	bf00      	nop
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	2000141c 	.word	0x2000141c

08005d48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d50:	f107 0308 	add.w	r3, r7, #8
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 f857 	bl	8005e08 <prvGetNextExpireTime>
 8005d5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f803 	bl	8005d6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d66:	f000 f8d5 	bl	8005f14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d6a:	e7f1      	b.n	8005d50 <prvTimerTask+0x8>

08005d6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d76:	f7ff fa27 	bl	80051c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d7a:	f107 0308 	add.w	r3, r7, #8
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 f866 	bl	8005e50 <prvSampleTimeNow>
 8005d84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d130      	bne.n	8005dee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <prvProcessTimerOrBlockTask+0x3c>
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d806      	bhi.n	8005da8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d9a:	f7ff fa23 	bl	80051e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff ff83 	bl	8005cac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005da6:	e024      	b.n	8005df2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d008      	beq.n	8005dc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005dae:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <prvProcessTimerOrBlockTask+0x90>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <prvProcessTimerOrBlockTask+0x50>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <prvProcessTimerOrBlockTask+0x52>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005dc0:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <prvProcessTimerOrBlockTask+0x94>)
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	f7fe ff7d 	bl	8004ccc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005dd2:	f7ff fa07 	bl	80051e4 <xTaskResumeAll>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ddc:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <prvProcessTimerOrBlockTask+0x98>)
 8005dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	f3bf 8f6f 	isb	sy
}
 8005dec:	e001      	b.n	8005df2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005dee:	f7ff f9f9 	bl	80051e4 <xTaskResumeAll>
}
 8005df2:	bf00      	nop
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20001420 	.word	0x20001420
 8005e00:	20001424 	.word	0x20001424
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e10:	4b0e      	ldr	r3, [pc, #56]	; (8005e4c <prvGetNextExpireTime+0x44>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <prvGetNextExpireTime+0x16>
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	e000      	b.n	8005e20 <prvGetNextExpireTime+0x18>
 8005e1e:	2200      	movs	r2, #0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d105      	bne.n	8005e38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e2c:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <prvGetNextExpireTime+0x44>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	e001      	b.n	8005e3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	2000141c 	.word	0x2000141c

08005e50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e58:	f7ff fa64 	bl	8005324 <xTaskGetTickCount>
 8005e5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e5e:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <prvSampleTimeNow+0x3c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d205      	bcs.n	8005e74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e68:	f000 f93c 	bl	80060e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	e002      	b.n	8005e7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e7a:	4a04      	ldr	r2, [pc, #16]	; (8005e8c <prvSampleTimeNow+0x3c>)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e80:	68fb      	ldr	r3, [r7, #12]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	2000142c 	.word	0x2000142c

08005e90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d812      	bhi.n	8005edc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d302      	bcc.n	8005eca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	e01b      	b.n	8005f02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005eca:	4b10      	ldr	r3, [pc, #64]	; (8005f0c <prvInsertTimerInActiveList+0x7c>)
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	f7fe f97e 	bl	80041d6 <vListInsert>
 8005eda:	e012      	b.n	8005f02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d206      	bcs.n	8005ef2 <prvInsertTimerInActiveList+0x62>
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d302      	bcc.n	8005ef2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005eec:	2301      	movs	r3, #1
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	e007      	b.n	8005f02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ef2:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <prvInsertTimerInActiveList+0x80>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f7fe f96a 	bl	80041d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f02:	697b      	ldr	r3, [r7, #20]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20001420 	.word	0x20001420
 8005f10:	2000141c 	.word	0x2000141c

08005f14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08e      	sub	sp, #56	; 0x38
 8005f18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f1a:	e0d0      	b.n	80060be <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	da1a      	bge.n	8005f58 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f22:	1d3b      	adds	r3, r7, #4
 8005f24:	3304      	adds	r3, #4
 8005f26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10c      	bne.n	8005f48 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	b672      	cpsid	i
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	b662      	cpsie	i
 8005f42:	61fb      	str	r3, [r7, #28]
}
 8005f44:	bf00      	nop
 8005f46:	e7fe      	b.n	8005f46 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f4e:	6850      	ldr	r0, [r2, #4]
 8005f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f52:	6892      	ldr	r2, [r2, #8]
 8005f54:	4611      	mov	r1, r2
 8005f56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f2c0 80ae 	blt.w	80060bc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d004      	beq.n	8005f76 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6e:	3304      	adds	r3, #4
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fe f969 	bl	8004248 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f76:	463b      	mov	r3, r7
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff ff69 	bl	8005e50 <prvSampleTimeNow>
 8005f7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b09      	cmp	r3, #9
 8005f84:	f200 809b 	bhi.w	80060be <prvProcessReceivedCommands+0x1aa>
 8005f88:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <prvProcessReceivedCommands+0x7c>)
 8005f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8e:	bf00      	nop
 8005f90:	08005fb9 	.word	0x08005fb9
 8005f94:	08005fb9 	.word	0x08005fb9
 8005f98:	08005fb9 	.word	0x08005fb9
 8005f9c:	08006031 	.word	0x08006031
 8005fa0:	08006045 	.word	0x08006045
 8005fa4:	08006093 	.word	0x08006093
 8005fa8:	08005fb9 	.word	0x08005fb9
 8005fac:	08005fb9 	.word	0x08005fb9
 8005fb0:	08006031 	.word	0x08006031
 8005fb4:	08006045 	.word	0x08006045
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fbe:	f043 0301 	orr.w	r3, r3, #1
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	18d1      	adds	r1, r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fd8:	f7ff ff5a 	bl	8005e90 <prvInsertTimerInActiveList>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d06d      	beq.n	80060be <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fe8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d062      	beq.n	80060be <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	441a      	add	r2, r3
 8006000:	2300      	movs	r3, #0
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	2300      	movs	r3, #0
 8006006:	2100      	movs	r1, #0
 8006008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800600a:	f7ff fdff 	bl	8005c0c <xTimerGenericCommand>
 800600e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d153      	bne.n	80060be <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	b672      	cpsid	i
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	b662      	cpsie	i
 800602a:	61bb      	str	r3, [r7, #24]
}
 800602c:	bf00      	nop
 800602e:	e7fe      	b.n	800602e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006036:	f023 0301 	bic.w	r3, r3, #1
 800603a:	b2da      	uxtb	r2, r3
 800603c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006042:	e03c      	b.n	80060be <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	b2da      	uxtb	r2, r3
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10c      	bne.n	800607e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	b672      	cpsid	i
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	b662      	cpsie	i
 8006078:	617b      	str	r3, [r7, #20]
}
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	18d1      	adds	r1, r2, r3
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800608c:	f7ff ff00 	bl	8005e90 <prvInsertTimerInActiveList>
					break;
 8006090:	e015      	b.n	80060be <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d103      	bne.n	80060a8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80060a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060a2:	f000 fbc9 	bl	8006838 <vPortFree>
 80060a6:	e00a      	b.n	80060be <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ae:	f023 0301 	bic.w	r3, r3, #1
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060ba:	e000      	b.n	80060be <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80060bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060be:	4b08      	ldr	r3, [pc, #32]	; (80060e0 <prvProcessReceivedCommands+0x1cc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	1d39      	adds	r1, r7, #4
 80060c4:	2200      	movs	r2, #0
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe fbe0 	bl	800488c <xQueueReceive>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f47f af24 	bne.w	8005f1c <prvProcessReceivedCommands+0x8>
	}
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop
 80060d8:	3730      	adds	r7, #48	; 0x30
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20001424 	.word	0x20001424

080060e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060ea:	e04a      	b.n	8006182 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060ec:	4b2e      	ldr	r3, [pc, #184]	; (80061a8 <prvSwitchTimerLists+0xc4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f6:	4b2c      	ldr	r3, [pc, #176]	; (80061a8 <prvSwitchTimerLists+0xc4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3304      	adds	r3, #4
 8006104:	4618      	mov	r0, r3
 8006106:	f7fe f89f 	bl	8004248 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d030      	beq.n	8006182 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4413      	add	r3, r2
 8006128:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	429a      	cmp	r2, r3
 8006130:	d90e      	bls.n	8006150 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800613e:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <prvSwitchTimerLists+0xc4>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3304      	adds	r3, #4
 8006146:	4619      	mov	r1, r3
 8006148:	4610      	mov	r0, r2
 800614a:	f7fe f844 	bl	80041d6 <vListInsert>
 800614e:	e018      	b.n	8006182 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006150:	2300      	movs	r3, #0
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	2300      	movs	r3, #0
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	2100      	movs	r1, #0
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7ff fd56 	bl	8005c0c <xTimerGenericCommand>
 8006160:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10c      	bne.n	8006182 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	b672      	cpsid	i
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	b662      	cpsie	i
 800617c:	603b      	str	r3, [r7, #0]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006182:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <prvSwitchTimerLists+0xc4>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1af      	bne.n	80060ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <prvSwitchTimerLists+0xc4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006192:	4b06      	ldr	r3, [pc, #24]	; (80061ac <prvSwitchTimerLists+0xc8>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a04      	ldr	r2, [pc, #16]	; (80061a8 <prvSwitchTimerLists+0xc4>)
 8006198:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800619a:	4a04      	ldr	r2, [pc, #16]	; (80061ac <prvSwitchTimerLists+0xc8>)
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	6013      	str	r3, [r2, #0]
}
 80061a0:	bf00      	nop
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	2000141c 	.word	0x2000141c
 80061ac:	20001420 	.word	0x20001420

080061b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061b6:	f000 f949 	bl	800644c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061ba:	4b15      	ldr	r3, [pc, #84]	; (8006210 <prvCheckForValidListAndQueue+0x60>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d120      	bne.n	8006204 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061c2:	4814      	ldr	r0, [pc, #80]	; (8006214 <prvCheckForValidListAndQueue+0x64>)
 80061c4:	f7fd ffb6 	bl	8004134 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061c8:	4813      	ldr	r0, [pc, #76]	; (8006218 <prvCheckForValidListAndQueue+0x68>)
 80061ca:	f7fd ffb3 	bl	8004134 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061ce:	4b13      	ldr	r3, [pc, #76]	; (800621c <prvCheckForValidListAndQueue+0x6c>)
 80061d0:	4a10      	ldr	r2, [pc, #64]	; (8006214 <prvCheckForValidListAndQueue+0x64>)
 80061d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061d4:	4b12      	ldr	r3, [pc, #72]	; (8006220 <prvCheckForValidListAndQueue+0x70>)
 80061d6:	4a10      	ldr	r2, [pc, #64]	; (8006218 <prvCheckForValidListAndQueue+0x68>)
 80061d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061da:	2300      	movs	r3, #0
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	4b11      	ldr	r3, [pc, #68]	; (8006224 <prvCheckForValidListAndQueue+0x74>)
 80061e0:	4a11      	ldr	r2, [pc, #68]	; (8006228 <prvCheckForValidListAndQueue+0x78>)
 80061e2:	2110      	movs	r1, #16
 80061e4:	200a      	movs	r0, #10
 80061e6:	f7fe f8c3 	bl	8004370 <xQueueGenericCreateStatic>
 80061ea:	4603      	mov	r3, r0
 80061ec:	4a08      	ldr	r2, [pc, #32]	; (8006210 <prvCheckForValidListAndQueue+0x60>)
 80061ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061f0:	4b07      	ldr	r3, [pc, #28]	; (8006210 <prvCheckForValidListAndQueue+0x60>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061f8:	4b05      	ldr	r3, [pc, #20]	; (8006210 <prvCheckForValidListAndQueue+0x60>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	490b      	ldr	r1, [pc, #44]	; (800622c <prvCheckForValidListAndQueue+0x7c>)
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fe fd3a 	bl	8004c78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006204:	f000 f956 	bl	80064b4 <vPortExitCritical>
}
 8006208:	bf00      	nop
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20001424 	.word	0x20001424
 8006214:	200013f4 	.word	0x200013f4
 8006218:	20001408 	.word	0x20001408
 800621c:	2000141c 	.word	0x2000141c
 8006220:	20001420 	.word	0x20001420
 8006224:	200014d0 	.word	0x200014d0
 8006228:	20001430 	.word	0x20001430
 800622c:	08006b14 	.word	0x08006b14

08006230 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3b04      	subs	r3, #4
 8006240:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3b04      	subs	r3, #4
 800624e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f023 0201 	bic.w	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3b04      	subs	r3, #4
 800625e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006260:	4a0c      	ldr	r2, [pc, #48]	; (8006294 <pxPortInitialiseStack+0x64>)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3b14      	subs	r3, #20
 800626a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3b04      	subs	r3, #4
 8006276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f06f 0202 	mvn.w	r2, #2
 800627e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3b20      	subs	r3, #32
 8006284:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006286:	68fb      	ldr	r3, [r7, #12]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	08006299 	.word	0x08006299

08006298 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062a2:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <prvTaskExitError+0x5c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062aa:	d00c      	beq.n	80062c6 <prvTaskExitError+0x2e>
	__asm volatile
 80062ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b0:	b672      	cpsid	i
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	b662      	cpsie	i
 80062c0:	60fb      	str	r3, [r7, #12]
}
 80062c2:	bf00      	nop
 80062c4:	e7fe      	b.n	80062c4 <prvTaskExitError+0x2c>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	b672      	cpsid	i
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	b662      	cpsie	i
 80062da:	60bb      	str	r3, [r7, #8]
}
 80062dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062de:	bf00      	nop
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0fc      	beq.n	80062e0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062e6:	bf00      	nop
 80062e8:	bf00      	nop
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	2000000c 	.word	0x2000000c
	...

08006300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006300:	4b07      	ldr	r3, [pc, #28]	; (8006320 <pxCurrentTCBConst2>)
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	6808      	ldr	r0, [r1, #0]
 8006306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630a:	f380 8809 	msr	PSP, r0
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f04f 0000 	mov.w	r0, #0
 8006316:	f380 8811 	msr	BASEPRI, r0
 800631a:	4770      	bx	lr
 800631c:	f3af 8000 	nop.w

08006320 <pxCurrentTCBConst2>:
 8006320:	20000ef4 	.word	0x20000ef4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop

08006328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006328:	4808      	ldr	r0, [pc, #32]	; (800634c <prvPortStartFirstTask+0x24>)
 800632a:	6800      	ldr	r0, [r0, #0]
 800632c:	6800      	ldr	r0, [r0, #0]
 800632e:	f380 8808 	msr	MSP, r0
 8006332:	f04f 0000 	mov.w	r0, #0
 8006336:	f380 8814 	msr	CONTROL, r0
 800633a:	b662      	cpsie	i
 800633c:	b661      	cpsie	f
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	df00      	svc	0
 8006348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800634a:	bf00      	nop
 800634c:	e000ed08 	.word	0xe000ed08

08006350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006356:	4b37      	ldr	r3, [pc, #220]	; (8006434 <xPortStartScheduler+0xe4>)
 8006358:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	b2db      	uxtb	r3, r3
 8006360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	22ff      	movs	r2, #255	; 0xff
 8006366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006378:	b2da      	uxtb	r2, r3
 800637a:	4b2f      	ldr	r3, [pc, #188]	; (8006438 <xPortStartScheduler+0xe8>)
 800637c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800637e:	4b2f      	ldr	r3, [pc, #188]	; (800643c <xPortStartScheduler+0xec>)
 8006380:	2207      	movs	r2, #7
 8006382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006384:	e009      	b.n	800639a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006386:	4b2d      	ldr	r3, [pc, #180]	; (800643c <xPortStartScheduler+0xec>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3b01      	subs	r3, #1
 800638c:	4a2b      	ldr	r2, [pc, #172]	; (800643c <xPortStartScheduler+0xec>)
 800638e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	b2db      	uxtb	r3, r3
 8006398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a2:	2b80      	cmp	r3, #128	; 0x80
 80063a4:	d0ef      	beq.n	8006386 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063a6:	4b25      	ldr	r3, [pc, #148]	; (800643c <xPortStartScheduler+0xec>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f1c3 0307 	rsb	r3, r3, #7
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d00c      	beq.n	80063cc <xPortStartScheduler+0x7c>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	b672      	cpsid	i
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	b662      	cpsie	i
 80063c6:	60bb      	str	r3, [r7, #8]
}
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063cc:	4b1b      	ldr	r3, [pc, #108]	; (800643c <xPortStartScheduler+0xec>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	4a1a      	ldr	r2, [pc, #104]	; (800643c <xPortStartScheduler+0xec>)
 80063d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063d6:	4b19      	ldr	r3, [pc, #100]	; (800643c <xPortStartScheduler+0xec>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063de:	4a17      	ldr	r2, [pc, #92]	; (800643c <xPortStartScheduler+0xec>)
 80063e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063ea:	4b15      	ldr	r3, [pc, #84]	; (8006440 <xPortStartScheduler+0xf0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a14      	ldr	r2, [pc, #80]	; (8006440 <xPortStartScheduler+0xf0>)
 80063f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063f6:	4b12      	ldr	r3, [pc, #72]	; (8006440 <xPortStartScheduler+0xf0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a11      	ldr	r2, [pc, #68]	; (8006440 <xPortStartScheduler+0xf0>)
 80063fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006400:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006402:	f000 f8dd 	bl	80065c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006406:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <xPortStartScheduler+0xf4>)
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800640c:	f000 f8fc 	bl	8006608 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006410:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <xPortStartScheduler+0xf8>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a0c      	ldr	r2, [pc, #48]	; (8006448 <xPortStartScheduler+0xf8>)
 8006416:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800641a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800641c:	f7ff ff84 	bl	8006328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006420:	f7ff f84c 	bl	80054bc <vTaskSwitchContext>
	prvTaskExitError();
 8006424:	f7ff ff38 	bl	8006298 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	e000e400 	.word	0xe000e400
 8006438:	20001520 	.word	0x20001520
 800643c:	20001524 	.word	0x20001524
 8006440:	e000ed20 	.word	0xe000ed20
 8006444:	2000000c 	.word	0x2000000c
 8006448:	e000ef34 	.word	0xe000ef34

0800644c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	b672      	cpsid	i
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	b662      	cpsie	i
 8006466:	607b      	str	r3, [r7, #4]
}
 8006468:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800646a:	4b10      	ldr	r3, [pc, #64]	; (80064ac <vPortEnterCritical+0x60>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3301      	adds	r3, #1
 8006470:	4a0e      	ldr	r2, [pc, #56]	; (80064ac <vPortEnterCritical+0x60>)
 8006472:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006474:	4b0d      	ldr	r3, [pc, #52]	; (80064ac <vPortEnterCritical+0x60>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d111      	bne.n	80064a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800647c:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <vPortEnterCritical+0x64>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00c      	beq.n	80064a0 <vPortEnterCritical+0x54>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	b672      	cpsid	i
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	b662      	cpsie	i
 800649a:	603b      	str	r3, [r7, #0]
}
 800649c:	bf00      	nop
 800649e:	e7fe      	b.n	800649e <vPortEnterCritical+0x52>
	}
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	2000000c 	.word	0x2000000c
 80064b0:	e000ed04 	.word	0xe000ed04

080064b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064ba:	4b13      	ldr	r3, [pc, #76]	; (8006508 <vPortExitCritical+0x54>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10c      	bne.n	80064dc <vPortExitCritical+0x28>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	b672      	cpsid	i
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	b662      	cpsie	i
 80064d6:	607b      	str	r3, [r7, #4]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <vPortExitCritical+0x54>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	4a09      	ldr	r2, [pc, #36]	; (8006508 <vPortExitCritical+0x54>)
 80064e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064e6:	4b08      	ldr	r3, [pc, #32]	; (8006508 <vPortExitCritical+0x54>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d105      	bne.n	80064fa <vPortExitCritical+0x46>
 80064ee:	2300      	movs	r3, #0
 80064f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	f383 8811 	msr	BASEPRI, r3
}
 80064f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	2000000c 	.word	0x2000000c
 800650c:	00000000 	.word	0x00000000

08006510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006510:	f3ef 8009 	mrs	r0, PSP
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4b15      	ldr	r3, [pc, #84]	; (8006570 <pxCurrentTCBConst>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	f01e 0f10 	tst.w	lr, #16
 8006520:	bf08      	it	eq
 8006522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	6010      	str	r0, [r2, #0]
 800652c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006534:	b672      	cpsid	i
 8006536:	f380 8811 	msr	BASEPRI, r0
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	b662      	cpsie	i
 8006544:	f7fe ffba 	bl	80054bc <vTaskSwitchContext>
 8006548:	f04f 0000 	mov.w	r0, #0
 800654c:	f380 8811 	msr	BASEPRI, r0
 8006550:	bc09      	pop	{r0, r3}
 8006552:	6819      	ldr	r1, [r3, #0]
 8006554:	6808      	ldr	r0, [r1, #0]
 8006556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655a:	f01e 0f10 	tst.w	lr, #16
 800655e:	bf08      	it	eq
 8006560:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006564:	f380 8809 	msr	PSP, r0
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop

08006570 <pxCurrentTCBConst>:
 8006570:	20000ef4 	.word	0x20000ef4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop

08006578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	b672      	cpsid	i
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	b662      	cpsie	i
 8006592:	607b      	str	r3, [r7, #4]
}
 8006594:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006596:	f7fe fed5 	bl	8005344 <xTaskIncrementTick>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065a0:	4b06      	ldr	r3, [pc, #24]	; (80065bc <xPortSysTickHandler+0x44>)
 80065a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	2300      	movs	r3, #0
 80065aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	f383 8811 	msr	BASEPRI, r3
}
 80065b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065b4:	bf00      	nop
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065c4:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <vPortSetupTimerInterrupt+0x34>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065ca:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <vPortSetupTimerInterrupt+0x38>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065d0:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <vPortSetupTimerInterrupt+0x3c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a0a      	ldr	r2, [pc, #40]	; (8006600 <vPortSetupTimerInterrupt+0x40>)
 80065d6:	fba2 2303 	umull	r2, r3, r2, r3
 80065da:	099b      	lsrs	r3, r3, #6
 80065dc:	4a09      	ldr	r2, [pc, #36]	; (8006604 <vPortSetupTimerInterrupt+0x44>)
 80065de:	3b01      	subs	r3, #1
 80065e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065e2:	4b04      	ldr	r3, [pc, #16]	; (80065f4 <vPortSetupTimerInterrupt+0x34>)
 80065e4:	2207      	movs	r2, #7
 80065e6:	601a      	str	r2, [r3, #0]
}
 80065e8:	bf00      	nop
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	e000e010 	.word	0xe000e010
 80065f8:	e000e018 	.word	0xe000e018
 80065fc:	20000000 	.word	0x20000000
 8006600:	10624dd3 	.word	0x10624dd3
 8006604:	e000e014 	.word	0xe000e014

08006608 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006608:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006618 <vPortEnableVFP+0x10>
 800660c:	6801      	ldr	r1, [r0, #0]
 800660e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006612:	6001      	str	r1, [r0, #0]
 8006614:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006616:	bf00      	nop
 8006618:	e000ed88 	.word	0xe000ed88

0800661c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006622:	f3ef 8305 	mrs	r3, IPSR
 8006626:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b0f      	cmp	r3, #15
 800662c:	d916      	bls.n	800665c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800662e:	4a19      	ldr	r2, [pc, #100]	; (8006694 <vPortValidateInterruptPriority+0x78>)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006638:	4b17      	ldr	r3, [pc, #92]	; (8006698 <vPortValidateInterruptPriority+0x7c>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	7afa      	ldrb	r2, [r7, #11]
 800663e:	429a      	cmp	r2, r3
 8006640:	d20c      	bcs.n	800665c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006646:	b672      	cpsid	i
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	b662      	cpsie	i
 8006656:	607b      	str	r3, [r7, #4]
}
 8006658:	bf00      	nop
 800665a:	e7fe      	b.n	800665a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800665c:	4b0f      	ldr	r3, [pc, #60]	; (800669c <vPortValidateInterruptPriority+0x80>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006664:	4b0e      	ldr	r3, [pc, #56]	; (80066a0 <vPortValidateInterruptPriority+0x84>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d90c      	bls.n	8006686 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	b672      	cpsid	i
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	b662      	cpsie	i
 8006680:	603b      	str	r3, [r7, #0]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <vPortValidateInterruptPriority+0x68>
	}
 8006686:	bf00      	nop
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	e000e3f0 	.word	0xe000e3f0
 8006698:	20001520 	.word	0x20001520
 800669c:	e000ed0c 	.word	0xe000ed0c
 80066a0:	20001524 	.word	0x20001524

080066a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08a      	sub	sp, #40	; 0x28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066ac:	2300      	movs	r3, #0
 80066ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066b0:	f7fe fd8a 	bl	80051c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066b4:	4b5b      	ldr	r3, [pc, #364]	; (8006824 <pvPortMalloc+0x180>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066bc:	f000 f91a 	bl	80068f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066c0:	4b59      	ldr	r3, [pc, #356]	; (8006828 <pvPortMalloc+0x184>)
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4013      	ands	r3, r2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f040 8092 	bne.w	80067f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01f      	beq.n	8006714 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80066d4:	2208      	movs	r2, #8
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4413      	add	r3, r2
 80066da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d016      	beq.n	8006714 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f023 0307 	bic.w	r3, r3, #7
 80066ec:	3308      	adds	r3, #8
 80066ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00c      	beq.n	8006714 <pvPortMalloc+0x70>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	b672      	cpsid	i
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	b662      	cpsie	i
 800670e:	617b      	str	r3, [r7, #20]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d06b      	beq.n	80067f2 <pvPortMalloc+0x14e>
 800671a:	4b44      	ldr	r3, [pc, #272]	; (800682c <pvPortMalloc+0x188>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d866      	bhi.n	80067f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006724:	4b42      	ldr	r3, [pc, #264]	; (8006830 <pvPortMalloc+0x18c>)
 8006726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006728:	4b41      	ldr	r3, [pc, #260]	; (8006830 <pvPortMalloc+0x18c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800672e:	e004      	b.n	800673a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	429a      	cmp	r2, r3
 8006742:	d903      	bls.n	800674c <pvPortMalloc+0xa8>
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f1      	bne.n	8006730 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800674c:	4b35      	ldr	r3, [pc, #212]	; (8006824 <pvPortMalloc+0x180>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006752:	429a      	cmp	r2, r3
 8006754:	d04d      	beq.n	80067f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2208      	movs	r2, #8
 800675c:	4413      	add	r3, r2
 800675e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	2308      	movs	r3, #8
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	429a      	cmp	r2, r3
 8006776:	d921      	bls.n	80067bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00c      	beq.n	80067a4 <pvPortMalloc+0x100>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	b672      	cpsid	i
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	b662      	cpsie	i
 800679e:	613b      	str	r3, [r7, #16]
}
 80067a0:	bf00      	nop
 80067a2:	e7fe      	b.n	80067a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	1ad2      	subs	r2, r2, r3
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067b6:	69b8      	ldr	r0, [r7, #24]
 80067b8:	f000 f8fe 	bl	80069b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067bc:	4b1b      	ldr	r3, [pc, #108]	; (800682c <pvPortMalloc+0x188>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	4a19      	ldr	r2, [pc, #100]	; (800682c <pvPortMalloc+0x188>)
 80067c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067ca:	4b18      	ldr	r3, [pc, #96]	; (800682c <pvPortMalloc+0x188>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4b19      	ldr	r3, [pc, #100]	; (8006834 <pvPortMalloc+0x190>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d203      	bcs.n	80067de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067d6:	4b15      	ldr	r3, [pc, #84]	; (800682c <pvPortMalloc+0x188>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a16      	ldr	r2, [pc, #88]	; (8006834 <pvPortMalloc+0x190>)
 80067dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	4b11      	ldr	r3, [pc, #68]	; (8006828 <pvPortMalloc+0x184>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	431a      	orrs	r2, r3
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067f2:	f7fe fcf7 	bl	80051e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00c      	beq.n	800681a <pvPortMalloc+0x176>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	b672      	cpsid	i
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	b662      	cpsie	i
 8006814:	60fb      	str	r3, [r7, #12]
}
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <pvPortMalloc+0x174>
	return pvReturn;
 800681a:	69fb      	ldr	r3, [r7, #28]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3728      	adds	r7, #40	; 0x28
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	20005130 	.word	0x20005130
 8006828:	2000513c 	.word	0x2000513c
 800682c:	20005134 	.word	0x20005134
 8006830:	20005128 	.word	0x20005128
 8006834:	20005138 	.word	0x20005138

08006838 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d04c      	beq.n	80068e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800684a:	2308      	movs	r3, #8
 800684c:	425b      	negs	r3, r3
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4413      	add	r3, r2
 8006852:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	4b23      	ldr	r3, [pc, #140]	; (80068ec <vPortFree+0xb4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4013      	ands	r3, r2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10c      	bne.n	8006880 <vPortFree+0x48>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	b672      	cpsid	i
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	b662      	cpsie	i
 800687a:	60fb      	str	r3, [r7, #12]
}
 800687c:	bf00      	nop
 800687e:	e7fe      	b.n	800687e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00c      	beq.n	80068a2 <vPortFree+0x6a>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	b672      	cpsid	i
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	b662      	cpsie	i
 800689c:	60bb      	str	r3, [r7, #8]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	4b11      	ldr	r3, [pc, #68]	; (80068ec <vPortFree+0xb4>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4013      	ands	r3, r2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d019      	beq.n	80068e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d115      	bne.n	80068e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <vPortFree+0xb4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	43db      	mvns	r3, r3
 80068c2:	401a      	ands	r2, r3
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068c8:	f7fe fc7e 	bl	80051c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <vPortFree+0xb8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4413      	add	r3, r2
 80068d6:	4a06      	ldr	r2, [pc, #24]	; (80068f0 <vPortFree+0xb8>)
 80068d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068da:	6938      	ldr	r0, [r7, #16]
 80068dc:	f000 f86c 	bl	80069b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80068e0:	f7fe fc80 	bl	80051e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068e4:	bf00      	nop
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	2000513c 	.word	0x2000513c
 80068f0:	20005134 	.word	0x20005134

080068f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006900:	4b27      	ldr	r3, [pc, #156]	; (80069a0 <prvHeapInit+0xac>)
 8006902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00c      	beq.n	8006928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3307      	adds	r3, #7
 8006912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0307 	bic.w	r3, r3, #7
 800691a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	4a1f      	ldr	r2, [pc, #124]	; (80069a0 <prvHeapInit+0xac>)
 8006924:	4413      	add	r3, r2
 8006926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800692c:	4a1d      	ldr	r2, [pc, #116]	; (80069a4 <prvHeapInit+0xb0>)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006932:	4b1c      	ldr	r3, [pc, #112]	; (80069a4 <prvHeapInit+0xb0>)
 8006934:	2200      	movs	r2, #0
 8006936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	4413      	add	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006940:	2208      	movs	r2, #8
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	1a9b      	subs	r3, r3, r2
 8006946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0307 	bic.w	r3, r3, #7
 800694e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4a15      	ldr	r2, [pc, #84]	; (80069a8 <prvHeapInit+0xb4>)
 8006954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006956:	4b14      	ldr	r3, [pc, #80]	; (80069a8 <prvHeapInit+0xb4>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2200      	movs	r2, #0
 800695c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800695e:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <prvHeapInit+0xb4>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	1ad2      	subs	r2, r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006974:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <prvHeapInit+0xb4>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <prvHeapInit+0xb8>)
 8006982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <prvHeapInit+0xbc>)
 800698a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800698c:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <prvHeapInit+0xc0>)
 800698e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006992:	601a      	str	r2, [r3, #0]
}
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	20001528 	.word	0x20001528
 80069a4:	20005128 	.word	0x20005128
 80069a8:	20005130 	.word	0x20005130
 80069ac:	20005138 	.word	0x20005138
 80069b0:	20005134 	.word	0x20005134
 80069b4:	2000513c 	.word	0x2000513c

080069b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069c0:	4b28      	ldr	r3, [pc, #160]	; (8006a64 <prvInsertBlockIntoFreeList+0xac>)
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	e002      	b.n	80069cc <prvInsertBlockIntoFreeList+0x14>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d8f7      	bhi.n	80069c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	4413      	add	r3, r2
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d108      	bne.n	80069fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	441a      	add	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	441a      	add	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d118      	bne.n	8006a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <prvInsertBlockIntoFreeList+0xb0>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d00d      	beq.n	8006a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	441a      	add	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	e008      	b.n	8006a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a36:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <prvInsertBlockIntoFreeList+0xb0>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e003      	b.n	8006a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d002      	beq.n	8006a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a56:	bf00      	nop
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	20005128 	.word	0x20005128
 8006a68:	20005130 	.word	0x20005130

08006a6c <__libc_init_array>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	4d0d      	ldr	r5, [pc, #52]	; (8006aa4 <__libc_init_array+0x38>)
 8006a70:	4c0d      	ldr	r4, [pc, #52]	; (8006aa8 <__libc_init_array+0x3c>)
 8006a72:	1b64      	subs	r4, r4, r5
 8006a74:	10a4      	asrs	r4, r4, #2
 8006a76:	2600      	movs	r6, #0
 8006a78:	42a6      	cmp	r6, r4
 8006a7a:	d109      	bne.n	8006a90 <__libc_init_array+0x24>
 8006a7c:	4d0b      	ldr	r5, [pc, #44]	; (8006aac <__libc_init_array+0x40>)
 8006a7e:	4c0c      	ldr	r4, [pc, #48]	; (8006ab0 <__libc_init_array+0x44>)
 8006a80:	f000 f82e 	bl	8006ae0 <_init>
 8006a84:	1b64      	subs	r4, r4, r5
 8006a86:	10a4      	asrs	r4, r4, #2
 8006a88:	2600      	movs	r6, #0
 8006a8a:	42a6      	cmp	r6, r4
 8006a8c:	d105      	bne.n	8006a9a <__libc_init_array+0x2e>
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a94:	4798      	blx	r3
 8006a96:	3601      	adds	r6, #1
 8006a98:	e7ee      	b.n	8006a78 <__libc_init_array+0xc>
 8006a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a9e:	4798      	blx	r3
 8006aa0:	3601      	adds	r6, #1
 8006aa2:	e7f2      	b.n	8006a8a <__libc_init_array+0x1e>
 8006aa4:	08006b60 	.word	0x08006b60
 8006aa8:	08006b60 	.word	0x08006b60
 8006aac:	08006b60 	.word	0x08006b60
 8006ab0:	08006b64 	.word	0x08006b64

08006ab4 <memcpy>:
 8006ab4:	440a      	add	r2, r1
 8006ab6:	4291      	cmp	r1, r2
 8006ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006abc:	d100      	bne.n	8006ac0 <memcpy+0xc>
 8006abe:	4770      	bx	lr
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aca:	4291      	cmp	r1, r2
 8006acc:	d1f9      	bne.n	8006ac2 <memcpy+0xe>
 8006ace:	bd10      	pop	{r4, pc}

08006ad0 <memset>:
 8006ad0:	4402      	add	r2, r0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d100      	bne.n	8006ada <memset+0xa>
 8006ad8:	4770      	bx	lr
 8006ada:	f803 1b01 	strb.w	r1, [r3], #1
 8006ade:	e7f9      	b.n	8006ad4 <memset+0x4>

08006ae0 <_init>:
 8006ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae2:	bf00      	nop
 8006ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ae6:	bc08      	pop	{r3}
 8006ae8:	469e      	mov	lr, r3
 8006aea:	4770      	bx	lr

08006aec <_fini>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr
