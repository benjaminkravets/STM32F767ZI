
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a68  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007c68  08007c68  00017c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d2c  08007d2c  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08007d2c  08007d2c  00017d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d34  08007d34  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d34  08007d34  00017d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d38  08007d38  00017d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  08007d4c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  08007dec  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005044  20000150  08007e8c  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005194  08007e8c  00025194  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002242b  00000000  00000000  0002017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ef1  00000000  00000000  000425a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a20  00000000  00000000  000464a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000018a8  00000000  00000000  00047ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000045f1  00000000  00000000  00049768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001da70  00000000  00000000  0004dd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010da66  00000000  00000000  0006b7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0017922f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006f6c  00000000  00000000  00179280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	08007c50 	.word	0x08007c50

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	08007c50 	.word	0x08007c50

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fd01 	bl	8000f4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f844 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f960 	bl	8000814 <MX_GPIO_Init>
  MX_ETH_Init();
 8000554:	f000 f8b2 	bl	80006bc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000558:	f000 f8fe 	bl	8000758 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055c:	f000 f92c 	bl	80007b8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000560:	f004 f848 	bl	80045f4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000564:	4a11      	ldr	r2, [pc, #68]	; (80005ac <main+0x68>)
 8000566:	2101      	movs	r1, #1
 8000568:	2001      	movs	r0, #1
 800056a:	f004 fa1b 	bl	80049a4 <osSemaphoreNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <main+0x6c>)
 8000572:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <main+0x70>)
 8000576:	2200      	movs	r2, #0
 8000578:	2101      	movs	r1, #1
 800057a:	480f      	ldr	r0, [pc, #60]	; (80005b8 <main+0x74>)
 800057c:	f004 f98e 	bl	800489c <osTimerNew>
 8000580:	4603      	mov	r3, r0
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <main+0x78>)
 8000584:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <main+0x7c>)
 8000588:	2100      	movs	r1, #0
 800058a:	480e      	ldr	r0, [pc, #56]	; (80005c4 <main+0x80>)
 800058c:	f004 f89c 	bl	80046c8 <osThreadNew>
 8000590:	4603      	mov	r3, r0
 8000592:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <main+0x84>)
 8000594:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000596:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <main+0x88>)
 8000598:	2100      	movs	r1, #0
 800059a:	480d      	ldr	r0, [pc, #52]	; (80005d0 <main+0x8c>)
 800059c:	f004 f894 	bl	80046c8 <osThreadNew>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a0c      	ldr	r2, [pc, #48]	; (80005d4 <main+0x90>)
 80005a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a6:	f004 f859 	bl	800465c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005aa:	e7fe      	b.n	80005aa <main+0x66>
 80005ac:	08007d04 	.word	0x08007d04
 80005b0:	200007f0 	.word	0x200007f0
 80005b4:	08007cf4 	.word	0x08007cf4
 80005b8:	080009d9 	.word	0x080009d9
 80005bc:	200007ec 	.word	0x200007ec
 80005c0:	08007cac 	.word	0x08007cac
 80005c4:	08000959 	.word	0x08000959
 80005c8:	200007e4 	.word	0x200007e4
 80005cc:	08007cd0 	.word	0x08007cd0
 80005d0:	080009a9 	.word	0x080009a9
 80005d4:	200007e8 	.word	0x200007e8

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	; 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 fb2a 	bl	8007c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005fc:	f001 fc28 	bl	8001e50 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <SystemClock_Config+0xdc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a2b      	ldr	r2, [pc, #172]	; (80006b4 <SystemClock_Config+0xdc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SystemClock_Config+0xdc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <SystemClock_Config+0xe0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000620:	4a25      	ldr	r2, [pc, #148]	; (80006b8 <SystemClock_Config+0xe0>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xe0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000638:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800063c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800064c:	2360      	movs	r3, #96	; 0x60
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fc55 	bl	8001f10 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800066c:	f000 f9da 	bl	8000a24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000670:	f001 fbfe 	bl	8001e70 <HAL_PWREx_EnableOverDrive>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800067a:	f000 f9d3 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2103      	movs	r1, #3
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fee6 	bl	800246c <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006a6:	f000 f9bd 	bl	8000a24 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <MX_ETH_Init+0x84>)
 80006c2:	4a20      	ldr	r2, [pc, #128]	; (8000744 <MX_ETH_Init+0x88>)
 80006c4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_ETH_Init+0x8c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_ETH_Init+0x8c>)
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_ETH_Init+0x8c>)
 80006d4:	22e1      	movs	r2, #225	; 0xe1
 80006d6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_ETH_Init+0x8c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_ETH_Init+0x8c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_ETH_Init+0x8c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <MX_ETH_Init+0x84>)
 80006ec:	4a16      	ldr	r2, [pc, #88]	; (8000748 <MX_ETH_Init+0x8c>)
 80006ee:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_ETH_Init+0x84>)
 80006f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006f6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_ETH_Init+0x84>)
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <MX_ETH_Init+0x90>)
 80006fc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_ETH_Init+0x84>)
 8000700:	4a13      	ldr	r2, [pc, #76]	; (8000750 <MX_ETH_Init+0x94>)
 8000702:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_ETH_Init+0x84>)
 8000706:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800070a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_ETH_Init+0x84>)
 800070e:	f000 fd51 	bl	80011b4 <HAL_ETH_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f984 	bl	8000a24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800071c:	2238      	movs	r2, #56	; 0x38
 800071e:	2100      	movs	r1, #0
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <MX_ETH_Init+0x98>)
 8000722:	f007 fa8d 	bl	8007c40 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_ETH_Init+0x98>)
 8000728:	2221      	movs	r2, #33	; 0x21
 800072a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_ETH_Init+0x98>)
 800072e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000732:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_ETH_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200001a4 	.word	0x200001a4
 8000744:	40028000 	.word	0x40028000
 8000748:	200007f4 	.word	0x200007f4
 800074c:	200000b0 	.word	0x200000b0
 8000750:	20000010 	.word	0x20000010
 8000754:	2000016c 	.word	0x2000016c

08000758 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_USART3_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 800079c:	f002 ffc6 	bl	800372c <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f93d 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000254 	.word	0x20000254
 80007b4:	40004800 	.word	0x40004800

080007b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c6:	2206      	movs	r2, #6
 80007c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d8:	2202      	movs	r2, #2
 80007da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2201      	movs	r2, #1
 80007e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fc:	f001 f9df 	bl	8001bbe <HAL_PCD_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000806:	f000 f90d 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200002dc 	.word	0x200002dc

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b47      	ldr	r3, [pc, #284]	; (8000948 <MX_GPIO_Init+0x134>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a46      	ldr	r2, [pc, #280]	; (8000948 <MX_GPIO_Init+0x134>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b44      	ldr	r3, [pc, #272]	; (8000948 <MX_GPIO_Init+0x134>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	4b41      	ldr	r3, [pc, #260]	; (8000948 <MX_GPIO_Init+0x134>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a40      	ldr	r2, [pc, #256]	; (8000948 <MX_GPIO_Init+0x134>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b3e      	ldr	r3, [pc, #248]	; (8000948 <MX_GPIO_Init+0x134>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b3b      	ldr	r3, [pc, #236]	; (8000948 <MX_GPIO_Init+0x134>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a3a      	ldr	r2, [pc, #232]	; (8000948 <MX_GPIO_Init+0x134>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b38      	ldr	r3, [pc, #224]	; (8000948 <MX_GPIO_Init+0x134>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b35      	ldr	r3, [pc, #212]	; (8000948 <MX_GPIO_Init+0x134>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a34      	ldr	r2, [pc, #208]	; (8000948 <MX_GPIO_Init+0x134>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b32      	ldr	r3, [pc, #200]	; (8000948 <MX_GPIO_Init+0x134>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	4b2f      	ldr	r3, [pc, #188]	; (8000948 <MX_GPIO_Init+0x134>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a2e      	ldr	r2, [pc, #184]	; (8000948 <MX_GPIO_Init+0x134>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <MX_GPIO_Init+0x134>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a2:	4b29      	ldr	r3, [pc, #164]	; (8000948 <MX_GPIO_Init+0x134>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a28      	ldr	r2, [pc, #160]	; (8000948 <MX_GPIO_Init+0x134>)
 80008a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b26      	ldr	r3, [pc, #152]	; (8000948 <MX_GPIO_Init+0x134>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80008c0:	4822      	ldr	r0, [pc, #136]	; (800094c <MX_GPIO_Init+0x138>)
 80008c2:	f001 f949 	bl	8001b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2140      	movs	r1, #64	; 0x40
 80008ca:	4821      	ldr	r0, [pc, #132]	; (8000950 <MX_GPIO_Init+0x13c>)
 80008cc:	f001 f944 	bl	8001b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	481b      	ldr	r0, [pc, #108]	; (8000954 <MX_GPIO_Init+0x140>)
 80008e8:	f000 ff8a 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ec:	f244 0381 	movw	r3, #16513	; 0x4081
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4811      	ldr	r0, [pc, #68]	; (800094c <MX_GPIO_Init+0x138>)
 8000906:	f000 ff7b 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800090a:	2340      	movs	r3, #64	; 0x40
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <MX_GPIO_Init+0x13c>)
 8000922:	f000 ff6d 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_GPIO_Init+0x13c>)
 800093a:	f000 ff61 	bl	8001800 <HAL_GPIO_Init>

}
 800093e:	bf00      	nop
 8000940:	3730      	adds	r7, #48	; 0x30
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40020400 	.word	0x40020400
 8000950:	40021800 	.word	0x40021800
 8000954:	40020800 	.word	0x40020800

08000958 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if (xSemaphoreTake(myBinarySem01Handle, portMAX_DELAY) == pdPASS)
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <StartBlink01+0x48>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	4618      	mov	r0, r3
 800096a:	f004 fdef 	bl	800554c <xQueueSemaphoreTake>
 800096e:	4603      	mov	r3, r0
 8000970:	2b01      	cmp	r3, #1
 8000972:	d1f5      	bne.n	8000960 <StartBlink01+0x8>
	{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	480b      	ldr	r0, [pc, #44]	; (80009a4 <StartBlink01+0x4c>)
 8000978:	f001 f907 	bl	8001b8a <HAL_GPIO_TogglePin>
		    osDelay(50/portTICK_PERIOD_MS);
 800097c:	2032      	movs	r0, #50	; 0x32
 800097e:	f003 ff49 	bl	8004814 <osDelay>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	4807      	ldr	r0, [pc, #28]	; (80009a4 <StartBlink01+0x4c>)
 8000986:	f001 f900 	bl	8001b8a <HAL_GPIO_TogglePin>
		    osDelay(50/portTICK_PERIOD_MS);
 800098a:	2032      	movs	r0, #50	; 0x32
 800098c:	f003 ff42 	bl	8004814 <osDelay>
		    xSemaphoreGive(myBinarySem01Handle);
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <StartBlink01+0x48>)
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	2300      	movs	r3, #0
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	f004 fb4b 	bl	8005034 <xQueueGenericSend>
	if (xSemaphoreTake(myBinarySem01Handle, portMAX_DELAY) == pdPASS)
 800099e:	e7df      	b.n	8000960 <StartBlink01+0x8>
 80009a0:	200007f0 	.word	0x200007f0
 80009a4:	40020400 	.word	0x40020400

080009a8 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
	uint_fast8_t count = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
	for(;;)
  	  {
		if(++count >= 10)
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3301      	adds	r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2b09      	cmp	r3, #9
 80009be:	d901      	bls.n	80009c4 <StartBlink02+0x1c>
		{
			count = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]

		}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80009c4:	2101      	movs	r1, #1
 80009c6:	4803      	ldr	r0, [pc, #12]	; (80009d4 <StartBlink02+0x2c>)
 80009c8:	f001 f8df 	bl	8001b8a <HAL_GPIO_TogglePin>
	    osDelay(100/portTICK_PERIOD_MS);
 80009cc:	2064      	movs	r0, #100	; 0x64
 80009ce:	f003 ff21 	bl	8004814 <osDelay>
		if(++count >= 10)
 80009d2:	e7ef      	b.n	80009b4 <StartBlink02+0xc>
 80009d4:	40020400 	.word	0x40020400

080009d8 <Callback01>:
  /* USER CODE END StartBlink02 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  else
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
  }
  */
  osDelay(100/portTICK_PERIOD_MS);
 80009e0:	2064      	movs	r0, #100	; 0x64
 80009e2:	f003 ff17 	bl	8004814 <osDelay>
  xSemaphoreGive(myBinarySem01Handle);
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <Callback01+0x24>)
 80009e8:	6818      	ldr	r0, [r3, #0]
 80009ea:	2300      	movs	r3, #0
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	f004 fb20 	bl	8005034 <xQueueGenericSend>

  /* USER CODE END Callback01 */
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200007f0 	.word	0x200007f0

08000a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d101      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a12:	f000 faa9 	bl	8000f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40001000 	.word	0x40001000

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	210f      	movs	r1, #15
 8000a6a:	f06f 0001 	mvn.w	r0, #1
 8000a6e:	f000 fb77 	bl	8001160 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a4e      	ldr	r2, [pc, #312]	; (8000bd8 <HAL_ETH_MspInit+0x158>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	f040 8096 	bne.w	8000bd0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000aa4:	4b4d      	ldr	r3, [pc, #308]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a4c      	ldr	r2, [pc, #304]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000aaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab0:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab8:	623b      	str	r3, [r7, #32]
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	4a46      	ldr	r2, [pc, #280]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000ac2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac8:	4b44      	ldr	r3, [pc, #272]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ad0:	61fb      	str	r3, [r7, #28]
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	4b41      	ldr	r3, [pc, #260]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	4a40      	ldr	r2, [pc, #256]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000ada:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ade:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae0:	4b3e      	ldr	r3, [pc, #248]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aec:	4b3b      	ldr	r3, [pc, #236]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	4a3a      	ldr	r2, [pc, #232]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6313      	str	r3, [r2, #48]	; 0x30
 8000af8:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a34      	ldr	r2, [pc, #208]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a2e      	ldr	r2, [pc, #184]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b22:	f043 0302 	orr.w	r3, r3, #2
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b34:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a28      	ldr	r2, [pc, #160]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b4c:	2332      	movs	r3, #50	; 0x32
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b5c:	230b      	movs	r3, #11
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	4619      	mov	r1, r3
 8000b66:	481e      	ldr	r0, [pc, #120]	; (8000be0 <HAL_ETH_MspInit+0x160>)
 8000b68:	f000 fe4a 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b6c:	2386      	movs	r3, #134	; 0x86
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7c:	230b      	movs	r3, #11
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4817      	ldr	r0, [pc, #92]	; (8000be4 <HAL_ETH_MspInit+0x164>)
 8000b88:	f000 fe3a 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9e:	230b      	movs	r3, #11
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480f      	ldr	r0, [pc, #60]	; (8000be8 <HAL_ETH_MspInit+0x168>)
 8000baa:	f000 fe29 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4808      	ldr	r0, [pc, #32]	; (8000bec <HAL_ETH_MspInit+0x16c>)
 8000bcc:	f000 fe18 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3738      	adds	r7, #56	; 0x38
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40028000 	.word	0x40028000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020800 	.word	0x40020800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40020400 	.word	0x40020400
 8000bec:	40021800 	.word	0x40021800

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0ae      	sub	sp, #184	; 0xb8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2290      	movs	r2, #144	; 0x90
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f007 f815 	bl	8007c40 <memset>
  if(huart->Instance==USART3)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a22      	ldr	r2, [pc, #136]	; (8000ca4 <HAL_UART_MspInit+0xb4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d13c      	bne.n	8000c9a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 fe74 	bl	800291c <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f7ff fef3 	bl	8000a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_UART_MspInit+0xb8>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_UART_MspInit+0xb8>)
 8000c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_UART_MspInit+0xb8>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_UART_MspInit+0xb8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <HAL_UART_MspInit+0xb8>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_UART_MspInit+0xb8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_UART_MspInit+0xbc>)
 8000c96:	f000 fdb3 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	37b8      	adds	r7, #184	; 0xb8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40004800 	.word	0x40004800
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020c00 	.word	0x40020c00

08000cb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0ae      	sub	sp, #184	; 0xb8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2290      	movs	r2, #144	; 0x90
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f006 ffb5 	bl	8007c40 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cde:	d159      	bne.n	8000d94 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ce0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ce4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 fe13 	bl	800291c <HAL_RCCEx_PeriphCLKConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000cfc:	f7ff fe92 	bl	8000a24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <HAL_PCD_MspInit+0xec>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a25      	ldr	r2, [pc, #148]	; (8000d9c <HAL_PCD_MspInit+0xec>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <HAL_PCD_MspInit+0xec>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d18:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d32:	230a      	movs	r3, #10
 8000d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4818      	ldr	r0, [pc, #96]	; (8000da0 <HAL_PCD_MspInit+0xf0>)
 8000d40:	f000 fd5e 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4810      	ldr	r0, [pc, #64]	; (8000da0 <HAL_PCD_MspInit+0xf0>)
 8000d60:	f000 fd4e 	bl	8001800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_PCD_MspInit+0xec>)
 8000d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d68:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <HAL_PCD_MspInit+0xec>)
 8000d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6e:	6353      	str	r3, [r2, #52]	; 0x34
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_PCD_MspInit+0xec>)
 8000d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <HAL_PCD_MspInit+0xec>)
 8000d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_PCD_MspInit+0xec>)
 8000d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d86:	6453      	str	r3, [r2, #68]	; 0x44
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <HAL_PCD_MspInit+0xec>)
 8000d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d94:	bf00      	nop
 8000d96:	37b8      	adds	r7, #184	; 0xb8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000

08000da4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000db4:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <HAL_InitTick+0xe0>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	4a32      	ldr	r2, [pc, #200]	; (8000e84 <HAL_InitTick+0xe0>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc0:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <HAL_InitTick+0xe0>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	f003 0310 	and.w	r3, r3, #16
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dcc:	f107 0210 	add.w	r2, r7, #16
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fd6e 	bl	80028b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ddc:	6a3b      	ldr	r3, [r7, #32]
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d103      	bne.n	8000dee <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000de6:	f001 fd3f 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8000dea:	6378      	str	r0, [r7, #52]	; 0x34
 8000dec:	e004      	b.n	8000df8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dee:	f001 fd3b 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8000df2:	4603      	mov	r3, r0
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dfa:	4a23      	ldr	r2, [pc, #140]	; (8000e88 <HAL_InitTick+0xe4>)
 8000dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000e00:	0c9b      	lsrs	r3, r3, #18
 8000e02:	3b01      	subs	r3, #1
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <HAL_InitTick+0xe8>)
 8000e08:	4a21      	ldr	r2, [pc, #132]	; (8000e90 <HAL_InitTick+0xec>)
 8000e0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <HAL_InitTick+0xe8>)
 8000e0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e12:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e14:	4a1d      	ldr	r2, [pc, #116]	; (8000e8c <HAL_InitTick+0xe8>)
 8000e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e18:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <HAL_InitTick+0xe8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <HAL_InitTick+0xe8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_InitTick+0xe8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e2c:	4817      	ldr	r0, [pc, #92]	; (8000e8c <HAL_InitTick+0xe8>)
 8000e2e:	f002 f99d 	bl	800316c <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d11b      	bne.n	8000e78 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e40:	4812      	ldr	r0, [pc, #72]	; (8000e8c <HAL_InitTick+0xe8>)
 8000e42:	f002 f9f5 	bl	8003230 <HAL_TIM_Base_Start_IT>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d111      	bne.n	8000e78 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e54:	2036      	movs	r0, #54	; 0x36
 8000e56:	f000 f99f 	bl	8001198 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d808      	bhi.n	8000e72 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	2036      	movs	r0, #54	; 0x36
 8000e66:	f000 f97b 	bl	8001160 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_InitTick+0xf0>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	e002      	b.n	8000e78 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3738      	adds	r7, #56	; 0x38
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	431bde83 	.word	0x431bde83
 8000e8c:	200007fc 	.word	0x200007fc
 8000e90:	40001000 	.word	0x40001000
 8000e94:	20000004 	.word	0x20000004

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <NMI_Handler+0x4>

08000e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <TIM6_DAC_IRQHandler+0x10>)
 8000eca:	f002 fa29 	bl	8003320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200007fc 	.word	0x200007fc

08000ed8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f02:	490e      	ldr	r1, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f18:	4c0b      	ldr	r4, [pc, #44]	; (8000f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f26:	f7ff ffd7 	bl	8000ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f006 fe57 	bl	8007bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fb09 	bl	8000544 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f34:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f40:	08007d3c 	.word	0x08007d3c
  ldr r2, =_sbss
 8000f44:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000f48:	20005194 	.word	0x20005194

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>

08000f4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f52:	2003      	movs	r0, #3
 8000f54:	f000 f8f9 	bl	800114a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f58:	200f      	movs	r0, #15
 8000f5a:	f7ff ff23 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5e:	f7ff fd67 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000848 	.word	0x20000848

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000848 	.word	0x20000848

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <__NVIC_SetPriorityGrouping+0x40>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 800101a:	4313      	orrs	r3, r2
 800101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <__NVIC_SetPriorityGrouping+0x40>)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	60d3      	str	r3, [r2, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00
 8001034:	05fa0000 	.word	0x05fa0000

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <__NVIC_EnableIRQ+0x38>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff4c 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001172:	f7ff ff61 	bl	8001038 <__NVIC_GetPriorityGrouping>
 8001176:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f7ff ffb1 	bl	80010e4 <NVIC_EncodePriority>
 8001182:	4602      	mov	r2, r0
 8001184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff80 	bl	8001090 <__NVIC_SetPriority>
}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff54 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e06a      	b.n	800129c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d106      	bne.n	80011de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2223      	movs	r2, #35	; 0x23
 80011d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff fc51 	bl	8000a80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <HAL_ETH_Init+0xf0>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a30      	ldr	r2, [pc, #192]	; (80012a4 <HAL_ETH_Init+0xf0>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <HAL_ETH_Init+0xf0>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011f6:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <HAL_ETH_Init+0xf4>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	4a2b      	ldr	r2, [pc, #172]	; (80012a8 <HAL_ETH_Init+0xf4>)
 80011fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001200:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <HAL_ETH_Init+0xf4>)
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	4927      	ldr	r1, [pc, #156]	; (80012a8 <HAL_ETH_Init+0xf4>)
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001210:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <HAL_ETH_Init+0xf4>)
 8001212:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800122a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800122c:	f7ff feb0 	bl	8000f90 <HAL_GetTick>
 8001230:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001232:	e011      	b.n	8001258 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001234:	f7ff feac 	bl	8000f90 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001242:	d909      	bls.n	8001258 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2204      	movs	r2, #4
 8001248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	22e0      	movs	r2, #224	; 0xe0
 8001250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e021      	b.n	800129c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1e4      	bne.n	8001234 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f958 	bl	8001520 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f9ff 	bl	8001674 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 fa55 	bl	8001726 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	461a      	mov	r2, r3
 8001282:	2100      	movs	r1, #0
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f9bd 	bl	8001604 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2210      	movs	r2, #16
 8001296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40013800 	.word	0x40013800

080012ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	4b51      	ldr	r3, [pc, #324]	; (8001408 <ETH_SetMACConfig+0x15c>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	7c1b      	ldrb	r3, [r3, #16]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d102      	bne.n	80012d4 <ETH_SetMACConfig+0x28>
 80012ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012d2:	e000      	b.n	80012d6 <ETH_SetMACConfig+0x2a>
 80012d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	7c5b      	ldrb	r3, [r3, #17]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <ETH_SetMACConfig+0x38>
 80012de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012e2:	e000      	b.n	80012e6 <ETH_SetMACConfig+0x3a>
 80012e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	7fdb      	ldrb	r3, [r3, #31]
 80012f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80012f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	7f92      	ldrb	r2, [r2, #30]
 8001300:	2a00      	cmp	r2, #0
 8001302:	d102      	bne.n	800130a <ETH_SetMACConfig+0x5e>
 8001304:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001308:	e000      	b.n	800130c <ETH_SetMACConfig+0x60>
 800130a:	2200      	movs	r2, #0
                        macconf->Speed |
 800130c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	7f1b      	ldrb	r3, [r3, #28]
 8001312:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001314:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800131a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	791b      	ldrb	r3, [r3, #4]
 8001320:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001322:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	f892 2020 	ldrb.w	r2, [r2, #32]
 800132a:	2a00      	cmp	r2, #0
 800132c:	d102      	bne.n	8001334 <ETH_SetMACConfig+0x88>
 800132e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001332:	e000      	b.n	8001336 <ETH_SetMACConfig+0x8a>
 8001334:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001336:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	7bdb      	ldrb	r3, [r3, #15]
 800133c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800133e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001344:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800134c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800134e:	4313      	orrs	r3, r2
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001366:	2001      	movs	r0, #1
 8001368:	f7ff fe1e 	bl	8000fa8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001382:	4013      	ands	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001392:	2a00      	cmp	r2, #0
 8001394:	d101      	bne.n	800139a <ETH_SetMACConfig+0xee>
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	e000      	b.n	800139c <ETH_SetMACConfig+0xf0>
 800139a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800139c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80013aa:	2a01      	cmp	r2, #1
 80013ac:	d101      	bne.n	80013b2 <ETH_SetMACConfig+0x106>
 80013ae:	2208      	movs	r2, #8
 80013b0:	e000      	b.n	80013b4 <ETH_SetMACConfig+0x108>
 80013b2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80013b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80013bc:	2a01      	cmp	r2, #1
 80013be:	d101      	bne.n	80013c4 <ETH_SetMACConfig+0x118>
 80013c0:	2204      	movs	r2, #4
 80013c2:	e000      	b.n	80013c6 <ETH_SetMACConfig+0x11a>
 80013c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80013ce:	2a01      	cmp	r2, #1
 80013d0:	d101      	bne.n	80013d6 <ETH_SetMACConfig+0x12a>
 80013d2:	2202      	movs	r2, #2
 80013d4:	e000      	b.n	80013d8 <ETH_SetMACConfig+0x12c>
 80013d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013d8:	4313      	orrs	r3, r2
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff fdd9 	bl	8000fa8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	ff20810f 	.word	0xff20810f

0800140c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4b3d      	ldr	r3, [pc, #244]	; (800151c <ETH_SetDMAConfig+0x110>)
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	7b1b      	ldrb	r3, [r3, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <ETH_SetDMAConfig+0x2c>
 8001432:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001436:	e000      	b.n	800143a <ETH_SetDMAConfig+0x2e>
 8001438:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	7b5b      	ldrb	r3, [r3, #13]
 800143e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001440:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	7f52      	ldrb	r2, [r2, #29]
 8001446:	2a00      	cmp	r2, #0
 8001448:	d102      	bne.n	8001450 <ETH_SetDMAConfig+0x44>
 800144a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800144e:	e000      	b.n	8001452 <ETH_SetDMAConfig+0x46>
 8001450:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001452:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	7b9b      	ldrb	r3, [r3, #14]
 8001458:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800145a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001460:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	7f1b      	ldrb	r3, [r3, #28]
 8001466:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001468:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	7f9b      	ldrb	r3, [r3, #30]
 800146e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001470:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001476:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800147e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001480:	4313      	orrs	r3, r2
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001490:	461a      	mov	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f7ff fd80 	bl	8000fa8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b0:	461a      	mov	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	791b      	ldrb	r3, [r3, #4]
 80014ba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014c0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80014c6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014cc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014d4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80014d6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014de:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014e4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014f2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff fd51 	bl	8000fa8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	f8de3f23 	.word	0xf8de3f23

08001520 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0a6      	sub	sp, #152	; 0x98
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001528:	2301      	movs	r3, #1
 800152a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800152e:	2301      	movs	r3, #1
 8001530:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001534:	2300      	movs	r3, #0
 8001536:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800153e:	2301      	movs	r3, #1
 8001540:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800154a:	2301      	movs	r3, #1
 800154c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800155c:	2300      	movs	r3, #0
 800155e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001566:	2300      	movs	r3, #0
 8001568:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001582:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001586:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001588:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800158c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001594:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fe86 	bl	80012ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015a0:	2301      	movs	r3, #1
 80015a2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015a8:	2301      	movs	r3, #1
 80015aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80015cc:	2301      	movs	r3, #1
 80015ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80015d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4619      	mov	r1, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff08 	bl	800140c <ETH_SetDMAConfig>
}
 80015fc:	bf00      	nop
 80015fe:	3798      	adds	r7, #152	; 0x98
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3305      	adds	r3, #5
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	3204      	adds	r2, #4
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	4313      	orrs	r3, r2
 8001620:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <ETH_MACAddressConfig+0x68>)
 8001626:	4413      	add	r3, r2
 8001628:	461a      	mov	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3303      	adds	r3, #3
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	061a      	lsls	r2, r3, #24
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3302      	adds	r3, #2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	041b      	lsls	r3, r3, #16
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3301      	adds	r3, #1
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	4313      	orrs	r3, r2
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	7812      	ldrb	r2, [r2, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <ETH_MACAddressConfig+0x6c>)
 8001656:	4413      	add	r3, r2
 8001658:	461a      	mov	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	6013      	str	r3, [r2, #0]
}
 800165e:	bf00      	nop
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40028040 	.word	0x40028040
 8001670:	40028044 	.word	0x40028044

08001674 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	e03e      	b.n	8001700 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68d9      	ldr	r1, [r3, #12]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	3206      	adds	r2, #6
 80016b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d80c      	bhi.n	80016e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68d9      	ldr	r1, [r3, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	461a      	mov	r2, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	e004      	b.n	80016ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	461a      	mov	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3301      	adds	r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d9bd      	bls.n	8001682 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001718:	611a      	str	r2, [r3, #16]
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001726:	b480      	push	{r7}
 8001728:	b085      	sub	sp, #20
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	e046      	b.n	80017c2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6919      	ldr	r1, [r3, #16]
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001770:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001778:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	3212      	adds	r2, #18
 800178e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d80c      	bhi.n	80017b2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6919      	ldr	r1, [r3, #16]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	461a      	mov	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	e004      	b.n	80017bc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	461a      	mov	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3301      	adds	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d9b5      	bls.n	8001734 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f2:	60da      	str	r2, [r3, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	e175      	b.n	8001b0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	429a      	cmp	r2, r3
 800183a:	f040 8164 	bne.w	8001b06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d005      	beq.n	8001856 <HAL_GPIO_Init+0x56>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d130      	bne.n	80018b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800188c:	2201      	movs	r2, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 0201 	and.w	r2, r3, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d017      	beq.n	80018f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d123      	bne.n	8001948 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	08da      	lsrs	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3208      	adds	r2, #8
 8001908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	08da      	lsrs	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3208      	adds	r2, #8
 8001942:	69b9      	ldr	r1, [r7, #24]
 8001944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0203 	and.w	r2, r3, #3
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80be 	beq.w	8001b06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	4b66      	ldr	r3, [pc, #408]	; (8001b24 <HAL_GPIO_Init+0x324>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a65      	ldr	r2, [pc, #404]	; (8001b24 <HAL_GPIO_Init+0x324>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b63      	ldr	r3, [pc, #396]	; (8001b24 <HAL_GPIO_Init+0x324>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019a2:	4a61      	ldr	r2, [pc, #388]	; (8001b28 <HAL_GPIO_Init+0x328>)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	220f      	movs	r2, #15
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <HAL_GPIO_Init+0x32c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d037      	beq.n	8001a3e <HAL_GPIO_Init+0x23e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a57      	ldr	r2, [pc, #348]	; (8001b30 <HAL_GPIO_Init+0x330>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d031      	beq.n	8001a3a <HAL_GPIO_Init+0x23a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a56      	ldr	r2, [pc, #344]	; (8001b34 <HAL_GPIO_Init+0x334>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d02b      	beq.n	8001a36 <HAL_GPIO_Init+0x236>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a55      	ldr	r2, [pc, #340]	; (8001b38 <HAL_GPIO_Init+0x338>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d025      	beq.n	8001a32 <HAL_GPIO_Init+0x232>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a54      	ldr	r2, [pc, #336]	; (8001b3c <HAL_GPIO_Init+0x33c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d01f      	beq.n	8001a2e <HAL_GPIO_Init+0x22e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a53      	ldr	r2, [pc, #332]	; (8001b40 <HAL_GPIO_Init+0x340>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d019      	beq.n	8001a2a <HAL_GPIO_Init+0x22a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <HAL_GPIO_Init+0x344>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d013      	beq.n	8001a26 <HAL_GPIO_Init+0x226>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a51      	ldr	r2, [pc, #324]	; (8001b48 <HAL_GPIO_Init+0x348>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d00d      	beq.n	8001a22 <HAL_GPIO_Init+0x222>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a50      	ldr	r2, [pc, #320]	; (8001b4c <HAL_GPIO_Init+0x34c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d007      	beq.n	8001a1e <HAL_GPIO_Init+0x21e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4f      	ldr	r2, [pc, #316]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_GPIO_Init+0x21a>
 8001a16:	2309      	movs	r3, #9
 8001a18:	e012      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	e010      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a1e:	2308      	movs	r3, #8
 8001a20:	e00e      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a22:	2307      	movs	r3, #7
 8001a24:	e00c      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a26:	2306      	movs	r3, #6
 8001a28:	e00a      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a2a:	2305      	movs	r3, #5
 8001a2c:	e008      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e004      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f002 0203 	and.w	r2, r2, #3
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a50:	4935      	ldr	r1, [pc, #212]	; (8001b28 <HAL_GPIO_Init+0x328>)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5e:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a82:	4a34      	ldr	r2, [pc, #208]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a88:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aac:	4a29      	ldr	r2, [pc, #164]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab2:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001adc:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b00:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	f67f ae86 	bls.w	8001820 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40021400 	.word	0x40021400
 8001b44:	40021800 	.word	0x40021800
 8001b48:	40021c00 	.word	0x40021c00
 8001b4c:	40022000 	.word	0x40022000
 8001b50:	40022400 	.word	0x40022400
 8001b54:	40013c00 	.word	0x40013c00

08001b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
 8001b64:	4613      	mov	r3, r2
 8001b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b68:	787b      	ldrb	r3, [r7, #1]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b74:	e003      	b.n	8001b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	041a      	lsls	r2, r3, #16
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	619a      	str	r2, [r3, #24]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b085      	sub	sp, #20
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b9c:	887a      	ldrh	r2, [r7, #2]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	041a      	lsls	r2, r3, #16
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	400b      	ands	r3, r1
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	619a      	str	r2, [r3, #24]
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc0:	b08f      	sub	sp, #60	; 0x3c
 8001bc2:	af0a      	add	r7, sp, #40	; 0x28
 8001bc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e116      	b.n	8001dfe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff f860 	bl	8000cb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 fa4c 	bl	80040ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	687e      	ldr	r6, [r7, #4]
 8001c1c:	466d      	mov	r5, sp
 8001c1e:	f106 0410 	add.w	r4, r6, #16
 8001c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c32:	1d33      	adds	r3, r6, #4
 8001c34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c36:	6838      	ldr	r0, [r7, #0]
 8001c38:	f002 f9e0 	bl	8003ffc <USB_CoreInit>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2202      	movs	r2, #2
 8001c46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0d7      	b.n	8001dfe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 fa3a 	bl	80040ce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	e04a      	b.n	8001cf6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	333d      	adds	r3, #61	; 0x3d
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	333c      	adds	r3, #60	; 0x3c
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	b298      	uxth	r0, r3
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	3344      	adds	r3, #68	; 0x44
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	3340      	adds	r3, #64	; 0x40
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3348      	adds	r3, #72	; 0x48
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	334c      	adds	r3, #76	; 0x4c
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	3354      	adds	r3, #84	; 0x54
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d3af      	bcc.n	8001c60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	e044      	b.n	8001d90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d06:	7bfa      	ldrb	r2, [r7, #15]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	440b      	add	r3, r1
 8001d14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d3b5      	bcc.n	8001d06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	687e      	ldr	r6, [r7, #4]
 8001da2:	466d      	mov	r5, sp
 8001da4:	f106 0410 	add.w	r4, r6, #16
 8001da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001db4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001db8:	1d33      	adds	r3, r6, #4
 8001dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dbc:	6838      	ldr	r0, [r7, #0]
 8001dbe:	f002 f9d3 	bl	8004168 <USB_DevInit>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e014      	b.n	8001dfe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d102      	bne.n	8001df2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f80b 	bl	8001e08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fb91 	bl	800451e <USB_DevDisconnect>

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_PCDEx_ActivateLPM+0x44>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	10000003 	.word	0x10000003

08001e50 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40007000 	.word	0x40007000

08001e70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e92:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e9e:	f7ff f877 	bl	8000f90 <HAL_GetTick>
 8001ea2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ea4:	e009      	b.n	8001eba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ea6:	f7ff f873 	bl	8000f90 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eb4:	d901      	bls.n	8001eba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e022      	b.n	8001f00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec6:	d1ee      	bne.n	8001ea6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed4:	f7ff f85c 	bl	8000f90 <HAL_GetTick>
 8001ed8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eda:	e009      	b.n	8001ef0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001edc:	f7ff f858 	bl	8000f90 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eea:	d901      	bls.n	8001ef0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e007      	b.n	8001f00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001efc:	d1ee      	bne.n	8001edc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40007000 	.word	0x40007000

08001f10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e29b      	b.n	800245e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8087 	beq.w	8002042 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f34:	4b96      	ldr	r3, [pc, #600]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d00c      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f40:	4b93      	ldr	r3, [pc, #588]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d112      	bne.n	8001f72 <HAL_RCC_OscConfig+0x62>
 8001f4c:	4b90      	ldr	r3, [pc, #576]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f58:	d10b      	bne.n	8001f72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5a:	4b8d      	ldr	r3, [pc, #564]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d06c      	beq.n	8002040 <HAL_RCC_OscConfig+0x130>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d168      	bne.n	8002040 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e275      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x7a>
 8001f7c:	4b84      	ldr	r3, [pc, #528]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a83      	ldr	r2, [pc, #524]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	e02e      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd8>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0x9c>
 8001f92:	4b7f      	ldr	r3, [pc, #508]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a7e      	ldr	r2, [pc, #504]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b7c      	ldr	r3, [pc, #496]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a7b      	ldr	r2, [pc, #492]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e01d      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xc0>
 8001fb6:	4b76      	ldr	r3, [pc, #472]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a75      	ldr	r2, [pc, #468]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b73      	ldr	r3, [pc, #460]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a72      	ldr	r2, [pc, #456]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd8>
 8001fd0:	4b6f      	ldr	r3, [pc, #444]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a6e      	ldr	r2, [pc, #440]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b6c      	ldr	r3, [pc, #432]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a6b      	ldr	r2, [pc, #428]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8001fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7fe ffce 	bl	8000f90 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7fe ffca 	bl	8000f90 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e229      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b61      	ldr	r3, [pc, #388]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0xe8>
 8002016:	e014      	b.n	8002042 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe ffba 	bl	8000f90 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7fe ffb6 	bl	8000f90 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e215      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	4b57      	ldr	r3, [pc, #348]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x110>
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d069      	beq.n	8002122 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800204e:	4b50      	ldr	r3, [pc, #320]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205a:	4b4d      	ldr	r3, [pc, #308]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b08      	cmp	r3, #8
 8002064:	d11c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x190>
 8002066:	4b4a      	ldr	r3, [pc, #296]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d116      	bne.n	80020a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_RCC_OscConfig+0x17a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e1e9      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208a:	4b41      	ldr	r3, [pc, #260]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	493d      	ldr	r1, [pc, #244]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	e040      	b.n	8002122 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d023      	beq.n	80020f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a8:	4b39      	ldr	r3, [pc, #228]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a38      	ldr	r2, [pc, #224]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7fe ff6c 	bl	8000f90 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020bc:	f7fe ff68 	bl	8000f90 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e1c7      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020da:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4929      	ldr	r1, [pc, #164]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
 80020ee:	e018      	b.n	8002122 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a26      	ldr	r2, [pc, #152]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe ff48 	bl	8000f90 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002104:	f7fe ff44 	bl	8000f90 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e1a3      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d038      	beq.n	80021a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d019      	beq.n	800216a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8002138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213a:	4a15      	ldr	r2, [pc, #84]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7fe ff25 	bl	8000f90 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214a:	f7fe ff21 	bl	8000f90 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e180      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 800215e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x23a>
 8002168:	e01a      	b.n	80021a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 800216c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216e:	4a08      	ldr	r2, [pc, #32]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002176:	f7fe ff0b 	bl	8000f90 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217e:	f7fe ff07 	bl	8000f90 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d903      	bls.n	8002194 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e166      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
 8002190:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002194:	4b92      	ldr	r3, [pc, #584]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ee      	bne.n	800217e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80a4 	beq.w	80022f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ae:	4b8c      	ldr	r3, [pc, #560]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	4b89      	ldr	r3, [pc, #548]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a88      	ldr	r2, [pc, #544]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b86      	ldr	r3, [pc, #536]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d2:	2301      	movs	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d6:	4b83      	ldr	r3, [pc, #524]	; (80023e4 <HAL_RCC_OscConfig+0x4d4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d118      	bne.n	8002214 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021e2:	4b80      	ldr	r3, [pc, #512]	; (80023e4 <HAL_RCC_OscConfig+0x4d4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a7f      	ldr	r2, [pc, #508]	; (80023e4 <HAL_RCC_OscConfig+0x4d4>)
 80021e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ee:	f7fe fecf 	bl	8000f90 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f6:	f7fe fecb 	bl	8000f90 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b64      	cmp	r3, #100	; 0x64
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e12a      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002208:	4b76      	ldr	r3, [pc, #472]	; (80023e4 <HAL_RCC_OscConfig+0x4d4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x31a>
 800221c:	4b70      	ldr	r3, [pc, #448]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	4a6f      	ldr	r2, [pc, #444]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6713      	str	r3, [r2, #112]	; 0x70
 8002228:	e02d      	b.n	8002286 <HAL_RCC_OscConfig+0x376>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x33c>
 8002232:	4b6b      	ldr	r3, [pc, #428]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002236:	4a6a      	ldr	r2, [pc, #424]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6713      	str	r3, [r2, #112]	; 0x70
 800223e:	4b68      	ldr	r3, [pc, #416]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	4a67      	ldr	r2, [pc, #412]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	6713      	str	r3, [r2, #112]	; 0x70
 800224a:	e01c      	b.n	8002286 <HAL_RCC_OscConfig+0x376>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b05      	cmp	r3, #5
 8002252:	d10c      	bne.n	800226e <HAL_RCC_OscConfig+0x35e>
 8002254:	4b62      	ldr	r3, [pc, #392]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002258:	4a61      	ldr	r2, [pc, #388]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6713      	str	r3, [r2, #112]	; 0x70
 8002260:	4b5f      	ldr	r3, [pc, #380]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a5e      	ldr	r2, [pc, #376]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
 800226c:	e00b      	b.n	8002286 <HAL_RCC_OscConfig+0x376>
 800226e:	4b5c      	ldr	r3, [pc, #368]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	4a5b      	ldr	r2, [pc, #364]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6713      	str	r3, [r2, #112]	; 0x70
 800227a:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a58      	ldr	r2, [pc, #352]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002280:	f023 0304 	bic.w	r3, r3, #4
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d015      	beq.n	80022ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228e:	f7fe fe7f 	bl	8000f90 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7fe fe7b 	bl	8000f90 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0d8      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ac:	4b4c      	ldr	r3, [pc, #304]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ee      	beq.n	8002296 <HAL_RCC_OscConfig+0x386>
 80022b8:	e014      	b.n	80022e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ba:	f7fe fe69 	bl	8000f90 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f7fe fe65 	bl	8000f90 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e0c2      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d8:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1ee      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022e4:	7dfb      	ldrb	r3, [r7, #23]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d105      	bne.n	80022f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ea:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a3c      	ldr	r2, [pc, #240]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 80022f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80ae 	beq.w	800245c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002300:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d06d      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d14b      	bne.n	80023ac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b32      	ldr	r3, [pc, #200]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a31      	ldr	r2, [pc, #196]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 800231a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800231e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe fe36 	bl	8000f90 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fe32 	bl	8000f90 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e091      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	019b      	lsls	r3, r3, #6
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	3b01      	subs	r3, #1
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	061b      	lsls	r3, r3, #24
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	071b      	lsls	r3, r3, #28
 8002372:	491b      	ldr	r1, [pc, #108]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 800237e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe fe04 	bl	8000f90 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe fe00 	bl	8000f90 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e05f      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x47c>
 80023aa:	e057      	b.n	800245c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 80023b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe fdea 	bl	8000f90 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe fde6 	bl	8000f90 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e045      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <HAL_RCC_OscConfig+0x4d0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4b0>
 80023de:	e03d      	b.n	800245c <HAL_RCC_OscConfig+0x54c>
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023e8:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <HAL_RCC_OscConfig+0x558>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d030      	beq.n	8002458 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d129      	bne.n	8002458 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d122      	bne.n	8002458 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002418:	4013      	ands	r3, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800241e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002420:	4293      	cmp	r3, r2
 8002422:	d119      	bne.n	8002458 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	085b      	lsrs	r3, r3, #1
 8002430:	3b01      	subs	r3, #1
 8002432:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002434:	429a      	cmp	r2, r3
 8002436:	d10f      	bne.n	8002458 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d107      	bne.n	8002458 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800

0800246c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0d0      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002484:	4b6a      	ldr	r3, [pc, #424]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d910      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b67      	ldr	r3, [pc, #412]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 020f 	bic.w	r2, r3, #15
 800249a:	4965      	ldr	r1, [pc, #404]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b63      	ldr	r3, [pc, #396]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0b8      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d020      	beq.n	8002502 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024cc:	4b59      	ldr	r3, [pc, #356]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4a58      	ldr	r2, [pc, #352]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 80024d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e4:	4b53      	ldr	r3, [pc, #332]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a52      	ldr	r2, [pc, #328]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 80024ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f0:	4b50      	ldr	r3, [pc, #320]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	494d      	ldr	r1, [pc, #308]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d040      	beq.n	8002590 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d115      	bne.n	800254e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e07f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	4b41      	ldr	r3, [pc, #260]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e073      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253e:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e06b      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254e:	4b39      	ldr	r3, [pc, #228]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f023 0203 	bic.w	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	4936      	ldr	r1, [pc, #216]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	4313      	orrs	r3, r2
 800255e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002560:	f7fe fd16 	bl	8000f90 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	e00a      	b.n	800257e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002568:	f7fe fd12 	bl	8000f90 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e053      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 020c 	and.w	r2, r3, #12
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	429a      	cmp	r2, r3
 800258e:	d1eb      	bne.n	8002568 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d210      	bcs.n	80025c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b24      	ldr	r3, [pc, #144]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 020f 	bic.w	r2, r3, #15
 80025a6:	4922      	ldr	r1, [pc, #136]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e032      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4916      	ldr	r1, [pc, #88]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	490e      	ldr	r1, [pc, #56]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fe:	f000 f821 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8002602:	4602      	mov	r2, r0
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	490a      	ldr	r1, [pc, #40]	; (8002638 <HAL_RCC_ClockConfig+0x1cc>)
 8002610:	5ccb      	ldrb	r3, [r1, r3]
 8002612:	fa22 f303 	lsr.w	r3, r2, r3
 8002616:	4a09      	ldr	r2, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1d0>)
 8002618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_ClockConfig+0x1d4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fbc0 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023c00 	.word	0x40023c00
 8002634:	40023800 	.word	0x40023800
 8002638:	08007d14 	.word	0x08007d14
 800263c:	20000000 	.word	0x20000000
 8002640:	20000004 	.word	0x20000004

08002644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002648:	b094      	sub	sp, #80	; 0x50
 800264a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	647b      	str	r3, [r7, #68]	; 0x44
 8002650:	2300      	movs	r3, #0
 8002652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002654:	2300      	movs	r3, #0
 8002656:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800265c:	4b79      	ldr	r3, [pc, #484]	; (8002844 <HAL_RCC_GetSysClockFreq+0x200>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b08      	cmp	r3, #8
 8002666:	d00d      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x40>
 8002668:	2b08      	cmp	r3, #8
 800266a:	f200 80e1 	bhi.w	8002830 <HAL_RCC_GetSysClockFreq+0x1ec>
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x34>
 8002672:	2b04      	cmp	r3, #4
 8002674:	d003      	beq.n	800267e <HAL_RCC_GetSysClockFreq+0x3a>
 8002676:	e0db      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b73      	ldr	r3, [pc, #460]	; (8002848 <HAL_RCC_GetSysClockFreq+0x204>)
 800267a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800267c:	e0db      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800267e:	4b73      	ldr	r3, [pc, #460]	; (800284c <HAL_RCC_GetSysClockFreq+0x208>)
 8002680:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002682:	e0d8      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002684:	4b6f      	ldr	r3, [pc, #444]	; (8002844 <HAL_RCC_GetSysClockFreq+0x200>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800268c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800268e:	4b6d      	ldr	r3, [pc, #436]	; (8002844 <HAL_RCC_GetSysClockFreq+0x200>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d063      	beq.n	8002762 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269a:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCC_GetSysClockFreq+0x200>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	2200      	movs	r2, #0
 80026a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80026a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
 80026ae:	2300      	movs	r3, #0
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
 80026b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026b6:	4622      	mov	r2, r4
 80026b8:	462b      	mov	r3, r5
 80026ba:	f04f 0000 	mov.w	r0, #0
 80026be:	f04f 0100 	mov.w	r1, #0
 80026c2:	0159      	lsls	r1, r3, #5
 80026c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c8:	0150      	lsls	r0, r2, #5
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4621      	mov	r1, r4
 80026d0:	1a51      	subs	r1, r2, r1
 80026d2:	6139      	str	r1, [r7, #16]
 80026d4:	4629      	mov	r1, r5
 80026d6:	eb63 0301 	sbc.w	r3, r3, r1
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026e8:	4659      	mov	r1, fp
 80026ea:	018b      	lsls	r3, r1, #6
 80026ec:	4651      	mov	r1, sl
 80026ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026f2:	4651      	mov	r1, sl
 80026f4:	018a      	lsls	r2, r1, #6
 80026f6:	4651      	mov	r1, sl
 80026f8:	ebb2 0801 	subs.w	r8, r2, r1
 80026fc:	4659      	mov	r1, fp
 80026fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800270e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002716:	4690      	mov	r8, r2
 8002718:	4699      	mov	r9, r3
 800271a:	4623      	mov	r3, r4
 800271c:	eb18 0303 	adds.w	r3, r8, r3
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	462b      	mov	r3, r5
 8002724:	eb49 0303 	adc.w	r3, r9, r3
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002736:	4629      	mov	r1, r5
 8002738:	024b      	lsls	r3, r1, #9
 800273a:	4621      	mov	r1, r4
 800273c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002740:	4621      	mov	r1, r4
 8002742:	024a      	lsls	r2, r1, #9
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800274a:	2200      	movs	r2, #0
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
 800274e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002750:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002754:	f7fd fd74 	bl	8000240 <__aeabi_uldivmod>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4613      	mov	r3, r2
 800275e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002760:	e058      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_RCC_GetSysClockFreq+0x200>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	099b      	lsrs	r3, r3, #6
 8002768:	2200      	movs	r2, #0
 800276a:	4618      	mov	r0, r3
 800276c:	4611      	mov	r1, r2
 800276e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002772:	623b      	str	r3, [r7, #32]
 8002774:	2300      	movs	r3, #0
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
 8002778:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800277c:	4642      	mov	r2, r8
 800277e:	464b      	mov	r3, r9
 8002780:	f04f 0000 	mov.w	r0, #0
 8002784:	f04f 0100 	mov.w	r1, #0
 8002788:	0159      	lsls	r1, r3, #5
 800278a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800278e:	0150      	lsls	r0, r2, #5
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4641      	mov	r1, r8
 8002796:	ebb2 0a01 	subs.w	sl, r2, r1
 800279a:	4649      	mov	r1, r9
 800279c:	eb63 0b01 	sbc.w	fp, r3, r1
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027b4:	ebb2 040a 	subs.w	r4, r2, sl
 80027b8:	eb63 050b 	sbc.w	r5, r3, fp
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	00eb      	lsls	r3, r5, #3
 80027c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ca:	00e2      	lsls	r2, r4, #3
 80027cc:	4614      	mov	r4, r2
 80027ce:	461d      	mov	r5, r3
 80027d0:	4643      	mov	r3, r8
 80027d2:	18e3      	adds	r3, r4, r3
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	464b      	mov	r3, r9
 80027d8:	eb45 0303 	adc.w	r3, r5, r3
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ea:	4629      	mov	r1, r5
 80027ec:	028b      	lsls	r3, r1, #10
 80027ee:	4621      	mov	r1, r4
 80027f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027f4:	4621      	mov	r1, r4
 80027f6:	028a      	lsls	r2, r1, #10
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027fe:	2200      	movs	r2, #0
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	61fa      	str	r2, [r7, #28]
 8002804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002808:	f7fd fd1a 	bl	8000240 <__aeabi_uldivmod>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4613      	mov	r3, r2
 8002812:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCC_GetSysClockFreq+0x200>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	0c1b      	lsrs	r3, r3, #16
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	3301      	adds	r3, #1
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002824:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800282e:	e002      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCC_GetSysClockFreq+0x204>)
 8002832:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002838:	4618      	mov	r0, r3
 800283a:	3750      	adds	r7, #80	; 0x50
 800283c:	46bd      	mov	sp, r7
 800283e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	00f42400 	.word	0x00f42400
 800284c:	007a1200 	.word	0x007a1200

08002850 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_RCC_GetHCLKFreq+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000000 	.word	0x20000000

08002868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800286c:	f7ff fff0 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	0a9b      	lsrs	r3, r3, #10
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4903      	ldr	r1, [pc, #12]	; (800288c <HAL_RCC_GetPCLK1Freq+0x24>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	08007d24 	.word	0x08007d24

08002890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002894:	f7ff ffdc 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	0b5b      	lsrs	r3, r3, #13
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4903      	ldr	r1, [pc, #12]	; (80028b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40023800 	.word	0x40023800
 80028b4:	08007d24 	.word	0x08007d24

080028b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	220f      	movs	r2, #15
 80028c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_RCC_GetClockConfig+0x5c>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0203 	and.w	r2, r3, #3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_RCC_GetClockConfig+0x5c>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <HAL_RCC_GetClockConfig+0x5c>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCC_GetClockConfig+0x5c>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	08db      	lsrs	r3, r3, #3
 80028f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028fa:	4b07      	ldr	r3, [pc, #28]	; (8002918 <HAL_RCC_GetClockConfig+0x60>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 020f 	and.w	r2, r3, #15
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	601a      	str	r2, [r3, #0]
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800
 8002918:	40023c00 	.word	0x40023c00

0800291c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d012      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002944:	4b69      	ldr	r3, [pc, #420]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a68      	ldr	r2, [pc, #416]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800294e:	6093      	str	r3, [r2, #8]
 8002950:	4b66      	ldr	r3, [pc, #408]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002958:	4964      	ldr	r1, [pc, #400]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d017      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002976:	4b5d      	ldr	r3, [pc, #372]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800297c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	4959      	ldr	r1, [pc, #356]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002994:	d101      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002996:	2301      	movs	r3, #1
 8002998:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d017      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029b2:	4b4e      	ldr	r3, [pc, #312]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	494a      	ldr	r1, [pc, #296]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d0:	d101      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029d2:	2301      	movs	r3, #1
 80029d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80029de:	2301      	movs	r3, #1
 80029e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029ee:	2301      	movs	r3, #1
 80029f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 808b 	beq.w	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a00:	4b3a      	ldr	r3, [pc, #232]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	4a39      	ldr	r2, [pc, #228]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0c:	4b37      	ldr	r3, [pc, #220]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a18:	4b35      	ldr	r3, [pc, #212]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a34      	ldr	r2, [pc, #208]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a24:	f7fe fab4 	bl	8000f90 <HAL_GetTick>
 8002a28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2c:	f7fe fab0 	bl	8000f90 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e38f      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a3e:	4b2c      	ldr	r3, [pc, #176]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a4a:	4b28      	ldr	r3, [pc, #160]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d035      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d02e      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a72:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a90:	4b16      	ldr	r3, [pc, #88]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d114      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fa78 	bl	8000f90 <HAL_GetTick>
 8002aa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fa74 	bl	8000f90 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e351      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0ee      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ad2:	d111      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ae0:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ae2:	400b      	ands	r3, r1
 8002ae4:	4901      	ldr	r1, [pc, #4]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
 8002aea:	e00b      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40007000 	.word	0x40007000
 8002af4:	0ffffcff 	.word	0x0ffffcff
 8002af8:	4bac      	ldr	r3, [pc, #688]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4aab      	ldr	r2, [pc, #684]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b02:	6093      	str	r3, [r2, #8]
 8002b04:	4ba9      	ldr	r3, [pc, #676]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b10:	49a6      	ldr	r1, [pc, #664]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d010      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b22:	4ba2      	ldr	r3, [pc, #648]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b28:	4aa0      	ldr	r2, [pc, #640]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b32:	4b9e      	ldr	r3, [pc, #632]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	499b      	ldr	r1, [pc, #620]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b50:	4b96      	ldr	r3, [pc, #600]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b5e:	4993      	ldr	r1, [pc, #588]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b72:	4b8e      	ldr	r3, [pc, #568]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b80:	498a      	ldr	r1, [pc, #552]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b94:	4b85      	ldr	r3, [pc, #532]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba2:	4982      	ldr	r1, [pc, #520]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bb6:	4b7d      	ldr	r3, [pc, #500]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	4979      	ldr	r1, [pc, #484]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bd8:	4b74      	ldr	r3, [pc, #464]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bde:	f023 0203 	bic.w	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	4971      	ldr	r1, [pc, #452]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bfa:	4b6c      	ldr	r3, [pc, #432]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	f023 020c 	bic.w	r2, r3, #12
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c08:	4968      	ldr	r1, [pc, #416]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c1c:	4b63      	ldr	r3, [pc, #396]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	4960      	ldr	r1, [pc, #384]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c3e:	4b5b      	ldr	r3, [pc, #364]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4c:	4957      	ldr	r1, [pc, #348]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c60:	4b52      	ldr	r3, [pc, #328]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6e:	494f      	ldr	r1, [pc, #316]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c82:	4b4a      	ldr	r3, [pc, #296]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c90:	4946      	ldr	r1, [pc, #280]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ca4:	4b41      	ldr	r3, [pc, #260]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb2:	493e      	ldr	r1, [pc, #248]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002cc6:	4b39      	ldr	r3, [pc, #228]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd4:	4935      	ldr	r1, [pc, #212]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ce8:	4b30      	ldr	r3, [pc, #192]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cf6:	492d      	ldr	r1, [pc, #180]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d011      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d0a:	4b28      	ldr	r3, [pc, #160]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d18:	4924      	ldr	r1, [pc, #144]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d28:	d101      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d4a:	4b18      	ldr	r3, [pc, #96]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d58:	4914      	ldr	r1, [pc, #80]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00b      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d7c:	490b      	ldr	r1, [pc, #44]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00f      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da0:	4902      	ldr	r1, [pc, #8]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002da8:	e002      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00b      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dbc:	4b8a      	ldr	r3, [pc, #552]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dcc:	4986      	ldr	r1, [pc, #536]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00b      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002de0:	4b81      	ldr	r3, [pc, #516]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df0:	497d      	ldr	r1, [pc, #500]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d006      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80d6 	beq.w	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e0c:	4b76      	ldr	r3, [pc, #472]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a75      	ldr	r2, [pc, #468]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e18:	f7fe f8ba 	bl	8000f90 <HAL_GetTick>
 8002e1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e20:	f7fe f8b6 	bl	8000f90 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	; 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e195      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e32:	4b6d      	ldr	r3, [pc, #436]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d021      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d11d      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e58:	0c1b      	lsrs	r3, r3, #16
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e60:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e66:	0e1b      	lsrs	r3, r3, #24
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	019a      	lsls	r2, r3, #6
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	041b      	lsls	r3, r3, #16
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	061b      	lsls	r3, r3, #24
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	071b      	lsls	r3, r3, #28
 8002e86:	4958      	ldr	r1, [pc, #352]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d004      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d02e      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb8:	d129      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002eba:	4b4b      	ldr	r3, [pc, #300]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ec8:	4b47      	ldr	r3, [pc, #284]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ece:	0f1b      	lsrs	r3, r3, #28
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	019a      	lsls	r2, r3, #6
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	041b      	lsls	r3, r3, #16
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	061b      	lsls	r3, r3, #24
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	071b      	lsls	r3, r3, #28
 8002eee:	493e      	ldr	r1, [pc, #248]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ef6:	4b3c      	ldr	r3, [pc, #240]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002efc:	f023 021f 	bic.w	r2, r3, #31
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	3b01      	subs	r3, #1
 8002f06:	4938      	ldr	r1, [pc, #224]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01d      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f1a:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f20:	0e1b      	lsrs	r3, r3, #24
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f28:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2e:	0f1b      	lsrs	r3, r3, #28
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	019a      	lsls	r2, r3, #6
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	431a      	orrs	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	061b      	lsls	r3, r3, #24
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	071b      	lsls	r3, r3, #28
 8002f4e:	4926      	ldr	r1, [pc, #152]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d011      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	019a      	lsls	r2, r3, #6
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	071b      	lsls	r3, r3, #28
 8002f7e:	491a      	ldr	r1, [pc, #104]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f86:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f92:	f7fd fffd 	bl	8000f90 <HAL_GetTick>
 8002f96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f9a:	f7fd fff9 	bl	8000f90 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b64      	cmp	r3, #100	; 0x64
 8002fa6:	d901      	bls.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0d8      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	f040 80ce 	bne.w	800315c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fcc:	f7fd ffe0 	bl	8000f90 <HAL_GetTick>
 8002fd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fd2:	e00b      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fd4:	f7fd ffdc 	bl	8000f90 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d904      	bls.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0bb      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fec:	4b5e      	ldr	r3, [pc, #376]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff8:	d0ec      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003016:	2b00      	cmp	r3, #0
 8003018:	d02e      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d12a      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003022:	4b51      	ldr	r3, [pc, #324]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003028:	0c1b      	lsrs	r3, r3, #16
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003030:	4b4d      	ldr	r3, [pc, #308]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	0f1b      	lsrs	r3, r3, #28
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	019a      	lsls	r2, r3, #6
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	041b      	lsls	r3, r3, #16
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	061b      	lsls	r3, r3, #24
 8003050:	431a      	orrs	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	071b      	lsls	r3, r3, #28
 8003056:	4944      	ldr	r1, [pc, #272]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800305e:	4b42      	ldr	r3, [pc, #264]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003064:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	021b      	lsls	r3, r3, #8
 8003070:	493d      	ldr	r1, [pc, #244]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d022      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800308c:	d11d      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800308e:	4b36      	ldr	r3, [pc, #216]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	0e1b      	lsrs	r3, r3, #24
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800309c:	4b32      	ldr	r3, [pc, #200]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	0f1b      	lsrs	r3, r3, #28
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	019a      	lsls	r2, r3, #6
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	061b      	lsls	r3, r3, #24
 80030bc:	431a      	orrs	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	071b      	lsls	r3, r3, #28
 80030c2:	4929      	ldr	r1, [pc, #164]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d028      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030dc:	0e1b      	lsrs	r3, r3, #24
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030e4:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	0c1b      	lsrs	r3, r3, #16
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	019a      	lsls	r2, r3, #6
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	041b      	lsls	r3, r3, #16
 80030fc:	431a      	orrs	r2, r3
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	061b      	lsls	r3, r3, #24
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	071b      	lsls	r3, r3, #28
 800310a:	4917      	ldr	r1, [pc, #92]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	4911      	ldr	r1, [pc, #68]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800312e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003134:	f7fd ff2c 	bl	8000f90 <HAL_GetTick>
 8003138:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800313c:	f7fd ff28 	bl	8000f90 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	; 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e007      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800315a:	d1ef      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800

0800316c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e049      	b.n	8003212 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f841 	bl	800321a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3304      	adds	r3, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f000 fa00 	bl	80035b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d001      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e054      	b.n	80032f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a26      	ldr	r2, [pc, #152]	; (8003300 <HAL_TIM_Base_Start_IT+0xd0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d022      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x80>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003272:	d01d      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x80>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a22      	ldr	r2, [pc, #136]	; (8003304 <HAL_TIM_Base_Start_IT+0xd4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d018      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x80>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a21      	ldr	r2, [pc, #132]	; (8003308 <HAL_TIM_Base_Start_IT+0xd8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d013      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x80>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1f      	ldr	r2, [pc, #124]	; (800330c <HAL_TIM_Base_Start_IT+0xdc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00e      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x80>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1e      	ldr	r2, [pc, #120]	; (8003310 <HAL_TIM_Base_Start_IT+0xe0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d009      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x80>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <HAL_TIM_Base_Start_IT+0xe4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d004      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x80>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <HAL_TIM_Base_Start_IT+0xe8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d115      	bne.n	80032dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_TIM_Base_Start_IT+0xec>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d015      	beq.n	80032ee <HAL_TIM_Base_Start_IT+0xbe>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d011      	beq.n	80032ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032da:	e008      	b.n	80032ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e000      	b.n	80032f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40010000 	.word	0x40010000
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40010400 	.word	0x40010400
 8003314:	40014000 	.word	0x40014000
 8003318:	40001800 	.word	0x40001800
 800331c:	00010007 	.word	0x00010007

08003320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b02      	cmp	r3, #2
 8003334:	d122      	bne.n	800337c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b02      	cmp	r3, #2
 8003342:	d11b      	bne.n	800337c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0202 	mvn.w	r2, #2
 800334c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f905 	bl	8003572 <HAL_TIM_IC_CaptureCallback>
 8003368:	e005      	b.n	8003376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8f7 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f908 	bl	8003586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b04      	cmp	r3, #4
 8003388:	d122      	bne.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b04      	cmp	r3, #4
 8003396:	d11b      	bne.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0204 	mvn.w	r2, #4
 80033a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f8db 	bl	8003572 <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8cd 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f8de 	bl	8003586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d122      	bne.n	8003424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d11b      	bne.n	8003424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0208 	mvn.w	r2, #8
 80033f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8b1 	bl	8003572 <HAL_TIM_IC_CaptureCallback>
 8003410:	e005      	b.n	800341e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f8a3 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f8b4 	bl	8003586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b10      	cmp	r3, #16
 8003430:	d122      	bne.n	8003478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b10      	cmp	r3, #16
 800343e:	d11b      	bne.n	8003478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0210 	mvn.w	r2, #16
 8003448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2208      	movs	r2, #8
 800344e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f887 	bl	8003572 <HAL_TIM_IC_CaptureCallback>
 8003464:	e005      	b.n	8003472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f879 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f88a 	bl	8003586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d10e      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0201 	mvn.w	r2, #1
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd faae 	bl	8000a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ae:	2b80      	cmp	r3, #128	; 0x80
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b80      	cmp	r3, #128	; 0x80
 80034be:	d107      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f91a 	bl	8003704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034de:	d10e      	bne.n	80034fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b80      	cmp	r3, #128	; 0x80
 80034ec:	d107      	bne.n	80034fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f90d 	bl	8003718 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d10e      	bne.n	800352a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d107      	bne.n	800352a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f838 	bl	800359a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b20      	cmp	r3, #32
 8003536:	d10e      	bne.n	8003556 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b20      	cmp	r3, #32
 8003544:	d107      	bne.n	8003556 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f06f 0220 	mvn.w	r2, #32
 800354e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f8cd 	bl	80036f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a40      	ldr	r2, [pc, #256]	; (80036c4 <TIM_Base_SetConfig+0x114>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ce:	d00f      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a3d      	ldr	r2, [pc, #244]	; (80036c8 <TIM_Base_SetConfig+0x118>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00b      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a3c      	ldr	r2, [pc, #240]	; (80036cc <TIM_Base_SetConfig+0x11c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d007      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a3b      	ldr	r2, [pc, #236]	; (80036d0 <TIM_Base_SetConfig+0x120>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a3a      	ldr	r2, [pc, #232]	; (80036d4 <TIM_Base_SetConfig+0x124>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d108      	bne.n	8003602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2f      	ldr	r2, [pc, #188]	; (80036c4 <TIM_Base_SetConfig+0x114>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d02b      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003610:	d027      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2c      	ldr	r2, [pc, #176]	; (80036c8 <TIM_Base_SetConfig+0x118>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d023      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2b      	ldr	r2, [pc, #172]	; (80036cc <TIM_Base_SetConfig+0x11c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01f      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2a      	ldr	r2, [pc, #168]	; (80036d0 <TIM_Base_SetConfig+0x120>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d01b      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a29      	ldr	r2, [pc, #164]	; (80036d4 <TIM_Base_SetConfig+0x124>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d017      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a28      	ldr	r2, [pc, #160]	; (80036d8 <TIM_Base_SetConfig+0x128>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d013      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a27      	ldr	r2, [pc, #156]	; (80036dc <TIM_Base_SetConfig+0x12c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00f      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a26      	ldr	r2, [pc, #152]	; (80036e0 <TIM_Base_SetConfig+0x130>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00b      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <TIM_Base_SetConfig+0x134>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a24      	ldr	r2, [pc, #144]	; (80036e8 <TIM_Base_SetConfig+0x138>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a23      	ldr	r2, [pc, #140]	; (80036ec <TIM_Base_SetConfig+0x13c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d108      	bne.n	8003674 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <TIM_Base_SetConfig+0x114>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_Base_SetConfig+0xf8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a0c      	ldr	r2, [pc, #48]	; (80036d4 <TIM_Base_SetConfig+0x124>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d103      	bne.n	80036b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	615a      	str	r2, [r3, #20]
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40000800 	.word	0x40000800
 80036d0:	40000c00 	.word	0x40000c00
 80036d4:	40010400 	.word	0x40010400
 80036d8:	40014000 	.word	0x40014000
 80036dc:	40014400 	.word	0x40014400
 80036e0:	40014800 	.word	0x40014800
 80036e4:	40001800 	.word	0x40001800
 80036e8:	40001c00 	.word	0x40001c00
 80036ec:	40002000 	.word	0x40002000

080036f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e040      	b.n	80037c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd fa4e 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2224      	movs	r2, #36	; 0x24
 8003758:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0201 	bic.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f82c 	bl	80037c8 <UART_SetConfig>
 8003770:	4603      	mov	r3, r0
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e022      	b.n	80037c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fa84 	bl	8003c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fb0b 	bl	8003dd4 <UART_CheckIdleState>
 80037be:	4603      	mov	r3, r0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4ba6      	ldr	r3, [pc, #664]	; (8003a8c <UART_SetConfig+0x2c4>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	6979      	ldr	r1, [r7, #20]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a94      	ldr	r2, [pc, #592]	; (8003a90 <UART_SetConfig+0x2c8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d120      	bne.n	8003886 <UART_SetConfig+0xbe>
 8003844:	4b93      	ldr	r3, [pc, #588]	; (8003a94 <UART_SetConfig+0x2cc>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b03      	cmp	r3, #3
 8003850:	d816      	bhi.n	8003880 <UART_SetConfig+0xb8>
 8003852:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <UART_SetConfig+0x90>)
 8003854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003858:	08003869 	.word	0x08003869
 800385c:	08003875 	.word	0x08003875
 8003860:	0800386f 	.word	0x0800386f
 8003864:	0800387b 	.word	0x0800387b
 8003868:	2301      	movs	r3, #1
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e150      	b.n	8003b10 <UART_SetConfig+0x348>
 800386e:	2302      	movs	r3, #2
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e14d      	b.n	8003b10 <UART_SetConfig+0x348>
 8003874:	2304      	movs	r3, #4
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e14a      	b.n	8003b10 <UART_SetConfig+0x348>
 800387a:	2308      	movs	r3, #8
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e147      	b.n	8003b10 <UART_SetConfig+0x348>
 8003880:	2310      	movs	r3, #16
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e144      	b.n	8003b10 <UART_SetConfig+0x348>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a83      	ldr	r2, [pc, #524]	; (8003a98 <UART_SetConfig+0x2d0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d132      	bne.n	80038f6 <UART_SetConfig+0x12e>
 8003890:	4b80      	ldr	r3, [pc, #512]	; (8003a94 <UART_SetConfig+0x2cc>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d828      	bhi.n	80038f0 <UART_SetConfig+0x128>
 800389e:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <UART_SetConfig+0xdc>)
 80038a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a4:	080038d9 	.word	0x080038d9
 80038a8:	080038f1 	.word	0x080038f1
 80038ac:	080038f1 	.word	0x080038f1
 80038b0:	080038f1 	.word	0x080038f1
 80038b4:	080038e5 	.word	0x080038e5
 80038b8:	080038f1 	.word	0x080038f1
 80038bc:	080038f1 	.word	0x080038f1
 80038c0:	080038f1 	.word	0x080038f1
 80038c4:	080038df 	.word	0x080038df
 80038c8:	080038f1 	.word	0x080038f1
 80038cc:	080038f1 	.word	0x080038f1
 80038d0:	080038f1 	.word	0x080038f1
 80038d4:	080038eb 	.word	0x080038eb
 80038d8:	2300      	movs	r3, #0
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e118      	b.n	8003b10 <UART_SetConfig+0x348>
 80038de:	2302      	movs	r3, #2
 80038e0:	77fb      	strb	r3, [r7, #31]
 80038e2:	e115      	b.n	8003b10 <UART_SetConfig+0x348>
 80038e4:	2304      	movs	r3, #4
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e112      	b.n	8003b10 <UART_SetConfig+0x348>
 80038ea:	2308      	movs	r3, #8
 80038ec:	77fb      	strb	r3, [r7, #31]
 80038ee:	e10f      	b.n	8003b10 <UART_SetConfig+0x348>
 80038f0:	2310      	movs	r3, #16
 80038f2:	77fb      	strb	r3, [r7, #31]
 80038f4:	e10c      	b.n	8003b10 <UART_SetConfig+0x348>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a68      	ldr	r2, [pc, #416]	; (8003a9c <UART_SetConfig+0x2d4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d120      	bne.n	8003942 <UART_SetConfig+0x17a>
 8003900:	4b64      	ldr	r3, [pc, #400]	; (8003a94 <UART_SetConfig+0x2cc>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800390a:	2b30      	cmp	r3, #48	; 0x30
 800390c:	d013      	beq.n	8003936 <UART_SetConfig+0x16e>
 800390e:	2b30      	cmp	r3, #48	; 0x30
 8003910:	d814      	bhi.n	800393c <UART_SetConfig+0x174>
 8003912:	2b20      	cmp	r3, #32
 8003914:	d009      	beq.n	800392a <UART_SetConfig+0x162>
 8003916:	2b20      	cmp	r3, #32
 8003918:	d810      	bhi.n	800393c <UART_SetConfig+0x174>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <UART_SetConfig+0x15c>
 800391e:	2b10      	cmp	r3, #16
 8003920:	d006      	beq.n	8003930 <UART_SetConfig+0x168>
 8003922:	e00b      	b.n	800393c <UART_SetConfig+0x174>
 8003924:	2300      	movs	r3, #0
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e0f2      	b.n	8003b10 <UART_SetConfig+0x348>
 800392a:	2302      	movs	r3, #2
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e0ef      	b.n	8003b10 <UART_SetConfig+0x348>
 8003930:	2304      	movs	r3, #4
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e0ec      	b.n	8003b10 <UART_SetConfig+0x348>
 8003936:	2308      	movs	r3, #8
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e0e9      	b.n	8003b10 <UART_SetConfig+0x348>
 800393c:	2310      	movs	r3, #16
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e0e6      	b.n	8003b10 <UART_SetConfig+0x348>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a56      	ldr	r2, [pc, #344]	; (8003aa0 <UART_SetConfig+0x2d8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d120      	bne.n	800398e <UART_SetConfig+0x1c6>
 800394c:	4b51      	ldr	r3, [pc, #324]	; (8003a94 <UART_SetConfig+0x2cc>)
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003952:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003956:	2bc0      	cmp	r3, #192	; 0xc0
 8003958:	d013      	beq.n	8003982 <UART_SetConfig+0x1ba>
 800395a:	2bc0      	cmp	r3, #192	; 0xc0
 800395c:	d814      	bhi.n	8003988 <UART_SetConfig+0x1c0>
 800395e:	2b80      	cmp	r3, #128	; 0x80
 8003960:	d009      	beq.n	8003976 <UART_SetConfig+0x1ae>
 8003962:	2b80      	cmp	r3, #128	; 0x80
 8003964:	d810      	bhi.n	8003988 <UART_SetConfig+0x1c0>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <UART_SetConfig+0x1a8>
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d006      	beq.n	800397c <UART_SetConfig+0x1b4>
 800396e:	e00b      	b.n	8003988 <UART_SetConfig+0x1c0>
 8003970:	2300      	movs	r3, #0
 8003972:	77fb      	strb	r3, [r7, #31]
 8003974:	e0cc      	b.n	8003b10 <UART_SetConfig+0x348>
 8003976:	2302      	movs	r3, #2
 8003978:	77fb      	strb	r3, [r7, #31]
 800397a:	e0c9      	b.n	8003b10 <UART_SetConfig+0x348>
 800397c:	2304      	movs	r3, #4
 800397e:	77fb      	strb	r3, [r7, #31]
 8003980:	e0c6      	b.n	8003b10 <UART_SetConfig+0x348>
 8003982:	2308      	movs	r3, #8
 8003984:	77fb      	strb	r3, [r7, #31]
 8003986:	e0c3      	b.n	8003b10 <UART_SetConfig+0x348>
 8003988:	2310      	movs	r3, #16
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e0c0      	b.n	8003b10 <UART_SetConfig+0x348>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a44      	ldr	r2, [pc, #272]	; (8003aa4 <UART_SetConfig+0x2dc>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d125      	bne.n	80039e4 <UART_SetConfig+0x21c>
 8003998:	4b3e      	ldr	r3, [pc, #248]	; (8003a94 <UART_SetConfig+0x2cc>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a6:	d017      	beq.n	80039d8 <UART_SetConfig+0x210>
 80039a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ac:	d817      	bhi.n	80039de <UART_SetConfig+0x216>
 80039ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b2:	d00b      	beq.n	80039cc <UART_SetConfig+0x204>
 80039b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b8:	d811      	bhi.n	80039de <UART_SetConfig+0x216>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <UART_SetConfig+0x1fe>
 80039be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c2:	d006      	beq.n	80039d2 <UART_SetConfig+0x20a>
 80039c4:	e00b      	b.n	80039de <UART_SetConfig+0x216>
 80039c6:	2300      	movs	r3, #0
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e0a1      	b.n	8003b10 <UART_SetConfig+0x348>
 80039cc:	2302      	movs	r3, #2
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e09e      	b.n	8003b10 <UART_SetConfig+0x348>
 80039d2:	2304      	movs	r3, #4
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e09b      	b.n	8003b10 <UART_SetConfig+0x348>
 80039d8:	2308      	movs	r3, #8
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e098      	b.n	8003b10 <UART_SetConfig+0x348>
 80039de:	2310      	movs	r3, #16
 80039e0:	77fb      	strb	r3, [r7, #31]
 80039e2:	e095      	b.n	8003b10 <UART_SetConfig+0x348>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2f      	ldr	r2, [pc, #188]	; (8003aa8 <UART_SetConfig+0x2e0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d125      	bne.n	8003a3a <UART_SetConfig+0x272>
 80039ee:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <UART_SetConfig+0x2cc>)
 80039f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039fc:	d017      	beq.n	8003a2e <UART_SetConfig+0x266>
 80039fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a02:	d817      	bhi.n	8003a34 <UART_SetConfig+0x26c>
 8003a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a08:	d00b      	beq.n	8003a22 <UART_SetConfig+0x25a>
 8003a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a0e:	d811      	bhi.n	8003a34 <UART_SetConfig+0x26c>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <UART_SetConfig+0x254>
 8003a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a18:	d006      	beq.n	8003a28 <UART_SetConfig+0x260>
 8003a1a:	e00b      	b.n	8003a34 <UART_SetConfig+0x26c>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	77fb      	strb	r3, [r7, #31]
 8003a20:	e076      	b.n	8003b10 <UART_SetConfig+0x348>
 8003a22:	2302      	movs	r3, #2
 8003a24:	77fb      	strb	r3, [r7, #31]
 8003a26:	e073      	b.n	8003b10 <UART_SetConfig+0x348>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e070      	b.n	8003b10 <UART_SetConfig+0x348>
 8003a2e:	2308      	movs	r3, #8
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	e06d      	b.n	8003b10 <UART_SetConfig+0x348>
 8003a34:	2310      	movs	r3, #16
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e06a      	b.n	8003b10 <UART_SetConfig+0x348>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <UART_SetConfig+0x2e4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d138      	bne.n	8003ab6 <UART_SetConfig+0x2ee>
 8003a44:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <UART_SetConfig+0x2cc>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a52:	d017      	beq.n	8003a84 <UART_SetConfig+0x2bc>
 8003a54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a58:	d82a      	bhi.n	8003ab0 <UART_SetConfig+0x2e8>
 8003a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5e:	d00b      	beq.n	8003a78 <UART_SetConfig+0x2b0>
 8003a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a64:	d824      	bhi.n	8003ab0 <UART_SetConfig+0x2e8>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <UART_SetConfig+0x2aa>
 8003a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6e:	d006      	beq.n	8003a7e <UART_SetConfig+0x2b6>
 8003a70:	e01e      	b.n	8003ab0 <UART_SetConfig+0x2e8>
 8003a72:	2300      	movs	r3, #0
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e04b      	b.n	8003b10 <UART_SetConfig+0x348>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e048      	b.n	8003b10 <UART_SetConfig+0x348>
 8003a7e:	2304      	movs	r3, #4
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e045      	b.n	8003b10 <UART_SetConfig+0x348>
 8003a84:	2308      	movs	r3, #8
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e042      	b.n	8003b10 <UART_SetConfig+0x348>
 8003a8a:	bf00      	nop
 8003a8c:	efff69f3 	.word	0xefff69f3
 8003a90:	40011000 	.word	0x40011000
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40004400 	.word	0x40004400
 8003a9c:	40004800 	.word	0x40004800
 8003aa0:	40004c00 	.word	0x40004c00
 8003aa4:	40005000 	.word	0x40005000
 8003aa8:	40011400 	.word	0x40011400
 8003aac:	40007800 	.word	0x40007800
 8003ab0:	2310      	movs	r3, #16
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e02c      	b.n	8003b10 <UART_SetConfig+0x348>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a72      	ldr	r2, [pc, #456]	; (8003c84 <UART_SetConfig+0x4bc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d125      	bne.n	8003b0c <UART_SetConfig+0x344>
 8003ac0:	4b71      	ldr	r3, [pc, #452]	; (8003c88 <UART_SetConfig+0x4c0>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003aca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ace:	d017      	beq.n	8003b00 <UART_SetConfig+0x338>
 8003ad0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ad4:	d817      	bhi.n	8003b06 <UART_SetConfig+0x33e>
 8003ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ada:	d00b      	beq.n	8003af4 <UART_SetConfig+0x32c>
 8003adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae0:	d811      	bhi.n	8003b06 <UART_SetConfig+0x33e>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <UART_SetConfig+0x326>
 8003ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aea:	d006      	beq.n	8003afa <UART_SetConfig+0x332>
 8003aec:	e00b      	b.n	8003b06 <UART_SetConfig+0x33e>
 8003aee:	2300      	movs	r3, #0
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e00d      	b.n	8003b10 <UART_SetConfig+0x348>
 8003af4:	2302      	movs	r3, #2
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e00a      	b.n	8003b10 <UART_SetConfig+0x348>
 8003afa:	2304      	movs	r3, #4
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e007      	b.n	8003b10 <UART_SetConfig+0x348>
 8003b00:	2308      	movs	r3, #8
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e004      	b.n	8003b10 <UART_SetConfig+0x348>
 8003b06:	2310      	movs	r3, #16
 8003b08:	77fb      	strb	r3, [r7, #31]
 8003b0a:	e001      	b.n	8003b10 <UART_SetConfig+0x348>
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b18:	d15b      	bne.n	8003bd2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b1a:	7ffb      	ldrb	r3, [r7, #31]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d828      	bhi.n	8003b72 <UART_SetConfig+0x3aa>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <UART_SetConfig+0x360>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b4d 	.word	0x08003b4d
 8003b2c:	08003b55 	.word	0x08003b55
 8003b30:	08003b5d 	.word	0x08003b5d
 8003b34:	08003b73 	.word	0x08003b73
 8003b38:	08003b63 	.word	0x08003b63
 8003b3c:	08003b73 	.word	0x08003b73
 8003b40:	08003b73 	.word	0x08003b73
 8003b44:	08003b73 	.word	0x08003b73
 8003b48:	08003b6b 	.word	0x08003b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b4c:	f7fe fe8c 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8003b50:	61b8      	str	r0, [r7, #24]
        break;
 8003b52:	e013      	b.n	8003b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b54:	f7fe fe9c 	bl	8002890 <HAL_RCC_GetPCLK2Freq>
 8003b58:	61b8      	str	r0, [r7, #24]
        break;
 8003b5a:	e00f      	b.n	8003b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b5c:	4b4b      	ldr	r3, [pc, #300]	; (8003c8c <UART_SetConfig+0x4c4>)
 8003b5e:	61bb      	str	r3, [r7, #24]
        break;
 8003b60:	e00c      	b.n	8003b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b62:	f7fe fd6f 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8003b66:	61b8      	str	r0, [r7, #24]
        break;
 8003b68:	e008      	b.n	8003b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b6e:	61bb      	str	r3, [r7, #24]
        break;
 8003b70:	e004      	b.n	8003b7c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	77bb      	strb	r3, [r7, #30]
        break;
 8003b7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d074      	beq.n	8003c6c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	005a      	lsls	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	441a      	add	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b0f      	cmp	r3, #15
 8003b9c:	d916      	bls.n	8003bcc <UART_SetConfig+0x404>
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba4:	d212      	bcs.n	8003bcc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	f023 030f 	bic.w	r3, r3, #15
 8003bae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	89fb      	ldrh	r3, [r7, #14]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	89fa      	ldrh	r2, [r7, #14]
 8003bc8:	60da      	str	r2, [r3, #12]
 8003bca:	e04f      	b.n	8003c6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	77bb      	strb	r3, [r7, #30]
 8003bd0:	e04c      	b.n	8003c6c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bd2:	7ffb      	ldrb	r3, [r7, #31]
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d828      	bhi.n	8003c2a <UART_SetConfig+0x462>
 8003bd8:	a201      	add	r2, pc, #4	; (adr r2, 8003be0 <UART_SetConfig+0x418>)
 8003bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bde:	bf00      	nop
 8003be0:	08003c05 	.word	0x08003c05
 8003be4:	08003c0d 	.word	0x08003c0d
 8003be8:	08003c15 	.word	0x08003c15
 8003bec:	08003c2b 	.word	0x08003c2b
 8003bf0:	08003c1b 	.word	0x08003c1b
 8003bf4:	08003c2b 	.word	0x08003c2b
 8003bf8:	08003c2b 	.word	0x08003c2b
 8003bfc:	08003c2b 	.word	0x08003c2b
 8003c00:	08003c23 	.word	0x08003c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c04:	f7fe fe30 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8003c08:	61b8      	str	r0, [r7, #24]
        break;
 8003c0a:	e013      	b.n	8003c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c0c:	f7fe fe40 	bl	8002890 <HAL_RCC_GetPCLK2Freq>
 8003c10:	61b8      	str	r0, [r7, #24]
        break;
 8003c12:	e00f      	b.n	8003c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c14:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <UART_SetConfig+0x4c4>)
 8003c16:	61bb      	str	r3, [r7, #24]
        break;
 8003c18:	e00c      	b.n	8003c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1a:	f7fe fd13 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8003c1e:	61b8      	str	r0, [r7, #24]
        break;
 8003c20:	e008      	b.n	8003c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c26:	61bb      	str	r3, [r7, #24]
        break;
 8003c28:	e004      	b.n	8003c34 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	77bb      	strb	r3, [r7, #30]
        break;
 8003c32:	bf00      	nop
    }

    if (pclk != 0U)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d018      	beq.n	8003c6c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	085a      	lsrs	r2, r3, #1
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	441a      	add	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b0f      	cmp	r3, #15
 8003c52:	d909      	bls.n	8003c68 <UART_SetConfig+0x4a0>
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5a:	d205      	bcs.n	8003c68 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60da      	str	r2, [r3, #12]
 8003c66:	e001      	b.n	8003c6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c78:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40007c00 	.word	0x40007c00
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	00f42400 	.word	0x00f42400

08003c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01a      	beq.n	8003da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8e:	d10a      	bne.n	8003da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]
  }
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003de4:	f7fd f8d4 	bl	8000f90 <HAL_GetTick>
 8003de8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d10e      	bne.n	8003e16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f831 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e027      	b.n	8003e66 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d10e      	bne.n	8003e42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f81b 	bl	8003e6e <UART_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e011      	b.n	8003e66 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b09c      	sub	sp, #112	; 0x70
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7e:	e0a7      	b.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	f000 80a3 	beq.w	8003fd0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8a:	f7fd f881 	bl	8000f90 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d302      	bcc.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d13f      	bne.n	8003f20 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eb4:	667b      	str	r3, [r7, #100]	; 0x64
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ec0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ec4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e6      	bne.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3308      	adds	r3, #8
 8003ef0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ef2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ef4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e5      	bne.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e068      	b.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d050      	beq.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f3c:	d148      	bne.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f46:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f66:	637b      	str	r3, [r7, #52]	; 0x34
 8003f68:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e6      	bne.n	8003f48 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3308      	adds	r3, #8
 8003f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	613b      	str	r3, [r7, #16]
   return(result);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3308      	adds	r3, #8
 8003f98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f9a:	623a      	str	r2, [r7, #32]
 8003f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	69f9      	ldr	r1, [r7, #28]
 8003fa0:	6a3a      	ldr	r2, [r7, #32]
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e5      	bne.n	8003f7a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e010      	b.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	f43f af48 	beq.w	8003e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3770      	adds	r7, #112	; 0x70
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b084      	sub	sp, #16
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	f107 001c 	add.w	r0, r7, #28
 800400a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	2b01      	cmp	r3, #1
 8004012:	d120      	bne.n	8004056 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <USB_CoreInit+0xac>)
 8004026:	4013      	ands	r3, r2
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d105      	bne.n	800404a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fa96 	bl	800457c <USB_CoreReset>
 8004050:	4603      	mov	r3, r0
 8004052:	73fb      	strb	r3, [r7, #15]
 8004054:	e010      	b.n	8004078 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fa8a 	bl	800457c <USB_CoreReset>
 8004068:	4603      	mov	r3, r0
 800406a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10b      	bne.n	8004096 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f043 0206 	orr.w	r2, r3, #6
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f043 0220 	orr.w	r2, r3, #32
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004096:	7bfb      	ldrb	r3, [r7, #15]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040a2:	b004      	add	sp, #16
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	ffbdffbf 	.word	0xffbdffbf

080040ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f023 0201 	bic.w	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	460b      	mov	r3, r1
 80040d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d115      	bne.n	800411c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040fc:	2001      	movs	r0, #1
 80040fe:	f7fc ff53 	bl	8000fa8 <HAL_Delay>
      ms++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3301      	adds	r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fa29 	bl	8004560 <USB_GetMode>
 800410e:	4603      	mov	r3, r0
 8004110:	2b01      	cmp	r3, #1
 8004112:	d01e      	beq.n	8004152 <USB_SetCurrentMode+0x84>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b31      	cmp	r3, #49	; 0x31
 8004118:	d9f0      	bls.n	80040fc <USB_SetCurrentMode+0x2e>
 800411a:	e01a      	b.n	8004152 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d115      	bne.n	800414e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800412e:	2001      	movs	r0, #1
 8004130:	f7fc ff3a 	bl	8000fa8 <HAL_Delay>
      ms++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3301      	adds	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fa10 	bl	8004560 <USB_GetMode>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <USB_SetCurrentMode+0x84>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b31      	cmp	r3, #49	; 0x31
 800414a:	d9f0      	bls.n	800412e <USB_SetCurrentMode+0x60>
 800414c:	e001      	b.n	8004152 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e005      	b.n	800415e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b32      	cmp	r3, #50	; 0x32
 8004156:	d101      	bne.n	800415c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004168:	b084      	sub	sp, #16
 800416a:	b580      	push	{r7, lr}
 800416c:	b086      	sub	sp, #24
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	e009      	b.n	800419c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	3340      	adds	r3, #64	; 0x40
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	2200      	movs	r2, #0
 8004194:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	3301      	adds	r3, #1
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b0e      	cmp	r3, #14
 80041a0:	d9f2      	bls.n	8004188 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11c      	bne.n	80041e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041b6:	f043 0302 	orr.w	r3, r3, #2
 80041ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	e005      	b.n	80041ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041f4:	461a      	mov	r2, r3
 80041f6:	2300      	movs	r3, #0
 80041f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004200:	4619      	mov	r1, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004208:	461a      	mov	r2, r3
 800420a:	680b      	ldr	r3, [r1, #0]
 800420c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004210:	2b01      	cmp	r3, #1
 8004212:	d10c      	bne.n	800422e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d104      	bne.n	8004224 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800421a:	2100      	movs	r1, #0
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f965 	bl	80044ec <USB_SetDevSpeed>
 8004222:	e008      	b.n	8004236 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004224:	2101      	movs	r1, #1
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f960 	bl	80044ec <USB_SetDevSpeed>
 800422c:	e003      	b.n	8004236 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800422e:	2103      	movs	r1, #3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f95b 	bl	80044ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004236:	2110      	movs	r1, #16
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8f3 	bl	8004424 <USB_FlushTxFifo>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f91f 	bl	800448c <USB_FlushRxFifo>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425e:	461a      	mov	r2, r3
 8004260:	2300      	movs	r3, #0
 8004262:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426a:	461a      	mov	r2, r3
 800426c:	2300      	movs	r3, #0
 800426e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004276:	461a      	mov	r2, r3
 8004278:	2300      	movs	r3, #0
 800427a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800427c:	2300      	movs	r3, #0
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	e043      	b.n	800430a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004298:	d118      	bne.n	80042cc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ac:	461a      	mov	r2, r3
 80042ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	e013      	b.n	80042de <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c2:	461a      	mov	r2, r3
 80042c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e008      	b.n	80042de <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	461a      	mov	r2, r3
 80042da:	2300      	movs	r3, #0
 80042dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	461a      	mov	r2, r3
 80042ec:	2300      	movs	r3, #0
 80042ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fc:	461a      	mov	r2, r3
 80042fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004302:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	3301      	adds	r3, #1
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	429a      	cmp	r2, r3
 8004310:	d3b7      	bcc.n	8004282 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004312:	2300      	movs	r3, #0
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	e043      	b.n	80043a0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800432a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800432e:	d118      	bne.n	8004362 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10a      	bne.n	800434c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004342:	461a      	mov	r2, r3
 8004344:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e013      	b.n	8004374 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004358:	461a      	mov	r2, r3
 800435a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	e008      	b.n	8004374 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	461a      	mov	r2, r3
 8004370:	2300      	movs	r3, #0
 8004372:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004380:	461a      	mov	r2, r3
 8004382:	2300      	movs	r3, #0
 8004384:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004392:	461a      	mov	r2, r3
 8004394:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004398:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	3301      	adds	r3, #1
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d3b7      	bcc.n	8004318 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d105      	bne.n	80043dc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f043 0210 	orr.w	r2, r3, #16
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	4b0e      	ldr	r3, [pc, #56]	; (800441c <USB_DevInit+0x2b4>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f043 0208 	orr.w	r2, r3, #8
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d105      	bne.n	800440c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699a      	ldr	r2, [r3, #24]
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <USB_DevInit+0x2b8>)
 8004406:	4313      	orrs	r3, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800440c:	7dfb      	ldrb	r3, [r7, #23]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004418:	b004      	add	sp, #16
 800441a:	4770      	bx	lr
 800441c:	803c3800 	.word	0x803c3800
 8004420:	40000004 	.word	0x40000004

08004424 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3301      	adds	r3, #1
 8004436:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a13      	ldr	r2, [pc, #76]	; (8004488 <USB_FlushTxFifo+0x64>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d901      	bls.n	8004444 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e01b      	b.n	800447c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	daf2      	bge.n	8004432 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	019b      	lsls	r3, r3, #6
 8004454:	f043 0220 	orr.w	r2, r3, #32
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3301      	adds	r3, #1
 8004460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a08      	ldr	r2, [pc, #32]	; (8004488 <USB_FlushTxFifo+0x64>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e006      	b.n	800447c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b20      	cmp	r3, #32
 8004478:	d0f0      	beq.n	800445c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	00030d40 	.word	0x00030d40

0800448c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3301      	adds	r3, #1
 800449c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a11      	ldr	r2, [pc, #68]	; (80044e8 <USB_FlushRxFifo+0x5c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e018      	b.n	80044dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	daf2      	bge.n	8004498 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2210      	movs	r2, #16
 80044ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3301      	adds	r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a08      	ldr	r2, [pc, #32]	; (80044e8 <USB_FlushRxFifo+0x5c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e006      	b.n	80044dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b10      	cmp	r3, #16
 80044d8:	d0f0      	beq.n	80044bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	00030d40 	.word	0x00030d40

080044ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	68f9      	ldr	r1, [r7, #12]
 8004508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800450c:	4313      	orrs	r3, r2
 800450e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004538:	f023 0303 	bic.w	r3, r3, #3
 800453c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800454c:	f043 0302 	orr.w	r3, r3, #2
 8004550:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f003 0301 	and.w	r3, r3, #1
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3301      	adds	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <USB_CoreReset+0x64>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e01b      	b.n	80045d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	daf2      	bge.n	8004588 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3301      	adds	r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a09      	ldr	r2, [pc, #36]	; (80045e0 <USB_CoreReset+0x64>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d901      	bls.n	80045c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e006      	b.n	80045d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d0f0      	beq.n	80045b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	00030d40 	.word	0x00030d40

080045e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045fa:	f3ef 8305 	mrs	r3, IPSR
 80045fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004600:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10f      	bne.n	8004626 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004606:	f3ef 8310 	mrs	r3, PRIMASK
 800460a:	607b      	str	r3, [r7, #4]
  return(result);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d105      	bne.n	800461e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004612:	f3ef 8311 	mrs	r3, BASEPRI
 8004616:	603b      	str	r3, [r7, #0]
  return(result);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d007      	beq.n	800462e <osKernelInitialize+0x3a>
 800461e:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <osKernelInitialize+0x64>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d103      	bne.n	800462e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004626:	f06f 0305 	mvn.w	r3, #5
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	e00c      	b.n	8004648 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <osKernelInitialize+0x64>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <osKernelInitialize+0x64>)
 8004638:	2201      	movs	r2, #1
 800463a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e002      	b.n	8004648 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004642:	f04f 33ff 	mov.w	r3, #4294967295
 8004646:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004648:	68fb      	ldr	r3, [r7, #12]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	2000084c 	.word	0x2000084c

0800465c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004662:	f3ef 8305 	mrs	r3, IPSR
 8004666:	60bb      	str	r3, [r7, #8]
  return(result);
 8004668:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10f      	bne.n	800468e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800466e:	f3ef 8310 	mrs	r3, PRIMASK
 8004672:	607b      	str	r3, [r7, #4]
  return(result);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d105      	bne.n	8004686 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800467a:	f3ef 8311 	mrs	r3, BASEPRI
 800467e:	603b      	str	r3, [r7, #0]
  return(result);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <osKernelStart+0x3a>
 8004686:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <osKernelStart+0x68>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d103      	bne.n	8004696 <osKernelStart+0x3a>
    stat = osErrorISR;
 800468e:	f06f 0305 	mvn.w	r3, #5
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e010      	b.n	80046b8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <osKernelStart+0x68>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d109      	bne.n	80046b2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800469e:	f7ff ffa1 	bl	80045e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <osKernelStart+0x68>)
 80046a4:	2202      	movs	r2, #2
 80046a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046a8:	f001 fc1a 	bl	8005ee0 <vTaskStartScheduler>
      stat = osOK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e002      	b.n	80046b8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80046b2:	f04f 33ff 	mov.w	r3, #4294967295
 80046b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046b8:	68fb      	ldr	r3, [r7, #12]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	2000084c 	.word	0x2000084c

080046c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b090      	sub	sp, #64	; 0x40
 80046cc:	af04      	add	r7, sp, #16
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046d8:	f3ef 8305 	mrs	r3, IPSR
 80046dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80046de:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 808f 	bne.w	8004804 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e6:	f3ef 8310 	mrs	r3, PRIMASK
 80046ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d105      	bne.n	80046fe <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046f2:	f3ef 8311 	mrs	r3, BASEPRI
 80046f6:	617b      	str	r3, [r7, #20]
  return(result);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <osThreadNew+0x3e>
 80046fe:	4b44      	ldr	r3, [pc, #272]	; (8004810 <osThreadNew+0x148>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d07e      	beq.n	8004804 <osThreadNew+0x13c>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d07b      	beq.n	8004804 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004710:	2318      	movs	r3, #24
 8004712:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004714:	2300      	movs	r3, #0
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004718:	f04f 33ff 	mov.w	r3, #4294967295
 800471c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d045      	beq.n	80047b0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <osThreadNew+0x6a>
        name = attr->name;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d008      	beq.n	8004758 <osThreadNew+0x90>
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	2b38      	cmp	r3, #56	; 0x38
 800474a:	d805      	bhi.n	8004758 <osThreadNew+0x90>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <osThreadNew+0x94>
        return (NULL);
 8004758:	2300      	movs	r3, #0
 800475a:	e054      	b.n	8004806 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	089b      	lsrs	r3, r3, #2
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00e      	beq.n	8004792 <osThreadNew+0xca>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	2b5b      	cmp	r3, #91	; 0x5b
 800477a:	d90a      	bls.n	8004792 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004780:	2b00      	cmp	r3, #0
 8004782:	d006      	beq.n	8004792 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <osThreadNew+0xca>
        mem = 1;
 800478c:	2301      	movs	r3, #1
 800478e:	623b      	str	r3, [r7, #32]
 8004790:	e010      	b.n	80047b4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10c      	bne.n	80047b4 <osThreadNew+0xec>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d108      	bne.n	80047b4 <osThreadNew+0xec>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d104      	bne.n	80047b4 <osThreadNew+0xec>
          mem = 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	623b      	str	r3, [r7, #32]
 80047ae:	e001      	b.n	80047b4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d110      	bne.n	80047dc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047c2:	9202      	str	r2, [sp, #8]
 80047c4:	9301      	str	r3, [sp, #4]
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f001 f9a5 	bl	8005b20 <xTaskCreateStatic>
 80047d6:	4603      	mov	r3, r0
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	e013      	b.n	8004804 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d110      	bne.n	8004804 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	f107 0310 	add.w	r3, r7, #16
 80047ea:	9301      	str	r3, [sp, #4]
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f001 f9f6 	bl	8005be6 <xTaskCreate>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d001      	beq.n	8004804 <osThreadNew+0x13c>
          hTask = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004804:	693b      	ldr	r3, [r7, #16]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3730      	adds	r7, #48	; 0x30
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	2000084c 	.word	0x2000084c

08004814 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800481c:	f3ef 8305 	mrs	r3, IPSR
 8004820:	613b      	str	r3, [r7, #16]
  return(result);
 8004822:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10f      	bne.n	8004848 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004828:	f3ef 8310 	mrs	r3, PRIMASK
 800482c:	60fb      	str	r3, [r7, #12]
  return(result);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d105      	bne.n	8004840 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004834:	f3ef 8311 	mrs	r3, BASEPRI
 8004838:	60bb      	str	r3, [r7, #8]
  return(result);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <osDelay+0x3c>
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <osDelay+0x58>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d103      	bne.n	8004850 <osDelay+0x3c>
    stat = osErrorISR;
 8004848:	f06f 0305 	mvn.w	r3, #5
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	e007      	b.n	8004860 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <osDelay+0x4c>
      vTaskDelay(ticks);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f001 fb0a 	bl	8005e74 <vTaskDelay>
    }
  }

  return (stat);
 8004860:	697b      	ldr	r3, [r7, #20]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	2000084c 	.word	0x2000084c

08004870 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f002 fd71 	bl	8007360 <pvTimerGetTimerID>
 800487e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	6852      	ldr	r2, [r2, #4]
 800488e:	4610      	mov	r0, r2
 8004890:	4798      	blx	r3
  }
}
 8004892:	bf00      	nop
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b08e      	sub	sp, #56	; 0x38
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	460b      	mov	r3, r1
 80048aa:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80048ac:	2300      	movs	r3, #0
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048b0:	f3ef 8305 	mrs	r3, IPSR
 80048b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80048b6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d16a      	bne.n	8004992 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048bc:	f3ef 8310 	mrs	r3, PRIMASK
 80048c0:	617b      	str	r3, [r7, #20]
  return(result);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d105      	bne.n	80048d4 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048c8:	f3ef 8311 	mrs	r3, BASEPRI
 80048cc:	613b      	str	r3, [r7, #16]
  return(result);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <osTimerNew+0x40>
 80048d4:	4b31      	ldr	r3, [pc, #196]	; (800499c <osTimerNew+0x100>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d05a      	beq.n	8004992 <osTimerNew+0xf6>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d057      	beq.n	8004992 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80048e2:	2008      	movs	r0, #8
 80048e4:	f002 ff96 	bl	8007814 <pvPortMalloc>
 80048e8:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d050      	beq.n	8004992 <osTimerNew+0xf6>
      callb->func = func;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80048fc:	7afb      	ldrb	r3, [r7, #11]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <osTimerNew+0x6c>
        reload = pdFALSE;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
 8004906:	e001      	b.n	800490c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8004908:	2301      	movs	r3, #1
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800490c:	f04f 33ff 	mov.w	r3, #4294967295
 8004910:	623b      	str	r3, [r7, #32]
      name = NULL;
 8004912:	2300      	movs	r3, #0
 8004914:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01c      	beq.n	8004956 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <osTimerNew+0x8e>
          name = attr->name;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d006      	beq.n	8004940 <osTimerNew+0xa4>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	2b2b      	cmp	r3, #43	; 0x2b
 8004938:	d902      	bls.n	8004940 <osTimerNew+0xa4>
          mem = 1;
 800493a:	2301      	movs	r3, #1
 800493c:	623b      	str	r3, [r7, #32]
 800493e:	e00c      	b.n	800495a <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d108      	bne.n	800495a <osTimerNew+0xbe>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <osTimerNew+0xbe>
            mem = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	623b      	str	r3, [r7, #32]
 8004954:	e001      	b.n	800495a <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d10c      	bne.n	800497a <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <osTimerNew+0x104>)
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496e:	2101      	movs	r1, #1
 8004970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004972:	f002 f964 	bl	8006c3e <xTimerCreateStatic>
 8004976:	62b8      	str	r0, [r7, #40]	; 0x28
 8004978:	e00b      	b.n	8004992 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d108      	bne.n	8004992 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004980:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <osTimerNew+0x104>)
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004988:	2101      	movs	r1, #1
 800498a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800498c:	f002 f936 	bl	8006bfc <xTimerCreate>
 8004990:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004994:	4618      	mov	r0, r3
 8004996:	3730      	adds	r7, #48	; 0x30
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	2000084c 	.word	0x2000084c
 80049a0:	08004871 	.word	0x08004871

080049a4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08c      	sub	sp, #48	; 0x30
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049b4:	f3ef 8305 	mrs	r3, IPSR
 80049b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80049ba:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f040 8086 	bne.w	8004ace <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c2:	f3ef 8310 	mrs	r3, PRIMASK
 80049c6:	617b      	str	r3, [r7, #20]
  return(result);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d105      	bne.n	80049da <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049ce:	f3ef 8311 	mrs	r3, BASEPRI
 80049d2:	613b      	str	r3, [r7, #16]
  return(result);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <osSemaphoreNew+0x3e>
 80049da:	4b3f      	ldr	r3, [pc, #252]	; (8004ad8 <osSemaphoreNew+0x134>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d075      	beq.n	8004ace <osSemaphoreNew+0x12a>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d072      	beq.n	8004ace <osSemaphoreNew+0x12a>
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d86e      	bhi.n	8004ace <osSemaphoreNew+0x12a>
    mem = -1;
 80049f0:	f04f 33ff 	mov.w	r3, #4294967295
 80049f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d015      	beq.n	8004a28 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d006      	beq.n	8004a12 <osSemaphoreNew+0x6e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b4f      	cmp	r3, #79	; 0x4f
 8004a0a:	d902      	bls.n	8004a12 <osSemaphoreNew+0x6e>
        mem = 1;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	623b      	str	r3, [r7, #32]
 8004a10:	e00c      	b.n	8004a2c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d108      	bne.n	8004a2c <osSemaphoreNew+0x88>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d104      	bne.n	8004a2c <osSemaphoreNew+0x88>
          mem = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	623b      	str	r3, [r7, #32]
 8004a26:	e001      	b.n	8004a2c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d04c      	beq.n	8004ace <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d128      	bne.n	8004a8c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d10a      	bne.n	8004a56 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2203      	movs	r2, #3
 8004a46:	9200      	str	r2, [sp, #0]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	f000 f997 	bl	8004d80 <xQueueGenericCreateStatic>
 8004a52:	6278      	str	r0, [r7, #36]	; 0x24
 8004a54:	e005      	b.n	8004a62 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004a56:	2203      	movs	r2, #3
 8004a58:	2100      	movs	r1, #0
 8004a5a:	2001      	movs	r0, #1
 8004a5c:	f000 fa12 	bl	8004e84 <xQueueGenericCreate>
 8004a60:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d022      	beq.n	8004aae <osSemaphoreNew+0x10a>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01f      	beq.n	8004aae <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2200      	movs	r2, #0
 8004a72:	2100      	movs	r1, #0
 8004a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a76:	f000 fadd 	bl	8005034 <xQueueGenericSend>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d016      	beq.n	8004aae <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a82:	f000 fe77 	bl	8005774 <vQueueDelete>
            hSemaphore = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8a:	e010      	b.n	8004aae <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d108      	bne.n	8004aa4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	461a      	mov	r2, r3
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fa57 	bl	8004f4e <xQueueCreateCountingSemaphoreStatic>
 8004aa0:	6278      	str	r0, [r7, #36]	; 0x24
 8004aa2:	e004      	b.n	8004aae <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fa8c 	bl	8004fc4 <xQueueCreateCountingSemaphore>
 8004aac:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00c      	beq.n	8004ace <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <osSemaphoreNew+0x11e>
          name = attr->name;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	e001      	b.n	8004ac6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004ac6:	69f9      	ldr	r1, [r7, #28]
 8004ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004aca:	f000 ffa1 	bl	8005a10 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3728      	adds	r7, #40	; 0x28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	2000084c 	.word	0x2000084c

08004adc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4a07      	ldr	r2, [pc, #28]	; (8004b08 <vApplicationGetIdleTaskMemory+0x2c>)
 8004aec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4a06      	ldr	r2, [pc, #24]	; (8004b0c <vApplicationGetIdleTaskMemory+0x30>)
 8004af2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2280      	movs	r2, #128	; 0x80
 8004af8:	601a      	str	r2, [r3, #0]
}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000850 	.word	0x20000850
 8004b0c:	200008ac 	.word	0x200008ac

08004b10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a07      	ldr	r2, [pc, #28]	; (8004b3c <vApplicationGetTimerTaskMemory+0x2c>)
 8004b20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4a06      	ldr	r2, [pc, #24]	; (8004b40 <vApplicationGetTimerTaskMemory+0x30>)
 8004b26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b2e:	601a      	str	r2, [r3, #0]
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	20000aac 	.word	0x20000aac
 8004b40:	20000b08 	.word	0x20000b08

08004b44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f103 0208 	add.w	r2, r3, #8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f103 0208 	add.w	r2, r3, #8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f103 0208 	add.w	r2, r3, #8
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b085      	sub	sp, #20
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	601a      	str	r2, [r3, #0]
}
 8004bda:	bf00      	nop
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d103      	bne.n	8004c06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e00c      	b.n	8004c20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	e002      	b.n	8004c14 <vListInsert+0x2e>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d2f6      	bcs.n	8004c0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	601a      	str	r2, [r3, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6892      	ldr	r2, [r2, #8]
 8004c6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6852      	ldr	r2, [r2, #4]
 8004c78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d103      	bne.n	8004c8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	1e5a      	subs	r2, r3, #1
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10c      	bne.n	8004cda <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	b672      	cpsid	i
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	b662      	cpsie	i
 8004cd4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cd6:	bf00      	nop
 8004cd8:	e7fe      	b.n	8004cd8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004cda:	f002 fc6f 	bl	80075bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce6:	68f9      	ldr	r1, [r7, #12]
 8004ce8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	441a      	add	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	68f9      	ldr	r1, [r7, #12]
 8004d0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	441a      	add	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	22ff      	movs	r2, #255	; 0xff
 8004d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	22ff      	movs	r2, #255	; 0xff
 8004d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d114      	bne.n	8004d5a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01a      	beq.n	8004d6e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3310      	adds	r3, #16
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 fb67 	bl	8006410 <xTaskRemoveFromEventList>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d012      	beq.n	8004d6e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d48:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <xQueueGenericReset+0xd0>)
 8004d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	e009      	b.n	8004d6e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3310      	adds	r3, #16
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fef0 	bl	8004b44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3324      	adds	r3, #36	; 0x24
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff feeb 	bl	8004b44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d6e:	f002 fc59 	bl	8007624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d72:	2301      	movs	r3, #1
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	e000ed04 	.word	0xe000ed04

08004d80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08e      	sub	sp, #56	; 0x38
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10c      	bne.n	8004dae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	b672      	cpsid	i
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	b662      	cpsie	i
 8004da8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10c      	bne.n	8004dce <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	b672      	cpsid	i
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	b662      	cpsie	i
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004dca:	bf00      	nop
 8004dcc:	e7fe      	b.n	8004dcc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <xQueueGenericCreateStatic+0x5a>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <xQueueGenericCreateStatic+0x5e>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <xQueueGenericCreateStatic+0x60>
 8004dde:	2300      	movs	r3, #0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10c      	bne.n	8004dfe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	b672      	cpsid	i
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	b662      	cpsie	i
 8004df8:	623b      	str	r3, [r7, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	e7fe      	b.n	8004dfc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d102      	bne.n	8004e0a <xQueueGenericCreateStatic+0x8a>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <xQueueGenericCreateStatic+0x8e>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <xQueueGenericCreateStatic+0x90>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10c      	bne.n	8004e2e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	b672      	cpsid	i
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	b662      	cpsie	i
 8004e28:	61fb      	str	r3, [r7, #28]
}
 8004e2a:	bf00      	nop
 8004e2c:	e7fe      	b.n	8004e2c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e2e:	2350      	movs	r3, #80	; 0x50
 8004e30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b50      	cmp	r3, #80	; 0x50
 8004e36:	d00c      	beq.n	8004e52 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	b672      	cpsid	i
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	b662      	cpsie	i
 8004e4c:	61bb      	str	r3, [r7, #24]
}
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00d      	beq.n	8004e7a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f847 	bl	8004f08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3730      	adds	r7, #48	; 0x30
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	; 0x28
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10c      	bne.n	8004eb2 <xQueueGenericCreate+0x2e>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	b672      	cpsid	i
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	b662      	cpsie	i
 8004eac:	613b      	str	r3, [r7, #16]
}
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	e004      	b.n	8004ec8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	3350      	adds	r3, #80	; 0x50
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f002 fca1 	bl	8007814 <pvPortMalloc>
 8004ed2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d011      	beq.n	8004efe <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	3350      	adds	r3, #80	; 0x50
 8004ee2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004eec:	79fa      	ldrb	r2, [r7, #7]
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f805 	bl	8004f08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004efe:	69bb      	ldr	r3, [r7, #24]
	}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3720      	adds	r7, #32
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d103      	bne.n	8004f24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e002      	b.n	8004f2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f36:	2101      	movs	r1, #1
 8004f38:	69b8      	ldr	r0, [r7, #24]
 8004f3a:	f7ff feb7 	bl	8004cac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	78fa      	ldrb	r2, [r7, #3]
 8004f42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f46:	bf00      	nop
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b08a      	sub	sp, #40	; 0x28
 8004f52:	af02      	add	r7, sp, #8
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10c      	bne.n	8004f7a <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	b672      	cpsid	i
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	b662      	cpsie	i
 8004f74:	61bb      	str	r3, [r7, #24]
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d90c      	bls.n	8004f9c <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	b672      	cpsid	i
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	b662      	cpsie	i
 8004f96:	617b      	str	r3, [r7, #20]
}
 8004f98:	bf00      	nop
 8004f9a:	e7fe      	b.n	8004f9a <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f7ff feea 	bl	8004d80 <xQueueGenericCreateStatic>
 8004fac:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004fba:	69fb      	ldr	r3, [r7, #28]
	}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3720      	adds	r7, #32
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10c      	bne.n	8004fee <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	b672      	cpsid	i
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	b662      	cpsie	i
 8004fe8:	613b      	str	r3, [r7, #16]
}
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d90c      	bls.n	8005010 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	b672      	cpsid	i
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	b662      	cpsie	i
 800500a:	60fb      	str	r3, [r7, #12]
}
 800500c:	bf00      	nop
 800500e:	e7fe      	b.n	800500e <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005010:	2202      	movs	r2, #2
 8005012:	2100      	movs	r1, #0
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff ff35 	bl	8004e84 <xQueueGenericCreate>
 800501a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005028:	697b      	ldr	r3, [r7, #20]
	}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08e      	sub	sp, #56	; 0x38
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005042:	2300      	movs	r3, #0
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10c      	bne.n	800506a <xQueueGenericSend+0x36>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	b672      	cpsid	i
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	b662      	cpsie	i
 8005064:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005066:	bf00      	nop
 8005068:	e7fe      	b.n	8005068 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d103      	bne.n	8005078 <xQueueGenericSend+0x44>
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <xQueueGenericSend+0x48>
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <xQueueGenericSend+0x4a>
 800507c:	2300      	movs	r3, #0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10c      	bne.n	800509c <xQueueGenericSend+0x68>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	b672      	cpsid	i
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	b662      	cpsie	i
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005098:	bf00      	nop
 800509a:	e7fe      	b.n	800509a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d103      	bne.n	80050aa <xQueueGenericSend+0x76>
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <xQueueGenericSend+0x7a>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <xQueueGenericSend+0x7c>
 80050ae:	2300      	movs	r3, #0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10c      	bne.n	80050ce <xQueueGenericSend+0x9a>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	b672      	cpsid	i
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	b662      	cpsie	i
 80050c8:	623b      	str	r3, [r7, #32]
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050ce:	f001 fb65 	bl	800679c <xTaskGetSchedulerState>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <xQueueGenericSend+0xaa>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <xQueueGenericSend+0xae>
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <xQueueGenericSend+0xb0>
 80050e2:	2300      	movs	r3, #0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10c      	bne.n	8005102 <xQueueGenericSend+0xce>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	b672      	cpsid	i
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	b662      	cpsie	i
 80050fc:	61fb      	str	r3, [r7, #28]
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005102:	f002 fa5b 	bl	80075bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510e:	429a      	cmp	r2, r3
 8005110:	d302      	bcc.n	8005118 <xQueueGenericSend+0xe4>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d129      	bne.n	800516c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	68b9      	ldr	r1, [r7, #8]
 800511c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800511e:	f000 fb66 	bl	80057ee <prvCopyDataToQueue>
 8005122:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	2b00      	cmp	r3, #0
 800512a:	d010      	beq.n	800514e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	3324      	adds	r3, #36	; 0x24
 8005130:	4618      	mov	r0, r3
 8005132:	f001 f96d 	bl	8006410 <xTaskRemoveFromEventList>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d013      	beq.n	8005164 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800513c:	4b3f      	ldr	r3, [pc, #252]	; (800523c <xQueueGenericSend+0x208>)
 800513e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	e00a      	b.n	8005164 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005154:	4b39      	ldr	r3, [pc, #228]	; (800523c <xQueueGenericSend+0x208>)
 8005156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005164:	f002 fa5e 	bl	8007624 <vPortExitCritical>
				return pdPASS;
 8005168:	2301      	movs	r3, #1
 800516a:	e063      	b.n	8005234 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005172:	f002 fa57 	bl	8007624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005176:	2300      	movs	r3, #0
 8005178:	e05c      	b.n	8005234 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800517a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517c:	2b00      	cmp	r3, #0
 800517e:	d106      	bne.n	800518e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005180:	f107 0314 	add.w	r3, r7, #20
 8005184:	4618      	mov	r0, r3
 8005186:	f001 f9a9 	bl	80064dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800518a:	2301      	movs	r3, #1
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800518e:	f002 fa49 	bl	8007624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005192:	f000 ff0f 	bl	8005fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005196:	f002 fa11 	bl	80075bc <vPortEnterCritical>
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051a0:	b25b      	sxtb	r3, r3
 80051a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a6:	d103      	bne.n	80051b0 <xQueueGenericSend+0x17c>
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051b6:	b25b      	sxtb	r3, r3
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051bc:	d103      	bne.n	80051c6 <xQueueGenericSend+0x192>
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051c6:	f002 fa2d 	bl	8007624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051ca:	1d3a      	adds	r2, r7, #4
 80051cc:	f107 0314 	add.w	r3, r7, #20
 80051d0:	4611      	mov	r1, r2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f001 f998 	bl	8006508 <xTaskCheckForTimeOut>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d124      	bne.n	8005228 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051e0:	f000 fbfd 	bl	80059de <prvIsQueueFull>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d018      	beq.n	800521c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	3310      	adds	r3, #16
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f001 f8b8 	bl	8006368 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051fa:	f000 fb88 	bl	800590e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80051fe:	f000 fee7 	bl	8005fd0 <xTaskResumeAll>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	f47f af7c 	bne.w	8005102 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800520a:	4b0c      	ldr	r3, [pc, #48]	; (800523c <xQueueGenericSend+0x208>)
 800520c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	e772      	b.n	8005102 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800521c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800521e:	f000 fb76 	bl	800590e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005222:	f000 fed5 	bl	8005fd0 <xTaskResumeAll>
 8005226:	e76c      	b.n	8005102 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800522a:	f000 fb70 	bl	800590e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800522e:	f000 fecf 	bl	8005fd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005232:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005234:	4618      	mov	r0, r3
 8005236:	3738      	adds	r7, #56	; 0x38
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	e000ed04 	.word	0xe000ed04

08005240 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08e      	sub	sp, #56	; 0x38
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10c      	bne.n	8005272 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	b672      	cpsid	i
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	b662      	cpsie	i
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800526e:	bf00      	nop
 8005270:	e7fe      	b.n	8005270 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d103      	bne.n	8005280 <xQueueGenericSendFromISR+0x40>
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <xQueueGenericSendFromISR+0x44>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <xQueueGenericSendFromISR+0x46>
 8005284:	2300      	movs	r3, #0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10c      	bne.n	80052a4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	b672      	cpsid	i
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	b662      	cpsie	i
 800529e:	623b      	str	r3, [r7, #32]
}
 80052a0:	bf00      	nop
 80052a2:	e7fe      	b.n	80052a2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d103      	bne.n	80052b2 <xQueueGenericSendFromISR+0x72>
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <xQueueGenericSendFromISR+0x76>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <xQueueGenericSendFromISR+0x78>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10c      	bne.n	80052d6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	b672      	cpsid	i
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	b662      	cpsie	i
 80052d0:	61fb      	str	r3, [r7, #28]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052d6:	f002 fa59 	bl	800778c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052da:	f3ef 8211 	mrs	r2, BASEPRI
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	b672      	cpsid	i
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	b662      	cpsie	i
 80052f2:	61ba      	str	r2, [r7, #24]
 80052f4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052f6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	429a      	cmp	r2, r3
 8005304:	d302      	bcc.n	800530c <xQueueGenericSendFromISR+0xcc>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d12c      	bne.n	8005366 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800531c:	f000 fa67 	bl	80057ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005320:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d112      	bne.n	8005350 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	2b00      	cmp	r3, #0
 8005330:	d016      	beq.n	8005360 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	3324      	adds	r3, #36	; 0x24
 8005336:	4618      	mov	r0, r3
 8005338:	f001 f86a 	bl	8006410 <xTaskRemoveFromEventList>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00e      	beq.n	8005360 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00b      	beq.n	8005360 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e007      	b.n	8005360 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005350:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005354:	3301      	adds	r3, #1
 8005356:	b2db      	uxtb	r3, r3
 8005358:	b25a      	sxtb	r2, r3
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005360:	2301      	movs	r3, #1
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005364:	e001      	b.n	800536a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005366:	2300      	movs	r3, #0
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005374:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005378:	4618      	mov	r0, r3
 800537a:	3738      	adds	r7, #56	; 0x38
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08c      	sub	sp, #48	; 0x30
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800538c:	2300      	movs	r3, #0
 800538e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10c      	bne.n	80053b4 <xQueueReceive+0x34>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	b672      	cpsid	i
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	b662      	cpsie	i
 80053ae:	623b      	str	r3, [r7, #32]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <xQueueReceive+0x42>
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <xQueueReceive+0x46>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <xQueueReceive+0x48>
 80053c6:	2300      	movs	r3, #0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10c      	bne.n	80053e6 <xQueueReceive+0x66>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	b672      	cpsid	i
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	b662      	cpsie	i
 80053e0:	61fb      	str	r3, [r7, #28]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053e6:	f001 f9d9 	bl	800679c <xTaskGetSchedulerState>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <xQueueReceive+0x76>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <xQueueReceive+0x7a>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <xQueueReceive+0x7c>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10c      	bne.n	800541a <xQueueReceive+0x9a>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	b672      	cpsid	i
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	b662      	cpsie	i
 8005414:	61bb      	str	r3, [r7, #24]
}
 8005416:	bf00      	nop
 8005418:	e7fe      	b.n	8005418 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800541a:	f002 f8cf 	bl	80075bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	2b00      	cmp	r3, #0
 8005428:	d01f      	beq.n	800546a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800542e:	f000 fa48 	bl	80058c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	1e5a      	subs	r2, r3, #1
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00f      	beq.n	8005462 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	3310      	adds	r3, #16
 8005446:	4618      	mov	r0, r3
 8005448:	f000 ffe2 	bl	8006410 <xTaskRemoveFromEventList>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005452:	4b3d      	ldr	r3, [pc, #244]	; (8005548 <xQueueReceive+0x1c8>)
 8005454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005462:	f002 f8df 	bl	8007624 <vPortExitCritical>
				return pdPASS;
 8005466:	2301      	movs	r3, #1
 8005468:	e069      	b.n	800553e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d103      	bne.n	8005478 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005470:	f002 f8d8 	bl	8007624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005474:	2300      	movs	r3, #0
 8005476:	e062      	b.n	800553e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800547e:	f107 0310 	add.w	r3, r7, #16
 8005482:	4618      	mov	r0, r3
 8005484:	f001 f82a 	bl	80064dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005488:	2301      	movs	r3, #1
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800548c:	f002 f8ca 	bl	8007624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005490:	f000 fd90 	bl	8005fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005494:	f002 f892 	bl	80075bc <vPortEnterCritical>
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800549e:	b25b      	sxtb	r3, r3
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d103      	bne.n	80054ae <xQueueReceive+0x12e>
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054b4:	b25b      	sxtb	r3, r3
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d103      	bne.n	80054c4 <xQueueReceive+0x144>
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054c4:	f002 f8ae 	bl	8007624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054c8:	1d3a      	adds	r2, r7, #4
 80054ca:	f107 0310 	add.w	r3, r7, #16
 80054ce:	4611      	mov	r1, r2
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 f819 	bl	8006508 <xTaskCheckForTimeOut>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d123      	bne.n	8005524 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054de:	f000 fa68 	bl	80059b2 <prvIsQueueEmpty>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d017      	beq.n	8005518 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	3324      	adds	r3, #36	; 0x24
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	4611      	mov	r1, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 ff39 	bl	8006368 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054f8:	f000 fa09 	bl	800590e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054fc:	f000 fd68 	bl	8005fd0 <xTaskResumeAll>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d189      	bne.n	800541a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005506:	4b10      	ldr	r3, [pc, #64]	; (8005548 <xQueueReceive+0x1c8>)
 8005508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	e780      	b.n	800541a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800551a:	f000 f9f8 	bl	800590e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800551e:	f000 fd57 	bl	8005fd0 <xTaskResumeAll>
 8005522:	e77a      	b.n	800541a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005526:	f000 f9f2 	bl	800590e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800552a:	f000 fd51 	bl	8005fd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800552e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005530:	f000 fa3f 	bl	80059b2 <prvIsQueueEmpty>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	f43f af6f 	beq.w	800541a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800553c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800553e:	4618      	mov	r0, r3
 8005540:	3730      	adds	r7, #48	; 0x30
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08e      	sub	sp, #56	; 0x38
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005556:	2300      	movs	r3, #0
 8005558:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800555e:	2300      	movs	r3, #0
 8005560:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10c      	bne.n	8005582 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	b672      	cpsid	i
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	b662      	cpsie	i
 800557c:	623b      	str	r3, [r7, #32]
}
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00c      	beq.n	80055a4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	b672      	cpsid	i
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	b662      	cpsie	i
 800559e:	61fb      	str	r3, [r7, #28]
}
 80055a0:	bf00      	nop
 80055a2:	e7fe      	b.n	80055a2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055a4:	f001 f8fa 	bl	800679c <xTaskGetSchedulerState>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d102      	bne.n	80055b4 <xQueueSemaphoreTake+0x68>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <xQueueSemaphoreTake+0x6c>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <xQueueSemaphoreTake+0x6e>
 80055b8:	2300      	movs	r3, #0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10c      	bne.n	80055d8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	b672      	cpsid	i
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	b662      	cpsie	i
 80055d2:	61bb      	str	r3, [r7, #24]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055d8:	f001 fff0 	bl	80075bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d024      	beq.n	8005632 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	1e5a      	subs	r2, r3, #1
 80055ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d104      	bne.n	8005602 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80055f8:	f001 fa4e 	bl	8006a98 <pvTaskIncrementMutexHeldCount>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005600:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00f      	beq.n	800562a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	3310      	adds	r3, #16
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fefe 	bl	8006410 <xTaskRemoveFromEventList>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800561a:	4b55      	ldr	r3, [pc, #340]	; (8005770 <xQueueSemaphoreTake+0x224>)
 800561c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800562a:	f001 fffb 	bl	8007624 <vPortExitCritical>
				return pdPASS;
 800562e:	2301      	movs	r3, #1
 8005630:	e099      	b.n	8005766 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d113      	bne.n	8005660 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	b672      	cpsid	i
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	b662      	cpsie	i
 8005652:	617b      	str	r3, [r7, #20]
}
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005658:	f001 ffe4 	bl	8007624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800565c:	2300      	movs	r3, #0
 800565e:	e082      	b.n	8005766 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005666:	f107 030c 	add.w	r3, r7, #12
 800566a:	4618      	mov	r0, r3
 800566c:	f000 ff36 	bl	80064dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005670:	2301      	movs	r3, #1
 8005672:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005674:	f001 ffd6 	bl	8007624 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005678:	f000 fc9c 	bl	8005fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800567c:	f001 ff9e 	bl	80075bc <vPortEnterCritical>
 8005680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005686:	b25b      	sxtb	r3, r3
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d103      	bne.n	8005696 <xQueueSemaphoreTake+0x14a>
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800569c:	b25b      	sxtb	r3, r3
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	d103      	bne.n	80056ac <xQueueSemaphoreTake+0x160>
 80056a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056ac:	f001 ffba 	bl	8007624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056b0:	463a      	mov	r2, r7
 80056b2:	f107 030c 	add.w	r3, r7, #12
 80056b6:	4611      	mov	r1, r2
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 ff25 	bl	8006508 <xTaskCheckForTimeOut>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d132      	bne.n	800572a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056c6:	f000 f974 	bl	80059b2 <prvIsQueueEmpty>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d026      	beq.n	800571e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80056d8:	f001 ff70 	bl	80075bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 f879 	bl	80067d8 <xTaskPriorityInherit>
 80056e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80056e8:	f001 ff9c 	bl	8007624 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ee:	3324      	adds	r3, #36	; 0x24
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	4611      	mov	r1, r2
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fe37 	bl	8006368 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056fc:	f000 f907 	bl	800590e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005700:	f000 fc66 	bl	8005fd0 <xTaskResumeAll>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	f47f af66 	bne.w	80055d8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800570c:	4b18      	ldr	r3, [pc, #96]	; (8005770 <xQueueSemaphoreTake+0x224>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	e75c      	b.n	80055d8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800571e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005720:	f000 f8f5 	bl	800590e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005724:	f000 fc54 	bl	8005fd0 <xTaskResumeAll>
 8005728:	e756      	b.n	80055d8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800572a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800572c:	f000 f8ef 	bl	800590e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005730:	f000 fc4e 	bl	8005fd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005736:	f000 f93c 	bl	80059b2 <prvIsQueueEmpty>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	f43f af4b 	beq.w	80055d8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00d      	beq.n	8005764 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8005748:	f001 ff38 	bl	80075bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800574c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800574e:	f000 f836 	bl	80057be <prvGetDisinheritPriorityAfterTimeout>
 8005752:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800575a:	4618      	mov	r0, r3
 800575c:	f001 f916 	bl	800698c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005760:	f001 ff60 	bl	8007624 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005764:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005766:	4618      	mov	r0, r3
 8005768:	3738      	adds	r7, #56	; 0x38
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	e000ed04 	.word	0xe000ed04

08005774 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10c      	bne.n	80057a0 <vQueueDelete+0x2c>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	b672      	cpsid	i
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	b662      	cpsie	i
 800579a:	60bb      	str	r3, [r7, #8]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 f95f 	bl	8005a64 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d102      	bne.n	80057b6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f002 f8f9 	bl	80079a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d006      	beq.n	80057dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	e001      	b.n	80057e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80057e0:	68fb      	ldr	r3, [r7, #12]
	}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b086      	sub	sp, #24
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10d      	bne.n	8005828 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d14d      	bne.n	80058b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	4618      	mov	r0, r3
 800581a:	f001 f845 	bl	80068a8 <xTaskPriorityDisinherit>
 800581e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	609a      	str	r2, [r3, #8]
 8005826:	e043      	b.n	80058b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d119      	bne.n	8005862 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6858      	ldr	r0, [r3, #4]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	461a      	mov	r2, r3
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	f002 f9f3 	bl	8007c24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	441a      	add	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	429a      	cmp	r2, r3
 8005856:	d32b      	bcc.n	80058b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	605a      	str	r2, [r3, #4]
 8005860:	e026      	b.n	80058b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	68d8      	ldr	r0, [r3, #12]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	461a      	mov	r2, r3
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	f002 f9d9 	bl	8007c24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	425b      	negs	r3, r3
 800587c:	441a      	add	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d207      	bcs.n	800589e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	425b      	negs	r3, r3
 8005898:	441a      	add	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d105      	bne.n	80058b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058b8:	697b      	ldr	r3, [r7, #20]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b082      	sub	sp, #8
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d018      	beq.n	8005906 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	441a      	add	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d303      	bcc.n	80058f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68d9      	ldr	r1, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	461a      	mov	r2, r3
 8005900:	6838      	ldr	r0, [r7, #0]
 8005902:	f002 f98f 	bl	8007c24 <memcpy>
	}
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005916:	f001 fe51 	bl	80075bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005920:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005922:	e011      	b.n	8005948 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	2b00      	cmp	r3, #0
 800592a:	d012      	beq.n	8005952 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3324      	adds	r3, #36	; 0x24
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fd6d 	bl	8006410 <xTaskRemoveFromEventList>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800593c:	f000 fe4a 	bl	80065d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	3b01      	subs	r3, #1
 8005944:	b2db      	uxtb	r3, r3
 8005946:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800594c:	2b00      	cmp	r3, #0
 800594e:	dce9      	bgt.n	8005924 <prvUnlockQueue+0x16>
 8005950:	e000      	b.n	8005954 <prvUnlockQueue+0x46>
					break;
 8005952:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	22ff      	movs	r2, #255	; 0xff
 8005958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800595c:	f001 fe62 	bl	8007624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005960:	f001 fe2c 	bl	80075bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800596a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800596c:	e011      	b.n	8005992 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d012      	beq.n	800599c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3310      	adds	r3, #16
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fd48 	bl	8006410 <xTaskRemoveFromEventList>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005986:	f000 fe25 	bl	80065d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800598a:	7bbb      	ldrb	r3, [r7, #14]
 800598c:	3b01      	subs	r3, #1
 800598e:	b2db      	uxtb	r3, r3
 8005990:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005992:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005996:	2b00      	cmp	r3, #0
 8005998:	dce9      	bgt.n	800596e <prvUnlockQueue+0x60>
 800599a:	e000      	b.n	800599e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800599c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	22ff      	movs	r2, #255	; 0xff
 80059a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80059a6:	f001 fe3d 	bl	8007624 <vPortExitCritical>
}
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059ba:	f001 fdff 	bl	80075bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059c6:	2301      	movs	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	e001      	b.n	80059d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059d0:	f001 fe28 	bl	8007624 <vPortExitCritical>

	return xReturn;
 80059d4:	68fb      	ldr	r3, [r7, #12]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059e6:	f001 fde9 	bl	80075bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d102      	bne.n	80059fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059f6:	2301      	movs	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e001      	b.n	8005a00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a00:	f001 fe10 	bl	8007624 <vPortExitCritical>

	return xReturn;
 8005a04:	68fb      	ldr	r3, [r7, #12]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	e014      	b.n	8005a4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a20:	4a0f      	ldr	r2, [pc, #60]	; (8005a60 <vQueueAddToRegistry+0x50>)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10b      	bne.n	8005a44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a2c:	490c      	ldr	r1, [pc, #48]	; (8005a60 <vQueueAddToRegistry+0x50>)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a36:	4a0a      	ldr	r2, [pc, #40]	; (8005a60 <vQueueAddToRegistry+0x50>)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a42:	e006      	b.n	8005a52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3301      	adds	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b07      	cmp	r3, #7
 8005a4e:	d9e7      	bls.n	8005a20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a50:	bf00      	nop
 8005a52:	bf00      	nop
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	20000f08 	.word	0x20000f08

08005a64 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	e016      	b.n	8005aa0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005a72:	4a10      	ldr	r2, [pc, #64]	; (8005ab4 <vQueueUnregisterQueue+0x50>)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4413      	add	r3, r2
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d10b      	bne.n	8005a9a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005a82:	4a0c      	ldr	r2, [pc, #48]	; (8005ab4 <vQueueUnregisterQueue+0x50>)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2100      	movs	r1, #0
 8005a88:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005a8c:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <vQueueUnregisterQueue+0x50>)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	4413      	add	r3, r2
 8005a94:	2200      	movs	r2, #0
 8005a96:	605a      	str	r2, [r3, #4]
				break;
 8005a98:	e006      	b.n	8005aa8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b07      	cmp	r3, #7
 8005aa4:	d9e5      	bls.n	8005a72 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	20000f08 	.word	0x20000f08

08005ab8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ac8:	f001 fd78 	bl	80075bc <vPortEnterCritical>
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ad2:	b25b      	sxtb	r3, r3
 8005ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad8:	d103      	bne.n	8005ae2 <vQueueWaitForMessageRestricted+0x2a>
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ae8:	b25b      	sxtb	r3, r3
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d103      	bne.n	8005af8 <vQueueWaitForMessageRestricted+0x40>
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005af8:	f001 fd94 	bl	8007624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d106      	bne.n	8005b12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	3324      	adds	r3, #36	; 0x24
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fc51 	bl	80063b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b12:	6978      	ldr	r0, [r7, #20]
 8005b14:	f7ff fefb 	bl	800590e <prvUnlockQueue>
	}
 8005b18:	bf00      	nop
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08e      	sub	sp, #56	; 0x38
 8005b24:	af04      	add	r7, sp, #16
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10c      	bne.n	8005b4e <xTaskCreateStatic+0x2e>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	b672      	cpsid	i
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	b662      	cpsie	i
 8005b48:	623b      	str	r3, [r7, #32]
}
 8005b4a:	bf00      	nop
 8005b4c:	e7fe      	b.n	8005b4c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10c      	bne.n	8005b6e <xTaskCreateStatic+0x4e>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	b672      	cpsid	i
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	b662      	cpsie	i
 8005b68:	61fb      	str	r3, [r7, #28]
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b6e:	235c      	movs	r3, #92	; 0x5c
 8005b70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b5c      	cmp	r3, #92	; 0x5c
 8005b76:	d00c      	beq.n	8005b92 <xTaskCreateStatic+0x72>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7c:	b672      	cpsid	i
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	b662      	cpsie	i
 8005b8c:	61bb      	str	r3, [r7, #24]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01e      	beq.n	8005bd8 <xTaskCreateStatic+0xb8>
 8005b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01b      	beq.n	8005bd8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ba8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	2202      	movs	r2, #2
 8005bae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9303      	str	r3, [sp, #12]
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	9302      	str	r3, [sp, #8]
 8005bba:	f107 0314 	add.w	r3, r7, #20
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f850 	bl	8005c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bd2:	f000 f8df 	bl	8005d94 <prvAddNewTaskToReadyList>
 8005bd6:	e001      	b.n	8005bdc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bdc:	697b      	ldr	r3, [r7, #20]
	}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3728      	adds	r7, #40	; 0x28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b08c      	sub	sp, #48	; 0x30
 8005bea:	af04      	add	r7, sp, #16
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	603b      	str	r3, [r7, #0]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bf6:	88fb      	ldrh	r3, [r7, #6]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 fe0a 	bl	8007814 <pvPortMalloc>
 8005c00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00e      	beq.n	8005c26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c08:	205c      	movs	r0, #92	; 0x5c
 8005c0a:	f001 fe03 	bl	8007814 <pvPortMalloc>
 8005c0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c1c:	e005      	b.n	8005c2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c1e:	6978      	ldr	r0, [r7, #20]
 8005c20:	f001 fec2 	bl	80079a8 <vPortFree>
 8005c24:	e001      	b.n	8005c2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d017      	beq.n	8005c60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c38:	88fa      	ldrh	r2, [r7, #6]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	9303      	str	r3, [sp, #12]
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	9302      	str	r3, [sp, #8]
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	9301      	str	r3, [sp, #4]
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 f80e 	bl	8005c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c54:	69f8      	ldr	r0, [r7, #28]
 8005c56:	f000 f89d 	bl	8005d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	e002      	b.n	8005c66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c60:	f04f 33ff 	mov.w	r3, #4294967295
 8005c64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c66:	69bb      	ldr	r3, [r7, #24]
	}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3720      	adds	r7, #32
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	461a      	mov	r2, r3
 8005c88:	21a5      	movs	r1, #165	; 0xa5
 8005c8a:	f001 ffd9 	bl	8007c40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005c98:	440b      	add	r3, r1
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f023 0307 	bic.w	r3, r3, #7
 8005ca6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00c      	beq.n	8005ccc <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	b672      	cpsid	i
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	b662      	cpsie	i
 8005cc6:	617b      	str	r3, [r7, #20]
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01f      	beq.n	8005d12 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	e012      	b.n	8005cfe <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	4413      	add	r3, r2
 8005cde:	7819      	ldrb	r1, [r3, #0]
 8005ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	3334      	adds	r3, #52	; 0x34
 8005ce8:	460a      	mov	r2, r1
 8005cea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d006      	beq.n	8005d06 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	2b0f      	cmp	r3, #15
 8005d02:	d9e9      	bls.n	8005cd8 <prvInitialiseNewTask+0x68>
 8005d04:	e000      	b.n	8005d08 <prvInitialiseNewTask+0x98>
			{
				break;
 8005d06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d10:	e003      	b.n	8005d1a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	2b37      	cmp	r3, #55	; 0x37
 8005d1e:	d901      	bls.n	8005d24 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d20:	2337      	movs	r3, #55	; 0x37
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	2200      	movs	r2, #0
 8005d34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	3304      	adds	r3, #4
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe ff22 	bl	8004b84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	3318      	adds	r3, #24
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fe ff1d 	bl	8004b84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	2200      	movs	r2, #0
 8005d64:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	68f9      	ldr	r1, [r7, #12]
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f001 fb16 	bl	80073a4 <pxPortInitialiseStack>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d8a:	bf00      	nop
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d9c:	f001 fc0e 	bl	80075bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005da0:	4b2d      	ldr	r3, [pc, #180]	; (8005e58 <prvAddNewTaskToReadyList+0xc4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	4a2c      	ldr	r2, [pc, #176]	; (8005e58 <prvAddNewTaskToReadyList+0xc4>)
 8005da8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005daa:	4b2c      	ldr	r3, [pc, #176]	; (8005e5c <prvAddNewTaskToReadyList+0xc8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d109      	bne.n	8005dc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005db2:	4a2a      	ldr	r2, [pc, #168]	; (8005e5c <prvAddNewTaskToReadyList+0xc8>)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005db8:	4b27      	ldr	r3, [pc, #156]	; (8005e58 <prvAddNewTaskToReadyList+0xc4>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d110      	bne.n	8005de2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005dc0:	f000 fc2c 	bl	800661c <prvInitialiseTaskLists>
 8005dc4:	e00d      	b.n	8005de2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dc6:	4b26      	ldr	r3, [pc, #152]	; (8005e60 <prvAddNewTaskToReadyList+0xcc>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dce:	4b23      	ldr	r3, [pc, #140]	; (8005e5c <prvAddNewTaskToReadyList+0xc8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d802      	bhi.n	8005de2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ddc:	4a1f      	ldr	r2, [pc, #124]	; (8005e5c <prvAddNewTaskToReadyList+0xc8>)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005de2:	4b20      	ldr	r3, [pc, #128]	; (8005e64 <prvAddNewTaskToReadyList+0xd0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3301      	adds	r3, #1
 8005de8:	4a1e      	ldr	r2, [pc, #120]	; (8005e64 <prvAddNewTaskToReadyList+0xd0>)
 8005dea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005dec:	4b1d      	ldr	r3, [pc, #116]	; (8005e64 <prvAddNewTaskToReadyList+0xd0>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <prvAddNewTaskToReadyList+0xd4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d903      	bls.n	8005e08 <prvAddNewTaskToReadyList+0x74>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <prvAddNewTaskToReadyList+0xd4>)
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4a15      	ldr	r2, [pc, #84]	; (8005e6c <prvAddNewTaskToReadyList+0xd8>)
 8005e16:	441a      	add	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	f7fe febd 	bl	8004b9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e24:	f001 fbfe 	bl	8007624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e28:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <prvAddNewTaskToReadyList+0xcc>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00e      	beq.n	8005e4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e30:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <prvAddNewTaskToReadyList+0xc8>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d207      	bcs.n	8005e4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <prvAddNewTaskToReadyList+0xdc>)
 8005e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	2000141c 	.word	0x2000141c
 8005e5c:	20000f48 	.word	0x20000f48
 8005e60:	20001428 	.word	0x20001428
 8005e64:	20001438 	.word	0x20001438
 8005e68:	20001424 	.word	0x20001424
 8005e6c:	20000f4c 	.word	0x20000f4c
 8005e70:	e000ed04 	.word	0xe000ed04

08005e74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d019      	beq.n	8005eba <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e86:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <vTaskDelay+0x64>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00c      	beq.n	8005ea8 <vTaskDelay+0x34>
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	b672      	cpsid	i
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	b662      	cpsie	i
 8005ea2:	60bb      	str	r3, [r7, #8]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005ea8:	f000 f884 	bl	8005fb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005eac:	2100      	movs	r1, #0
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fe06 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005eb4:	f000 f88c 	bl	8005fd0 <xTaskResumeAll>
 8005eb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d107      	bne.n	8005ed0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005ec0:	4b06      	ldr	r3, [pc, #24]	; (8005edc <vTaskDelay+0x68>)
 8005ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ed0:	bf00      	nop
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	20001444 	.word	0x20001444
 8005edc:	e000ed04 	.word	0xe000ed04

08005ee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08a      	sub	sp, #40	; 0x28
 8005ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005eee:	463a      	mov	r2, r7
 8005ef0:	1d39      	adds	r1, r7, #4
 8005ef2:	f107 0308 	add.w	r3, r7, #8
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe fdf0 	bl	8004adc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	9202      	str	r2, [sp, #8]
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	2300      	movs	r3, #0
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	460a      	mov	r2, r1
 8005f0e:	4923      	ldr	r1, [pc, #140]	; (8005f9c <vTaskStartScheduler+0xbc>)
 8005f10:	4823      	ldr	r0, [pc, #140]	; (8005fa0 <vTaskStartScheduler+0xc0>)
 8005f12:	f7ff fe05 	bl	8005b20 <xTaskCreateStatic>
 8005f16:	4603      	mov	r3, r0
 8005f18:	4a22      	ldr	r2, [pc, #136]	; (8005fa4 <vTaskStartScheduler+0xc4>)
 8005f1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f1c:	4b21      	ldr	r3, [pc, #132]	; (8005fa4 <vTaskStartScheduler+0xc4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f24:	2301      	movs	r3, #1
 8005f26:	617b      	str	r3, [r7, #20]
 8005f28:	e001      	b.n	8005f2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d102      	bne.n	8005f3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f34:	f000 fe18 	bl	8006b68 <xTimerCreateTimerTask>
 8005f38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d118      	bne.n	8005f72 <vTaskStartScheduler+0x92>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	b672      	cpsid	i
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	b662      	cpsie	i
 8005f54:	613b      	str	r3, [r7, #16]
}
 8005f56:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f58:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <vTaskStartScheduler+0xc8>)
 8005f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f60:	4b12      	ldr	r3, [pc, #72]	; (8005fac <vTaskStartScheduler+0xcc>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f66:	4b12      	ldr	r3, [pc, #72]	; (8005fb0 <vTaskStartScheduler+0xd0>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f6c:	f001 faa8 	bl	80074c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f70:	e010      	b.n	8005f94 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f78:	d10c      	bne.n	8005f94 <vTaskStartScheduler+0xb4>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	b672      	cpsid	i
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	b662      	cpsie	i
 8005f8e:	60fb      	str	r3, [r7, #12]
}
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <vTaskStartScheduler+0xb2>
}
 8005f94:	bf00      	nop
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	08007c94 	.word	0x08007c94
 8005fa0:	080065ed 	.word	0x080065ed
 8005fa4:	20001440 	.word	0x20001440
 8005fa8:	2000143c 	.word	0x2000143c
 8005fac:	20001428 	.word	0x20001428
 8005fb0:	20001420 	.word	0x20001420

08005fb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005fb8:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <vTaskSuspendAll+0x18>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	4a03      	ldr	r2, [pc, #12]	; (8005fcc <vTaskSuspendAll+0x18>)
 8005fc0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005fc2:	bf00      	nop
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	20001444 	.word	0x20001444

08005fd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005fde:	4b43      	ldr	r3, [pc, #268]	; (80060ec <xTaskResumeAll+0x11c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10c      	bne.n	8006000 <xTaskResumeAll+0x30>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	b672      	cpsid	i
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	b662      	cpsie	i
 8005ffa:	603b      	str	r3, [r7, #0]
}
 8005ffc:	bf00      	nop
 8005ffe:	e7fe      	b.n	8005ffe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006000:	f001 fadc 	bl	80075bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006004:	4b39      	ldr	r3, [pc, #228]	; (80060ec <xTaskResumeAll+0x11c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3b01      	subs	r3, #1
 800600a:	4a38      	ldr	r2, [pc, #224]	; (80060ec <xTaskResumeAll+0x11c>)
 800600c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800600e:	4b37      	ldr	r3, [pc, #220]	; (80060ec <xTaskResumeAll+0x11c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d162      	bne.n	80060dc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006016:	4b36      	ldr	r3, [pc, #216]	; (80060f0 <xTaskResumeAll+0x120>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d05e      	beq.n	80060dc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800601e:	e02f      	b.n	8006080 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006020:	4b34      	ldr	r3, [pc, #208]	; (80060f4 <xTaskResumeAll+0x124>)
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3318      	adds	r3, #24
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe fe13 	bl	8004c58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3304      	adds	r3, #4
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe fe0e 	bl	8004c58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	4b2d      	ldr	r3, [pc, #180]	; (80060f8 <xTaskResumeAll+0x128>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d903      	bls.n	8006050 <xTaskResumeAll+0x80>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	4a2a      	ldr	r2, [pc, #168]	; (80060f8 <xTaskResumeAll+0x128>)
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4a27      	ldr	r2, [pc, #156]	; (80060fc <xTaskResumeAll+0x12c>)
 800605e:	441a      	add	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3304      	adds	r3, #4
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f7fe fd99 	bl	8004b9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006070:	4b23      	ldr	r3, [pc, #140]	; (8006100 <xTaskResumeAll+0x130>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	429a      	cmp	r2, r3
 8006078:	d302      	bcc.n	8006080 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800607a:	4b22      	ldr	r3, [pc, #136]	; (8006104 <xTaskResumeAll+0x134>)
 800607c:	2201      	movs	r2, #1
 800607e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006080:	4b1c      	ldr	r3, [pc, #112]	; (80060f4 <xTaskResumeAll+0x124>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1cb      	bne.n	8006020 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800608e:	f000 fb65 	bl	800675c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006092:	4b1d      	ldr	r3, [pc, #116]	; (8006108 <xTaskResumeAll+0x138>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d010      	beq.n	80060c0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800609e:	f000 f847 	bl	8006130 <xTaskIncrementTick>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80060a8:	4b16      	ldr	r3, [pc, #88]	; (8006104 <xTaskResumeAll+0x134>)
 80060aa:	2201      	movs	r2, #1
 80060ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1f1      	bne.n	800609e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80060ba:	4b13      	ldr	r3, [pc, #76]	; (8006108 <xTaskResumeAll+0x138>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060c0:	4b10      	ldr	r3, [pc, #64]	; (8006104 <xTaskResumeAll+0x134>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d009      	beq.n	80060dc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060c8:	2301      	movs	r3, #1
 80060ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060cc:	4b0f      	ldr	r3, [pc, #60]	; (800610c <xTaskResumeAll+0x13c>)
 80060ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060dc:	f001 faa2 	bl	8007624 <vPortExitCritical>

	return xAlreadyYielded;
 80060e0:	68bb      	ldr	r3, [r7, #8]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20001444 	.word	0x20001444
 80060f0:	2000141c 	.word	0x2000141c
 80060f4:	200013dc 	.word	0x200013dc
 80060f8:	20001424 	.word	0x20001424
 80060fc:	20000f4c 	.word	0x20000f4c
 8006100:	20000f48 	.word	0x20000f48
 8006104:	20001430 	.word	0x20001430
 8006108:	2000142c 	.word	0x2000142c
 800610c:	e000ed04 	.word	0xe000ed04

08006110 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006116:	4b05      	ldr	r3, [pc, #20]	; (800612c <xTaskGetTickCount+0x1c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800611c:	687b      	ldr	r3, [r7, #4]
}
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	20001420 	.word	0x20001420

08006130 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800613a:	4b50      	ldr	r3, [pc, #320]	; (800627c <xTaskIncrementTick+0x14c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	f040 808b 	bne.w	800625a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006144:	4b4e      	ldr	r3, [pc, #312]	; (8006280 <xTaskIncrementTick+0x150>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3301      	adds	r3, #1
 800614a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800614c:	4a4c      	ldr	r2, [pc, #304]	; (8006280 <xTaskIncrementTick+0x150>)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d122      	bne.n	800619e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006158:	4b4a      	ldr	r3, [pc, #296]	; (8006284 <xTaskIncrementTick+0x154>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00c      	beq.n	800617c <xTaskIncrementTick+0x4c>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	b672      	cpsid	i
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	b662      	cpsie	i
 8006176:	603b      	str	r3, [r7, #0]
}
 8006178:	bf00      	nop
 800617a:	e7fe      	b.n	800617a <xTaskIncrementTick+0x4a>
 800617c:	4b41      	ldr	r3, [pc, #260]	; (8006284 <xTaskIncrementTick+0x154>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	4b41      	ldr	r3, [pc, #260]	; (8006288 <xTaskIncrementTick+0x158>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a3f      	ldr	r2, [pc, #252]	; (8006284 <xTaskIncrementTick+0x154>)
 8006188:	6013      	str	r3, [r2, #0]
 800618a:	4a3f      	ldr	r2, [pc, #252]	; (8006288 <xTaskIncrementTick+0x158>)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	4b3e      	ldr	r3, [pc, #248]	; (800628c <xTaskIncrementTick+0x15c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	4a3d      	ldr	r2, [pc, #244]	; (800628c <xTaskIncrementTick+0x15c>)
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	f000 fadf 	bl	800675c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800619e:	4b3c      	ldr	r3, [pc, #240]	; (8006290 <xTaskIncrementTick+0x160>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d349      	bcc.n	800623c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061a8:	4b36      	ldr	r3, [pc, #216]	; (8006284 <xTaskIncrementTick+0x154>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d104      	bne.n	80061bc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061b2:	4b37      	ldr	r3, [pc, #220]	; (8006290 <xTaskIncrementTick+0x160>)
 80061b4:	f04f 32ff 	mov.w	r2, #4294967295
 80061b8:	601a      	str	r2, [r3, #0]
					break;
 80061ba:	e03f      	b.n	800623c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061bc:	4b31      	ldr	r3, [pc, #196]	; (8006284 <xTaskIncrementTick+0x154>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d203      	bcs.n	80061dc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061d4:	4a2e      	ldr	r2, [pc, #184]	; (8006290 <xTaskIncrementTick+0x160>)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061da:	e02f      	b.n	800623c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	3304      	adds	r3, #4
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fe fd39 	bl	8004c58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d004      	beq.n	80061f8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	3318      	adds	r3, #24
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe fd30 	bl	8004c58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fc:	4b25      	ldr	r3, [pc, #148]	; (8006294 <xTaskIncrementTick+0x164>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d903      	bls.n	800620c <xTaskIncrementTick+0xdc>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	4a22      	ldr	r2, [pc, #136]	; (8006294 <xTaskIncrementTick+0x164>)
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4a1f      	ldr	r2, [pc, #124]	; (8006298 <xTaskIncrementTick+0x168>)
 800621a:	441a      	add	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	3304      	adds	r3, #4
 8006220:	4619      	mov	r1, r3
 8006222:	4610      	mov	r0, r2
 8006224:	f7fe fcbb 	bl	8004b9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622c:	4b1b      	ldr	r3, [pc, #108]	; (800629c <xTaskIncrementTick+0x16c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	429a      	cmp	r2, r3
 8006234:	d3b8      	bcc.n	80061a8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006236:	2301      	movs	r3, #1
 8006238:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800623a:	e7b5      	b.n	80061a8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800623c:	4b17      	ldr	r3, [pc, #92]	; (800629c <xTaskIncrementTick+0x16c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006242:	4915      	ldr	r1, [pc, #84]	; (8006298 <xTaskIncrementTick+0x168>)
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	440b      	add	r3, r1
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d907      	bls.n	8006264 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006254:	2301      	movs	r3, #1
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	e004      	b.n	8006264 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800625a:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <xTaskIncrementTick+0x170>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3301      	adds	r3, #1
 8006260:	4a0f      	ldr	r2, [pc, #60]	; (80062a0 <xTaskIncrementTick+0x170>)
 8006262:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006264:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <xTaskIncrementTick+0x174>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800626c:	2301      	movs	r3, #1
 800626e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006270:	697b      	ldr	r3, [r7, #20]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20001444 	.word	0x20001444
 8006280:	20001420 	.word	0x20001420
 8006284:	200013d4 	.word	0x200013d4
 8006288:	200013d8 	.word	0x200013d8
 800628c:	20001434 	.word	0x20001434
 8006290:	2000143c 	.word	0x2000143c
 8006294:	20001424 	.word	0x20001424
 8006298:	20000f4c 	.word	0x20000f4c
 800629c:	20000f48 	.word	0x20000f48
 80062a0:	2000142c 	.word	0x2000142c
 80062a4:	20001430 	.word	0x20001430

080062a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062ae:	4b29      	ldr	r3, [pc, #164]	; (8006354 <vTaskSwitchContext+0xac>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062b6:	4b28      	ldr	r3, [pc, #160]	; (8006358 <vTaskSwitchContext+0xb0>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062bc:	e043      	b.n	8006346 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80062be:	4b26      	ldr	r3, [pc, #152]	; (8006358 <vTaskSwitchContext+0xb0>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c4:	4b25      	ldr	r3, [pc, #148]	; (800635c <vTaskSwitchContext+0xb4>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	e012      	b.n	80062f2 <vTaskSwitchContext+0x4a>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10c      	bne.n	80062ec <vTaskSwitchContext+0x44>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	b672      	cpsid	i
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	b662      	cpsie	i
 80062e6:	607b      	str	r3, [r7, #4]
}
 80062e8:	bf00      	nop
 80062ea:	e7fe      	b.n	80062ea <vTaskSwitchContext+0x42>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	491b      	ldr	r1, [pc, #108]	; (8006360 <vTaskSwitchContext+0xb8>)
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	440b      	add	r3, r1
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0e2      	beq.n	80062cc <vTaskSwitchContext+0x24>
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4a13      	ldr	r2, [pc, #76]	; (8006360 <vTaskSwitchContext+0xb8>)
 8006312:	4413      	add	r3, r2
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	605a      	str	r2, [r3, #4]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	3308      	adds	r3, #8
 8006328:	429a      	cmp	r2, r3
 800632a:	d104      	bne.n	8006336 <vTaskSwitchContext+0x8e>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	605a      	str	r2, [r3, #4]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	4a09      	ldr	r2, [pc, #36]	; (8006364 <vTaskSwitchContext+0xbc>)
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	4a06      	ldr	r2, [pc, #24]	; (800635c <vTaskSwitchContext+0xb4>)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6013      	str	r3, [r2, #0]
}
 8006346:	bf00      	nop
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	20001444 	.word	0x20001444
 8006358:	20001430 	.word	0x20001430
 800635c:	20001424 	.word	0x20001424
 8006360:	20000f4c 	.word	0x20000f4c
 8006364:	20000f48 	.word	0x20000f48

08006368 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10c      	bne.n	8006392 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	b672      	cpsid	i
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	b662      	cpsie	i
 800638c:	60fb      	str	r3, [r7, #12]
}
 800638e:	bf00      	nop
 8006390:	e7fe      	b.n	8006390 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006392:	4b07      	ldr	r3, [pc, #28]	; (80063b0 <vTaskPlaceOnEventList+0x48>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3318      	adds	r3, #24
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fe fc23 	bl	8004be6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063a0:	2101      	movs	r1, #1
 80063a2:	6838      	ldr	r0, [r7, #0]
 80063a4:	f000 fb8c 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>
}
 80063a8:	bf00      	nop
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	20000f48 	.word	0x20000f48

080063b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10c      	bne.n	80063e0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	b672      	cpsid	i
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	b662      	cpsie	i
 80063da:	617b      	str	r3, [r7, #20]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063e0:	4b0a      	ldr	r3, [pc, #40]	; (800640c <vTaskPlaceOnEventListRestricted+0x58>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3318      	adds	r3, #24
 80063e6:	4619      	mov	r1, r3
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f7fe fbd8 	bl	8004b9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80063f4:	f04f 33ff 	mov.w	r3, #4294967295
 80063f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	68b8      	ldr	r0, [r7, #8]
 80063fe:	f000 fb5f 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>
	}
 8006402:	bf00      	nop
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000f48 	.word	0x20000f48

08006410 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10c      	bne.n	8006440 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	b672      	cpsid	i
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	b662      	cpsie	i
 800643a:	60fb      	str	r3, [r7, #12]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	3318      	adds	r3, #24
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe fc07 	bl	8004c58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800644a:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <xTaskRemoveFromEventList+0xb4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d11d      	bne.n	800648e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	3304      	adds	r3, #4
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe fbfe 	bl	8004c58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006460:	4b19      	ldr	r3, [pc, #100]	; (80064c8 <xTaskRemoveFromEventList+0xb8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	429a      	cmp	r2, r3
 8006466:	d903      	bls.n	8006470 <xTaskRemoveFromEventList+0x60>
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	4a16      	ldr	r2, [pc, #88]	; (80064c8 <xTaskRemoveFromEventList+0xb8>)
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006474:	4613      	mov	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4a13      	ldr	r2, [pc, #76]	; (80064cc <xTaskRemoveFromEventList+0xbc>)
 800647e:	441a      	add	r2, r3
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	3304      	adds	r3, #4
 8006484:	4619      	mov	r1, r3
 8006486:	4610      	mov	r0, r2
 8006488:	f7fe fb89 	bl	8004b9e <vListInsertEnd>
 800648c:	e005      	b.n	800649a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	3318      	adds	r3, #24
 8006492:	4619      	mov	r1, r3
 8006494:	480e      	ldr	r0, [pc, #56]	; (80064d0 <xTaskRemoveFromEventList+0xc0>)
 8006496:	f7fe fb82 	bl	8004b9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649e:	4b0d      	ldr	r3, [pc, #52]	; (80064d4 <xTaskRemoveFromEventList+0xc4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d905      	bls.n	80064b4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064a8:	2301      	movs	r3, #1
 80064aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064ac:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <xTaskRemoveFromEventList+0xc8>)
 80064ae:	2201      	movs	r2, #1
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	e001      	b.n	80064b8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80064b8:	697b      	ldr	r3, [r7, #20]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20001444 	.word	0x20001444
 80064c8:	20001424 	.word	0x20001424
 80064cc:	20000f4c 	.word	0x20000f4c
 80064d0:	200013dc 	.word	0x200013dc
 80064d4:	20000f48 	.word	0x20000f48
 80064d8:	20001430 	.word	0x20001430

080064dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064e4:	4b06      	ldr	r3, [pc, #24]	; (8006500 <vTaskInternalSetTimeOutState+0x24>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064ec:	4b05      	ldr	r3, [pc, #20]	; (8006504 <vTaskInternalSetTimeOutState+0x28>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	605a      	str	r2, [r3, #4]
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	20001434 	.word	0x20001434
 8006504:	20001420 	.word	0x20001420

08006508 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10c      	bne.n	8006532 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	b672      	cpsid	i
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	b662      	cpsie	i
 800652c:	613b      	str	r3, [r7, #16]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10c      	bne.n	8006552 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	b672      	cpsid	i
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	b662      	cpsie	i
 800654c:	60fb      	str	r3, [r7, #12]
}
 800654e:	bf00      	nop
 8006550:	e7fe      	b.n	8006550 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006552:	f001 f833 	bl	80075bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006556:	4b1d      	ldr	r3, [pc, #116]	; (80065cc <xTaskCheckForTimeOut+0xc4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d102      	bne.n	8006576 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006570:	2300      	movs	r3, #0
 8006572:	61fb      	str	r3, [r7, #28]
 8006574:	e023      	b.n	80065be <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <xTaskCheckForTimeOut+0xc8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d007      	beq.n	8006592 <xTaskCheckForTimeOut+0x8a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	429a      	cmp	r2, r3
 800658a:	d302      	bcc.n	8006592 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800658c:	2301      	movs	r3, #1
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	e015      	b.n	80065be <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	429a      	cmp	r2, r3
 800659a:	d20b      	bcs.n	80065b4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	1ad2      	subs	r2, r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff ff97 	bl	80064dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	e004      	b.n	80065be <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065ba:	2301      	movs	r3, #1
 80065bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065be:	f001 f831 	bl	8007624 <vPortExitCritical>

	return xReturn;
 80065c2:	69fb      	ldr	r3, [r7, #28]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3720      	adds	r7, #32
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20001420 	.word	0x20001420
 80065d0:	20001434 	.word	0x20001434

080065d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065d8:	4b03      	ldr	r3, [pc, #12]	; (80065e8 <vTaskMissedYield+0x14>)
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]
}
 80065de:	bf00      	nop
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	20001430 	.word	0x20001430

080065ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065f4:	f000 f852 	bl	800669c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065f8:	4b06      	ldr	r3, [pc, #24]	; (8006614 <prvIdleTask+0x28>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d9f9      	bls.n	80065f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006600:	4b05      	ldr	r3, [pc, #20]	; (8006618 <prvIdleTask+0x2c>)
 8006602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006610:	e7f0      	b.n	80065f4 <prvIdleTask+0x8>
 8006612:	bf00      	nop
 8006614:	20000f4c 	.word	0x20000f4c
 8006618:	e000ed04 	.word	0xe000ed04

0800661c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
 8006626:	e00c      	b.n	8006642 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4a12      	ldr	r2, [pc, #72]	; (800667c <prvInitialiseTaskLists+0x60>)
 8006634:	4413      	add	r3, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe fa84 	bl	8004b44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3301      	adds	r3, #1
 8006640:	607b      	str	r3, [r7, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b37      	cmp	r3, #55	; 0x37
 8006646:	d9ef      	bls.n	8006628 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006648:	480d      	ldr	r0, [pc, #52]	; (8006680 <prvInitialiseTaskLists+0x64>)
 800664a:	f7fe fa7b 	bl	8004b44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800664e:	480d      	ldr	r0, [pc, #52]	; (8006684 <prvInitialiseTaskLists+0x68>)
 8006650:	f7fe fa78 	bl	8004b44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006654:	480c      	ldr	r0, [pc, #48]	; (8006688 <prvInitialiseTaskLists+0x6c>)
 8006656:	f7fe fa75 	bl	8004b44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800665a:	480c      	ldr	r0, [pc, #48]	; (800668c <prvInitialiseTaskLists+0x70>)
 800665c:	f7fe fa72 	bl	8004b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006660:	480b      	ldr	r0, [pc, #44]	; (8006690 <prvInitialiseTaskLists+0x74>)
 8006662:	f7fe fa6f 	bl	8004b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006666:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <prvInitialiseTaskLists+0x78>)
 8006668:	4a05      	ldr	r2, [pc, #20]	; (8006680 <prvInitialiseTaskLists+0x64>)
 800666a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800666c:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <prvInitialiseTaskLists+0x7c>)
 800666e:	4a05      	ldr	r2, [pc, #20]	; (8006684 <prvInitialiseTaskLists+0x68>)
 8006670:	601a      	str	r2, [r3, #0]
}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000f4c 	.word	0x20000f4c
 8006680:	200013ac 	.word	0x200013ac
 8006684:	200013c0 	.word	0x200013c0
 8006688:	200013dc 	.word	0x200013dc
 800668c:	200013f0 	.word	0x200013f0
 8006690:	20001408 	.word	0x20001408
 8006694:	200013d4 	.word	0x200013d4
 8006698:	200013d8 	.word	0x200013d8

0800669c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066a2:	e019      	b.n	80066d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066a4:	f000 ff8a 	bl	80075bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a8:	4b10      	ldr	r3, [pc, #64]	; (80066ec <prvCheckTasksWaitingTermination+0x50>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fe facf 	bl	8004c58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066ba:	4b0d      	ldr	r3, [pc, #52]	; (80066f0 <prvCheckTasksWaitingTermination+0x54>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3b01      	subs	r3, #1
 80066c0:	4a0b      	ldr	r2, [pc, #44]	; (80066f0 <prvCheckTasksWaitingTermination+0x54>)
 80066c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066c4:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <prvCheckTasksWaitingTermination+0x58>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3b01      	subs	r3, #1
 80066ca:	4a0a      	ldr	r2, [pc, #40]	; (80066f4 <prvCheckTasksWaitingTermination+0x58>)
 80066cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066ce:	f000 ffa9 	bl	8007624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f810 	bl	80066f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066d8:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <prvCheckTasksWaitingTermination+0x58>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e1      	bne.n	80066a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	200013f0 	.word	0x200013f0
 80066f0:	2000141c 	.word	0x2000141c
 80066f4:	20001404 	.word	0x20001404

080066f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006706:	2b00      	cmp	r3, #0
 8006708:	d108      	bne.n	800671c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	4618      	mov	r0, r3
 8006710:	f001 f94a 	bl	80079a8 <vPortFree>
				vPortFree( pxTCB );
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 f947 	bl	80079a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800671a:	e01a      	b.n	8006752 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006722:	2b01      	cmp	r3, #1
 8006724:	d103      	bne.n	800672e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 f93e 	bl	80079a8 <vPortFree>
	}
 800672c:	e011      	b.n	8006752 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006734:	2b02      	cmp	r3, #2
 8006736:	d00c      	beq.n	8006752 <prvDeleteTCB+0x5a>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	b672      	cpsid	i
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	b662      	cpsie	i
 800674c:	60fb      	str	r3, [r7, #12]
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <prvDeleteTCB+0x58>
	}
 8006752:	bf00      	nop
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006762:	4b0c      	ldr	r3, [pc, #48]	; (8006794 <prvResetNextTaskUnblockTime+0x38>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d104      	bne.n	8006776 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <prvResetNextTaskUnblockTime+0x3c>)
 800676e:	f04f 32ff 	mov.w	r2, #4294967295
 8006772:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006774:	e008      	b.n	8006788 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006776:	4b07      	ldr	r3, [pc, #28]	; (8006794 <prvResetNextTaskUnblockTime+0x38>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	4a04      	ldr	r2, [pc, #16]	; (8006798 <prvResetNextTaskUnblockTime+0x3c>)
 8006786:	6013      	str	r3, [r2, #0]
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	200013d4 	.word	0x200013d4
 8006798:	2000143c 	.word	0x2000143c

0800679c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067a2:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <xTaskGetSchedulerState+0x34>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d102      	bne.n	80067b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067aa:	2301      	movs	r3, #1
 80067ac:	607b      	str	r3, [r7, #4]
 80067ae:	e008      	b.n	80067c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067b0:	4b08      	ldr	r3, [pc, #32]	; (80067d4 <xTaskGetSchedulerState+0x38>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d102      	bne.n	80067be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067b8:	2302      	movs	r3, #2
 80067ba:	607b      	str	r3, [r7, #4]
 80067bc:	e001      	b.n	80067c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067be:	2300      	movs	r3, #0
 80067c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067c2:	687b      	ldr	r3, [r7, #4]
	}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	20001428 	.word	0x20001428
 80067d4:	20001444 	.word	0x20001444

080067d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d051      	beq.n	8006892 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f2:	4b2a      	ldr	r3, [pc, #168]	; (800689c <xTaskPriorityInherit+0xc4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d241      	bcs.n	8006880 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	2b00      	cmp	r3, #0
 8006802:	db06      	blt.n	8006812 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006804:	4b25      	ldr	r3, [pc, #148]	; (800689c <xTaskPriorityInherit+0xc4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	6959      	ldr	r1, [r3, #20]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <xTaskPriorityInherit+0xc8>)
 8006824:	4413      	add	r3, r2
 8006826:	4299      	cmp	r1, r3
 8006828:	d122      	bne.n	8006870 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	3304      	adds	r3, #4
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fa12 	bl	8004c58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006834:	4b19      	ldr	r3, [pc, #100]	; (800689c <xTaskPriorityInherit+0xc4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006842:	4b18      	ldr	r3, [pc, #96]	; (80068a4 <xTaskPriorityInherit+0xcc>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d903      	bls.n	8006852 <xTaskPriorityInherit+0x7a>
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	4a15      	ldr	r2, [pc, #84]	; (80068a4 <xTaskPriorityInherit+0xcc>)
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006856:	4613      	mov	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4a10      	ldr	r2, [pc, #64]	; (80068a0 <xTaskPriorityInherit+0xc8>)
 8006860:	441a      	add	r2, r3
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	3304      	adds	r3, #4
 8006866:	4619      	mov	r1, r3
 8006868:	4610      	mov	r0, r2
 800686a:	f7fe f998 	bl	8004b9e <vListInsertEnd>
 800686e:	e004      	b.n	800687a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <xTaskPriorityInherit+0xc4>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800687a:	2301      	movs	r3, #1
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	e008      	b.n	8006892 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006884:	4b05      	ldr	r3, [pc, #20]	; (800689c <xTaskPriorityInherit+0xc4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688a:	429a      	cmp	r2, r3
 800688c:	d201      	bcs.n	8006892 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800688e:	2301      	movs	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006892:	68fb      	ldr	r3, [r7, #12]
	}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	20000f48 	.word	0x20000f48
 80068a0:	20000f4c 	.word	0x20000f4c
 80068a4:	20001424 	.word	0x20001424

080068a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d05a      	beq.n	8006974 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068be:	4b30      	ldr	r3, [pc, #192]	; (8006980 <xTaskPriorityDisinherit+0xd8>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d00c      	beq.n	80068e2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	b672      	cpsid	i
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	b662      	cpsie	i
 80068dc:	60fb      	str	r3, [r7, #12]
}
 80068de:	bf00      	nop
 80068e0:	e7fe      	b.n	80068e0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10c      	bne.n	8006904 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	b672      	cpsid	i
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	b662      	cpsie	i
 80068fe:	60bb      	str	r3, [r7, #8]
}
 8006900:	bf00      	nop
 8006902:	e7fe      	b.n	8006902 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006908:	1e5a      	subs	r2, r3, #1
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006916:	429a      	cmp	r2, r3
 8006918:	d02c      	beq.n	8006974 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691e:	2b00      	cmp	r3, #0
 8006920:	d128      	bne.n	8006974 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	3304      	adds	r3, #4
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe f996 	bl	8004c58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006944:	4b0f      	ldr	r3, [pc, #60]	; (8006984 <xTaskPriorityDisinherit+0xdc>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d903      	bls.n	8006954 <xTaskPriorityDisinherit+0xac>
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006950:	4a0c      	ldr	r2, [pc, #48]	; (8006984 <xTaskPriorityDisinherit+0xdc>)
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4a09      	ldr	r2, [pc, #36]	; (8006988 <xTaskPriorityDisinherit+0xe0>)
 8006962:	441a      	add	r2, r3
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	3304      	adds	r3, #4
 8006968:	4619      	mov	r1, r3
 800696a:	4610      	mov	r0, r2
 800696c:	f7fe f917 	bl	8004b9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006970:	2301      	movs	r3, #1
 8006972:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006974:	697b      	ldr	r3, [r7, #20]
	}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20000f48 	.word	0x20000f48
 8006984:	20001424 	.word	0x20001424
 8006988:	20000f4c 	.word	0x20000f4c

0800698c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b088      	sub	sp, #32
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800699a:	2301      	movs	r3, #1
 800699c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d06e      	beq.n	8006a82 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10c      	bne.n	80069c6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	b672      	cpsid	i
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	b662      	cpsie	i
 80069c0:	60fb      	str	r3, [r7, #12]
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d902      	bls.n	80069d6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	61fb      	str	r3, [r7, #28]
 80069d4:	e002      	b.n	80069dc <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d04d      	beq.n	8006a82 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d148      	bne.n	8006a82 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80069f0:	4b26      	ldr	r3, [pc, #152]	; (8006a8c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d10c      	bne.n	8006a14 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	b672      	cpsid	i
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	b662      	cpsie	i
 8006a0e:	60bb      	str	r3, [r7, #8]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	69fa      	ldr	r2, [r7, #28]
 8006a1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	db04      	blt.n	8006a32 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	6959      	ldr	r1, [r3, #20]
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4a13      	ldr	r2, [pc, #76]	; (8006a90 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006a42:	4413      	add	r3, r2
 8006a44:	4299      	cmp	r1, r3
 8006a46:	d11c      	bne.n	8006a82 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fe f903 	bl	8004c58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a56:	4b0f      	ldr	r3, [pc, #60]	; (8006a94 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d903      	bls.n	8006a66 <vTaskPriorityDisinheritAfterTimeout+0xda>
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	4a0c      	ldr	r2, [pc, #48]	; (8006a94 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4a07      	ldr	r2, [pc, #28]	; (8006a90 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006a74:	441a      	add	r2, r3
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	f7fe f88e 	bl	8004b9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a82:	bf00      	nop
 8006a84:	3720      	adds	r7, #32
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000f48 	.word	0x20000f48
 8006a90:	20000f4c 	.word	0x20000f4c
 8006a94:	20001424 	.word	0x20001424

08006a98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a9c:	4b07      	ldr	r3, [pc, #28]	; (8006abc <pvTaskIncrementMutexHeldCount+0x24>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d004      	beq.n	8006aae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006aa4:	4b05      	ldr	r3, [pc, #20]	; (8006abc <pvTaskIncrementMutexHeldCount+0x24>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006aaa:	3201      	adds	r2, #1
 8006aac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006aae:	4b03      	ldr	r3, [pc, #12]	; (8006abc <pvTaskIncrementMutexHeldCount+0x24>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
	}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	20000f48 	.word	0x20000f48

08006ac0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006aca:	4b21      	ldr	r3, [pc, #132]	; (8006b50 <prvAddCurrentTaskToDelayedList+0x90>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ad0:	4b20      	ldr	r3, [pc, #128]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe f8be 	bl	8004c58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae2:	d10a      	bne.n	8006afa <prvAddCurrentTaskToDelayedList+0x3a>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aea:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4619      	mov	r1, r3
 8006af2:	4819      	ldr	r0, [pc, #100]	; (8006b58 <prvAddCurrentTaskToDelayedList+0x98>)
 8006af4:	f7fe f853 	bl	8004b9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006af8:	e026      	b.n	8006b48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4413      	add	r3, r2
 8006b00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b02:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d209      	bcs.n	8006b26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b12:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	f7fe f861 	bl	8004be6 <vListInsert>
}
 8006b24:	e010      	b.n	8006b48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b26:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4619      	mov	r1, r3
 8006b32:	4610      	mov	r0, r2
 8006b34:	f7fe f857 	bl	8004be6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b38:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d202      	bcs.n	8006b48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b42:	4a08      	ldr	r2, [pc, #32]	; (8006b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	6013      	str	r3, [r2, #0]
}
 8006b48:	bf00      	nop
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20001420 	.word	0x20001420
 8006b54:	20000f48 	.word	0x20000f48
 8006b58:	20001408 	.word	0x20001408
 8006b5c:	200013d8 	.word	0x200013d8
 8006b60:	200013d4 	.word	0x200013d4
 8006b64:	2000143c 	.word	0x2000143c

08006b68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08a      	sub	sp, #40	; 0x28
 8006b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b72:	f000 fbb5 	bl	80072e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b76:	4b1d      	ldr	r3, [pc, #116]	; (8006bec <xTimerCreateTimerTask+0x84>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d021      	beq.n	8006bc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b86:	1d3a      	adds	r2, r7, #4
 8006b88:	f107 0108 	add.w	r1, r7, #8
 8006b8c:	f107 030c 	add.w	r3, r7, #12
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fd ffbd 	bl	8004b10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	9202      	str	r2, [sp, #8]
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	460a      	mov	r2, r1
 8006ba8:	4911      	ldr	r1, [pc, #68]	; (8006bf0 <xTimerCreateTimerTask+0x88>)
 8006baa:	4812      	ldr	r0, [pc, #72]	; (8006bf4 <xTimerCreateTimerTask+0x8c>)
 8006bac:	f7fe ffb8 	bl	8005b20 <xTaskCreateStatic>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	4a11      	ldr	r2, [pc, #68]	; (8006bf8 <xTimerCreateTimerTask+0x90>)
 8006bb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bb6:	4b10      	ldr	r3, [pc, #64]	; (8006bf8 <xTimerCreateTimerTask+0x90>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10c      	bne.n	8006be2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	b672      	cpsid	i
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	b662      	cpsie	i
 8006bdc:	613b      	str	r3, [r7, #16]
}
 8006bde:	bf00      	nop
 8006be0:	e7fe      	b.n	8006be0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006be2:	697b      	ldr	r3, [r7, #20]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	20001478 	.word	0x20001478
 8006bf0:	08007c9c 	.word	0x08007c9c
 8006bf4:	08006e79 	.word	0x08006e79
 8006bf8:	2000147c 	.word	0x2000147c

08006bfc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af02      	add	r7, sp, #8
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006c0a:	202c      	movs	r0, #44	; 0x2c
 8006c0c:	f000 fe02 	bl	8007814 <pvPortMalloc>
 8006c10:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00d      	beq.n	8006c34 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	9301      	str	r3, [sp, #4]
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f847 	bl	8006cc2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006c34:	697b      	ldr	r3, [r7, #20]
	}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b08a      	sub	sp, #40	; 0x28
 8006c42:	af02      	add	r7, sp, #8
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	607a      	str	r2, [r7, #4]
 8006c4a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006c4c:	232c      	movs	r3, #44	; 0x2c
 8006c4e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	2b2c      	cmp	r3, #44	; 0x2c
 8006c54:	d00c      	beq.n	8006c70 <xTimerCreateStatic+0x32>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	b672      	cpsid	i
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	b662      	cpsie	i
 8006c6a:	61bb      	str	r3, [r7, #24]
}
 8006c6c:	bf00      	nop
 8006c6e:	e7fe      	b.n	8006c6e <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10c      	bne.n	8006c92 <xTimerCreateStatic+0x54>
	__asm volatile
 8006c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7c:	b672      	cpsid	i
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	b662      	cpsie	i
 8006c8c:	617b      	str	r3, [r7, #20]
}
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00d      	beq.n	8006cb8 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	68b9      	ldr	r1, [r7, #8]
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 f805 	bl	8006cc2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006cb8:	69fb      	ldr	r3, [r7, #28]
	}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b086      	sub	sp, #24
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	607a      	str	r2, [r7, #4]
 8006cce:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10c      	bne.n	8006cf0 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	b672      	cpsid	i
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	b662      	cpsie	i
 8006cea:	617b      	str	r3, [r7, #20]
}
 8006cec:	bf00      	nop
 8006cee:	e7fe      	b.n	8006cee <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d01e      	beq.n	8006d34 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006cf6:	f000 faf3 	bl	80072e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	6a3a      	ldr	r2, [r7, #32]
 8006d10:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	3304      	adds	r3, #4
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fd ff34 	bl	8004b84 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d008      	beq.n	8006d34 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d28:	f043 0304 	orr.w	r3, r3, #4
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006d34:	bf00      	nop
 8006d36:	3718      	adds	r7, #24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08a      	sub	sp, #40	; 0x28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10c      	bne.n	8006d6e <xTimerGenericCommand+0x32>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	b672      	cpsid	i
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	b662      	cpsie	i
 8006d68:	623b      	str	r3, [r7, #32]
}
 8006d6a:	bf00      	nop
 8006d6c:	e7fe      	b.n	8006d6c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d6e:	4b1a      	ldr	r3, [pc, #104]	; (8006dd8 <xTimerGenericCommand+0x9c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d02a      	beq.n	8006dcc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b05      	cmp	r3, #5
 8006d86:	dc18      	bgt.n	8006dba <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d88:	f7ff fd08 	bl	800679c <xTaskGetSchedulerState>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d109      	bne.n	8006da6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d92:	4b11      	ldr	r3, [pc, #68]	; (8006dd8 <xTimerGenericCommand+0x9c>)
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	f107 0110 	add.w	r1, r7, #16
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9e:	f7fe f949 	bl	8005034 <xQueueGenericSend>
 8006da2:	6278      	str	r0, [r7, #36]	; 0x24
 8006da4:	e012      	b.n	8006dcc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006da6:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <xTimerGenericCommand+0x9c>)
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	f107 0110 	add.w	r1, r7, #16
 8006dae:	2300      	movs	r3, #0
 8006db0:	2200      	movs	r2, #0
 8006db2:	f7fe f93f 	bl	8005034 <xQueueGenericSend>
 8006db6:	6278      	str	r0, [r7, #36]	; 0x24
 8006db8:	e008      	b.n	8006dcc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006dba:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <xTimerGenericCommand+0x9c>)
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	f107 0110 	add.w	r1, r7, #16
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	f7fe fa3b 	bl	8005240 <xQueueGenericSendFromISR>
 8006dca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3728      	adds	r7, #40	; 0x28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20001478 	.word	0x20001478

08006ddc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af02      	add	r7, sp, #8
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de6:	4b23      	ldr	r3, [pc, #140]	; (8006e74 <prvProcessExpiredTimer+0x98>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fd ff2f 	bl	8004c58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d024      	beq.n	8006e52 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	699a      	ldr	r2, [r3, #24]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	18d1      	adds	r1, r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	6978      	ldr	r0, [r7, #20]
 8006e16:	f000 f8d3 	bl	8006fc0 <prvInsertTimerInActiveList>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d021      	beq.n	8006e64 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e20:	2300      	movs	r3, #0
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	2300      	movs	r3, #0
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	2100      	movs	r1, #0
 8006e2a:	6978      	ldr	r0, [r7, #20]
 8006e2c:	f7ff ff86 	bl	8006d3c <xTimerGenericCommand>
 8006e30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d115      	bne.n	8006e64 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	b672      	cpsid	i
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	b662      	cpsie	i
 8006e4c:	60fb      	str	r3, [r7, #12]
}
 8006e4e:	bf00      	nop
 8006e50:	e7fe      	b.n	8006e50 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e58:	f023 0301 	bic.w	r3, r3, #1
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	6978      	ldr	r0, [r7, #20]
 8006e6a:	4798      	blx	r3
}
 8006e6c:	bf00      	nop
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	20001470 	.word	0x20001470

08006e78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e80:	f107 0308 	add.w	r3, r7, #8
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 f857 	bl	8006f38 <prvGetNextExpireTime>
 8006e8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 f803 	bl	8006e9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e96:	f000 f8d5 	bl	8007044 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e9a:	e7f1      	b.n	8006e80 <prvTimerTask+0x8>

08006e9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ea6:	f7ff f885 	bl	8005fb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006eaa:	f107 0308 	add.w	r3, r7, #8
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 f866 	bl	8006f80 <prvSampleTimeNow>
 8006eb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d130      	bne.n	8006f1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10a      	bne.n	8006ed8 <prvProcessTimerOrBlockTask+0x3c>
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d806      	bhi.n	8006ed8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006eca:	f7ff f881 	bl	8005fd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006ece:	68f9      	ldr	r1, [r7, #12]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff ff83 	bl	8006ddc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ed6:	e024      	b.n	8006f22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d008      	beq.n	8006ef0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ede:	4b13      	ldr	r3, [pc, #76]	; (8006f2c <prvProcessTimerOrBlockTask+0x90>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <prvProcessTimerOrBlockTask+0x50>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <prvProcessTimerOrBlockTask+0x52>
 8006eec:	2300      	movs	r3, #0
 8006eee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ef0:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <prvProcessTimerOrBlockTask+0x94>)
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	4619      	mov	r1, r3
 8006efe:	f7fe fddb 	bl	8005ab8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f02:	f7ff f865 	bl	8005fd0 <xTaskResumeAll>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f0c:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <prvProcessTimerOrBlockTask+0x98>)
 8006f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	f3bf 8f6f 	isb	sy
}
 8006f1c:	e001      	b.n	8006f22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f1e:	f7ff f857 	bl	8005fd0 <xTaskResumeAll>
}
 8006f22:	bf00      	nop
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20001474 	.word	0x20001474
 8006f30:	20001478 	.word	0x20001478
 8006f34:	e000ed04 	.word	0xe000ed04

08006f38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f40:	4b0e      	ldr	r3, [pc, #56]	; (8006f7c <prvGetNextExpireTime+0x44>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <prvGetNextExpireTime+0x16>
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	e000      	b.n	8006f50 <prvGetNextExpireTime+0x18>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d105      	bne.n	8006f68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f5c:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <prvGetNextExpireTime+0x44>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	e001      	b.n	8006f6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	20001470 	.word	0x20001470

08006f80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f88:	f7ff f8c2 	bl	8006110 <xTaskGetTickCount>
 8006f8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f8e:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <prvSampleTimeNow+0x3c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d205      	bcs.n	8006fa4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f98:	f000 f93c 	bl	8007214 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	e002      	b.n	8006faa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006faa:	4a04      	ldr	r2, [pc, #16]	; (8006fbc <prvSampleTimeNow+0x3c>)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20001480 	.word	0x20001480

08006fc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d812      	bhi.n	800700c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	1ad2      	subs	r2, r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d302      	bcc.n	8006ffa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	e01b      	b.n	8007032 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ffa:	4b10      	ldr	r3, [pc, #64]	; (800703c <prvInsertTimerInActiveList+0x7c>)
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3304      	adds	r3, #4
 8007002:	4619      	mov	r1, r3
 8007004:	4610      	mov	r0, r2
 8007006:	f7fd fdee 	bl	8004be6 <vListInsert>
 800700a:	e012      	b.n	8007032 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d206      	bcs.n	8007022 <prvInsertTimerInActiveList+0x62>
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	429a      	cmp	r2, r3
 800701a:	d302      	bcc.n	8007022 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800701c:	2301      	movs	r3, #1
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	e007      	b.n	8007032 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007022:	4b07      	ldr	r3, [pc, #28]	; (8007040 <prvInsertTimerInActiveList+0x80>)
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3304      	adds	r3, #4
 800702a:	4619      	mov	r1, r3
 800702c:	4610      	mov	r0, r2
 800702e:	f7fd fdda 	bl	8004be6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007032:	697b      	ldr	r3, [r7, #20]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	20001474 	.word	0x20001474
 8007040:	20001470 	.word	0x20001470

08007044 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b08e      	sub	sp, #56	; 0x38
 8007048:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800704a:	e0d0      	b.n	80071ee <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	da1a      	bge.n	8007088 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007052:	1d3b      	adds	r3, r7, #4
 8007054:	3304      	adds	r3, #4
 8007056:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10c      	bne.n	8007078 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	b672      	cpsid	i
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	b662      	cpsie	i
 8007072:	61fb      	str	r3, [r7, #28]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800707e:	6850      	ldr	r0, [r2, #4]
 8007080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007082:	6892      	ldr	r2, [r2, #8]
 8007084:	4611      	mov	r1, r2
 8007086:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f2c0 80ae 	blt.w	80071ec <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	3304      	adds	r3, #4
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fd fdd9 	bl	8004c58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070a6:	463b      	mov	r3, r7
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff ff69 	bl	8006f80 <prvSampleTimeNow>
 80070ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b09      	cmp	r3, #9
 80070b4:	f200 809b 	bhi.w	80071ee <prvProcessReceivedCommands+0x1aa>
 80070b8:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <prvProcessReceivedCommands+0x7c>)
 80070ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070be:	bf00      	nop
 80070c0:	080070e9 	.word	0x080070e9
 80070c4:	080070e9 	.word	0x080070e9
 80070c8:	080070e9 	.word	0x080070e9
 80070cc:	08007161 	.word	0x08007161
 80070d0:	08007175 	.word	0x08007175
 80070d4:	080071c3 	.word	0x080071c3
 80070d8:	080070e9 	.word	0x080070e9
 80070dc:	080070e9 	.word	0x080070e9
 80070e0:	08007161 	.word	0x08007161
 80070e4:	08007175 	.word	0x08007175
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ee:	f043 0301 	orr.w	r3, r3, #1
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	18d1      	adds	r1, r2, r3
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007108:	f7ff ff5a 	bl	8006fc0 <prvInsertTimerInActiveList>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d06d      	beq.n	80071ee <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007118:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b00      	cmp	r3, #0
 8007126:	d062      	beq.n	80071ee <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	441a      	add	r2, r3
 8007130:	2300      	movs	r3, #0
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	2300      	movs	r3, #0
 8007136:	2100      	movs	r1, #0
 8007138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800713a:	f7ff fdff 	bl	8006d3c <xTimerGenericCommand>
 800713e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d153      	bne.n	80071ee <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	b672      	cpsid	i
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	b662      	cpsie	i
 800715a:	61bb      	str	r3, [r7, #24]
}
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007166:	f023 0301 	bic.w	r3, r3, #1
 800716a:	b2da      	uxtb	r2, r3
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007172:	e03c      	b.n	80071ee <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800717a:	f043 0301 	orr.w	r3, r3, #1
 800717e:	b2da      	uxtb	r2, r3
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10c      	bne.n	80071ae <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	b672      	cpsid	i
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	b662      	cpsie	i
 80071a8:	617b      	str	r3, [r7, #20]
}
 80071aa:	bf00      	nop
 80071ac:	e7fe      	b.n	80071ac <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	699a      	ldr	r2, [r3, #24]
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	18d1      	adds	r1, r2, r3
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071bc:	f7ff ff00 	bl	8006fc0 <prvInsertTimerInActiveList>
					break;
 80071c0:	e015      	b.n	80071ee <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80071c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d103      	bne.n	80071d8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80071d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d2:	f000 fbe9 	bl	80079a8 <vPortFree>
 80071d6:	e00a      	b.n	80071ee <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071de:	f023 0301 	bic.w	r3, r3, #1
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071ea:	e000      	b.n	80071ee <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80071ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071ee:	4b08      	ldr	r3, [pc, #32]	; (8007210 <prvProcessReceivedCommands+0x1cc>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	1d39      	adds	r1, r7, #4
 80071f4:	2200      	movs	r2, #0
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe f8c2 	bl	8005380 <xQueueReceive>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f47f af24 	bne.w	800704c <prvProcessReceivedCommands+0x8>
	}
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	3730      	adds	r7, #48	; 0x30
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20001478 	.word	0x20001478

08007214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800721a:	e04a      	b.n	80072b2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800721c:	4b2e      	ldr	r3, [pc, #184]	; (80072d8 <prvSwitchTimerLists+0xc4>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007226:	4b2c      	ldr	r3, [pc, #176]	; (80072d8 <prvSwitchTimerLists+0xc4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3304      	adds	r3, #4
 8007234:	4618      	mov	r0, r3
 8007236:	f7fd fd0f 	bl	8004c58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	d030      	beq.n	80072b2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4413      	add	r3, r2
 8007258:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	429a      	cmp	r2, r3
 8007260:	d90e      	bls.n	8007280 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800726e:	4b1a      	ldr	r3, [pc, #104]	; (80072d8 <prvSwitchTimerLists+0xc4>)
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3304      	adds	r3, #4
 8007276:	4619      	mov	r1, r3
 8007278:	4610      	mov	r0, r2
 800727a:	f7fd fcb4 	bl	8004be6 <vListInsert>
 800727e:	e018      	b.n	80072b2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007280:	2300      	movs	r3, #0
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	2300      	movs	r3, #0
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	2100      	movs	r1, #0
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f7ff fd56 	bl	8006d3c <xTimerGenericCommand>
 8007290:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10c      	bne.n	80072b2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	b672      	cpsid	i
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	b662      	cpsie	i
 80072ac:	603b      	str	r3, [r7, #0]
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072b2:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <prvSwitchTimerLists+0xc4>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1af      	bne.n	800721c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072bc:	4b06      	ldr	r3, [pc, #24]	; (80072d8 <prvSwitchTimerLists+0xc4>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072c2:	4b06      	ldr	r3, [pc, #24]	; (80072dc <prvSwitchTimerLists+0xc8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a04      	ldr	r2, [pc, #16]	; (80072d8 <prvSwitchTimerLists+0xc4>)
 80072c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072ca:	4a04      	ldr	r2, [pc, #16]	; (80072dc <prvSwitchTimerLists+0xc8>)
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	6013      	str	r3, [r2, #0]
}
 80072d0:	bf00      	nop
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	20001470 	.word	0x20001470
 80072dc:	20001474 	.word	0x20001474

080072e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072e6:	f000 f969 	bl	80075bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072ea:	4b15      	ldr	r3, [pc, #84]	; (8007340 <prvCheckForValidListAndQueue+0x60>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d120      	bne.n	8007334 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072f2:	4814      	ldr	r0, [pc, #80]	; (8007344 <prvCheckForValidListAndQueue+0x64>)
 80072f4:	f7fd fc26 	bl	8004b44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072f8:	4813      	ldr	r0, [pc, #76]	; (8007348 <prvCheckForValidListAndQueue+0x68>)
 80072fa:	f7fd fc23 	bl	8004b44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072fe:	4b13      	ldr	r3, [pc, #76]	; (800734c <prvCheckForValidListAndQueue+0x6c>)
 8007300:	4a10      	ldr	r2, [pc, #64]	; (8007344 <prvCheckForValidListAndQueue+0x64>)
 8007302:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007304:	4b12      	ldr	r3, [pc, #72]	; (8007350 <prvCheckForValidListAndQueue+0x70>)
 8007306:	4a10      	ldr	r2, [pc, #64]	; (8007348 <prvCheckForValidListAndQueue+0x68>)
 8007308:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800730a:	2300      	movs	r3, #0
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	4b11      	ldr	r3, [pc, #68]	; (8007354 <prvCheckForValidListAndQueue+0x74>)
 8007310:	4a11      	ldr	r2, [pc, #68]	; (8007358 <prvCheckForValidListAndQueue+0x78>)
 8007312:	2110      	movs	r1, #16
 8007314:	200a      	movs	r0, #10
 8007316:	f7fd fd33 	bl	8004d80 <xQueueGenericCreateStatic>
 800731a:	4603      	mov	r3, r0
 800731c:	4a08      	ldr	r2, [pc, #32]	; (8007340 <prvCheckForValidListAndQueue+0x60>)
 800731e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007320:	4b07      	ldr	r3, [pc, #28]	; (8007340 <prvCheckForValidListAndQueue+0x60>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007328:	4b05      	ldr	r3, [pc, #20]	; (8007340 <prvCheckForValidListAndQueue+0x60>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	490b      	ldr	r1, [pc, #44]	; (800735c <prvCheckForValidListAndQueue+0x7c>)
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe fb6e 	bl	8005a10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007334:	f000 f976 	bl	8007624 <vPortExitCritical>
}
 8007338:	bf00      	nop
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20001478 	.word	0x20001478
 8007344:	20001448 	.word	0x20001448
 8007348:	2000145c 	.word	0x2000145c
 800734c:	20001470 	.word	0x20001470
 8007350:	20001474 	.word	0x20001474
 8007354:	20001524 	.word	0x20001524
 8007358:	20001484 	.word	0x20001484
 800735c:	08007ca4 	.word	0x08007ca4

08007360 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10c      	bne.n	800738c <pvTimerGetTimerID+0x2c>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	b672      	cpsid	i
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	b662      	cpsie	i
 8007386:	60fb      	str	r3, [r7, #12]
}
 8007388:	bf00      	nop
 800738a:	e7fe      	b.n	800738a <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800738c:	f000 f916 	bl	80075bc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007396:	f000 f945 	bl	8007624 <vPortExitCritical>

	return pvReturn;
 800739a:	693b      	ldr	r3, [r7, #16]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3b04      	subs	r3, #4
 80073b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3b04      	subs	r3, #4
 80073c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f023 0201 	bic.w	r2, r3, #1
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3b04      	subs	r3, #4
 80073d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073d4:	4a0c      	ldr	r2, [pc, #48]	; (8007408 <pxPortInitialiseStack+0x64>)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3b14      	subs	r3, #20
 80073de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3b04      	subs	r3, #4
 80073ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f06f 0202 	mvn.w	r2, #2
 80073f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	3b20      	subs	r3, #32
 80073f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073fa:	68fb      	ldr	r3, [r7, #12]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	0800740d 	.word	0x0800740d

0800740c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007412:	2300      	movs	r3, #0
 8007414:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007416:	4b14      	ldr	r3, [pc, #80]	; (8007468 <prvTaskExitError+0x5c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741e:	d00c      	beq.n	800743a <prvTaskExitError+0x2e>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	b672      	cpsid	i
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	b662      	cpsie	i
 8007434:	60fb      	str	r3, [r7, #12]
}
 8007436:	bf00      	nop
 8007438:	e7fe      	b.n	8007438 <prvTaskExitError+0x2c>
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	b672      	cpsid	i
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	b662      	cpsie	i
 800744e:	60bb      	str	r3, [r7, #8]
}
 8007450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007452:	bf00      	nop
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0fc      	beq.n	8007454 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800745a:	bf00      	nop
 800745c:	bf00      	nop
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	2000000c 	.word	0x2000000c
 800746c:	00000000 	.word	0x00000000

08007470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007470:	4b07      	ldr	r3, [pc, #28]	; (8007490 <pxCurrentTCBConst2>)
 8007472:	6819      	ldr	r1, [r3, #0]
 8007474:	6808      	ldr	r0, [r1, #0]
 8007476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747a:	f380 8809 	msr	PSP, r0
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f04f 0000 	mov.w	r0, #0
 8007486:	f380 8811 	msr	BASEPRI, r0
 800748a:	4770      	bx	lr
 800748c:	f3af 8000 	nop.w

08007490 <pxCurrentTCBConst2>:
 8007490:	20000f48 	.word	0x20000f48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop

08007498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007498:	4808      	ldr	r0, [pc, #32]	; (80074bc <prvPortStartFirstTask+0x24>)
 800749a:	6800      	ldr	r0, [r0, #0]
 800749c:	6800      	ldr	r0, [r0, #0]
 800749e:	f380 8808 	msr	MSP, r0
 80074a2:	f04f 0000 	mov.w	r0, #0
 80074a6:	f380 8814 	msr	CONTROL, r0
 80074aa:	b662      	cpsie	i
 80074ac:	b661      	cpsie	f
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	df00      	svc	0
 80074b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074ba:	bf00      	nop
 80074bc:	e000ed08 	.word	0xe000ed08

080074c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074c6:	4b37      	ldr	r3, [pc, #220]	; (80075a4 <xPortStartScheduler+0xe4>)
 80074c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	22ff      	movs	r2, #255	; 0xff
 80074d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	4b2f      	ldr	r3, [pc, #188]	; (80075a8 <xPortStartScheduler+0xe8>)
 80074ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074ee:	4b2f      	ldr	r3, [pc, #188]	; (80075ac <xPortStartScheduler+0xec>)
 80074f0:	2207      	movs	r2, #7
 80074f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074f4:	e009      	b.n	800750a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80074f6:	4b2d      	ldr	r3, [pc, #180]	; (80075ac <xPortStartScheduler+0xec>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	4a2b      	ldr	r2, [pc, #172]	; (80075ac <xPortStartScheduler+0xec>)
 80074fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	b2db      	uxtb	r3, r3
 8007508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007512:	2b80      	cmp	r3, #128	; 0x80
 8007514:	d0ef      	beq.n	80074f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007516:	4b25      	ldr	r3, [pc, #148]	; (80075ac <xPortStartScheduler+0xec>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f1c3 0307 	rsb	r3, r3, #7
 800751e:	2b04      	cmp	r3, #4
 8007520:	d00c      	beq.n	800753c <xPortStartScheduler+0x7c>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	b672      	cpsid	i
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	b662      	cpsie	i
 8007536:	60bb      	str	r3, [r7, #8]
}
 8007538:	bf00      	nop
 800753a:	e7fe      	b.n	800753a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800753c:	4b1b      	ldr	r3, [pc, #108]	; (80075ac <xPortStartScheduler+0xec>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	021b      	lsls	r3, r3, #8
 8007542:	4a1a      	ldr	r2, [pc, #104]	; (80075ac <xPortStartScheduler+0xec>)
 8007544:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007546:	4b19      	ldr	r3, [pc, #100]	; (80075ac <xPortStartScheduler+0xec>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800754e:	4a17      	ldr	r2, [pc, #92]	; (80075ac <xPortStartScheduler+0xec>)
 8007550:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	b2da      	uxtb	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800755a:	4b15      	ldr	r3, [pc, #84]	; (80075b0 <xPortStartScheduler+0xf0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a14      	ldr	r2, [pc, #80]	; (80075b0 <xPortStartScheduler+0xf0>)
 8007560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007564:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007566:	4b12      	ldr	r3, [pc, #72]	; (80075b0 <xPortStartScheduler+0xf0>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a11      	ldr	r2, [pc, #68]	; (80075b0 <xPortStartScheduler+0xf0>)
 800756c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007570:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007572:	f000 f8dd 	bl	8007730 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007576:	4b0f      	ldr	r3, [pc, #60]	; (80075b4 <xPortStartScheduler+0xf4>)
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800757c:	f000 f8fc 	bl	8007778 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007580:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <xPortStartScheduler+0xf8>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a0c      	ldr	r2, [pc, #48]	; (80075b8 <xPortStartScheduler+0xf8>)
 8007586:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800758a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800758c:	f7ff ff84 	bl	8007498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007590:	f7fe fe8a 	bl	80062a8 <vTaskSwitchContext>
	prvTaskExitError();
 8007594:	f7ff ff3a 	bl	800740c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	e000e400 	.word	0xe000e400
 80075a8:	20001574 	.word	0x20001574
 80075ac:	20001578 	.word	0x20001578
 80075b0:	e000ed20 	.word	0xe000ed20
 80075b4:	2000000c 	.word	0x2000000c
 80075b8:	e000ef34 	.word	0xe000ef34

080075bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	b672      	cpsid	i
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	b662      	cpsie	i
 80075d6:	607b      	str	r3, [r7, #4]
}
 80075d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075da:	4b10      	ldr	r3, [pc, #64]	; (800761c <vPortEnterCritical+0x60>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3301      	adds	r3, #1
 80075e0:	4a0e      	ldr	r2, [pc, #56]	; (800761c <vPortEnterCritical+0x60>)
 80075e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075e4:	4b0d      	ldr	r3, [pc, #52]	; (800761c <vPortEnterCritical+0x60>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d111      	bne.n	8007610 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075ec:	4b0c      	ldr	r3, [pc, #48]	; (8007620 <vPortEnterCritical+0x64>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00c      	beq.n	8007610 <vPortEnterCritical+0x54>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	b672      	cpsid	i
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	b662      	cpsie	i
 800760a:	603b      	str	r3, [r7, #0]
}
 800760c:	bf00      	nop
 800760e:	e7fe      	b.n	800760e <vPortEnterCritical+0x52>
	}
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	2000000c 	.word	0x2000000c
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800762a:	4b13      	ldr	r3, [pc, #76]	; (8007678 <vPortExitCritical+0x54>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10c      	bne.n	800764c <vPortExitCritical+0x28>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	b672      	cpsid	i
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	b662      	cpsie	i
 8007646:	607b      	str	r3, [r7, #4]
}
 8007648:	bf00      	nop
 800764a:	e7fe      	b.n	800764a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800764c:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <vPortExitCritical+0x54>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3b01      	subs	r3, #1
 8007652:	4a09      	ldr	r2, [pc, #36]	; (8007678 <vPortExitCritical+0x54>)
 8007654:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007656:	4b08      	ldr	r3, [pc, #32]	; (8007678 <vPortExitCritical+0x54>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d105      	bne.n	800766a <vPortExitCritical+0x46>
 800765e:	2300      	movs	r3, #0
 8007660:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	f383 8811 	msr	BASEPRI, r3
}
 8007668:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	2000000c 	.word	0x2000000c
 800767c:	00000000 	.word	0x00000000

08007680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007680:	f3ef 8009 	mrs	r0, PSP
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	4b15      	ldr	r3, [pc, #84]	; (80076e0 <pxCurrentTCBConst>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	f01e 0f10 	tst.w	lr, #16
 8007690:	bf08      	it	eq
 8007692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769a:	6010      	str	r0, [r2, #0]
 800769c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076a4:	b672      	cpsid	i
 80076a6:	f380 8811 	msr	BASEPRI, r0
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	b662      	cpsie	i
 80076b4:	f7fe fdf8 	bl	80062a8 <vTaskSwitchContext>
 80076b8:	f04f 0000 	mov.w	r0, #0
 80076bc:	f380 8811 	msr	BASEPRI, r0
 80076c0:	bc09      	pop	{r0, r3}
 80076c2:	6819      	ldr	r1, [r3, #0]
 80076c4:	6808      	ldr	r0, [r1, #0]
 80076c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ca:	f01e 0f10 	tst.w	lr, #16
 80076ce:	bf08      	it	eq
 80076d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076d4:	f380 8809 	msr	PSP, r0
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop

080076e0 <pxCurrentTCBConst>:
 80076e0:	20000f48 	.word	0x20000f48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076e4:	bf00      	nop
 80076e6:	bf00      	nop

080076e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	b672      	cpsid	i
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	b662      	cpsie	i
 8007702:	607b      	str	r3, [r7, #4]
}
 8007704:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007706:	f7fe fd13 	bl	8006130 <xTaskIncrementTick>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d003      	beq.n	8007718 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007710:	4b06      	ldr	r3, [pc, #24]	; (800772c <SysTick_Handler+0x44>)
 8007712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	2300      	movs	r3, #0
 800771a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	f383 8811 	msr	BASEPRI, r3
}
 8007722:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007724:	bf00      	nop
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007734:	4b0b      	ldr	r3, [pc, #44]	; (8007764 <vPortSetupTimerInterrupt+0x34>)
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800773a:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <vPortSetupTimerInterrupt+0x38>)
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007740:	4b0a      	ldr	r3, [pc, #40]	; (800776c <vPortSetupTimerInterrupt+0x3c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a0a      	ldr	r2, [pc, #40]	; (8007770 <vPortSetupTimerInterrupt+0x40>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	099b      	lsrs	r3, r3, #6
 800774c:	4a09      	ldr	r2, [pc, #36]	; (8007774 <vPortSetupTimerInterrupt+0x44>)
 800774e:	3b01      	subs	r3, #1
 8007750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007752:	4b04      	ldr	r3, [pc, #16]	; (8007764 <vPortSetupTimerInterrupt+0x34>)
 8007754:	2207      	movs	r2, #7
 8007756:	601a      	str	r2, [r3, #0]
}
 8007758:	bf00      	nop
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	e000e010 	.word	0xe000e010
 8007768:	e000e018 	.word	0xe000e018
 800776c:	20000000 	.word	0x20000000
 8007770:	10624dd3 	.word	0x10624dd3
 8007774:	e000e014 	.word	0xe000e014

08007778 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007778:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007788 <vPortEnableVFP+0x10>
 800777c:	6801      	ldr	r1, [r0, #0]
 800777e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007782:	6001      	str	r1, [r0, #0]
 8007784:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007786:	bf00      	nop
 8007788:	e000ed88 	.word	0xe000ed88

0800778c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007792:	f3ef 8305 	mrs	r3, IPSR
 8007796:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b0f      	cmp	r3, #15
 800779c:	d916      	bls.n	80077cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800779e:	4a19      	ldr	r2, [pc, #100]	; (8007804 <vPortValidateInterruptPriority+0x78>)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077a8:	4b17      	ldr	r3, [pc, #92]	; (8007808 <vPortValidateInterruptPriority+0x7c>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	7afa      	ldrb	r2, [r7, #11]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d20c      	bcs.n	80077cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	b672      	cpsid	i
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	b662      	cpsie	i
 80077c6:	607b      	str	r3, [r7, #4]
}
 80077c8:	bf00      	nop
 80077ca:	e7fe      	b.n	80077ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077cc:	4b0f      	ldr	r3, [pc, #60]	; (800780c <vPortValidateInterruptPriority+0x80>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077d4:	4b0e      	ldr	r3, [pc, #56]	; (8007810 <vPortValidateInterruptPriority+0x84>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d90c      	bls.n	80077f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	b672      	cpsid	i
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	b662      	cpsie	i
 80077f0:	603b      	str	r3, [r7, #0]
}
 80077f2:	bf00      	nop
 80077f4:	e7fe      	b.n	80077f4 <vPortValidateInterruptPriority+0x68>
	}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	e000e3f0 	.word	0xe000e3f0
 8007808:	20001574 	.word	0x20001574
 800780c:	e000ed0c 	.word	0xe000ed0c
 8007810:	20001578 	.word	0x20001578

08007814 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08a      	sub	sp, #40	; 0x28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800781c:	2300      	movs	r3, #0
 800781e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007820:	f7fe fbc8 	bl	8005fb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007824:	4b5b      	ldr	r3, [pc, #364]	; (8007994 <pvPortMalloc+0x180>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800782c:	f000 f91a 	bl	8007a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007830:	4b59      	ldr	r3, [pc, #356]	; (8007998 <pvPortMalloc+0x184>)
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4013      	ands	r3, r2
 8007838:	2b00      	cmp	r3, #0
 800783a:	f040 8092 	bne.w	8007962 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01f      	beq.n	8007884 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007844:	2208      	movs	r2, #8
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4413      	add	r3, r2
 800784a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	2b00      	cmp	r3, #0
 8007854:	d016      	beq.n	8007884 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f023 0307 	bic.w	r3, r3, #7
 800785c:	3308      	adds	r3, #8
 800785e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00c      	beq.n	8007884 <pvPortMalloc+0x70>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	b672      	cpsid	i
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	b662      	cpsie	i
 800787e:	617b      	str	r3, [r7, #20]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d06b      	beq.n	8007962 <pvPortMalloc+0x14e>
 800788a:	4b44      	ldr	r3, [pc, #272]	; (800799c <pvPortMalloc+0x188>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	429a      	cmp	r2, r3
 8007892:	d866      	bhi.n	8007962 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007894:	4b42      	ldr	r3, [pc, #264]	; (80079a0 <pvPortMalloc+0x18c>)
 8007896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007898:	4b41      	ldr	r3, [pc, #260]	; (80079a0 <pvPortMalloc+0x18c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800789e:	e004      	b.n	80078aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d903      	bls.n	80078bc <pvPortMalloc+0xa8>
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1f1      	bne.n	80078a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078bc:	4b35      	ldr	r3, [pc, #212]	; (8007994 <pvPortMalloc+0x180>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d04d      	beq.n	8007962 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2208      	movs	r2, #8
 80078cc:	4413      	add	r3, r2
 80078ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	1ad2      	subs	r2, r2, r3
 80078e0:	2308      	movs	r3, #8
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d921      	bls.n	800792c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4413      	add	r3, r2
 80078ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00c      	beq.n	8007914 <pvPortMalloc+0x100>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	b672      	cpsid	i
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	b662      	cpsie	i
 800790e:	613b      	str	r3, [r7, #16]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	1ad2      	subs	r2, r2, r3
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007926:	69b8      	ldr	r0, [r7, #24]
 8007928:	f000 f8fe 	bl	8007b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800792c:	4b1b      	ldr	r3, [pc, #108]	; (800799c <pvPortMalloc+0x188>)
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	4a19      	ldr	r2, [pc, #100]	; (800799c <pvPortMalloc+0x188>)
 8007938:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800793a:	4b18      	ldr	r3, [pc, #96]	; (800799c <pvPortMalloc+0x188>)
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	4b19      	ldr	r3, [pc, #100]	; (80079a4 <pvPortMalloc+0x190>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	429a      	cmp	r2, r3
 8007944:	d203      	bcs.n	800794e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007946:	4b15      	ldr	r3, [pc, #84]	; (800799c <pvPortMalloc+0x188>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a16      	ldr	r2, [pc, #88]	; (80079a4 <pvPortMalloc+0x190>)
 800794c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	4b11      	ldr	r3, [pc, #68]	; (8007998 <pvPortMalloc+0x184>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	431a      	orrs	r2, r3
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007962:	f7fe fb35 	bl	8005fd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00c      	beq.n	800798a <pvPortMalloc+0x176>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	b672      	cpsid	i
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	b662      	cpsie	i
 8007984:	60fb      	str	r3, [r7, #12]
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <pvPortMalloc+0x174>
	return pvReturn;
 800798a:	69fb      	ldr	r3, [r7, #28]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3728      	adds	r7, #40	; 0x28
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	20005184 	.word	0x20005184
 8007998:	20005190 	.word	0x20005190
 800799c:	20005188 	.word	0x20005188
 80079a0:	2000517c 	.word	0x2000517c
 80079a4:	2000518c 	.word	0x2000518c

080079a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d04c      	beq.n	8007a54 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079ba:	2308      	movs	r3, #8
 80079bc:	425b      	negs	r3, r3
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4413      	add	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	4b23      	ldr	r3, [pc, #140]	; (8007a5c <vPortFree+0xb4>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4013      	ands	r3, r2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10c      	bne.n	80079f0 <vPortFree+0x48>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	b672      	cpsid	i
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	b662      	cpsie	i
 80079ea:	60fb      	str	r3, [r7, #12]
}
 80079ec:	bf00      	nop
 80079ee:	e7fe      	b.n	80079ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00c      	beq.n	8007a12 <vPortFree+0x6a>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	b672      	cpsid	i
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	b662      	cpsie	i
 8007a0c:	60bb      	str	r3, [r7, #8]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <vPortFree+0xb4>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d019      	beq.n	8007a54 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d115      	bne.n	8007a54 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	4b0b      	ldr	r3, [pc, #44]	; (8007a5c <vPortFree+0xb4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	43db      	mvns	r3, r3
 8007a32:	401a      	ands	r2, r3
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a38:	f7fe fabc 	bl	8005fb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <vPortFree+0xb8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4413      	add	r3, r2
 8007a46:	4a06      	ldr	r2, [pc, #24]	; (8007a60 <vPortFree+0xb8>)
 8007a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a4a:	6938      	ldr	r0, [r7, #16]
 8007a4c:	f000 f86c 	bl	8007b28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a50:	f7fe fabe 	bl	8005fd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a54:	bf00      	nop
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	20005190 	.word	0x20005190
 8007a60:	20005188 	.word	0x20005188

08007a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a70:	4b27      	ldr	r3, [pc, #156]	; (8007b10 <prvHeapInit+0xac>)
 8007a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00c      	beq.n	8007a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3307      	adds	r3, #7
 8007a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0307 	bic.w	r3, r3, #7
 8007a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	4a1f      	ldr	r2, [pc, #124]	; (8007b10 <prvHeapInit+0xac>)
 8007a94:	4413      	add	r3, r2
 8007a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a9c:	4a1d      	ldr	r2, [pc, #116]	; (8007b14 <prvHeapInit+0xb0>)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007aa2:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <prvHeapInit+0xb0>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	4413      	add	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 0307 	bic.w	r3, r3, #7
 8007abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <prvHeapInit+0xb4>)
 8007ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ac6:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <prvHeapInit+0xb4>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2200      	movs	r2, #0
 8007acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ace:	4b12      	ldr	r3, [pc, #72]	; (8007b18 <prvHeapInit+0xb4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	1ad2      	subs	r2, r2, r3
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <prvHeapInit+0xb4>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <prvHeapInit+0xb8>)
 8007af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	4a09      	ldr	r2, [pc, #36]	; (8007b20 <prvHeapInit+0xbc>)
 8007afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007afc:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <prvHeapInit+0xc0>)
 8007afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b02:	601a      	str	r2, [r3, #0]
}
 8007b04:	bf00      	nop
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	2000157c 	.word	0x2000157c
 8007b14:	2000517c 	.word	0x2000517c
 8007b18:	20005184 	.word	0x20005184
 8007b1c:	2000518c 	.word	0x2000518c
 8007b20:	20005188 	.word	0x20005188
 8007b24:	20005190 	.word	0x20005190

08007b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b30:	4b28      	ldr	r3, [pc, #160]	; (8007bd4 <prvInsertBlockIntoFreeList+0xac>)
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	e002      	b.n	8007b3c <prvInsertBlockIntoFreeList+0x14>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d8f7      	bhi.n	8007b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	4413      	add	r3, r2
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d108      	bne.n	8007b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	441a      	add	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	441a      	add	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d118      	bne.n	8007bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	4b15      	ldr	r3, [pc, #84]	; (8007bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d00d      	beq.n	8007ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	441a      	add	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	e008      	b.n	8007bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ba6:	4b0c      	ldr	r3, [pc, #48]	; (8007bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	e003      	b.n	8007bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d002      	beq.n	8007bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bc6:	bf00      	nop
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	2000517c 	.word	0x2000517c
 8007bd8:	20005184 	.word	0x20005184

08007bdc <__libc_init_array>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	4d0d      	ldr	r5, [pc, #52]	; (8007c14 <__libc_init_array+0x38>)
 8007be0:	4c0d      	ldr	r4, [pc, #52]	; (8007c18 <__libc_init_array+0x3c>)
 8007be2:	1b64      	subs	r4, r4, r5
 8007be4:	10a4      	asrs	r4, r4, #2
 8007be6:	2600      	movs	r6, #0
 8007be8:	42a6      	cmp	r6, r4
 8007bea:	d109      	bne.n	8007c00 <__libc_init_array+0x24>
 8007bec:	4d0b      	ldr	r5, [pc, #44]	; (8007c1c <__libc_init_array+0x40>)
 8007bee:	4c0c      	ldr	r4, [pc, #48]	; (8007c20 <__libc_init_array+0x44>)
 8007bf0:	f000 f82e 	bl	8007c50 <_init>
 8007bf4:	1b64      	subs	r4, r4, r5
 8007bf6:	10a4      	asrs	r4, r4, #2
 8007bf8:	2600      	movs	r6, #0
 8007bfa:	42a6      	cmp	r6, r4
 8007bfc:	d105      	bne.n	8007c0a <__libc_init_array+0x2e>
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c04:	4798      	blx	r3
 8007c06:	3601      	adds	r6, #1
 8007c08:	e7ee      	b.n	8007be8 <__libc_init_array+0xc>
 8007c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c0e:	4798      	blx	r3
 8007c10:	3601      	adds	r6, #1
 8007c12:	e7f2      	b.n	8007bfa <__libc_init_array+0x1e>
 8007c14:	08007d34 	.word	0x08007d34
 8007c18:	08007d34 	.word	0x08007d34
 8007c1c:	08007d34 	.word	0x08007d34
 8007c20:	08007d38 	.word	0x08007d38

08007c24 <memcpy>:
 8007c24:	440a      	add	r2, r1
 8007c26:	4291      	cmp	r1, r2
 8007c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c2c:	d100      	bne.n	8007c30 <memcpy+0xc>
 8007c2e:	4770      	bx	lr
 8007c30:	b510      	push	{r4, lr}
 8007c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c3a:	4291      	cmp	r1, r2
 8007c3c:	d1f9      	bne.n	8007c32 <memcpy+0xe>
 8007c3e:	bd10      	pop	{r4, pc}

08007c40 <memset>:
 8007c40:	4402      	add	r2, r0
 8007c42:	4603      	mov	r3, r0
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d100      	bne.n	8007c4a <memset+0xa>
 8007c48:	4770      	bx	lr
 8007c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c4e:	e7f9      	b.n	8007c44 <memset+0x4>

08007c50 <_init>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	bf00      	nop
 8007c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c56:	bc08      	pop	{r3}
 8007c58:	469e      	mov	lr, r3
 8007c5a:	4770      	bx	lr

08007c5c <_fini>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	bf00      	nop
 8007c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c62:	bc08      	pop	{r3}
 8007c64:	469e      	mov	lr, r3
 8007c66:	4770      	bx	lr
