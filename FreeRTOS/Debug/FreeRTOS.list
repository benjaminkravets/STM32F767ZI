
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007318  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075bc  080075bc  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  080075bc  080075bc  000175bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075c4  080075c4  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c4  080075c4  000175c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080075cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  080075dc  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  0800767c  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005044  20000150  0800771c  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005194  0800771c  00025194  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022303  00000000  00000000  0002017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ed2  00000000  00000000  00042481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a20  00000000  00000000  00046358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000018a8  00000000  00000000  00047d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000045cf  00000000  00000000  00049620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001da66  00000000  00000000  0004dbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010da2c  00000000  00000000  0006b655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00179081  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006f6c  00000000  00000000  001790d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	08007500 	.word	0x08007500

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	08007500 	.word	0x08007500

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fce9 	bl	8000f1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f840 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f95c 	bl	800080c <MX_GPIO_Init>
  MX_ETH_Init();
 8000554:	f000 f8ae 	bl	80006b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000558:	f000 f8fa 	bl	8000750 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055c:	f000 f928 	bl	80007b0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000560:	f004 f830 	bl	80045c4 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <main+0x68>)
 8000566:	2200      	movs	r2, #0
 8000568:	2101      	movs	r1, #1
 800056a:	4811      	ldr	r0, [pc, #68]	; (80005b0 <main+0x6c>)
 800056c:	f004 f97e 	bl	800486c <osTimerNew>
 8000570:	4603      	mov	r3, r0
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <main+0x70>)
 8000574:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(myTimer01Handle, 500);
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <main+0x70>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800057e:	4618      	mov	r0, r3
 8000580:	f004 f9f8 	bl	8004974 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000584:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <main+0x74>)
 8000586:	2100      	movs	r1, #0
 8000588:	480c      	ldr	r0, [pc, #48]	; (80005bc <main+0x78>)
 800058a:	f004 f885 	bl	8004698 <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <main+0x7c>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <main+0x80>)
 8000596:	2100      	movs	r1, #0
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <main+0x84>)
 800059a:	f004 f87d 	bl	8004698 <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <main+0x88>)
 80005a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a4:	f004 f842 	bl	800462c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x64>
 80005aa:	bf00      	nop
 80005ac:	08007594 	.word	0x08007594
 80005b0:	08000991 	.word	0x08000991
 80005b4:	200007ec 	.word	0x200007ec
 80005b8:	0800754c 	.word	0x0800754c
 80005bc:	08000951 	.word	0x08000951
 80005c0:	200007e4 	.word	0x200007e4
 80005c4:	08007570 	.word	0x08007570
 80005c8:	08000971 	.word	0x08000971
 80005cc:	200007e8 	.word	0x200007e8

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2234      	movs	r2, #52	; 0x34
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f006 ff86 	bl	80074f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f4:	f001 fc14 	bl	8001e20 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <SystemClock_Config+0xdc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a2b      	ldr	r2, [pc, #172]	; (80006ac <SystemClock_Config+0xdc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b29      	ldr	r3, [pc, #164]	; (80006ac <SystemClock_Config+0xdc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <SystemClock_Config+0xe0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000618:	4a25      	ldr	r2, [pc, #148]	; (80006b0 <SystemClock_Config+0xe0>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <SystemClock_Config+0xe0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000630:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000644:	2360      	movs	r3, #96	; 0x60
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fc41 	bl	8001ee0 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000664:	f000 f9c6 	bl	80009f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000668:	f001 fbea 	bl	8001e40 <HAL_PWREx_EnableOverDrive>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000672:	f000 f9bf 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2103      	movs	r1, #3
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fed2 	bl	800243c <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800069e:	f000 f9a9 	bl	80009f4 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_ETH_Init+0x84>)
 80006ba:	4a20      	ldr	r2, [pc, #128]	; (800073c <MX_ETH_Init+0x88>)
 80006bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_ETH_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_ETH_Init+0x8c>)
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_ETH_Init+0x8c>)
 80006cc:	22e1      	movs	r2, #225	; 0xe1
 80006ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_ETH_Init+0x8c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_ETH_Init+0x8c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_ETH_Init+0x8c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_ETH_Init+0x84>)
 80006e4:	4a16      	ldr	r2, [pc, #88]	; (8000740 <MX_ETH_Init+0x8c>)
 80006e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_ETH_Init+0x84>)
 80006ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_ETH_Init+0x84>)
 80006f2:	4a14      	ldr	r2, [pc, #80]	; (8000744 <MX_ETH_Init+0x90>)
 80006f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_ETH_Init+0x84>)
 80006f8:	4a13      	ldr	r2, [pc, #76]	; (8000748 <MX_ETH_Init+0x94>)
 80006fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_ETH_Init+0x84>)
 80006fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000702:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <MX_ETH_Init+0x84>)
 8000706:	f000 fd3d 	bl	8001184 <HAL_ETH_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000710:	f000 f970 	bl	80009f4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000714:	2238      	movs	r2, #56	; 0x38
 8000716:	2100      	movs	r1, #0
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <MX_ETH_Init+0x98>)
 800071a:	f006 fee9 	bl	80074f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_ETH_Init+0x98>)
 8000720:	2221      	movs	r2, #33	; 0x21
 8000722:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_ETH_Init+0x98>)
 8000726:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800072a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_ETH_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200001a4 	.word	0x200001a4
 800073c:	40028000 	.word	0x40028000
 8000740:	200007f0 	.word	0x200007f0
 8000744:	200000b0 	.word	0x200000b0
 8000748:	20000010 	.word	0x20000010
 800074c:	2000016c 	.word	0x2000016c

08000750 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_USART3_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000794:	f002 ffb2 	bl	80036fc <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f929 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000254 	.word	0x20000254
 80007ac:	40004800 	.word	0x40004800

080007b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	2206      	movs	r2, #6
 80007c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f4:	f001 f9cb 	bl	8001b8e <HAL_PCD_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f8f9 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200002dc 	.word	0x200002dc

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b47      	ldr	r3, [pc, #284]	; (8000940 <MX_GPIO_Init+0x134>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a46      	ldr	r2, [pc, #280]	; (8000940 <MX_GPIO_Init+0x134>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b44      	ldr	r3, [pc, #272]	; (8000940 <MX_GPIO_Init+0x134>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	4b41      	ldr	r3, [pc, #260]	; (8000940 <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a40      	ldr	r2, [pc, #256]	; (8000940 <MX_GPIO_Init+0x134>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b3e      	ldr	r3, [pc, #248]	; (8000940 <MX_GPIO_Init+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <MX_GPIO_Init+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a3a      	ldr	r2, [pc, #232]	; (8000940 <MX_GPIO_Init+0x134>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b38      	ldr	r3, [pc, #224]	; (8000940 <MX_GPIO_Init+0x134>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <MX_GPIO_Init+0x134>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a34      	ldr	r2, [pc, #208]	; (8000940 <MX_GPIO_Init+0x134>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b32      	ldr	r3, [pc, #200]	; (8000940 <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a2e      	ldr	r2, [pc, #184]	; (8000940 <MX_GPIO_Init+0x134>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a28      	ldr	r2, [pc, #160]	; (8000940 <MX_GPIO_Init+0x134>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008b8:	4822      	ldr	r0, [pc, #136]	; (8000944 <MX_GPIO_Init+0x138>)
 80008ba:	f001 f935 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2140      	movs	r1, #64	; 0x40
 80008c2:	4821      	ldr	r0, [pc, #132]	; (8000948 <MX_GPIO_Init+0x13c>)
 80008c4:	f001 f930 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	481b      	ldr	r0, [pc, #108]	; (800094c <MX_GPIO_Init+0x140>)
 80008e0:	f000 ff76 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008e4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_GPIO_Init+0x138>)
 80008fe:	f000 ff67 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <MX_GPIO_Init+0x13c>)
 800091a:	f000 ff59 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_GPIO_Init+0x13c>)
 8000932:	f000 ff4d 	bl	80017d0 <HAL_GPIO_Init>

}
 8000936:	bf00      	nop
 8000938:	3730      	adds	r7, #48	; 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40020400 	.word	0x40020400
 8000948:	40021800 	.word	0x40021800
 800094c:	40020800 	.word	0x40020800

08000950 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	4804      	ldr	r0, [pc, #16]	; (800096c <StartBlink01+0x1c>)
 800095c:	f001 f8fd 	bl	8001b5a <HAL_GPIO_TogglePin>
    osDelay(500);
 8000960:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000964:	f003 ff3e 	bl	80047e4 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000968:	e7f6      	b.n	8000958 <StartBlink01+0x8>
 800096a:	bf00      	nop
 800096c:	40020400 	.word	0x40020400

08000970 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <StartBlink02+0x1c>)
 800097e:	f001 f8ec 	bl	8001b5a <HAL_GPIO_TogglePin>
    osDelay(600);
 8000982:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000986:	f003 ff2d 	bl	80047e4 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800098a:	e7f5      	b.n	8000978 <StartBlink02+0x8>
 800098c:	40020400 	.word	0x40020400

08000990 <Callback01>:
  /* USER CODE END StartBlink02 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
  static uint32_t counter = 0;
  if(counter++ % 2)
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <Callback01+0x38>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	490a      	ldr	r1, [pc, #40]	; (80009c8 <Callback01+0x38>)
 80009a0:	600a      	str	r2, [r1, #0]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d005      	beq.n	80009b6 <Callback01+0x26>
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2101      	movs	r1, #1
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <Callback01+0x3c>)
 80009b0:	f001 f8ba 	bl	8001b28 <HAL_GPIO_WritePin>
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
  }

  /* USER CODE END Callback01 */
}
 80009b4:	e004      	b.n	80009c0 <Callback01+0x30>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2101      	movs	r1, #1
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <Callback01+0x3c>)
 80009bc:	f001 f8b4 	bl	8001b28 <HAL_GPIO_WritePin>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200007f8 	.word	0x200007f8
 80009cc:	40020400 	.word	0x40020400

080009d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e2:	f000 faa9 	bl	8000f38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40001000 	.word	0x40001000

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	210f      	movs	r1, #15
 8000a3a:	f06f 0001 	mvn.w	r0, #1
 8000a3e:	f000 fb77 	bl	8001130 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	; 0x38
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a4e      	ldr	r2, [pc, #312]	; (8000ba8 <HAL_ETH_MspInit+0x158>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	f040 8096 	bne.w	8000ba0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a74:	4b4d      	ldr	r3, [pc, #308]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a4c      	ldr	r2, [pc, #304]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000a7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a80:	4b4a      	ldr	r3, [pc, #296]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a88:	623b      	str	r3, [r7, #32]
 8000a8a:	6a3b      	ldr	r3, [r7, #32]
 8000a8c:	4b47      	ldr	r3, [pc, #284]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	4a46      	ldr	r2, [pc, #280]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000a92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a96:	6313      	str	r3, [r2, #48]	; 0x30
 8000a98:	4b44      	ldr	r3, [pc, #272]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	4b41      	ldr	r3, [pc, #260]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a40      	ldr	r2, [pc, #256]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000aaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abc:	4b3b      	ldr	r3, [pc, #236]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	4a3a      	ldr	r2, [pc, #232]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac8:	4b38      	ldr	r3, [pc, #224]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	f003 0304 	and.w	r3, r3, #4
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b35      	ldr	r3, [pc, #212]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	4a34      	ldr	r2, [pc, #208]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae0:	4b32      	ldr	r3, [pc, #200]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aec:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	4a2e      	ldr	r2, [pc, #184]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	6313      	str	r3, [r2, #48]	; 0x30
 8000af8:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a28      	ldr	r2, [pc, #160]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <HAL_ETH_MspInit+0x15c>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b1c:	2332      	movs	r3, #50	; 0x32
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2c:	230b      	movs	r3, #11
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	481e      	ldr	r0, [pc, #120]	; (8000bb0 <HAL_ETH_MspInit+0x160>)
 8000b38:	f000 fe4a 	bl	80017d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b3c:	2386      	movs	r3, #134	; 0x86
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4c:	230b      	movs	r3, #11
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4817      	ldr	r0, [pc, #92]	; (8000bb4 <HAL_ETH_MspInit+0x164>)
 8000b58:	f000 fe3a 	bl	80017d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6e:	230b      	movs	r3, #11
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	4619      	mov	r1, r3
 8000b78:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <HAL_ETH_MspInit+0x168>)
 8000b7a:	f000 fe29 	bl	80017d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b90:	230b      	movs	r3, #11
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4808      	ldr	r0, [pc, #32]	; (8000bbc <HAL_ETH_MspInit+0x16c>)
 8000b9c:	f000 fe18 	bl	80017d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3738      	adds	r7, #56	; 0x38
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40028000 	.word	0x40028000
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40021800 	.word	0x40021800

08000bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0ae      	sub	sp, #184	; 0xb8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2290      	movs	r2, #144	; 0x90
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f006 fc85 	bl	80074f0 <memset>
  if(huart->Instance==USART3)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a22      	ldr	r2, [pc, #136]	; (8000c74 <HAL_UART_MspInit+0xb4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d13c      	bne.n	8000c6a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 fe74 	bl	80028ec <HAL_RCCEx_PeriphCLKConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c0a:	f7ff fef3 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_UART_MspInit+0xbc>)
 8000c66:	f000 fdb3 	bl	80017d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	37b8      	adds	r7, #184	; 0xb8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40004800 	.word	0x40004800
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020c00 	.word	0x40020c00

08000c80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0ae      	sub	sp, #184	; 0xb8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2290      	movs	r2, #144	; 0x90
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f006 fc25 	bl	80074f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cae:	d159      	bne.n	8000d64 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000cb4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 fe13 	bl	80028ec <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ccc:	f7ff fe92 	bl	80009f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <HAL_PCD_MspInit+0xec>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <HAL_PCD_MspInit+0xec>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
 8000cdc:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <HAL_PCD_MspInit+0xec>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ce8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d02:	230a      	movs	r3, #10
 8000d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4818      	ldr	r0, [pc, #96]	; (8000d70 <HAL_PCD_MspInit+0xf0>)
 8000d10:	f000 fd5e 	bl	80017d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4810      	ldr	r0, [pc, #64]	; (8000d70 <HAL_PCD_MspInit+0xf0>)
 8000d30:	f000 fd4e 	bl	80017d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_PCD_MspInit+0xec>)
 8000d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d38:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <HAL_PCD_MspInit+0xec>)
 8000d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3e:	6353      	str	r3, [r2, #52]	; 0x34
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_PCD_MspInit+0xec>)
 8000d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <HAL_PCD_MspInit+0xec>)
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_PCD_MspInit+0xec>)
 8000d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d56:	6453      	str	r3, [r2, #68]	; 0x44
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <HAL_PCD_MspInit+0xec>)
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	37b8      	adds	r7, #184	; 0xb8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000

08000d74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08e      	sub	sp, #56	; 0x38
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d84:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <HAL_InitTick+0xe0>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a32      	ldr	r2, [pc, #200]	; (8000e54 <HAL_InitTick+0xe0>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <HAL_InitTick+0xe0>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f003 0310 	and.w	r3, r3, #16
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d9c:	f107 0210 	add.w	r2, r7, #16
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4611      	mov	r1, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 fd6e 	bl	8002888 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d103      	bne.n	8000dbe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000db6:	f001 fd3f 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8000dba:	6378      	str	r0, [r7, #52]	; 0x34
 8000dbc:	e004      	b.n	8000dc8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dbe:	f001 fd3b 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dca:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <HAL_InitTick+0xe4>)
 8000dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd0:	0c9b      	lsrs	r3, r3, #18
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <HAL_InitTick+0xe8>)
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <HAL_InitTick+0xec>)
 8000dda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <HAL_InitTick+0xe8>)
 8000dde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000de4:	4a1d      	ldr	r2, [pc, #116]	; (8000e5c <HAL_InitTick+0xe8>)
 8000de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_InitTick+0xe8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <HAL_InitTick+0xe8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_InitTick+0xe8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dfc:	4817      	ldr	r0, [pc, #92]	; (8000e5c <HAL_InitTick+0xe8>)
 8000dfe:	f002 f99d 	bl	800313c <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d11b      	bne.n	8000e48 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e10:	4812      	ldr	r0, [pc, #72]	; (8000e5c <HAL_InitTick+0xe8>)
 8000e12:	f002 f9f5 	bl	8003200 <HAL_TIM_Base_Start_IT>
 8000e16:	4603      	mov	r3, r0
 8000e18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d111      	bne.n	8000e48 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e24:	2036      	movs	r0, #54	; 0x36
 8000e26:	f000 f99f 	bl	8001168 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d808      	bhi.n	8000e42 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	2036      	movs	r0, #54	; 0x36
 8000e36:	f000 f97b 	bl	8001130 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_InitTick+0xf0>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	e002      	b.n	8000e48 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3738      	adds	r7, #56	; 0x38
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	431bde83 	.word	0x431bde83
 8000e5c:	200007fc 	.word	0x200007fc
 8000e60:	40001000 	.word	0x40001000
 8000e64:	20000004 	.word	0x20000004

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <NMI_Handler+0x4>

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <TIM6_DAC_IRQHandler+0x10>)
 8000e9a:	f002 fa29 	bl	80032f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200007fc 	.word	0x200007fc

08000ea8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <SystemInit+0x20>)
 8000eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <SystemInit+0x20>)
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ed2:	490e      	ldr	r1, [pc, #56]	; (8000f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ed4:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee8:	4c0b      	ldr	r4, [pc, #44]	; (8000f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef6:	f7ff ffd7 	bl	8000ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efa:	f006 fac7 	bl	800748c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efe:	f7ff fb21 	bl	8000544 <main>
  bx  lr    
 8000f02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f04:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f0c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f10:	080075cc 	.word	0x080075cc
  ldr r2, =_sbss
 8000f14:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000f18:	20005194 	.word	0x20005194

08000f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC_IRQHandler>

08000f1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f22:	2003      	movs	r0, #3
 8000f24:	f000 f8f9 	bl	800111a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f7ff ff23 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2e:	f7ff fd67 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000848 	.word	0x20000848

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000848 	.word	0x20000848

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff ffee 	bl	8000f60 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_Delay+0x44>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffde 	bl	8000f60 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
  {
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <__NVIC_SetPriorityGrouping+0x40>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00
 8001004:	05fa0000 	.word	0x05fa0000

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ff4c 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
 800113c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001142:	f7ff ff61 	bl	8001008 <__NVIC_GetPriorityGrouping>
 8001146:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	68b9      	ldr	r1, [r7, #8]
 800114c:	6978      	ldr	r0, [r7, #20]
 800114e:	f7ff ffb1 	bl	80010b4 <NVIC_EncodePriority>
 8001152:	4602      	mov	r2, r0
 8001154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff80 	bl	8001060 <__NVIC_SetPriority>
}
 8001160:	bf00      	nop
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff54 	bl	8001024 <__NVIC_EnableIRQ>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e06a      	b.n	800126c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800119c:	2b00      	cmp	r3, #0
 800119e:	d106      	bne.n	80011ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2223      	movs	r2, #35	; 0x23
 80011a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff fc51 	bl	8000a50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	4b31      	ldr	r3, [pc, #196]	; (8001274 <HAL_ETH_Init+0xf0>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a30      	ldr	r2, [pc, #192]	; (8001274 <HAL_ETH_Init+0xf0>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b2e      	ldr	r3, [pc, #184]	; (8001274 <HAL_ETH_Init+0xf0>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011c6:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <HAL_ETH_Init+0xf4>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4a2b      	ldr	r2, [pc, #172]	; (8001278 <HAL_ETH_Init+0xf4>)
 80011cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011d2:	4b29      	ldr	r3, [pc, #164]	; (8001278 <HAL_ETH_Init+0xf4>)
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	4927      	ldr	r1, [pc, #156]	; (8001278 <HAL_ETH_Init+0xf4>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <HAL_ETH_Init+0xf4>)
 80011e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011fc:	f7ff feb0 	bl	8000f60 <HAL_GetTick>
 8001200:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001202:	e011      	b.n	8001228 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001204:	f7ff feac 	bl	8000f60 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001212:	d909      	bls.n	8001228 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2204      	movs	r2, #4
 8001218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	22e0      	movs	r2, #224	; 0xe0
 8001220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e021      	b.n	800126c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1e4      	bne.n	8001204 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f958 	bl	80014f0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f9ff 	bl	8001644 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fa55 	bl	80016f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	461a      	mov	r2, r3
 8001252:	2100      	movs	r1, #0
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f9bd 	bl	80015d4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2210      	movs	r2, #16
 8001266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40023800 	.word	0x40023800
 8001278:	40013800 	.word	0x40013800

0800127c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4b51      	ldr	r3, [pc, #324]	; (80013d8 <ETH_SetMACConfig+0x15c>)
 8001292:	4013      	ands	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	7c1b      	ldrb	r3, [r3, #16]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <ETH_SetMACConfig+0x28>
 800129e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012a2:	e000      	b.n	80012a6 <ETH_SetMACConfig+0x2a>
 80012a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	7c5b      	ldrb	r3, [r3, #17]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <ETH_SetMACConfig+0x38>
 80012ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012b2:	e000      	b.n	80012b6 <ETH_SetMACConfig+0x3a>
 80012b4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012b6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	7fdb      	ldrb	r3, [r3, #31]
 80012c2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80012c4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	7f92      	ldrb	r2, [r2, #30]
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	d102      	bne.n	80012da <ETH_SetMACConfig+0x5e>
 80012d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d8:	e000      	b.n	80012dc <ETH_SetMACConfig+0x60>
 80012da:	2200      	movs	r2, #0
                        macconf->Speed |
 80012dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	7f1b      	ldrb	r3, [r3, #28]
 80012e2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012e4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80012ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	791b      	ldrb	r3, [r3, #4]
 80012f0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80012f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80012fa:	2a00      	cmp	r2, #0
 80012fc:	d102      	bne.n	8001304 <ETH_SetMACConfig+0x88>
 80012fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001302:	e000      	b.n	8001306 <ETH_SetMACConfig+0x8a>
 8001304:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001306:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	7bdb      	ldrb	r3, [r3, #15]
 800130c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800130e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001314:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800131c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800131e:	4313      	orrs	r3, r2
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff fe1e 	bl	8000f78 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001352:	4013      	ands	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001362:	2a00      	cmp	r2, #0
 8001364:	d101      	bne.n	800136a <ETH_SetMACConfig+0xee>
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	e000      	b.n	800136c <ETH_SetMACConfig+0xf0>
 800136a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800136c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001372:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800137a:	2a01      	cmp	r2, #1
 800137c:	d101      	bne.n	8001382 <ETH_SetMACConfig+0x106>
 800137e:	2208      	movs	r2, #8
 8001380:	e000      	b.n	8001384 <ETH_SetMACConfig+0x108>
 8001382:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001384:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800138c:	2a01      	cmp	r2, #1
 800138e:	d101      	bne.n	8001394 <ETH_SetMACConfig+0x118>
 8001390:	2204      	movs	r2, #4
 8001392:	e000      	b.n	8001396 <ETH_SetMACConfig+0x11a>
 8001394:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001396:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800139e:	2a01      	cmp	r2, #1
 80013a0:	d101      	bne.n	80013a6 <ETH_SetMACConfig+0x12a>
 80013a2:	2202      	movs	r2, #2
 80013a4:	e000      	b.n	80013a8 <ETH_SetMACConfig+0x12c>
 80013a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013a8:	4313      	orrs	r3, r2
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013c0:	2001      	movs	r0, #1
 80013c2:	f7ff fdd9 	bl	8000f78 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	619a      	str	r2, [r3, #24]
}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	ff20810f 	.word	0xff20810f

080013dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <ETH_SetDMAConfig+0x110>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	7b1b      	ldrb	r3, [r3, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <ETH_SetDMAConfig+0x2c>
 8001402:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001406:	e000      	b.n	800140a <ETH_SetDMAConfig+0x2e>
 8001408:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	7b5b      	ldrb	r3, [r3, #13]
 800140e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001410:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	7f52      	ldrb	r2, [r2, #29]
 8001416:	2a00      	cmp	r2, #0
 8001418:	d102      	bne.n	8001420 <ETH_SetDMAConfig+0x44>
 800141a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800141e:	e000      	b.n	8001422 <ETH_SetDMAConfig+0x46>
 8001420:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001422:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	7b9b      	ldrb	r3, [r3, #14]
 8001428:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800142a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001430:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	7f1b      	ldrb	r3, [r3, #28]
 8001436:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001438:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	7f9b      	ldrb	r3, [r3, #30]
 800143e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001440:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001446:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800144e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001450:	4313      	orrs	r3, r2
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4313      	orrs	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001460:	461a      	mov	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff fd80 	bl	8000f78 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001480:	461a      	mov	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	791b      	ldrb	r3, [r3, #4]
 800148a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001490:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001496:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800149c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014a4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80014a6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014ae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014b4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014c2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f7ff fd51 	bl	8000f78 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014de:	461a      	mov	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	f8de3f23 	.word	0xf8de3f23

080014f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0a6      	sub	sp, #152	; 0x98
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80014f8:	2301      	movs	r3, #1
 80014fa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80014fe:	2301      	movs	r3, #1
 8001500:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800151a:	2301      	movs	r3, #1
 800151c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800152c:	2300      	movs	r3, #0
 800152e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001536:	2300      	movs	r3, #0
 8001538:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001552:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001556:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001558:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800155c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001564:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fe86 	bl	800127c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001570:	2301      	movs	r3, #1
 8001572:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001574:	2301      	movs	r3, #1
 8001576:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001578:	2301      	movs	r3, #1
 800157a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800157e:	2301      	movs	r3, #1
 8001580:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001596:	2301      	movs	r3, #1
 8001598:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800159c:	2301      	movs	r3, #1
 800159e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80015a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	4619      	mov	r1, r3
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ff08 	bl	80013dc <ETH_SetDMAConfig>
}
 80015cc:	bf00      	nop
 80015ce:	3798      	adds	r7, #152	; 0x98
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3305      	adds	r3, #5
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	3204      	adds	r2, #4
 80015ec:	7812      	ldrb	r2, [r2, #0]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <ETH_MACAddressConfig+0x68>)
 80015f6:	4413      	add	r3, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3303      	adds	r3, #3
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	061a      	lsls	r2, r3, #24
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3302      	adds	r3, #2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	041b      	lsls	r3, r3, #16
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3301      	adds	r3, #1
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	4313      	orrs	r3, r2
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	4313      	orrs	r3, r2
 8001620:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <ETH_MACAddressConfig+0x6c>)
 8001626:	4413      	add	r3, r2
 8001628:	461a      	mov	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	6013      	str	r3, [r2, #0]
}
 800162e:	bf00      	nop
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40028040 	.word	0x40028040
 8001640:	40028044 	.word	0x40028044

08001644 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e03e      	b.n	80016d0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68d9      	ldr	r1, [r3, #12]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	440b      	add	r3, r1
 8001662:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	3206      	adds	r2, #6
 8001684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d80c      	bhi.n	80016b4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68d9      	ldr	r1, [r3, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	440b      	add	r3, r1
 80016ac:	461a      	mov	r2, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	e004      	b.n	80016be <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	461a      	mov	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3301      	adds	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d9bd      	bls.n	8001652 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e8:	611a      	str	r2, [r3, #16]
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b085      	sub	sp, #20
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e046      	b.n	8001792 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6919      	ldr	r1, [r3, #16]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2200      	movs	r2, #0
 8001720:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001740:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001748:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	3212      	adds	r2, #18
 800175e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d80c      	bhi.n	8001782 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6919      	ldr	r1, [r3, #16]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	461a      	mov	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	e004      	b.n	800178c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	461a      	mov	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3301      	adds	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d9b5      	bls.n	8001704 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c2:	60da      	str	r2, [r3, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e175      	b.n	8001adc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8164 	bne.w	8001ad6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d005      	beq.n	8001826 <HAL_GPIO_Init+0x56>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d130      	bne.n	8001888 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d017      	beq.n	80018c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80be 	beq.w	8001ad6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b66      	ldr	r3, [pc, #408]	; (8001af4 <HAL_GPIO_Init+0x324>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	4a65      	ldr	r2, [pc, #404]	; (8001af4 <HAL_GPIO_Init+0x324>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	4b63      	ldr	r3, [pc, #396]	; (8001af4 <HAL_GPIO_Init+0x324>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001972:	4a61      	ldr	r2, [pc, #388]	; (8001af8 <HAL_GPIO_Init+0x328>)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	220f      	movs	r2, #15
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a58      	ldr	r2, [pc, #352]	; (8001afc <HAL_GPIO_Init+0x32c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d037      	beq.n	8001a0e <HAL_GPIO_Init+0x23e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a57      	ldr	r2, [pc, #348]	; (8001b00 <HAL_GPIO_Init+0x330>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d031      	beq.n	8001a0a <HAL_GPIO_Init+0x23a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a56      	ldr	r2, [pc, #344]	; (8001b04 <HAL_GPIO_Init+0x334>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d02b      	beq.n	8001a06 <HAL_GPIO_Init+0x236>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a55      	ldr	r2, [pc, #340]	; (8001b08 <HAL_GPIO_Init+0x338>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d025      	beq.n	8001a02 <HAL_GPIO_Init+0x232>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a54      	ldr	r2, [pc, #336]	; (8001b0c <HAL_GPIO_Init+0x33c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d01f      	beq.n	80019fe <HAL_GPIO_Init+0x22e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a53      	ldr	r2, [pc, #332]	; (8001b10 <HAL_GPIO_Init+0x340>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d019      	beq.n	80019fa <HAL_GPIO_Init+0x22a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a52      	ldr	r2, [pc, #328]	; (8001b14 <HAL_GPIO_Init+0x344>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0x226>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a51      	ldr	r2, [pc, #324]	; (8001b18 <HAL_GPIO_Init+0x348>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00d      	beq.n	80019f2 <HAL_GPIO_Init+0x222>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a50      	ldr	r2, [pc, #320]	; (8001b1c <HAL_GPIO_Init+0x34c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d007      	beq.n	80019ee <HAL_GPIO_Init+0x21e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4f      	ldr	r2, [pc, #316]	; (8001b20 <HAL_GPIO_Init+0x350>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d101      	bne.n	80019ea <HAL_GPIO_Init+0x21a>
 80019e6:	2309      	movs	r3, #9
 80019e8:	e012      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019ea:	230a      	movs	r3, #10
 80019ec:	e010      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019ee:	2308      	movs	r3, #8
 80019f0:	e00e      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019f2:	2307      	movs	r3, #7
 80019f4:	e00c      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019f6:	2306      	movs	r3, #6
 80019f8:	e00a      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019fa:	2305      	movs	r3, #5
 80019fc:	e008      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e004      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f002 0203 	and.w	r2, r2, #3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a20:	4935      	ldr	r1, [pc, #212]	; (8001af8 <HAL_GPIO_Init+0x328>)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <HAL_GPIO_Init+0x354>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a52:	4a34      	ldr	r2, [pc, #208]	; (8001b24 <HAL_GPIO_Init+0x354>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a58:	4b32      	ldr	r3, [pc, #200]	; (8001b24 <HAL_GPIO_Init+0x354>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a7c:	4a29      	ldr	r2, [pc, #164]	; (8001b24 <HAL_GPIO_Init+0x354>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a82:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <HAL_GPIO_Init+0x354>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <HAL_GPIO_Init+0x354>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_GPIO_Init+0x354>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <HAL_GPIO_Init+0x354>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	f67f ae86 	bls.w	80017f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40021400 	.word	0x40021400
 8001b14:	40021800 	.word	0x40021800
 8001b18:	40021c00 	.word	0x40021c00
 8001b1c:	40022000 	.word	0x40022000
 8001b20:	40022400 	.word	0x40022400
 8001b24:	40013c00 	.word	0x40013c00

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b44:	e003      	b.n	8001b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	041a      	lsls	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	619a      	str	r2, [r3, #24]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b085      	sub	sp, #20
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b6c:	887a      	ldrh	r2, [r7, #2]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	041a      	lsls	r2, r3, #16
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	887b      	ldrh	r3, [r7, #2]
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	619a      	str	r2, [r3, #24]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b90:	b08f      	sub	sp, #60	; 0x3c
 8001b92:	af0a      	add	r7, sp, #40	; 0x28
 8001b94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e116      	b.n	8001dce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff f860 	bl	8000c80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fa4c 	bl	800407c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	687e      	ldr	r6, [r7, #4]
 8001bec:	466d      	mov	r5, sp
 8001bee:	f106 0410 	add.w	r4, r6, #16
 8001bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c02:	1d33      	adds	r3, r6, #4
 8001c04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c06:	6838      	ldr	r0, [r7, #0]
 8001c08:	f002 f9e0 	bl	8003fcc <USB_CoreInit>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2202      	movs	r2, #2
 8001c16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0d7      	b.n	8001dce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f002 fa3a 	bl	800409e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	e04a      	b.n	8001cc6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	333d      	adds	r3, #61	; 0x3d
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	333c      	adds	r3, #60	; 0x3c
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	b298      	uxth	r0, r3
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	3344      	adds	r3, #68	; 0x44
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	3340      	adds	r3, #64	; 0x40
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	3348      	adds	r3, #72	; 0x48
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	334c      	adds	r3, #76	; 0x4c
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	3354      	adds	r3, #84	; 0x54
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d3af      	bcc.n	8001c30 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
 8001cd4:	e044      	b.n	8001d60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cec:	7bfa      	ldrb	r2, [r7, #15]
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d3b5      	bcc.n	8001cd6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	687e      	ldr	r6, [r7, #4]
 8001d72:	466d      	mov	r5, sp
 8001d74:	f106 0410 	add.w	r4, r6, #16
 8001d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d84:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d88:	1d33      	adds	r3, r6, #4
 8001d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d8c:	6838      	ldr	r0, [r7, #0]
 8001d8e:	f002 f9d3 	bl	8004138 <USB_DevInit>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e014      	b.n	8001dce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d102      	bne.n	8001dc2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f80b 	bl	8001dd8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 fb91 	bl	80044ee <USB_DevDisconnect>

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001dd8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_PCDEx_ActivateLPM+0x44>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	10000003 	.word	0x10000003

08001e20 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40007000 	.word	0x40007000

08001e40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e6e:	f7ff f877 	bl	8000f60 <HAL_GetTick>
 8001e72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e74:	e009      	b.n	8001e8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e76:	f7ff f873 	bl	8000f60 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e84:	d901      	bls.n	8001e8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e022      	b.n	8001ed0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e96:	d1ee      	bne.n	8001e76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea4:	f7ff f85c 	bl	8000f60 <HAL_GetTick>
 8001ea8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eaa:	e009      	b.n	8001ec0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eac:	f7ff f858 	bl	8000f60 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eba:	d901      	bls.n	8001ec0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e007      	b.n	8001ed0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ecc:	d1ee      	bne.n	8001eac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40007000 	.word	0x40007000

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e29b      	b.n	800242e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8087 	beq.w	8002012 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f04:	4b96      	ldr	r3, [pc, #600]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d00c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f10:	4b93      	ldr	r3, [pc, #588]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d112      	bne.n	8001f42 <HAL_RCC_OscConfig+0x62>
 8001f1c:	4b90      	ldr	r3, [pc, #576]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f28:	d10b      	bne.n	8001f42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2a:	4b8d      	ldr	r3, [pc, #564]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d06c      	beq.n	8002010 <HAL_RCC_OscConfig+0x130>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d168      	bne.n	8002010 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e275      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x7a>
 8001f4c:	4b84      	ldr	r3, [pc, #528]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a83      	ldr	r2, [pc, #524]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e02e      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x9c>
 8001f62:	4b7f      	ldr	r3, [pc, #508]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a7e      	ldr	r2, [pc, #504]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b7c      	ldr	r3, [pc, #496]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7b      	ldr	r2, [pc, #492]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e01d      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xc0>
 8001f86:	4b76      	ldr	r3, [pc, #472]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a75      	ldr	r2, [pc, #468]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b73      	ldr	r3, [pc, #460]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a72      	ldr	r2, [pc, #456]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd8>
 8001fa0:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a6e      	ldr	r2, [pc, #440]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b6c      	ldr	r3, [pc, #432]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6b      	ldr	r2, [pc, #428]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ffce 	bl	8000f60 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7fe ffca 	bl	8000f60 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e229      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b61      	ldr	r3, [pc, #388]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xe8>
 8001fe6:	e014      	b.n	8002012 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7fe ffba 	bl	8000f60 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7fe ffb6 	bl	8000f60 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e215      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	4b57      	ldr	r3, [pc, #348]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x110>
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d069      	beq.n	80020f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800201e:	4b50      	ldr	r3, [pc, #320]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202a:	4b4d      	ldr	r3, [pc, #308]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b08      	cmp	r3, #8
 8002034:	d11c      	bne.n	8002070 <HAL_RCC_OscConfig+0x190>
 8002036:	4b4a      	ldr	r3, [pc, #296]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x17a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e1e9      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	493d      	ldr	r1, [pc, #244]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	e040      	b.n	80020f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d023      	beq.n	80020c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002078:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a38      	ldr	r2, [pc, #224]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe ff6c 	bl	8000f60 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208c:	f7fe ff68 	bl	8000f60 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1c7      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4929      	ldr	r1, [pc, #164]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]
 80020be:	e018      	b.n	80020f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c0:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe ff48 	bl	8000f60 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d4:	f7fe ff44 	bl	8000f60 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1a3      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d038      	beq.n	8002170 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d019      	beq.n	800213a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210a:	4a15      	ldr	r2, [pc, #84]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002112:	f7fe ff25 	bl	8000f60 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211a:	f7fe ff21 	bl	8000f60 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e180      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800212e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x23a>
 8002138:	e01a      	b.n	8002170 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800213c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213e:	4a08      	ldr	r2, [pc, #32]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002146:	f7fe ff0b 	bl	8000f60 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214e:	f7fe ff07 	bl	8000f60 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d903      	bls.n	8002164 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e166      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
 8002160:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002164:	4b92      	ldr	r3, [pc, #584]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ee      	bne.n	800214e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80a4 	beq.w	80022c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217e:	4b8c      	ldr	r3, [pc, #560]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10d      	bne.n	80021a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	4b89      	ldr	r3, [pc, #548]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a88      	ldr	r2, [pc, #544]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b86      	ldr	r3, [pc, #536]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a6:	4b83      	ldr	r3, [pc, #524]	; (80023b4 <HAL_RCC_OscConfig+0x4d4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d118      	bne.n	80021e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021b2:	4b80      	ldr	r3, [pc, #512]	; (80023b4 <HAL_RCC_OscConfig+0x4d4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a7f      	ldr	r2, [pc, #508]	; (80023b4 <HAL_RCC_OscConfig+0x4d4>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021be:	f7fe fecf 	bl	8000f60 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c6:	f7fe fecb 	bl	8000f60 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b64      	cmp	r3, #100	; 0x64
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e12a      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d8:	4b76      	ldr	r3, [pc, #472]	; (80023b4 <HAL_RCC_OscConfig+0x4d4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x31a>
 80021ec:	4b70      	ldr	r3, [pc, #448]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	4a6f      	ldr	r2, [pc, #444]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6713      	str	r3, [r2, #112]	; 0x70
 80021f8:	e02d      	b.n	8002256 <HAL_RCC_OscConfig+0x376>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x33c>
 8002202:	4b6b      	ldr	r3, [pc, #428]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	4a6a      	ldr	r2, [pc, #424]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	6713      	str	r3, [r2, #112]	; 0x70
 800220e:	4b68      	ldr	r3, [pc, #416]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a67      	ldr	r2, [pc, #412]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002214:	f023 0304 	bic.w	r3, r3, #4
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	e01c      	b.n	8002256 <HAL_RCC_OscConfig+0x376>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b05      	cmp	r3, #5
 8002222:	d10c      	bne.n	800223e <HAL_RCC_OscConfig+0x35e>
 8002224:	4b62      	ldr	r3, [pc, #392]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	4a61      	ldr	r2, [pc, #388]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 800222a:	f043 0304 	orr.w	r3, r3, #4
 800222e:	6713      	str	r3, [r2, #112]	; 0x70
 8002230:	4b5f      	ldr	r3, [pc, #380]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	4a5e      	ldr	r2, [pc, #376]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6713      	str	r3, [r2, #112]	; 0x70
 800223c:	e00b      	b.n	8002256 <HAL_RCC_OscConfig+0x376>
 800223e:	4b5c      	ldr	r3, [pc, #368]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	4a5b      	ldr	r2, [pc, #364]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	6713      	str	r3, [r2, #112]	; 0x70
 800224a:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002250:	f023 0304 	bic.w	r3, r3, #4
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d015      	beq.n	800228a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7fe fe7f 	bl	8000f60 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7fe fe7b 	bl	8000f60 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e0d8      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227c:	4b4c      	ldr	r3, [pc, #304]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0ee      	beq.n	8002266 <HAL_RCC_OscConfig+0x386>
 8002288:	e014      	b.n	80022b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228a:	f7fe fe69 	bl	8000f60 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002290:	e00a      	b.n	80022a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7fe fe65 	bl	8000f60 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e0c2      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a8:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1ee      	bne.n	8002292 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022b4:	7dfb      	ldrb	r3, [r7, #23]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d105      	bne.n	80022c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a3c      	ldr	r2, [pc, #240]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 80022c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80ae 	beq.w	800242c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d0:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d06d      	beq.n	80023b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d14b      	bne.n	800237c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e4:	4b32      	ldr	r3, [pc, #200]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a31      	ldr	r2, [pc, #196]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 80022ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe fe36 	bl	8000f60 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f8:	f7fe fe32 	bl	8000f60 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e091      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230a:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69da      	ldr	r2, [r3, #28]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	019b      	lsls	r3, r3, #6
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	085b      	lsrs	r3, r3, #1
 800232e:	3b01      	subs	r3, #1
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	071b      	lsls	r3, r3, #28
 8002342:	491b      	ldr	r1, [pc, #108]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 800234e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe fe04 	bl	8000f60 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235c:	f7fe fe00 	bl	8000f60 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e05f      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x47c>
 800237a:	e057      	b.n	800242c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 8002382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fdea 	bl	8000f60 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fde6 	bl	8000f60 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e045      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a2:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x4b0>
 80023ae:	e03d      	b.n	800242c <HAL_RCC_OscConfig+0x54c>
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023b8:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <HAL_RCC_OscConfig+0x558>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d030      	beq.n	8002428 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d129      	bne.n	8002428 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023de:	429a      	cmp	r2, r3
 80023e0:	d122      	bne.n	8002428 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023e8:	4013      	ands	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d119      	bne.n	8002428 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	3b01      	subs	r3, #1
 8002402:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d10f      	bne.n	8002428 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d107      	bne.n	8002428 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800

0800243c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d0      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d910      	bls.n	8002484 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b67      	ldr	r3, [pc, #412]	; (8002600 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 020f 	bic.w	r2, r3, #15
 800246a:	4965      	ldr	r1, [pc, #404]	; (8002600 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b63      	ldr	r3, [pc, #396]	; (8002600 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0b8      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800249c:	4b59      	ldr	r3, [pc, #356]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4a58      	ldr	r2, [pc, #352]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 80024a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b4:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a52      	ldr	r2, [pc, #328]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 80024ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b50      	ldr	r3, [pc, #320]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	494d      	ldr	r1, [pc, #308]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d040      	beq.n	8002560 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d115      	bne.n	800251e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e07f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b41      	ldr	r3, [pc, #260]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e073      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06b      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4936      	ldr	r1, [pc, #216]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	4313      	orrs	r3, r2
 800252e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002530:	f7fe fd16 	bl	8000f60 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7fe fd12 	bl	8000f60 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e053      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d210      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 020f 	bic.w	r2, r3, #15
 8002576:	4922      	ldr	r1, [pc, #136]	; (8002600 <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e032      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4916      	ldr	r1, [pc, #88]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	490e      	ldr	r1, [pc, #56]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ce:	f000 f821 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	490a      	ldr	r1, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x1cc>)
 80025e0:	5ccb      	ldrb	r3, [r1, r3]
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1d0>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_RCC_ClockConfig+0x1d4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fbc0 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023c00 	.word	0x40023c00
 8002604:	40023800 	.word	0x40023800
 8002608:	080075a4 	.word	0x080075a4
 800260c:	20000000 	.word	0x20000000
 8002610:	20000004 	.word	0x20000004

08002614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002618:	b094      	sub	sp, #80	; 0x50
 800261a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	647b      	str	r3, [r7, #68]	; 0x44
 8002620:	2300      	movs	r3, #0
 8002622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002624:	2300      	movs	r3, #0
 8002626:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800262c:	4b79      	ldr	r3, [pc, #484]	; (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b08      	cmp	r3, #8
 8002636:	d00d      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x40>
 8002638:	2b08      	cmp	r3, #8
 800263a:	f200 80e1 	bhi.w	8002800 <HAL_RCC_GetSysClockFreq+0x1ec>
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x34>
 8002642:	2b04      	cmp	r3, #4
 8002644:	d003      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0x3a>
 8002646:	e0db      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002648:	4b73      	ldr	r3, [pc, #460]	; (8002818 <HAL_RCC_GetSysClockFreq+0x204>)
 800264a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800264c:	e0db      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800264e:	4b73      	ldr	r3, [pc, #460]	; (800281c <HAL_RCC_GetSysClockFreq+0x208>)
 8002650:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002652:	e0d8      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002654:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800265c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800265e:	4b6d      	ldr	r3, [pc, #436]	; (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d063      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266a:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	099b      	lsrs	r3, r3, #6
 8002670:	2200      	movs	r2, #0
 8002672:	63bb      	str	r3, [r7, #56]	; 0x38
 8002674:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267c:	633b      	str	r3, [r7, #48]	; 0x30
 800267e:	2300      	movs	r3, #0
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
 8002682:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002686:	4622      	mov	r2, r4
 8002688:	462b      	mov	r3, r5
 800268a:	f04f 0000 	mov.w	r0, #0
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	0159      	lsls	r1, r3, #5
 8002694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002698:	0150      	lsls	r0, r2, #5
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4621      	mov	r1, r4
 80026a0:	1a51      	subs	r1, r2, r1
 80026a2:	6139      	str	r1, [r7, #16]
 80026a4:	4629      	mov	r1, r5
 80026a6:	eb63 0301 	sbc.w	r3, r3, r1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b8:	4659      	mov	r1, fp
 80026ba:	018b      	lsls	r3, r1, #6
 80026bc:	4651      	mov	r1, sl
 80026be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026c2:	4651      	mov	r1, sl
 80026c4:	018a      	lsls	r2, r1, #6
 80026c6:	4651      	mov	r1, sl
 80026c8:	ebb2 0801 	subs.w	r8, r2, r1
 80026cc:	4659      	mov	r1, fp
 80026ce:	eb63 0901 	sbc.w	r9, r3, r1
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e6:	4690      	mov	r8, r2
 80026e8:	4699      	mov	r9, r3
 80026ea:	4623      	mov	r3, r4
 80026ec:	eb18 0303 	adds.w	r3, r8, r3
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	462b      	mov	r3, r5
 80026f4:	eb49 0303 	adc.w	r3, r9, r3
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002706:	4629      	mov	r1, r5
 8002708:	024b      	lsls	r3, r1, #9
 800270a:	4621      	mov	r1, r4
 800270c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002710:	4621      	mov	r1, r4
 8002712:	024a      	lsls	r2, r1, #9
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800271a:	2200      	movs	r2, #0
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
 800271e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002720:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002724:	f7fd fd8c 	bl	8000240 <__aeabi_uldivmod>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4613      	mov	r3, r2
 800272e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002730:	e058      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	099b      	lsrs	r3, r3, #6
 8002738:	2200      	movs	r2, #0
 800273a:	4618      	mov	r0, r3
 800273c:	4611      	mov	r1, r2
 800273e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002742:	623b      	str	r3, [r7, #32]
 8002744:	2300      	movs	r3, #0
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
 8002748:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800274c:	4642      	mov	r2, r8
 800274e:	464b      	mov	r3, r9
 8002750:	f04f 0000 	mov.w	r0, #0
 8002754:	f04f 0100 	mov.w	r1, #0
 8002758:	0159      	lsls	r1, r3, #5
 800275a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800275e:	0150      	lsls	r0, r2, #5
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4641      	mov	r1, r8
 8002766:	ebb2 0a01 	subs.w	sl, r2, r1
 800276a:	4649      	mov	r1, r9
 800276c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800277c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002780:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002784:	ebb2 040a 	subs.w	r4, r2, sl
 8002788:	eb63 050b 	sbc.w	r5, r3, fp
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	00eb      	lsls	r3, r5, #3
 8002796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800279a:	00e2      	lsls	r2, r4, #3
 800279c:	4614      	mov	r4, r2
 800279e:	461d      	mov	r5, r3
 80027a0:	4643      	mov	r3, r8
 80027a2:	18e3      	adds	r3, r4, r3
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	464b      	mov	r3, r9
 80027a8:	eb45 0303 	adc.w	r3, r5, r3
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ba:	4629      	mov	r1, r5
 80027bc:	028b      	lsls	r3, r1, #10
 80027be:	4621      	mov	r1, r4
 80027c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027c4:	4621      	mov	r1, r4
 80027c6:	028a      	lsls	r2, r1, #10
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ce:	2200      	movs	r2, #0
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	61fa      	str	r2, [r7, #28]
 80027d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d8:	f7fd fd32 	bl	8000240 <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4613      	mov	r3, r2
 80027e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	0c1b      	lsrs	r3, r3, #16
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	3301      	adds	r3, #1
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80027f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027fe:	e002      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_RCC_GetSysClockFreq+0x204>)
 8002802:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002808:	4618      	mov	r0, r3
 800280a:	3750      	adds	r7, #80	; 0x50
 800280c:	46bd      	mov	sp, r7
 800280e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	00f42400 	.word	0x00f42400
 800281c:	007a1200 	.word	0x007a1200

08002820 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_RCC_GetHCLKFreq+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000000 	.word	0x20000000

08002838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800283c:	f7ff fff0 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	0a9b      	lsrs	r3, r3, #10
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4903      	ldr	r1, [pc, #12]	; (800285c <HAL_RCC_GetPCLK1Freq+0x24>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40023800 	.word	0x40023800
 800285c:	080075b4 	.word	0x080075b4

08002860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002864:	f7ff ffdc 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	0b5b      	lsrs	r3, r3, #13
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4903      	ldr	r1, [pc, #12]	; (8002884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	080075b4 	.word	0x080075b4

08002888 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	220f      	movs	r2, #15
 8002896:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_RCC_GetClockConfig+0x5c>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0203 	and.w	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_RCC_GetClockConfig+0x5c>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <HAL_RCC_GetClockConfig+0x5c>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_RCC_GetClockConfig+0x5c>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	08db      	lsrs	r3, r3, #3
 80028c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <HAL_RCC_GetClockConfig+0x60>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 020f 	and.w	r2, r3, #15
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	601a      	str	r2, [r3, #0]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40023c00 	.word	0x40023c00

080028ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d012      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002914:	4b69      	ldr	r3, [pc, #420]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a68      	ldr	r2, [pc, #416]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800291e:	6093      	str	r3, [r2, #8]
 8002920:	4b66      	ldr	r3, [pc, #408]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002928:	4964      	ldr	r1, [pc, #400]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d017      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002946:	4b5d      	ldr	r3, [pc, #372]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800294c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002954:	4959      	ldr	r1, [pc, #356]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002964:	d101      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002972:	2301      	movs	r3, #1
 8002974:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d017      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002982:	4b4e      	ldr	r3, [pc, #312]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002988:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	494a      	ldr	r1, [pc, #296]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a0:	d101      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80029ae:	2301      	movs	r3, #1
 80029b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029be:	2301      	movs	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 808b 	beq.w	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029d0:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	4a39      	ldr	r2, [pc, #228]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029da:	6413      	str	r3, [r2, #64]	; 0x40
 80029dc:	4b37      	ldr	r3, [pc, #220]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029e8:	4b35      	ldr	r3, [pc, #212]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a34      	ldr	r2, [pc, #208]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f4:	f7fe fab4 	bl	8000f60 <HAL_GetTick>
 80029f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fc:	f7fe fab0 	bl	8000f60 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e38f      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a1a:	4b28      	ldr	r3, [pc, #160]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d035      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d02e      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a38:	4b20      	ldr	r3, [pc, #128]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a42:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	4a1a      	ldr	r2, [pc, #104]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a5a:	4a18      	ldr	r2, [pc, #96]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a60:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d114      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fa78 	bl	8000f60 <HAL_GetTick>
 8002a70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe fa74 	bl	8000f60 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e351      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ee      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002aa2:	d111      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ab2:	400b      	ands	r3, r1
 8002ab4:	4901      	ldr	r1, [pc, #4]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	0ffffcff 	.word	0x0ffffcff
 8002ac8:	4bac      	ldr	r3, [pc, #688]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4aab      	ldr	r2, [pc, #684]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ace:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ad2:	6093      	str	r3, [r2, #8]
 8002ad4:	4ba9      	ldr	r3, [pc, #676]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae0:	49a6      	ldr	r1, [pc, #664]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d010      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002af2:	4ba2      	ldr	r3, [pc, #648]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af8:	4aa0      	ldr	r2, [pc, #640]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002afe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b02:	4b9e      	ldr	r3, [pc, #632]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0c:	499b      	ldr	r1, [pc, #620]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b20:	4b96      	ldr	r3, [pc, #600]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b2e:	4993      	ldr	r1, [pc, #588]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b42:	4b8e      	ldr	r3, [pc, #568]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b50:	498a      	ldr	r1, [pc, #552]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b64:	4b85      	ldr	r3, [pc, #532]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b72:	4982      	ldr	r1, [pc, #520]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b86:	4b7d      	ldr	r3, [pc, #500]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4979      	ldr	r1, [pc, #484]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ba8:	4b74      	ldr	r3, [pc, #464]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	4971      	ldr	r1, [pc, #452]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bca:	4b6c      	ldr	r3, [pc, #432]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f023 020c 	bic.w	r2, r3, #12
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd8:	4968      	ldr	r1, [pc, #416]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bec:	4b63      	ldr	r3, [pc, #396]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfa:	4960      	ldr	r1, [pc, #384]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c0e:	4b5b      	ldr	r3, [pc, #364]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1c:	4957      	ldr	r1, [pc, #348]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c30:	4b52      	ldr	r3, [pc, #328]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	494f      	ldr	r1, [pc, #316]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c52:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	4946      	ldr	r1, [pc, #280]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c74:	4b41      	ldr	r3, [pc, #260]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c82:	493e      	ldr	r1, [pc, #248]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c96:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca4:	4935      	ldr	r1, [pc, #212]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cb8:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cc6:	492d      	ldr	r1, [pc, #180]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d011      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cda:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ce8:	4924      	ldr	r1, [pc, #144]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d1a:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	4914      	ldr	r1, [pc, #80]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d3c:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d4c:	490b      	ldr	r1, [pc, #44]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00f      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d70:	4902      	ldr	r1, [pc, #8]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d78:	e002      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00b      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d8c:	4b8a      	ldr	r3, [pc, #552]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9c:	4986      	ldr	r1, [pc, #536]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00b      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002db0:	4b81      	ldr	r3, [pc, #516]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc0:	497d      	ldr	r1, [pc, #500]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d006      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80d6 	beq.w	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ddc:	4b76      	ldr	r3, [pc, #472]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a75      	ldr	r2, [pc, #468]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de8:	f7fe f8ba 	bl	8000f60 <HAL_GetTick>
 8002dec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002df0:	f7fe f8b6 	bl	8000f60 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e195      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e02:	4b6d      	ldr	r3, [pc, #436]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d021      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11d      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e22:	4b65      	ldr	r3, [pc, #404]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e36:	0e1b      	lsrs	r3, r3, #24
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	019a      	lsls	r2, r3, #6
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	041b      	lsls	r3, r3, #16
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	071b      	lsls	r3, r3, #28
 8002e56:	4958      	ldr	r1, [pc, #352]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d02e      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e88:	d129      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e8a:	4b4b      	ldr	r3, [pc, #300]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e98:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e9e:	0f1b      	lsrs	r3, r3, #28
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	019a      	lsls	r2, r3, #6
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	061b      	lsls	r3, r3, #24
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	071b      	lsls	r3, r3, #28
 8002ebe:	493e      	ldr	r1, [pc, #248]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ec6:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ecc:	f023 021f 	bic.w	r2, r3, #31
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	4938      	ldr	r1, [pc, #224]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01d      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002eea:	4b33      	ldr	r3, [pc, #204]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef0:	0e1b      	lsrs	r3, r3, #24
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ef8:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efe:	0f1b      	lsrs	r3, r3, #28
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	019a      	lsls	r2, r3, #6
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	431a      	orrs	r2, r3
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	061b      	lsls	r3, r3, #24
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	071b      	lsls	r3, r3, #28
 8002f1e:	4926      	ldr	r1, [pc, #152]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d011      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	019a      	lsls	r2, r3, #6
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	061b      	lsls	r3, r3, #24
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	071b      	lsls	r3, r3, #28
 8002f4e:	491a      	ldr	r1, [pc, #104]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f56:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f62:	f7fd fffd 	bl	8000f60 <HAL_GetTick>
 8002f66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f6a:	f7fd fff9 	bl	8000f60 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b64      	cmp	r3, #100	; 0x64
 8002f76:	d901      	bls.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e0d8      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	f040 80ce 	bne.w	800312c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f9c:	f7fd ffe0 	bl	8000f60 <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fa4:	f7fd ffdc 	bl	8000f60 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d904      	bls.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e0bb      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fbc:	4b5e      	ldr	r3, [pc, #376]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc8:	d0ec      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d02e      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d12a      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ff2:	4b51      	ldr	r3, [pc, #324]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003000:	4b4d      	ldr	r3, [pc, #308]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	0f1b      	lsrs	r3, r3, #28
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	019a      	lsls	r2, r3, #6
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	061b      	lsls	r3, r3, #24
 8003020:	431a      	orrs	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	071b      	lsls	r3, r3, #28
 8003026:	4944      	ldr	r1, [pc, #272]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800302e:	4b42      	ldr	r3, [pc, #264]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003034:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	3b01      	subs	r3, #1
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	493d      	ldr	r1, [pc, #244]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d022      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800305c:	d11d      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800305e:	4b36      	ldr	r3, [pc, #216]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003064:	0e1b      	lsrs	r3, r3, #24
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800306c:	4b32      	ldr	r3, [pc, #200]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003072:	0f1b      	lsrs	r3, r3, #28
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	019a      	lsls	r2, r3, #6
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	431a      	orrs	r2, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	061b      	lsls	r3, r3, #24
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	071b      	lsls	r3, r3, #28
 8003092:	4929      	ldr	r1, [pc, #164]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d028      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ac:	0e1b      	lsrs	r3, r3, #24
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030b4:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ba:	0c1b      	lsrs	r3, r3, #16
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	019a      	lsls	r2, r3, #6
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	041b      	lsls	r3, r3, #16
 80030cc:	431a      	orrs	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	071b      	lsls	r3, r3, #28
 80030da:	4917      	ldr	r1, [pc, #92]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	4911      	ldr	r1, [pc, #68]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030f8:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0e      	ldr	r2, [pc, #56]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003104:	f7fd ff2c 	bl	8000f60 <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800310c:	f7fd ff28 	bl	8000f60 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e007      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800312a:	d1ef      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3720      	adds	r7, #32
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800

0800313c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e049      	b.n	80031e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f841 	bl	80031ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f000 fa00 	bl	8003580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	d001      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e054      	b.n	80032c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d022      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x80>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003242:	d01d      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x80>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d018      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x80>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a21      	ldr	r2, [pc, #132]	; (80032d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x80>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1f      	ldr	r2, [pc, #124]	; (80032dc <HAL_TIM_Base_Start_IT+0xdc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00e      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x80>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1e      	ldr	r2, [pc, #120]	; (80032e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x80>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x80>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1b      	ldr	r2, [pc, #108]	; (80032e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d115      	bne.n	80032ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	4b19      	ldr	r3, [pc, #100]	; (80032ec <HAL_TIM_Base_Start_IT+0xec>)
 8003288:	4013      	ands	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b06      	cmp	r3, #6
 8003290:	d015      	beq.n	80032be <HAL_TIM_Base_Start_IT+0xbe>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003298:	d011      	beq.n	80032be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032aa:	e008      	b.n	80032be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e000      	b.n	80032c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40010000 	.word	0x40010000
 80032d4:	40000400 	.word	0x40000400
 80032d8:	40000800 	.word	0x40000800
 80032dc:	40000c00 	.word	0x40000c00
 80032e0:	40010400 	.word	0x40010400
 80032e4:	40014000 	.word	0x40014000
 80032e8:	40001800 	.word	0x40001800
 80032ec:	00010007 	.word	0x00010007

080032f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b02      	cmp	r3, #2
 8003304:	d122      	bne.n	800334c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b02      	cmp	r3, #2
 8003312:	d11b      	bne.n	800334c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0202 	mvn.w	r2, #2
 800331c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f905 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 8003338:	e005      	b.n	8003346 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f8f7 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f908 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b04      	cmp	r3, #4
 8003358:	d122      	bne.n	80033a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b04      	cmp	r3, #4
 8003366:	d11b      	bne.n	80033a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0204 	mvn.w	r2, #4
 8003370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2202      	movs	r2, #2
 8003376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8db 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 800338c:	e005      	b.n	800339a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f8cd 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f8de 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d122      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d11b      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0208 	mvn.w	r2, #8
 80033c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2204      	movs	r2, #4
 80033ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f8b1 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 80033e0:	e005      	b.n	80033ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f8a3 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f8b4 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b10      	cmp	r3, #16
 8003400:	d122      	bne.n	8003448 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b10      	cmp	r3, #16
 800340e:	d11b      	bne.n	8003448 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0210 	mvn.w	r2, #16
 8003418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2208      	movs	r2, #8
 800341e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f887 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 8003434:	e005      	b.n	8003442 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f879 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f88a 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b01      	cmp	r3, #1
 8003454:	d10e      	bne.n	8003474 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b01      	cmp	r3, #1
 8003462:	d107      	bne.n	8003474 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0201 	mvn.w	r2, #1
 800346c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd faae 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347e:	2b80      	cmp	r3, #128	; 0x80
 8003480:	d10e      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348c:	2b80      	cmp	r3, #128	; 0x80
 800348e:	d107      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f91a 	bl	80036d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ae:	d10e      	bne.n	80034ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b80      	cmp	r3, #128	; 0x80
 80034bc:	d107      	bne.n	80034ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f90d 	bl	80036e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d10e      	bne.n	80034fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	2b40      	cmp	r3, #64	; 0x40
 80034e8:	d107      	bne.n	80034fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f838 	bl	800356a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b20      	cmp	r3, #32
 8003506:	d10e      	bne.n	8003526 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b20      	cmp	r3, #32
 8003514:	d107      	bne.n	8003526 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f06f 0220 	mvn.w	r2, #32
 800351e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f8cd 	bl	80036c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a40      	ldr	r2, [pc, #256]	; (8003694 <TIM_Base_SetConfig+0x114>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359e:	d00f      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a3d      	ldr	r2, [pc, #244]	; (8003698 <TIM_Base_SetConfig+0x118>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3c      	ldr	r2, [pc, #240]	; (800369c <TIM_Base_SetConfig+0x11c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a3b      	ldr	r2, [pc, #236]	; (80036a0 <TIM_Base_SetConfig+0x120>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3a      	ldr	r2, [pc, #232]	; (80036a4 <TIM_Base_SetConfig+0x124>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d108      	bne.n	80035d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a2f      	ldr	r2, [pc, #188]	; (8003694 <TIM_Base_SetConfig+0x114>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d02b      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e0:	d027      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a2c      	ldr	r2, [pc, #176]	; (8003698 <TIM_Base_SetConfig+0x118>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d023      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2b      	ldr	r2, [pc, #172]	; (800369c <TIM_Base_SetConfig+0x11c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01f      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2a      	ldr	r2, [pc, #168]	; (80036a0 <TIM_Base_SetConfig+0x120>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01b      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a29      	ldr	r2, [pc, #164]	; (80036a4 <TIM_Base_SetConfig+0x124>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d017      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a28      	ldr	r2, [pc, #160]	; (80036a8 <TIM_Base_SetConfig+0x128>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a27      	ldr	r2, [pc, #156]	; (80036ac <TIM_Base_SetConfig+0x12c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00f      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <TIM_Base_SetConfig+0x130>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00b      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a25      	ldr	r2, [pc, #148]	; (80036b4 <TIM_Base_SetConfig+0x134>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a24      	ldr	r2, [pc, #144]	; (80036b8 <TIM_Base_SetConfig+0x138>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d003      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a23      	ldr	r2, [pc, #140]	; (80036bc <TIM_Base_SetConfig+0x13c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d108      	bne.n	8003644 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <TIM_Base_SetConfig+0x114>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d003      	beq.n	8003678 <TIM_Base_SetConfig+0xf8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a0c      	ldr	r2, [pc, #48]	; (80036a4 <TIM_Base_SetConfig+0x124>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d103      	bne.n	8003680 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	615a      	str	r2, [r3, #20]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40010000 	.word	0x40010000
 8003698:	40000400 	.word	0x40000400
 800369c:	40000800 	.word	0x40000800
 80036a0:	40000c00 	.word	0x40000c00
 80036a4:	40010400 	.word	0x40010400
 80036a8:	40014000 	.word	0x40014000
 80036ac:	40014400 	.word	0x40014400
 80036b0:	40014800 	.word	0x40014800
 80036b4:	40001800 	.word	0x40001800
 80036b8:	40001c00 	.word	0x40001c00
 80036bc:	40002000 	.word	0x40002000

080036c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e040      	b.n	8003790 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd fa4e 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	; 0x24
 8003728:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f82c 	bl	8003798 <UART_SetConfig>
 8003740:	4603      	mov	r3, r0
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e022      	b.n	8003790 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fa84 	bl	8003c60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003766:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003776:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fb0b 	bl	8003da4 <UART_CheckIdleState>
 800378e:	4603      	mov	r3, r0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4ba6      	ldr	r3, [pc, #664]	; (8003a5c <UART_SetConfig+0x2c4>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	6979      	ldr	r1, [r7, #20]
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	430a      	orrs	r2, r1
 8003808:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a94      	ldr	r2, [pc, #592]	; (8003a60 <UART_SetConfig+0x2c8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d120      	bne.n	8003856 <UART_SetConfig+0xbe>
 8003814:	4b93      	ldr	r3, [pc, #588]	; (8003a64 <UART_SetConfig+0x2cc>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b03      	cmp	r3, #3
 8003820:	d816      	bhi.n	8003850 <UART_SetConfig+0xb8>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <UART_SetConfig+0x90>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	08003839 	.word	0x08003839
 800382c:	08003845 	.word	0x08003845
 8003830:	0800383f 	.word	0x0800383f
 8003834:	0800384b 	.word	0x0800384b
 8003838:	2301      	movs	r3, #1
 800383a:	77fb      	strb	r3, [r7, #31]
 800383c:	e150      	b.n	8003ae0 <UART_SetConfig+0x348>
 800383e:	2302      	movs	r3, #2
 8003840:	77fb      	strb	r3, [r7, #31]
 8003842:	e14d      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003844:	2304      	movs	r3, #4
 8003846:	77fb      	strb	r3, [r7, #31]
 8003848:	e14a      	b.n	8003ae0 <UART_SetConfig+0x348>
 800384a:	2308      	movs	r3, #8
 800384c:	77fb      	strb	r3, [r7, #31]
 800384e:	e147      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003850:	2310      	movs	r3, #16
 8003852:	77fb      	strb	r3, [r7, #31]
 8003854:	e144      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a83      	ldr	r2, [pc, #524]	; (8003a68 <UART_SetConfig+0x2d0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d132      	bne.n	80038c6 <UART_SetConfig+0x12e>
 8003860:	4b80      	ldr	r3, [pc, #512]	; (8003a64 <UART_SetConfig+0x2cc>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d828      	bhi.n	80038c0 <UART_SetConfig+0x128>
 800386e:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <UART_SetConfig+0xdc>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	080038a9 	.word	0x080038a9
 8003878:	080038c1 	.word	0x080038c1
 800387c:	080038c1 	.word	0x080038c1
 8003880:	080038c1 	.word	0x080038c1
 8003884:	080038b5 	.word	0x080038b5
 8003888:	080038c1 	.word	0x080038c1
 800388c:	080038c1 	.word	0x080038c1
 8003890:	080038c1 	.word	0x080038c1
 8003894:	080038af 	.word	0x080038af
 8003898:	080038c1 	.word	0x080038c1
 800389c:	080038c1 	.word	0x080038c1
 80038a0:	080038c1 	.word	0x080038c1
 80038a4:	080038bb 	.word	0x080038bb
 80038a8:	2300      	movs	r3, #0
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e118      	b.n	8003ae0 <UART_SetConfig+0x348>
 80038ae:	2302      	movs	r3, #2
 80038b0:	77fb      	strb	r3, [r7, #31]
 80038b2:	e115      	b.n	8003ae0 <UART_SetConfig+0x348>
 80038b4:	2304      	movs	r3, #4
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e112      	b.n	8003ae0 <UART_SetConfig+0x348>
 80038ba:	2308      	movs	r3, #8
 80038bc:	77fb      	strb	r3, [r7, #31]
 80038be:	e10f      	b.n	8003ae0 <UART_SetConfig+0x348>
 80038c0:	2310      	movs	r3, #16
 80038c2:	77fb      	strb	r3, [r7, #31]
 80038c4:	e10c      	b.n	8003ae0 <UART_SetConfig+0x348>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a68      	ldr	r2, [pc, #416]	; (8003a6c <UART_SetConfig+0x2d4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d120      	bne.n	8003912 <UART_SetConfig+0x17a>
 80038d0:	4b64      	ldr	r3, [pc, #400]	; (8003a64 <UART_SetConfig+0x2cc>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038da:	2b30      	cmp	r3, #48	; 0x30
 80038dc:	d013      	beq.n	8003906 <UART_SetConfig+0x16e>
 80038de:	2b30      	cmp	r3, #48	; 0x30
 80038e0:	d814      	bhi.n	800390c <UART_SetConfig+0x174>
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d009      	beq.n	80038fa <UART_SetConfig+0x162>
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d810      	bhi.n	800390c <UART_SetConfig+0x174>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <UART_SetConfig+0x15c>
 80038ee:	2b10      	cmp	r3, #16
 80038f0:	d006      	beq.n	8003900 <UART_SetConfig+0x168>
 80038f2:	e00b      	b.n	800390c <UART_SetConfig+0x174>
 80038f4:	2300      	movs	r3, #0
 80038f6:	77fb      	strb	r3, [r7, #31]
 80038f8:	e0f2      	b.n	8003ae0 <UART_SetConfig+0x348>
 80038fa:	2302      	movs	r3, #2
 80038fc:	77fb      	strb	r3, [r7, #31]
 80038fe:	e0ef      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003900:	2304      	movs	r3, #4
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e0ec      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003906:	2308      	movs	r3, #8
 8003908:	77fb      	strb	r3, [r7, #31]
 800390a:	e0e9      	b.n	8003ae0 <UART_SetConfig+0x348>
 800390c:	2310      	movs	r3, #16
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e0e6      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a56      	ldr	r2, [pc, #344]	; (8003a70 <UART_SetConfig+0x2d8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d120      	bne.n	800395e <UART_SetConfig+0x1c6>
 800391c:	4b51      	ldr	r3, [pc, #324]	; (8003a64 <UART_SetConfig+0x2cc>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003922:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003926:	2bc0      	cmp	r3, #192	; 0xc0
 8003928:	d013      	beq.n	8003952 <UART_SetConfig+0x1ba>
 800392a:	2bc0      	cmp	r3, #192	; 0xc0
 800392c:	d814      	bhi.n	8003958 <UART_SetConfig+0x1c0>
 800392e:	2b80      	cmp	r3, #128	; 0x80
 8003930:	d009      	beq.n	8003946 <UART_SetConfig+0x1ae>
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	d810      	bhi.n	8003958 <UART_SetConfig+0x1c0>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <UART_SetConfig+0x1a8>
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d006      	beq.n	800394c <UART_SetConfig+0x1b4>
 800393e:	e00b      	b.n	8003958 <UART_SetConfig+0x1c0>
 8003940:	2300      	movs	r3, #0
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e0cc      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003946:	2302      	movs	r3, #2
 8003948:	77fb      	strb	r3, [r7, #31]
 800394a:	e0c9      	b.n	8003ae0 <UART_SetConfig+0x348>
 800394c:	2304      	movs	r3, #4
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e0c6      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003952:	2308      	movs	r3, #8
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e0c3      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003958:	2310      	movs	r3, #16
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e0c0      	b.n	8003ae0 <UART_SetConfig+0x348>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a44      	ldr	r2, [pc, #272]	; (8003a74 <UART_SetConfig+0x2dc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d125      	bne.n	80039b4 <UART_SetConfig+0x21c>
 8003968:	4b3e      	ldr	r3, [pc, #248]	; (8003a64 <UART_SetConfig+0x2cc>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003976:	d017      	beq.n	80039a8 <UART_SetConfig+0x210>
 8003978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397c:	d817      	bhi.n	80039ae <UART_SetConfig+0x216>
 800397e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003982:	d00b      	beq.n	800399c <UART_SetConfig+0x204>
 8003984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003988:	d811      	bhi.n	80039ae <UART_SetConfig+0x216>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <UART_SetConfig+0x1fe>
 800398e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003992:	d006      	beq.n	80039a2 <UART_SetConfig+0x20a>
 8003994:	e00b      	b.n	80039ae <UART_SetConfig+0x216>
 8003996:	2300      	movs	r3, #0
 8003998:	77fb      	strb	r3, [r7, #31]
 800399a:	e0a1      	b.n	8003ae0 <UART_SetConfig+0x348>
 800399c:	2302      	movs	r3, #2
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	e09e      	b.n	8003ae0 <UART_SetConfig+0x348>
 80039a2:	2304      	movs	r3, #4
 80039a4:	77fb      	strb	r3, [r7, #31]
 80039a6:	e09b      	b.n	8003ae0 <UART_SetConfig+0x348>
 80039a8:	2308      	movs	r3, #8
 80039aa:	77fb      	strb	r3, [r7, #31]
 80039ac:	e098      	b.n	8003ae0 <UART_SetConfig+0x348>
 80039ae:	2310      	movs	r3, #16
 80039b0:	77fb      	strb	r3, [r7, #31]
 80039b2:	e095      	b.n	8003ae0 <UART_SetConfig+0x348>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a2f      	ldr	r2, [pc, #188]	; (8003a78 <UART_SetConfig+0x2e0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d125      	bne.n	8003a0a <UART_SetConfig+0x272>
 80039be:	4b29      	ldr	r3, [pc, #164]	; (8003a64 <UART_SetConfig+0x2cc>)
 80039c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039cc:	d017      	beq.n	80039fe <UART_SetConfig+0x266>
 80039ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039d2:	d817      	bhi.n	8003a04 <UART_SetConfig+0x26c>
 80039d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d8:	d00b      	beq.n	80039f2 <UART_SetConfig+0x25a>
 80039da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039de:	d811      	bhi.n	8003a04 <UART_SetConfig+0x26c>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <UART_SetConfig+0x254>
 80039e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e8:	d006      	beq.n	80039f8 <UART_SetConfig+0x260>
 80039ea:	e00b      	b.n	8003a04 <UART_SetConfig+0x26c>
 80039ec:	2301      	movs	r3, #1
 80039ee:	77fb      	strb	r3, [r7, #31]
 80039f0:	e076      	b.n	8003ae0 <UART_SetConfig+0x348>
 80039f2:	2302      	movs	r3, #2
 80039f4:	77fb      	strb	r3, [r7, #31]
 80039f6:	e073      	b.n	8003ae0 <UART_SetConfig+0x348>
 80039f8:	2304      	movs	r3, #4
 80039fa:	77fb      	strb	r3, [r7, #31]
 80039fc:	e070      	b.n	8003ae0 <UART_SetConfig+0x348>
 80039fe:	2308      	movs	r3, #8
 8003a00:	77fb      	strb	r3, [r7, #31]
 8003a02:	e06d      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003a04:	2310      	movs	r3, #16
 8003a06:	77fb      	strb	r3, [r7, #31]
 8003a08:	e06a      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1b      	ldr	r2, [pc, #108]	; (8003a7c <UART_SetConfig+0x2e4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d138      	bne.n	8003a86 <UART_SetConfig+0x2ee>
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <UART_SetConfig+0x2cc>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a22:	d017      	beq.n	8003a54 <UART_SetConfig+0x2bc>
 8003a24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a28:	d82a      	bhi.n	8003a80 <UART_SetConfig+0x2e8>
 8003a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2e:	d00b      	beq.n	8003a48 <UART_SetConfig+0x2b0>
 8003a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a34:	d824      	bhi.n	8003a80 <UART_SetConfig+0x2e8>
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <UART_SetConfig+0x2aa>
 8003a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3e:	d006      	beq.n	8003a4e <UART_SetConfig+0x2b6>
 8003a40:	e01e      	b.n	8003a80 <UART_SetConfig+0x2e8>
 8003a42:	2300      	movs	r3, #0
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	e04b      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e048      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003a4e:	2304      	movs	r3, #4
 8003a50:	77fb      	strb	r3, [r7, #31]
 8003a52:	e045      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003a54:	2308      	movs	r3, #8
 8003a56:	77fb      	strb	r3, [r7, #31]
 8003a58:	e042      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003a5a:	bf00      	nop
 8003a5c:	efff69f3 	.word	0xefff69f3
 8003a60:	40011000 	.word	0x40011000
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40004400 	.word	0x40004400
 8003a6c:	40004800 	.word	0x40004800
 8003a70:	40004c00 	.word	0x40004c00
 8003a74:	40005000 	.word	0x40005000
 8003a78:	40011400 	.word	0x40011400
 8003a7c:	40007800 	.word	0x40007800
 8003a80:	2310      	movs	r3, #16
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e02c      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a72      	ldr	r2, [pc, #456]	; (8003c54 <UART_SetConfig+0x4bc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d125      	bne.n	8003adc <UART_SetConfig+0x344>
 8003a90:	4b71      	ldr	r3, [pc, #452]	; (8003c58 <UART_SetConfig+0x4c0>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a9e:	d017      	beq.n	8003ad0 <UART_SetConfig+0x338>
 8003aa0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003aa4:	d817      	bhi.n	8003ad6 <UART_SetConfig+0x33e>
 8003aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aaa:	d00b      	beq.n	8003ac4 <UART_SetConfig+0x32c>
 8003aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab0:	d811      	bhi.n	8003ad6 <UART_SetConfig+0x33e>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <UART_SetConfig+0x326>
 8003ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aba:	d006      	beq.n	8003aca <UART_SetConfig+0x332>
 8003abc:	e00b      	b.n	8003ad6 <UART_SetConfig+0x33e>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	77fb      	strb	r3, [r7, #31]
 8003ac2:	e00d      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e00a      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003aca:	2304      	movs	r3, #4
 8003acc:	77fb      	strb	r3, [r7, #31]
 8003ace:	e007      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003ad0:	2308      	movs	r3, #8
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e004      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003ad6:	2310      	movs	r3, #16
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e001      	b.n	8003ae0 <UART_SetConfig+0x348>
 8003adc:	2310      	movs	r3, #16
 8003ade:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae8:	d15b      	bne.n	8003ba2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003aea:	7ffb      	ldrb	r3, [r7, #31]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d828      	bhi.n	8003b42 <UART_SetConfig+0x3aa>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <UART_SetConfig+0x360>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b25 	.word	0x08003b25
 8003b00:	08003b2d 	.word	0x08003b2d
 8003b04:	08003b43 	.word	0x08003b43
 8003b08:	08003b33 	.word	0x08003b33
 8003b0c:	08003b43 	.word	0x08003b43
 8003b10:	08003b43 	.word	0x08003b43
 8003b14:	08003b43 	.word	0x08003b43
 8003b18:	08003b3b 	.word	0x08003b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7fe fe8c 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8003b20:	61b8      	str	r0, [r7, #24]
        break;
 8003b22:	e013      	b.n	8003b4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b24:	f7fe fe9c 	bl	8002860 <HAL_RCC_GetPCLK2Freq>
 8003b28:	61b8      	str	r0, [r7, #24]
        break;
 8003b2a:	e00f      	b.n	8003b4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b2c:	4b4b      	ldr	r3, [pc, #300]	; (8003c5c <UART_SetConfig+0x4c4>)
 8003b2e:	61bb      	str	r3, [r7, #24]
        break;
 8003b30:	e00c      	b.n	8003b4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b32:	f7fe fd6f 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8003b36:	61b8      	str	r0, [r7, #24]
        break;
 8003b38:	e008      	b.n	8003b4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b3e:	61bb      	str	r3, [r7, #24]
        break;
 8003b40:	e004      	b.n	8003b4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	77bb      	strb	r3, [r7, #30]
        break;
 8003b4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d074      	beq.n	8003c3c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	005a      	lsls	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	441a      	add	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	d916      	bls.n	8003b9c <UART_SetConfig+0x404>
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d212      	bcs.n	8003b9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f023 030f 	bic.w	r3, r3, #15
 8003b7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	89fb      	ldrh	r3, [r7, #14]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	89fa      	ldrh	r2, [r7, #14]
 8003b98:	60da      	str	r2, [r3, #12]
 8003b9a:	e04f      	b.n	8003c3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	77bb      	strb	r3, [r7, #30]
 8003ba0:	e04c      	b.n	8003c3c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ba2:	7ffb      	ldrb	r3, [r7, #31]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d828      	bhi.n	8003bfa <UART_SetConfig+0x462>
 8003ba8:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <UART_SetConfig+0x418>)
 8003baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bae:	bf00      	nop
 8003bb0:	08003bd5 	.word	0x08003bd5
 8003bb4:	08003bdd 	.word	0x08003bdd
 8003bb8:	08003be5 	.word	0x08003be5
 8003bbc:	08003bfb 	.word	0x08003bfb
 8003bc0:	08003beb 	.word	0x08003beb
 8003bc4:	08003bfb 	.word	0x08003bfb
 8003bc8:	08003bfb 	.word	0x08003bfb
 8003bcc:	08003bfb 	.word	0x08003bfb
 8003bd0:	08003bf3 	.word	0x08003bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd4:	f7fe fe30 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8003bd8:	61b8      	str	r0, [r7, #24]
        break;
 8003bda:	e013      	b.n	8003c04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bdc:	f7fe fe40 	bl	8002860 <HAL_RCC_GetPCLK2Freq>
 8003be0:	61b8      	str	r0, [r7, #24]
        break;
 8003be2:	e00f      	b.n	8003c04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <UART_SetConfig+0x4c4>)
 8003be6:	61bb      	str	r3, [r7, #24]
        break;
 8003be8:	e00c      	b.n	8003c04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bea:	f7fe fd13 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8003bee:	61b8      	str	r0, [r7, #24]
        break;
 8003bf0:	e008      	b.n	8003c04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf6:	61bb      	str	r3, [r7, #24]
        break;
 8003bf8:	e004      	b.n	8003c04 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	77bb      	strb	r3, [r7, #30]
        break;
 8003c02:	bf00      	nop
    }

    if (pclk != 0U)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d018      	beq.n	8003c3c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	085a      	lsrs	r2, r3, #1
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	441a      	add	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b0f      	cmp	r3, #15
 8003c22:	d909      	bls.n	8003c38 <UART_SetConfig+0x4a0>
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2a:	d205      	bcs.n	8003c38 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	e001      	b.n	8003c3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c48:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40007c00 	.word	0x40007c00
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	00f42400 	.word	0x00f42400

08003c60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01a      	beq.n	8003d76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d5e:	d10a      	bne.n	8003d76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	605a      	str	r2, [r3, #4]
  }
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003db4:	f7fd f8d4 	bl	8000f60 <HAL_GetTick>
 8003db8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d10e      	bne.n	8003de6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f831 	bl	8003e3e <UART_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e027      	b.n	8003e36 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d10e      	bne.n	8003e12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003df4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f81b 	bl	8003e3e <UART_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e011      	b.n	8003e36 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b09c      	sub	sp, #112	; 0x70
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	603b      	str	r3, [r7, #0]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4e:	e0a7      	b.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e56:	f000 80a3 	beq.w	8003fa0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5a:	f7fd f881 	bl	8000f60 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d302      	bcc.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d13f      	bne.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e84:	667b      	str	r3, [r7, #100]	; 0x64
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e6      	bne.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	663b      	str	r3, [r7, #96]	; 0x60
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ec2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ec4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e5      	bne.n	8003ea2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e068      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d050      	beq.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0c:	d148      	bne.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f16:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
 8003f38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e6      	bne.n	8003f18 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3308      	adds	r3, #8
 8003f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3308      	adds	r3, #8
 8003f68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f6a:	623a      	str	r2, [r7, #32]
 8003f6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	69f9      	ldr	r1, [r7, #28]
 8003f70:	6a3a      	ldr	r2, [r7, #32]
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e5      	bne.n	8003f4a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e010      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69da      	ldr	r2, [r3, #28]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	f43f af48 	beq.w	8003e50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3770      	adds	r7, #112	; 0x70
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fcc:	b084      	sub	sp, #16
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	f107 001c 	add.w	r0, r7, #28
 8003fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d120      	bne.n	8004026 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <USB_CoreInit+0xac>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400a:	2b01      	cmp	r3, #1
 800400c:	d105      	bne.n	800401a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fa96 	bl	800454c <USB_CoreReset>
 8004020:	4603      	mov	r3, r0
 8004022:	73fb      	strb	r3, [r7, #15]
 8004024:	e010      	b.n	8004048 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fa8a 	bl	800454c <USB_CoreReset>
 8004038:	4603      	mov	r3, r0
 800403a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404a:	2b01      	cmp	r3, #1
 800404c:	d10b      	bne.n	8004066 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f043 0206 	orr.w	r2, r3, #6
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004072:	b004      	add	sp, #16
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	ffbdffbf 	.word	0xffbdffbf

0800407c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 0201 	bic.w	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d115      	bne.n	80040ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040cc:	2001      	movs	r0, #1
 80040ce:	f7fc ff53 	bl	8000f78 <HAL_Delay>
      ms++;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3301      	adds	r3, #1
 80040d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fa29 	bl	8004530 <USB_GetMode>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d01e      	beq.n	8004122 <USB_SetCurrentMode+0x84>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b31      	cmp	r3, #49	; 0x31
 80040e8:	d9f0      	bls.n	80040cc <USB_SetCurrentMode+0x2e>
 80040ea:	e01a      	b.n	8004122 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d115      	bne.n	800411e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040fe:	2001      	movs	r0, #1
 8004100:	f7fc ff3a 	bl	8000f78 <HAL_Delay>
      ms++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3301      	adds	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fa10 	bl	8004530 <USB_GetMode>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <USB_SetCurrentMode+0x84>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b31      	cmp	r3, #49	; 0x31
 800411a:	d9f0      	bls.n	80040fe <USB_SetCurrentMode+0x60>
 800411c:	e001      	b.n	8004122 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e005      	b.n	800412e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b32      	cmp	r3, #50	; 0x32
 8004126:	d101      	bne.n	800412c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004138:	b084      	sub	sp, #16
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	e009      	b.n	800416c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	3340      	adds	r3, #64	; 0x40
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	2200      	movs	r2, #0
 8004164:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	3301      	adds	r3, #1
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b0e      	cmp	r3, #14
 8004170:	d9f2      	bls.n	8004158 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d11c      	bne.n	80041b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004186:	f043 0302 	orr.w	r3, r3, #2
 800418a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	e005      	b.n	80041be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041c4:	461a      	mov	r2, r3
 80041c6:	2300      	movs	r3, #0
 80041c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d0:	4619      	mov	r1, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d8:	461a      	mov	r2, r3
 80041da:	680b      	ldr	r3, [r1, #0]
 80041dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d10c      	bne.n	80041fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d104      	bne.n	80041f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041ea:	2100      	movs	r1, #0
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f965 	bl	80044bc <USB_SetDevSpeed>
 80041f2:	e008      	b.n	8004206 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041f4:	2101      	movs	r1, #1
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f960 	bl	80044bc <USB_SetDevSpeed>
 80041fc:	e003      	b.n	8004206 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041fe:	2103      	movs	r1, #3
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f95b 	bl	80044bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004206:	2110      	movs	r1, #16
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f8f3 	bl	80043f4 <USB_FlushTxFifo>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f91f 	bl	800445c <USB_FlushRxFifo>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422e:	461a      	mov	r2, r3
 8004230:	2300      	movs	r3, #0
 8004232:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423a:	461a      	mov	r2, r3
 800423c:	2300      	movs	r3, #0
 800423e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004246:	461a      	mov	r2, r3
 8004248:	2300      	movs	r3, #0
 800424a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800424c:	2300      	movs	r3, #0
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	e043      	b.n	80042da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004268:	d118      	bne.n	800429c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10a      	bne.n	8004286 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	461a      	mov	r2, r3
 800427e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	e013      	b.n	80042ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004292:	461a      	mov	r2, r3
 8004294:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e008      	b.n	80042ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a8:	461a      	mov	r2, r3
 80042aa:	2300      	movs	r3, #0
 80042ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ba:	461a      	mov	r2, r3
 80042bc:	2300      	movs	r3, #0
 80042be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042cc:	461a      	mov	r2, r3
 80042ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	3301      	adds	r3, #1
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d3b7      	bcc.n	8004252 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	e043      	b.n	8004370 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042fe:	d118      	bne.n	8004332 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	461a      	mov	r2, r3
 8004314:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e013      	b.n	8004344 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004328:	461a      	mov	r2, r3
 800432a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	e008      	b.n	8004344 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433e:	461a      	mov	r2, r3
 8004340:	2300      	movs	r3, #0
 8004342:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004350:	461a      	mov	r2, r3
 8004352:	2300      	movs	r3, #0
 8004354:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	461a      	mov	r2, r3
 8004364:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004368:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3301      	adds	r3, #1
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	429a      	cmp	r2, r3
 8004376:	d3b7      	bcc.n	80042e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004398:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	2b00      	cmp	r3, #0
 800439e:	d105      	bne.n	80043ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f043 0210 	orr.w	r2, r3, #16
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <USB_DevInit+0x2b4>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f043 0208 	orr.w	r2, r3, #8
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d105      	bne.n	80043dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699a      	ldr	r2, [r3, #24]
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <USB_DevInit+0x2b8>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043e8:	b004      	add	sp, #16
 80043ea:	4770      	bx	lr
 80043ec:	803c3800 	.word	0x803c3800
 80043f0:	40000004 	.word	0x40000004

080043f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3301      	adds	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4a13      	ldr	r2, [pc, #76]	; (8004458 <USB_FlushTxFifo+0x64>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d901      	bls.n	8004414 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e01b      	b.n	800444c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	daf2      	bge.n	8004402 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	019b      	lsls	r3, r3, #6
 8004424:	f043 0220 	orr.w	r2, r3, #32
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3301      	adds	r3, #1
 8004430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4a08      	ldr	r2, [pc, #32]	; (8004458 <USB_FlushTxFifo+0x64>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e006      	b.n	800444c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b20      	cmp	r3, #32
 8004448:	d0f0      	beq.n	800442c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	00030d40 	.word	0x00030d40

0800445c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3301      	adds	r3, #1
 800446c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4a11      	ldr	r2, [pc, #68]	; (80044b8 <USB_FlushRxFifo+0x5c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d901      	bls.n	800447a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e018      	b.n	80044ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	daf2      	bge.n	8004468 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2210      	movs	r2, #16
 800448a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3301      	adds	r3, #1
 8004490:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <USB_FlushRxFifo+0x5c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e006      	b.n	80044ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0310 	and.w	r3, r3, #16
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d0f0      	beq.n	800448c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	00030d40 	.word	0x00030d40

080044bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044dc:	4313      	orrs	r3, r2
 80044de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b085      	sub	sp, #20
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004508:	f023 0303 	bic.w	r3, r3, #3
 800450c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800451c:	f043 0302 	orr.w	r3, r3, #2
 8004520:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0301 	and.w	r3, r3, #1
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3301      	adds	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <USB_CoreReset+0x64>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e01b      	b.n	80045a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	daf2      	bge.n	8004558 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f043 0201 	orr.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3301      	adds	r3, #1
 8004586:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <USB_CoreReset+0x64>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e006      	b.n	80045a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d0f0      	beq.n	8004582 <USB_CoreReset+0x36>

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	00030d40 	.word	0x00030d40

080045b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80045b8:	bf00      	nop
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045ca:	f3ef 8305 	mrs	r3, IPSR
 80045ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80045d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10f      	bne.n	80045f6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d6:	f3ef 8310 	mrs	r3, PRIMASK
 80045da:	607b      	str	r3, [r7, #4]
  return(result);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d105      	bne.n	80045ee <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045e2:	f3ef 8311 	mrs	r3, BASEPRI
 80045e6:	603b      	str	r3, [r7, #0]
  return(result);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <osKernelInitialize+0x3a>
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <osKernelInitialize+0x64>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d103      	bne.n	80045fe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80045f6:	f06f 0305 	mvn.w	r3, #5
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e00c      	b.n	8004618 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045fe:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <osKernelInitialize+0x64>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d105      	bne.n	8004612 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004606:	4b08      	ldr	r3, [pc, #32]	; (8004628 <osKernelInitialize+0x64>)
 8004608:	2201      	movs	r2, #1
 800460a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e002      	b.n	8004618 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004612:	f04f 33ff 	mov.w	r3, #4294967295
 8004616:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004618:	68fb      	ldr	r3, [r7, #12]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	2000084c 	.word	0x2000084c

0800462c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004632:	f3ef 8305 	mrs	r3, IPSR
 8004636:	60bb      	str	r3, [r7, #8]
  return(result);
 8004638:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10f      	bne.n	800465e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800463e:	f3ef 8310 	mrs	r3, PRIMASK
 8004642:	607b      	str	r3, [r7, #4]
  return(result);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d105      	bne.n	8004656 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800464a:	f3ef 8311 	mrs	r3, BASEPRI
 800464e:	603b      	str	r3, [r7, #0]
  return(result);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <osKernelStart+0x3a>
 8004656:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <osKernelStart+0x68>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d103      	bne.n	8004666 <osKernelStart+0x3a>
    stat = osErrorISR;
 800465e:	f06f 0305 	mvn.w	r3, #5
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	e010      	b.n	8004688 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004666:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <osKernelStart+0x68>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d109      	bne.n	8004682 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800466e:	f7ff ffa1 	bl	80045b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004672:	4b08      	ldr	r3, [pc, #32]	; (8004694 <osKernelStart+0x68>)
 8004674:	2202      	movs	r2, #2
 8004676:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004678:	f001 f98e 	bl	8005998 <vTaskStartScheduler>
      stat = osOK;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e002      	b.n	8004688 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004688:	68fb      	ldr	r3, [r7, #12]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	2000084c 	.word	0x2000084c

08004698 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b090      	sub	sp, #64	; 0x40
 800469c:	af04      	add	r7, sp, #16
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a8:	f3ef 8305 	mrs	r3, IPSR
 80046ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80046ae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f040 808f 	bne.w	80047d4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b6:	f3ef 8310 	mrs	r3, PRIMASK
 80046ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d105      	bne.n	80046ce <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046c2:	f3ef 8311 	mrs	r3, BASEPRI
 80046c6:	617b      	str	r3, [r7, #20]
  return(result);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <osThreadNew+0x3e>
 80046ce:	4b44      	ldr	r3, [pc, #272]	; (80047e0 <osThreadNew+0x148>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d07e      	beq.n	80047d4 <osThreadNew+0x13c>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d07b      	beq.n	80047d4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80046e0:	2318      	movs	r3, #24
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80046e8:	f04f 33ff 	mov.w	r3, #4294967295
 80046ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d045      	beq.n	8004780 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <osThreadNew+0x6a>
        name = attr->name;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <osThreadNew+0x90>
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	2b38      	cmp	r3, #56	; 0x38
 800471a:	d805      	bhi.n	8004728 <osThreadNew+0x90>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <osThreadNew+0x94>
        return (NULL);
 8004728:	2300      	movs	r3, #0
 800472a:	e054      	b.n	80047d6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	089b      	lsrs	r3, r3, #2
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00e      	beq.n	8004762 <osThreadNew+0xca>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	2b5b      	cmp	r3, #91	; 0x5b
 800474a:	d90a      	bls.n	8004762 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004750:	2b00      	cmp	r3, #0
 8004752:	d006      	beq.n	8004762 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <osThreadNew+0xca>
        mem = 1;
 800475c:	2301      	movs	r3, #1
 800475e:	623b      	str	r3, [r7, #32]
 8004760:	e010      	b.n	8004784 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10c      	bne.n	8004784 <osThreadNew+0xec>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d108      	bne.n	8004784 <osThreadNew+0xec>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d104      	bne.n	8004784 <osThreadNew+0xec>
          mem = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	e001      	b.n	8004784 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d110      	bne.n	80047ac <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004792:	9202      	str	r2, [sp, #8]
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800479e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 ff19 	bl	80055d8 <xTaskCreateStatic>
 80047a6:	4603      	mov	r3, r0
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	e013      	b.n	80047d4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d110      	bne.n	80047d4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	f107 0310 	add.w	r3, r7, #16
 80047ba:	9301      	str	r3, [sp, #4]
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 ff6a 	bl	800569e <xTaskCreate>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d001      	beq.n	80047d4 <osThreadNew+0x13c>
          hTask = NULL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047d4:	693b      	ldr	r3, [r7, #16]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3730      	adds	r7, #48	; 0x30
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	2000084c 	.word	0x2000084c

080047e4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ec:	f3ef 8305 	mrs	r3, IPSR
 80047f0:	613b      	str	r3, [r7, #16]
  return(result);
 80047f2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10f      	bne.n	8004818 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f8:	f3ef 8310 	mrs	r3, PRIMASK
 80047fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d105      	bne.n	8004810 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004804:	f3ef 8311 	mrs	r3, BASEPRI
 8004808:	60bb      	str	r3, [r7, #8]
  return(result);
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <osDelay+0x3c>
 8004810:	4b0a      	ldr	r3, [pc, #40]	; (800483c <osDelay+0x58>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d103      	bne.n	8004820 <osDelay+0x3c>
    stat = osErrorISR;
 8004818:	f06f 0305 	mvn.w	r3, #5
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	e007      	b.n	8004830 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <osDelay+0x4c>
      vTaskDelay(ticks);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f001 f87e 	bl	800592c <vTaskDelay>
    }
  }

  return (stat);
 8004830:	697b      	ldr	r3, [r7, #20]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	2000084c 	.word	0x2000084c

08004840 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f002 f9e3 	bl	8006c14 <pvTimerGetTimerID>
 800484e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d005      	beq.n	8004862 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	6852      	ldr	r2, [r2, #4]
 800485e:	4610      	mov	r0, r2
 8004860:	4798      	blx	r3
  }
}
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b08e      	sub	sp, #56	; 0x38
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	460b      	mov	r3, r1
 800487a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800487c:	2300      	movs	r3, #0
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004880:	f3ef 8305 	mrs	r3, IPSR
 8004884:	61bb      	str	r3, [r7, #24]
  return(result);
 8004886:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8004888:	2b00      	cmp	r3, #0
 800488a:	d16a      	bne.n	8004962 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488c:	f3ef 8310 	mrs	r3, PRIMASK
 8004890:	617b      	str	r3, [r7, #20]
  return(result);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004898:	f3ef 8311 	mrs	r3, BASEPRI
 800489c:	613b      	str	r3, [r7, #16]
  return(result);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <osTimerNew+0x40>
 80048a4:	4b31      	ldr	r3, [pc, #196]	; (800496c <osTimerNew+0x100>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d05a      	beq.n	8004962 <osTimerNew+0xf6>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d057      	beq.n	8004962 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80048b2:	2008      	movs	r0, #8
 80048b4:	f002 fc06 	bl	80070c4 <pvPortMalloc>
 80048b8:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d050      	beq.n	8004962 <osTimerNew+0xf6>
      callb->func = func;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80048cc:	7afb      	ldrb	r3, [r7, #11]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <osTimerNew+0x6c>
        reload = pdFALSE;
 80048d2:	2300      	movs	r3, #0
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
 80048d6:	e001      	b.n	80048dc <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80048d8:	2301      	movs	r3, #1
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 80048dc:	f04f 33ff 	mov.w	r3, #4294967295
 80048e0:	623b      	str	r3, [r7, #32]
      name = NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01c      	beq.n	8004926 <osTimerNew+0xba>
        if (attr->name != NULL) {
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <osTimerNew+0x8e>
          name = attr->name;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d006      	beq.n	8004910 <osTimerNew+0xa4>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b2b      	cmp	r3, #43	; 0x2b
 8004908:	d902      	bls.n	8004910 <osTimerNew+0xa4>
          mem = 1;
 800490a:	2301      	movs	r3, #1
 800490c:	623b      	str	r3, [r7, #32]
 800490e:	e00c      	b.n	800492a <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d108      	bne.n	800492a <osTimerNew+0xbe>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <osTimerNew+0xbe>
            mem = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	623b      	str	r3, [r7, #32]
 8004924:	e001      	b.n	800492a <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d10c      	bne.n	800494a <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <osTimerNew+0x104>)
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493e:	2101      	movs	r1, #1
 8004940:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004942:	f001 fdd6 	bl	80064f2 <xTimerCreateStatic>
 8004946:	62b8      	str	r0, [r7, #40]	; 0x28
 8004948:	e00b      	b.n	8004962 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d108      	bne.n	8004962 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <osTimerNew+0x104>)
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004958:	2101      	movs	r1, #1
 800495a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800495c:	f001 fda8 	bl	80064b0 <xTimerCreate>
 8004960:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004964:	4618      	mov	r0, r3
 8004966:	3730      	adds	r7, #48	; 0x30
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	2000084c 	.word	0x2000084c
 8004970:	08004841 	.word	0x08004841

08004974 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	; 0x28
 8004978:	af02      	add	r7, sp, #8
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004982:	f3ef 8305 	mrs	r3, IPSR
 8004986:	617b      	str	r3, [r7, #20]
  return(result);
 8004988:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498e:	f3ef 8310 	mrs	r3, PRIMASK
 8004992:	613b      	str	r3, [r7, #16]
  return(result);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800499a:	f3ef 8311 	mrs	r3, BASEPRI
 800499e:	60fb      	str	r3, [r7, #12]
  return(result);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <osTimerStart+0x42>
 80049a6:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <osTimerStart+0x7c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d103      	bne.n	80049b6 <osTimerStart+0x42>
    stat = osErrorISR;
 80049ae:	f06f 0305 	mvn.w	r3, #5
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	e017      	b.n	80049e6 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d103      	bne.n	80049c4 <osTimerStart+0x50>
    stat = osErrorParameter;
 80049bc:	f06f 0303 	mvn.w	r3, #3
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	e010      	b.n	80049e6 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80049c4:	2300      	movs	r3, #0
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	2300      	movs	r3, #0
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	2104      	movs	r1, #4
 80049ce:	69b8      	ldr	r0, [r7, #24]
 80049d0:	f001 fe0e 	bl	80065f0 <xTimerGenericCommand>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d102      	bne.n	80049e0 <osTimerStart+0x6c>
      stat = osOK;
 80049da:	2300      	movs	r3, #0
 80049dc:	61fb      	str	r3, [r7, #28]
 80049de:	e002      	b.n	80049e6 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80049e0:	f06f 0302 	mvn.w	r3, #2
 80049e4:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80049e6:	69fb      	ldr	r3, [r7, #28]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3720      	adds	r7, #32
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	2000084c 	.word	0x2000084c

080049f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a07      	ldr	r2, [pc, #28]	; (8004a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4a06      	ldr	r2, [pc, #24]	; (8004a24 <vApplicationGetIdleTaskMemory+0x30>)
 8004a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2280      	movs	r2, #128	; 0x80
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20000850 	.word	0x20000850
 8004a24:	200008ac 	.word	0x200008ac

08004a28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4a07      	ldr	r2, [pc, #28]	; (8004a54 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4a06      	ldr	r2, [pc, #24]	; (8004a58 <vApplicationGetTimerTaskMemory+0x30>)
 8004a3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a46:	601a      	str	r2, [r3, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	20000aac 	.word	0x20000aac
 8004a58:	20000b08 	.word	0x20000b08

08004a5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f103 0208 	add.w	r2, r3, #8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f04f 32ff 	mov.w	r2, #4294967295
 8004a74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f103 0208 	add.w	r2, r3, #8
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f103 0208 	add.w	r2, r3, #8
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b085      	sub	sp, #20
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	601a      	str	r2, [r3, #0]
}
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004afe:	b480      	push	{r7}
 8004b00:	b085      	sub	sp, #20
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d103      	bne.n	8004b1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	e00c      	b.n	8004b38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3308      	adds	r3, #8
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e002      	b.n	8004b2c <vListInsert+0x2e>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d2f6      	bcs.n	8004b26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	601a      	str	r2, [r3, #0]
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6892      	ldr	r2, [r2, #8]
 8004b86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6852      	ldr	r2, [r2, #4]
 8004b90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d103      	bne.n	8004ba4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	1e5a      	subs	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10c      	bne.n	8004bf2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	b672      	cpsid	i
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	b662      	cpsie	i
 8004bec:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004bf2:	f002 f93b 	bl	8006e6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfe:	68f9      	ldr	r1, [r7, #12]
 8004c00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c02:	fb01 f303 	mul.w	r3, r1, r3
 8004c06:	441a      	add	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	3b01      	subs	r3, #1
 8004c24:	68f9      	ldr	r1, [r7, #12]
 8004c26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	441a      	add	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	22ff      	movs	r2, #255	; 0xff
 8004c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	22ff      	movs	r2, #255	; 0xff
 8004c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d114      	bne.n	8004c72 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01a      	beq.n	8004c86 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3310      	adds	r3, #16
 8004c54:	4618      	mov	r0, r3
 8004c56:	f001 f937 	bl	8005ec8 <xTaskRemoveFromEventList>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d012      	beq.n	8004c86 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <xQueueGenericReset+0xd0>)
 8004c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	e009      	b.n	8004c86 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3310      	adds	r3, #16
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff fef0 	bl	8004a5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3324      	adds	r3, #36	; 0x24
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff feeb 	bl	8004a5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c86:	f002 f925 	bl	8006ed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c8a:	2301      	movs	r3, #1
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	e000ed04 	.word	0xe000ed04

08004c98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08e      	sub	sp, #56	; 0x38
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10c      	bne.n	8004cc6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	b672      	cpsid	i
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	b662      	cpsie	i
 8004cc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10c      	bne.n	8004ce6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	b672      	cpsid	i
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	b662      	cpsie	i
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ce2:	bf00      	nop
 8004ce4:	e7fe      	b.n	8004ce4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <xQueueGenericCreateStatic+0x5a>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <xQueueGenericCreateStatic+0x5e>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <xQueueGenericCreateStatic+0x60>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10c      	bne.n	8004d16 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	b672      	cpsid	i
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	b662      	cpsie	i
 8004d10:	623b      	str	r3, [r7, #32]
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <xQueueGenericCreateStatic+0x8a>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <xQueueGenericCreateStatic+0x8e>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <xQueueGenericCreateStatic+0x90>
 8004d26:	2300      	movs	r3, #0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10c      	bne.n	8004d46 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d30:	b672      	cpsid	i
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	b662      	cpsie	i
 8004d40:	61fb      	str	r3, [r7, #28]
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d46:	2350      	movs	r3, #80	; 0x50
 8004d48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b50      	cmp	r3, #80	; 0x50
 8004d4e:	d00c      	beq.n	8004d6a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	b672      	cpsid	i
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	b662      	cpsie	i
 8004d64:	61bb      	str	r3, [r7, #24]
}
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d6a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00d      	beq.n	8004d92 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	4613      	mov	r3, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f805 	bl	8004d9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3730      	adds	r7, #48	; 0x30
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d103      	bne.n	8004db8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	e002      	b.n	8004dbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004dca:	2101      	movs	r1, #1
 8004dcc:	69b8      	ldr	r0, [r7, #24]
 8004dce:	f7ff fef9 	bl	8004bc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	78fa      	ldrb	r2, [r7, #3]
 8004dd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08e      	sub	sp, #56	; 0x38
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004df2:	2300      	movs	r3, #0
 8004df4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10c      	bne.n	8004e1a <xQueueGenericSend+0x36>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	b672      	cpsid	i
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	b662      	cpsie	i
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e16:	bf00      	nop
 8004e18:	e7fe      	b.n	8004e18 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d103      	bne.n	8004e28 <xQueueGenericSend+0x44>
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <xQueueGenericSend+0x48>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <xQueueGenericSend+0x4a>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10c      	bne.n	8004e4c <xQueueGenericSend+0x68>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	b672      	cpsid	i
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	b662      	cpsie	i
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e48:	bf00      	nop
 8004e4a:	e7fe      	b.n	8004e4a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d103      	bne.n	8004e5a <xQueueGenericSend+0x76>
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <xQueueGenericSend+0x7a>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <xQueueGenericSend+0x7c>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10c      	bne.n	8004e7e <xQueueGenericSend+0x9a>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	b672      	cpsid	i
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	b662      	cpsie	i
 8004e78:	623b      	str	r3, [r7, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	e7fe      	b.n	8004e7c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e7e:	f001 f9e9 	bl	8006254 <xTaskGetSchedulerState>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d102      	bne.n	8004e8e <xQueueGenericSend+0xaa>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <xQueueGenericSend+0xae>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <xQueueGenericSend+0xb0>
 8004e92:	2300      	movs	r3, #0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10c      	bne.n	8004eb2 <xQueueGenericSend+0xce>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	b672      	cpsid	i
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	b662      	cpsie	i
 8004eac:	61fb      	str	r3, [r7, #28]
}
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004eb2:	f001 ffdb 	bl	8006e6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d302      	bcc.n	8004ec8 <xQueueGenericSend+0xe4>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d129      	bne.n	8004f1c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ece:	f000 fa15 	bl	80052fc <prvCopyDataToQueue>
 8004ed2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d010      	beq.n	8004efe <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	3324      	adds	r3, #36	; 0x24
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fff1 	bl	8005ec8 <xTaskRemoveFromEventList>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d013      	beq.n	8004f14 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004eec:	4b3f      	ldr	r3, [pc, #252]	; (8004fec <xQueueGenericSend+0x208>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	e00a      	b.n	8004f14 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d007      	beq.n	8004f14 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f04:	4b39      	ldr	r3, [pc, #228]	; (8004fec <xQueueGenericSend+0x208>)
 8004f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f14:	f001 ffde 	bl	8006ed4 <vPortExitCritical>
				return pdPASS;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e063      	b.n	8004fe4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d103      	bne.n	8004f2a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f22:	f001 ffd7 	bl	8006ed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	e05c      	b.n	8004fe4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d106      	bne.n	8004f3e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f30:	f107 0314 	add.w	r3, r7, #20
 8004f34:	4618      	mov	r0, r3
 8004f36:	f001 f82d 	bl	8005f94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f3e:	f001 ffc9 	bl	8006ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f42:	f000 fd93 	bl	8005a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f46:	f001 ff91 	bl	8006e6c <vPortEnterCritical>
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f50:	b25b      	sxtb	r3, r3
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f56:	d103      	bne.n	8004f60 <xQueueGenericSend+0x17c>
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f66:	b25b      	sxtb	r3, r3
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d103      	bne.n	8004f76 <xQueueGenericSend+0x192>
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f76:	f001 ffad 	bl	8006ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f7a:	1d3a      	adds	r2, r7, #4
 8004f7c:	f107 0314 	add.w	r3, r7, #20
 8004f80:	4611      	mov	r1, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f001 f81c 	bl	8005fc0 <xTaskCheckForTimeOut>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d124      	bne.n	8004fd8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f90:	f000 faac 	bl	80054ec <prvIsQueueFull>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d018      	beq.n	8004fcc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	3310      	adds	r3, #16
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 ff3c 	bl	8005e20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004faa:	f000 fa37 	bl	800541c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004fae:	f000 fd6b 	bl	8005a88 <xTaskResumeAll>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f47f af7c 	bne.w	8004eb2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004fba:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <xQueueGenericSend+0x208>)
 8004fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	e772      	b.n	8004eb2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fce:	f000 fa25 	bl	800541c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fd2:	f000 fd59 	bl	8005a88 <xTaskResumeAll>
 8004fd6:	e76c      	b.n	8004eb2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fda:	f000 fa1f 	bl	800541c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fde:	f000 fd53 	bl	8005a88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004fe2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3738      	adds	r7, #56	; 0x38
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	e000ed04 	.word	0xe000ed04

08004ff0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08e      	sub	sp, #56	; 0x38
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10c      	bne.n	8005022 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	b672      	cpsid	i
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	b662      	cpsie	i
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d103      	bne.n	8005030 <xQueueGenericSendFromISR+0x40>
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <xQueueGenericSendFromISR+0x44>
 8005030:	2301      	movs	r3, #1
 8005032:	e000      	b.n	8005036 <xQueueGenericSendFromISR+0x46>
 8005034:	2300      	movs	r3, #0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10c      	bne.n	8005054 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	b672      	cpsid	i
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	b662      	cpsie	i
 800504e:	623b      	str	r3, [r7, #32]
}
 8005050:	bf00      	nop
 8005052:	e7fe      	b.n	8005052 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d103      	bne.n	8005062 <xQueueGenericSendFromISR+0x72>
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <xQueueGenericSendFromISR+0x76>
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <xQueueGenericSendFromISR+0x78>
 8005066:	2300      	movs	r3, #0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10c      	bne.n	8005086 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	b672      	cpsid	i
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	b662      	cpsie	i
 8005080:	61fb      	str	r3, [r7, #28]
}
 8005082:	bf00      	nop
 8005084:	e7fe      	b.n	8005084 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005086:	f001 ffd9 	bl	800703c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800508a:	f3ef 8211 	mrs	r2, BASEPRI
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	b672      	cpsid	i
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	b662      	cpsie	i
 80050a2:	61ba      	str	r2, [r7, #24]
 80050a4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80050a6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d302      	bcc.n	80050bc <xQueueGenericSendFromISR+0xcc>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d12c      	bne.n	8005116 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050cc:	f000 f916 	bl	80052fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050d0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d112      	bne.n	8005100 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d016      	beq.n	8005110 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	3324      	adds	r3, #36	; 0x24
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 feee 	bl	8005ec8 <xTaskRemoveFromEventList>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00e      	beq.n	8005110 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00b      	beq.n	8005110 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e007      	b.n	8005110 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005100:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005104:	3301      	adds	r3, #1
 8005106:	b2db      	uxtb	r3, r3
 8005108:	b25a      	sxtb	r2, r3
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005110:	2301      	movs	r3, #1
 8005112:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005114:	e001      	b.n	800511a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005116:	2300      	movs	r3, #0
 8005118:	637b      	str	r3, [r7, #52]	; 0x34
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005124:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005128:	4618      	mov	r0, r3
 800512a:	3738      	adds	r7, #56	; 0x38
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08c      	sub	sp, #48	; 0x30
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800513c:	2300      	movs	r3, #0
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10c      	bne.n	8005164 <xQueueReceive+0x34>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	b672      	cpsid	i
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	b662      	cpsie	i
 800515e:	623b      	str	r3, [r7, #32]
}
 8005160:	bf00      	nop
 8005162:	e7fe      	b.n	8005162 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d103      	bne.n	8005172 <xQueueReceive+0x42>
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <xQueueReceive+0x46>
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <xQueueReceive+0x48>
 8005176:	2300      	movs	r3, #0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10c      	bne.n	8005196 <xQueueReceive+0x66>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	b672      	cpsid	i
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	b662      	cpsie	i
 8005190:	61fb      	str	r3, [r7, #28]
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005196:	f001 f85d 	bl	8006254 <xTaskGetSchedulerState>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d102      	bne.n	80051a6 <xQueueReceive+0x76>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <xQueueReceive+0x7a>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <xQueueReceive+0x7c>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10c      	bne.n	80051ca <xQueueReceive+0x9a>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	b672      	cpsid	i
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	b662      	cpsie	i
 80051c4:	61bb      	str	r3, [r7, #24]
}
 80051c6:	bf00      	nop
 80051c8:	e7fe      	b.n	80051c8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051ca:	f001 fe4f 	bl	8006e6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d01f      	beq.n	800521a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051de:	f000 f8f7 	bl	80053d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	1e5a      	subs	r2, r3, #1
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00f      	beq.n	8005212 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	3310      	adds	r3, #16
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fe66 	bl	8005ec8 <xTaskRemoveFromEventList>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005202:	4b3d      	ldr	r3, [pc, #244]	; (80052f8 <xQueueReceive+0x1c8>)
 8005204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005212:	f001 fe5f 	bl	8006ed4 <vPortExitCritical>
				return pdPASS;
 8005216:	2301      	movs	r3, #1
 8005218:	e069      	b.n	80052ee <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d103      	bne.n	8005228 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005220:	f001 fe58 	bl	8006ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005224:	2300      	movs	r3, #0
 8005226:	e062      	b.n	80052ee <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800522e:	f107 0310 	add.w	r3, r7, #16
 8005232:	4618      	mov	r0, r3
 8005234:	f000 feae 	bl	8005f94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005238:	2301      	movs	r3, #1
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800523c:	f001 fe4a 	bl	8006ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005240:	f000 fc14 	bl	8005a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005244:	f001 fe12 	bl	8006e6c <vPortEnterCritical>
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800524e:	b25b      	sxtb	r3, r3
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d103      	bne.n	800525e <xQueueReceive+0x12e>
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005264:	b25b      	sxtb	r3, r3
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d103      	bne.n	8005274 <xQueueReceive+0x144>
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005274:	f001 fe2e 	bl	8006ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005278:	1d3a      	adds	r2, r7, #4
 800527a:	f107 0310 	add.w	r3, r7, #16
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fe9d 	bl	8005fc0 <xTaskCheckForTimeOut>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d123      	bne.n	80052d4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800528c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800528e:	f000 f917 	bl	80054c0 <prvIsQueueEmpty>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d017      	beq.n	80052c8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	3324      	adds	r3, #36	; 0x24
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	4611      	mov	r1, r2
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fdbd 	bl	8005e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a8:	f000 f8b8 	bl	800541c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052ac:	f000 fbec 	bl	8005a88 <xTaskResumeAll>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d189      	bne.n	80051ca <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80052b6:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <xQueueReceive+0x1c8>)
 80052b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	e780      	b.n	80051ca <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ca:	f000 f8a7 	bl	800541c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052ce:	f000 fbdb 	bl	8005a88 <xTaskResumeAll>
 80052d2:	e77a      	b.n	80051ca <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80052d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052d6:	f000 f8a1 	bl	800541c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052da:	f000 fbd5 	bl	8005a88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052e0:	f000 f8ee 	bl	80054c0 <prvIsQueueEmpty>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f43f af6f 	beq.w	80051ca <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3730      	adds	r7, #48	; 0x30
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	e000ed04 	.word	0xe000ed04

080052fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10d      	bne.n	8005336 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d14d      	bne.n	80053be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	4618      	mov	r0, r3
 8005328:	f000 ffb2 	bl	8006290 <xTaskPriorityDisinherit>
 800532c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	609a      	str	r2, [r3, #8]
 8005334:	e043      	b.n	80053be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d119      	bne.n	8005370 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6858      	ldr	r0, [r3, #4]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	461a      	mov	r2, r3
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	f002 f8c4 	bl	80074d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	441a      	add	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	429a      	cmp	r2, r3
 8005364:	d32b      	bcc.n	80053be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	e026      	b.n	80053be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	68d8      	ldr	r0, [r3, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	461a      	mov	r2, r3
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	f002 f8aa 	bl	80074d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	425b      	negs	r3, r3
 800538a:	441a      	add	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d207      	bcs.n	80053ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	425b      	negs	r3, r3
 80053a6:	441a      	add	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d105      	bne.n	80053be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80053c6:	697b      	ldr	r3, [r7, #20]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d018      	beq.n	8005414 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	441a      	add	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d303      	bcc.n	8005404 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68d9      	ldr	r1, [r3, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	461a      	mov	r2, r3
 800540e:	6838      	ldr	r0, [r7, #0]
 8005410:	f002 f860 	bl	80074d4 <memcpy>
	}
}
 8005414:	bf00      	nop
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005424:	f001 fd22 	bl	8006e6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800542e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005430:	e011      	b.n	8005456 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	d012      	beq.n	8005460 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3324      	adds	r3, #36	; 0x24
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fd42 	bl	8005ec8 <xTaskRemoveFromEventList>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800544a:	f000 fe1f 	bl	800608c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	3b01      	subs	r3, #1
 8005452:	b2db      	uxtb	r3, r3
 8005454:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800545a:	2b00      	cmp	r3, #0
 800545c:	dce9      	bgt.n	8005432 <prvUnlockQueue+0x16>
 800545e:	e000      	b.n	8005462 <prvUnlockQueue+0x46>
					break;
 8005460:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	22ff      	movs	r2, #255	; 0xff
 8005466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800546a:	f001 fd33 	bl	8006ed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800546e:	f001 fcfd 	bl	8006e6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005478:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800547a:	e011      	b.n	80054a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d012      	beq.n	80054aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3310      	adds	r3, #16
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fd1d 	bl	8005ec8 <xTaskRemoveFromEventList>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005494:	f000 fdfa 	bl	800608c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005498:	7bbb      	ldrb	r3, [r7, #14]
 800549a:	3b01      	subs	r3, #1
 800549c:	b2db      	uxtb	r3, r3
 800549e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	dce9      	bgt.n	800547c <prvUnlockQueue+0x60>
 80054a8:	e000      	b.n	80054ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80054aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	22ff      	movs	r2, #255	; 0xff
 80054b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80054b4:	f001 fd0e 	bl	8006ed4 <vPortExitCritical>
}
 80054b8:	bf00      	nop
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054c8:	f001 fcd0 	bl	8006e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d102      	bne.n	80054da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80054d4:	2301      	movs	r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	e001      	b.n	80054de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054de:	f001 fcf9 	bl	8006ed4 <vPortExitCritical>

	return xReturn;
 80054e2:	68fb      	ldr	r3, [r7, #12]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054f4:	f001 fcba 	bl	8006e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005500:	429a      	cmp	r2, r3
 8005502:	d102      	bne.n	800550a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005504:	2301      	movs	r3, #1
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	e001      	b.n	800550e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800550e:	f001 fce1 	bl	8006ed4 <vPortExitCritical>

	return xReturn;
 8005512:	68fb      	ldr	r3, [r7, #12]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	e014      	b.n	8005556 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800552c:	4a0f      	ldr	r2, [pc, #60]	; (800556c <vQueueAddToRegistry+0x50>)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005538:	490c      	ldr	r1, [pc, #48]	; (800556c <vQueueAddToRegistry+0x50>)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005542:	4a0a      	ldr	r2, [pc, #40]	; (800556c <vQueueAddToRegistry+0x50>)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	4413      	add	r3, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800554e:	e006      	b.n	800555e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3301      	adds	r3, #1
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b07      	cmp	r3, #7
 800555a:	d9e7      	bls.n	800552c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800555c:	bf00      	nop
 800555e:	bf00      	nop
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20000f08 	.word	0x20000f08

08005570 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005580:	f001 fc74 	bl	8006e6c <vPortEnterCritical>
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800558a:	b25b      	sxtb	r3, r3
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d103      	bne.n	800559a <vQueueWaitForMessageRestricted+0x2a>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055a0:	b25b      	sxtb	r3, r3
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	d103      	bne.n	80055b0 <vQueueWaitForMessageRestricted+0x40>
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055b0:	f001 fc90 	bl	8006ed4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	3324      	adds	r3, #36	; 0x24
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 fc51 	bl	8005e6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80055ca:	6978      	ldr	r0, [r7, #20]
 80055cc:	f7ff ff26 	bl	800541c <prvUnlockQueue>
	}
 80055d0:	bf00      	nop
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08e      	sub	sp, #56	; 0x38
 80055dc:	af04      	add	r7, sp, #16
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10c      	bne.n	8005606 <xTaskCreateStatic+0x2e>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	b672      	cpsid	i
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	b662      	cpsie	i
 8005600:	623b      	str	r3, [r7, #32]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10c      	bne.n	8005626 <xTaskCreateStatic+0x4e>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	b672      	cpsid	i
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	b662      	cpsie	i
 8005620:	61fb      	str	r3, [r7, #28]
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005626:	235c      	movs	r3, #92	; 0x5c
 8005628:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2b5c      	cmp	r3, #92	; 0x5c
 800562e:	d00c      	beq.n	800564a <xTaskCreateStatic+0x72>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	b672      	cpsid	i
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	b662      	cpsie	i
 8005644:	61bb      	str	r3, [r7, #24]
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800564a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	2b00      	cmp	r3, #0
 8005650:	d01e      	beq.n	8005690 <xTaskCreateStatic+0xb8>
 8005652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01b      	beq.n	8005690 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005660:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	2202      	movs	r2, #2
 8005666:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800566a:	2300      	movs	r3, #0
 800566c:	9303      	str	r3, [sp, #12]
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	9302      	str	r3, [sp, #8]
 8005672:	f107 0314 	add.w	r3, r7, #20
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f850 	bl	8005728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800568a:	f000 f8df 	bl	800584c <prvAddNewTaskToReadyList>
 800568e:	e001      	b.n	8005694 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005694:	697b      	ldr	r3, [r7, #20]
	}
 8005696:	4618      	mov	r0, r3
 8005698:	3728      	adds	r7, #40	; 0x28
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b08c      	sub	sp, #48	; 0x30
 80056a2:	af04      	add	r7, sp, #16
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	603b      	str	r3, [r7, #0]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056ae:	88fb      	ldrh	r3, [r7, #6]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 fd06 	bl	80070c4 <pvPortMalloc>
 80056b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00e      	beq.n	80056de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80056c0:	205c      	movs	r0, #92	; 0x5c
 80056c2:	f001 fcff 	bl	80070c4 <pvPortMalloc>
 80056c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
 80056d4:	e005      	b.n	80056e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056d6:	6978      	ldr	r0, [r7, #20]
 80056d8:	f001 fdbe 	bl	8007258 <vPortFree>
 80056dc:	e001      	b.n	80056e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d017      	beq.n	8005718 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056f0:	88fa      	ldrh	r2, [r7, #6]
 80056f2:	2300      	movs	r3, #0
 80056f4:	9303      	str	r3, [sp, #12]
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	9302      	str	r3, [sp, #8]
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	9301      	str	r3, [sp, #4]
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 f80e 	bl	8005728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800570c:	69f8      	ldr	r0, [r7, #28]
 800570e:	f000 f89d 	bl	800584c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005712:	2301      	movs	r3, #1
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	e002      	b.n	800571e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005718:	f04f 33ff 	mov.w	r3, #4294967295
 800571c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800571e:	69bb      	ldr	r3, [r7, #24]
	}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	461a      	mov	r2, r3
 8005740:	21a5      	movs	r1, #165	; 0xa5
 8005742:	f001 fed5 	bl	80074f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005750:	440b      	add	r3, r1
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	f023 0307 	bic.w	r3, r3, #7
 800575e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00c      	beq.n	8005784 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	b672      	cpsid	i
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	b662      	cpsie	i
 800577e:	617b      	str	r3, [r7, #20]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01f      	beq.n	80057ca <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800578a:	2300      	movs	r3, #0
 800578c:	61fb      	str	r3, [r7, #28]
 800578e:	e012      	b.n	80057b6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	4413      	add	r3, r2
 8005796:	7819      	ldrb	r1, [r3, #0]
 8005798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	3334      	adds	r3, #52	; 0x34
 80057a0:	460a      	mov	r2, r1
 80057a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	4413      	add	r3, r2
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d006      	beq.n	80057be <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	3301      	adds	r3, #1
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	2b0f      	cmp	r3, #15
 80057ba:	d9e9      	bls.n	8005790 <prvInitialiseNewTask+0x68>
 80057bc:	e000      	b.n	80057c0 <prvInitialiseNewTask+0x98>
			{
				break;
 80057be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057c8:	e003      	b.n	80057d2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	2b37      	cmp	r3, #55	; 0x37
 80057d6:	d901      	bls.n	80057dc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057d8:	2337      	movs	r3, #55	; 0x37
 80057da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	2200      	movs	r2, #0
 80057ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	3304      	adds	r3, #4
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff f952 	bl	8004a9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	3318      	adds	r3, #24
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff f94d 	bl	8004a9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005806:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005816:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	2200      	movs	r2, #0
 800581c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	68f9      	ldr	r1, [r7, #12]
 800582a:	69b8      	ldr	r0, [r7, #24]
 800582c:	f001 fa14 	bl	8006c58 <pxPortInitialiseStack>
 8005830:	4602      	mov	r2, r0
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005842:	bf00      	nop
 8005844:	3720      	adds	r7, #32
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005854:	f001 fb0a 	bl	8006e6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005858:	4b2d      	ldr	r3, [pc, #180]	; (8005910 <prvAddNewTaskToReadyList+0xc4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3301      	adds	r3, #1
 800585e:	4a2c      	ldr	r2, [pc, #176]	; (8005910 <prvAddNewTaskToReadyList+0xc4>)
 8005860:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005862:	4b2c      	ldr	r3, [pc, #176]	; (8005914 <prvAddNewTaskToReadyList+0xc8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d109      	bne.n	800587e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800586a:	4a2a      	ldr	r2, [pc, #168]	; (8005914 <prvAddNewTaskToReadyList+0xc8>)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005870:	4b27      	ldr	r3, [pc, #156]	; (8005910 <prvAddNewTaskToReadyList+0xc4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d110      	bne.n	800589a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005878:	f000 fc2c 	bl	80060d4 <prvInitialiseTaskLists>
 800587c:	e00d      	b.n	800589a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800587e:	4b26      	ldr	r3, [pc, #152]	; (8005918 <prvAddNewTaskToReadyList+0xcc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005886:	4b23      	ldr	r3, [pc, #140]	; (8005914 <prvAddNewTaskToReadyList+0xc8>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	429a      	cmp	r2, r3
 8005892:	d802      	bhi.n	800589a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005894:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <prvAddNewTaskToReadyList+0xc8>)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800589a:	4b20      	ldr	r3, [pc, #128]	; (800591c <prvAddNewTaskToReadyList+0xd0>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3301      	adds	r3, #1
 80058a0:	4a1e      	ldr	r2, [pc, #120]	; (800591c <prvAddNewTaskToReadyList+0xd0>)
 80058a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80058a4:	4b1d      	ldr	r3, [pc, #116]	; (800591c <prvAddNewTaskToReadyList+0xd0>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	4b1b      	ldr	r3, [pc, #108]	; (8005920 <prvAddNewTaskToReadyList+0xd4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d903      	bls.n	80058c0 <prvAddNewTaskToReadyList+0x74>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	4a18      	ldr	r2, [pc, #96]	; (8005920 <prvAddNewTaskToReadyList+0xd4>)
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4a15      	ldr	r2, [pc, #84]	; (8005924 <prvAddNewTaskToReadyList+0xd8>)
 80058ce:	441a      	add	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f7ff f8ed 	bl	8004ab6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058dc:	f001 fafa 	bl	8006ed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058e0:	4b0d      	ldr	r3, [pc, #52]	; (8005918 <prvAddNewTaskToReadyList+0xcc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00e      	beq.n	8005906 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <prvAddNewTaskToReadyList+0xc8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d207      	bcs.n	8005906 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058f6:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <prvAddNewTaskToReadyList+0xdc>)
 80058f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	2000141c 	.word	0x2000141c
 8005914:	20000f48 	.word	0x20000f48
 8005918:	20001428 	.word	0x20001428
 800591c:	20001438 	.word	0x20001438
 8005920:	20001424 	.word	0x20001424
 8005924:	20000f4c 	.word	0x20000f4c
 8005928:	e000ed04 	.word	0xe000ed04

0800592c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d019      	beq.n	8005972 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800593e:	4b14      	ldr	r3, [pc, #80]	; (8005990 <vTaskDelay+0x64>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00c      	beq.n	8005960 <vTaskDelay+0x34>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	b672      	cpsid	i
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	b662      	cpsie	i
 800595a:	60bb      	str	r3, [r7, #8]
}
 800595c:	bf00      	nop
 800595e:	e7fe      	b.n	800595e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005960:	f000 f884 	bl	8005a6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005964:	2100      	movs	r1, #0
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fd04 	bl	8006374 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800596c:	f000 f88c 	bl	8005a88 <xTaskResumeAll>
 8005970:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d107      	bne.n	8005988 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <vTaskDelay+0x68>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005988:	bf00      	nop
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20001444 	.word	0x20001444
 8005994:	e000ed04 	.word	0xe000ed04

08005998 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	; 0x28
 800599c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059a6:	463a      	mov	r2, r7
 80059a8:	1d39      	adds	r1, r7, #4
 80059aa:	f107 0308 	add.w	r3, r7, #8
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff f820 	bl	80049f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	9202      	str	r2, [sp, #8]
 80059bc:	9301      	str	r3, [sp, #4]
 80059be:	2300      	movs	r3, #0
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	2300      	movs	r3, #0
 80059c4:	460a      	mov	r2, r1
 80059c6:	4923      	ldr	r1, [pc, #140]	; (8005a54 <vTaskStartScheduler+0xbc>)
 80059c8:	4823      	ldr	r0, [pc, #140]	; (8005a58 <vTaskStartScheduler+0xc0>)
 80059ca:	f7ff fe05 	bl	80055d8 <xTaskCreateStatic>
 80059ce:	4603      	mov	r3, r0
 80059d0:	4a22      	ldr	r2, [pc, #136]	; (8005a5c <vTaskStartScheduler+0xc4>)
 80059d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059d4:	4b21      	ldr	r3, [pc, #132]	; (8005a5c <vTaskStartScheduler+0xc4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059dc:	2301      	movs	r3, #1
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	e001      	b.n	80059e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d102      	bne.n	80059f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80059ec:	f000 fd16 	bl	800641c <xTimerCreateTimerTask>
 80059f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d118      	bne.n	8005a2a <vTaskStartScheduler+0x92>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	b672      	cpsid	i
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	b662      	cpsie	i
 8005a0c:	613b      	str	r3, [r7, #16]
}
 8005a0e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a10:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <vTaskStartScheduler+0xc8>)
 8005a12:	f04f 32ff 	mov.w	r2, #4294967295
 8005a16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a18:	4b12      	ldr	r3, [pc, #72]	; (8005a64 <vTaskStartScheduler+0xcc>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a1e:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <vTaskStartScheduler+0xd0>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a24:	f001 f9a4 	bl	8006d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a28:	e010      	b.n	8005a4c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d10c      	bne.n	8005a4c <vTaskStartScheduler+0xb4>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	b672      	cpsid	i
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	b662      	cpsie	i
 8005a46:	60fb      	str	r3, [r7, #12]
}
 8005a48:	bf00      	nop
 8005a4a:	e7fe      	b.n	8005a4a <vTaskStartScheduler+0xb2>
}
 8005a4c:	bf00      	nop
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	08007534 	.word	0x08007534
 8005a58:	080060a5 	.word	0x080060a5
 8005a5c:	20001440 	.word	0x20001440
 8005a60:	2000143c 	.word	0x2000143c
 8005a64:	20001428 	.word	0x20001428
 8005a68:	20001420 	.word	0x20001420

08005a6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a70:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <vTaskSuspendAll+0x18>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	4a03      	ldr	r2, [pc, #12]	; (8005a84 <vTaskSuspendAll+0x18>)
 8005a78:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005a7a:	bf00      	nop
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	20001444 	.word	0x20001444

08005a88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a96:	4b43      	ldr	r3, [pc, #268]	; (8005ba4 <xTaskResumeAll+0x11c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10c      	bne.n	8005ab8 <xTaskResumeAll+0x30>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	b672      	cpsid	i
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	b662      	cpsie	i
 8005ab2:	603b      	str	r3, [r7, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	e7fe      	b.n	8005ab6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ab8:	f001 f9d8 	bl	8006e6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005abc:	4b39      	ldr	r3, [pc, #228]	; (8005ba4 <xTaskResumeAll+0x11c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	4a38      	ldr	r2, [pc, #224]	; (8005ba4 <xTaskResumeAll+0x11c>)
 8005ac4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ac6:	4b37      	ldr	r3, [pc, #220]	; (8005ba4 <xTaskResumeAll+0x11c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d162      	bne.n	8005b94 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ace:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <xTaskResumeAll+0x120>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d05e      	beq.n	8005b94 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ad6:	e02f      	b.n	8005b38 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad8:	4b34      	ldr	r3, [pc, #208]	; (8005bac <xTaskResumeAll+0x124>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3318      	adds	r3, #24
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff f843 	bl	8004b70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff f83e 	bl	8004b70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af8:	4b2d      	ldr	r3, [pc, #180]	; (8005bb0 <xTaskResumeAll+0x128>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d903      	bls.n	8005b08 <xTaskResumeAll+0x80>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	4a2a      	ldr	r2, [pc, #168]	; (8005bb0 <xTaskResumeAll+0x128>)
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4a27      	ldr	r2, [pc, #156]	; (8005bb4 <xTaskResumeAll+0x12c>)
 8005b16:	441a      	add	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f7fe ffc9 	bl	8004ab6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b28:	4b23      	ldr	r3, [pc, #140]	; (8005bb8 <xTaskResumeAll+0x130>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d302      	bcc.n	8005b38 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005b32:	4b22      	ldr	r3, [pc, #136]	; (8005bbc <xTaskResumeAll+0x134>)
 8005b34:	2201      	movs	r2, #1
 8005b36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b38:	4b1c      	ldr	r3, [pc, #112]	; (8005bac <xTaskResumeAll+0x124>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1cb      	bne.n	8005ad8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b46:	f000 fb65 	bl	8006214 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b4a:	4b1d      	ldr	r3, [pc, #116]	; (8005bc0 <xTaskResumeAll+0x138>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d010      	beq.n	8005b78 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b56:	f000 f847 	bl	8005be8 <xTaskIncrementTick>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005b60:	4b16      	ldr	r3, [pc, #88]	; (8005bbc <xTaskResumeAll+0x134>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f1      	bne.n	8005b56 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005b72:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <xTaskResumeAll+0x138>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b78:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <xTaskResumeAll+0x134>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b80:	2301      	movs	r3, #1
 8005b82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b84:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <xTaskResumeAll+0x13c>)
 8005b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b94:	f001 f99e 	bl	8006ed4 <vPortExitCritical>

	return xAlreadyYielded;
 8005b98:	68bb      	ldr	r3, [r7, #8]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20001444 	.word	0x20001444
 8005ba8:	2000141c 	.word	0x2000141c
 8005bac:	200013dc 	.word	0x200013dc
 8005bb0:	20001424 	.word	0x20001424
 8005bb4:	20000f4c 	.word	0x20000f4c
 8005bb8:	20000f48 	.word	0x20000f48
 8005bbc:	20001430 	.word	0x20001430
 8005bc0:	2000142c 	.word	0x2000142c
 8005bc4:	e000ed04 	.word	0xe000ed04

08005bc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005bce:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <xTaskGetTickCount+0x1c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005bd4:	687b      	ldr	r3, [r7, #4]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20001420 	.word	0x20001420

08005be8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bf2:	4b50      	ldr	r3, [pc, #320]	; (8005d34 <xTaskIncrementTick+0x14c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f040 808b 	bne.w	8005d12 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bfc:	4b4e      	ldr	r3, [pc, #312]	; (8005d38 <xTaskIncrementTick+0x150>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3301      	adds	r3, #1
 8005c02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c04:	4a4c      	ldr	r2, [pc, #304]	; (8005d38 <xTaskIncrementTick+0x150>)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d122      	bne.n	8005c56 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c10:	4b4a      	ldr	r3, [pc, #296]	; (8005d3c <xTaskIncrementTick+0x154>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00c      	beq.n	8005c34 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	b672      	cpsid	i
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	b662      	cpsie	i
 8005c2e:	603b      	str	r3, [r7, #0]
}
 8005c30:	bf00      	nop
 8005c32:	e7fe      	b.n	8005c32 <xTaskIncrementTick+0x4a>
 8005c34:	4b41      	ldr	r3, [pc, #260]	; (8005d3c <xTaskIncrementTick+0x154>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	4b41      	ldr	r3, [pc, #260]	; (8005d40 <xTaskIncrementTick+0x158>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a3f      	ldr	r2, [pc, #252]	; (8005d3c <xTaskIncrementTick+0x154>)
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	4a3f      	ldr	r2, [pc, #252]	; (8005d40 <xTaskIncrementTick+0x158>)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	4b3e      	ldr	r3, [pc, #248]	; (8005d44 <xTaskIncrementTick+0x15c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	4a3d      	ldr	r2, [pc, #244]	; (8005d44 <xTaskIncrementTick+0x15c>)
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	f000 fadf 	bl	8006214 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c56:	4b3c      	ldr	r3, [pc, #240]	; (8005d48 <xTaskIncrementTick+0x160>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d349      	bcc.n	8005cf4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c60:	4b36      	ldr	r3, [pc, #216]	; (8005d3c <xTaskIncrementTick+0x154>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c6a:	4b37      	ldr	r3, [pc, #220]	; (8005d48 <xTaskIncrementTick+0x160>)
 8005c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c70:	601a      	str	r2, [r3, #0]
					break;
 8005c72:	e03f      	b.n	8005cf4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c74:	4b31      	ldr	r3, [pc, #196]	; (8005d3c <xTaskIncrementTick+0x154>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d203      	bcs.n	8005c94 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c8c:	4a2e      	ldr	r2, [pc, #184]	; (8005d48 <xTaskIncrementTick+0x160>)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c92:	e02f      	b.n	8005cf4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe ff69 	bl	8004b70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	3318      	adds	r3, #24
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe ff60 	bl	8004b70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb4:	4b25      	ldr	r3, [pc, #148]	; (8005d4c <xTaskIncrementTick+0x164>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d903      	bls.n	8005cc4 <xTaskIncrementTick+0xdc>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	4a22      	ldr	r2, [pc, #136]	; (8005d4c <xTaskIncrementTick+0x164>)
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4a1f      	ldr	r2, [pc, #124]	; (8005d50 <xTaskIncrementTick+0x168>)
 8005cd2:	441a      	add	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	f7fe feeb 	bl	8004ab6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	4b1b      	ldr	r3, [pc, #108]	; (8005d54 <xTaskIncrementTick+0x16c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d3b8      	bcc.n	8005c60 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cf2:	e7b5      	b.n	8005c60 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cf4:	4b17      	ldr	r3, [pc, #92]	; (8005d54 <xTaskIncrementTick+0x16c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfa:	4915      	ldr	r1, [pc, #84]	; (8005d50 <xTaskIncrementTick+0x168>)
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d907      	bls.n	8005d1c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	e004      	b.n	8005d1c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d12:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <xTaskIncrementTick+0x170>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3301      	adds	r3, #1
 8005d18:	4a0f      	ldr	r2, [pc, #60]	; (8005d58 <xTaskIncrementTick+0x170>)
 8005d1a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d1c:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <xTaskIncrementTick+0x174>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005d24:	2301      	movs	r3, #1
 8005d26:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d28:	697b      	ldr	r3, [r7, #20]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20001444 	.word	0x20001444
 8005d38:	20001420 	.word	0x20001420
 8005d3c:	200013d4 	.word	0x200013d4
 8005d40:	200013d8 	.word	0x200013d8
 8005d44:	20001434 	.word	0x20001434
 8005d48:	2000143c 	.word	0x2000143c
 8005d4c:	20001424 	.word	0x20001424
 8005d50:	20000f4c 	.word	0x20000f4c
 8005d54:	20000f48 	.word	0x20000f48
 8005d58:	2000142c 	.word	0x2000142c
 8005d5c:	20001430 	.word	0x20001430

08005d60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d66:	4b29      	ldr	r3, [pc, #164]	; (8005e0c <vTaskSwitchContext+0xac>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d6e:	4b28      	ldr	r3, [pc, #160]	; (8005e10 <vTaskSwitchContext+0xb0>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d74:	e043      	b.n	8005dfe <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8005d76:	4b26      	ldr	r3, [pc, #152]	; (8005e10 <vTaskSwitchContext+0xb0>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d7c:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <vTaskSwitchContext+0xb4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	e012      	b.n	8005daa <vTaskSwitchContext+0x4a>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10c      	bne.n	8005da4 <vTaskSwitchContext+0x44>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	b672      	cpsid	i
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	b662      	cpsie	i
 8005d9e:	607b      	str	r3, [r7, #4]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <vTaskSwitchContext+0x42>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	491b      	ldr	r1, [pc, #108]	; (8005e18 <vTaskSwitchContext+0xb8>)
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0e2      	beq.n	8005d84 <vTaskSwitchContext+0x24>
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4a13      	ldr	r2, [pc, #76]	; (8005e18 <vTaskSwitchContext+0xb8>)
 8005dca:	4413      	add	r3, r2
 8005dcc:	60bb      	str	r3, [r7, #8]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	605a      	str	r2, [r3, #4]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	3308      	adds	r3, #8
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d104      	bne.n	8005dee <vTaskSwitchContext+0x8e>
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	605a      	str	r2, [r3, #4]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	4a09      	ldr	r2, [pc, #36]	; (8005e1c <vTaskSwitchContext+0xbc>)
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	4a06      	ldr	r2, [pc, #24]	; (8005e14 <vTaskSwitchContext+0xb4>)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6013      	str	r3, [r2, #0]
}
 8005dfe:	bf00      	nop
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	20001444 	.word	0x20001444
 8005e10:	20001430 	.word	0x20001430
 8005e14:	20001424 	.word	0x20001424
 8005e18:	20000f4c 	.word	0x20000f4c
 8005e1c:	20000f48 	.word	0x20000f48

08005e20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10c      	bne.n	8005e4a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	b672      	cpsid	i
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	b662      	cpsie	i
 8005e44:	60fb      	str	r3, [r7, #12]
}
 8005e46:	bf00      	nop
 8005e48:	e7fe      	b.n	8005e48 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e4a:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <vTaskPlaceOnEventList+0x48>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3318      	adds	r3, #24
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7fe fe53 	bl	8004afe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e58:	2101      	movs	r1, #1
 8005e5a:	6838      	ldr	r0, [r7, #0]
 8005e5c:	f000 fa8a 	bl	8006374 <prvAddCurrentTaskToDelayedList>
}
 8005e60:	bf00      	nop
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	20000f48 	.word	0x20000f48

08005e6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10c      	bne.n	8005e98 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	b672      	cpsid	i
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	b662      	cpsie	i
 8005e92:	617b      	str	r3, [r7, #20]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <vTaskPlaceOnEventListRestricted+0x58>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3318      	adds	r3, #24
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7fe fe08 	bl	8004ab6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005eac:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	68b8      	ldr	r0, [r7, #8]
 8005eb6:	f000 fa5d 	bl	8006374 <prvAddCurrentTaskToDelayedList>
	}
 8005eba:	bf00      	nop
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000f48 	.word	0x20000f48

08005ec8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10c      	bne.n	8005ef8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	b672      	cpsid	i
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	b662      	cpsie	i
 8005ef2:	60fb      	str	r3, [r7, #12]
}
 8005ef4:	bf00      	nop
 8005ef6:	e7fe      	b.n	8005ef6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	3318      	adds	r3, #24
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fe fe37 	bl	8004b70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f02:	4b1e      	ldr	r3, [pc, #120]	; (8005f7c <xTaskRemoveFromEventList+0xb4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d11d      	bne.n	8005f46 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe fe2e 	bl	8004b70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f18:	4b19      	ldr	r3, [pc, #100]	; (8005f80 <xTaskRemoveFromEventList+0xb8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d903      	bls.n	8005f28 <xTaskRemoveFromEventList+0x60>
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f24:	4a16      	ldr	r2, [pc, #88]	; (8005f80 <xTaskRemoveFromEventList+0xb8>)
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4a13      	ldr	r2, [pc, #76]	; (8005f84 <xTaskRemoveFromEventList+0xbc>)
 8005f36:	441a      	add	r2, r3
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	f7fe fdb9 	bl	8004ab6 <vListInsertEnd>
 8005f44:	e005      	b.n	8005f52 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	3318      	adds	r3, #24
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	480e      	ldr	r0, [pc, #56]	; (8005f88 <xTaskRemoveFromEventList+0xc0>)
 8005f4e:	f7fe fdb2 	bl	8004ab6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f56:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <xTaskRemoveFromEventList+0xc4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d905      	bls.n	8005f6c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f60:	2301      	movs	r3, #1
 8005f62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f64:	4b0a      	ldr	r3, [pc, #40]	; (8005f90 <xTaskRemoveFromEventList+0xc8>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	e001      	b.n	8005f70 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f70:	697b      	ldr	r3, [r7, #20]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20001444 	.word	0x20001444
 8005f80:	20001424 	.word	0x20001424
 8005f84:	20000f4c 	.word	0x20000f4c
 8005f88:	200013dc 	.word	0x200013dc
 8005f8c:	20000f48 	.word	0x20000f48
 8005f90:	20001430 	.word	0x20001430

08005f94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <vTaskInternalSetTimeOutState+0x24>)
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fa4:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <vTaskInternalSetTimeOutState+0x28>)
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	605a      	str	r2, [r3, #4]
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	20001434 	.word	0x20001434
 8005fbc:	20001420 	.word	0x20001420

08005fc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10c      	bne.n	8005fea <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	b672      	cpsid	i
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	b662      	cpsie	i
 8005fe4:	613b      	str	r3, [r7, #16]
}
 8005fe6:	bf00      	nop
 8005fe8:	e7fe      	b.n	8005fe8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10c      	bne.n	800600a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	b672      	cpsid	i
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	b662      	cpsie	i
 8006004:	60fb      	str	r3, [r7, #12]
}
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800600a:	f000 ff2f 	bl	8006e6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800600e:	4b1d      	ldr	r3, [pc, #116]	; (8006084 <xTaskCheckForTimeOut+0xc4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d102      	bne.n	800602e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006028:	2300      	movs	r3, #0
 800602a:	61fb      	str	r3, [r7, #28]
 800602c:	e023      	b.n	8006076 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4b15      	ldr	r3, [pc, #84]	; (8006088 <xTaskCheckForTimeOut+0xc8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d007      	beq.n	800604a <xTaskCheckForTimeOut+0x8a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	429a      	cmp	r2, r3
 8006042:	d302      	bcc.n	800604a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006044:	2301      	movs	r3, #1
 8006046:	61fb      	str	r3, [r7, #28]
 8006048:	e015      	b.n	8006076 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	429a      	cmp	r2, r3
 8006052:	d20b      	bcs.n	800606c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	1ad2      	subs	r2, r2, r3
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff ff97 	bl	8005f94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	e004      	b.n	8006076 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006072:	2301      	movs	r3, #1
 8006074:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006076:	f000 ff2d 	bl	8006ed4 <vPortExitCritical>

	return xReturn;
 800607a:	69fb      	ldr	r3, [r7, #28]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3720      	adds	r7, #32
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	20001420 	.word	0x20001420
 8006088:	20001434 	.word	0x20001434

0800608c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006090:	4b03      	ldr	r3, [pc, #12]	; (80060a0 <vTaskMissedYield+0x14>)
 8006092:	2201      	movs	r2, #1
 8006094:	601a      	str	r2, [r3, #0]
}
 8006096:	bf00      	nop
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	20001430 	.word	0x20001430

080060a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060ac:	f000 f852 	bl	8006154 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060b0:	4b06      	ldr	r3, [pc, #24]	; (80060cc <prvIdleTask+0x28>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d9f9      	bls.n	80060ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80060b8:	4b05      	ldr	r3, [pc, #20]	; (80060d0 <prvIdleTask+0x2c>)
 80060ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060c8:	e7f0      	b.n	80060ac <prvIdleTask+0x8>
 80060ca:	bf00      	nop
 80060cc:	20000f4c 	.word	0x20000f4c
 80060d0:	e000ed04 	.word	0xe000ed04

080060d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060da:	2300      	movs	r3, #0
 80060dc:	607b      	str	r3, [r7, #4]
 80060de:	e00c      	b.n	80060fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4a12      	ldr	r2, [pc, #72]	; (8006134 <prvInitialiseTaskLists+0x60>)
 80060ec:	4413      	add	r3, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe fcb4 	bl	8004a5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3301      	adds	r3, #1
 80060f8:	607b      	str	r3, [r7, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b37      	cmp	r3, #55	; 0x37
 80060fe:	d9ef      	bls.n	80060e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006100:	480d      	ldr	r0, [pc, #52]	; (8006138 <prvInitialiseTaskLists+0x64>)
 8006102:	f7fe fcab 	bl	8004a5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006106:	480d      	ldr	r0, [pc, #52]	; (800613c <prvInitialiseTaskLists+0x68>)
 8006108:	f7fe fca8 	bl	8004a5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800610c:	480c      	ldr	r0, [pc, #48]	; (8006140 <prvInitialiseTaskLists+0x6c>)
 800610e:	f7fe fca5 	bl	8004a5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006112:	480c      	ldr	r0, [pc, #48]	; (8006144 <prvInitialiseTaskLists+0x70>)
 8006114:	f7fe fca2 	bl	8004a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006118:	480b      	ldr	r0, [pc, #44]	; (8006148 <prvInitialiseTaskLists+0x74>)
 800611a:	f7fe fc9f 	bl	8004a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800611e:	4b0b      	ldr	r3, [pc, #44]	; (800614c <prvInitialiseTaskLists+0x78>)
 8006120:	4a05      	ldr	r2, [pc, #20]	; (8006138 <prvInitialiseTaskLists+0x64>)
 8006122:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006124:	4b0a      	ldr	r3, [pc, #40]	; (8006150 <prvInitialiseTaskLists+0x7c>)
 8006126:	4a05      	ldr	r2, [pc, #20]	; (800613c <prvInitialiseTaskLists+0x68>)
 8006128:	601a      	str	r2, [r3, #0]
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20000f4c 	.word	0x20000f4c
 8006138:	200013ac 	.word	0x200013ac
 800613c:	200013c0 	.word	0x200013c0
 8006140:	200013dc 	.word	0x200013dc
 8006144:	200013f0 	.word	0x200013f0
 8006148:	20001408 	.word	0x20001408
 800614c:	200013d4 	.word	0x200013d4
 8006150:	200013d8 	.word	0x200013d8

08006154 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800615a:	e019      	b.n	8006190 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800615c:	f000 fe86 	bl	8006e6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006160:	4b10      	ldr	r3, [pc, #64]	; (80061a4 <prvCheckTasksWaitingTermination+0x50>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3304      	adds	r3, #4
 800616c:	4618      	mov	r0, r3
 800616e:	f7fe fcff 	bl	8004b70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006172:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <prvCheckTasksWaitingTermination+0x54>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3b01      	subs	r3, #1
 8006178:	4a0b      	ldr	r2, [pc, #44]	; (80061a8 <prvCheckTasksWaitingTermination+0x54>)
 800617a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800617c:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <prvCheckTasksWaitingTermination+0x58>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3b01      	subs	r3, #1
 8006182:	4a0a      	ldr	r2, [pc, #40]	; (80061ac <prvCheckTasksWaitingTermination+0x58>)
 8006184:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006186:	f000 fea5 	bl	8006ed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f810 	bl	80061b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006190:	4b06      	ldr	r3, [pc, #24]	; (80061ac <prvCheckTasksWaitingTermination+0x58>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e1      	bne.n	800615c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	200013f0 	.word	0x200013f0
 80061a8:	2000141c 	.word	0x2000141c
 80061ac:	20001404 	.word	0x20001404

080061b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d108      	bne.n	80061d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	4618      	mov	r0, r3
 80061c8:	f001 f846 	bl	8007258 <vPortFree>
				vPortFree( pxTCB );
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 f843 	bl	8007258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061d2:	e01a      	b.n	800620a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d103      	bne.n	80061e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 f83a 	bl	8007258 <vPortFree>
	}
 80061e4:	e011      	b.n	800620a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d00c      	beq.n	800620a <prvDeleteTCB+0x5a>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f4:	b672      	cpsid	i
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	b662      	cpsie	i
 8006204:	60fb      	str	r3, [r7, #12]
}
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <prvDeleteTCB+0x58>
	}
 800620a:	bf00      	nop
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800621a:	4b0c      	ldr	r3, [pc, #48]	; (800624c <prvResetNextTaskUnblockTime+0x38>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d104      	bne.n	800622e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006224:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <prvResetNextTaskUnblockTime+0x3c>)
 8006226:	f04f 32ff 	mov.w	r2, #4294967295
 800622a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800622c:	e008      	b.n	8006240 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800622e:	4b07      	ldr	r3, [pc, #28]	; (800624c <prvResetNextTaskUnblockTime+0x38>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	4a04      	ldr	r2, [pc, #16]	; (8006250 <prvResetNextTaskUnblockTime+0x3c>)
 800623e:	6013      	str	r3, [r2, #0]
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	200013d4 	.word	0x200013d4
 8006250:	2000143c 	.word	0x2000143c

08006254 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800625a:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <xTaskGetSchedulerState+0x34>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d102      	bne.n	8006268 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006262:	2301      	movs	r3, #1
 8006264:	607b      	str	r3, [r7, #4]
 8006266:	e008      	b.n	800627a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006268:	4b08      	ldr	r3, [pc, #32]	; (800628c <xTaskGetSchedulerState+0x38>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d102      	bne.n	8006276 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006270:	2302      	movs	r3, #2
 8006272:	607b      	str	r3, [r7, #4]
 8006274:	e001      	b.n	800627a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006276:	2300      	movs	r3, #0
 8006278:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800627a:	687b      	ldr	r3, [r7, #4]
	}
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	20001428 	.word	0x20001428
 800628c:	20001444 	.word	0x20001444

08006290 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d05a      	beq.n	800635c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062a6:	4b30      	ldr	r3, [pc, #192]	; (8006368 <xTaskPriorityDisinherit+0xd8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d00c      	beq.n	80062ca <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	b672      	cpsid	i
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	b662      	cpsie	i
 80062c4:	60fb      	str	r3, [r7, #12]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10c      	bne.n	80062ec <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	b672      	cpsid	i
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	b662      	cpsie	i
 80062e6:	60bb      	str	r3, [r7, #8]
}
 80062e8:	bf00      	nop
 80062ea:	e7fe      	b.n	80062ea <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f0:	1e5a      	subs	r2, r3, #1
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fe:	429a      	cmp	r2, r3
 8006300:	d02c      	beq.n	800635c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006306:	2b00      	cmp	r3, #0
 8006308:	d128      	bne.n	800635c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	3304      	adds	r3, #4
 800630e:	4618      	mov	r0, r3
 8006310:	f7fe fc2e 	bl	8004b70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632c:	4b0f      	ldr	r3, [pc, #60]	; (800636c <xTaskPriorityDisinherit+0xdc>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d903      	bls.n	800633c <xTaskPriorityDisinherit+0xac>
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	4a0c      	ldr	r2, [pc, #48]	; (800636c <xTaskPriorityDisinherit+0xdc>)
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4a09      	ldr	r2, [pc, #36]	; (8006370 <xTaskPriorityDisinherit+0xe0>)
 800634a:	441a      	add	r2, r3
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	3304      	adds	r3, #4
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f7fe fbaf 	bl	8004ab6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006358:	2301      	movs	r3, #1
 800635a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800635c:	697b      	ldr	r3, [r7, #20]
	}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20000f48 	.word	0x20000f48
 800636c:	20001424 	.word	0x20001424
 8006370:	20000f4c 	.word	0x20000f4c

08006374 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800637e:	4b21      	ldr	r3, [pc, #132]	; (8006404 <prvAddCurrentTaskToDelayedList+0x90>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006384:	4b20      	ldr	r3, [pc, #128]	; (8006408 <prvAddCurrentTaskToDelayedList+0x94>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3304      	adds	r3, #4
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fbf0 	bl	8004b70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006396:	d10a      	bne.n	80063ae <prvAddCurrentTaskToDelayedList+0x3a>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800639e:	4b1a      	ldr	r3, [pc, #104]	; (8006408 <prvAddCurrentTaskToDelayedList+0x94>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4619      	mov	r1, r3
 80063a6:	4819      	ldr	r0, [pc, #100]	; (800640c <prvAddCurrentTaskToDelayedList+0x98>)
 80063a8:	f7fe fb85 	bl	8004ab6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063ac:	e026      	b.n	80063fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4413      	add	r3, r2
 80063b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063b6:	4b14      	ldr	r3, [pc, #80]	; (8006408 <prvAddCurrentTaskToDelayedList+0x94>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d209      	bcs.n	80063da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063c6:	4b12      	ldr	r3, [pc, #72]	; (8006410 <prvAddCurrentTaskToDelayedList+0x9c>)
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <prvAddCurrentTaskToDelayedList+0x94>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f7fe fb93 	bl	8004afe <vListInsert>
}
 80063d8:	e010      	b.n	80063fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063da:	4b0e      	ldr	r3, [pc, #56]	; (8006414 <prvAddCurrentTaskToDelayedList+0xa0>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <prvAddCurrentTaskToDelayedList+0x94>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3304      	adds	r3, #4
 80063e4:	4619      	mov	r1, r3
 80063e6:	4610      	mov	r0, r2
 80063e8:	f7fe fb89 	bl	8004afe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d202      	bcs.n	80063fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80063f6:	4a08      	ldr	r2, [pc, #32]	; (8006418 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	6013      	str	r3, [r2, #0]
}
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	20001420 	.word	0x20001420
 8006408:	20000f48 	.word	0x20000f48
 800640c:	20001408 	.word	0x20001408
 8006410:	200013d8 	.word	0x200013d8
 8006414:	200013d4 	.word	0x200013d4
 8006418:	2000143c 	.word	0x2000143c

0800641c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08a      	sub	sp, #40	; 0x28
 8006420:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006422:	2300      	movs	r3, #0
 8006424:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006426:	f000 fbb5 	bl	8006b94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800642a:	4b1d      	ldr	r3, [pc, #116]	; (80064a0 <xTimerCreateTimerTask+0x84>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d021      	beq.n	8006476 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800643a:	1d3a      	adds	r2, r7, #4
 800643c:	f107 0108 	add.w	r1, r7, #8
 8006440:	f107 030c 	add.w	r3, r7, #12
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe faef 	bl	8004a28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	9202      	str	r2, [sp, #8]
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	2302      	movs	r3, #2
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	2300      	movs	r3, #0
 800645a:	460a      	mov	r2, r1
 800645c:	4911      	ldr	r1, [pc, #68]	; (80064a4 <xTimerCreateTimerTask+0x88>)
 800645e:	4812      	ldr	r0, [pc, #72]	; (80064a8 <xTimerCreateTimerTask+0x8c>)
 8006460:	f7ff f8ba 	bl	80055d8 <xTaskCreateStatic>
 8006464:	4603      	mov	r3, r0
 8006466:	4a11      	ldr	r2, [pc, #68]	; (80064ac <xTimerCreateTimerTask+0x90>)
 8006468:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800646a:	4b10      	ldr	r3, [pc, #64]	; (80064ac <xTimerCreateTimerTask+0x90>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006472:	2301      	movs	r3, #1
 8006474:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10c      	bne.n	8006496 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	b672      	cpsid	i
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	b662      	cpsie	i
 8006490:	613b      	str	r3, [r7, #16]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006496:	697b      	ldr	r3, [r7, #20]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	20001478 	.word	0x20001478
 80064a4:	0800753c 	.word	0x0800753c
 80064a8:	0800672d 	.word	0x0800672d
 80064ac:	2000147c 	.word	0x2000147c

080064b0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80064be:	202c      	movs	r0, #44	; 0x2c
 80064c0:	f000 fe00 	bl	80070c4 <pvPortMalloc>
 80064c4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00d      	beq.n	80064e8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	9301      	str	r3, [sp, #4]
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 f847 	bl	8006576 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80064e8:	697b      	ldr	r3, [r7, #20]
	}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b08a      	sub	sp, #40	; 0x28
 80064f6:	af02      	add	r7, sp, #8
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	607a      	str	r2, [r7, #4]
 80064fe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006500:	232c      	movs	r3, #44	; 0x2c
 8006502:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2b2c      	cmp	r3, #44	; 0x2c
 8006508:	d00c      	beq.n	8006524 <xTimerCreateStatic+0x32>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650e:	b672      	cpsid	i
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	b662      	cpsie	i
 800651e:	61bb      	str	r3, [r7, #24]
}
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006524:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10c      	bne.n	8006546 <xTimerCreateStatic+0x54>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	b672      	cpsid	i
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	b662      	cpsie	i
 8006540:	617b      	str	r3, [r7, #20]
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00d      	beq.n	800656c <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 f805 	bl	8006576 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800656c:	69fb      	ldr	r3, [r7, #28]
	}
 800656e:	4618      	mov	r0, r3
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b086      	sub	sp, #24
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
 8006582:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10c      	bne.n	80065a4 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	b672      	cpsid	i
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	b662      	cpsie	i
 800659e:	617b      	str	r3, [r7, #20]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01e      	beq.n	80065e8 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80065aa:	f000 faf3 	bl	8006b94 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	6a3a      	ldr	r2, [r7, #32]
 80065c4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	3304      	adds	r3, #4
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe fa66 	bl	8004a9c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d008      	beq.n	80065e8 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065dc:	f043 0304 	orr.w	r3, r3, #4
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80065e8:	bf00      	nop
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08a      	sub	sp, #40	; 0x28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80065fe:	2300      	movs	r3, #0
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10c      	bne.n	8006622 <xTimerGenericCommand+0x32>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	b672      	cpsid	i
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	b662      	cpsie	i
 800661c:	623b      	str	r3, [r7, #32]
}
 800661e:	bf00      	nop
 8006620:	e7fe      	b.n	8006620 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006622:	4b1a      	ldr	r3, [pc, #104]	; (800668c <xTimerGenericCommand+0x9c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d02a      	beq.n	8006680 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b05      	cmp	r3, #5
 800663a:	dc18      	bgt.n	800666e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800663c:	f7ff fe0a 	bl	8006254 <xTaskGetSchedulerState>
 8006640:	4603      	mov	r3, r0
 8006642:	2b02      	cmp	r3, #2
 8006644:	d109      	bne.n	800665a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006646:	4b11      	ldr	r3, [pc, #68]	; (800668c <xTimerGenericCommand+0x9c>)
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	f107 0110 	add.w	r1, r7, #16
 800664e:	2300      	movs	r3, #0
 8006650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006652:	f7fe fbc7 	bl	8004de4 <xQueueGenericSend>
 8006656:	6278      	str	r0, [r7, #36]	; 0x24
 8006658:	e012      	b.n	8006680 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800665a:	4b0c      	ldr	r3, [pc, #48]	; (800668c <xTimerGenericCommand+0x9c>)
 800665c:	6818      	ldr	r0, [r3, #0]
 800665e:	f107 0110 	add.w	r1, r7, #16
 8006662:	2300      	movs	r3, #0
 8006664:	2200      	movs	r2, #0
 8006666:	f7fe fbbd 	bl	8004de4 <xQueueGenericSend>
 800666a:	6278      	str	r0, [r7, #36]	; 0x24
 800666c:	e008      	b.n	8006680 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800666e:	4b07      	ldr	r3, [pc, #28]	; (800668c <xTimerGenericCommand+0x9c>)
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	f107 0110 	add.w	r1, r7, #16
 8006676:	2300      	movs	r3, #0
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	f7fe fcb9 	bl	8004ff0 <xQueueGenericSendFromISR>
 800667e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006682:	4618      	mov	r0, r3
 8006684:	3728      	adds	r7, #40	; 0x28
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20001478 	.word	0x20001478

08006690 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af02      	add	r7, sp, #8
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800669a:	4b23      	ldr	r3, [pc, #140]	; (8006728 <prvProcessExpiredTimer+0x98>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	3304      	adds	r3, #4
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fe fa61 	bl	8004b70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d024      	beq.n	8006706 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	699a      	ldr	r2, [r3, #24]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	18d1      	adds	r1, r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	6978      	ldr	r0, [r7, #20]
 80066ca:	f000 f8d3 	bl	8006874 <prvInsertTimerInActiveList>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d021      	beq.n	8006718 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066d4:	2300      	movs	r3, #0
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	2300      	movs	r3, #0
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	2100      	movs	r1, #0
 80066de:	6978      	ldr	r0, [r7, #20]
 80066e0:	f7ff ff86 	bl	80065f0 <xTimerGenericCommand>
 80066e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d115      	bne.n	8006718 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	b672      	cpsid	i
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	b662      	cpsie	i
 8006700:	60fb      	str	r3, [r7, #12]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800670c:	f023 0301 	bic.w	r3, r3, #1
 8006710:	b2da      	uxtb	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	6978      	ldr	r0, [r7, #20]
 800671e:	4798      	blx	r3
}
 8006720:	bf00      	nop
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	20001470 	.word	0x20001470

0800672c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006734:	f107 0308 	add.w	r3, r7, #8
 8006738:	4618      	mov	r0, r3
 800673a:	f000 f857 	bl	80067ec <prvGetNextExpireTime>
 800673e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4619      	mov	r1, r3
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f803 	bl	8006750 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800674a:	f000 f8d5 	bl	80068f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800674e:	e7f1      	b.n	8006734 <prvTimerTask+0x8>

08006750 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800675a:	f7ff f987 	bl	8005a6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800675e:	f107 0308 	add.w	r3, r7, #8
 8006762:	4618      	mov	r0, r3
 8006764:	f000 f866 	bl	8006834 <prvSampleTimeNow>
 8006768:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d130      	bne.n	80067d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <prvProcessTimerOrBlockTask+0x3c>
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	429a      	cmp	r2, r3
 800677c:	d806      	bhi.n	800678c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800677e:	f7ff f983 	bl	8005a88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006782:	68f9      	ldr	r1, [r7, #12]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff ff83 	bl	8006690 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800678a:	e024      	b.n	80067d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d008      	beq.n	80067a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006792:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <prvProcessTimerOrBlockTask+0x90>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <prvProcessTimerOrBlockTask+0x50>
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <prvProcessTimerOrBlockTask+0x52>
 80067a0:	2300      	movs	r3, #0
 80067a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067a4:	4b0f      	ldr	r3, [pc, #60]	; (80067e4 <prvProcessTimerOrBlockTask+0x94>)
 80067a6:	6818      	ldr	r0, [r3, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	4619      	mov	r1, r3
 80067b2:	f7fe fedd 	bl	8005570 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067b6:	f7ff f967 	bl	8005a88 <xTaskResumeAll>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067c0:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <prvProcessTimerOrBlockTask+0x98>)
 80067c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	f3bf 8f6f 	isb	sy
}
 80067d0:	e001      	b.n	80067d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067d2:	f7ff f959 	bl	8005a88 <xTaskResumeAll>
}
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20001474 	.word	0x20001474
 80067e4:	20001478 	.word	0x20001478
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067f4:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <prvGetNextExpireTime+0x44>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <prvGetNextExpireTime+0x16>
 80067fe:	2201      	movs	r2, #1
 8006800:	e000      	b.n	8006804 <prvGetNextExpireTime+0x18>
 8006802:	2200      	movs	r2, #0
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006810:	4b07      	ldr	r3, [pc, #28]	; (8006830 <prvGetNextExpireTime+0x44>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	e001      	b.n	8006820 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006820:	68fb      	ldr	r3, [r7, #12]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20001470 	.word	0x20001470

08006834 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800683c:	f7ff f9c4 	bl	8005bc8 <xTaskGetTickCount>
 8006840:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006842:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <prvSampleTimeNow+0x3c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	429a      	cmp	r2, r3
 800684a:	d205      	bcs.n	8006858 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800684c:	f000 f93c 	bl	8006ac8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	e002      	b.n	800685e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800685e:	4a04      	ldr	r2, [pc, #16]	; (8006870 <prvSampleTimeNow+0x3c>)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006864:	68fb      	ldr	r3, [r7, #12]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20001480 	.word	0x20001480

08006874 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006882:	2300      	movs	r3, #0
 8006884:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	429a      	cmp	r2, r3
 8006898:	d812      	bhi.n	80068c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	1ad2      	subs	r2, r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d302      	bcc.n	80068ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068a8:	2301      	movs	r3, #1
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	e01b      	b.n	80068e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068ae:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <prvInsertTimerInActiveList+0x7c>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3304      	adds	r3, #4
 80068b6:	4619      	mov	r1, r3
 80068b8:	4610      	mov	r0, r2
 80068ba:	f7fe f920 	bl	8004afe <vListInsert>
 80068be:	e012      	b.n	80068e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d206      	bcs.n	80068d6 <prvInsertTimerInActiveList+0x62>
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d302      	bcc.n	80068d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068d0:	2301      	movs	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	e007      	b.n	80068e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068d6:	4b07      	ldr	r3, [pc, #28]	; (80068f4 <prvInsertTimerInActiveList+0x80>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3304      	adds	r3, #4
 80068de:	4619      	mov	r1, r3
 80068e0:	4610      	mov	r0, r2
 80068e2:	f7fe f90c 	bl	8004afe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068e6:	697b      	ldr	r3, [r7, #20]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20001474 	.word	0x20001474
 80068f4:	20001470 	.word	0x20001470

080068f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08e      	sub	sp, #56	; 0x38
 80068fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068fe:	e0d0      	b.n	8006aa2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	da1a      	bge.n	800693c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	3304      	adds	r3, #4
 800690a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800690c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10c      	bne.n	800692c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	b672      	cpsid	i
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	b662      	cpsie	i
 8006926:	61fb      	str	r3, [r7, #28]
}
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006932:	6850      	ldr	r0, [r2, #4]
 8006934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006936:	6892      	ldr	r2, [r2, #8]
 8006938:	4611      	mov	r1, r2
 800693a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	f2c0 80ae 	blt.w	8006aa0 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d004      	beq.n	800695a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	3304      	adds	r3, #4
 8006954:	4618      	mov	r0, r3
 8006956:	f7fe f90b 	bl	8004b70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800695a:	463b      	mov	r3, r7
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff ff69 	bl	8006834 <prvSampleTimeNow>
 8006962:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b09      	cmp	r3, #9
 8006968:	f200 809b 	bhi.w	8006aa2 <prvProcessReceivedCommands+0x1aa>
 800696c:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <prvProcessReceivedCommands+0x7c>)
 800696e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006972:	bf00      	nop
 8006974:	0800699d 	.word	0x0800699d
 8006978:	0800699d 	.word	0x0800699d
 800697c:	0800699d 	.word	0x0800699d
 8006980:	08006a15 	.word	0x08006a15
 8006984:	08006a29 	.word	0x08006a29
 8006988:	08006a77 	.word	0x08006a77
 800698c:	0800699d 	.word	0x0800699d
 8006990:	0800699d 	.word	0x0800699d
 8006994:	08006a15 	.word	0x08006a15
 8006998:	08006a29 	.word	0x08006a29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069a2:	f043 0301 	orr.w	r3, r3, #1
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	18d1      	adds	r1, r2, r3
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069bc:	f7ff ff5a 	bl	8006874 <prvInsertTimerInActiveList>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d06d      	beq.n	8006aa2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d062      	beq.n	8006aa2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	441a      	add	r2, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	2300      	movs	r3, #0
 80069ea:	2100      	movs	r1, #0
 80069ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ee:	f7ff fdff 	bl	80065f0 <xTimerGenericCommand>
 80069f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d153      	bne.n	8006aa2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	b672      	cpsid	i
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	b662      	cpsie	i
 8006a0e:	61bb      	str	r3, [r7, #24]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a1a:	f023 0301 	bic.w	r3, r3, #1
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a26:	e03c      	b.n	8006aa2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10c      	bne.n	8006a62 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	b672      	cpsid	i
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	b662      	cpsie	i
 8006a5c:	617b      	str	r3, [r7, #20]
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	18d1      	adds	r1, r2, r3
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a70:	f7ff ff00 	bl	8006874 <prvInsertTimerInActiveList>
					break;
 8006a74:	e015      	b.n	8006aa2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d103      	bne.n	8006a8c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a86:	f000 fbe7 	bl	8007258 <vPortFree>
 8006a8a:	e00a      	b.n	8006aa2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a92:	f023 0301 	bic.w	r3, r3, #1
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a9e:	e000      	b.n	8006aa2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006aa0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006aa2:	4b08      	ldr	r3, [pc, #32]	; (8006ac4 <prvProcessReceivedCommands+0x1cc>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	1d39      	adds	r1, r7, #4
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fb40 	bl	8005130 <xQueueReceive>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f47f af24 	bne.w	8006900 <prvProcessReceivedCommands+0x8>
	}
}
 8006ab8:	bf00      	nop
 8006aba:	bf00      	nop
 8006abc:	3730      	adds	r7, #48	; 0x30
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	20001478 	.word	0x20001478

08006ac8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ace:	e04a      	b.n	8006b66 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ad0:	4b2e      	ldr	r3, [pc, #184]	; (8006b8c <prvSwitchTimerLists+0xc4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ada:	4b2c      	ldr	r3, [pc, #176]	; (8006b8c <prvSwitchTimerLists+0xc4>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fe f841 	bl	8004b70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006afc:	f003 0304 	and.w	r3, r3, #4
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d030      	beq.n	8006b66 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d90e      	bls.n	8006b34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b22:	4b1a      	ldr	r3, [pc, #104]	; (8006b8c <prvSwitchTimerLists+0xc4>)
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	f7fd ffe6 	bl	8004afe <vListInsert>
 8006b32:	e018      	b.n	8006b66 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b34:	2300      	movs	r3, #0
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7ff fd56 	bl	80065f0 <xTimerGenericCommand>
 8006b44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10c      	bne.n	8006b66 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	b672      	cpsid	i
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	b662      	cpsie	i
 8006b60:	603b      	str	r3, [r7, #0]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b66:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <prvSwitchTimerLists+0xc4>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1af      	bne.n	8006ad0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <prvSwitchTimerLists+0xc4>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b76:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <prvSwitchTimerLists+0xc8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a04      	ldr	r2, [pc, #16]	; (8006b8c <prvSwitchTimerLists+0xc4>)
 8006b7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b7e:	4a04      	ldr	r2, [pc, #16]	; (8006b90 <prvSwitchTimerLists+0xc8>)
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	6013      	str	r3, [r2, #0]
}
 8006b84:	bf00      	nop
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20001470 	.word	0x20001470
 8006b90:	20001474 	.word	0x20001474

08006b94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b9a:	f000 f967 	bl	8006e6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b9e:	4b15      	ldr	r3, [pc, #84]	; (8006bf4 <prvCheckForValidListAndQueue+0x60>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d120      	bne.n	8006be8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ba6:	4814      	ldr	r0, [pc, #80]	; (8006bf8 <prvCheckForValidListAndQueue+0x64>)
 8006ba8:	f7fd ff58 	bl	8004a5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006bac:	4813      	ldr	r0, [pc, #76]	; (8006bfc <prvCheckForValidListAndQueue+0x68>)
 8006bae:	f7fd ff55 	bl	8004a5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006bb2:	4b13      	ldr	r3, [pc, #76]	; (8006c00 <prvCheckForValidListAndQueue+0x6c>)
 8006bb4:	4a10      	ldr	r2, [pc, #64]	; (8006bf8 <prvCheckForValidListAndQueue+0x64>)
 8006bb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bb8:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <prvCheckForValidListAndQueue+0x70>)
 8006bba:	4a10      	ldr	r2, [pc, #64]	; (8006bfc <prvCheckForValidListAndQueue+0x68>)
 8006bbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <prvCheckForValidListAndQueue+0x74>)
 8006bc4:	4a11      	ldr	r2, [pc, #68]	; (8006c0c <prvCheckForValidListAndQueue+0x78>)
 8006bc6:	2110      	movs	r1, #16
 8006bc8:	200a      	movs	r0, #10
 8006bca:	f7fe f865 	bl	8004c98 <xQueueGenericCreateStatic>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	4a08      	ldr	r2, [pc, #32]	; (8006bf4 <prvCheckForValidListAndQueue+0x60>)
 8006bd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006bd4:	4b07      	ldr	r3, [pc, #28]	; (8006bf4 <prvCheckForValidListAndQueue+0x60>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006bdc:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <prvCheckForValidListAndQueue+0x60>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	490b      	ldr	r1, [pc, #44]	; (8006c10 <prvCheckForValidListAndQueue+0x7c>)
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fe fc9a 	bl	800551c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006be8:	f000 f974 	bl	8006ed4 <vPortExitCritical>
}
 8006bec:	bf00      	nop
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20001478 	.word	0x20001478
 8006bf8:	20001448 	.word	0x20001448
 8006bfc:	2000145c 	.word	0x2000145c
 8006c00:	20001470 	.word	0x20001470
 8006c04:	20001474 	.word	0x20001474
 8006c08:	20001524 	.word	0x20001524
 8006c0c:	20001484 	.word	0x20001484
 8006c10:	08007544 	.word	0x08007544

08006c14 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10c      	bne.n	8006c40 <pvTimerGetTimerID+0x2c>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	b672      	cpsid	i
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	b662      	cpsie	i
 8006c3a:	60fb      	str	r3, [r7, #12]
}
 8006c3c:	bf00      	nop
 8006c3e:	e7fe      	b.n	8006c3e <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 8006c40:	f000 f914 	bl	8006e6c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006c4a:	f000 f943 	bl	8006ed4 <vPortExitCritical>

	return pvReturn;
 8006c4e:	693b      	ldr	r3, [r7, #16]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3b04      	subs	r3, #4
 8006c68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3b04      	subs	r3, #4
 8006c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f023 0201 	bic.w	r2, r3, #1
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3b04      	subs	r3, #4
 8006c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c88:	4a0c      	ldr	r2, [pc, #48]	; (8006cbc <pxPortInitialiseStack+0x64>)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3b14      	subs	r3, #20
 8006c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3b04      	subs	r3, #4
 8006c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f06f 0202 	mvn.w	r2, #2
 8006ca6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3b20      	subs	r3, #32
 8006cac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cae:	68fb      	ldr	r3, [r7, #12]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	08006cc1 	.word	0x08006cc1

08006cc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cca:	4b14      	ldr	r3, [pc, #80]	; (8006d1c <prvTaskExitError+0x5c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd2:	d00c      	beq.n	8006cee <prvTaskExitError+0x2e>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	b672      	cpsid	i
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	b662      	cpsie	i
 8006ce8:	60fb      	str	r3, [r7, #12]
}
 8006cea:	bf00      	nop
 8006cec:	e7fe      	b.n	8006cec <prvTaskExitError+0x2c>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	b672      	cpsid	i
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	b662      	cpsie	i
 8006d02:	60bb      	str	r3, [r7, #8]
}
 8006d04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d06:	bf00      	nop
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0fc      	beq.n	8006d08 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d0e:	bf00      	nop
 8006d10:	bf00      	nop
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	2000000c 	.word	0x2000000c

08006d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <pxCurrentTCBConst2>)
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	6808      	ldr	r0, [r1, #0]
 8006d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2a:	f380 8809 	msr	PSP, r0
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f380 8811 	msr	BASEPRI, r0
 8006d3a:	4770      	bx	lr
 8006d3c:	f3af 8000 	nop.w

08006d40 <pxCurrentTCBConst2>:
 8006d40:	20000f48 	.word	0x20000f48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop

08006d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d48:	4808      	ldr	r0, [pc, #32]	; (8006d6c <prvPortStartFirstTask+0x24>)
 8006d4a:	6800      	ldr	r0, [r0, #0]
 8006d4c:	6800      	ldr	r0, [r0, #0]
 8006d4e:	f380 8808 	msr	MSP, r0
 8006d52:	f04f 0000 	mov.w	r0, #0
 8006d56:	f380 8814 	msr	CONTROL, r0
 8006d5a:	b662      	cpsie	i
 8006d5c:	b661      	cpsie	f
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	df00      	svc	0
 8006d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d6a:	bf00      	nop
 8006d6c:	e000ed08 	.word	0xe000ed08

08006d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d76:	4b37      	ldr	r3, [pc, #220]	; (8006e54 <xPortStartScheduler+0xe4>)
 8006d78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	22ff      	movs	r2, #255	; 0xff
 8006d86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	4b2f      	ldr	r3, [pc, #188]	; (8006e58 <xPortStartScheduler+0xe8>)
 8006d9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d9e:	4b2f      	ldr	r3, [pc, #188]	; (8006e5c <xPortStartScheduler+0xec>)
 8006da0:	2207      	movs	r2, #7
 8006da2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006da4:	e009      	b.n	8006dba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006da6:	4b2d      	ldr	r3, [pc, #180]	; (8006e5c <xPortStartScheduler+0xec>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	4a2b      	ldr	r2, [pc, #172]	; (8006e5c <xPortStartScheduler+0xec>)
 8006dae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc2:	2b80      	cmp	r3, #128	; 0x80
 8006dc4:	d0ef      	beq.n	8006da6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dc6:	4b25      	ldr	r3, [pc, #148]	; (8006e5c <xPortStartScheduler+0xec>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f1c3 0307 	rsb	r3, r3, #7
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d00c      	beq.n	8006dec <xPortStartScheduler+0x7c>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	b672      	cpsid	i
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	b662      	cpsie	i
 8006de6:	60bb      	str	r3, [r7, #8]
}
 8006de8:	bf00      	nop
 8006dea:	e7fe      	b.n	8006dea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dec:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <xPortStartScheduler+0xec>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	021b      	lsls	r3, r3, #8
 8006df2:	4a1a      	ldr	r2, [pc, #104]	; (8006e5c <xPortStartScheduler+0xec>)
 8006df4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006df6:	4b19      	ldr	r3, [pc, #100]	; (8006e5c <xPortStartScheduler+0xec>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dfe:	4a17      	ldr	r2, [pc, #92]	; (8006e5c <xPortStartScheduler+0xec>)
 8006e00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e0a:	4b15      	ldr	r3, [pc, #84]	; (8006e60 <xPortStartScheduler+0xf0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a14      	ldr	r2, [pc, #80]	; (8006e60 <xPortStartScheduler+0xf0>)
 8006e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e16:	4b12      	ldr	r3, [pc, #72]	; (8006e60 <xPortStartScheduler+0xf0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a11      	ldr	r2, [pc, #68]	; (8006e60 <xPortStartScheduler+0xf0>)
 8006e1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e22:	f000 f8dd 	bl	8006fe0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e26:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <xPortStartScheduler+0xf4>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e2c:	f000 f8fc 	bl	8007028 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e30:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <xPortStartScheduler+0xf8>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a0c      	ldr	r2, [pc, #48]	; (8006e68 <xPortStartScheduler+0xf8>)
 8006e36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e3c:	f7ff ff84 	bl	8006d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e40:	f7fe ff8e 	bl	8005d60 <vTaskSwitchContext>
	prvTaskExitError();
 8006e44:	f7ff ff3c 	bl	8006cc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	e000e400 	.word	0xe000e400
 8006e58:	20001574 	.word	0x20001574
 8006e5c:	20001578 	.word	0x20001578
 8006e60:	e000ed20 	.word	0xe000ed20
 8006e64:	2000000c 	.word	0x2000000c
 8006e68:	e000ef34 	.word	0xe000ef34

08006e6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	b672      	cpsid	i
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	b662      	cpsie	i
 8006e86:	607b      	str	r3, [r7, #4]
}
 8006e88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e8a:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <vPortEnterCritical+0x60>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	4a0e      	ldr	r2, [pc, #56]	; (8006ecc <vPortEnterCritical+0x60>)
 8006e92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e94:	4b0d      	ldr	r3, [pc, #52]	; (8006ecc <vPortEnterCritical+0x60>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d111      	bne.n	8006ec0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e9c:	4b0c      	ldr	r3, [pc, #48]	; (8006ed0 <vPortEnterCritical+0x64>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00c      	beq.n	8006ec0 <vPortEnterCritical+0x54>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eaa:	b672      	cpsid	i
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	b662      	cpsie	i
 8006eba:	603b      	str	r3, [r7, #0]
}
 8006ebc:	bf00      	nop
 8006ebe:	e7fe      	b.n	8006ebe <vPortEnterCritical+0x52>
	}
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	2000000c 	.word	0x2000000c
 8006ed0:	e000ed04 	.word	0xe000ed04

08006ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006eda:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <vPortExitCritical+0x54>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10c      	bne.n	8006efc <vPortExitCritical+0x28>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	b672      	cpsid	i
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	b662      	cpsie	i
 8006ef6:	607b      	str	r3, [r7, #4]
}
 8006ef8:	bf00      	nop
 8006efa:	e7fe      	b.n	8006efa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006efc:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <vPortExitCritical+0x54>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	4a09      	ldr	r2, [pc, #36]	; (8006f28 <vPortExitCritical+0x54>)
 8006f04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f06:	4b08      	ldr	r3, [pc, #32]	; (8006f28 <vPortExitCritical+0x54>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d105      	bne.n	8006f1a <vPortExitCritical+0x46>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	f383 8811 	msr	BASEPRI, r3
}
 8006f18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	2000000c 	.word	0x2000000c
 8006f2c:	00000000 	.word	0x00000000

08006f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f30:	f3ef 8009 	mrs	r0, PSP
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	4b15      	ldr	r3, [pc, #84]	; (8006f90 <pxCurrentTCBConst>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	f01e 0f10 	tst.w	lr, #16
 8006f40:	bf08      	it	eq
 8006f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4a:	6010      	str	r0, [r2, #0]
 8006f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f54:	b672      	cpsid	i
 8006f56:	f380 8811 	msr	BASEPRI, r0
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	b662      	cpsie	i
 8006f64:	f7fe fefc 	bl	8005d60 <vTaskSwitchContext>
 8006f68:	f04f 0000 	mov.w	r0, #0
 8006f6c:	f380 8811 	msr	BASEPRI, r0
 8006f70:	bc09      	pop	{r0, r3}
 8006f72:	6819      	ldr	r1, [r3, #0]
 8006f74:	6808      	ldr	r0, [r1, #0]
 8006f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7a:	f01e 0f10 	tst.w	lr, #16
 8006f7e:	bf08      	it	eq
 8006f80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f84:	f380 8809 	msr	PSP, r0
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop

08006f90 <pxCurrentTCBConst>:
 8006f90:	20000f48 	.word	0x20000f48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop

08006f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	b672      	cpsid	i
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	b662      	cpsie	i
 8006fb2:	607b      	str	r3, [r7, #4]
}
 8006fb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fb6:	f7fe fe17 	bl	8005be8 <xTaskIncrementTick>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fc0:	4b06      	ldr	r3, [pc, #24]	; (8006fdc <SysTick_Handler+0x44>)
 8006fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	f383 8811 	msr	BASEPRI, r3
}
 8006fd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fd4:	bf00      	nop
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	e000ed04 	.word	0xe000ed04

08006fe0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <vPortSetupTimerInterrupt+0x34>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fea:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <vPortSetupTimerInterrupt+0x38>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	; (800701c <vPortSetupTimerInterrupt+0x3c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a0a      	ldr	r2, [pc, #40]	; (8007020 <vPortSetupTimerInterrupt+0x40>)
 8006ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffa:	099b      	lsrs	r3, r3, #6
 8006ffc:	4a09      	ldr	r2, [pc, #36]	; (8007024 <vPortSetupTimerInterrupt+0x44>)
 8006ffe:	3b01      	subs	r3, #1
 8007000:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007002:	4b04      	ldr	r3, [pc, #16]	; (8007014 <vPortSetupTimerInterrupt+0x34>)
 8007004:	2207      	movs	r2, #7
 8007006:	601a      	str	r2, [r3, #0]
}
 8007008:	bf00      	nop
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	e000e010 	.word	0xe000e010
 8007018:	e000e018 	.word	0xe000e018
 800701c:	20000000 	.word	0x20000000
 8007020:	10624dd3 	.word	0x10624dd3
 8007024:	e000e014 	.word	0xe000e014

08007028 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007028:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007038 <vPortEnableVFP+0x10>
 800702c:	6801      	ldr	r1, [r0, #0]
 800702e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007032:	6001      	str	r1, [r0, #0]
 8007034:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007036:	bf00      	nop
 8007038:	e000ed88 	.word	0xe000ed88

0800703c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007042:	f3ef 8305 	mrs	r3, IPSR
 8007046:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b0f      	cmp	r3, #15
 800704c:	d916      	bls.n	800707c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800704e:	4a19      	ldr	r2, [pc, #100]	; (80070b4 <vPortValidateInterruptPriority+0x78>)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007058:	4b17      	ldr	r3, [pc, #92]	; (80070b8 <vPortValidateInterruptPriority+0x7c>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	7afa      	ldrb	r2, [r7, #11]
 800705e:	429a      	cmp	r2, r3
 8007060:	d20c      	bcs.n	800707c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	b672      	cpsid	i
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	b662      	cpsie	i
 8007076:	607b      	str	r3, [r7, #4]
}
 8007078:	bf00      	nop
 800707a:	e7fe      	b.n	800707a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800707c:	4b0f      	ldr	r3, [pc, #60]	; (80070bc <vPortValidateInterruptPriority+0x80>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007084:	4b0e      	ldr	r3, [pc, #56]	; (80070c0 <vPortValidateInterruptPriority+0x84>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	429a      	cmp	r2, r3
 800708a:	d90c      	bls.n	80070a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	b672      	cpsid	i
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	b662      	cpsie	i
 80070a0:	603b      	str	r3, [r7, #0]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <vPortValidateInterruptPriority+0x68>
	}
 80070a6:	bf00      	nop
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	e000e3f0 	.word	0xe000e3f0
 80070b8:	20001574 	.word	0x20001574
 80070bc:	e000ed0c 	.word	0xe000ed0c
 80070c0:	20001578 	.word	0x20001578

080070c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08a      	sub	sp, #40	; 0x28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070cc:	2300      	movs	r3, #0
 80070ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070d0:	f7fe fccc 	bl	8005a6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070d4:	4b5b      	ldr	r3, [pc, #364]	; (8007244 <pvPortMalloc+0x180>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070dc:	f000 f91a 	bl	8007314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070e0:	4b59      	ldr	r3, [pc, #356]	; (8007248 <pvPortMalloc+0x184>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4013      	ands	r3, r2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f040 8092 	bne.w	8007212 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d01f      	beq.n	8007134 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80070f4:	2208      	movs	r2, #8
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4413      	add	r3, r2
 80070fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	2b00      	cmp	r3, #0
 8007104:	d016      	beq.n	8007134 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f023 0307 	bic.w	r3, r3, #7
 800710c:	3308      	adds	r3, #8
 800710e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00c      	beq.n	8007134 <pvPortMalloc+0x70>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	b672      	cpsid	i
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	b662      	cpsie	i
 800712e:	617b      	str	r3, [r7, #20]
}
 8007130:	bf00      	nop
 8007132:	e7fe      	b.n	8007132 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d06b      	beq.n	8007212 <pvPortMalloc+0x14e>
 800713a:	4b44      	ldr	r3, [pc, #272]	; (800724c <pvPortMalloc+0x188>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d866      	bhi.n	8007212 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007144:	4b42      	ldr	r3, [pc, #264]	; (8007250 <pvPortMalloc+0x18c>)
 8007146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007148:	4b41      	ldr	r3, [pc, #260]	; (8007250 <pvPortMalloc+0x18c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800714e:	e004      	b.n	800715a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	429a      	cmp	r2, r3
 8007162:	d903      	bls.n	800716c <pvPortMalloc+0xa8>
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1f1      	bne.n	8007150 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800716c:	4b35      	ldr	r3, [pc, #212]	; (8007244 <pvPortMalloc+0x180>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007172:	429a      	cmp	r2, r3
 8007174:	d04d      	beq.n	8007212 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2208      	movs	r2, #8
 800717c:	4413      	add	r3, r2
 800717e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	2308      	movs	r3, #8
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	429a      	cmp	r2, r3
 8007196:	d921      	bls.n	80071dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4413      	add	r3, r2
 800719e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00c      	beq.n	80071c4 <pvPortMalloc+0x100>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	b672      	cpsid	i
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	b662      	cpsie	i
 80071be:	613b      	str	r3, [r7, #16]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	1ad2      	subs	r2, r2, r3
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071d6:	69b8      	ldr	r0, [r7, #24]
 80071d8:	f000 f8fe 	bl	80073d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071dc:	4b1b      	ldr	r3, [pc, #108]	; (800724c <pvPortMalloc+0x188>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	4a19      	ldr	r2, [pc, #100]	; (800724c <pvPortMalloc+0x188>)
 80071e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071ea:	4b18      	ldr	r3, [pc, #96]	; (800724c <pvPortMalloc+0x188>)
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	4b19      	ldr	r3, [pc, #100]	; (8007254 <pvPortMalloc+0x190>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d203      	bcs.n	80071fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071f6:	4b15      	ldr	r3, [pc, #84]	; (800724c <pvPortMalloc+0x188>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a16      	ldr	r2, [pc, #88]	; (8007254 <pvPortMalloc+0x190>)
 80071fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	4b11      	ldr	r3, [pc, #68]	; (8007248 <pvPortMalloc+0x184>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	431a      	orrs	r2, r3
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007212:	f7fe fc39 	bl	8005a88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00c      	beq.n	800723a <pvPortMalloc+0x176>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	b672      	cpsid	i
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	b662      	cpsie	i
 8007234:	60fb      	str	r3, [r7, #12]
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <pvPortMalloc+0x174>
	return pvReturn;
 800723a:	69fb      	ldr	r3, [r7, #28]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3728      	adds	r7, #40	; 0x28
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	20005184 	.word	0x20005184
 8007248:	20005190 	.word	0x20005190
 800724c:	20005188 	.word	0x20005188
 8007250:	2000517c 	.word	0x2000517c
 8007254:	2000518c 	.word	0x2000518c

08007258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d04c      	beq.n	8007304 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800726a:	2308      	movs	r3, #8
 800726c:	425b      	negs	r3, r3
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4413      	add	r3, r2
 8007272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	4b23      	ldr	r3, [pc, #140]	; (800730c <vPortFree+0xb4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4013      	ands	r3, r2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10c      	bne.n	80072a0 <vPortFree+0x48>
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728a:	b672      	cpsid	i
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	b662      	cpsie	i
 800729a:	60fb      	str	r3, [r7, #12]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00c      	beq.n	80072c2 <vPortFree+0x6a>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	b672      	cpsid	i
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	b662      	cpsie	i
 80072bc:	60bb      	str	r3, [r7, #8]
}
 80072be:	bf00      	nop
 80072c0:	e7fe      	b.n	80072c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	4b11      	ldr	r3, [pc, #68]	; (800730c <vPortFree+0xb4>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4013      	ands	r3, r2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d019      	beq.n	8007304 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d115      	bne.n	8007304 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	4b0b      	ldr	r3, [pc, #44]	; (800730c <vPortFree+0xb4>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	43db      	mvns	r3, r3
 80072e2:	401a      	ands	r2, r3
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072e8:	f7fe fbc0 	bl	8005a6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	4b07      	ldr	r3, [pc, #28]	; (8007310 <vPortFree+0xb8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4413      	add	r3, r2
 80072f6:	4a06      	ldr	r2, [pc, #24]	; (8007310 <vPortFree+0xb8>)
 80072f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072fa:	6938      	ldr	r0, [r7, #16]
 80072fc:	f000 f86c 	bl	80073d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007300:	f7fe fbc2 	bl	8005a88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007304:	bf00      	nop
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	20005190 	.word	0x20005190
 8007310:	20005188 	.word	0x20005188

08007314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800731a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800731e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007320:	4b27      	ldr	r3, [pc, #156]	; (80073c0 <prvHeapInit+0xac>)
 8007322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00c      	beq.n	8007348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3307      	adds	r3, #7
 8007332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0307 	bic.w	r3, r3, #7
 800733a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	4a1f      	ldr	r2, [pc, #124]	; (80073c0 <prvHeapInit+0xac>)
 8007344:	4413      	add	r3, r2
 8007346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800734c:	4a1d      	ldr	r2, [pc, #116]	; (80073c4 <prvHeapInit+0xb0>)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007352:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <prvHeapInit+0xb0>)
 8007354:	2200      	movs	r2, #0
 8007356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	4413      	add	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007360:	2208      	movs	r2, #8
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0307 	bic.w	r3, r3, #7
 800736e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4a15      	ldr	r2, [pc, #84]	; (80073c8 <prvHeapInit+0xb4>)
 8007374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007376:	4b14      	ldr	r3, [pc, #80]	; (80073c8 <prvHeapInit+0xb4>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2200      	movs	r2, #0
 800737c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800737e:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <prvHeapInit+0xb4>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	1ad2      	subs	r2, r2, r3
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <prvHeapInit+0xb4>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	4a0a      	ldr	r2, [pc, #40]	; (80073cc <prvHeapInit+0xb8>)
 80073a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	4a09      	ldr	r2, [pc, #36]	; (80073d0 <prvHeapInit+0xbc>)
 80073aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073ac:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <prvHeapInit+0xc0>)
 80073ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073b2:	601a      	str	r2, [r3, #0]
}
 80073b4:	bf00      	nop
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	2000157c 	.word	0x2000157c
 80073c4:	2000517c 	.word	0x2000517c
 80073c8:	20005184 	.word	0x20005184
 80073cc:	2000518c 	.word	0x2000518c
 80073d0:	20005188 	.word	0x20005188
 80073d4:	20005190 	.word	0x20005190

080073d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073e0:	4b28      	ldr	r3, [pc, #160]	; (8007484 <prvInsertBlockIntoFreeList+0xac>)
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e002      	b.n	80073ec <prvInsertBlockIntoFreeList+0x14>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d8f7      	bhi.n	80073e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	4413      	add	r3, r2
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	d108      	bne.n	800741a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	441a      	add	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	441a      	add	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d118      	bne.n	8007460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	4b15      	ldr	r3, [pc, #84]	; (8007488 <prvInsertBlockIntoFreeList+0xb0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d00d      	beq.n	8007456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	441a      	add	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	e008      	b.n	8007468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007456:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <prvInsertBlockIntoFreeList+0xb0>)
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	e003      	b.n	8007468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	429a      	cmp	r2, r3
 800746e:	d002      	beq.n	8007476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007476:	bf00      	nop
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	2000517c 	.word	0x2000517c
 8007488:	20005184 	.word	0x20005184

0800748c <__libc_init_array>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4d0d      	ldr	r5, [pc, #52]	; (80074c4 <__libc_init_array+0x38>)
 8007490:	4c0d      	ldr	r4, [pc, #52]	; (80074c8 <__libc_init_array+0x3c>)
 8007492:	1b64      	subs	r4, r4, r5
 8007494:	10a4      	asrs	r4, r4, #2
 8007496:	2600      	movs	r6, #0
 8007498:	42a6      	cmp	r6, r4
 800749a:	d109      	bne.n	80074b0 <__libc_init_array+0x24>
 800749c:	4d0b      	ldr	r5, [pc, #44]	; (80074cc <__libc_init_array+0x40>)
 800749e:	4c0c      	ldr	r4, [pc, #48]	; (80074d0 <__libc_init_array+0x44>)
 80074a0:	f000 f82e 	bl	8007500 <_init>
 80074a4:	1b64      	subs	r4, r4, r5
 80074a6:	10a4      	asrs	r4, r4, #2
 80074a8:	2600      	movs	r6, #0
 80074aa:	42a6      	cmp	r6, r4
 80074ac:	d105      	bne.n	80074ba <__libc_init_array+0x2e>
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b4:	4798      	blx	r3
 80074b6:	3601      	adds	r6, #1
 80074b8:	e7ee      	b.n	8007498 <__libc_init_array+0xc>
 80074ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80074be:	4798      	blx	r3
 80074c0:	3601      	adds	r6, #1
 80074c2:	e7f2      	b.n	80074aa <__libc_init_array+0x1e>
 80074c4:	080075c4 	.word	0x080075c4
 80074c8:	080075c4 	.word	0x080075c4
 80074cc:	080075c4 	.word	0x080075c4
 80074d0:	080075c8 	.word	0x080075c8

080074d4 <memcpy>:
 80074d4:	440a      	add	r2, r1
 80074d6:	4291      	cmp	r1, r2
 80074d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074dc:	d100      	bne.n	80074e0 <memcpy+0xc>
 80074de:	4770      	bx	lr
 80074e0:	b510      	push	{r4, lr}
 80074e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ea:	4291      	cmp	r1, r2
 80074ec:	d1f9      	bne.n	80074e2 <memcpy+0xe>
 80074ee:	bd10      	pop	{r4, pc}

080074f0 <memset>:
 80074f0:	4402      	add	r2, r0
 80074f2:	4603      	mov	r3, r0
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d100      	bne.n	80074fa <memset+0xa>
 80074f8:	4770      	bx	lr
 80074fa:	f803 1b01 	strb.w	r1, [r3], #1
 80074fe:	e7f9      	b.n	80074f4 <memset+0x4>

08007500 <_init>:
 8007500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007502:	bf00      	nop
 8007504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007506:	bc08      	pop	{r3}
 8007508:	469e      	mov	lr, r3
 800750a:	4770      	bx	lr

0800750c <_fini>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	bf00      	nop
 8007510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007512:	bc08      	pop	{r3}
 8007514:	469e      	mov	lr, r3
 8007516:	4770      	bx	lr
