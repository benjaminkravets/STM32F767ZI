
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f78  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007200  08007200  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08007200  08007200  00017200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007208  08007208  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800720c  0800720c  0001720c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  08007220  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  080072c0  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000503c  20000150  08007360  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000518c  08007360  0002518c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .debug_info   000221cd  00000000  00000000  0002017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003eec  00000000  00000000  0004234b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a18  00000000  00000000  00046238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000018a0  00000000  00000000  00047c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000045cf  00000000  00000000  000494f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001da32  00000000  00000000  0004dabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010d9f4  00000000  00000000  0006b4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00178ee5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006f48  00000000  00000000  00178f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	08007160 	.word	0x08007160

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	08007160 	.word	0x08007160

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fcb3 	bl	8000eb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f82a 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f946 	bl	80007e0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000554:	f000 f898 	bl	8000688 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000558:	f000 f8e4 	bl	8000724 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055c:	f000 f912 	bl	8000784 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000560:	f003 fffa 	bl	8004558 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000564:	4a09      	ldr	r2, [pc, #36]	; (800058c <main+0x48>)
 8000566:	2100      	movs	r1, #0
 8000568:	4809      	ldr	r0, [pc, #36]	; (8000590 <main+0x4c>)
 800056a:	f004 f85f 	bl	800462c <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a08      	ldr	r2, [pc, #32]	; (8000594 <main+0x50>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <main+0x54>)
 8000576:	2100      	movs	r1, #0
 8000578:	4808      	ldr	r0, [pc, #32]	; (800059c <main+0x58>)
 800057a:	f004 f857 	bl	800462c <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <main+0x5c>)
 8000582:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000584:	f004 f81c 	bl	80045c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x44>
 800058a:	bf00      	nop
 800058c:	080071a0 	.word	0x080071a0
 8000590:	08000925 	.word	0x08000925
 8000594:	200007e4 	.word	0x200007e4
 8000598:	080071c4 	.word	0x080071c4
 800059c:	08000945 	.word	0x08000945
 80005a0:	200007e8 	.word	0x200007e8

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2234      	movs	r2, #52	; 0x34
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f006 fdcc 	bl	8007150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005c8:	f001 fbf4 	bl	8001db4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <SystemClock_Config+0xdc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a2b      	ldr	r2, [pc, #172]	; (8000680 <SystemClock_Config+0xdc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b29      	ldr	r3, [pc, #164]	; (8000680 <SystemClock_Config+0xdc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <SystemClock_Config+0xe0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ec:	4a25      	ldr	r2, [pc, #148]	; (8000684 <SystemClock_Config+0xe0>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b23      	ldr	r3, [pc, #140]	; (8000684 <SystemClock_Config+0xe0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000604:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000608:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000618:	2360      	movs	r3, #96	; 0x60
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fc21 	bl	8001e74 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000638:	f000 f9a6 	bl	8000988 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800063c:	f001 fbca 	bl	8001dd4 <HAL_PWREx_EnableOverDrive>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000646:	f000 f99f 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2302      	movs	r3, #2
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2103      	movs	r1, #3
 8000666:	4618      	mov	r0, r3
 8000668:	f001 feb2 	bl	80023d0 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000672:	f000 f989 	bl	8000988 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_ETH_Init+0x84>)
 800068e:	4a20      	ldr	r2, [pc, #128]	; (8000710 <MX_ETH_Init+0x88>)
 8000690:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <MX_ETH_Init+0x8c>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_ETH_Init+0x8c>)
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_ETH_Init+0x8c>)
 80006a0:	22e1      	movs	r2, #225	; 0xe1
 80006a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_ETH_Init+0x8c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006aa:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <MX_ETH_Init+0x8c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <MX_ETH_Init+0x8c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_ETH_Init+0x84>)
 80006b8:	4a16      	ldr	r2, [pc, #88]	; (8000714 <MX_ETH_Init+0x8c>)
 80006ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_ETH_Init+0x84>)
 80006be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006c2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_ETH_Init+0x84>)
 80006c6:	4a14      	ldr	r2, [pc, #80]	; (8000718 <MX_ETH_Init+0x90>)
 80006c8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_ETH_Init+0x84>)
 80006cc:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_ETH_Init+0x94>)
 80006ce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_ETH_Init+0x84>)
 80006d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006d6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <MX_ETH_Init+0x84>)
 80006da:	f000 fd1d 	bl	8001118 <HAL_ETH_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006e4:	f000 f950 	bl	8000988 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006e8:	2238      	movs	r2, #56	; 0x38
 80006ea:	2100      	movs	r1, #0
 80006ec:	480c      	ldr	r0, [pc, #48]	; (8000720 <MX_ETH_Init+0x98>)
 80006ee:	f006 fd2f 	bl	8007150 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_ETH_Init+0x98>)
 80006f4:	2221      	movs	r2, #33	; 0x21
 80006f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_ETH_Init+0x98>)
 80006fa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_ETH_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200001a4 	.word	0x200001a4
 8000710:	40028000 	.word	0x40028000
 8000714:	200007ec 	.word	0x200007ec
 8000718:	200000b0 	.word	0x200000b0
 800071c:	20000010 	.word	0x20000010
 8000720:	2000016c 	.word	0x2000016c

08000724 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_USART3_UART_Init+0x58>)
 800072a:	4a15      	ldr	r2, [pc, #84]	; (8000780 <MX_USART3_UART_Init+0x5c>)
 800072c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_USART3_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART3_UART_Init+0x58>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USART3_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000768:	f002 ff92 	bl	8003690 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000772:	f000 f909 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000254 	.word	0x20000254
 8000780:	40004800 	.word	0x40004800

08000784 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800078e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2206      	movs	r2, #6
 8000794:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2202      	movs	r2, #2
 800079a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007bc:	2201      	movs	r2, #1
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c8:	f001 f9ab 	bl	8001b22 <HAL_PCD_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007d2:	f000 f8d9 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200002dc 	.word	0x200002dc

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b47      	ldr	r3, [pc, #284]	; (8000914 <MX_GPIO_Init+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a46      	ldr	r2, [pc, #280]	; (8000914 <MX_GPIO_Init+0x134>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b44      	ldr	r3, [pc, #272]	; (8000914 <MX_GPIO_Init+0x134>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	4b41      	ldr	r3, [pc, #260]	; (8000914 <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a40      	ldr	r2, [pc, #256]	; (8000914 <MX_GPIO_Init+0x134>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b3e      	ldr	r3, [pc, #248]	; (8000914 <MX_GPIO_Init+0x134>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b3b      	ldr	r3, [pc, #236]	; (8000914 <MX_GPIO_Init+0x134>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a3a      	ldr	r2, [pc, #232]	; (8000914 <MX_GPIO_Init+0x134>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b38      	ldr	r3, [pc, #224]	; (8000914 <MX_GPIO_Init+0x134>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b35      	ldr	r3, [pc, #212]	; (8000914 <MX_GPIO_Init+0x134>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a34      	ldr	r2, [pc, #208]	; (8000914 <MX_GPIO_Init+0x134>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b32      	ldr	r3, [pc, #200]	; (8000914 <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a2e      	ldr	r2, [pc, #184]	; (8000914 <MX_GPIO_Init+0x134>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <MX_GPIO_Init+0x134>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <MX_GPIO_Init+0x134>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a28      	ldr	r2, [pc, #160]	; (8000914 <MX_GPIO_Init+0x134>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_GPIO_Init+0x134>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f244 0181 	movw	r1, #16513	; 0x4081
 800088c:	4822      	ldr	r0, [pc, #136]	; (8000918 <MX_GPIO_Init+0x138>)
 800088e:	f001 f915 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	4821      	ldr	r0, [pc, #132]	; (800091c <MX_GPIO_Init+0x13c>)
 8000898:	f001 f910 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	481b      	ldr	r0, [pc, #108]	; (8000920 <MX_GPIO_Init+0x140>)
 80008b4:	f000 ff56 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008b8:	f244 0381 	movw	r3, #16513	; 0x4081
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4811      	ldr	r0, [pc, #68]	; (8000918 <MX_GPIO_Init+0x138>)
 80008d2:	f000 ff47 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d6:	2340      	movs	r3, #64	; 0x40
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <MX_GPIO_Init+0x13c>)
 80008ee:	f000 ff39 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_GPIO_Init+0x13c>)
 8000906:	f000 ff2d 	bl	8001764 <HAL_GPIO_Init>

}
 800090a:	bf00      	nop
 800090c:	3730      	adds	r7, #48	; 0x30
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400
 800091c:	40021800 	.word	0x40021800
 8000920:	40020800 	.word	0x40020800

08000924 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	4804      	ldr	r0, [pc, #16]	; (8000940 <StartBlink01+0x1c>)
 8000930:	f001 f8dd 	bl	8001aee <HAL_GPIO_TogglePin>
    osDelay(500);
 8000934:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000938:	f003 ff1e 	bl	8004778 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800093c:	e7f6      	b.n	800092c <StartBlink01+0x8>
 800093e:	bf00      	nop
 8000940:	40020400 	.word	0x40020400

08000944 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800094c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <StartBlink02+0x1c>)
 8000952:	f001 f8cc 	bl	8001aee <HAL_GPIO_TogglePin>
    osDelay(600);
 8000956:	f44f 7016 	mov.w	r0, #600	; 0x258
 800095a:	f003 ff0d 	bl	8004778 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800095e:	e7f5      	b.n	800094c <StartBlink02+0x8>
 8000960:	40020400 	.word	0x40020400

08000964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d101      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000976:	f000 faa9 	bl	8000ecc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40001000 	.word	0x40001000

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_MspInit+0x4c>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	; 0x44
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	210f      	movs	r1, #15
 80009ce:	f06f 0001 	mvn.w	r0, #1
 80009d2:	f000 fb77 	bl	80010c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	; 0x38
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a4e      	ldr	r2, [pc, #312]	; (8000b3c <HAL_ETH_MspInit+0x158>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	f040 8096 	bne.w	8000b34 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a08:	4b4d      	ldr	r3, [pc, #308]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	4a4c      	ldr	r2, [pc, #304]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a12:	6313      	str	r3, [r2, #48]	; 0x30
 8000a14:	4b4a      	ldr	r3, [pc, #296]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a1c:	623b      	str	r3, [r7, #32]
 8000a1e:	6a3b      	ldr	r3, [r7, #32]
 8000a20:	4b47      	ldr	r3, [pc, #284]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	4a46      	ldr	r2, [pc, #280]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2c:	4b44      	ldr	r3, [pc, #272]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a34:	61fb      	str	r3, [r7, #28]
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	4b41      	ldr	r3, [pc, #260]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	4a40      	ldr	r2, [pc, #256]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a42:	6313      	str	r3, [r2, #48]	; 0x30
 8000a44:	4b3e      	ldr	r3, [pc, #248]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a4c:	61bb      	str	r3, [r7, #24]
 8000a4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a50:	4b3b      	ldr	r3, [pc, #236]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4a3a      	ldr	r2, [pc, #232]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5c:	4b38      	ldr	r3, [pc, #224]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b35      	ldr	r3, [pc, #212]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6c:	4a34      	ldr	r2, [pc, #208]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6313      	str	r3, [r2, #48]	; 0x30
 8000a74:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a80:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a2e      	ldr	r2, [pc, #184]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8c:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a98:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <HAL_ETH_MspInit+0x15c>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ab0:	2332      	movs	r3, #50	; 0x32
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac0:	230b      	movs	r3, #11
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	481e      	ldr	r0, [pc, #120]	; (8000b44 <HAL_ETH_MspInit+0x160>)
 8000acc:	f000 fe4a 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ad0:	2386      	movs	r3, #134	; 0x86
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae0:	230b      	movs	r3, #11
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4817      	ldr	r0, [pc, #92]	; (8000b48 <HAL_ETH_MspInit+0x164>)
 8000aec:	f000 fe3a 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b02:	230b      	movs	r3, #11
 8000b04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480f      	ldr	r0, [pc, #60]	; (8000b4c <HAL_ETH_MspInit+0x168>)
 8000b0e:	f000 fe29 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b24:	230b      	movs	r3, #11
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4808      	ldr	r0, [pc, #32]	; (8000b50 <HAL_ETH_MspInit+0x16c>)
 8000b30:	f000 fe18 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3738      	adds	r7, #56	; 0x38
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40028000 	.word	0x40028000
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40021800 	.word	0x40021800

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0ae      	sub	sp, #184	; 0xb8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2290      	movs	r2, #144	; 0x90
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f006 faeb 	bl	8007150 <memset>
  if(huart->Instance==USART3)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a22      	ldr	r2, [pc, #136]	; (8000c08 <HAL_UART_MspInit+0xb4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d13c      	bne.n	8000bfe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fe74 	bl	8002880 <HAL_RCCEx_PeriphCLKConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b9e:	f7ff fef3 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bec:	2307      	movs	r3, #7
 8000bee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <HAL_UART_MspInit+0xbc>)
 8000bfa:	f000 fdb3 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bfe:	bf00      	nop
 8000c00:	37b8      	adds	r7, #184	; 0xb8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40004800 	.word	0x40004800
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020c00 	.word	0x40020c00

08000c14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b0ae      	sub	sp, #184	; 0xb8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2290      	movs	r2, #144	; 0x90
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f006 fa8b 	bl	8007150 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c42:	d159      	bne.n	8000cf8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 fe13 	bl	8002880 <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c60:	f7ff fe92 	bl	8000988 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <HAL_PCD_MspInit+0xec>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	4a25      	ldr	r2, [pc, #148]	; (8000d00 <HAL_PCD_MspInit+0xec>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c70:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <HAL_PCD_MspInit+0xec>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c7c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c96:	230a      	movs	r3, #10
 8000c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4818      	ldr	r0, [pc, #96]	; (8000d04 <HAL_PCD_MspInit+0xf0>)
 8000ca4:	f000 fd5e 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4810      	ldr	r0, [pc, #64]	; (8000d04 <HAL_PCD_MspInit+0xf0>)
 8000cc4:	f000 fd4e 	bl	8001764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_PCD_MspInit+0xec>)
 8000cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	; (8000d00 <HAL_PCD_MspInit+0xec>)
 8000cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd2:	6353      	str	r3, [r2, #52]	; 0x34
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_PCD_MspInit+0xec>)
 8000cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <HAL_PCD_MspInit+0xec>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_PCD_MspInit+0xec>)
 8000ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cea:	6453      	str	r3, [r2, #68]	; 0x44
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <HAL_PCD_MspInit+0xec>)
 8000cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	37b8      	adds	r7, #184	; 0xb8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000

08000d08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08e      	sub	sp, #56	; 0x38
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d18:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <HAL_InitTick+0xe0>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a32      	ldr	r2, [pc, #200]	; (8000de8 <HAL_InitTick+0xe0>)
 8000d1e:	f043 0310 	orr.w	r3, r3, #16
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <HAL_InitTick+0xe0>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d30:	f107 0210 	add.w	r2, r7, #16
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 fd6e 	bl	800281c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d40:	6a3b      	ldr	r3, [r7, #32]
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d103      	bne.n	8000d52 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d4a:	f001 fd3f 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8000d4e:	6378      	str	r0, [r7, #52]	; 0x34
 8000d50:	e004      	b.n	8000d5c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d52:	f001 fd3b 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8000d56:	4603      	mov	r3, r0
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5e:	4a23      	ldr	r2, [pc, #140]	; (8000dec <HAL_InitTick+0xe4>)
 8000d60:	fba2 2303 	umull	r2, r3, r2, r3
 8000d64:	0c9b      	lsrs	r3, r3, #18
 8000d66:	3b01      	subs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <HAL_InitTick+0xe8>)
 8000d6c:	4a21      	ldr	r2, [pc, #132]	; (8000df4 <HAL_InitTick+0xec>)
 8000d6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <HAL_InitTick+0xe8>)
 8000d72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d76:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d78:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <HAL_InitTick+0xe8>)
 8000d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <HAL_InitTick+0xe8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <HAL_InitTick+0xe8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <HAL_InitTick+0xe8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d90:	4817      	ldr	r0, [pc, #92]	; (8000df0 <HAL_InitTick+0xe8>)
 8000d92:	f002 f99d 	bl	80030d0 <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d11b      	bne.n	8000ddc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000da4:	4812      	ldr	r0, [pc, #72]	; (8000df0 <HAL_InitTick+0xe8>)
 8000da6:	f002 f9f5 	bl	8003194 <HAL_TIM_Base_Start_IT>
 8000daa:	4603      	mov	r3, r0
 8000dac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000db0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d111      	bne.n	8000ddc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000db8:	2036      	movs	r0, #54	; 0x36
 8000dba:	f000 f99f 	bl	80010fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d808      	bhi.n	8000dd6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	2036      	movs	r0, #54	; 0x36
 8000dca:	f000 f97b 	bl	80010c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_InitTick+0xf0>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	e002      	b.n	8000ddc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3738      	adds	r7, #56	; 0x38
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	431bde83 	.word	0x431bde83
 8000df0:	200007f4 	.word	0x200007f4
 8000df4:	40001000 	.word	0x40001000
 8000df8:	20000004 	.word	0x20000004

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <MemManage_Handler+0x4>

08000e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <TIM6_DAC_IRQHandler+0x10>)
 8000e2e:	f002 fa29 	bl	8003284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200007f4 	.word	0x200007f4

08000e3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e66:	490e      	ldr	r1, [pc, #56]	; (8000ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e7c:	4c0b      	ldr	r4, [pc, #44]	; (8000eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e8a:	f7ff ffd7 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f006 f92d 	bl	80070ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fb57 	bl	8000544 <main>
  bx  lr    
 8000e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ea4:	08007210 	.word	0x08007210
  ldr r2, =_sbss
 8000ea8:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000eac:	2000518c 	.word	0x2000518c

08000eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC_IRQHandler>

08000eb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f000 f8f9 	bl	80010ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebc:	200f      	movs	r0, #15
 8000ebe:	f7ff ff23 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec2:	f7ff fd67 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000840 	.word	0x20000840

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000840 	.word	0x20000840

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff ffee 	bl	8000ef4 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffde 	bl	8000ef4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <__NVIC_SetPriorityGrouping+0x40>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x40>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	05fa0000 	.word	0x05fa0000

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <__NVIC_EnableIRQ+0x38>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff4c 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d6:	f7ff ff61 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 80010da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	6978      	ldr	r0, [r7, #20]
 80010e2:	f7ff ffb1 	bl	8001048 <NVIC_EncodePriority>
 80010e6:	4602      	mov	r2, r0
 80010e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff80 	bl	8000ff4 <__NVIC_SetPriority>
}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff54 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e06a      	b.n	8001200 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001130:	2b00      	cmp	r3, #0
 8001132:	d106      	bne.n	8001142 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2223      	movs	r2, #35	; 0x23
 8001138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fc51 	bl	80009e4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <HAL_ETH_Init+0xf0>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a30      	ldr	r2, [pc, #192]	; (8001208 <HAL_ETH_Init+0xf0>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <HAL_ETH_Init+0xf0>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <HAL_ETH_Init+0xf4>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	4a2b      	ldr	r2, [pc, #172]	; (800120c <HAL_ETH_Init+0xf4>)
 8001160:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001164:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <HAL_ETH_Init+0xf4>)
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	4927      	ldr	r1, [pc, #156]	; (800120c <HAL_ETH_Init+0xf4>)
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <HAL_ETH_Init+0xf4>)
 8001176:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800118e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001190:	f7ff feb0 	bl	8000ef4 <HAL_GetTick>
 8001194:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001196:	e011      	b.n	80011bc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001198:	f7ff feac 	bl	8000ef4 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011a6:	d909      	bls.n	80011bc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2204      	movs	r2, #4
 80011ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	22e0      	movs	r2, #224	; 0xe0
 80011b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e021      	b.n	8001200 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1e4      	bne.n	8001198 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f958 	bl	8001484 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f9ff 	bl	80015d8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fa55 	bl	800168a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	461a      	mov	r2, r3
 80011e6:	2100      	movs	r1, #0
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f9bd 	bl	8001568 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2210      	movs	r2, #16
 80011fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40013800 	.word	0x40013800

08001210 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4b51      	ldr	r3, [pc, #324]	; (800136c <ETH_SetMACConfig+0x15c>)
 8001226:	4013      	ands	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	7c1b      	ldrb	r3, [r3, #16]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <ETH_SetMACConfig+0x28>
 8001232:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001236:	e000      	b.n	800123a <ETH_SetMACConfig+0x2a>
 8001238:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	7c5b      	ldrb	r3, [r3, #17]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <ETH_SetMACConfig+0x38>
 8001242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001246:	e000      	b.n	800124a <ETH_SetMACConfig+0x3a>
 8001248:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800124a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001250:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	7fdb      	ldrb	r3, [r3, #31]
 8001256:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001258:	431a      	orrs	r2, r3
                        macconf->Speed |
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800125e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	7f92      	ldrb	r2, [r2, #30]
 8001264:	2a00      	cmp	r2, #0
 8001266:	d102      	bne.n	800126e <ETH_SetMACConfig+0x5e>
 8001268:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800126c:	e000      	b.n	8001270 <ETH_SetMACConfig+0x60>
 800126e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001270:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	7f1b      	ldrb	r3, [r3, #28]
 8001276:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001278:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800127e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	791b      	ldrb	r3, [r3, #4]
 8001284:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001286:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800128e:	2a00      	cmp	r2, #0
 8001290:	d102      	bne.n	8001298 <ETH_SetMACConfig+0x88>
 8001292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001296:	e000      	b.n	800129a <ETH_SetMACConfig+0x8a>
 8001298:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800129a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	7bdb      	ldrb	r3, [r3, #15]
 80012a0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80012a2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80012a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80012b0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012b2:	4313      	orrs	r3, r2
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f7ff fe1e 	bl	8000f0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80012e6:	4013      	ands	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80012f6:	2a00      	cmp	r2, #0
 80012f8:	d101      	bne.n	80012fe <ETH_SetMACConfig+0xee>
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	e000      	b.n	8001300 <ETH_SetMACConfig+0xf0>
 80012fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001300:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001306:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800130e:	2a01      	cmp	r2, #1
 8001310:	d101      	bne.n	8001316 <ETH_SetMACConfig+0x106>
 8001312:	2208      	movs	r2, #8
 8001314:	e000      	b.n	8001318 <ETH_SetMACConfig+0x108>
 8001316:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001318:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001320:	2a01      	cmp	r2, #1
 8001322:	d101      	bne.n	8001328 <ETH_SetMACConfig+0x118>
 8001324:	2204      	movs	r2, #4
 8001326:	e000      	b.n	800132a <ETH_SetMACConfig+0x11a>
 8001328:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800132a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001332:	2a01      	cmp	r2, #1
 8001334:	d101      	bne.n	800133a <ETH_SetMACConfig+0x12a>
 8001336:	2202      	movs	r2, #2
 8001338:	e000      	b.n	800133c <ETH_SetMACConfig+0x12c>
 800133a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800133c:	4313      	orrs	r3, r2
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff fdd9 	bl	8000f0c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	619a      	str	r2, [r3, #24]
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	ff20810f 	.word	0xff20810f

08001370 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <ETH_SetDMAConfig+0x110>)
 800138a:	4013      	ands	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	7b1b      	ldrb	r3, [r3, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <ETH_SetDMAConfig+0x2c>
 8001396:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800139a:	e000      	b.n	800139e <ETH_SetDMAConfig+0x2e>
 800139c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	7b5b      	ldrb	r3, [r3, #13]
 80013a2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013a4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	7f52      	ldrb	r2, [r2, #29]
 80013aa:	2a00      	cmp	r2, #0
 80013ac:	d102      	bne.n	80013b4 <ETH_SetDMAConfig+0x44>
 80013ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013b2:	e000      	b.n	80013b6 <ETH_SetDMAConfig+0x46>
 80013b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80013b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	7b9b      	ldrb	r3, [r3, #14]
 80013bc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80013be:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80013c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	7f1b      	ldrb	r3, [r3, #28]
 80013ca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80013cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	7f9b      	ldrb	r3, [r3, #30]
 80013d2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80013d4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80013da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013e2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013e4:	4313      	orrs	r3, r2
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013f4:	461a      	mov	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001406:	2001      	movs	r0, #1
 8001408:	f7ff fd80 	bl	8000f0c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001414:	461a      	mov	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	791b      	ldrb	r3, [r3, #4]
 800141e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001424:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800142a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001430:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001438:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800143a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001442:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001448:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001452:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001456:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff fd51 	bl	8000f0c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	f8de3f23 	.word	0xf8de3f23

08001484 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b0a6      	sub	sp, #152	; 0x98
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800148c:	2301      	movs	r3, #1
 800148e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001492:	2301      	movs	r3, #1
 8001494:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001498:	2300      	movs	r3, #0
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80014c0:	2300      	movs	r3, #0
 80014c2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80014e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ea:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80014ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80014f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014fc:	4619      	mov	r1, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fe86 	bl	8001210 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001504:	2301      	movs	r3, #1
 8001506:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001508:	2301      	movs	r3, #1
 800150a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800150c:	2301      	movs	r3, #1
 800150e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001512:	2301      	movs	r3, #1
 8001514:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800152a:	2301      	movs	r3, #1
 800152c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001530:	2301      	movs	r3, #1
 8001532:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001538:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800153a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800153e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001546:	2301      	movs	r3, #1
 8001548:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ff08 	bl	8001370 <ETH_SetDMAConfig>
}
 8001560:	bf00      	nop
 8001562:	3798      	adds	r7, #152	; 0x98
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3305      	adds	r3, #5
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	3204      	adds	r2, #4
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	4313      	orrs	r3, r2
 8001584:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <ETH_MACAddressConfig+0x68>)
 800158a:	4413      	add	r3, r2
 800158c:	461a      	mov	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3303      	adds	r3, #3
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	061a      	lsls	r2, r3, #24
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3302      	adds	r3, #2
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3301      	adds	r3, #1
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	4313      	orrs	r3, r2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	7812      	ldrb	r2, [r2, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <ETH_MACAddressConfig+0x6c>)
 80015ba:	4413      	add	r3, r2
 80015bc:	461a      	mov	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	6013      	str	r3, [r2, #0]
}
 80015c2:	bf00      	nop
 80015c4:	371c      	adds	r7, #28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40028040 	.word	0x40028040
 80015d4:	40028044 	.word	0x40028044

080015d8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	e03e      	b.n	8001664 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68d9      	ldr	r1, [r3, #12]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	3206      	adds	r2, #6
 8001618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d80c      	bhi.n	8001648 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68d9      	ldr	r1, [r3, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	461a      	mov	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	e004      	b.n	8001652 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	461a      	mov	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	3301      	adds	r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d9bd      	bls.n	80015e6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167c:	611a      	str	r2, [r3, #16]
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	e046      	b.n	8001726 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6919      	ldr	r1, [r3, #16]
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016d4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80016dc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	3212      	adds	r2, #18
 80016f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d80c      	bhi.n	8001716 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6919      	ldr	r1, [r3, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	461a      	mov	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	e004      	b.n	8001720 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	461a      	mov	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3301      	adds	r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d9b5      	bls.n	8001698 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691a      	ldr	r2, [r3, #16]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001756:	60da      	str	r2, [r3, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	e175      	b.n	8001a70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001784:	2201      	movs	r2, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	429a      	cmp	r2, r3
 800179e:	f040 8164 	bne.w	8001a6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d005      	beq.n	80017ba <HAL_GPIO_Init+0x56>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d130      	bne.n	800181c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	2203      	movs	r2, #3
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	f003 0201 	and.w	r2, r3, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b03      	cmp	r3, #3
 8001826:	d017      	beq.n	8001858 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d123      	bne.n	80018ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	08da      	lsrs	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3208      	adds	r2, #8
 800186c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	08da      	lsrs	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3208      	adds	r2, #8
 80018a6:	69b9      	ldr	r1, [r7, #24]
 80018a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0203 	and.w	r2, r3, #3
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80be 	beq.w	8001a6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	4b66      	ldr	r3, [pc, #408]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a65      	ldr	r2, [pc, #404]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b63      	ldr	r3, [pc, #396]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001906:	4a61      	ldr	r2, [pc, #388]	; (8001a8c <HAL_GPIO_Init+0x328>)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <HAL_GPIO_Init+0x32c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d037      	beq.n	80019a2 <HAL_GPIO_Init+0x23e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a57      	ldr	r2, [pc, #348]	; (8001a94 <HAL_GPIO_Init+0x330>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d031      	beq.n	800199e <HAL_GPIO_Init+0x23a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a56      	ldr	r2, [pc, #344]	; (8001a98 <HAL_GPIO_Init+0x334>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d02b      	beq.n	800199a <HAL_GPIO_Init+0x236>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a55      	ldr	r2, [pc, #340]	; (8001a9c <HAL_GPIO_Init+0x338>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d025      	beq.n	8001996 <HAL_GPIO_Init+0x232>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a54      	ldr	r2, [pc, #336]	; (8001aa0 <HAL_GPIO_Init+0x33c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d01f      	beq.n	8001992 <HAL_GPIO_Init+0x22e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a53      	ldr	r2, [pc, #332]	; (8001aa4 <HAL_GPIO_Init+0x340>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d019      	beq.n	800198e <HAL_GPIO_Init+0x22a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a52      	ldr	r2, [pc, #328]	; (8001aa8 <HAL_GPIO_Init+0x344>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d013      	beq.n	800198a <HAL_GPIO_Init+0x226>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a51      	ldr	r2, [pc, #324]	; (8001aac <HAL_GPIO_Init+0x348>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00d      	beq.n	8001986 <HAL_GPIO_Init+0x222>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a50      	ldr	r2, [pc, #320]	; (8001ab0 <HAL_GPIO_Init+0x34c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d007      	beq.n	8001982 <HAL_GPIO_Init+0x21e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4f      	ldr	r2, [pc, #316]	; (8001ab4 <HAL_GPIO_Init+0x350>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d101      	bne.n	800197e <HAL_GPIO_Init+0x21a>
 800197a:	2309      	movs	r3, #9
 800197c:	e012      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800197e:	230a      	movs	r3, #10
 8001980:	e010      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 8001982:	2308      	movs	r3, #8
 8001984:	e00e      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 8001986:	2307      	movs	r3, #7
 8001988:	e00c      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800198a:	2306      	movs	r3, #6
 800198c:	e00a      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800198e:	2305      	movs	r3, #5
 8001990:	e008      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 8001992:	2304      	movs	r3, #4
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 8001996:	2303      	movs	r3, #3
 8001998:	e004      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800199a:	2302      	movs	r3, #2
 800199c:	e002      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 80019a2:	2300      	movs	r3, #0
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	f002 0203 	and.w	r2, r2, #3
 80019aa:	0092      	lsls	r2, r2, #2
 80019ac:	4093      	lsls	r3, r2
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019b4:	4935      	ldr	r1, [pc, #212]	; (8001a8c <HAL_GPIO_Init+0x328>)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019c2:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019e6:	4a34      	ldr	r2, [pc, #208]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019ec:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a10:	4a29      	ldr	r2, [pc, #164]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a16:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a3a:	4a1f      	ldr	r2, [pc, #124]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a64:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	2b0f      	cmp	r3, #15
 8001a74:	f67f ae86 	bls.w	8001784 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40013800 	.word	0x40013800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	40020c00 	.word	0x40020c00
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40021400 	.word	0x40021400
 8001aa8:	40021800 	.word	0x40021800
 8001aac:	40021c00 	.word	0x40021c00
 8001ab0:	40022000 	.word	0x40022000
 8001ab4:	40022400 	.word	0x40022400
 8001ab8:	40013c00 	.word	0x40013c00

08001abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001acc:	787b      	ldrb	r3, [r7, #1]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ad8:	e003      	b.n	8001ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	041a      	lsls	r2, r3, #16
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	619a      	str	r2, [r3, #24]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b00:	887a      	ldrh	r2, [r7, #2]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	041a      	lsls	r2, r3, #16
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	400b      	ands	r3, r1
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	619a      	str	r2, [r3, #24]
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b24:	b08f      	sub	sp, #60	; 0x3c
 8001b26:	af0a      	add	r7, sp, #40	; 0x28
 8001b28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e116      	b.n	8001d62 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff f860 	bl	8000c14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2203      	movs	r2, #3
 8001b58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f002 fa4c 	bl	8004010 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	687e      	ldr	r6, [r7, #4]
 8001b80:	466d      	mov	r5, sp
 8001b82:	f106 0410 	add.w	r4, r6, #16
 8001b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b92:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b96:	1d33      	adds	r3, r6, #4
 8001b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b9a:	6838      	ldr	r0, [r7, #0]
 8001b9c:	f002 f9e0 	bl	8003f60 <USB_CoreInit>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e0d7      	b.n	8001d62 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 fa3a 	bl	8004032 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e04a      	b.n	8001c5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	333d      	adds	r3, #61	; 0x3d
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	333c      	adds	r3, #60	; 0x3c
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	b298      	uxth	r0, r3
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3344      	adds	r3, #68	; 0x44
 8001c00:	4602      	mov	r2, r0
 8001c02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c04:	7bfa      	ldrb	r2, [r7, #15]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	3340      	adds	r3, #64	; 0x40
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	3348      	adds	r3, #72	; 0x48
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	334c      	adds	r3, #76	; 0x4c
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3354      	adds	r3, #84	; 0x54
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	3301      	adds	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d3af      	bcc.n	8001bc4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e044      	b.n	8001cf4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d3b5      	bcc.n	8001c6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	687e      	ldr	r6, [r7, #4]
 8001d06:	466d      	mov	r5, sp
 8001d08:	f106 0410 	add.w	r4, r6, #16
 8001d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d18:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d1c:	1d33      	adds	r3, r6, #4
 8001d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d20:	6838      	ldr	r0, [r7, #0]
 8001d22:	f002 f9d3 	bl	80040cc <USB_DevInit>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e014      	b.n	8001d62 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d102      	bne.n	8001d56 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f80b 	bl	8001d6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 fb91 	bl	8004482 <USB_DevDisconnect>

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_PCDEx_ActivateLPM+0x44>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	10000003 	.word	0x10000003

08001db4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40007000 	.word	0x40007000

08001dd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <HAL_PWREx_EnableOverDrive+0x98>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a22      	ldr	r2, [pc, #136]	; (8001e6c <HAL_PWREx_EnableOverDrive+0x98>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_PWREx_EnableOverDrive+0x98>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e02:	f7ff f877 	bl	8000ef4 <HAL_GetTick>
 8001e06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e08:	e009      	b.n	8001e1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e0a:	f7ff f873 	bl	8000ef4 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e18:	d901      	bls.n	8001e1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e022      	b.n	8001e64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2a:	d1ee      	bne.n	8001e0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e38:	f7ff f85c 	bl	8000ef4 <HAL_GetTick>
 8001e3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e3e:	e009      	b.n	8001e54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e40:	f7ff f858 	bl	8000ef4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e4e:	d901      	bls.n	8001e54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e007      	b.n	8001e64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e60:	d1ee      	bne.n	8001e40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40007000 	.word	0x40007000

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e29b      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8087 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e98:	4b96      	ldr	r3, [pc, #600]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d00c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea4:	4b93      	ldr	r3, [pc, #588]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d112      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x62>
 8001eb0:	4b90      	ldr	r3, [pc, #576]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebe:	4b8d      	ldr	r3, [pc, #564]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d06c      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x130>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d168      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e275      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x7a>
 8001ee0:	4b84      	ldr	r3, [pc, #528]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a83      	ldr	r2, [pc, #524]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	e02e      	b.n	8001f4c <HAL_RCC_OscConfig+0xd8>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x9c>
 8001ef6:	4b7f      	ldr	r3, [pc, #508]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7e      	ldr	r2, [pc, #504]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b7c      	ldr	r3, [pc, #496]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a7b      	ldr	r2, [pc, #492]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xd8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0xc0>
 8001f1a:	4b76      	ldr	r3, [pc, #472]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a75      	ldr	r2, [pc, #468]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b73      	ldr	r3, [pc, #460]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a72      	ldr	r2, [pc, #456]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xd8>
 8001f34:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6e      	ldr	r2, [pc, #440]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b6c      	ldr	r3, [pc, #432]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a6b      	ldr	r2, [pc, #428]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7fe ffce 	bl	8000ef4 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7fe ffca 	bl	8000ef4 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e229      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b61      	ldr	r3, [pc, #388]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xe8>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ffba 	bl	8000ef4 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7fe ffb6 	bl	8000ef4 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e215      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	4b57      	ldr	r3, [pc, #348]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x110>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d069      	beq.n	8002086 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb2:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fbe:	4b4d      	ldr	r3, [pc, #308]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCC_OscConfig+0x190>
 8001fca:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4b47      	ldr	r3, [pc, #284]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x17a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1e9      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b41      	ldr	r3, [pc, #260]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	493d      	ldr	r1, [pc, #244]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e040      	b.n	8002086 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d023      	beq.n	8002054 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a38      	ldr	r2, [pc, #224]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe ff6c 	bl	8000ef4 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002020:	f7fe ff68 	bl	8000ef4 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e1c7      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002032:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4929      	ldr	r1, [pc, #164]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
 8002052:	e018      	b.n	8002086 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7fe ff48 	bl	8000ef4 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002068:	f7fe ff44 	bl	8000ef4 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e1a3      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d038      	beq.n	8002104 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d019      	beq.n	80020ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209a:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 800209c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209e:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a6:	f7fe ff25 	bl	8000ef4 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ae:	f7fe ff21 	bl	8000ef4 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e180      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 80020c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x23a>
 80020cc:	e01a      	b.n	8002104 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 80020d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d2:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <HAL_RCC_OscConfig+0x280>)
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7fe ff0b 	bl	8000ef4 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e2:	f7fe ff07 	bl	8000ef4 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d903      	bls.n	80020f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e166      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
 80020f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f8:	4b92      	ldr	r3, [pc, #584]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80020fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1ee      	bne.n	80020e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a4 	beq.w	800225a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002112:	4b8c      	ldr	r3, [pc, #560]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10d      	bne.n	800213a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	4b89      	ldr	r3, [pc, #548]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a88      	ldr	r2, [pc, #544]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b86      	ldr	r3, [pc, #536]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002136:	2301      	movs	r3, #1
 8002138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213a:	4b83      	ldr	r3, [pc, #524]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d118      	bne.n	8002178 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002146:	4b80      	ldr	r3, [pc, #512]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a7f      	ldr	r2, [pc, #508]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002152:	f7fe fecf 	bl	8000ef4 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215a:	f7fe fecb 	bl	8000ef4 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b64      	cmp	r3, #100	; 0x64
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e12a      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216c:	4b76      	ldr	r3, [pc, #472]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x31a>
 8002180:	4b70      	ldr	r3, [pc, #448]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	4a6f      	ldr	r2, [pc, #444]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6713      	str	r3, [r2, #112]	; 0x70
 800218c:	e02d      	b.n	80021ea <HAL_RCC_OscConfig+0x376>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x33c>
 8002196:	4b6b      	ldr	r3, [pc, #428]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a6a      	ldr	r2, [pc, #424]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
 80021a2:	4b68      	ldr	r3, [pc, #416]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	4a67      	ldr	r2, [pc, #412]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	6713      	str	r3, [r2, #112]	; 0x70
 80021ae:	e01c      	b.n	80021ea <HAL_RCC_OscConfig+0x376>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d10c      	bne.n	80021d2 <HAL_RCC_OscConfig+0x35e>
 80021b8:	4b62      	ldr	r3, [pc, #392]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	4a61      	ldr	r2, [pc, #388]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	6713      	str	r3, [r2, #112]	; 0x70
 80021c4:	4b5f      	ldr	r3, [pc, #380]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	4a5e      	ldr	r2, [pc, #376]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6713      	str	r3, [r2, #112]	; 0x70
 80021d0:	e00b      	b.n	80021ea <HAL_RCC_OscConfig+0x376>
 80021d2:	4b5c      	ldr	r3, [pc, #368]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d6:	4a5b      	ldr	r2, [pc, #364]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	6713      	str	r3, [r2, #112]	; 0x70
 80021de:	4b59      	ldr	r3, [pc, #356]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	4a58      	ldr	r2, [pc, #352]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d015      	beq.n	800221e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f2:	f7fe fe7f 	bl	8000ef4 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7fe fe7b 	bl	8000ef4 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e0d8      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002210:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0ee      	beq.n	80021fa <HAL_RCC_OscConfig+0x386>
 800221c:	e014      	b.n	8002248 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7fe fe69 	bl	8000ef4 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7fe fe65 	bl	8000ef4 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	; 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e0c2      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223c:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1ee      	bne.n	8002226 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002248:	7dfb      	ldrb	r3, [r7, #23]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d105      	bne.n	800225a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224e:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a3c      	ldr	r2, [pc, #240]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80ae 	beq.w	80023c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002264:	4b37      	ldr	r3, [pc, #220]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b08      	cmp	r3, #8
 800226e:	d06d      	beq.n	800234c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d14b      	bne.n	8002310 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002278:	4b32      	ldr	r3, [pc, #200]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a31      	ldr	r2, [pc, #196]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 800227e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe fe36 	bl	8000ef4 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7fe fe32 	bl	8000ef4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e091      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69da      	ldr	r2, [r3, #28]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	019b      	lsls	r3, r3, #6
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	085b      	lsrs	r3, r3, #1
 80022c2:	3b01      	subs	r3, #1
 80022c4:	041b      	lsls	r3, r3, #16
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	061b      	lsls	r3, r3, #24
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	071b      	lsls	r3, r3, #28
 80022d6:	491b      	ldr	r1, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a18      	ldr	r2, [pc, #96]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80022e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fe04 	bl	8000ef4 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fe00 	bl	8000ef4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e05f      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x47c>
 800230e:	e057      	b.n	80023c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800231a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fdea 	bl	8000ef4 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002324:	f7fe fde6 	bl	8000ef4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e045      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002336:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x4b0>
 8002342:	e03d      	b.n	80023c0 <HAL_RCC_OscConfig+0x54c>
 8002344:	40023800 	.word	0x40023800
 8002348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800234c:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <HAL_RCC_OscConfig+0x558>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d030      	beq.n	80023bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d129      	bne.n	80023bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d122      	bne.n	80023bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800237c:	4013      	ands	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002382:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002384:	4293      	cmp	r3, r2
 8002386:	d119      	bne.n	80023bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	085b      	lsrs	r3, r3, #1
 8002394:	3b01      	subs	r3, #1
 8002396:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d10f      	bne.n	80023bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800

080023d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0d0      	b.n	800258a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e8:	4b6a      	ldr	r3, [pc, #424]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d910      	bls.n	8002418 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b67      	ldr	r3, [pc, #412]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 020f 	bic.w	r2, r3, #15
 80023fe:	4965      	ldr	r1, [pc, #404]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b63      	ldr	r3, [pc, #396]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0b8      	b.n	800258a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d020      	beq.n	8002466 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800243a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 800244e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002452:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b50      	ldr	r3, [pc, #320]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	494d      	ldr	r1, [pc, #308]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d040      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d115      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e073      	b.n	800258a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e06b      	b.n	800258a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b2:	4b39      	ldr	r3, [pc, #228]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f023 0203 	bic.w	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4936      	ldr	r1, [pc, #216]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c4:	f7fe fd16 	bl	8000ef4 <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024cc:	f7fe fd12 	bl	8000ef4 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e053      	b.n	800258a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 020c 	and.w	r2, r3, #12
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d1eb      	bne.n	80024cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f4:	4b27      	ldr	r3, [pc, #156]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d210      	bcs.n	8002524 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b24      	ldr	r3, [pc, #144]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 020f 	bic.w	r2, r3, #15
 800250a:	4922      	ldr	r1, [pc, #136]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e032      	b.n	800258a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4916      	ldr	r1, [pc, #88]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	490e      	ldr	r1, [pc, #56]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002562:	f000 f821 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8002566:	4602      	mov	r2, r0
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	490a      	ldr	r1, [pc, #40]	; (800259c <HAL_RCC_ClockConfig+0x1cc>)
 8002574:	5ccb      	ldrb	r3, [r1, r3]
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1d0>)
 800257c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_ClockConfig+0x1d4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fbc0 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00
 8002598:	40023800 	.word	0x40023800
 800259c:	080071e8 	.word	0x080071e8
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000004 	.word	0x20000004

080025a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ac:	b094      	sub	sp, #80	; 0x50
 80025ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	647b      	str	r3, [r7, #68]	; 0x44
 80025b4:	2300      	movs	r3, #0
 80025b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025b8:	2300      	movs	r3, #0
 80025ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025c0:	4b79      	ldr	r3, [pc, #484]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d00d      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x40>
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	f200 80e1 	bhi.w	8002794 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x34>
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025da:	e0db      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025dc:	4b73      	ldr	r3, [pc, #460]	; (80027ac <HAL_RCC_GetSysClockFreq+0x204>)
 80025de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025e0:	e0db      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025e2:	4b73      	ldr	r3, [pc, #460]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80025e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025e6:	e0d8      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e8:	4b6f      	ldr	r3, [pc, #444]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025f2:	4b6d      	ldr	r3, [pc, #436]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d063      	beq.n	80026c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025fe:	4b6a      	ldr	r3, [pc, #424]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	099b      	lsrs	r3, r3, #6
 8002604:	2200      	movs	r2, #0
 8002606:	63bb      	str	r3, [r7, #56]	; 0x38
 8002608:	63fa      	str	r2, [r7, #60]	; 0x3c
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
 8002612:	2300      	movs	r3, #0
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
 8002616:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800261a:	4622      	mov	r2, r4
 800261c:	462b      	mov	r3, r5
 800261e:	f04f 0000 	mov.w	r0, #0
 8002622:	f04f 0100 	mov.w	r1, #0
 8002626:	0159      	lsls	r1, r3, #5
 8002628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800262c:	0150      	lsls	r0, r2, #5
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4621      	mov	r1, r4
 8002634:	1a51      	subs	r1, r2, r1
 8002636:	6139      	str	r1, [r7, #16]
 8002638:	4629      	mov	r1, r5
 800263a:	eb63 0301 	sbc.w	r3, r3, r1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800264c:	4659      	mov	r1, fp
 800264e:	018b      	lsls	r3, r1, #6
 8002650:	4651      	mov	r1, sl
 8002652:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002656:	4651      	mov	r1, sl
 8002658:	018a      	lsls	r2, r1, #6
 800265a:	4651      	mov	r1, sl
 800265c:	ebb2 0801 	subs.w	r8, r2, r1
 8002660:	4659      	mov	r1, fp
 8002662:	eb63 0901 	sbc.w	r9, r3, r1
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800267a:	4690      	mov	r8, r2
 800267c:	4699      	mov	r9, r3
 800267e:	4623      	mov	r3, r4
 8002680:	eb18 0303 	adds.w	r3, r8, r3
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	462b      	mov	r3, r5
 8002688:	eb49 0303 	adc.w	r3, r9, r3
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800269a:	4629      	mov	r1, r5
 800269c:	024b      	lsls	r3, r1, #9
 800269e:	4621      	mov	r1, r4
 80026a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026a4:	4621      	mov	r1, r4
 80026a6:	024a      	lsls	r2, r1, #9
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ae:	2200      	movs	r2, #0
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026b8:	f7fd fdc2 	bl	8000240 <__aeabi_uldivmod>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4613      	mov	r3, r2
 80026c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c4:	e058      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c6:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	2200      	movs	r2, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	4611      	mov	r1, r2
 80026d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026d6:	623b      	str	r3, [r7, #32]
 80026d8:	2300      	movs	r3, #0
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
 80026dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026e0:	4642      	mov	r2, r8
 80026e2:	464b      	mov	r3, r9
 80026e4:	f04f 0000 	mov.w	r0, #0
 80026e8:	f04f 0100 	mov.w	r1, #0
 80026ec:	0159      	lsls	r1, r3, #5
 80026ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f2:	0150      	lsls	r0, r2, #5
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4641      	mov	r1, r8
 80026fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80026fe:	4649      	mov	r1, r9
 8002700:	eb63 0b01 	sbc.w	fp, r3, r1
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002710:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002714:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002718:	ebb2 040a 	subs.w	r4, r2, sl
 800271c:	eb63 050b 	sbc.w	r5, r3, fp
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	00eb      	lsls	r3, r5, #3
 800272a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800272e:	00e2      	lsls	r2, r4, #3
 8002730:	4614      	mov	r4, r2
 8002732:	461d      	mov	r5, r3
 8002734:	4643      	mov	r3, r8
 8002736:	18e3      	adds	r3, r4, r3
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	464b      	mov	r3, r9
 800273c:	eb45 0303 	adc.w	r3, r5, r3
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800274e:	4629      	mov	r1, r5
 8002750:	028b      	lsls	r3, r1, #10
 8002752:	4621      	mov	r1, r4
 8002754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002758:	4621      	mov	r1, r4
 800275a:	028a      	lsls	r2, r1, #10
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002762:	2200      	movs	r2, #0
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	61fa      	str	r2, [r7, #28]
 8002768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800276c:	f7fd fd68 	bl	8000240 <__aeabi_uldivmod>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4613      	mov	r3, r2
 8002776:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	3301      	adds	r3, #1
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002788:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800278a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002792:	e002      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCC_GetSysClockFreq+0x204>)
 8002796:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800279c:	4618      	mov	r0, r3
 800279e:	3750      	adds	r7, #80	; 0x50
 80027a0:	46bd      	mov	sp, r7
 80027a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	00f42400 	.word	0x00f42400
 80027b0:	007a1200 	.word	0x007a1200

080027b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000000 	.word	0x20000000

080027cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d0:	f7ff fff0 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	0a9b      	lsrs	r3, r3, #10
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4903      	ldr	r1, [pc, #12]	; (80027f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40023800 	.word	0x40023800
 80027f0:	080071f8 	.word	0x080071f8

080027f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027f8:	f7ff ffdc 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	0b5b      	lsrs	r3, r3, #13
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	080071f8 	.word	0x080071f8

0800281c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	220f      	movs	r2, #15
 800282a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCC_GetClockConfig+0x5c>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 0203 	and.w	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_RCC_GetClockConfig+0x5c>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <HAL_RCC_GetClockConfig+0x5c>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_RCC_GetClockConfig+0x5c>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	08db      	lsrs	r3, r3, #3
 8002856:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_RCC_GetClockConfig+0x60>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 020f 	and.w	r2, r3, #15
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	601a      	str	r2, [r3, #0]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40023c00 	.word	0x40023c00

08002880 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d012      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028a8:	4b69      	ldr	r3, [pc, #420]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a68      	ldr	r2, [pc, #416]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028b2:	6093      	str	r3, [r2, #8]
 80028b4:	4b66      	ldr	r3, [pc, #408]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028bc:	4964      	ldr	r1, [pc, #400]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028ca:	2301      	movs	r3, #1
 80028cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d017      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028da:	4b5d      	ldr	r3, [pc, #372]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	4959      	ldr	r1, [pc, #356]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f8:	d101      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028fa:	2301      	movs	r3, #1
 80028fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002906:	2301      	movs	r3, #1
 8002908:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d017      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002916:	4b4e      	ldr	r3, [pc, #312]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800291c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	494a      	ldr	r1, [pc, #296]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002934:	d101      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 808b 	beq.w	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	4a39      	ldr	r2, [pc, #228]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296e:	6413      	str	r3, [r2, #64]	; 0x40
 8002970:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800297c:	4b35      	ldr	r3, [pc, #212]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a34      	ldr	r2, [pc, #208]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002988:	f7fe fab4 	bl	8000ef4 <HAL_GetTick>
 800298c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002990:	f7fe fab0 	bl	8000ef4 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e38f      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029a2:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029ae:	4b28      	ldr	r3, [pc, #160]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d035      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d02e      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029cc:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e6:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029ee:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029f4:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d114      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe fa78 	bl	8000ef4 <HAL_GetTick>
 8002a04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7fe fa74 	bl	8000ef4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e351      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0ee      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a36:	d111      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a46:	400b      	ands	r3, r1
 8002a48:	4901      	ldr	r1, [pc, #4]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40007000 	.word	0x40007000
 8002a58:	0ffffcff 	.word	0x0ffffcff
 8002a5c:	4bac      	ldr	r3, [pc, #688]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4aab      	ldr	r2, [pc, #684]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a66:	6093      	str	r3, [r2, #8]
 8002a68:	4ba9      	ldr	r3, [pc, #676]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a74:	49a6      	ldr	r1, [pc, #664]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d010      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a86:	4ba2      	ldr	r3, [pc, #648]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a8c:	4aa0      	ldr	r2, [pc, #640]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a96:	4b9e      	ldr	r3, [pc, #632]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	499b      	ldr	r1, [pc, #620]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ab4:	4b96      	ldr	r3, [pc, #600]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac2:	4993      	ldr	r1, [pc, #588]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ad6:	4b8e      	ldr	r3, [pc, #568]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae4:	498a      	ldr	r1, [pc, #552]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002af8:	4b85      	ldr	r3, [pc, #532]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b06:	4982      	ldr	r1, [pc, #520]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b1a:	4b7d      	ldr	r3, [pc, #500]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4979      	ldr	r1, [pc, #484]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b3c:	4b74      	ldr	r3, [pc, #464]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	4971      	ldr	r1, [pc, #452]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b5e:	4b6c      	ldr	r3, [pc, #432]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	f023 020c 	bic.w	r2, r3, #12
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6c:	4968      	ldr	r1, [pc, #416]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b80:	4b63      	ldr	r3, [pc, #396]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	4960      	ldr	r1, [pc, #384]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ba2:	4b5b      	ldr	r3, [pc, #364]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb0:	4957      	ldr	r1, [pc, #348]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bc4:	4b52      	ldr	r3, [pc, #328]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd2:	494f      	ldr	r1, [pc, #316]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002be6:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	4946      	ldr	r1, [pc, #280]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c08:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	493e      	ldr	r1, [pc, #248]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c2a:	4b39      	ldr	r3, [pc, #228]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c38:	4935      	ldr	r1, [pc, #212]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c4c:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c5a:	492d      	ldr	r1, [pc, #180]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d011      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c6e:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c7c:	4924      	ldr	r1, [pc, #144]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cbc:	4914      	ldr	r1, [pc, #80]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce0:	490b      	ldr	r1, [pc, #44]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00f      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d04:	4902      	ldr	r1, [pc, #8]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d0c:	e002      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d20:	4b8a      	ldr	r3, [pc, #552]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d30:	4986      	ldr	r1, [pc, #536]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d44:	4b81      	ldr	r3, [pc, #516]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d54:	497d      	ldr	r1, [pc, #500]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d006      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80d6 	beq.w	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d70:	4b76      	ldr	r3, [pc, #472]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a75      	ldr	r2, [pc, #468]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d7c:	f7fe f8ba 	bl	8000ef4 <HAL_GetTick>
 8002d80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d84:	f7fe f8b6 	bl	8000ef4 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e195      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d96:	4b6d      	ldr	r3, [pc, #436]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d021      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d11d      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002db6:	4b65      	ldr	r3, [pc, #404]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dc4:	4b61      	ldr	r3, [pc, #388]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dca:	0e1b      	lsrs	r3, r3, #24
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	019a      	lsls	r2, r3, #6
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	041b      	lsls	r3, r3, #16
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	071b      	lsls	r3, r3, #28
 8002dea:	4958      	ldr	r1, [pc, #352]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e06:	d00a      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d02e      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e1c:	d129      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e1e:	4b4b      	ldr	r3, [pc, #300]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e24:	0c1b      	lsrs	r3, r3, #16
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e2c:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e32:	0f1b      	lsrs	r3, r3, #28
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	019a      	lsls	r2, r3, #6
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	041b      	lsls	r3, r3, #16
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	061b      	lsls	r3, r3, #24
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	071b      	lsls	r3, r3, #28
 8002e52:	493e      	ldr	r1, [pc, #248]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e5a:	4b3c      	ldr	r3, [pc, #240]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e60:	f023 021f 	bic.w	r2, r3, #31
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	4938      	ldr	r1, [pc, #224]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01d      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e7e:	4b33      	ldr	r3, [pc, #204]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e84:	0e1b      	lsrs	r3, r3, #24
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e8c:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e92:	0f1b      	lsrs	r3, r3, #28
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	019a      	lsls	r2, r3, #6
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	061b      	lsls	r3, r3, #24
 8002eac:	431a      	orrs	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	071b      	lsls	r3, r3, #28
 8002eb2:	4926      	ldr	r1, [pc, #152]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d011      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	019a      	lsls	r2, r3, #6
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	071b      	lsls	r3, r3, #28
 8002ee2:	491a      	ldr	r1, [pc, #104]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef6:	f7fd fffd 	bl	8000ef4 <HAL_GetTick>
 8002efa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002efe:	f7fd fff9 	bl	8000ef4 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b64      	cmp	r3, #100	; 0x64
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e0d8      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	f040 80ce 	bne.w	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a08      	ldr	r2, [pc, #32]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f30:	f7fd ffe0 	bl	8000ef4 <HAL_GetTick>
 8002f34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f36:	e00b      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f38:	f7fd ffdc 	bl	8000ef4 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d904      	bls.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0bb      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f50:	4b5e      	ldr	r3, [pc, #376]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f5c:	d0ec      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d02e      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d12a      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f86:	4b51      	ldr	r3, [pc, #324]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	0c1b      	lsrs	r3, r3, #16
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f94:	4b4d      	ldr	r3, [pc, #308]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	0f1b      	lsrs	r3, r3, #28
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	019a      	lsls	r2, r3, #6
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	041b      	lsls	r3, r3, #16
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	071b      	lsls	r3, r3, #28
 8002fba:	4944      	ldr	r1, [pc, #272]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fc2:	4b42      	ldr	r3, [pc, #264]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	493d      	ldr	r1, [pc, #244]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d022      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ff0:	d11d      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ff2:	4b36      	ldr	r3, [pc, #216]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	0e1b      	lsrs	r3, r3, #24
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003000:	4b32      	ldr	r3, [pc, #200]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	0f1b      	lsrs	r3, r3, #28
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	019a      	lsls	r2, r3, #6
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	061b      	lsls	r3, r3, #24
 8003020:	431a      	orrs	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	071b      	lsls	r3, r3, #28
 8003026:	4929      	ldr	r1, [pc, #164]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d028      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800303a:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003040:	0e1b      	lsrs	r3, r3, #24
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003048:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	0c1b      	lsrs	r3, r3, #16
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	019a      	lsls	r2, r3, #6
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	431a      	orrs	r2, r3
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	071b      	lsls	r3, r3, #28
 800306e:	4917      	ldr	r1, [pc, #92]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800307c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	4911      	ldr	r1, [pc, #68]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0e      	ldr	r2, [pc, #56]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003098:	f7fd ff2c 	bl	8000ef4 <HAL_GetTick>
 800309c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030a0:	f7fd ff28 	bl	8000ef4 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e007      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030b2:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030be:	d1ef      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3720      	adds	r7, #32
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800

080030d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e049      	b.n	8003176 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f841 	bl	800317e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3304      	adds	r3, #4
 800310c:	4619      	mov	r1, r3
 800310e:	4610      	mov	r0, r2
 8003110:	f000 fa00 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d001      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e054      	b.n	8003256 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a26      	ldr	r2, [pc, #152]	; (8003264 <HAL_TIM_Base_Start_IT+0xd0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d022      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d6:	d01d      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a22      	ldr	r2, [pc, #136]	; (8003268 <HAL_TIM_Base_Start_IT+0xd4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d018      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a21      	ldr	r2, [pc, #132]	; (800326c <HAL_TIM_Base_Start_IT+0xd8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d013      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1f      	ldr	r2, [pc, #124]	; (8003270 <HAL_TIM_Base_Start_IT+0xdc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00e      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1e      	ldr	r2, [pc, #120]	; (8003274 <HAL_TIM_Base_Start_IT+0xe0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d009      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1c      	ldr	r2, [pc, #112]	; (8003278 <HAL_TIM_Base_Start_IT+0xe4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1b      	ldr	r2, [pc, #108]	; (800327c <HAL_TIM_Base_Start_IT+0xe8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d115      	bne.n	8003240 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_TIM_Base_Start_IT+0xec>)
 800321c:	4013      	ands	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b06      	cmp	r3, #6
 8003224:	d015      	beq.n	8003252 <HAL_TIM_Base_Start_IT+0xbe>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322c:	d011      	beq.n	8003252 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0201 	orr.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323e:	e008      	b.n	8003252 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	e000      	b.n	8003254 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003252:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40010000 	.word	0x40010000
 8003268:	40000400 	.word	0x40000400
 800326c:	40000800 	.word	0x40000800
 8003270:	40000c00 	.word	0x40000c00
 8003274:	40010400 	.word	0x40010400
 8003278:	40014000 	.word	0x40014000
 800327c:	40001800 	.word	0x40001800
 8003280:	00010007 	.word	0x00010007

08003284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b02      	cmp	r3, #2
 8003298:	d122      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d11b      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0202 	mvn.w	r2, #2
 80032b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f905 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 80032cc:	e005      	b.n	80032da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f8f7 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f908 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d122      	bne.n	8003334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d11b      	bne.n	8003334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0204 	mvn.w	r2, #4
 8003304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2202      	movs	r2, #2
 800330a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f8db 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 8003320:	e005      	b.n	800332e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f8cd 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f8de 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b08      	cmp	r3, #8
 8003340:	d122      	bne.n	8003388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b08      	cmp	r3, #8
 800334e:	d11b      	bne.n	8003388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0208 	mvn.w	r2, #8
 8003358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2204      	movs	r2, #4
 800335e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f8b1 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f8a3 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f8b4 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b10      	cmp	r3, #16
 8003394:	d122      	bne.n	80033dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d11b      	bne.n	80033dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0210 	mvn.w	r2, #16
 80033ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2208      	movs	r2, #8
 80033b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f887 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 80033c8:	e005      	b.n	80033d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f879 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f88a 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d10e      	bne.n	8003408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d107      	bne.n	8003408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0201 	mvn.w	r2, #1
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fd faae 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003412:	2b80      	cmp	r3, #128	; 0x80
 8003414:	d10e      	bne.n	8003434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003420:	2b80      	cmp	r3, #128	; 0x80
 8003422:	d107      	bne.n	8003434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800342c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f91a 	bl	8003668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003442:	d10e      	bne.n	8003462 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344e:	2b80      	cmp	r3, #128	; 0x80
 8003450:	d107      	bne.n	8003462 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800345a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f90d 	bl	800367c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d10e      	bne.n	800348e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d107      	bne.n	800348e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f838 	bl	80034fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b20      	cmp	r3, #32
 800349a:	d10e      	bne.n	80034ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d107      	bne.n	80034ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f06f 0220 	mvn.w	r2, #32
 80034b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f8cd 	bl	8003654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a40      	ldr	r2, [pc, #256]	; (8003628 <TIM_Base_SetConfig+0x114>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003532:	d00f      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3d      	ldr	r2, [pc, #244]	; (800362c <TIM_Base_SetConfig+0x118>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00b      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3c      	ldr	r2, [pc, #240]	; (8003630 <TIM_Base_SetConfig+0x11c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d007      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3b      	ldr	r2, [pc, #236]	; (8003634 <TIM_Base_SetConfig+0x120>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3a      	ldr	r2, [pc, #232]	; (8003638 <TIM_Base_SetConfig+0x124>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d108      	bne.n	8003566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2f      	ldr	r2, [pc, #188]	; (8003628 <TIM_Base_SetConfig+0x114>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d02b      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003574:	d027      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2c      	ldr	r2, [pc, #176]	; (800362c <TIM_Base_SetConfig+0x118>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d023      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2b      	ldr	r2, [pc, #172]	; (8003630 <TIM_Base_SetConfig+0x11c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01f      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2a      	ldr	r2, [pc, #168]	; (8003634 <TIM_Base_SetConfig+0x120>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01b      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a29      	ldr	r2, [pc, #164]	; (8003638 <TIM_Base_SetConfig+0x124>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d017      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a28      	ldr	r2, [pc, #160]	; (800363c <TIM_Base_SetConfig+0x128>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a27      	ldr	r2, [pc, #156]	; (8003640 <TIM_Base_SetConfig+0x12c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00f      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a26      	ldr	r2, [pc, #152]	; (8003644 <TIM_Base_SetConfig+0x130>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00b      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a25      	ldr	r2, [pc, #148]	; (8003648 <TIM_Base_SetConfig+0x134>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a24      	ldr	r2, [pc, #144]	; (800364c <TIM_Base_SetConfig+0x138>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a23      	ldr	r2, [pc, #140]	; (8003650 <TIM_Base_SetConfig+0x13c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d108      	bne.n	80035d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a0a      	ldr	r2, [pc, #40]	; (8003628 <TIM_Base_SetConfig+0x114>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0xf8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a0c      	ldr	r2, [pc, #48]	; (8003638 <TIM_Base_SetConfig+0x124>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d103      	bne.n	8003614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	615a      	str	r2, [r3, #20]
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40010000 	.word	0x40010000
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	40000c00 	.word	0x40000c00
 8003638:	40010400 	.word	0x40010400
 800363c:	40014000 	.word	0x40014000
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800
 8003648:	40001800 	.word	0x40001800
 800364c:	40001c00 	.word	0x40001c00
 8003650:	40002000 	.word	0x40002000

08003654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e040      	b.n	8003724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fa4e 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2224      	movs	r2, #36	; 0x24
 80036bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f82c 	bl	800372c <UART_SetConfig>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e022      	b.n	8003724 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa84 	bl	8003bf4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800370a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fb0b 	bl	8003d38 <UART_CheckIdleState>
 8003722:	4603      	mov	r3, r0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4ba6      	ldr	r3, [pc, #664]	; (80039f0 <UART_SetConfig+0x2c4>)
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	6979      	ldr	r1, [r7, #20]
 8003760:	430b      	orrs	r3, r1
 8003762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	430a      	orrs	r2, r1
 800379c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a94      	ldr	r2, [pc, #592]	; (80039f4 <UART_SetConfig+0x2c8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d120      	bne.n	80037ea <UART_SetConfig+0xbe>
 80037a8:	4b93      	ldr	r3, [pc, #588]	; (80039f8 <UART_SetConfig+0x2cc>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d816      	bhi.n	80037e4 <UART_SetConfig+0xb8>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <UART_SetConfig+0x90>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037d9 	.word	0x080037d9
 80037c4:	080037d3 	.word	0x080037d3
 80037c8:	080037df 	.word	0x080037df
 80037cc:	2301      	movs	r3, #1
 80037ce:	77fb      	strb	r3, [r7, #31]
 80037d0:	e150      	b.n	8003a74 <UART_SetConfig+0x348>
 80037d2:	2302      	movs	r3, #2
 80037d4:	77fb      	strb	r3, [r7, #31]
 80037d6:	e14d      	b.n	8003a74 <UART_SetConfig+0x348>
 80037d8:	2304      	movs	r3, #4
 80037da:	77fb      	strb	r3, [r7, #31]
 80037dc:	e14a      	b.n	8003a74 <UART_SetConfig+0x348>
 80037de:	2308      	movs	r3, #8
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e147      	b.n	8003a74 <UART_SetConfig+0x348>
 80037e4:	2310      	movs	r3, #16
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	e144      	b.n	8003a74 <UART_SetConfig+0x348>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a83      	ldr	r2, [pc, #524]	; (80039fc <UART_SetConfig+0x2d0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d132      	bne.n	800385a <UART_SetConfig+0x12e>
 80037f4:	4b80      	ldr	r3, [pc, #512]	; (80039f8 <UART_SetConfig+0x2cc>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d828      	bhi.n	8003854 <UART_SetConfig+0x128>
 8003802:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <UART_SetConfig+0xdc>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	0800383d 	.word	0x0800383d
 800380c:	08003855 	.word	0x08003855
 8003810:	08003855 	.word	0x08003855
 8003814:	08003855 	.word	0x08003855
 8003818:	08003849 	.word	0x08003849
 800381c:	08003855 	.word	0x08003855
 8003820:	08003855 	.word	0x08003855
 8003824:	08003855 	.word	0x08003855
 8003828:	08003843 	.word	0x08003843
 800382c:	08003855 	.word	0x08003855
 8003830:	08003855 	.word	0x08003855
 8003834:	08003855 	.word	0x08003855
 8003838:	0800384f 	.word	0x0800384f
 800383c:	2300      	movs	r3, #0
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e118      	b.n	8003a74 <UART_SetConfig+0x348>
 8003842:	2302      	movs	r3, #2
 8003844:	77fb      	strb	r3, [r7, #31]
 8003846:	e115      	b.n	8003a74 <UART_SetConfig+0x348>
 8003848:	2304      	movs	r3, #4
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e112      	b.n	8003a74 <UART_SetConfig+0x348>
 800384e:	2308      	movs	r3, #8
 8003850:	77fb      	strb	r3, [r7, #31]
 8003852:	e10f      	b.n	8003a74 <UART_SetConfig+0x348>
 8003854:	2310      	movs	r3, #16
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e10c      	b.n	8003a74 <UART_SetConfig+0x348>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a68      	ldr	r2, [pc, #416]	; (8003a00 <UART_SetConfig+0x2d4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d120      	bne.n	80038a6 <UART_SetConfig+0x17a>
 8003864:	4b64      	ldr	r3, [pc, #400]	; (80039f8 <UART_SetConfig+0x2cc>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800386e:	2b30      	cmp	r3, #48	; 0x30
 8003870:	d013      	beq.n	800389a <UART_SetConfig+0x16e>
 8003872:	2b30      	cmp	r3, #48	; 0x30
 8003874:	d814      	bhi.n	80038a0 <UART_SetConfig+0x174>
 8003876:	2b20      	cmp	r3, #32
 8003878:	d009      	beq.n	800388e <UART_SetConfig+0x162>
 800387a:	2b20      	cmp	r3, #32
 800387c:	d810      	bhi.n	80038a0 <UART_SetConfig+0x174>
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <UART_SetConfig+0x15c>
 8003882:	2b10      	cmp	r3, #16
 8003884:	d006      	beq.n	8003894 <UART_SetConfig+0x168>
 8003886:	e00b      	b.n	80038a0 <UART_SetConfig+0x174>
 8003888:	2300      	movs	r3, #0
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e0f2      	b.n	8003a74 <UART_SetConfig+0x348>
 800388e:	2302      	movs	r3, #2
 8003890:	77fb      	strb	r3, [r7, #31]
 8003892:	e0ef      	b.n	8003a74 <UART_SetConfig+0x348>
 8003894:	2304      	movs	r3, #4
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e0ec      	b.n	8003a74 <UART_SetConfig+0x348>
 800389a:	2308      	movs	r3, #8
 800389c:	77fb      	strb	r3, [r7, #31]
 800389e:	e0e9      	b.n	8003a74 <UART_SetConfig+0x348>
 80038a0:	2310      	movs	r3, #16
 80038a2:	77fb      	strb	r3, [r7, #31]
 80038a4:	e0e6      	b.n	8003a74 <UART_SetConfig+0x348>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a56      	ldr	r2, [pc, #344]	; (8003a04 <UART_SetConfig+0x2d8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d120      	bne.n	80038f2 <UART_SetConfig+0x1c6>
 80038b0:	4b51      	ldr	r3, [pc, #324]	; (80039f8 <UART_SetConfig+0x2cc>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038ba:	2bc0      	cmp	r3, #192	; 0xc0
 80038bc:	d013      	beq.n	80038e6 <UART_SetConfig+0x1ba>
 80038be:	2bc0      	cmp	r3, #192	; 0xc0
 80038c0:	d814      	bhi.n	80038ec <UART_SetConfig+0x1c0>
 80038c2:	2b80      	cmp	r3, #128	; 0x80
 80038c4:	d009      	beq.n	80038da <UART_SetConfig+0x1ae>
 80038c6:	2b80      	cmp	r3, #128	; 0x80
 80038c8:	d810      	bhi.n	80038ec <UART_SetConfig+0x1c0>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <UART_SetConfig+0x1a8>
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d006      	beq.n	80038e0 <UART_SetConfig+0x1b4>
 80038d2:	e00b      	b.n	80038ec <UART_SetConfig+0x1c0>
 80038d4:	2300      	movs	r3, #0
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e0cc      	b.n	8003a74 <UART_SetConfig+0x348>
 80038da:	2302      	movs	r3, #2
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e0c9      	b.n	8003a74 <UART_SetConfig+0x348>
 80038e0:	2304      	movs	r3, #4
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e0c6      	b.n	8003a74 <UART_SetConfig+0x348>
 80038e6:	2308      	movs	r3, #8
 80038e8:	77fb      	strb	r3, [r7, #31]
 80038ea:	e0c3      	b.n	8003a74 <UART_SetConfig+0x348>
 80038ec:	2310      	movs	r3, #16
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e0c0      	b.n	8003a74 <UART_SetConfig+0x348>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a44      	ldr	r2, [pc, #272]	; (8003a08 <UART_SetConfig+0x2dc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d125      	bne.n	8003948 <UART_SetConfig+0x21c>
 80038fc:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <UART_SetConfig+0x2cc>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800390a:	d017      	beq.n	800393c <UART_SetConfig+0x210>
 800390c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003910:	d817      	bhi.n	8003942 <UART_SetConfig+0x216>
 8003912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003916:	d00b      	beq.n	8003930 <UART_SetConfig+0x204>
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d811      	bhi.n	8003942 <UART_SetConfig+0x216>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <UART_SetConfig+0x1fe>
 8003922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003926:	d006      	beq.n	8003936 <UART_SetConfig+0x20a>
 8003928:	e00b      	b.n	8003942 <UART_SetConfig+0x216>
 800392a:	2300      	movs	r3, #0
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e0a1      	b.n	8003a74 <UART_SetConfig+0x348>
 8003930:	2302      	movs	r3, #2
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e09e      	b.n	8003a74 <UART_SetConfig+0x348>
 8003936:	2304      	movs	r3, #4
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e09b      	b.n	8003a74 <UART_SetConfig+0x348>
 800393c:	2308      	movs	r3, #8
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e098      	b.n	8003a74 <UART_SetConfig+0x348>
 8003942:	2310      	movs	r3, #16
 8003944:	77fb      	strb	r3, [r7, #31]
 8003946:	e095      	b.n	8003a74 <UART_SetConfig+0x348>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2f      	ldr	r2, [pc, #188]	; (8003a0c <UART_SetConfig+0x2e0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d125      	bne.n	800399e <UART_SetConfig+0x272>
 8003952:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <UART_SetConfig+0x2cc>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800395c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003960:	d017      	beq.n	8003992 <UART_SetConfig+0x266>
 8003962:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003966:	d817      	bhi.n	8003998 <UART_SetConfig+0x26c>
 8003968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396c:	d00b      	beq.n	8003986 <UART_SetConfig+0x25a>
 800396e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003972:	d811      	bhi.n	8003998 <UART_SetConfig+0x26c>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <UART_SetConfig+0x254>
 8003978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397c:	d006      	beq.n	800398c <UART_SetConfig+0x260>
 800397e:	e00b      	b.n	8003998 <UART_SetConfig+0x26c>
 8003980:	2301      	movs	r3, #1
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e076      	b.n	8003a74 <UART_SetConfig+0x348>
 8003986:	2302      	movs	r3, #2
 8003988:	77fb      	strb	r3, [r7, #31]
 800398a:	e073      	b.n	8003a74 <UART_SetConfig+0x348>
 800398c:	2304      	movs	r3, #4
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e070      	b.n	8003a74 <UART_SetConfig+0x348>
 8003992:	2308      	movs	r3, #8
 8003994:	77fb      	strb	r3, [r7, #31]
 8003996:	e06d      	b.n	8003a74 <UART_SetConfig+0x348>
 8003998:	2310      	movs	r3, #16
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e06a      	b.n	8003a74 <UART_SetConfig+0x348>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1b      	ldr	r2, [pc, #108]	; (8003a10 <UART_SetConfig+0x2e4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d138      	bne.n	8003a1a <UART_SetConfig+0x2ee>
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <UART_SetConfig+0x2cc>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80039b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039b6:	d017      	beq.n	80039e8 <UART_SetConfig+0x2bc>
 80039b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039bc:	d82a      	bhi.n	8003a14 <UART_SetConfig+0x2e8>
 80039be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c2:	d00b      	beq.n	80039dc <UART_SetConfig+0x2b0>
 80039c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c8:	d824      	bhi.n	8003a14 <UART_SetConfig+0x2e8>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <UART_SetConfig+0x2aa>
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d2:	d006      	beq.n	80039e2 <UART_SetConfig+0x2b6>
 80039d4:	e01e      	b.n	8003a14 <UART_SetConfig+0x2e8>
 80039d6:	2300      	movs	r3, #0
 80039d8:	77fb      	strb	r3, [r7, #31]
 80039da:	e04b      	b.n	8003a74 <UART_SetConfig+0x348>
 80039dc:	2302      	movs	r3, #2
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e048      	b.n	8003a74 <UART_SetConfig+0x348>
 80039e2:	2304      	movs	r3, #4
 80039e4:	77fb      	strb	r3, [r7, #31]
 80039e6:	e045      	b.n	8003a74 <UART_SetConfig+0x348>
 80039e8:	2308      	movs	r3, #8
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e042      	b.n	8003a74 <UART_SetConfig+0x348>
 80039ee:	bf00      	nop
 80039f0:	efff69f3 	.word	0xefff69f3
 80039f4:	40011000 	.word	0x40011000
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40004400 	.word	0x40004400
 8003a00:	40004800 	.word	0x40004800
 8003a04:	40004c00 	.word	0x40004c00
 8003a08:	40005000 	.word	0x40005000
 8003a0c:	40011400 	.word	0x40011400
 8003a10:	40007800 	.word	0x40007800
 8003a14:	2310      	movs	r3, #16
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e02c      	b.n	8003a74 <UART_SetConfig+0x348>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a72      	ldr	r2, [pc, #456]	; (8003be8 <UART_SetConfig+0x4bc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d125      	bne.n	8003a70 <UART_SetConfig+0x344>
 8003a24:	4b71      	ldr	r3, [pc, #452]	; (8003bec <UART_SetConfig+0x4c0>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a32:	d017      	beq.n	8003a64 <UART_SetConfig+0x338>
 8003a34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a38:	d817      	bhi.n	8003a6a <UART_SetConfig+0x33e>
 8003a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3e:	d00b      	beq.n	8003a58 <UART_SetConfig+0x32c>
 8003a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a44:	d811      	bhi.n	8003a6a <UART_SetConfig+0x33e>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <UART_SetConfig+0x326>
 8003a4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a4e:	d006      	beq.n	8003a5e <UART_SetConfig+0x332>
 8003a50:	e00b      	b.n	8003a6a <UART_SetConfig+0x33e>
 8003a52:	2300      	movs	r3, #0
 8003a54:	77fb      	strb	r3, [r7, #31]
 8003a56:	e00d      	b.n	8003a74 <UART_SetConfig+0x348>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	77fb      	strb	r3, [r7, #31]
 8003a5c:	e00a      	b.n	8003a74 <UART_SetConfig+0x348>
 8003a5e:	2304      	movs	r3, #4
 8003a60:	77fb      	strb	r3, [r7, #31]
 8003a62:	e007      	b.n	8003a74 <UART_SetConfig+0x348>
 8003a64:	2308      	movs	r3, #8
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e004      	b.n	8003a74 <UART_SetConfig+0x348>
 8003a6a:	2310      	movs	r3, #16
 8003a6c:	77fb      	strb	r3, [r7, #31]
 8003a6e:	e001      	b.n	8003a74 <UART_SetConfig+0x348>
 8003a70:	2310      	movs	r3, #16
 8003a72:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a7c:	d15b      	bne.n	8003b36 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003a7e:	7ffb      	ldrb	r3, [r7, #31]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d828      	bhi.n	8003ad6 <UART_SetConfig+0x3aa>
 8003a84:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <UART_SetConfig+0x360>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003ab1 	.word	0x08003ab1
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003ac1 	.word	0x08003ac1
 8003a98:	08003ad7 	.word	0x08003ad7
 8003a9c:	08003ac7 	.word	0x08003ac7
 8003aa0:	08003ad7 	.word	0x08003ad7
 8003aa4:	08003ad7 	.word	0x08003ad7
 8003aa8:	08003ad7 	.word	0x08003ad7
 8003aac:	08003acf 	.word	0x08003acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab0:	f7fe fe8c 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8003ab4:	61b8      	str	r0, [r7, #24]
        break;
 8003ab6:	e013      	b.n	8003ae0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab8:	f7fe fe9c 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8003abc:	61b8      	str	r0, [r7, #24]
        break;
 8003abe:	e00f      	b.n	8003ae0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac0:	4b4b      	ldr	r3, [pc, #300]	; (8003bf0 <UART_SetConfig+0x4c4>)
 8003ac2:	61bb      	str	r3, [r7, #24]
        break;
 8003ac4:	e00c      	b.n	8003ae0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac6:	f7fe fd6f 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8003aca:	61b8      	str	r0, [r7, #24]
        break;
 8003acc:	e008      	b.n	8003ae0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad2:	61bb      	str	r3, [r7, #24]
        break;
 8003ad4:	e004      	b.n	8003ae0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	77bb      	strb	r3, [r7, #30]
        break;
 8003ade:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d074      	beq.n	8003bd0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	005a      	lsls	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	441a      	add	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	d916      	bls.n	8003b30 <UART_SetConfig+0x404>
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b08:	d212      	bcs.n	8003b30 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	f023 030f 	bic.w	r3, r3, #15
 8003b12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	085b      	lsrs	r3, r3, #1
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	89fb      	ldrh	r3, [r7, #14]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	89fa      	ldrh	r2, [r7, #14]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	e04f      	b.n	8003bd0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	77bb      	strb	r3, [r7, #30]
 8003b34:	e04c      	b.n	8003bd0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b36:	7ffb      	ldrb	r3, [r7, #31]
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d828      	bhi.n	8003b8e <UART_SetConfig+0x462>
 8003b3c:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <UART_SetConfig+0x418>)
 8003b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b42:	bf00      	nop
 8003b44:	08003b69 	.word	0x08003b69
 8003b48:	08003b71 	.word	0x08003b71
 8003b4c:	08003b79 	.word	0x08003b79
 8003b50:	08003b8f 	.word	0x08003b8f
 8003b54:	08003b7f 	.word	0x08003b7f
 8003b58:	08003b8f 	.word	0x08003b8f
 8003b5c:	08003b8f 	.word	0x08003b8f
 8003b60:	08003b8f 	.word	0x08003b8f
 8003b64:	08003b87 	.word	0x08003b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b68:	f7fe fe30 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8003b6c:	61b8      	str	r0, [r7, #24]
        break;
 8003b6e:	e013      	b.n	8003b98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b70:	f7fe fe40 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8003b74:	61b8      	str	r0, [r7, #24]
        break;
 8003b76:	e00f      	b.n	8003b98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <UART_SetConfig+0x4c4>)
 8003b7a:	61bb      	str	r3, [r7, #24]
        break;
 8003b7c:	e00c      	b.n	8003b98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7e:	f7fe fd13 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8003b82:	61b8      	str	r0, [r7, #24]
        break;
 8003b84:	e008      	b.n	8003b98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b8a:	61bb      	str	r3, [r7, #24]
        break;
 8003b8c:	e004      	b.n	8003b98 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	77bb      	strb	r3, [r7, #30]
        break;
 8003b96:	bf00      	nop
    }

    if (pclk != 0U)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d018      	beq.n	8003bd0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	085a      	lsrs	r2, r3, #1
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	441a      	add	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b0f      	cmp	r3, #15
 8003bb6:	d909      	bls.n	8003bcc <UART_SetConfig+0x4a0>
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbe:	d205      	bcs.n	8003bcc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60da      	str	r2, [r3, #12]
 8003bca:	e001      	b.n	8003bd0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003bdc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40007c00 	.word	0x40007c00
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	00f42400 	.word	0x00f42400

08003bf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01a      	beq.n	8003d0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf2:	d10a      	bne.n	8003d0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	605a      	str	r2, [r3, #4]
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d48:	f7fd f8d4 	bl	8000ef4 <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d10e      	bne.n	8003d7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f831 	bl	8003dd2 <UART_WaitOnFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e027      	b.n	8003dca <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d10e      	bne.n	8003da6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f81b 	bl	8003dd2 <UART_WaitOnFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e011      	b.n	8003dca <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b09c      	sub	sp, #112	; 0x70
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	603b      	str	r3, [r7, #0]
 8003dde:	4613      	mov	r3, r2
 8003de0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de2:	e0a7      	b.n	8003f34 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dea:	f000 80a3 	beq.w	8003f34 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dee:	f7fd f881 	bl	8000ef4 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d302      	bcc.n	8003e04 <UART_WaitOnFlagUntilTimeout+0x32>
 8003dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d13f      	bne.n	8003e84 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e18:	667b      	str	r3, [r7, #100]	; 0x64
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e6      	bne.n	8003e04 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3308      	adds	r3, #8
 8003e54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e56:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e5      	bne.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e068      	b.n	8003f56 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d050      	beq.n	8003f34 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea0:	d148      	bne.n	8003f34 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003eaa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eca:	637b      	str	r3, [r7, #52]	; 0x34
 8003ecc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e6      	bne.n	8003eac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	613b      	str	r3, [r7, #16]
   return(result);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3308      	adds	r3, #8
 8003efc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003efe:	623a      	str	r2, [r7, #32]
 8003f00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	69f9      	ldr	r1, [r7, #28]
 8003f04:	6a3a      	ldr	r2, [r7, #32]
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e5      	bne.n	8003ede <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e010      	b.n	8003f56 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69da      	ldr	r2, [r3, #28]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	bf0c      	ite	eq
 8003f44:	2301      	moveq	r3, #1
 8003f46:	2300      	movne	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	f43f af48 	beq.w	8003de4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3770      	adds	r7, #112	; 0x70
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f60:	b084      	sub	sp, #16
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	f107 001c 	add.w	r0, r7, #28
 8003f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d120      	bne.n	8003fba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	4b20      	ldr	r3, [pc, #128]	; (800400c <USB_CoreInit+0xac>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d105      	bne.n	8003fae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fa96 	bl	80044e0 <USB_CoreReset>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	73fb      	strb	r3, [r7, #15]
 8003fb8:	e010      	b.n	8003fdc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa8a 	bl	80044e0 <USB_CoreReset>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d10b      	bne.n	8003ffa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f043 0206 	orr.w	r2, r3, #6
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f043 0220 	orr.w	r2, r3, #32
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004006:	b004      	add	sp, #16
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	ffbdffbf 	.word	0xffbdffbf

08004010 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f023 0201 	bic.w	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	460b      	mov	r3, r1
 800403c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d115      	bne.n	8004080 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004060:	2001      	movs	r0, #1
 8004062:	f7fc ff53 	bl	8000f0c <HAL_Delay>
      ms++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3301      	adds	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fa29 	bl	80044c4 <USB_GetMode>
 8004072:	4603      	mov	r3, r0
 8004074:	2b01      	cmp	r3, #1
 8004076:	d01e      	beq.n	80040b6 <USB_SetCurrentMode+0x84>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b31      	cmp	r3, #49	; 0x31
 800407c:	d9f0      	bls.n	8004060 <USB_SetCurrentMode+0x2e>
 800407e:	e01a      	b.n	80040b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d115      	bne.n	80040b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004092:	2001      	movs	r0, #1
 8004094:	f7fc ff3a 	bl	8000f0c <HAL_Delay>
      ms++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3301      	adds	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fa10 	bl	80044c4 <USB_GetMode>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <USB_SetCurrentMode+0x84>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b31      	cmp	r3, #49	; 0x31
 80040ae:	d9f0      	bls.n	8004092 <USB_SetCurrentMode+0x60>
 80040b0:	e001      	b.n	80040b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e005      	b.n	80040c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b32      	cmp	r3, #50	; 0x32
 80040ba:	d101      	bne.n	80040c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040cc:	b084      	sub	sp, #16
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b086      	sub	sp, #24
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	e009      	b.n	8004100 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	3340      	adds	r3, #64	; 0x40
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	2200      	movs	r2, #0
 80040f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	3301      	adds	r3, #1
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b0e      	cmp	r3, #14
 8004104:	d9f2      	bls.n	80040ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d11c      	bne.n	8004146 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800411a:	f043 0302 	orr.w	r3, r3, #2
 800411e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e005      	b.n	8004152 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004158:	461a      	mov	r2, r3
 800415a:	2300      	movs	r3, #0
 800415c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004164:	4619      	mov	r1, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416c:	461a      	mov	r2, r3
 800416e:	680b      	ldr	r3, [r1, #0]
 8004170:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	2b01      	cmp	r3, #1
 8004176:	d10c      	bne.n	8004192 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d104      	bne.n	8004188 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800417e:	2100      	movs	r1, #0
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f965 	bl	8004450 <USB_SetDevSpeed>
 8004186:	e008      	b.n	800419a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004188:	2101      	movs	r1, #1
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f960 	bl	8004450 <USB_SetDevSpeed>
 8004190:	e003      	b.n	800419a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004192:	2103      	movs	r1, #3
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f95b 	bl	8004450 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800419a:	2110      	movs	r1, #16
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f8f3 	bl	8004388 <USB_FlushTxFifo>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f91f 	bl	80043f0 <USB_FlushRxFifo>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c2:	461a      	mov	r2, r3
 80041c4:	2300      	movs	r3, #0
 80041c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ce:	461a      	mov	r2, r3
 80041d0:	2300      	movs	r3, #0
 80041d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041da:	461a      	mov	r2, r3
 80041dc:	2300      	movs	r3, #0
 80041de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041e0:	2300      	movs	r3, #0
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	e043      	b.n	800426e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041fc:	d118      	bne.n	8004230 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	461a      	mov	r2, r3
 8004212:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	e013      	b.n	8004242 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004226:	461a      	mov	r2, r3
 8004228:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	e008      	b.n	8004242 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423c:	461a      	mov	r2, r3
 800423e:	2300      	movs	r3, #0
 8004240:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424e:	461a      	mov	r2, r3
 8004250:	2300      	movs	r3, #0
 8004252:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	461a      	mov	r2, r3
 8004262:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004266:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	3301      	adds	r3, #1
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	429a      	cmp	r2, r3
 8004274:	d3b7      	bcc.n	80041e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	e043      	b.n	8004304 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800428e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004292:	d118      	bne.n	80042c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a6:	461a      	mov	r2, r3
 80042a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e013      	b.n	80042d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042bc:	461a      	mov	r2, r3
 80042be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	e008      	b.n	80042d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d2:	461a      	mov	r2, r3
 80042d4:	2300      	movs	r3, #0
 80042d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e4:	461a      	mov	r2, r3
 80042e6:	2300      	movs	r3, #0
 80042e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	461a      	mov	r2, r3
 80042f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	3301      	adds	r3, #1
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	429a      	cmp	r2, r3
 800430a:	d3b7      	bcc.n	800427c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800431a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800431e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800432c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f043 0210 	orr.w	r2, r3, #16
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	4b0e      	ldr	r3, [pc, #56]	; (8004380 <USB_DevInit+0x2b4>)
 8004346:	4313      	orrs	r3, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800434c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f043 0208 	orr.w	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800435e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004360:	2b01      	cmp	r3, #1
 8004362:	d105      	bne.n	8004370 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699a      	ldr	r2, [r3, #24]
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <USB_DevInit+0x2b8>)
 800436a:	4313      	orrs	r3, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004370:	7dfb      	ldrb	r3, [r7, #23]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800437c:	b004      	add	sp, #16
 800437e:	4770      	bx	lr
 8004380:	803c3800 	.word	0x803c3800
 8004384:	40000004 	.word	0x40000004

08004388 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3301      	adds	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a13      	ldr	r2, [pc, #76]	; (80043ec <USB_FlushTxFifo+0x64>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d901      	bls.n	80043a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e01b      	b.n	80043e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	daf2      	bge.n	8004396 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	019b      	lsls	r3, r3, #6
 80043b8:	f043 0220 	orr.w	r2, r3, #32
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3301      	adds	r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4a08      	ldr	r2, [pc, #32]	; (80043ec <USB_FlushTxFifo+0x64>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e006      	b.n	80043e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d0f0      	beq.n	80043c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	00030d40 	.word	0x00030d40

080043f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3301      	adds	r3, #1
 8004400:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a11      	ldr	r2, [pc, #68]	; (800444c <USB_FlushRxFifo+0x5c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d901      	bls.n	800440e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e018      	b.n	8004440 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	daf2      	bge.n	80043fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2210      	movs	r2, #16
 800441e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3301      	adds	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a08      	ldr	r2, [pc, #32]	; (800444c <USB_FlushRxFifo+0x5c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d901      	bls.n	8004432 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e006      	b.n	8004440 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	2b10      	cmp	r3, #16
 800443c:	d0f0      	beq.n	8004420 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	00030d40 	.word	0x00030d40

08004450 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	68f9      	ldr	r1, [r7, #12]
 800446c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004482:	b480      	push	{r7}
 8004484:	b085      	sub	sp, #20
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800449c:	f023 0303 	bic.w	r3, r3, #3
 80044a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044b0:	f043 0302 	orr.w	r3, r3, #2
 80044b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f003 0301 	and.w	r3, r3, #1
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3301      	adds	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4a13      	ldr	r2, [pc, #76]	; (8004544 <USB_CoreReset+0x64>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e01b      	b.n	8004536 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	daf2      	bge.n	80044ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f043 0201 	orr.w	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	3301      	adds	r3, #1
 800451a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4a09      	ldr	r2, [pc, #36]	; (8004544 <USB_CoreReset+0x64>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e006      	b.n	8004536 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d0f0      	beq.n	8004516 <USB_CoreReset+0x36>

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	00030d40 	.word	0x00030d40

08004548 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800455e:	f3ef 8305 	mrs	r3, IPSR
 8004562:	60bb      	str	r3, [r7, #8]
  return(result);
 8004564:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10f      	bne.n	800458a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800456a:	f3ef 8310 	mrs	r3, PRIMASK
 800456e:	607b      	str	r3, [r7, #4]
  return(result);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d105      	bne.n	8004582 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004576:	f3ef 8311 	mrs	r3, BASEPRI
 800457a:	603b      	str	r3, [r7, #0]
  return(result);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <osKernelInitialize+0x3a>
 8004582:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <osKernelInitialize+0x64>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d103      	bne.n	8004592 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800458a:	f06f 0305 	mvn.w	r3, #5
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	e00c      	b.n	80045ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004592:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <osKernelInitialize+0x64>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d105      	bne.n	80045a6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800459a:	4b08      	ldr	r3, [pc, #32]	; (80045bc <osKernelInitialize+0x64>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	e002      	b.n	80045ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295
 80045aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045ac:	68fb      	ldr	r3, [r7, #12]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	20000844 	.word	0x20000844

080045c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045c6:	f3ef 8305 	mrs	r3, IPSR
 80045ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80045cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10f      	bne.n	80045f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d2:	f3ef 8310 	mrs	r3, PRIMASK
 80045d6:	607b      	str	r3, [r7, #4]
  return(result);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d105      	bne.n	80045ea <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045de:	f3ef 8311 	mrs	r3, BASEPRI
 80045e2:	603b      	str	r3, [r7, #0]
  return(result);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <osKernelStart+0x3a>
 80045ea:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <osKernelStart+0x68>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d103      	bne.n	80045fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80045f2:	f06f 0305 	mvn.w	r3, #5
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e010      	b.n	800461c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <osKernelStart+0x68>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d109      	bne.n	8004616 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004602:	f7ff ffa1 	bl	8004548 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004606:	4b08      	ldr	r3, [pc, #32]	; (8004628 <osKernelStart+0x68>)
 8004608:	2202      	movs	r2, #2
 800460a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800460c:	f001 f8b4 	bl	8005778 <vTaskStartScheduler>
      stat = osOK;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	e002      	b.n	800461c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004616:	f04f 33ff 	mov.w	r3, #4294967295
 800461a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800461c:	68fb      	ldr	r3, [r7, #12]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000844 	.word	0x20000844

0800462c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b090      	sub	sp, #64	; 0x40
 8004630:	af04      	add	r7, sp, #16
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004638:	2300      	movs	r3, #0
 800463a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800463c:	f3ef 8305 	mrs	r3, IPSR
 8004640:	61fb      	str	r3, [r7, #28]
  return(result);
 8004642:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004644:	2b00      	cmp	r3, #0
 8004646:	f040 808f 	bne.w	8004768 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800464a:	f3ef 8310 	mrs	r3, PRIMASK
 800464e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d105      	bne.n	8004662 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004656:	f3ef 8311 	mrs	r3, BASEPRI
 800465a:	617b      	str	r3, [r7, #20]
  return(result);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <osThreadNew+0x3e>
 8004662:	4b44      	ldr	r3, [pc, #272]	; (8004774 <osThreadNew+0x148>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d07e      	beq.n	8004768 <osThreadNew+0x13c>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d07b      	beq.n	8004768 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004674:	2318      	movs	r3, #24
 8004676:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004678:	2300      	movs	r3, #0
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800467c:	f04f 33ff 	mov.w	r3, #4294967295
 8004680:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d045      	beq.n	8004714 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <osThreadNew+0x6a>
        name = attr->name;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <osThreadNew+0x90>
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	2b38      	cmp	r3, #56	; 0x38
 80046ae:	d805      	bhi.n	80046bc <osThreadNew+0x90>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <osThreadNew+0x94>
        return (NULL);
 80046bc:	2300      	movs	r3, #0
 80046be:	e054      	b.n	800476a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	089b      	lsrs	r3, r3, #2
 80046ce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00e      	beq.n	80046f6 <osThreadNew+0xca>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b5b      	cmp	r3, #91	; 0x5b
 80046de:	d90a      	bls.n	80046f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d006      	beq.n	80046f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <osThreadNew+0xca>
        mem = 1;
 80046f0:	2301      	movs	r3, #1
 80046f2:	623b      	str	r3, [r7, #32]
 80046f4:	e010      	b.n	8004718 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10c      	bne.n	8004718 <osThreadNew+0xec>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d108      	bne.n	8004718 <osThreadNew+0xec>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <osThreadNew+0xec>
          mem = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	623b      	str	r3, [r7, #32]
 8004712:	e001      	b.n	8004718 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d110      	bne.n	8004740 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004726:	9202      	str	r2, [sp, #8]
 8004728:	9301      	str	r3, [sp, #4]
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fe3f 	bl	80053b8 <xTaskCreateStatic>
 800473a:	4603      	mov	r3, r0
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e013      	b.n	8004768 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d110      	bne.n	8004768 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	b29a      	uxth	r2, r3
 800474a:	f107 0310 	add.w	r3, r7, #16
 800474e:	9301      	str	r3, [sp, #4]
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fe90 	bl	800547e <xTaskCreate>
 800475e:	4603      	mov	r3, r0
 8004760:	2b01      	cmp	r3, #1
 8004762:	d001      	beq.n	8004768 <osThreadNew+0x13c>
          hTask = NULL;
 8004764:	2300      	movs	r3, #0
 8004766:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004768:	693b      	ldr	r3, [r7, #16]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3730      	adds	r7, #48	; 0x30
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000844 	.word	0x20000844

08004778 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004780:	f3ef 8305 	mrs	r3, IPSR
 8004784:	613b      	str	r3, [r7, #16]
  return(result);
 8004786:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10f      	bne.n	80047ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800478c:	f3ef 8310 	mrs	r3, PRIMASK
 8004790:	60fb      	str	r3, [r7, #12]
  return(result);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004798:	f3ef 8311 	mrs	r3, BASEPRI
 800479c:	60bb      	str	r3, [r7, #8]
  return(result);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <osDelay+0x3c>
 80047a4:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <osDelay+0x58>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d103      	bne.n	80047b4 <osDelay+0x3c>
    stat = osErrorISR;
 80047ac:	f06f 0305 	mvn.w	r3, #5
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	e007      	b.n	80047c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 ffa4 	bl	800570c <vTaskDelay>
    }
  }

  return (stat);
 80047c4:	697b      	ldr	r3, [r7, #20]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000844 	.word	0x20000844

080047d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4a07      	ldr	r2, [pc, #28]	; (8004800 <vApplicationGetIdleTaskMemory+0x2c>)
 80047e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	4a06      	ldr	r2, [pc, #24]	; (8004804 <vApplicationGetIdleTaskMemory+0x30>)
 80047ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2280      	movs	r2, #128	; 0x80
 80047f0:	601a      	str	r2, [r3, #0]
}
 80047f2:	bf00      	nop
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000848 	.word	0x20000848
 8004804:	200008a4 	.word	0x200008a4

08004808 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4a07      	ldr	r2, [pc, #28]	; (8004834 <vApplicationGetTimerTaskMemory+0x2c>)
 8004818:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4a06      	ldr	r2, [pc, #24]	; (8004838 <vApplicationGetTimerTaskMemory+0x30>)
 800481e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004826:	601a      	str	r2, [r3, #0]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	20000aa4 	.word	0x20000aa4
 8004838:	20000b00 	.word	0x20000b00

0800483c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f103 0208 	add.w	r2, r3, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f04f 32ff 	mov.w	r2, #4294967295
 8004854:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f103 0208 	add.w	r2, r3, #8
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f103 0208 	add.w	r2, r3, #8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004896:	b480      	push	{r7}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	601a      	str	r2, [r3, #0]
}
 80048d2:	bf00      	nop
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f4:	d103      	bne.n	80048fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	e00c      	b.n	8004918 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3308      	adds	r3, #8
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	e002      	b.n	800490c <vListInsert+0x2e>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	429a      	cmp	r2, r3
 8004916:	d2f6      	bcs.n	8004906 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	601a      	str	r2, [r3, #0]
}
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6892      	ldr	r2, [r2, #8]
 8004966:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6852      	ldr	r2, [r2, #4]
 8004970:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	429a      	cmp	r2, r3
 800497a:	d103      	bne.n	8004984 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	1e5a      	subs	r2, r3, #1
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10c      	bne.n	80049d2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	b672      	cpsid	i
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	b662      	cpsie	i
 80049cc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80049d2:	f002 f87b 	bl	8006acc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049de:	68f9      	ldr	r1, [r7, #12]
 80049e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049e2:	fb01 f303 	mul.w	r3, r1, r3
 80049e6:	441a      	add	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	3b01      	subs	r3, #1
 8004a04:	68f9      	ldr	r1, [r7, #12]
 8004a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	441a      	add	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	22ff      	movs	r2, #255	; 0xff
 8004a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	22ff      	movs	r2, #255	; 0xff
 8004a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d114      	bne.n	8004a52 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01a      	beq.n	8004a66 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3310      	adds	r3, #16
 8004a34:	4618      	mov	r0, r3
 8004a36:	f001 f937 	bl	8005ca8 <xTaskRemoveFromEventList>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d012      	beq.n	8004a66 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a40:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <xQueueGenericReset+0xd0>)
 8004a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	e009      	b.n	8004a66 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3310      	adds	r3, #16
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff fef0 	bl	800483c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3324      	adds	r3, #36	; 0x24
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff feeb 	bl	800483c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a66:	f002 f865 	bl	8006b34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a6a:	2301      	movs	r3, #1
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	e000ed04 	.word	0xe000ed04

08004a78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08e      	sub	sp, #56	; 0x38
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10c      	bne.n	8004aa6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	b672      	cpsid	i
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	b662      	cpsie	i
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10c      	bne.n	8004ac6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	b672      	cpsid	i
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	b662      	cpsie	i
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <xQueueGenericCreateStatic+0x5a>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <xQueueGenericCreateStatic+0x5e>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <xQueueGenericCreateStatic+0x60>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10c      	bne.n	8004af6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	b672      	cpsid	i
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	b662      	cpsie	i
 8004af0:	623b      	str	r3, [r7, #32]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d102      	bne.n	8004b02 <xQueueGenericCreateStatic+0x8a>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <xQueueGenericCreateStatic+0x8e>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <xQueueGenericCreateStatic+0x90>
 8004b06:	2300      	movs	r3, #0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10c      	bne.n	8004b26 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	b672      	cpsid	i
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	b662      	cpsie	i
 8004b20:	61fb      	str	r3, [r7, #28]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b26:	2350      	movs	r3, #80	; 0x50
 8004b28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b50      	cmp	r3, #80	; 0x50
 8004b2e:	d00c      	beq.n	8004b4a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	b672      	cpsid	i
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	b662      	cpsie	i
 8004b44:	61bb      	str	r3, [r7, #24]
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00d      	beq.n	8004b72 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	4613      	mov	r3, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f805 	bl	8004b7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3730      	adds	r7, #48	; 0x30
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d103      	bne.n	8004b98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e002      	b.n	8004b9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004baa:	2101      	movs	r1, #1
 8004bac:	69b8      	ldr	r0, [r7, #24]
 8004bae:	f7ff fef9 	bl	80049a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08e      	sub	sp, #56	; 0x38
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10c      	bne.n	8004bfa <xQueueGenericSend+0x36>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	b672      	cpsid	i
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	b662      	cpsie	i
 8004bf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bf6:	bf00      	nop
 8004bf8:	e7fe      	b.n	8004bf8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d103      	bne.n	8004c08 <xQueueGenericSend+0x44>
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <xQueueGenericSend+0x48>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <xQueueGenericSend+0x4a>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10c      	bne.n	8004c2c <xQueueGenericSend+0x68>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	b672      	cpsid	i
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	b662      	cpsie	i
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c28:	bf00      	nop
 8004c2a:	e7fe      	b.n	8004c2a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d103      	bne.n	8004c3a <xQueueGenericSend+0x76>
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <xQueueGenericSend+0x7a>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <xQueueGenericSend+0x7c>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10c      	bne.n	8004c5e <xQueueGenericSend+0x9a>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	b672      	cpsid	i
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	b662      	cpsie	i
 8004c58:	623b      	str	r3, [r7, #32]
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c5e:	f001 f9e9 	bl	8006034 <xTaskGetSchedulerState>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <xQueueGenericSend+0xaa>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <xQueueGenericSend+0xae>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <xQueueGenericSend+0xb0>
 8004c72:	2300      	movs	r3, #0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10c      	bne.n	8004c92 <xQueueGenericSend+0xce>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7c:	b672      	cpsid	i
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	b662      	cpsie	i
 8004c8c:	61fb      	str	r3, [r7, #28]
}
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c92:	f001 ff1b 	bl	8006acc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d302      	bcc.n	8004ca8 <xQueueGenericSend+0xe4>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d129      	bne.n	8004cfc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cae:	f000 fa15 	bl	80050dc <prvCopyDataToQueue>
 8004cb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d010      	beq.n	8004cde <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	3324      	adds	r3, #36	; 0x24
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fff1 	bl	8005ca8 <xTaskRemoveFromEventList>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d013      	beq.n	8004cf4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ccc:	4b3f      	ldr	r3, [pc, #252]	; (8004dcc <xQueueGenericSend+0x208>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	e00a      	b.n	8004cf4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d007      	beq.n	8004cf4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ce4:	4b39      	ldr	r3, [pc, #228]	; (8004dcc <xQueueGenericSend+0x208>)
 8004ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cf4:	f001 ff1e 	bl	8006b34 <vPortExitCritical>
				return pdPASS;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e063      	b.n	8004dc4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d02:	f001 ff17 	bl	8006b34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	e05c      	b.n	8004dc4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d106      	bne.n	8004d1e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d10:	f107 0314 	add.w	r3, r7, #20
 8004d14:	4618      	mov	r0, r3
 8004d16:	f001 f82d 	bl	8005d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d1e:	f001 ff09 	bl	8006b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d22:	f000 fd93 	bl	800584c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d26:	f001 fed1 	bl	8006acc <vPortEnterCritical>
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d30:	b25b      	sxtb	r3, r3
 8004d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d36:	d103      	bne.n	8004d40 <xQueueGenericSend+0x17c>
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d46:	b25b      	sxtb	r3, r3
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d103      	bne.n	8004d56 <xQueueGenericSend+0x192>
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d56:	f001 feed 	bl	8006b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d5a:	1d3a      	adds	r2, r7, #4
 8004d5c:	f107 0314 	add.w	r3, r7, #20
 8004d60:	4611      	mov	r1, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f001 f81c 	bl	8005da0 <xTaskCheckForTimeOut>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d124      	bne.n	8004db8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d70:	f000 faac 	bl	80052cc <prvIsQueueFull>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d018      	beq.n	8004dac <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	3310      	adds	r3, #16
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 ff3c 	bl	8005c00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d8a:	f000 fa37 	bl	80051fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d8e:	f000 fd6b 	bl	8005868 <xTaskResumeAll>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f47f af7c 	bne.w	8004c92 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <xQueueGenericSend+0x208>)
 8004d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	e772      	b.n	8004c92 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dae:	f000 fa25 	bl	80051fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004db2:	f000 fd59 	bl	8005868 <xTaskResumeAll>
 8004db6:	e76c      	b.n	8004c92 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dba:	f000 fa1f 	bl	80051fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dbe:	f000 fd53 	bl	8005868 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004dc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3738      	adds	r7, #56	; 0x38
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	e000ed04 	.word	0xe000ed04

08004dd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08e      	sub	sp, #56	; 0x38
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10c      	bne.n	8004e02 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	b672      	cpsid	i
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	b662      	cpsie	i
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004dfe:	bf00      	nop
 8004e00:	e7fe      	b.n	8004e00 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d103      	bne.n	8004e10 <xQueueGenericSendFromISR+0x40>
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <xQueueGenericSendFromISR+0x44>
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <xQueueGenericSendFromISR+0x46>
 8004e14:	2300      	movs	r3, #0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10c      	bne.n	8004e34 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	b672      	cpsid	i
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	b662      	cpsie	i
 8004e2e:	623b      	str	r3, [r7, #32]
}
 8004e30:	bf00      	nop
 8004e32:	e7fe      	b.n	8004e32 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d103      	bne.n	8004e42 <xQueueGenericSendFromISR+0x72>
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <xQueueGenericSendFromISR+0x76>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <xQueueGenericSendFromISR+0x78>
 8004e46:	2300      	movs	r3, #0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10c      	bne.n	8004e66 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	b672      	cpsid	i
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	b662      	cpsie	i
 8004e60:	61fb      	str	r3, [r7, #28]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e66:	f001 ff19 	bl	8006c9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e6a:	f3ef 8211 	mrs	r2, BASEPRI
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	b672      	cpsid	i
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	b662      	cpsie	i
 8004e82:	61ba      	str	r2, [r7, #24]
 8004e84:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e86:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d302      	bcc.n	8004e9c <xQueueGenericSendFromISR+0xcc>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d12c      	bne.n	8004ef6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eac:	f000 f916 	bl	80050dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004eb0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d112      	bne.n	8004ee0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d016      	beq.n	8004ef0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec4:	3324      	adds	r3, #36	; 0x24
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 feee 	bl	8005ca8 <xTaskRemoveFromEventList>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00e      	beq.n	8004ef0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00b      	beq.n	8004ef0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	e007      	b.n	8004ef0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ee0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	b25a      	sxtb	r2, r3
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004ef4:	e001      	b.n	8004efa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8004efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3738      	adds	r7, #56	; 0x38
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08c      	sub	sp, #48	; 0x30
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10c      	bne.n	8004f44 <xQueueReceive+0x34>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	b672      	cpsid	i
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	b662      	cpsie	i
 8004f3e:	623b      	str	r3, [r7, #32]
}
 8004f40:	bf00      	nop
 8004f42:	e7fe      	b.n	8004f42 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d103      	bne.n	8004f52 <xQueueReceive+0x42>
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <xQueueReceive+0x46>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <xQueueReceive+0x48>
 8004f56:	2300      	movs	r3, #0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10c      	bne.n	8004f76 <xQueueReceive+0x66>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	b672      	cpsid	i
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	b662      	cpsie	i
 8004f70:	61fb      	str	r3, [r7, #28]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f76:	f001 f85d 	bl	8006034 <xTaskGetSchedulerState>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d102      	bne.n	8004f86 <xQueueReceive+0x76>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <xQueueReceive+0x7a>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <xQueueReceive+0x7c>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10c      	bne.n	8004faa <xQueueReceive+0x9a>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	b672      	cpsid	i
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	b662      	cpsie	i
 8004fa4:	61bb      	str	r3, [r7, #24]
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004faa:	f001 fd8f 	bl	8006acc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01f      	beq.n	8004ffa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fbe:	f000 f8f7 	bl	80051b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	1e5a      	subs	r2, r3, #1
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00f      	beq.n	8004ff2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	3310      	adds	r3, #16
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fe66 	bl	8005ca8 <xTaskRemoveFromEventList>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fe2:	4b3d      	ldr	r3, [pc, #244]	; (80050d8 <xQueueReceive+0x1c8>)
 8004fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ff2:	f001 fd9f 	bl	8006b34 <vPortExitCritical>
				return pdPASS;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e069      	b.n	80050ce <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d103      	bne.n	8005008 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005000:	f001 fd98 	bl	8006b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005004:	2300      	movs	r3, #0
 8005006:	e062      	b.n	80050ce <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800500e:	f107 0310 	add.w	r3, r7, #16
 8005012:	4618      	mov	r0, r3
 8005014:	f000 feae 	bl	8005d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005018:	2301      	movs	r3, #1
 800501a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800501c:	f001 fd8a 	bl	8006b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005020:	f000 fc14 	bl	800584c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005024:	f001 fd52 	bl	8006acc <vPortEnterCritical>
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800502e:	b25b      	sxtb	r3, r3
 8005030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005034:	d103      	bne.n	800503e <xQueueReceive+0x12e>
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005044:	b25b      	sxtb	r3, r3
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d103      	bne.n	8005054 <xQueueReceive+0x144>
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005054:	f001 fd6e 	bl	8006b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005058:	1d3a      	adds	r2, r7, #4
 800505a:	f107 0310 	add.w	r3, r7, #16
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fe9d 	bl	8005da0 <xTaskCheckForTimeOut>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d123      	bne.n	80050b4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800506c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800506e:	f000 f917 	bl	80052a0 <prvIsQueueEmpty>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d017      	beq.n	80050a8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	3324      	adds	r3, #36	; 0x24
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fdbd 	bl	8005c00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005088:	f000 f8b8 	bl	80051fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800508c:	f000 fbec 	bl	8005868 <xTaskResumeAll>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d189      	bne.n	8004faa <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005096:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <xQueueReceive+0x1c8>)
 8005098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	e780      	b.n	8004faa <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050aa:	f000 f8a7 	bl	80051fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050ae:	f000 fbdb 	bl	8005868 <xTaskResumeAll>
 80050b2:	e77a      	b.n	8004faa <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050b6:	f000 f8a1 	bl	80051fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050ba:	f000 fbd5 	bl	8005868 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050c0:	f000 f8ee 	bl	80052a0 <prvIsQueueEmpty>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f43f af6f 	beq.w	8004faa <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3730      	adds	r7, #48	; 0x30
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	e000ed04 	.word	0xe000ed04

080050dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10d      	bne.n	8005116 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d14d      	bne.n	800519e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 ffb2 	bl	8006070 <xTaskPriorityDisinherit>
 800510c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	e043      	b.n	800519e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d119      	bne.n	8005150 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6858      	ldr	r0, [r3, #4]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	461a      	mov	r2, r3
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	f002 f804 	bl	8007134 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	441a      	add	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	429a      	cmp	r2, r3
 8005144:	d32b      	bcc.n	800519e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	e026      	b.n	800519e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68d8      	ldr	r0, [r3, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	461a      	mov	r2, r3
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	f001 ffea 	bl	8007134 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	425b      	negs	r3, r3
 800516a:	441a      	add	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d207      	bcs.n	800518c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	425b      	negs	r3, r3
 8005186:	441a      	add	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d105      	bne.n	800519e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	3b01      	subs	r3, #1
 800519c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80051a6:	697b      	ldr	r3, [r7, #20]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d018      	beq.n	80051f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	441a      	add	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d303      	bcc.n	80051e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68d9      	ldr	r1, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	461a      	mov	r2, r3
 80051ee:	6838      	ldr	r0, [r7, #0]
 80051f0:	f001 ffa0 	bl	8007134 <memcpy>
	}
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005204:	f001 fc62 	bl	8006acc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800520e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005210:	e011      	b.n	8005236 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2b00      	cmp	r3, #0
 8005218:	d012      	beq.n	8005240 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3324      	adds	r3, #36	; 0x24
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fd42 	bl	8005ca8 <xTaskRemoveFromEventList>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800522a:	f000 fe1f 	bl	8005e6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	3b01      	subs	r3, #1
 8005232:	b2db      	uxtb	r3, r3
 8005234:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800523a:	2b00      	cmp	r3, #0
 800523c:	dce9      	bgt.n	8005212 <prvUnlockQueue+0x16>
 800523e:	e000      	b.n	8005242 <prvUnlockQueue+0x46>
					break;
 8005240:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	22ff      	movs	r2, #255	; 0xff
 8005246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800524a:	f001 fc73 	bl	8006b34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800524e:	f001 fc3d 	bl	8006acc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005258:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800525a:	e011      	b.n	8005280 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d012      	beq.n	800528a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3310      	adds	r3, #16
 8005268:	4618      	mov	r0, r3
 800526a:	f000 fd1d 	bl	8005ca8 <xTaskRemoveFromEventList>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005274:	f000 fdfa 	bl	8005e6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005278:	7bbb      	ldrb	r3, [r7, #14]
 800527a:	3b01      	subs	r3, #1
 800527c:	b2db      	uxtb	r3, r3
 800527e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005284:	2b00      	cmp	r3, #0
 8005286:	dce9      	bgt.n	800525c <prvUnlockQueue+0x60>
 8005288:	e000      	b.n	800528c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800528a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	22ff      	movs	r2, #255	; 0xff
 8005290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005294:	f001 fc4e 	bl	8006b34 <vPortExitCritical>
}
 8005298:	bf00      	nop
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052a8:	f001 fc10 	bl	8006acc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	e001      	b.n	80052be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052be:	f001 fc39 	bl	8006b34 <vPortExitCritical>

	return xReturn;
 80052c2:	68fb      	ldr	r3, [r7, #12]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052d4:	f001 fbfa 	bl	8006acc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d102      	bne.n	80052ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052e4:	2301      	movs	r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e001      	b.n	80052ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052ee:	f001 fc21 	bl	8006b34 <vPortExitCritical>

	return xReturn;
 80052f2:	68fb      	ldr	r3, [r7, #12]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	e014      	b.n	8005336 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800530c:	4a0f      	ldr	r2, [pc, #60]	; (800534c <vQueueAddToRegistry+0x50>)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10b      	bne.n	8005330 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005318:	490c      	ldr	r1, [pc, #48]	; (800534c <vQueueAddToRegistry+0x50>)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005322:	4a0a      	ldr	r2, [pc, #40]	; (800534c <vQueueAddToRegistry+0x50>)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4413      	add	r3, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800532e:	e006      	b.n	800533e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3301      	adds	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b07      	cmp	r3, #7
 800533a:	d9e7      	bls.n	800530c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800533c:	bf00      	nop
 800533e:	bf00      	nop
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000f00 	.word	0x20000f00

08005350 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005360:	f001 fbb4 	bl	8006acc <vPortEnterCritical>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800536a:	b25b      	sxtb	r3, r3
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d103      	bne.n	800537a <vQueueWaitForMessageRestricted+0x2a>
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005380:	b25b      	sxtb	r3, r3
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d103      	bne.n	8005390 <vQueueWaitForMessageRestricted+0x40>
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005390:	f001 fbd0 	bl	8006b34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	3324      	adds	r3, #36	; 0x24
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fc51 	bl	8005c4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053aa:	6978      	ldr	r0, [r7, #20]
 80053ac:	f7ff ff26 	bl	80051fc <prvUnlockQueue>
	}
 80053b0:	bf00      	nop
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	; 0x38
 80053bc:	af04      	add	r7, sp, #16
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10c      	bne.n	80053e6 <xTaskCreateStatic+0x2e>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	b672      	cpsid	i
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	b662      	cpsie	i
 80053e0:	623b      	str	r3, [r7, #32]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10c      	bne.n	8005406 <xTaskCreateStatic+0x4e>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	b672      	cpsid	i
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	b662      	cpsie	i
 8005400:	61fb      	str	r3, [r7, #28]
}
 8005402:	bf00      	nop
 8005404:	e7fe      	b.n	8005404 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005406:	235c      	movs	r3, #92	; 0x5c
 8005408:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b5c      	cmp	r3, #92	; 0x5c
 800540e:	d00c      	beq.n	800542a <xTaskCreateStatic+0x72>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	b672      	cpsid	i
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	b662      	cpsie	i
 8005424:	61bb      	str	r3, [r7, #24]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800542a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01e      	beq.n	8005470 <xTaskCreateStatic+0xb8>
 8005432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01b      	beq.n	8005470 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005440:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	2202      	movs	r2, #2
 8005446:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800544a:	2300      	movs	r3, #0
 800544c:	9303      	str	r3, [sp, #12]
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	9302      	str	r3, [sp, #8]
 8005452:	f107 0314 	add.w	r3, r7, #20
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 f850 	bl	8005508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800546a:	f000 f8df 	bl	800562c <prvAddNewTaskToReadyList>
 800546e:	e001      	b.n	8005474 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005474:	697b      	ldr	r3, [r7, #20]
	}
 8005476:	4618      	mov	r0, r3
 8005478:	3728      	adds	r7, #40	; 0x28
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800547e:	b580      	push	{r7, lr}
 8005480:	b08c      	sub	sp, #48	; 0x30
 8005482:	af04      	add	r7, sp, #16
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	4613      	mov	r3, r2
 800548c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4618      	mov	r0, r3
 8005494:	f001 fc46 	bl	8006d24 <pvPortMalloc>
 8005498:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00e      	beq.n	80054be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054a0:	205c      	movs	r0, #92	; 0x5c
 80054a2:	f001 fc3f 	bl	8006d24 <pvPortMalloc>
 80054a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
 80054b4:	e005      	b.n	80054c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054b6:	6978      	ldr	r0, [r7, #20]
 80054b8:	f001 fcfe 	bl	8006eb8 <vPortFree>
 80054bc:	e001      	b.n	80054c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d017      	beq.n	80054f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054d0:	88fa      	ldrh	r2, [r7, #6]
 80054d2:	2300      	movs	r3, #0
 80054d4:	9303      	str	r3, [sp, #12]
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	9302      	str	r3, [sp, #8]
 80054da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f80e 	bl	8005508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054ec:	69f8      	ldr	r0, [r7, #28]
 80054ee:	f000 f89d 	bl	800562c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054f2:	2301      	movs	r3, #1
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	e002      	b.n	80054fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054f8:	f04f 33ff 	mov.w	r3, #4294967295
 80054fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054fe:	69bb      	ldr	r3, [r7, #24]
	}
 8005500:	4618      	mov	r0, r3
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	461a      	mov	r2, r3
 8005520:	21a5      	movs	r1, #165	; 0xa5
 8005522:	f001 fe15 	bl	8007150 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005530:	440b      	add	r3, r1
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f023 0307 	bic.w	r3, r3, #7
 800553e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00c      	beq.n	8005564 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	b672      	cpsid	i
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	b662      	cpsie	i
 800555e:	617b      	str	r3, [r7, #20]
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01f      	beq.n	80055aa <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
 800556e:	e012      	b.n	8005596 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	7819      	ldrb	r1, [r3, #0]
 8005578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	4413      	add	r3, r2
 800557e:	3334      	adds	r3, #52	; 0x34
 8005580:	460a      	mov	r2, r1
 8005582:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d006      	beq.n	800559e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	3301      	adds	r3, #1
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	2b0f      	cmp	r3, #15
 800559a:	d9e9      	bls.n	8005570 <prvInitialiseNewTask+0x68>
 800559c:	e000      	b.n	80055a0 <prvInitialiseNewTask+0x98>
			{
				break;
 800559e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a8:	e003      	b.n	80055b2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	2b37      	cmp	r3, #55	; 0x37
 80055b6:	d901      	bls.n	80055bc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055b8:	2337      	movs	r3, #55	; 0x37
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	2200      	movs	r2, #0
 80055cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	3304      	adds	r3, #4
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff f952 	bl	800487c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	3318      	adds	r3, #24
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff f94d 	bl	800487c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	2200      	movs	r2, #0
 80055fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	68f9      	ldr	r1, [r7, #12]
 800560a:	69b8      	ldr	r0, [r7, #24]
 800560c:	f001 f952 	bl	80068b4 <pxPortInitialiseStack>
 8005610:	4602      	mov	r2, r0
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005620:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005622:	bf00      	nop
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005634:	f001 fa4a 	bl	8006acc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005638:	4b2d      	ldr	r3, [pc, #180]	; (80056f0 <prvAddNewTaskToReadyList+0xc4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3301      	adds	r3, #1
 800563e:	4a2c      	ldr	r2, [pc, #176]	; (80056f0 <prvAddNewTaskToReadyList+0xc4>)
 8005640:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005642:	4b2c      	ldr	r3, [pc, #176]	; (80056f4 <prvAddNewTaskToReadyList+0xc8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800564a:	4a2a      	ldr	r2, [pc, #168]	; (80056f4 <prvAddNewTaskToReadyList+0xc8>)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005650:	4b27      	ldr	r3, [pc, #156]	; (80056f0 <prvAddNewTaskToReadyList+0xc4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d110      	bne.n	800567a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005658:	f000 fc2c 	bl	8005eb4 <prvInitialiseTaskLists>
 800565c:	e00d      	b.n	800567a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800565e:	4b26      	ldr	r3, [pc, #152]	; (80056f8 <prvAddNewTaskToReadyList+0xcc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005666:	4b23      	ldr	r3, [pc, #140]	; (80056f4 <prvAddNewTaskToReadyList+0xc8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	429a      	cmp	r2, r3
 8005672:	d802      	bhi.n	800567a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005674:	4a1f      	ldr	r2, [pc, #124]	; (80056f4 <prvAddNewTaskToReadyList+0xc8>)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800567a:	4b20      	ldr	r3, [pc, #128]	; (80056fc <prvAddNewTaskToReadyList+0xd0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3301      	adds	r3, #1
 8005680:	4a1e      	ldr	r2, [pc, #120]	; (80056fc <prvAddNewTaskToReadyList+0xd0>)
 8005682:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005684:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <prvAddNewTaskToReadyList+0xd0>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005690:	4b1b      	ldr	r3, [pc, #108]	; (8005700 <prvAddNewTaskToReadyList+0xd4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d903      	bls.n	80056a0 <prvAddNewTaskToReadyList+0x74>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	4a18      	ldr	r2, [pc, #96]	; (8005700 <prvAddNewTaskToReadyList+0xd4>)
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4a15      	ldr	r2, [pc, #84]	; (8005704 <prvAddNewTaskToReadyList+0xd8>)
 80056ae:	441a      	add	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f7ff f8ed 	bl	8004896 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056bc:	f001 fa3a 	bl	8006b34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056c0:	4b0d      	ldr	r3, [pc, #52]	; (80056f8 <prvAddNewTaskToReadyList+0xcc>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00e      	beq.n	80056e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056c8:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <prvAddNewTaskToReadyList+0xc8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d207      	bcs.n	80056e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056d6:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <prvAddNewTaskToReadyList+0xdc>)
 80056d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20001414 	.word	0x20001414
 80056f4:	20000f40 	.word	0x20000f40
 80056f8:	20001420 	.word	0x20001420
 80056fc:	20001430 	.word	0x20001430
 8005700:	2000141c 	.word	0x2000141c
 8005704:	20000f44 	.word	0x20000f44
 8005708:	e000ed04 	.word	0xe000ed04

0800570c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d019      	beq.n	8005752 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800571e:	4b14      	ldr	r3, [pc, #80]	; (8005770 <vTaskDelay+0x64>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00c      	beq.n	8005740 <vTaskDelay+0x34>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	b672      	cpsid	i
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	b662      	cpsie	i
 800573a:	60bb      	str	r3, [r7, #8]
}
 800573c:	bf00      	nop
 800573e:	e7fe      	b.n	800573e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005740:	f000 f884 	bl	800584c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005744:	2100      	movs	r1, #0
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fd04 	bl	8006154 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800574c:	f000 f88c 	bl	8005868 <xTaskResumeAll>
 8005750:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d107      	bne.n	8005768 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <vTaskDelay+0x68>)
 800575a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	2000143c 	.word	0x2000143c
 8005774:	e000ed04 	.word	0xe000ed04

08005778 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005782:	2300      	movs	r3, #0
 8005784:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005786:	463a      	mov	r2, r7
 8005788:	1d39      	adds	r1, r7, #4
 800578a:	f107 0308 	add.w	r3, r7, #8
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff f820 	bl	80047d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	9202      	str	r2, [sp, #8]
 800579c:	9301      	str	r3, [sp, #4]
 800579e:	2300      	movs	r3, #0
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	2300      	movs	r3, #0
 80057a4:	460a      	mov	r2, r1
 80057a6:	4923      	ldr	r1, [pc, #140]	; (8005834 <vTaskStartScheduler+0xbc>)
 80057a8:	4823      	ldr	r0, [pc, #140]	; (8005838 <vTaskStartScheduler+0xc0>)
 80057aa:	f7ff fe05 	bl	80053b8 <xTaskCreateStatic>
 80057ae:	4603      	mov	r3, r0
 80057b0:	4a22      	ldr	r2, [pc, #136]	; (800583c <vTaskStartScheduler+0xc4>)
 80057b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057b4:	4b21      	ldr	r3, [pc, #132]	; (800583c <vTaskStartScheduler+0xc4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057bc:	2301      	movs	r3, #1
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	e001      	b.n	80057c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d102      	bne.n	80057d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80057cc:	f000 fd16 	bl	80061fc <xTimerCreateTimerTask>
 80057d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d118      	bne.n	800580a <vTaskStartScheduler+0x92>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	b672      	cpsid	i
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	b662      	cpsie	i
 80057ec:	613b      	str	r3, [r7, #16]
}
 80057ee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057f0:	4b13      	ldr	r3, [pc, #76]	; (8005840 <vTaskStartScheduler+0xc8>)
 80057f2:	f04f 32ff 	mov.w	r2, #4294967295
 80057f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057f8:	4b12      	ldr	r3, [pc, #72]	; (8005844 <vTaskStartScheduler+0xcc>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057fe:	4b12      	ldr	r3, [pc, #72]	; (8005848 <vTaskStartScheduler+0xd0>)
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005804:	f001 f8e4 	bl	80069d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005808:	e010      	b.n	800582c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d10c      	bne.n	800582c <vTaskStartScheduler+0xb4>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	b672      	cpsid	i
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	b662      	cpsie	i
 8005826:	60fb      	str	r3, [r7, #12]
}
 8005828:	bf00      	nop
 800582a:	e7fe      	b.n	800582a <vTaskStartScheduler+0xb2>
}
 800582c:	bf00      	nop
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	08007188 	.word	0x08007188
 8005838:	08005e85 	.word	0x08005e85
 800583c:	20001438 	.word	0x20001438
 8005840:	20001434 	.word	0x20001434
 8005844:	20001420 	.word	0x20001420
 8005848:	20001418 	.word	0x20001418

0800584c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005850:	4b04      	ldr	r3, [pc, #16]	; (8005864 <vTaskSuspendAll+0x18>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3301      	adds	r3, #1
 8005856:	4a03      	ldr	r2, [pc, #12]	; (8005864 <vTaskSuspendAll+0x18>)
 8005858:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800585a:	bf00      	nop
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	2000143c 	.word	0x2000143c

08005868 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005872:	2300      	movs	r3, #0
 8005874:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005876:	4b43      	ldr	r3, [pc, #268]	; (8005984 <xTaskResumeAll+0x11c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10c      	bne.n	8005898 <xTaskResumeAll+0x30>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	b672      	cpsid	i
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	b662      	cpsie	i
 8005892:	603b      	str	r3, [r7, #0]
}
 8005894:	bf00      	nop
 8005896:	e7fe      	b.n	8005896 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005898:	f001 f918 	bl	8006acc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800589c:	4b39      	ldr	r3, [pc, #228]	; (8005984 <xTaskResumeAll+0x11c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	4a38      	ldr	r2, [pc, #224]	; (8005984 <xTaskResumeAll+0x11c>)
 80058a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058a6:	4b37      	ldr	r3, [pc, #220]	; (8005984 <xTaskResumeAll+0x11c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d162      	bne.n	8005974 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058ae:	4b36      	ldr	r3, [pc, #216]	; (8005988 <xTaskResumeAll+0x120>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d05e      	beq.n	8005974 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058b6:	e02f      	b.n	8005918 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058b8:	4b34      	ldr	r3, [pc, #208]	; (800598c <xTaskResumeAll+0x124>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3318      	adds	r3, #24
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff f843 	bl	8004950 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3304      	adds	r3, #4
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff f83e 	bl	8004950 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d8:	4b2d      	ldr	r3, [pc, #180]	; (8005990 <xTaskResumeAll+0x128>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d903      	bls.n	80058e8 <xTaskResumeAll+0x80>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	4a2a      	ldr	r2, [pc, #168]	; (8005990 <xTaskResumeAll+0x128>)
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4a27      	ldr	r2, [pc, #156]	; (8005994 <xTaskResumeAll+0x12c>)
 80058f6:	441a      	add	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f7fe ffc9 	bl	8004896 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005908:	4b23      	ldr	r3, [pc, #140]	; (8005998 <xTaskResumeAll+0x130>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590e:	429a      	cmp	r2, r3
 8005910:	d302      	bcc.n	8005918 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005912:	4b22      	ldr	r3, [pc, #136]	; (800599c <xTaskResumeAll+0x134>)
 8005914:	2201      	movs	r2, #1
 8005916:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005918:	4b1c      	ldr	r3, [pc, #112]	; (800598c <xTaskResumeAll+0x124>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1cb      	bne.n	80058b8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005926:	f000 fb65 	bl	8005ff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800592a:	4b1d      	ldr	r3, [pc, #116]	; (80059a0 <xTaskResumeAll+0x138>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d010      	beq.n	8005958 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005936:	f000 f847 	bl	80059c8 <xTaskIncrementTick>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005940:	4b16      	ldr	r3, [pc, #88]	; (800599c <xTaskResumeAll+0x134>)
 8005942:	2201      	movs	r2, #1
 8005944:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3b01      	subs	r3, #1
 800594a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f1      	bne.n	8005936 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005952:	4b13      	ldr	r3, [pc, #76]	; (80059a0 <xTaskResumeAll+0x138>)
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005958:	4b10      	ldr	r3, [pc, #64]	; (800599c <xTaskResumeAll+0x134>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005960:	2301      	movs	r3, #1
 8005962:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005964:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <xTaskResumeAll+0x13c>)
 8005966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005974:	f001 f8de 	bl	8006b34 <vPortExitCritical>

	return xAlreadyYielded;
 8005978:	68bb      	ldr	r3, [r7, #8]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	2000143c 	.word	0x2000143c
 8005988:	20001414 	.word	0x20001414
 800598c:	200013d4 	.word	0x200013d4
 8005990:	2000141c 	.word	0x2000141c
 8005994:	20000f44 	.word	0x20000f44
 8005998:	20000f40 	.word	0x20000f40
 800599c:	20001428 	.word	0x20001428
 80059a0:	20001424 	.word	0x20001424
 80059a4:	e000ed04 	.word	0xe000ed04

080059a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80059ae:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <xTaskGetTickCount+0x1c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80059b4:	687b      	ldr	r3, [r7, #4]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20001418 	.word	0x20001418

080059c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059d2:	4b50      	ldr	r3, [pc, #320]	; (8005b14 <xTaskIncrementTick+0x14c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f040 808b 	bne.w	8005af2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059dc:	4b4e      	ldr	r3, [pc, #312]	; (8005b18 <xTaskIncrementTick+0x150>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3301      	adds	r3, #1
 80059e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059e4:	4a4c      	ldr	r2, [pc, #304]	; (8005b18 <xTaskIncrementTick+0x150>)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d122      	bne.n	8005a36 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80059f0:	4b4a      	ldr	r3, [pc, #296]	; (8005b1c <xTaskIncrementTick+0x154>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00c      	beq.n	8005a14 <xTaskIncrementTick+0x4c>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	b672      	cpsid	i
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	b662      	cpsie	i
 8005a0e:	603b      	str	r3, [r7, #0]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <xTaskIncrementTick+0x4a>
 8005a14:	4b41      	ldr	r3, [pc, #260]	; (8005b1c <xTaskIncrementTick+0x154>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	4b41      	ldr	r3, [pc, #260]	; (8005b20 <xTaskIncrementTick+0x158>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a3f      	ldr	r2, [pc, #252]	; (8005b1c <xTaskIncrementTick+0x154>)
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	4a3f      	ldr	r2, [pc, #252]	; (8005b20 <xTaskIncrementTick+0x158>)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	4b3e      	ldr	r3, [pc, #248]	; (8005b24 <xTaskIncrementTick+0x15c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	4a3d      	ldr	r2, [pc, #244]	; (8005b24 <xTaskIncrementTick+0x15c>)
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	f000 fadf 	bl	8005ff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a36:	4b3c      	ldr	r3, [pc, #240]	; (8005b28 <xTaskIncrementTick+0x160>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d349      	bcc.n	8005ad4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a40:	4b36      	ldr	r3, [pc, #216]	; (8005b1c <xTaskIncrementTick+0x154>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d104      	bne.n	8005a54 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a4a:	4b37      	ldr	r3, [pc, #220]	; (8005b28 <xTaskIncrementTick+0x160>)
 8005a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a50:	601a      	str	r2, [r3, #0]
					break;
 8005a52:	e03f      	b.n	8005ad4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a54:	4b31      	ldr	r3, [pc, #196]	; (8005b1c <xTaskIncrementTick+0x154>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d203      	bcs.n	8005a74 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a6c:	4a2e      	ldr	r2, [pc, #184]	; (8005b28 <xTaskIncrementTick+0x160>)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a72:	e02f      	b.n	8005ad4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	3304      	adds	r3, #4
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fe ff69 	bl	8004950 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	3318      	adds	r3, #24
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fe ff60 	bl	8004950 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a94:	4b25      	ldr	r3, [pc, #148]	; (8005b2c <xTaskIncrementTick+0x164>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d903      	bls.n	8005aa4 <xTaskIncrementTick+0xdc>
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	4a22      	ldr	r2, [pc, #136]	; (8005b2c <xTaskIncrementTick+0x164>)
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <xTaskIncrementTick+0x168>)
 8005ab2:	441a      	add	r2, r3
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f7fe feeb 	bl	8004896 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac4:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <xTaskIncrementTick+0x16c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d3b8      	bcc.n	8005a40 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ad2:	e7b5      	b.n	8005a40 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ad4:	4b17      	ldr	r3, [pc, #92]	; (8005b34 <xTaskIncrementTick+0x16c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ada:	4915      	ldr	r1, [pc, #84]	; (8005b30 <xTaskIncrementTick+0x168>)
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d907      	bls.n	8005afc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005aec:	2301      	movs	r3, #1
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	e004      	b.n	8005afc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005af2:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <xTaskIncrementTick+0x170>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3301      	adds	r3, #1
 8005af8:	4a0f      	ldr	r2, [pc, #60]	; (8005b38 <xTaskIncrementTick+0x170>)
 8005afa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005afc:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <xTaskIncrementTick+0x174>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005b04:	2301      	movs	r3, #1
 8005b06:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005b08:	697b      	ldr	r3, [r7, #20]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	2000143c 	.word	0x2000143c
 8005b18:	20001418 	.word	0x20001418
 8005b1c:	200013cc 	.word	0x200013cc
 8005b20:	200013d0 	.word	0x200013d0
 8005b24:	2000142c 	.word	0x2000142c
 8005b28:	20001434 	.word	0x20001434
 8005b2c:	2000141c 	.word	0x2000141c
 8005b30:	20000f44 	.word	0x20000f44
 8005b34:	20000f40 	.word	0x20000f40
 8005b38:	20001424 	.word	0x20001424
 8005b3c:	20001428 	.word	0x20001428

08005b40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b46:	4b29      	ldr	r3, [pc, #164]	; (8005bec <vTaskSwitchContext+0xac>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b4e:	4b28      	ldr	r3, [pc, #160]	; (8005bf0 <vTaskSwitchContext+0xb0>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b54:	e043      	b.n	8005bde <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8005b56:	4b26      	ldr	r3, [pc, #152]	; (8005bf0 <vTaskSwitchContext+0xb0>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b5c:	4b25      	ldr	r3, [pc, #148]	; (8005bf4 <vTaskSwitchContext+0xb4>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e012      	b.n	8005b8a <vTaskSwitchContext+0x4a>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10c      	bne.n	8005b84 <vTaskSwitchContext+0x44>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	b672      	cpsid	i
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	b662      	cpsie	i
 8005b7e:	607b      	str	r3, [r7, #4]
}
 8005b80:	bf00      	nop
 8005b82:	e7fe      	b.n	8005b82 <vTaskSwitchContext+0x42>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	491b      	ldr	r1, [pc, #108]	; (8005bf8 <vTaskSwitchContext+0xb8>)
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0e2      	beq.n	8005b64 <vTaskSwitchContext+0x24>
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4a13      	ldr	r2, [pc, #76]	; (8005bf8 <vTaskSwitchContext+0xb8>)
 8005baa:	4413      	add	r3, r2
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	605a      	str	r2, [r3, #4]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d104      	bne.n	8005bce <vTaskSwitchContext+0x8e>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	605a      	str	r2, [r3, #4]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4a09      	ldr	r2, [pc, #36]	; (8005bfc <vTaskSwitchContext+0xbc>)
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	4a06      	ldr	r2, [pc, #24]	; (8005bf4 <vTaskSwitchContext+0xb4>)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6013      	str	r3, [r2, #0]
}
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	2000143c 	.word	0x2000143c
 8005bf0:	20001428 	.word	0x20001428
 8005bf4:	2000141c 	.word	0x2000141c
 8005bf8:	20000f44 	.word	0x20000f44
 8005bfc:	20000f40 	.word	0x20000f40

08005c00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10c      	bne.n	8005c2a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	b672      	cpsid	i
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	b662      	cpsie	i
 8005c24:	60fb      	str	r3, [r7, #12]
}
 8005c26:	bf00      	nop
 8005c28:	e7fe      	b.n	8005c28 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c2a:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <vTaskPlaceOnEventList+0x48>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3318      	adds	r3, #24
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fe fe53 	bl	80048de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c38:	2101      	movs	r1, #1
 8005c3a:	6838      	ldr	r0, [r7, #0]
 8005c3c:	f000 fa8a 	bl	8006154 <prvAddCurrentTaskToDelayedList>
}
 8005c40:	bf00      	nop
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20000f40 	.word	0x20000f40

08005c4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10c      	bne.n	8005c78 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	b672      	cpsid	i
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	b662      	cpsie	i
 8005c72:	617b      	str	r3, [r7, #20]
}
 8005c74:	bf00      	nop
 8005c76:	e7fe      	b.n	8005c76 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c78:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <vTaskPlaceOnEventListRestricted+0x58>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3318      	adds	r3, #24
 8005c7e:	4619      	mov	r1, r3
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f7fe fe08 	bl	8004896 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	68b8      	ldr	r0, [r7, #8]
 8005c96:	f000 fa5d 	bl	8006154 <prvAddCurrentTaskToDelayedList>
	}
 8005c9a:	bf00      	nop
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000f40 	.word	0x20000f40

08005ca8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10c      	bne.n	8005cd8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	b672      	cpsid	i
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	b662      	cpsie	i
 8005cd2:	60fb      	str	r3, [r7, #12]
}
 8005cd4:	bf00      	nop
 8005cd6:	e7fe      	b.n	8005cd6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	3318      	adds	r3, #24
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fe fe37 	bl	8004950 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ce2:	4b1e      	ldr	r3, [pc, #120]	; (8005d5c <xTaskRemoveFromEventList+0xb4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d11d      	bne.n	8005d26 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fe fe2e 	bl	8004950 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf8:	4b19      	ldr	r3, [pc, #100]	; (8005d60 <xTaskRemoveFromEventList+0xb8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d903      	bls.n	8005d08 <xTaskRemoveFromEventList+0x60>
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	4a16      	ldr	r2, [pc, #88]	; (8005d60 <xTaskRemoveFromEventList+0xb8>)
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4a13      	ldr	r2, [pc, #76]	; (8005d64 <xTaskRemoveFromEventList+0xbc>)
 8005d16:	441a      	add	r2, r3
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	f7fe fdb9 	bl	8004896 <vListInsertEnd>
 8005d24:	e005      	b.n	8005d32 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	3318      	adds	r3, #24
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	480e      	ldr	r0, [pc, #56]	; (8005d68 <xTaskRemoveFromEventList+0xc0>)
 8005d2e:	f7fe fdb2 	bl	8004896 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <xTaskRemoveFromEventList+0xc4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d905      	bls.n	8005d4c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d40:	2301      	movs	r3, #1
 8005d42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d44:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <xTaskRemoveFromEventList+0xc8>)
 8005d46:	2201      	movs	r2, #1
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e001      	b.n	8005d50 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d50:	697b      	ldr	r3, [r7, #20]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	2000143c 	.word	0x2000143c
 8005d60:	2000141c 	.word	0x2000141c
 8005d64:	20000f44 	.word	0x20000f44
 8005d68:	200013d4 	.word	0x200013d4
 8005d6c:	20000f40 	.word	0x20000f40
 8005d70:	20001428 	.word	0x20001428

08005d74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <vTaskInternalSetTimeOutState+0x24>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <vTaskInternalSetTimeOutState+0x28>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	605a      	str	r2, [r3, #4]
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	2000142c 	.word	0x2000142c
 8005d9c:	20001418 	.word	0x20001418

08005da0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10c      	bne.n	8005dca <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	b672      	cpsid	i
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	b662      	cpsie	i
 8005dc4:	613b      	str	r3, [r7, #16]
}
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10c      	bne.n	8005dea <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	b672      	cpsid	i
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	b662      	cpsie	i
 8005de4:	60fb      	str	r3, [r7, #12]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005dea:	f000 fe6f 	bl	8006acc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dee:	4b1d      	ldr	r3, [pc, #116]	; (8005e64 <xTaskCheckForTimeOut+0xc4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e06:	d102      	bne.n	8005e0e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61fb      	str	r3, [r7, #28]
 8005e0c:	e023      	b.n	8005e56 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4b15      	ldr	r3, [pc, #84]	; (8005e68 <xTaskCheckForTimeOut+0xc8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d007      	beq.n	8005e2a <xTaskCheckForTimeOut+0x8a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d302      	bcc.n	8005e2a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e24:	2301      	movs	r3, #1
 8005e26:	61fb      	str	r3, [r7, #28]
 8005e28:	e015      	b.n	8005e56 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d20b      	bcs.n	8005e4c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	1ad2      	subs	r2, r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff ff97 	bl	8005d74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	e004      	b.n	8005e56 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e52:	2301      	movs	r3, #1
 8005e54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e56:	f000 fe6d 	bl	8006b34 <vPortExitCritical>

	return xReturn;
 8005e5a:	69fb      	ldr	r3, [r7, #28]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3720      	adds	r7, #32
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20001418 	.word	0x20001418
 8005e68:	2000142c 	.word	0x2000142c

08005e6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e70:	4b03      	ldr	r3, [pc, #12]	; (8005e80 <vTaskMissedYield+0x14>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	601a      	str	r2, [r3, #0]
}
 8005e76:	bf00      	nop
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	20001428 	.word	0x20001428

08005e84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e8c:	f000 f852 	bl	8005f34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e90:	4b06      	ldr	r3, [pc, #24]	; (8005eac <prvIdleTask+0x28>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d9f9      	bls.n	8005e8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <prvIdleTask+0x2c>)
 8005e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ea8:	e7f0      	b.n	8005e8c <prvIdleTask+0x8>
 8005eaa:	bf00      	nop
 8005eac:	20000f44 	.word	0x20000f44
 8005eb0:	e000ed04 	.word	0xe000ed04

08005eb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005eba:	2300      	movs	r3, #0
 8005ebc:	607b      	str	r3, [r7, #4]
 8005ebe:	e00c      	b.n	8005eda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4a12      	ldr	r2, [pc, #72]	; (8005f14 <prvInitialiseTaskLists+0x60>)
 8005ecc:	4413      	add	r3, r2
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe fcb4 	bl	800483c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	607b      	str	r3, [r7, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b37      	cmp	r3, #55	; 0x37
 8005ede:	d9ef      	bls.n	8005ec0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ee0:	480d      	ldr	r0, [pc, #52]	; (8005f18 <prvInitialiseTaskLists+0x64>)
 8005ee2:	f7fe fcab 	bl	800483c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ee6:	480d      	ldr	r0, [pc, #52]	; (8005f1c <prvInitialiseTaskLists+0x68>)
 8005ee8:	f7fe fca8 	bl	800483c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005eec:	480c      	ldr	r0, [pc, #48]	; (8005f20 <prvInitialiseTaskLists+0x6c>)
 8005eee:	f7fe fca5 	bl	800483c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ef2:	480c      	ldr	r0, [pc, #48]	; (8005f24 <prvInitialiseTaskLists+0x70>)
 8005ef4:	f7fe fca2 	bl	800483c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ef8:	480b      	ldr	r0, [pc, #44]	; (8005f28 <prvInitialiseTaskLists+0x74>)
 8005efa:	f7fe fc9f 	bl	800483c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005efe:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <prvInitialiseTaskLists+0x78>)
 8005f00:	4a05      	ldr	r2, [pc, #20]	; (8005f18 <prvInitialiseTaskLists+0x64>)
 8005f02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <prvInitialiseTaskLists+0x7c>)
 8005f06:	4a05      	ldr	r2, [pc, #20]	; (8005f1c <prvInitialiseTaskLists+0x68>)
 8005f08:	601a      	str	r2, [r3, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000f44 	.word	0x20000f44
 8005f18:	200013a4 	.word	0x200013a4
 8005f1c:	200013b8 	.word	0x200013b8
 8005f20:	200013d4 	.word	0x200013d4
 8005f24:	200013e8 	.word	0x200013e8
 8005f28:	20001400 	.word	0x20001400
 8005f2c:	200013cc 	.word	0x200013cc
 8005f30:	200013d0 	.word	0x200013d0

08005f34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f3a:	e019      	b.n	8005f70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f3c:	f000 fdc6 	bl	8006acc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f40:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <prvCheckTasksWaitingTermination+0x50>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fe fcff 	bl	8004950 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f52:	4b0d      	ldr	r3, [pc, #52]	; (8005f88 <prvCheckTasksWaitingTermination+0x54>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	4a0b      	ldr	r2, [pc, #44]	; (8005f88 <prvCheckTasksWaitingTermination+0x54>)
 8005f5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <prvCheckTasksWaitingTermination+0x58>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	4a0a      	ldr	r2, [pc, #40]	; (8005f8c <prvCheckTasksWaitingTermination+0x58>)
 8005f64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f66:	f000 fde5 	bl	8006b34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f810 	bl	8005f90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f70:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <prvCheckTasksWaitingTermination+0x58>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e1      	bne.n	8005f3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	200013e8 	.word	0x200013e8
 8005f88:	20001414 	.word	0x20001414
 8005f8c:	200013fc 	.word	0x200013fc

08005f90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d108      	bne.n	8005fb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 ff86 	bl	8006eb8 <vPortFree>
				vPortFree( pxTCB );
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 ff83 	bl	8006eb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005fb2:	e01a      	b.n	8005fea <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d103      	bne.n	8005fc6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 ff7a 	bl	8006eb8 <vPortFree>
	}
 8005fc4:	e011      	b.n	8005fea <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d00c      	beq.n	8005fea <prvDeleteTCB+0x5a>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	b672      	cpsid	i
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	b662      	cpsie	i
 8005fe4:	60fb      	str	r3, [r7, #12]
}
 8005fe6:	bf00      	nop
 8005fe8:	e7fe      	b.n	8005fe8 <prvDeleteTCB+0x58>
	}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	; (800602c <prvResetNextTaskUnblockTime+0x38>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006004:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <prvResetNextTaskUnblockTime+0x3c>)
 8006006:	f04f 32ff 	mov.w	r2, #4294967295
 800600a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800600c:	e008      	b.n	8006020 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800600e:	4b07      	ldr	r3, [pc, #28]	; (800602c <prvResetNextTaskUnblockTime+0x38>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	4a04      	ldr	r2, [pc, #16]	; (8006030 <prvResetNextTaskUnblockTime+0x3c>)
 800601e:	6013      	str	r3, [r2, #0]
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	200013cc 	.word	0x200013cc
 8006030:	20001434 	.word	0x20001434

08006034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800603a:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <xTaskGetSchedulerState+0x34>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d102      	bne.n	8006048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006042:	2301      	movs	r3, #1
 8006044:	607b      	str	r3, [r7, #4]
 8006046:	e008      	b.n	800605a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006048:	4b08      	ldr	r3, [pc, #32]	; (800606c <xTaskGetSchedulerState+0x38>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006050:	2302      	movs	r3, #2
 8006052:	607b      	str	r3, [r7, #4]
 8006054:	e001      	b.n	800605a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006056:	2300      	movs	r3, #0
 8006058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800605a:	687b      	ldr	r3, [r7, #4]
	}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	20001420 	.word	0x20001420
 800606c:	2000143c 	.word	0x2000143c

08006070 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800607c:	2300      	movs	r3, #0
 800607e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d05a      	beq.n	800613c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006086:	4b30      	ldr	r3, [pc, #192]	; (8006148 <xTaskPriorityDisinherit+0xd8>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	429a      	cmp	r2, r3
 800608e:	d00c      	beq.n	80060aa <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	b672      	cpsid	i
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	b662      	cpsie	i
 80060a4:	60fb      	str	r3, [r7, #12]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10c      	bne.n	80060cc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b6:	b672      	cpsid	i
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	b662      	cpsie	i
 80060c6:	60bb      	str	r3, [r7, #8]
}
 80060c8:	bf00      	nop
 80060ca:	e7fe      	b.n	80060ca <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d0:	1e5a      	subs	r2, r3, #1
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060de:	429a      	cmp	r2, r3
 80060e0:	d02c      	beq.n	800613c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d128      	bne.n	800613c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	3304      	adds	r3, #4
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe fc2e 	bl	8004950 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610c:	4b0f      	ldr	r3, [pc, #60]	; (800614c <xTaskPriorityDisinherit+0xdc>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d903      	bls.n	800611c <xTaskPriorityDisinherit+0xac>
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	4a0c      	ldr	r2, [pc, #48]	; (800614c <xTaskPriorityDisinherit+0xdc>)
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4a09      	ldr	r2, [pc, #36]	; (8006150 <xTaskPriorityDisinherit+0xe0>)
 800612a:	441a      	add	r2, r3
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	3304      	adds	r3, #4
 8006130:	4619      	mov	r1, r3
 8006132:	4610      	mov	r0, r2
 8006134:	f7fe fbaf 	bl	8004896 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006138:	2301      	movs	r3, #1
 800613a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800613c:	697b      	ldr	r3, [r7, #20]
	}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20000f40 	.word	0x20000f40
 800614c:	2000141c 	.word	0x2000141c
 8006150:	20000f44 	.word	0x20000f44

08006154 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800615e:	4b21      	ldr	r3, [pc, #132]	; (80061e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006164:	4b20      	ldr	r3, [pc, #128]	; (80061e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3304      	adds	r3, #4
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe fbf0 	bl	8004950 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006176:	d10a      	bne.n	800618e <prvAddCurrentTaskToDelayedList+0x3a>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d007      	beq.n	800618e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800617e:	4b1a      	ldr	r3, [pc, #104]	; (80061e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4819      	ldr	r0, [pc, #100]	; (80061ec <prvAddCurrentTaskToDelayedList+0x98>)
 8006188:	f7fe fb85 	bl	8004896 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800618c:	e026      	b.n	80061dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4413      	add	r3, r2
 8006194:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006196:	4b14      	ldr	r3, [pc, #80]	; (80061e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d209      	bcs.n	80061ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a6:	4b12      	ldr	r3, [pc, #72]	; (80061f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4619      	mov	r1, r3
 80061b2:	4610      	mov	r0, r2
 80061b4:	f7fe fb93 	bl	80048de <vListInsert>
}
 80061b8:	e010      	b.n	80061dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ba:	4b0e      	ldr	r3, [pc, #56]	; (80061f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f7fe fb89 	bl	80048de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061cc:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d202      	bcs.n	80061dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061d6:	4a08      	ldr	r2, [pc, #32]	; (80061f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6013      	str	r3, [r2, #0]
}
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20001418 	.word	0x20001418
 80061e8:	20000f40 	.word	0x20000f40
 80061ec:	20001400 	.word	0x20001400
 80061f0:	200013d0 	.word	0x200013d0
 80061f4:	200013cc 	.word	0x200013cc
 80061f8:	20001434 	.word	0x20001434

080061fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	; 0x28
 8006200:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006206:	f000 fb15 	bl	8006834 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800620a:	4b1d      	ldr	r3, [pc, #116]	; (8006280 <xTimerCreateTimerTask+0x84>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d021      	beq.n	8006256 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006216:	2300      	movs	r3, #0
 8006218:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800621a:	1d3a      	adds	r2, r7, #4
 800621c:	f107 0108 	add.w	r1, r7, #8
 8006220:	f107 030c 	add.w	r3, r7, #12
 8006224:	4618      	mov	r0, r3
 8006226:	f7fe faef 	bl	8004808 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	9202      	str	r2, [sp, #8]
 8006232:	9301      	str	r3, [sp, #4]
 8006234:	2302      	movs	r3, #2
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	2300      	movs	r3, #0
 800623a:	460a      	mov	r2, r1
 800623c:	4911      	ldr	r1, [pc, #68]	; (8006284 <xTimerCreateTimerTask+0x88>)
 800623e:	4812      	ldr	r0, [pc, #72]	; (8006288 <xTimerCreateTimerTask+0x8c>)
 8006240:	f7ff f8ba 	bl	80053b8 <xTaskCreateStatic>
 8006244:	4603      	mov	r3, r0
 8006246:	4a11      	ldr	r2, [pc, #68]	; (800628c <xTimerCreateTimerTask+0x90>)
 8006248:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800624a:	4b10      	ldr	r3, [pc, #64]	; (800628c <xTimerCreateTimerTask+0x90>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006252:	2301      	movs	r3, #1
 8006254:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10c      	bne.n	8006276 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	b672      	cpsid	i
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	b662      	cpsie	i
 8006270:	613b      	str	r3, [r7, #16]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006276:	697b      	ldr	r3, [r7, #20]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20001470 	.word	0x20001470
 8006284:	08007190 	.word	0x08007190
 8006288:	080063cd 	.word	0x080063cd
 800628c:	20001474 	.word	0x20001474

08006290 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800629e:	2300      	movs	r3, #0
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10c      	bne.n	80062c2 <xTimerGenericCommand+0x32>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	b672      	cpsid	i
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	b662      	cpsie	i
 80062bc:	623b      	str	r3, [r7, #32]
}
 80062be:	bf00      	nop
 80062c0:	e7fe      	b.n	80062c0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062c2:	4b1a      	ldr	r3, [pc, #104]	; (800632c <xTimerGenericCommand+0x9c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d02a      	beq.n	8006320 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b05      	cmp	r3, #5
 80062da:	dc18      	bgt.n	800630e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062dc:	f7ff feaa 	bl	8006034 <xTaskGetSchedulerState>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d109      	bne.n	80062fa <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062e6:	4b11      	ldr	r3, [pc, #68]	; (800632c <xTimerGenericCommand+0x9c>)
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	f107 0110 	add.w	r1, r7, #16
 80062ee:	2300      	movs	r3, #0
 80062f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f2:	f7fe fc67 	bl	8004bc4 <xQueueGenericSend>
 80062f6:	6278      	str	r0, [r7, #36]	; 0x24
 80062f8:	e012      	b.n	8006320 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062fa:	4b0c      	ldr	r3, [pc, #48]	; (800632c <xTimerGenericCommand+0x9c>)
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	f107 0110 	add.w	r1, r7, #16
 8006302:	2300      	movs	r3, #0
 8006304:	2200      	movs	r2, #0
 8006306:	f7fe fc5d 	bl	8004bc4 <xQueueGenericSend>
 800630a:	6278      	str	r0, [r7, #36]	; 0x24
 800630c:	e008      	b.n	8006320 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800630e:	4b07      	ldr	r3, [pc, #28]	; (800632c <xTimerGenericCommand+0x9c>)
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	f107 0110 	add.w	r1, r7, #16
 8006316:	2300      	movs	r3, #0
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	f7fe fd59 	bl	8004dd0 <xQueueGenericSendFromISR>
 800631e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006322:	4618      	mov	r0, r3
 8006324:	3728      	adds	r7, #40	; 0x28
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20001470 	.word	0x20001470

08006330 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af02      	add	r7, sp, #8
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800633a:	4b23      	ldr	r3, [pc, #140]	; (80063c8 <prvProcessExpiredTimer+0x98>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	3304      	adds	r3, #4
 8006348:	4618      	mov	r0, r3
 800634a:	f7fe fb01 	bl	8004950 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d024      	beq.n	80063a6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	699a      	ldr	r2, [r3, #24]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	18d1      	adds	r1, r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	6978      	ldr	r0, [r7, #20]
 800636a:	f000 f8d3 	bl	8006514 <prvInsertTimerInActiveList>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d021      	beq.n	80063b8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006374:	2300      	movs	r3, #0
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	2300      	movs	r3, #0
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	2100      	movs	r1, #0
 800637e:	6978      	ldr	r0, [r7, #20]
 8006380:	f7ff ff86 	bl	8006290 <xTimerGenericCommand>
 8006384:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d115      	bne.n	80063b8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006390:	b672      	cpsid	i
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	b662      	cpsie	i
 80063a0:	60fb      	str	r3, [r7, #12]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ac:	f023 0301 	bic.w	r3, r3, #1
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	6978      	ldr	r0, [r7, #20]
 80063be:	4798      	blx	r3
}
 80063c0:	bf00      	nop
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	20001468 	.word	0x20001468

080063cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063d4:	f107 0308 	add.w	r3, r7, #8
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 f857 	bl	800648c <prvGetNextExpireTime>
 80063de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4619      	mov	r1, r3
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f803 	bl	80063f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063ea:	f000 f8d5 	bl	8006598 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063ee:	e7f1      	b.n	80063d4 <prvTimerTask+0x8>

080063f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063fa:	f7ff fa27 	bl	800584c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063fe:	f107 0308 	add.w	r3, r7, #8
 8006402:	4618      	mov	r0, r3
 8006404:	f000 f866 	bl	80064d4 <prvSampleTimeNow>
 8006408:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d130      	bne.n	8006472 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10a      	bne.n	800642c <prvProcessTimerOrBlockTask+0x3c>
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	429a      	cmp	r2, r3
 800641c:	d806      	bhi.n	800642c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800641e:	f7ff fa23 	bl	8005868 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006422:	68f9      	ldr	r1, [r7, #12]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff ff83 	bl	8006330 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800642a:	e024      	b.n	8006476 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d008      	beq.n	8006444 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006432:	4b13      	ldr	r3, [pc, #76]	; (8006480 <prvProcessTimerOrBlockTask+0x90>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <prvProcessTimerOrBlockTask+0x50>
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <prvProcessTimerOrBlockTask+0x52>
 8006440:	2300      	movs	r3, #0
 8006442:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006444:	4b0f      	ldr	r3, [pc, #60]	; (8006484 <prvProcessTimerOrBlockTask+0x94>)
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	4619      	mov	r1, r3
 8006452:	f7fe ff7d 	bl	8005350 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006456:	f7ff fa07 	bl	8005868 <xTaskResumeAll>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10a      	bne.n	8006476 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006460:	4b09      	ldr	r3, [pc, #36]	; (8006488 <prvProcessTimerOrBlockTask+0x98>)
 8006462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	f3bf 8f6f 	isb	sy
}
 8006470:	e001      	b.n	8006476 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006472:	f7ff f9f9 	bl	8005868 <xTaskResumeAll>
}
 8006476:	bf00      	nop
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	2000146c 	.word	0x2000146c
 8006484:	20001470 	.word	0x20001470
 8006488:	e000ed04 	.word	0xe000ed04

0800648c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006494:	4b0e      	ldr	r3, [pc, #56]	; (80064d0 <prvGetNextExpireTime+0x44>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <prvGetNextExpireTime+0x16>
 800649e:	2201      	movs	r2, #1
 80064a0:	e000      	b.n	80064a4 <prvGetNextExpireTime+0x18>
 80064a2:	2200      	movs	r2, #0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d105      	bne.n	80064bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064b0:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <prvGetNextExpireTime+0x44>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	e001      	b.n	80064c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064c0:	68fb      	ldr	r3, [r7, #12]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	20001468 	.word	0x20001468

080064d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064dc:	f7ff fa64 	bl	80059a8 <xTaskGetTickCount>
 80064e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064e2:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <prvSampleTimeNow+0x3c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d205      	bcs.n	80064f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064ec:	f000 f93c 	bl	8006768 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	e002      	b.n	80064fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064fe:	4a04      	ldr	r2, [pc, #16]	; (8006510 <prvSampleTimeNow+0x3c>)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006504:	68fb      	ldr	r3, [r7, #12]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20001478 	.word	0x20001478

08006514 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006522:	2300      	movs	r3, #0
 8006524:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	429a      	cmp	r2, r3
 8006538:	d812      	bhi.n	8006560 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	429a      	cmp	r2, r3
 8006546:	d302      	bcc.n	800654e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006548:	2301      	movs	r3, #1
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e01b      	b.n	8006586 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800654e:	4b10      	ldr	r3, [pc, #64]	; (8006590 <prvInsertTimerInActiveList+0x7c>)
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3304      	adds	r3, #4
 8006556:	4619      	mov	r1, r3
 8006558:	4610      	mov	r0, r2
 800655a:	f7fe f9c0 	bl	80048de <vListInsert>
 800655e:	e012      	b.n	8006586 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d206      	bcs.n	8006576 <prvInsertTimerInActiveList+0x62>
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d302      	bcc.n	8006576 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006570:	2301      	movs	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	e007      	b.n	8006586 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006576:	4b07      	ldr	r3, [pc, #28]	; (8006594 <prvInsertTimerInActiveList+0x80>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3304      	adds	r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f7fe f9ac 	bl	80048de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006586:	697b      	ldr	r3, [r7, #20]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	2000146c 	.word	0x2000146c
 8006594:	20001468 	.word	0x20001468

08006598 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08e      	sub	sp, #56	; 0x38
 800659c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800659e:	e0d0      	b.n	8006742 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	da1a      	bge.n	80065dc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065a6:	1d3b      	adds	r3, r7, #4
 80065a8:	3304      	adds	r3, #4
 80065aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10c      	bne.n	80065cc <prvProcessReceivedCommands+0x34>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	b672      	cpsid	i
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	b662      	cpsie	i
 80065c6:	61fb      	str	r3, [r7, #28]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065d2:	6850      	ldr	r0, [r2, #4]
 80065d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065d6:	6892      	ldr	r2, [r2, #8]
 80065d8:	4611      	mov	r1, r2
 80065da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f2c0 80ae 	blt.w	8006740 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d004      	beq.n	80065fa <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f2:	3304      	adds	r3, #4
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fe f9ab 	bl	8004950 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065fa:	463b      	mov	r3, r7
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff ff69 	bl	80064d4 <prvSampleTimeNow>
 8006602:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b09      	cmp	r3, #9
 8006608:	f200 809b 	bhi.w	8006742 <prvProcessReceivedCommands+0x1aa>
 800660c:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <prvProcessReceivedCommands+0x7c>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	0800663d 	.word	0x0800663d
 8006618:	0800663d 	.word	0x0800663d
 800661c:	0800663d 	.word	0x0800663d
 8006620:	080066b5 	.word	0x080066b5
 8006624:	080066c9 	.word	0x080066c9
 8006628:	08006717 	.word	0x08006717
 800662c:	0800663d 	.word	0x0800663d
 8006630:	0800663d 	.word	0x0800663d
 8006634:	080066b5 	.word	0x080066b5
 8006638:	080066c9 	.word	0x080066c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006642:	f043 0301 	orr.w	r3, r3, #1
 8006646:	b2da      	uxtb	r2, r3
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	18d1      	adds	r1, r2, r3
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800665c:	f7ff ff5a 	bl	8006514 <prvInsertTimerInActiveList>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d06d      	beq.n	8006742 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800666c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d062      	beq.n	8006742 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	441a      	add	r2, r3
 8006684:	2300      	movs	r3, #0
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	2300      	movs	r3, #0
 800668a:	2100      	movs	r1, #0
 800668c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800668e:	f7ff fdff 	bl	8006290 <xTimerGenericCommand>
 8006692:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d153      	bne.n	8006742 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	b672      	cpsid	i
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	b662      	cpsie	i
 80066ae:	61bb      	str	r3, [r7, #24]
}
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80066c6:	e03c      	b.n	8006742 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10c      	bne.n	8006702 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ec:	b672      	cpsid	i
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	b662      	cpsie	i
 80066fc:	617b      	str	r3, [r7, #20]
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	18d1      	adds	r1, r2, r3
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006710:	f7ff ff00 	bl	8006514 <prvInsertTimerInActiveList>
					break;
 8006714:	e015      	b.n	8006742 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006726:	f000 fbc7 	bl	8006eb8 <vPortFree>
 800672a:	e00a      	b.n	8006742 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	b2da      	uxtb	r2, r3
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800673e:	e000      	b.n	8006742 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006740:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006742:	4b08      	ldr	r3, [pc, #32]	; (8006764 <prvProcessReceivedCommands+0x1cc>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	1d39      	adds	r1, r7, #4
 8006748:	2200      	movs	r2, #0
 800674a:	4618      	mov	r0, r3
 800674c:	f7fe fbe0 	bl	8004f10 <xQueueReceive>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	f47f af24 	bne.w	80065a0 <prvProcessReceivedCommands+0x8>
	}
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	3730      	adds	r7, #48	; 0x30
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20001470 	.word	0x20001470

08006768 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800676e:	e04a      	b.n	8006806 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006770:	4b2e      	ldr	r3, [pc, #184]	; (800682c <prvSwitchTimerLists+0xc4>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800677a:	4b2c      	ldr	r3, [pc, #176]	; (800682c <prvSwitchTimerLists+0xc4>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3304      	adds	r3, #4
 8006788:	4618      	mov	r0, r3
 800678a:	f7fe f8e1 	bl	8004950 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d030      	beq.n	8006806 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4413      	add	r3, r2
 80067ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d90e      	bls.n	80067d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067c2:	4b1a      	ldr	r3, [pc, #104]	; (800682c <prvSwitchTimerLists+0xc4>)
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3304      	adds	r3, #4
 80067ca:	4619      	mov	r1, r3
 80067cc:	4610      	mov	r0, r2
 80067ce:	f7fe f886 	bl	80048de <vListInsert>
 80067d2:	e018      	b.n	8006806 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067d4:	2300      	movs	r3, #0
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	2300      	movs	r3, #0
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	2100      	movs	r1, #0
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f7ff fd56 	bl	8006290 <xTimerGenericCommand>
 80067e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10c      	bne.n	8006806 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	b672      	cpsid	i
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	b662      	cpsie	i
 8006800:	603b      	str	r3, [r7, #0]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <prvSwitchTimerLists+0xc4>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1af      	bne.n	8006770 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006810:	4b06      	ldr	r3, [pc, #24]	; (800682c <prvSwitchTimerLists+0xc4>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006816:	4b06      	ldr	r3, [pc, #24]	; (8006830 <prvSwitchTimerLists+0xc8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a04      	ldr	r2, [pc, #16]	; (800682c <prvSwitchTimerLists+0xc4>)
 800681c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800681e:	4a04      	ldr	r2, [pc, #16]	; (8006830 <prvSwitchTimerLists+0xc8>)
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	6013      	str	r3, [r2, #0]
}
 8006824:	bf00      	nop
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	20001468 	.word	0x20001468
 8006830:	2000146c 	.word	0x2000146c

08006834 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800683a:	f000 f947 	bl	8006acc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800683e:	4b15      	ldr	r3, [pc, #84]	; (8006894 <prvCheckForValidListAndQueue+0x60>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d120      	bne.n	8006888 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006846:	4814      	ldr	r0, [pc, #80]	; (8006898 <prvCheckForValidListAndQueue+0x64>)
 8006848:	f7fd fff8 	bl	800483c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800684c:	4813      	ldr	r0, [pc, #76]	; (800689c <prvCheckForValidListAndQueue+0x68>)
 800684e:	f7fd fff5 	bl	800483c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006852:	4b13      	ldr	r3, [pc, #76]	; (80068a0 <prvCheckForValidListAndQueue+0x6c>)
 8006854:	4a10      	ldr	r2, [pc, #64]	; (8006898 <prvCheckForValidListAndQueue+0x64>)
 8006856:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006858:	4b12      	ldr	r3, [pc, #72]	; (80068a4 <prvCheckForValidListAndQueue+0x70>)
 800685a:	4a10      	ldr	r2, [pc, #64]	; (800689c <prvCheckForValidListAndQueue+0x68>)
 800685c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800685e:	2300      	movs	r3, #0
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <prvCheckForValidListAndQueue+0x74>)
 8006864:	4a11      	ldr	r2, [pc, #68]	; (80068ac <prvCheckForValidListAndQueue+0x78>)
 8006866:	2110      	movs	r1, #16
 8006868:	200a      	movs	r0, #10
 800686a:	f7fe f905 	bl	8004a78 <xQueueGenericCreateStatic>
 800686e:	4603      	mov	r3, r0
 8006870:	4a08      	ldr	r2, [pc, #32]	; (8006894 <prvCheckForValidListAndQueue+0x60>)
 8006872:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006874:	4b07      	ldr	r3, [pc, #28]	; (8006894 <prvCheckForValidListAndQueue+0x60>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <prvCheckForValidListAndQueue+0x60>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	490b      	ldr	r1, [pc, #44]	; (80068b0 <prvCheckForValidListAndQueue+0x7c>)
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fd3a 	bl	80052fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006888:	f000 f954 	bl	8006b34 <vPortExitCritical>
}
 800688c:	bf00      	nop
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20001470 	.word	0x20001470
 8006898:	20001440 	.word	0x20001440
 800689c:	20001454 	.word	0x20001454
 80068a0:	20001468 	.word	0x20001468
 80068a4:	2000146c 	.word	0x2000146c
 80068a8:	2000151c 	.word	0x2000151c
 80068ac:	2000147c 	.word	0x2000147c
 80068b0:	08007198 	.word	0x08007198

080068b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3b04      	subs	r3, #4
 80068c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3b04      	subs	r3, #4
 80068d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f023 0201 	bic.w	r2, r3, #1
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3b04      	subs	r3, #4
 80068e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068e4:	4a0c      	ldr	r2, [pc, #48]	; (8006918 <pxPortInitialiseStack+0x64>)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3b14      	subs	r3, #20
 80068ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3b04      	subs	r3, #4
 80068fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f06f 0202 	mvn.w	r2, #2
 8006902:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3b20      	subs	r3, #32
 8006908:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800690a:	68fb      	ldr	r3, [r7, #12]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	0800691d 	.word	0x0800691d

0800691c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006926:	4b14      	ldr	r3, [pc, #80]	; (8006978 <prvTaskExitError+0x5c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692e:	d00c      	beq.n	800694a <prvTaskExitError+0x2e>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	b672      	cpsid	i
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	b662      	cpsie	i
 8006944:	60fb      	str	r3, [r7, #12]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <prvTaskExitError+0x2c>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	b672      	cpsid	i
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	b662      	cpsie	i
 800695e:	60bb      	str	r3, [r7, #8]
}
 8006960:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006962:	bf00      	nop
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0fc      	beq.n	8006964 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800696a:	bf00      	nop
 800696c:	bf00      	nop
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	2000000c 	.word	0x2000000c
 800697c:	00000000 	.word	0x00000000

08006980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006980:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <pxCurrentTCBConst2>)
 8006982:	6819      	ldr	r1, [r3, #0]
 8006984:	6808      	ldr	r0, [r1, #0]
 8006986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698a:	f380 8809 	msr	PSP, r0
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f04f 0000 	mov.w	r0, #0
 8006996:	f380 8811 	msr	BASEPRI, r0
 800699a:	4770      	bx	lr
 800699c:	f3af 8000 	nop.w

080069a0 <pxCurrentTCBConst2>:
 80069a0:	20000f40 	.word	0x20000f40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop

080069a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069a8:	4808      	ldr	r0, [pc, #32]	; (80069cc <prvPortStartFirstTask+0x24>)
 80069aa:	6800      	ldr	r0, [r0, #0]
 80069ac:	6800      	ldr	r0, [r0, #0]
 80069ae:	f380 8808 	msr	MSP, r0
 80069b2:	f04f 0000 	mov.w	r0, #0
 80069b6:	f380 8814 	msr	CONTROL, r0
 80069ba:	b662      	cpsie	i
 80069bc:	b661      	cpsie	f
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	df00      	svc	0
 80069c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069ca:	bf00      	nop
 80069cc:	e000ed08 	.word	0xe000ed08

080069d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069d6:	4b37      	ldr	r3, [pc, #220]	; (8006ab4 <xPortStartScheduler+0xe4>)
 80069d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	22ff      	movs	r2, #255	; 0xff
 80069e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	4b2f      	ldr	r3, [pc, #188]	; (8006ab8 <xPortStartScheduler+0xe8>)
 80069fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069fe:	4b2f      	ldr	r3, [pc, #188]	; (8006abc <xPortStartScheduler+0xec>)
 8006a00:	2207      	movs	r2, #7
 8006a02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a04:	e009      	b.n	8006a1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006a06:	4b2d      	ldr	r3, [pc, #180]	; (8006abc <xPortStartScheduler+0xec>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	4a2b      	ldr	r2, [pc, #172]	; (8006abc <xPortStartScheduler+0xec>)
 8006a0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a22:	2b80      	cmp	r3, #128	; 0x80
 8006a24:	d0ef      	beq.n	8006a06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a26:	4b25      	ldr	r3, [pc, #148]	; (8006abc <xPortStartScheduler+0xec>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f1c3 0307 	rsb	r3, r3, #7
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d00c      	beq.n	8006a4c <xPortStartScheduler+0x7c>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	b672      	cpsid	i
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	b662      	cpsie	i
 8006a46:	60bb      	str	r3, [r7, #8]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a4c:	4b1b      	ldr	r3, [pc, #108]	; (8006abc <xPortStartScheduler+0xec>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	021b      	lsls	r3, r3, #8
 8006a52:	4a1a      	ldr	r2, [pc, #104]	; (8006abc <xPortStartScheduler+0xec>)
 8006a54:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a56:	4b19      	ldr	r3, [pc, #100]	; (8006abc <xPortStartScheduler+0xec>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a5e:	4a17      	ldr	r2, [pc, #92]	; (8006abc <xPortStartScheduler+0xec>)
 8006a60:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a6a:	4b15      	ldr	r3, [pc, #84]	; (8006ac0 <xPortStartScheduler+0xf0>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a14      	ldr	r2, [pc, #80]	; (8006ac0 <xPortStartScheduler+0xf0>)
 8006a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a76:	4b12      	ldr	r3, [pc, #72]	; (8006ac0 <xPortStartScheduler+0xf0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a11      	ldr	r2, [pc, #68]	; (8006ac0 <xPortStartScheduler+0xf0>)
 8006a7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a80:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a82:	f000 f8dd 	bl	8006c40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a86:	4b0f      	ldr	r3, [pc, #60]	; (8006ac4 <xPortStartScheduler+0xf4>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a8c:	f000 f8fc 	bl	8006c88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a90:	4b0d      	ldr	r3, [pc, #52]	; (8006ac8 <xPortStartScheduler+0xf8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a0c      	ldr	r2, [pc, #48]	; (8006ac8 <xPortStartScheduler+0xf8>)
 8006a96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a9a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a9c:	f7ff ff84 	bl	80069a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006aa0:	f7ff f84e 	bl	8005b40 <vTaskSwitchContext>
	prvTaskExitError();
 8006aa4:	f7ff ff3a 	bl	800691c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	e000e400 	.word	0xe000e400
 8006ab8:	2000156c 	.word	0x2000156c
 8006abc:	20001570 	.word	0x20001570
 8006ac0:	e000ed20 	.word	0xe000ed20
 8006ac4:	2000000c 	.word	0x2000000c
 8006ac8:	e000ef34 	.word	0xe000ef34

08006acc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	b672      	cpsid	i
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	b662      	cpsie	i
 8006ae6:	607b      	str	r3, [r7, #4]
}
 8006ae8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006aea:	4b10      	ldr	r3, [pc, #64]	; (8006b2c <vPortEnterCritical+0x60>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3301      	adds	r3, #1
 8006af0:	4a0e      	ldr	r2, [pc, #56]	; (8006b2c <vPortEnterCritical+0x60>)
 8006af2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006af4:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <vPortEnterCritical+0x60>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d111      	bne.n	8006b20 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006afc:	4b0c      	ldr	r3, [pc, #48]	; (8006b30 <vPortEnterCritical+0x64>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00c      	beq.n	8006b20 <vPortEnterCritical+0x54>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0a:	b672      	cpsid	i
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	b662      	cpsie	i
 8006b1a:	603b      	str	r3, [r7, #0]
}
 8006b1c:	bf00      	nop
 8006b1e:	e7fe      	b.n	8006b1e <vPortEnterCritical+0x52>
	}
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	2000000c 	.word	0x2000000c
 8006b30:	e000ed04 	.word	0xe000ed04

08006b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b3a:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <vPortExitCritical+0x54>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10c      	bne.n	8006b5c <vPortExitCritical+0x28>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	b672      	cpsid	i
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	b662      	cpsie	i
 8006b56:	607b      	str	r3, [r7, #4]
}
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006b5c:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <vPortExitCritical+0x54>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	4a09      	ldr	r2, [pc, #36]	; (8006b88 <vPortExitCritical+0x54>)
 8006b64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b66:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <vPortExitCritical+0x54>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d105      	bne.n	8006b7a <vPortExitCritical+0x46>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	f383 8811 	msr	BASEPRI, r3
}
 8006b78:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	2000000c 	.word	0x2000000c
 8006b8c:	00000000 	.word	0x00000000

08006b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b90:	f3ef 8009 	mrs	r0, PSP
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	4b15      	ldr	r3, [pc, #84]	; (8006bf0 <pxCurrentTCBConst>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	f01e 0f10 	tst.w	lr, #16
 8006ba0:	bf08      	it	eq
 8006ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006baa:	6010      	str	r0, [r2, #0]
 8006bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006bb4:	b672      	cpsid	i
 8006bb6:	f380 8811 	msr	BASEPRI, r0
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	b662      	cpsie	i
 8006bc4:	f7fe ffbc 	bl	8005b40 <vTaskSwitchContext>
 8006bc8:	f04f 0000 	mov.w	r0, #0
 8006bcc:	f380 8811 	msr	BASEPRI, r0
 8006bd0:	bc09      	pop	{r0, r3}
 8006bd2:	6819      	ldr	r1, [r3, #0]
 8006bd4:	6808      	ldr	r0, [r1, #0]
 8006bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	f01e 0f10 	tst.w	lr, #16
 8006bde:	bf08      	it	eq
 8006be0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006be4:	f380 8809 	msr	PSP, r0
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop

08006bf0 <pxCurrentTCBConst>:
 8006bf0:	20000f40 	.word	0x20000f40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop

08006bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	b672      	cpsid	i
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	b662      	cpsie	i
 8006c12:	607b      	str	r3, [r7, #4]
}
 8006c14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c16:	f7fe fed7 	bl	80059c8 <xTaskIncrementTick>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c20:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <SysTick_Handler+0x44>)
 8006c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	f383 8811 	msr	BASEPRI, r3
}
 8006c32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c34:	bf00      	nop
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c44:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <vPortSetupTimerInterrupt+0x34>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c4a:	4b0b      	ldr	r3, [pc, #44]	; (8006c78 <vPortSetupTimerInterrupt+0x38>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c50:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <vPortSetupTimerInterrupt+0x3c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a0a      	ldr	r2, [pc, #40]	; (8006c80 <vPortSetupTimerInterrupt+0x40>)
 8006c56:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5a:	099b      	lsrs	r3, r3, #6
 8006c5c:	4a09      	ldr	r2, [pc, #36]	; (8006c84 <vPortSetupTimerInterrupt+0x44>)
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c62:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <vPortSetupTimerInterrupt+0x34>)
 8006c64:	2207      	movs	r2, #7
 8006c66:	601a      	str	r2, [r3, #0]
}
 8006c68:	bf00      	nop
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	e000e010 	.word	0xe000e010
 8006c78:	e000e018 	.word	0xe000e018
 8006c7c:	20000000 	.word	0x20000000
 8006c80:	10624dd3 	.word	0x10624dd3
 8006c84:	e000e014 	.word	0xe000e014

08006c88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c98 <vPortEnableVFP+0x10>
 8006c8c:	6801      	ldr	r1, [r0, #0]
 8006c8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c92:	6001      	str	r1, [r0, #0]
 8006c94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c96:	bf00      	nop
 8006c98:	e000ed88 	.word	0xe000ed88

08006c9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ca2:	f3ef 8305 	mrs	r3, IPSR
 8006ca6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b0f      	cmp	r3, #15
 8006cac:	d916      	bls.n	8006cdc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cae:	4a19      	ldr	r2, [pc, #100]	; (8006d14 <vPortValidateInterruptPriority+0x78>)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006cb8:	4b17      	ldr	r3, [pc, #92]	; (8006d18 <vPortValidateInterruptPriority+0x7c>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	7afa      	ldrb	r2, [r7, #11]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d20c      	bcs.n	8006cdc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	b672      	cpsid	i
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	b662      	cpsie	i
 8006cd6:	607b      	str	r3, [r7, #4]
}
 8006cd8:	bf00      	nop
 8006cda:	e7fe      	b.n	8006cda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006cdc:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <vPortValidateInterruptPriority+0x80>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <vPortValidateInterruptPriority+0x84>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d90c      	bls.n	8006d06 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	b672      	cpsid	i
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	b662      	cpsie	i
 8006d00:	603b      	str	r3, [r7, #0]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <vPortValidateInterruptPriority+0x68>
	}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	e000e3f0 	.word	0xe000e3f0
 8006d18:	2000156c 	.word	0x2000156c
 8006d1c:	e000ed0c 	.word	0xe000ed0c
 8006d20:	20001570 	.word	0x20001570

08006d24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08a      	sub	sp, #40	; 0x28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d30:	f7fe fd8c 	bl	800584c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d34:	4b5b      	ldr	r3, [pc, #364]	; (8006ea4 <pvPortMalloc+0x180>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d3c:	f000 f91a 	bl	8006f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d40:	4b59      	ldr	r3, [pc, #356]	; (8006ea8 <pvPortMalloc+0x184>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4013      	ands	r3, r2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f040 8092 	bne.w	8006e72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d01f      	beq.n	8006d94 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006d54:	2208      	movs	r2, #8
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4413      	add	r3, r2
 8006d5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d016      	beq.n	8006d94 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f023 0307 	bic.w	r3, r3, #7
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00c      	beq.n	8006d94 <pvPortMalloc+0x70>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	b672      	cpsid	i
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	b662      	cpsie	i
 8006d8e:	617b      	str	r3, [r7, #20]
}
 8006d90:	bf00      	nop
 8006d92:	e7fe      	b.n	8006d92 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d06b      	beq.n	8006e72 <pvPortMalloc+0x14e>
 8006d9a:	4b44      	ldr	r3, [pc, #272]	; (8006eac <pvPortMalloc+0x188>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d866      	bhi.n	8006e72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006da4:	4b42      	ldr	r3, [pc, #264]	; (8006eb0 <pvPortMalloc+0x18c>)
 8006da6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006da8:	4b41      	ldr	r3, [pc, #260]	; (8006eb0 <pvPortMalloc+0x18c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dae:	e004      	b.n	8006dba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d903      	bls.n	8006dcc <pvPortMalloc+0xa8>
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f1      	bne.n	8006db0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006dcc:	4b35      	ldr	r3, [pc, #212]	; (8006ea4 <pvPortMalloc+0x180>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d04d      	beq.n	8006e72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2208      	movs	r2, #8
 8006ddc:	4413      	add	r3, r2
 8006dde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	1ad2      	subs	r2, r2, r3
 8006df0:	2308      	movs	r3, #8
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d921      	bls.n	8006e3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	f003 0307 	and.w	r3, r3, #7
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00c      	beq.n	8006e24 <pvPortMalloc+0x100>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	b672      	cpsid	i
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	b662      	cpsie	i
 8006e1e:	613b      	str	r3, [r7, #16]
}
 8006e20:	bf00      	nop
 8006e22:	e7fe      	b.n	8006e22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	1ad2      	subs	r2, r2, r3
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e36:	69b8      	ldr	r0, [r7, #24]
 8006e38:	f000 f8fe 	bl	8007038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e3c:	4b1b      	ldr	r3, [pc, #108]	; (8006eac <pvPortMalloc+0x188>)
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	4a19      	ldr	r2, [pc, #100]	; (8006eac <pvPortMalloc+0x188>)
 8006e48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e4a:	4b18      	ldr	r3, [pc, #96]	; (8006eac <pvPortMalloc+0x188>)
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4b19      	ldr	r3, [pc, #100]	; (8006eb4 <pvPortMalloc+0x190>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d203      	bcs.n	8006e5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e56:	4b15      	ldr	r3, [pc, #84]	; (8006eac <pvPortMalloc+0x188>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a16      	ldr	r2, [pc, #88]	; (8006eb4 <pvPortMalloc+0x190>)
 8006e5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	4b11      	ldr	r3, [pc, #68]	; (8006ea8 <pvPortMalloc+0x184>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	2200      	movs	r2, #0
 8006e70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e72:	f7fe fcf9 	bl	8005868 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00c      	beq.n	8006e9a <pvPortMalloc+0x176>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	b672      	cpsid	i
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	b662      	cpsie	i
 8006e94:	60fb      	str	r3, [r7, #12]
}
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <pvPortMalloc+0x174>
	return pvReturn;
 8006e9a:	69fb      	ldr	r3, [r7, #28]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3728      	adds	r7, #40	; 0x28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	2000517c 	.word	0x2000517c
 8006ea8:	20005188 	.word	0x20005188
 8006eac:	20005180 	.word	0x20005180
 8006eb0:	20005174 	.word	0x20005174
 8006eb4:	20005184 	.word	0x20005184

08006eb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d04c      	beq.n	8006f64 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006eca:	2308      	movs	r3, #8
 8006ecc:	425b      	negs	r3, r3
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	4b23      	ldr	r3, [pc, #140]	; (8006f6c <vPortFree+0xb4>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10c      	bne.n	8006f00 <vPortFree+0x48>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	b672      	cpsid	i
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	b662      	cpsie	i
 8006efa:	60fb      	str	r3, [r7, #12]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00c      	beq.n	8006f22 <vPortFree+0x6a>
	__asm volatile
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	b672      	cpsid	i
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	b662      	cpsie	i
 8006f1c:	60bb      	str	r3, [r7, #8]
}
 8006f1e:	bf00      	nop
 8006f20:	e7fe      	b.n	8006f20 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	4b11      	ldr	r3, [pc, #68]	; (8006f6c <vPortFree+0xb4>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d019      	beq.n	8006f64 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d115      	bne.n	8006f64 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	4b0b      	ldr	r3, [pc, #44]	; (8006f6c <vPortFree+0xb4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	43db      	mvns	r3, r3
 8006f42:	401a      	ands	r2, r3
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f48:	f7fe fc80 	bl	800584c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <vPortFree+0xb8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4413      	add	r3, r2
 8006f56:	4a06      	ldr	r2, [pc, #24]	; (8006f70 <vPortFree+0xb8>)
 8006f58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f5a:	6938      	ldr	r0, [r7, #16]
 8006f5c:	f000 f86c 	bl	8007038 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006f60:	f7fe fc82 	bl	8005868 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f64:	bf00      	nop
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	20005188 	.word	0x20005188
 8006f70:	20005180 	.word	0x20005180

08006f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f80:	4b27      	ldr	r3, [pc, #156]	; (8007020 <prvHeapInit+0xac>)
 8006f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00c      	beq.n	8006fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3307      	adds	r3, #7
 8006f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0307 	bic.w	r3, r3, #7
 8006f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	4a1f      	ldr	r2, [pc, #124]	; (8007020 <prvHeapInit+0xac>)
 8006fa4:	4413      	add	r3, r2
 8006fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fac:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <prvHeapInit+0xb0>)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fb2:	4b1c      	ldr	r3, [pc, #112]	; (8007024 <prvHeapInit+0xb0>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	1a9b      	subs	r3, r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f023 0307 	bic.w	r3, r3, #7
 8006fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4a15      	ldr	r2, [pc, #84]	; (8007028 <prvHeapInit+0xb4>)
 8006fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fd6:	4b14      	ldr	r3, [pc, #80]	; (8007028 <prvHeapInit+0xb4>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fde:	4b12      	ldr	r3, [pc, #72]	; (8007028 <prvHeapInit+0xb4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	1ad2      	subs	r2, r2, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ff4:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <prvHeapInit+0xb4>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	4a0a      	ldr	r2, [pc, #40]	; (800702c <prvHeapInit+0xb8>)
 8007002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	4a09      	ldr	r2, [pc, #36]	; (8007030 <prvHeapInit+0xbc>)
 800700a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800700c:	4b09      	ldr	r3, [pc, #36]	; (8007034 <prvHeapInit+0xc0>)
 800700e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007012:	601a      	str	r2, [r3, #0]
}
 8007014:	bf00      	nop
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	20001574 	.word	0x20001574
 8007024:	20005174 	.word	0x20005174
 8007028:	2000517c 	.word	0x2000517c
 800702c:	20005184 	.word	0x20005184
 8007030:	20005180 	.word	0x20005180
 8007034:	20005188 	.word	0x20005188

08007038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007040:	4b28      	ldr	r3, [pc, #160]	; (80070e4 <prvInsertBlockIntoFreeList+0xac>)
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	e002      	b.n	800704c <prvInsertBlockIntoFreeList+0x14>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	429a      	cmp	r2, r3
 8007054:	d8f7      	bhi.n	8007046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	4413      	add	r3, r2
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	429a      	cmp	r2, r3
 8007066:	d108      	bne.n	800707a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	441a      	add	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d118      	bne.n	80070c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d00d      	beq.n	80070b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	441a      	add	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	e008      	b.n	80070c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070b6:	4b0c      	ldr	r3, [pc, #48]	; (80070e8 <prvInsertBlockIntoFreeList+0xb0>)
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e003      	b.n	80070c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d002      	beq.n	80070d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070d6:	bf00      	nop
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	20005174 	.word	0x20005174
 80070e8:	2000517c 	.word	0x2000517c

080070ec <__libc_init_array>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	4d0d      	ldr	r5, [pc, #52]	; (8007124 <__libc_init_array+0x38>)
 80070f0:	4c0d      	ldr	r4, [pc, #52]	; (8007128 <__libc_init_array+0x3c>)
 80070f2:	1b64      	subs	r4, r4, r5
 80070f4:	10a4      	asrs	r4, r4, #2
 80070f6:	2600      	movs	r6, #0
 80070f8:	42a6      	cmp	r6, r4
 80070fa:	d109      	bne.n	8007110 <__libc_init_array+0x24>
 80070fc:	4d0b      	ldr	r5, [pc, #44]	; (800712c <__libc_init_array+0x40>)
 80070fe:	4c0c      	ldr	r4, [pc, #48]	; (8007130 <__libc_init_array+0x44>)
 8007100:	f000 f82e 	bl	8007160 <_init>
 8007104:	1b64      	subs	r4, r4, r5
 8007106:	10a4      	asrs	r4, r4, #2
 8007108:	2600      	movs	r6, #0
 800710a:	42a6      	cmp	r6, r4
 800710c:	d105      	bne.n	800711a <__libc_init_array+0x2e>
 800710e:	bd70      	pop	{r4, r5, r6, pc}
 8007110:	f855 3b04 	ldr.w	r3, [r5], #4
 8007114:	4798      	blx	r3
 8007116:	3601      	adds	r6, #1
 8007118:	e7ee      	b.n	80070f8 <__libc_init_array+0xc>
 800711a:	f855 3b04 	ldr.w	r3, [r5], #4
 800711e:	4798      	blx	r3
 8007120:	3601      	adds	r6, #1
 8007122:	e7f2      	b.n	800710a <__libc_init_array+0x1e>
 8007124:	08007208 	.word	0x08007208
 8007128:	08007208 	.word	0x08007208
 800712c:	08007208 	.word	0x08007208
 8007130:	0800720c 	.word	0x0800720c

08007134 <memcpy>:
 8007134:	440a      	add	r2, r1
 8007136:	4291      	cmp	r1, r2
 8007138:	f100 33ff 	add.w	r3, r0, #4294967295
 800713c:	d100      	bne.n	8007140 <memcpy+0xc>
 800713e:	4770      	bx	lr
 8007140:	b510      	push	{r4, lr}
 8007142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007146:	f803 4f01 	strb.w	r4, [r3, #1]!
 800714a:	4291      	cmp	r1, r2
 800714c:	d1f9      	bne.n	8007142 <memcpy+0xe>
 800714e:	bd10      	pop	{r4, pc}

08007150 <memset>:
 8007150:	4402      	add	r2, r0
 8007152:	4603      	mov	r3, r0
 8007154:	4293      	cmp	r3, r2
 8007156:	d100      	bne.n	800715a <memset+0xa>
 8007158:	4770      	bx	lr
 800715a:	f803 1b01 	strb.w	r1, [r3], #1
 800715e:	e7f9      	b.n	8007154 <memset+0x4>

08007160 <_init>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	bf00      	nop
 8007164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007166:	bc08      	pop	{r3}
 8007168:	469e      	mov	lr, r3
 800716a:	4770      	bx	lr

0800716c <_fini>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	bf00      	nop
 8007170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007172:	bc08      	pop	{r3}
 8007174:	469e      	mov	lr, r3
 8007176:	4770      	bx	lr
