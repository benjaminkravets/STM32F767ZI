
can_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b24  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dd8  08009dd8  0002029c  2**0
                  CONTENTS
  4 .ARM          00000008  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009de0  08009de0  0002029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de0  08009de0  00019de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009de4  08009de4  00019de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08009de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000015c  08009f44  0002015c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200001fc  08009fe4  000201fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001cf4  2000029c  0800a084  0002029c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20001f90  0800a084  00021f90  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000202ca  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001947c  00000000  00000000  0002030d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003aa7  00000000  00000000  00039789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001298  00000000  00000000  0003d230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000e1f  00000000  00000000  0003e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b81c  00000000  00000000  0003f2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000184f0  00000000  00000000  0006ab03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fe9a2  00000000  00000000  00082ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000051cc  00000000  00000000  00181998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  00186b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000029c 	.word	0x2000029c
 800021c:	00000000 	.word	0x00000000
 8000220:	08009d0c 	.word	0x08009d0c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002a0 	.word	0x200002a0
 800023c:	08009d0c 	.word	0x08009d0c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08e      	sub	sp, #56	; 0x38
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fc42 	bl	8000e7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f841 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f965 	bl	80008c8 <MX_GPIO_Init>
  MX_ETH_Init();
 80005fe:	f000 f8e5 	bl	80007cc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f931 	bl	8000868 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000606:	f008 f937 	bl	8008878 <MX_USB_DEVICE_Init>
  MX_CAN1_Init();
 800060a:	f000 f8a9 	bl	8000760 <MX_CAN1_Init>
  //MX_CAN1_Init();
  /* USER CODE BEGIN 2 */

  uint8_t *data = "Trans fail\n";
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <main+0x84>)
 8000610:	637b      	str	r3, [r7, #52]	; 0x34

  uint8_t               TxData[8];

  uint32_t              TxMailbox;

  TxHeader.IDE = CAN_ID_STD;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  TxHeader.StdId = 0x446;
 8000616:	f240 4346 	movw	r3, #1094	; 0x446
 800061a:	61bb      	str	r3, [r7, #24]
  TxHeader.RTR = CAN_RTR_DATA;
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  TxHeader.DLC = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28

  TxData[0] = 50;
 8000624:	2332      	movs	r3, #50	; 0x32
 8000626:	743b      	strb	r3, [r7, #16]
  TxData[1] = 0xAA;
 8000628:	23aa      	movs	r3, #170	; 0xaa
 800062a:	747b      	strb	r3, [r7, #17]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	f107 0210 	add.w	r2, r7, #16
 8000634:	f107 0118 	add.w	r1, r7, #24
 8000638:	480e      	ldr	r0, [pc, #56]	; (8000674 <main+0x88>)
 800063a:	f000 fd9a 	bl	8001172 <HAL_CAN_AddTxMessage>
 800063e:	4603      	mov	r3, r0
 8000640:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	  char str[10];
	  sprintf(str, "%d", ret);
 8000644:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000648:	463b      	mov	r3, r7
 800064a:	490b      	ldr	r1, [pc, #44]	; (8000678 <main+0x8c>)
 800064c:	4618      	mov	r0, r3
 800064e:	f008 ff65 	bl	800951c <siprintf>

	  CDC_Transmit_FS(str, strlen(str));
 8000652:	463b      	mov	r3, r7
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fdf3 	bl	8000240 <strlen>
 800065a:	4602      	mov	r2, r0
 800065c:	463b      	mov	r3, r7
 800065e:	4611      	mov	r1, r2
 8000660:	4618      	mov	r0, r3
 8000662:	f008 f9c7 	bl	80089f4 <CDC_Transmit_FS>
	  HAL_Delay(10);
 8000666:	200a      	movs	r0, #10
 8000668:	f000 fc64 	bl	8000f34 <HAL_Delay>
  {
 800066c:	e7de      	b.n	800062c <main+0x40>
 800066e:	bf00      	nop
 8000670:	08009d24 	.word	0x08009d24
 8000674:	200002f0 	.word	0x200002f0
 8000678:	08009d30 	.word	0x08009d30

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	2234      	movs	r2, #52	; 0x34
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f008 ff66 	bl	800955c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a0:	f002 feee 	bl	8003480 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <SystemClock_Config+0xdc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a2b      	ldr	r2, [pc, #172]	; (8000758 <SystemClock_Config+0xdc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemClock_Config+0xdc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006bc:	4b27      	ldr	r3, [pc, #156]	; (800075c <SystemClock_Config+0xe0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a25      	ldr	r2, [pc, #148]	; (800075c <SystemClock_Config+0xe0>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <SystemClock_Config+0xe0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006f0:	2360      	movs	r3, #96	; 0x60
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4618      	mov	r0, r3
 8000706:	f002 ff1b 	bl	8003540 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000710:	f000 f97c 	bl	8000a0c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000714:	f002 fec4 	bl	80034a0 <HAL_PWREx_EnableOverDrive>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800071e:	f000 f975 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2302      	movs	r3, #2
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2103      	movs	r1, #3
 800073e:	4618      	mov	r0, r3
 8000740:	f003 f9ac 	bl	8003a9c <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800074a:	f000 f95f 	bl	8000a0c <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_CAN1_Init+0x64>)
 8000766:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <MX_CAN1_Init+0x68>)
 8000768:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_CAN1_Init+0x64>)
 800076c:	2210      	movs	r2, #16
 800076e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_CAN1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_CAN1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_CAN1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_CAN1_Init+0x64>)
 8000784:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000788:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_CAN1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_CAN1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_CAN1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_CAN1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_CAN1_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_CAN1_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_CAN1_Init+0x64>)
 80007b0:	f000 fbe4 	bl	8000f7c <HAL_CAN_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80007ba:	f000 f927 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200002f0 	.word	0x200002f0
 80007c8:	40006400 	.word	0x40006400

080007cc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_ETH_Init+0x84>)
 80007d2:	4a20      	ldr	r2, [pc, #128]	; (8000854 <MX_ETH_Init+0x88>)
 80007d4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <MX_ETH_Init+0x8c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_ETH_Init+0x8c>)
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_ETH_Init+0x8c>)
 80007e4:	22e1      	movs	r2, #225	; 0xe1
 80007e6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_ETH_Init+0x8c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_ETH_Init+0x8c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_ETH_Init+0x8c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_ETH_Init+0x84>)
 80007fc:	4a16      	ldr	r2, [pc, #88]	; (8000858 <MX_ETH_Init+0x8c>)
 80007fe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_ETH_Init+0x84>)
 8000802:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000806:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_ETH_Init+0x84>)
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <MX_ETH_Init+0x90>)
 800080c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_ETH_Init+0x84>)
 8000810:	4a13      	ldr	r2, [pc, #76]	; (8000860 <MX_ETH_Init+0x94>)
 8000812:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_ETH_Init+0x84>)
 8000816:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800081a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_ETH_Init+0x84>)
 800081e:	f000 fe8b 	bl	8001538 <HAL_ETH_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000828:	f000 f8f0 	bl	8000a0c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800082c:	2238      	movs	r2, #56	; 0x38
 800082e:	2100      	movs	r1, #0
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <MX_ETH_Init+0x98>)
 8000832:	f008 fe93 	bl	800955c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_ETH_Init+0x98>)
 8000838:	2221      	movs	r2, #33	; 0x21
 800083a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_ETH_Init+0x98>)
 800083e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000842:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_ETH_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000318 	.word	0x20000318
 8000854:	40028000 	.word	0x40028000
 8000858:	20000450 	.word	0x20000450
 800085c:	200001fc 	.word	0x200001fc
 8000860:	2000015c 	.word	0x2000015c
 8000864:	200002b8 	.word	0x200002b8

08000868 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MX_USART3_UART_Init+0x5c>)
 8000870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 80008ac:	f003 ff44 	bl	8004738 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 f8a9 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200003c8 	.word	0x200003c8
 80008c4:	40004800 	.word	0x40004800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	; 0x30
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b47      	ldr	r3, [pc, #284]	; (80009fc <MX_GPIO_Init+0x134>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a46      	ldr	r2, [pc, #280]	; (80009fc <MX_GPIO_Init+0x134>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b44      	ldr	r3, [pc, #272]	; (80009fc <MX_GPIO_Init+0x134>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	4b41      	ldr	r3, [pc, #260]	; (80009fc <MX_GPIO_Init+0x134>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a40      	ldr	r2, [pc, #256]	; (80009fc <MX_GPIO_Init+0x134>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b3e      	ldr	r3, [pc, #248]	; (80009fc <MX_GPIO_Init+0x134>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a3a      	ldr	r2, [pc, #232]	; (80009fc <MX_GPIO_Init+0x134>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b38      	ldr	r3, [pc, #224]	; (80009fc <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b35      	ldr	r3, [pc, #212]	; (80009fc <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a34      	ldr	r2, [pc, #208]	; (80009fc <MX_GPIO_Init+0x134>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b32      	ldr	r3, [pc, #200]	; (80009fc <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a2e      	ldr	r2, [pc, #184]	; (80009fc <MX_GPIO_Init+0x134>)
 8000944:	f043 0308 	orr.w	r3, r3, #8
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <MX_GPIO_Init+0x134>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0308 	and.w	r3, r3, #8
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000956:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_GPIO_Init+0x134>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a28      	ldr	r2, [pc, #160]	; (80009fc <MX_GPIO_Init+0x134>)
 800095c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_GPIO_Init+0x134>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f244 0181 	movw	r1, #16513	; 0x4081
 8000974:	4822      	ldr	r0, [pc, #136]	; (8000a00 <MX_GPIO_Init+0x138>)
 8000976:	f001 fab1 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2140      	movs	r1, #64	; 0x40
 800097e:	4821      	ldr	r0, [pc, #132]	; (8000a04 <MX_GPIO_Init+0x13c>)
 8000980:	f001 faac 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	481b      	ldr	r0, [pc, #108]	; (8000a08 <MX_GPIO_Init+0x140>)
 800099c:	f001 f8f2 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009a0:	f244 0381 	movw	r3, #16513	; 0x4081
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4811      	ldr	r0, [pc, #68]	; (8000a00 <MX_GPIO_Init+0x138>)
 80009ba:	f001 f8e3 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009be:	2340      	movs	r3, #64	; 0x40
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <MX_GPIO_Init+0x13c>)
 80009d6:	f001 f8d5 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_GPIO_Init+0x13c>)
 80009ee:	f001 f8c9 	bl	8001b84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f2:	bf00      	nop
 80009f4:	3730      	adds	r7, #48	; 0x30
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020400 	.word	0x40020400
 8000a04:	40021800 	.word	0x40021800
 8000a08:	40020800 	.word	0x40020800

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a12:	b672      	cpsid	i
}
 8000a14:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  uint8_t *data = "ERROR HANDLER\n";
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <Error_Handler+0x20>)
 8000a18:	607b      	str	r3, [r7, #4]
  while (1)
  {
	CDC_Transmit_FS(data, strlen(data));
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff fc10 	bl	8000240 <strlen>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4619      	mov	r1, r3
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f007 ffe5 	bl	80089f4 <CDC_Transmit_FS>
  {
 8000a2a:	e7f6      	b.n	8000a1a <Error_Handler+0xe>
 8000a2c:	08009d34 	.word	0x08009d34

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <HAL_MspInit+0x44>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <HAL_MspInit+0x44>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_MspInit+0x44>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_MspInit+0x44>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_MspInit+0x44>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_MspInit+0x44>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_CAN_MspInit+0x7c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d127      	bne.n	8000aea <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <HAL_CAN_MspInit+0x80>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <HAL_CAN_MspInit+0x80>)
 8000aa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_CAN_MspInit+0x80>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_CAN_MspInit+0x80>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <HAL_CAN_MspInit+0x80>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_CAN_MspInit+0x80>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aca:	2303      	movs	r3, #3
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ada:	2309      	movs	r3, #9
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <HAL_CAN_MspInit+0x84>)
 8000ae6:	f001 f84d 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40006400 	.word	0x40006400
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020c00 	.word	0x40020c00

08000b00 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	; 0x38
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a4e      	ldr	r2, [pc, #312]	; (8000c58 <HAL_ETH_MspInit+0x158>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	f040 8096 	bne.w	8000c50 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b24:	4b4d      	ldr	r3, [pc, #308]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	4a4c      	ldr	r2, [pc, #304]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b30:	4b4a      	ldr	r3, [pc, #296]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b38:	623b      	str	r3, [r7, #32]
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
 8000b3c:	4b47      	ldr	r3, [pc, #284]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	4a46      	ldr	r2, [pc, #280]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b46:	6313      	str	r3, [r2, #48]	; 0x30
 8000b48:	4b44      	ldr	r3, [pc, #272]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b50:	61fb      	str	r3, [r7, #28]
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	4b41      	ldr	r3, [pc, #260]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a40      	ldr	r2, [pc, #256]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b3e      	ldr	r3, [pc, #248]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6c:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a3a      	ldr	r2, [pc, #232]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b38      	ldr	r3, [pc, #224]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b35      	ldr	r3, [pc, #212]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a34      	ldr	r2, [pc, #208]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9c:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a2e      	ldr	r2, [pc, #184]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	4a28      	ldr	r2, [pc, #160]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <HAL_ETH_MspInit+0x15c>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bcc:	2332      	movs	r3, #50	; 0x32
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bdc:	230b      	movs	r3, #11
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	481e      	ldr	r0, [pc, #120]	; (8000c60 <HAL_ETH_MspInit+0x160>)
 8000be8:	f000 ffcc 	bl	8001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bec:	2386      	movs	r3, #134	; 0x86
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfc:	230b      	movs	r3, #11
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	4817      	ldr	r0, [pc, #92]	; (8000c64 <HAL_ETH_MspInit+0x164>)
 8000c08:	f000 ffbc 	bl	8001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1e:	230b      	movs	r3, #11
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	480f      	ldr	r0, [pc, #60]	; (8000c68 <HAL_ETH_MspInit+0x168>)
 8000c2a:	f000 ffab 	bl	8001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c40:	230b      	movs	r3, #11
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4808      	ldr	r0, [pc, #32]	; (8000c6c <HAL_ETH_MspInit+0x16c>)
 8000c4c:	f000 ff9a 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3738      	adds	r7, #56	; 0x38
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40028000 	.word	0x40028000
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40020400 	.word	0x40020400
 8000c6c:	40021800 	.word	0x40021800

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0ae      	sub	sp, #184	; 0xb8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2290      	movs	r2, #144	; 0x90
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f008 fc63 	bl	800955c <memset>
  if(huart->Instance==USART3)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <HAL_UART_MspInit+0xb4>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d13c      	bne.n	8000d1a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 f91a 	bl	8003ee8 <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cba:	f7ff fea7 	bl	8000a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <HAL_UART_MspInit+0xb8>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_UART_MspInit+0xb8>)
 8000cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_UART_MspInit+0xb8>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_UART_MspInit+0xb8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <HAL_UART_MspInit+0xb8>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_UART_MspInit+0xb8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <HAL_UART_MspInit+0xbc>)
 8000d16:	f000 ff35 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	37b8      	adds	r7, #184	; 0xb8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40004800 	.word	0x40004800
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020c00 	.word	0x40020c00

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f8ba 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <OTG_FS_IRQHandler+0x10>)
 8000d8a:	f001 fa06 	bl	800219a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20001940 	.word	0x20001940

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f008 fbe0 	bl	800958c <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20080000 	.word	0x20080000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	20000458 	.word	0x20000458
 8000e00:	20001f90 	.word	0x20001f90

08000e04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e2c:	480d      	ldr	r0, [pc, #52]	; (8000e64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2e:	490e      	ldr	r1, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e30:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e44:	4c0b      	ldr	r4, [pc, #44]	; (8000e74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e52:	f7ff ffd7 	bl	8000e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e56:	f008 fb9f 	bl	8009598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fbc7 	bl	80005ec <main>
  bx  lr    
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000e6c:	08009de8 	.word	0x08009de8
  ldr r2, =_sbss
 8000e70:	2000029c 	.word	0x2000029c
  ldr r4, =_ebss
 8000e74:	20001f90 	.word	0x20001f90

08000e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC_IRQHandler>

08000e7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f000 fb18 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 f805 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8a:	f7ff fdd1 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fb33 	bl	800151e <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 fafb 	bl	80014ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008
 8000f18:	2000045c 	.word	0x2000045c

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	2000045c 	.word	0x2000045c

08000f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff ffee 	bl	8000f1c <HAL_GetTick>
 8000f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4c:	d005      	beq.n	8000f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_Delay+0x44>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5a:	bf00      	nop
 8000f5c:	f7ff ffde 	bl	8000f1c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8f7      	bhi.n	8000f5c <HAL_Delay+0x28>
  {
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008

08000f7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e0ed      	b.n	800116a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d102      	bne.n	8000fa0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fd6c 	bl	8000a78 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 0201 	orr.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fb0:	f7ff ffb4 	bl	8000f1c <HAL_GetTick>
 8000fb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fb6:	e012      	b.n	8000fde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fb8:	f7ff ffb0 	bl	8000f1c <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b0a      	cmp	r3, #10
 8000fc4:	d90b      	bls.n	8000fde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2205      	movs	r2, #5
 8000fd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e0c5      	b.n	800116a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0e5      	beq.n	8000fb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 0202 	bic.w	r2, r2, #2
 8000ffa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ffc:	f7ff ff8e 	bl	8000f1c <HAL_GetTick>
 8001000:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001002:	e012      	b.n	800102a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001004:	f7ff ff8a 	bl	8000f1c <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b0a      	cmp	r3, #10
 8001010:	d90b      	bls.n	800102a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2205      	movs	r2, #5
 8001022:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e09f      	b.n	800116a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1e5      	bne.n	8001004 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7e1b      	ldrb	r3, [r3, #24]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d108      	bne.n	8001052 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	e007      	b.n	8001062 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7e5b      	ldrb	r3, [r3, #25]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d108      	bne.n	800107c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e007      	b.n	800108c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800108a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7e9b      	ldrb	r3, [r3, #26]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d108      	bne.n	80010a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0220 	orr.w	r2, r2, #32
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	e007      	b.n	80010b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0220 	bic.w	r2, r2, #32
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7edb      	ldrb	r3, [r3, #27]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d108      	bne.n	80010d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0210 	bic.w	r2, r2, #16
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e007      	b.n	80010e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0210 	orr.w	r2, r2, #16
 80010de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7f1b      	ldrb	r3, [r3, #28]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d108      	bne.n	80010fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0208 	orr.w	r2, r2, #8
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	e007      	b.n	800110a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0208 	bic.w	r2, r2, #8
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7f5b      	ldrb	r3, [r3, #29]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d108      	bne.n	8001124 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f042 0204 	orr.w	r2, r2, #4
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	e007      	b.n	8001134 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0204 	bic.w	r2, r2, #4
 8001132:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	431a      	orrs	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	ea42 0103 	orr.w	r1, r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	1e5a      	subs	r2, r3, #1
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001172:	b480      	push	{r7}
 8001174:	b089      	sub	sp, #36	; 0x24
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001186:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001190:	7ffb      	ldrb	r3, [r7, #31]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d003      	beq.n	800119e <HAL_CAN_AddTxMessage+0x2c>
 8001196:	7ffb      	ldrb	r3, [r7, #31]
 8001198:	2b02      	cmp	r3, #2
 800119a:	f040 80ad 	bne.w	80012f8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10a      	bne.n	80011be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d105      	bne.n	80011be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 8095 	beq.w	80012e8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	0e1b      	lsrs	r3, r3, #24
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011c8:	2201      	movs	r2, #1
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	409a      	lsls	r2, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10d      	bne.n	80011f6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011e4:	68f9      	ldr	r1, [r7, #12]
 80011e6:	6809      	ldr	r1, [r1, #0]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3318      	adds	r3, #24
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	440b      	add	r3, r1
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e00f      	b.n	8001216 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001200:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001206:	68f9      	ldr	r1, [r7, #12]
 8001208:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800120a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3318      	adds	r3, #24
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	440b      	add	r3, r1
 8001214:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6819      	ldr	r1, [r3, #0]
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3318      	adds	r3, #24
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	440b      	add	r3, r1
 8001226:	3304      	adds	r3, #4
 8001228:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	7d1b      	ldrb	r3, [r3, #20]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d111      	bne.n	8001256 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3318      	adds	r3, #24
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	4413      	add	r3, r2
 800123e:	3304      	adds	r3, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	6811      	ldr	r1, [r2, #0]
 8001246:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3318      	adds	r3, #24
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	440b      	add	r3, r1
 8001252:	3304      	adds	r3, #4
 8001254:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3307      	adds	r3, #7
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	061a      	lsls	r2, r3, #24
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3306      	adds	r3, #6
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	041b      	lsls	r3, r3, #16
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3305      	adds	r3, #5
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	4313      	orrs	r3, r2
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	3204      	adds	r2, #4
 8001276:	7812      	ldrb	r2, [r2, #0]
 8001278:	4610      	mov	r0, r2
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	6811      	ldr	r1, [r2, #0]
 800127e:	ea43 0200 	orr.w	r2, r3, r0
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	440b      	add	r3, r1
 8001288:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800128c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3303      	adds	r3, #3
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	061a      	lsls	r2, r3, #24
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3302      	adds	r3, #2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	041b      	lsls	r3, r3, #16
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3301      	adds	r3, #1
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	4313      	orrs	r3, r2
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	7812      	ldrb	r2, [r2, #0]
 80012ae:	4610      	mov	r0, r2
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	6811      	ldr	r1, [r2, #0]
 80012b4:	ea43 0200 	orr.w	r2, r3, r0
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	440b      	add	r3, r1
 80012be:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3318      	adds	r3, #24
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	4413      	add	r3, r2
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	6811      	ldr	r1, [r2, #0]
 80012d6:	f043 0201 	orr.w	r2, r3, #1
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3318      	adds	r3, #24
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	440b      	add	r3, r1
 80012e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	e00e      	b.n	8001306 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e006      	b.n	8001306 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
  }
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <__NVIC_SetPriorityGrouping+0x40>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	4313      	orrs	r3, r2
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <__NVIC_SetPriorityGrouping+0x40>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00
 8001358:	05fa0000 	.word	0x05fa0000

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001480:	d301      	bcc.n	8001486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001482:	2301      	movs	r3, #1
 8001484:	e00f      	b.n	80014a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <SysTick_Config+0x40>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148e:	210f      	movs	r1, #15
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f7ff ff8e 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <SysTick_Config+0x40>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SysTick_Config+0x40>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff29 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014dc:	f7ff ff3e 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	6978      	ldr	r0, [r7, #20]
 80014e8:	f7ff ff8e 	bl	8001408 <NVIC_EncodePriority>
 80014ec:	4602      	mov	r2, r0
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff5d 	bl	80013b4 <__NVIC_SetPriority>
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff31 	bl	8001378 <__NVIC_EnableIRQ>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffa2 	bl	8001470 <SysTick_Config>
 800152c:	4603      	mov	r3, r0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e06a      	b.n	8001620 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001550:	2b00      	cmp	r3, #0
 8001552:	d106      	bne.n	8001562 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2223      	movs	r2, #35	; 0x23
 8001558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff facf 	bl	8000b00 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	4b31      	ldr	r3, [pc, #196]	; (8001628 <HAL_ETH_Init+0xf0>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a30      	ldr	r2, [pc, #192]	; (8001628 <HAL_ETH_Init+0xf0>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <HAL_ETH_Init+0xf0>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800157a:	4b2c      	ldr	r3, [pc, #176]	; (800162c <HAL_ETH_Init+0xf4>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4a2b      	ldr	r2, [pc, #172]	; (800162c <HAL_ETH_Init+0xf4>)
 8001580:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001584:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <HAL_ETH_Init+0xf4>)
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	4927      	ldr	r1, [pc, #156]	; (800162c <HAL_ETH_Init+0xf4>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001594:	4b25      	ldr	r3, [pc, #148]	; (800162c <HAL_ETH_Init+0xf4>)
 8001596:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b0:	f7ff fcb4 	bl	8000f1c <HAL_GetTick>
 80015b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015b6:	e011      	b.n	80015dc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80015b8:	f7ff fcb0 	bl	8000f1c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015c6:	d909      	bls.n	80015dc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2204      	movs	r2, #4
 80015cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	22e0      	movs	r2, #224	; 0xe0
 80015d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e021      	b.n	8001620 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1e4      	bne.n	80015b8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f958 	bl	80018a4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f9ff 	bl	80019f8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 fa55 	bl	8001aaa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	461a      	mov	r2, r3
 8001606:	2100      	movs	r1, #0
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f9bd 	bl	8001988 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2210      	movs	r2, #16
 800161a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	40013800 	.word	0x40013800

08001630 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4b51      	ldr	r3, [pc, #324]	; (800178c <ETH_SetMACConfig+0x15c>)
 8001646:	4013      	ands	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	7c1b      	ldrb	r3, [r3, #16]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <ETH_SetMACConfig+0x28>
 8001652:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001656:	e000      	b.n	800165a <ETH_SetMACConfig+0x2a>
 8001658:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	7c5b      	ldrb	r3, [r3, #17]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <ETH_SetMACConfig+0x38>
 8001662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001666:	e000      	b.n	800166a <ETH_SetMACConfig+0x3a>
 8001668:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800166a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001670:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	7fdb      	ldrb	r3, [r3, #31]
 8001676:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001678:	431a      	orrs	r2, r3
                        macconf->Speed |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800167e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	7f92      	ldrb	r2, [r2, #30]
 8001684:	2a00      	cmp	r2, #0
 8001686:	d102      	bne.n	800168e <ETH_SetMACConfig+0x5e>
 8001688:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168c:	e000      	b.n	8001690 <ETH_SetMACConfig+0x60>
 800168e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001690:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	7f1b      	ldrb	r3, [r3, #28]
 8001696:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001698:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800169e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	791b      	ldrb	r3, [r3, #4]
 80016a4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80016a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	d102      	bne.n	80016b8 <ETH_SetMACConfig+0x88>
 80016b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b6:	e000      	b.n	80016ba <ETH_SetMACConfig+0x8a>
 80016b8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80016ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	7bdb      	ldrb	r3, [r3, #15]
 80016c0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80016c2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80016c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016d0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80016d2:	4313      	orrs	r3, r2
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f7ff fc22 	bl	8000f34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001706:	4013      	ands	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001716:	2a00      	cmp	r2, #0
 8001718:	d101      	bne.n	800171e <ETH_SetMACConfig+0xee>
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	e000      	b.n	8001720 <ETH_SetMACConfig+0xf0>
 800171e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001720:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001726:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800172e:	2a01      	cmp	r2, #1
 8001730:	d101      	bne.n	8001736 <ETH_SetMACConfig+0x106>
 8001732:	2208      	movs	r2, #8
 8001734:	e000      	b.n	8001738 <ETH_SetMACConfig+0x108>
 8001736:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001738:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001740:	2a01      	cmp	r2, #1
 8001742:	d101      	bne.n	8001748 <ETH_SetMACConfig+0x118>
 8001744:	2204      	movs	r2, #4
 8001746:	e000      	b.n	800174a <ETH_SetMACConfig+0x11a>
 8001748:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800174a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001752:	2a01      	cmp	r2, #1
 8001754:	d101      	bne.n	800175a <ETH_SetMACConfig+0x12a>
 8001756:	2202      	movs	r2, #2
 8001758:	e000      	b.n	800175c <ETH_SetMACConfig+0x12c>
 800175a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800175c:	4313      	orrs	r3, r2
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff fbdd 	bl	8000f34 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	619a      	str	r2, [r3, #24]
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	ff20810f 	.word	0xff20810f

08001790 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <ETH_SetDMAConfig+0x110>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	7b1b      	ldrb	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <ETH_SetDMAConfig+0x2c>
 80017b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017ba:	e000      	b.n	80017be <ETH_SetDMAConfig+0x2e>
 80017bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	7b5b      	ldrb	r3, [r3, #13]
 80017c2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017c4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	7f52      	ldrb	r2, [r2, #29]
 80017ca:	2a00      	cmp	r2, #0
 80017cc:	d102      	bne.n	80017d4 <ETH_SetDMAConfig+0x44>
 80017ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017d2:	e000      	b.n	80017d6 <ETH_SetDMAConfig+0x46>
 80017d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80017d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	7b9b      	ldrb	r3, [r3, #14]
 80017dc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80017de:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80017e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	7f1b      	ldrb	r3, [r3, #28]
 80017ea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80017ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	7f9b      	ldrb	r3, [r3, #30]
 80017f2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80017f4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80017fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001802:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001804:	4313      	orrs	r3, r2
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001814:	461a      	mov	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001826:	2001      	movs	r0, #1
 8001828:	f7ff fb84 	bl	8000f34 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001834:	461a      	mov	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	791b      	ldrb	r3, [r3, #4]
 800183e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001844:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800184a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001850:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001858:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800185a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001860:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001862:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001868:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001872:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001876:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001884:	2001      	movs	r0, #1
 8001886:	f7ff fb55 	bl	8000f34 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	f8de3f23 	.word	0xf8de3f23

080018a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0a6      	sub	sp, #152	; 0x98
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80018ac:	2301      	movs	r3, #1
 80018ae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80018b8:	2300      	movs	r3, #0
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80018c2:	2301      	movs	r3, #1
 80018c4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018e0:	2300      	movs	r3, #0
 80018e2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001906:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800190c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001910:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001918:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800191c:	4619      	mov	r1, r3
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fe86 	bl	8001630 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001924:	2301      	movs	r3, #1
 8001926:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001928:	2301      	movs	r3, #1
 800192a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800192c:	2301      	movs	r3, #1
 800192e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001932:	2301      	movs	r3, #1
 8001934:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001946:	2300      	movs	r3, #0
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800194a:	2301      	movs	r3, #1
 800194c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001950:	2301      	movs	r3, #1
 8001952:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001958:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800195a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800195e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001964:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001966:	2301      	movs	r3, #1
 8001968:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800196c:	2300      	movs	r3, #0
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	4619      	mov	r1, r3
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ff08 	bl	8001790 <ETH_SetDMAConfig>
}
 8001980:	bf00      	nop
 8001982:	3798      	adds	r7, #152	; 0x98
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3305      	adds	r3, #5
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	3204      	adds	r2, #4
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <ETH_MACAddressConfig+0x68>)
 80019aa:	4413      	add	r3, r2
 80019ac:	461a      	mov	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3303      	adds	r3, #3
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	061a      	lsls	r2, r3, #24
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3302      	adds	r3, #2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	041b      	lsls	r3, r3, #16
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3301      	adds	r3, #1
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	4313      	orrs	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	7812      	ldrb	r2, [r2, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <ETH_MACAddressConfig+0x6c>)
 80019da:	4413      	add	r3, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	6013      	str	r3, [r2, #0]
}
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40028040 	.word	0x40028040
 80019f4:	40028044 	.word	0x40028044

080019f8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	e03e      	b.n	8001a84 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68d9      	ldr	r1, [r3, #12]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	3206      	adds	r2, #6
 8001a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d80c      	bhi.n	8001a68 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68d9      	ldr	r1, [r3, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	440b      	add	r3, r1
 8001a60:	461a      	mov	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	e004      	b.n	8001a72 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3301      	adds	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d9bd      	bls.n	8001a06 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9c:	611a      	str	r2, [r3, #16]
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e046      	b.n	8001b46 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6919      	ldr	r1, [r3, #16]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2200      	movs	r2, #0
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001af4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001afc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	3212      	adds	r2, #18
 8001b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d80c      	bhi.n	8001b36 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6919      	ldr	r1, [r3, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	e004      	b.n	8001b40 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3301      	adds	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d9b5      	bls.n	8001ab8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b76:	60da      	str	r2, [r3, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	e175      	b.n	8001e90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	f040 8164 	bne.w	8001e8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d005      	beq.n	8001bda <HAL_GPIO_Init+0x56>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d130      	bne.n	8001c3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	2203      	movs	r2, #3
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c10:	2201      	movs	r2, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 0201 	and.w	r2, r3, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d017      	beq.n	8001c78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d123      	bne.n	8001ccc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	08da      	lsrs	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3208      	adds	r2, #8
 8001cc6:	69b9      	ldr	r1, [r7, #24]
 8001cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80be 	beq.w	8001e8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	4b66      	ldr	r3, [pc, #408]	; (8001ea8 <HAL_GPIO_Init+0x324>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	4a65      	ldr	r2, [pc, #404]	; (8001ea8 <HAL_GPIO_Init+0x324>)
 8001d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1a:	4b63      	ldr	r3, [pc, #396]	; (8001ea8 <HAL_GPIO_Init+0x324>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d26:	4a61      	ldr	r2, [pc, #388]	; (8001eac <HAL_GPIO_Init+0x328>)
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a58      	ldr	r2, [pc, #352]	; (8001eb0 <HAL_GPIO_Init+0x32c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d037      	beq.n	8001dc2 <HAL_GPIO_Init+0x23e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a57      	ldr	r2, [pc, #348]	; (8001eb4 <HAL_GPIO_Init+0x330>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d031      	beq.n	8001dbe <HAL_GPIO_Init+0x23a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a56      	ldr	r2, [pc, #344]	; (8001eb8 <HAL_GPIO_Init+0x334>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d02b      	beq.n	8001dba <HAL_GPIO_Init+0x236>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a55      	ldr	r2, [pc, #340]	; (8001ebc <HAL_GPIO_Init+0x338>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d025      	beq.n	8001db6 <HAL_GPIO_Init+0x232>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a54      	ldr	r2, [pc, #336]	; (8001ec0 <HAL_GPIO_Init+0x33c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01f      	beq.n	8001db2 <HAL_GPIO_Init+0x22e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a53      	ldr	r2, [pc, #332]	; (8001ec4 <HAL_GPIO_Init+0x340>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d019      	beq.n	8001dae <HAL_GPIO_Init+0x22a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	; (8001ec8 <HAL_GPIO_Init+0x344>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <HAL_GPIO_Init+0x226>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a51      	ldr	r2, [pc, #324]	; (8001ecc <HAL_GPIO_Init+0x348>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00d      	beq.n	8001da6 <HAL_GPIO_Init+0x222>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a50      	ldr	r2, [pc, #320]	; (8001ed0 <HAL_GPIO_Init+0x34c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d007      	beq.n	8001da2 <HAL_GPIO_Init+0x21e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4f      	ldr	r2, [pc, #316]	; (8001ed4 <HAL_GPIO_Init+0x350>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_GPIO_Init+0x21a>
 8001d9a:	2309      	movs	r3, #9
 8001d9c:	e012      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001d9e:	230a      	movs	r3, #10
 8001da0:	e010      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001da2:	2308      	movs	r3, #8
 8001da4:	e00e      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001da6:	2307      	movs	r3, #7
 8001da8:	e00c      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001daa:	2306      	movs	r3, #6
 8001dac:	e00a      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001dae:	2305      	movs	r3, #5
 8001db0:	e008      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001db2:	2304      	movs	r3, #4
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001db6:	2303      	movs	r3, #3
 8001db8:	e004      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	f002 0203 	and.w	r2, r2, #3
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001dd4:	4935      	ldr	r1, [pc, #212]	; (8001eac <HAL_GPIO_Init+0x328>)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de2:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e06:	4a34      	ldr	r2, [pc, #208]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e0c:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e30:	4a29      	ldr	r2, [pc, #164]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e36:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e84:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b0f      	cmp	r3, #15
 8001e94:	f67f ae86 	bls.w	8001ba4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40013800 	.word	0x40013800
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020c00 	.word	0x40020c00
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40021400 	.word	0x40021400
 8001ec8:	40021800 	.word	0x40021800
 8001ecc:	40021c00 	.word	0x40021c00
 8001ed0:	40022000 	.word	0x40022000
 8001ed4:	40022400 	.word	0x40022400
 8001ed8:	40013c00 	.word	0x40013c00

08001edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ef8:	e003      	b.n	8001f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	041a      	lsls	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	619a      	str	r2, [r3, #24]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f10:	b08f      	sub	sp, #60	; 0x3c
 8001f12:	af0a      	add	r7, sp, #40	; 0x28
 8001f14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e116      	b.n	800214e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f006 feb4 	bl	8008ca8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2203      	movs	r2, #3
 8001f44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 f95d 	bl	800521e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	687e      	ldr	r6, [r7, #4]
 8001f6c:	466d      	mov	r5, sp
 8001f6e:	f106 0410 	add.w	r4, r6, #16
 8001f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f82:	1d33      	adds	r3, r6, #4
 8001f84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f86:	6838      	ldr	r0, [r7, #0]
 8001f88:	f003 f83e 	bl	8005008 <USB_CoreInit>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2202      	movs	r2, #2
 8001f96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0d7      	b.n	800214e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f003 f94b 	bl	8005240 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	73fb      	strb	r3, [r7, #15]
 8001fae:	e04a      	b.n	8002046 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	333d      	adds	r3, #61	; 0x3d
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	333c      	adds	r3, #60	; 0x3c
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	b298      	uxth	r0, r3
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	3344      	adds	r3, #68	; 0x44
 8001fec:	4602      	mov	r2, r0
 8001fee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3340      	adds	r3, #64	; 0x40
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	3348      	adds	r3, #72	; 0x48
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	334c      	adds	r3, #76	; 0x4c
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	3354      	adds	r3, #84	; 0x54
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	3301      	adds	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	d3af      	bcc.n	8001fb0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e044      	b.n	80020e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	3301      	adds	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d3b5      	bcc.n	8002056 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	687e      	ldr	r6, [r7, #4]
 80020f2:	466d      	mov	r5, sp
 80020f4:	f106 0410 	add.w	r4, r6, #16
 80020f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002100:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002104:	e885 0003 	stmia.w	r5, {r0, r1}
 8002108:	1d33      	adds	r3, r6, #4
 800210a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800210c:	6838      	ldr	r0, [r7, #0]
 800210e:	f003 f8e3 	bl	80052d8 <USB_DevInit>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e014      	b.n	800214e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2b01      	cmp	r3, #1
 800213a:	d102      	bne.n	8002142 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f001 f97b 	bl	8003438 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f004 fa31 	bl	80065ae <USB_DevDisconnect>

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002156 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_PCD_Start+0x16>
 8002168:	2302      	movs	r3, #2
 800216a:	e012      	b.n	8002192 <HAL_PCD_Start+0x3c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f003 f83f 	bl	80051fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f004 f9f2 	bl	800656c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800219a:	b590      	push	{r4, r7, lr}
 800219c:	b08d      	sub	sp, #52	; 0x34
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 fab0 	bl	8006716 <USB_GetMode>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 84b7 	bne.w	8002b2c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f004 fa14 	bl	80065f0 <USB_ReadInterrupts>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 84ad 	beq.w	8002b2a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 fa01 	bl	80065f0 <USB_ReadInterrupts>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d107      	bne.n	8002208 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f002 0202 	and.w	r2, r2, #2
 8002206:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f004 f9ef 	bl	80065f0 <USB_ReadInterrupts>
 8002212:	4603      	mov	r3, r0
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b10      	cmp	r3, #16
 800221a:	d161      	bne.n	80022e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0210 	bic.w	r2, r2, #16
 800222a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f003 020f 	and.w	r2, r3, #15
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	3304      	adds	r3, #4
 800224a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	0c5b      	lsrs	r3, r3, #17
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	2b02      	cmp	r3, #2
 8002256:	d124      	bne.n	80022a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d035      	beq.n	80022d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800226e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002272:	b29b      	uxth	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	6a38      	ldr	r0, [r7, #32]
 8002278:	f004 f826 	bl	80062c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002288:	441a      	add	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	6a1a      	ldr	r2, [r3, #32]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800229a:	441a      	add	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	621a      	str	r2, [r3, #32]
 80022a0:	e016      	b.n	80022d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	0c5b      	lsrs	r3, r3, #17
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	2b06      	cmp	r3, #6
 80022ac:	d110      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022b4:	2208      	movs	r2, #8
 80022b6:	4619      	mov	r1, r3
 80022b8:	6a38      	ldr	r0, [r7, #32]
 80022ba:	f004 f805 	bl	80062c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	6a1a      	ldr	r2, [r3, #32]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ca:	441a      	add	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0210 	orr.w	r2, r2, #16
 80022de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f004 f983 	bl	80065f0 <USB_ReadInterrupts>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022f4:	f040 80a7 	bne.w	8002446 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f004 f988 	bl	8006616 <USB_ReadDevAllOutEpInterrupt>
 8002306:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002308:	e099      	b.n	800243e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 808e 	beq.w	8002432 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f004 f9ac 	bl	800667e <USB_ReadDevOutEPInterrupt>
 8002326:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00c      	beq.n	800234c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	4413      	add	r3, r2
 800233a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233e:	461a      	mov	r2, r3
 8002340:	2301      	movs	r3, #1
 8002342:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fef0 	bl	800312c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00c      	beq.n	8002370 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4413      	add	r3, r2
 800235e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002362:	461a      	mov	r2, r3
 8002364:	2308      	movs	r3, #8
 8002366:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 ffc6 	bl	80032fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	4413      	add	r3, r2
 8002382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002386:	461a      	mov	r2, r3
 8002388:	2310      	movs	r3, #16
 800238a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d030      	beq.n	80023f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239e:	2b80      	cmp	r3, #128	; 0x80
 80023a0:	d109      	bne.n	80023b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	3304      	adds	r3, #4
 80023ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	78db      	ldrb	r3, [r3, #3]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d108      	bne.n	80023e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2200      	movs	r2, #0
 80023d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f006 fd95 	bl	8008f10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f2:	461a      	mov	r2, r3
 80023f4:	2302      	movs	r3, #2
 80023f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	4413      	add	r3, r2
 800240a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240e:	461a      	mov	r2, r3
 8002410:	2320      	movs	r3, #32
 8002412:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	4413      	add	r3, r2
 8002426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242a:	461a      	mov	r2, r3
 800242c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002430:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	3301      	adds	r3, #1
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	2b00      	cmp	r3, #0
 8002442:	f47f af62 	bne.w	800230a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f004 f8d0 	bl	80065f0 <USB_ReadInterrupts>
 8002450:	4603      	mov	r3, r0
 8002452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002456:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800245a:	f040 80db 	bne.w	8002614 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f004 f8f1 	bl	800664a <USB_ReadDevAllInEpInterrupt>
 8002468:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800246e:	e0cd      	b.n	800260c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80c2 	beq.w	8002600 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f004 f917 	bl	80066ba <USB_ReadDevInEPInterrupt>
 800248c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d057      	beq.n	8002548 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	2201      	movs	r2, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69f9      	ldr	r1, [r7, #28]
 80024b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024b8:	4013      	ands	r3, r2
 80024ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c8:	461a      	mov	r2, r3
 80024ca:	2301      	movs	r3, #1
 80024cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d132      	bne.n	800253c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	334c      	adds	r3, #76	; 0x4c
 80024e6:	6819      	ldr	r1, [r3, #0]
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4403      	add	r3, r0
 80024f6:	3348      	adds	r3, #72	; 0x48
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4419      	add	r1, r3
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4403      	add	r3, r0
 800250a:	334c      	adds	r3, #76	; 0x4c
 800250c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	2b00      	cmp	r3, #0
 8002512:	d113      	bne.n	800253c <HAL_PCD_IRQHandler+0x3a2>
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	3354      	adds	r3, #84	; 0x54
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d108      	bne.n	800253c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002534:	461a      	mov	r2, r3
 8002536:	2101      	movs	r1, #1
 8002538:	f004 f920 	bl	800677c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	b2db      	uxtb	r3, r3
 8002540:	4619      	mov	r1, r3
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f006 fc5f 	bl	8008e06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800255e:	461a      	mov	r2, r3
 8002560:	2308      	movs	r3, #8
 8002562:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	4413      	add	r3, r2
 8002576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800257a:	461a      	mov	r2, r3
 800257c:	2310      	movs	r3, #16
 800257e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002596:	461a      	mov	r2, r3
 8002598:	2340      	movs	r3, #64	; 0x40
 800259a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d023      	beq.n	80025ee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a8:	6a38      	ldr	r0, [r7, #32]
 80025aa:	f002 fff3 	bl	8005594 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	3338      	adds	r3, #56	; 0x38
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	3304      	adds	r3, #4
 80025c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	78db      	ldrb	r3, [r3, #3]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d108      	bne.n	80025dc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2200      	movs	r2, #0
 80025ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	4619      	mov	r1, r3
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f006 fcac 	bl	8008f34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025e8:	461a      	mov	r2, r3
 80025ea:	2302      	movs	r3, #2
 80025ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fd08 	bl	8003010 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	3301      	adds	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	f47f af2e 	bne.w	8002470 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f003 ffe9 	bl	80065f0 <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002628:	d122      	bne.n	8002670 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002644:	2b01      	cmp	r3, #1
 8002646:	d108      	bne.n	800265a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002650:	2100      	movs	r1, #0
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f006 fe26 	bl	80092a4 <HAL_PCDEx_LPM_Callback>
 8002658:	e002      	b.n	8002660 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f006 fc4a 	bl	8008ef4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800266e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f003 ffbb 	bl	80065f0 <USB_ReadInterrupts>
 800267a:	4603      	mov	r3, r0
 800267c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002684:	d112      	bne.n	80026ac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b01      	cmp	r3, #1
 8002694:	d102      	bne.n	800269c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f006 fc06 	bl	8008ea8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 ff9d 	bl	80065f0 <USB_ReadInterrupts>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c0:	d121      	bne.n	8002706 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80026d0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d111      	bne.n	8002700 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	f003 020f 	and.w	r2, r3, #15
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026f6:	2101      	movs	r1, #1
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f006 fdd3 	bl	80092a4 <HAL_PCDEx_LPM_Callback>
 80026fe:	e002      	b.n	8002706 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f006 fbd1 	bl	8008ea8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f003 ff70 	bl	80065f0 <USB_ReadInterrupts>
 8002710:	4603      	mov	r3, r0
 8002712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271a:	f040 80b7 	bne.w	800288c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2110      	movs	r1, #16
 8002738:	4618      	mov	r0, r3
 800273a:	f002 ff2b 	bl	8005594 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273e:	2300      	movs	r3, #0
 8002740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002742:	e046      	b.n	80027d2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002750:	461a      	mov	r2, r3
 8002752:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002756:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	4413      	add	r3, r2
 8002760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002768:	0151      	lsls	r1, r2, #5
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	440a      	add	r2, r1
 800276e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002772:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002776:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002784:	461a      	mov	r2, r3
 8002786:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800278a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800279c:	0151      	lsls	r1, r2, #5
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	440a      	add	r2, r1
 80027a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027bc:	0151      	lsls	r1, r2, #5
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	440a      	add	r2, r1
 80027c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	3301      	adds	r3, #1
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d8:	429a      	cmp	r2, r3
 80027da:	d3b3      	bcc.n	8002744 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d016      	beq.n	8002826 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002808:	f043 030b 	orr.w	r3, r3, #11
 800280c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800281e:	f043 030b 	orr.w	r3, r3, #11
 8002822:	6453      	str	r3, [r2, #68]	; 0x44
 8002824:	e015      	b.n	8002852 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002834:	4619      	mov	r1, r3
 8002836:	f242 032b 	movw	r3, #8235	; 0x202b
 800283a:	4313      	orrs	r3, r2
 800283c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800284c:	f043 030b 	orr.w	r3, r3, #11
 8002850:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002860:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002864:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002876:	461a      	mov	r2, r3
 8002878:	f003 ff80 	bl	800677c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800288a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f003 fead 	bl	80065f0 <USB_ReadInterrupts>
 8002896:	4603      	mov	r3, r0
 8002898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800289c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a0:	d124      	bne.n	80028ec <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 ff44 	bl	8006734 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f002 feec 	bl	800568e <USB_GetDevSpeed>
 80028b6:	4603      	mov	r3, r0
 80028b8:	461a      	mov	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681c      	ldr	r4, [r3, #0]
 80028c2:	f001 fadd 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 80028c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	4620      	mov	r0, r4
 80028d2:	f002 fbf1 	bl	80050b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f006 fabd 	bl	8008e56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80028ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f003 fe7d 	bl	80065f0 <USB_ReadInterrupts>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d10a      	bne.n	8002916 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f006 fa9a 	bl	8008e3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f002 0208 	and.w	r2, r2, #8
 8002914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f003 fe68 	bl	80065f0 <USB_ReadInterrupts>
 8002920:	4603      	mov	r3, r0
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	2b80      	cmp	r3, #128	; 0x80
 8002928:	d122      	bne.n	8002970 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002936:	2301      	movs	r3, #1
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
 800293a:	e014      	b.n	8002966 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d105      	bne.n	8002960 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	b2db      	uxtb	r3, r3
 8002958:	4619      	mov	r1, r3
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fb27 	bl	8002fae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	3301      	adds	r3, #1
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296c:	429a      	cmp	r2, r3
 800296e:	d3e5      	bcc.n	800293c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f003 fe3b 	bl	80065f0 <USB_ReadInterrupts>
 800297a:	4603      	mov	r3, r0
 800297c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002984:	d13b      	bne.n	80029fe <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002986:	2301      	movs	r3, #1
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
 800298a:	e02b      	b.n	80029e4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	4413      	add	r3, r2
 8002994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	3340      	adds	r3, #64	; 0x40
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d115      	bne.n	80029de <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	da12      	bge.n	80029de <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	333f      	adds	r3, #63	; 0x3f
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	4619      	mov	r1, r3
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fae8 	bl	8002fae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	3301      	adds	r3, #1
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d3ce      	bcc.n	800298c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 fdf4 	bl	80065f0 <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a12:	d155      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a14:	2301      	movs	r3, #1
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
 8002a18:	e045      	b.n	8002aa6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d12e      	bne.n	8002aa0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	da2b      	bge.n	8002aa0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a54:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d121      	bne.n	8002aa0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9c:	6053      	str	r3, [r2, #4]
            break;
 8002a9e:	e007      	b.n	8002ab0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d3b4      	bcc.n	8002a1a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 fd93 	bl	80065f0 <USB_ReadInterrupts>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad4:	d10a      	bne.n	8002aec <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f006 fa3e 	bl	8008f58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f003 fd7d 	bl	80065f0 <USB_ReadInterrupts>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d115      	bne.n	8002b2c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f006 fa2e 	bl	8008f74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6859      	ldr	r1, [r3, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	e000      	b.n	8002b2c <HAL_PCD_IRQHandler+0x992>
      return;
 8002b2a:	bf00      	nop
    }
  }
}
 8002b2c:	3734      	adds	r7, #52	; 0x34
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd90      	pop	{r4, r7, pc}

08002b32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_PCD_SetAddress+0x1a>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e013      	b.n	8002b74 <HAL_PCD_SetAddress+0x42>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 fcdb 	bl	8006520 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	4608      	mov	r0, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	70fb      	strb	r3, [r7, #3]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	803b      	strh	r3, [r7, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	da0f      	bge.n	8002bc2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	f003 020f 	and.w	r2, r3, #15
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	3338      	adds	r3, #56	; 0x38
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	705a      	strb	r2, [r3, #1]
 8002bc0:	e00f      	b.n	8002be2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	f003 020f 	and.w	r2, r3, #15
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3304      	adds	r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bee:	883a      	ldrh	r2, [r7, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	78ba      	ldrb	r2, [r7, #2]
 8002bf8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	785b      	ldrb	r3, [r3, #1]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d004      	beq.n	8002c0c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c0c:	78bb      	ldrb	r3, [r7, #2]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d102      	bne.n	8002c18 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_PCD_EP_Open+0xaa>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e00e      	b.n	8002c44 <HAL_PCD_EP_Open+0xc8>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68f9      	ldr	r1, [r7, #12]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 fd4f 	bl	80056d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002c42:	7afb      	ldrb	r3, [r7, #11]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	da0f      	bge.n	8002c80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	f003 020f 	and.w	r2, r3, #15
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	3338      	adds	r3, #56	; 0x38
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	4413      	add	r3, r2
 8002c74:	3304      	adds	r3, #4
 8002c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	705a      	strb	r2, [r3, #1]
 8002c7e:	e00f      	b.n	8002ca0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	f003 020f 	and.w	r2, r3, #15
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	3304      	adds	r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_PCD_EP_Close+0x6e>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e00e      	b.n	8002cd8 <HAL_PCD_EP_Close+0x8c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68f9      	ldr	r1, [r7, #12]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f002 fd8d 	bl	80057e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	460b      	mov	r3, r1
 8002cee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf0:	7afb      	ldrb	r3, [r7, #11]
 8002cf2:	f003 020f 	and.w	r2, r3, #15
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4413      	add	r3, r2
 8002d06:	3304      	adds	r3, #4
 8002d08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d22:	7afb      	ldrb	r3, [r7, #11]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d102      	bne.n	8002d3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d3c:	7afb      	ldrb	r3, [r7, #11]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	6979      	ldr	r1, [r7, #20]
 8002d54:	f003 f874 	bl	8005e40 <USB_EP0StartXfer>
 8002d58:	e008      	b.n	8002d6c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	6979      	ldr	r1, [r7, #20]
 8002d68:	f002 fe1a 	bl	80059a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	f003 020f 	and.w	r2, r3, #15
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d98:	681b      	ldr	r3, [r3, #0]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	460b      	mov	r3, r1
 8002db4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db6:	7afb      	ldrb	r3, [r7, #11]
 8002db8:	f003 020f 	and.w	r2, r3, #15
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	3338      	adds	r3, #56	; 0x38
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4413      	add	r3, r2
 8002dca:	3304      	adds	r3, #4
 8002dcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2201      	movs	r2, #1
 8002de4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002de6:	7afb      	ldrb	r3, [r7, #11]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d102      	bne.n	8002e00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e00:	7afb      	ldrb	r3, [r7, #11]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	6979      	ldr	r1, [r7, #20]
 8002e18:	f003 f812 	bl	8005e40 <USB_EP0StartXfer>
 8002e1c:	e008      	b.n	8002e30 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6979      	ldr	r1, [r7, #20]
 8002e2c:	f002 fdb8 	bl	80059a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	f003 020f 	and.w	r2, r3, #15
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d901      	bls.n	8002e58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e050      	b.n	8002efa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	da0f      	bge.n	8002e80 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	f003 020f 	and.w	r2, r3, #15
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	3338      	adds	r3, #56	; 0x38
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	3304      	adds	r3, #4
 8002e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	705a      	strb	r2, [r3, #1]
 8002e7e:	e00d      	b.n	8002e9c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	3304      	adds	r3, #4
 8002e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_PCD_EP_SetStall+0x82>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e01e      	b.n	8002efa <HAL_PCD_EP_SetStall+0xc0>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68f9      	ldr	r1, [r7, #12]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f003 fa54 	bl	8006378 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10a      	bne.n	8002ef0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	b2d9      	uxtb	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002eea:	461a      	mov	r2, r3
 8002eec:	f003 fc46 	bl	800677c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d901      	bls.n	8002f20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e042      	b.n	8002fa6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	da0f      	bge.n	8002f48 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	f003 020f 	and.w	r2, r3, #15
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	3338      	adds	r3, #56	; 0x38
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	705a      	strb	r2, [r3, #1]
 8002f46:	e00f      	b.n	8002f68 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3304      	adds	r3, #4
 8002f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_PCD_EP_ClrStall+0x86>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e00e      	b.n	8002fa6 <HAL_PCD_EP_ClrStall+0xa4>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68f9      	ldr	r1, [r7, #12]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 fa5c 	bl	8006454 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	da0c      	bge.n	8002fdc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	f003 020f 	and.w	r2, r3, #15
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	3338      	adds	r3, #56	; 0x38
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	e00c      	b.n	8002ff6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	f003 020f 	and.w	r2, r3, #15
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f003 f87b 	bl	80060f8 <USB_EPStopXfer>
 8003002:	4603      	mov	r3, r0
 8003004:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003006:	7afb      	ldrb	r3, [r7, #11]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af02      	add	r7, sp, #8
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	3338      	adds	r3, #56	; 0x38
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	4413      	add	r3, r2
 8003034:	3304      	adds	r3, #4
 8003036:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a1a      	ldr	r2, [r3, #32]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	429a      	cmp	r2, r3
 8003042:	d901      	bls.n	8003048 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e06c      	b.n	8003122 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	429a      	cmp	r2, r3
 800305c:	d902      	bls.n	8003064 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	3303      	adds	r3, #3
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800306c:	e02b      	b.n	80030c6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	429a      	cmp	r2, r3
 8003082:	d902      	bls.n	800308a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3303      	adds	r3, #3
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6919      	ldr	r1, [r3, #16]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	4603      	mov	r3, r0
 80030a8:	6978      	ldr	r0, [r7, #20]
 80030aa:	f003 f8cf 	bl	800624c <USB_WritePacket>

    ep->xfer_buff  += len;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	441a      	add	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a1a      	ldr	r2, [r3, #32]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	441a      	add	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d809      	bhi.n	80030f0 <PCD_WriteEmptyTxFifo+0xe0>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a1a      	ldr	r2, [r3, #32]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d203      	bcs.n	80030f0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1be      	bne.n	800306e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d811      	bhi.n	8003120 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	2201      	movs	r2, #1
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	43db      	mvns	r3, r3
 8003116:	6939      	ldr	r1, [r7, #16]
 8003118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800311c:	4013      	ands	r3, r2
 800311e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	333c      	adds	r3, #60	; 0x3c
 8003144:	3304      	adds	r3, #4
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d17b      	bne.n	800325a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d015      	beq.n	8003198 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	4a61      	ldr	r2, [pc, #388]	; (80032f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	f240 80b9 	bls.w	80032e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80b3 	beq.w	80032e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800318e:	461a      	mov	r2, r3
 8003190:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003194:	6093      	str	r3, [r2, #8]
 8003196:	e0a7      	b.n	80032e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d009      	beq.n	80031b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ae:	461a      	mov	r2, r3
 80031b0:	2320      	movs	r3, #32
 80031b2:	6093      	str	r3, [r2, #8]
 80031b4:	e098      	b.n	80032e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f040 8093 	bne.w	80032e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	4a4b      	ldr	r2, [pc, #300]	; (80032f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d90f      	bls.n	80031ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e0:	461a      	mov	r2, r3
 80031e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e6:	6093      	str	r3, [r2, #8]
 80031e8:	e07e      	b.n	80032e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4413      	add	r3, r2
 80031fc:	3304      	adds	r3, #4
 80031fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	0159      	lsls	r1, r3, #5
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	440b      	add	r3, r1
 800320c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003216:	1ad2      	subs	r2, r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d114      	bne.n	800324c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003234:	461a      	mov	r2, r3
 8003236:	2101      	movs	r1, #1
 8003238:	f003 faa0 	bl	800677c <USB_EP0_OutStart>
 800323c:	e006      	b.n	800324c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	441a      	add	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	4619      	mov	r1, r3
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f005 fdbc 	bl	8008dd0 <HAL_PCD_DataOutStageCallback>
 8003258:	e046      	b.n	80032e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	4a26      	ldr	r2, [pc, #152]	; (80032f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d124      	bne.n	80032ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003278:	461a      	mov	r2, r3
 800327a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800327e:	6093      	str	r3, [r2, #8]
 8003280:	e032      	b.n	80032e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003298:	461a      	mov	r2, r3
 800329a:	2320      	movs	r3, #32
 800329c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	4619      	mov	r1, r3
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f005 fd93 	bl	8008dd0 <HAL_PCD_DataOutStageCallback>
 80032aa:	e01d      	b.n	80032e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d114      	bne.n	80032dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d108      	bne.n	80032dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032d4:	461a      	mov	r2, r3
 80032d6:	2100      	movs	r1, #0
 80032d8:	f003 fa50 	bl	800677c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f005 fd74 	bl	8008dd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3720      	adds	r7, #32
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	4f54300a 	.word	0x4f54300a
 80032f8:	4f54310a 	.word	0x4f54310a

080032fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	333c      	adds	r3, #60	; 0x3c
 8003314:	3304      	adds	r3, #4
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4a15      	ldr	r2, [pc, #84]	; (8003384 <PCD_EP_OutSetupPacket_int+0x88>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d90e      	bls.n	8003350 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003348:	461a      	mov	r2, r3
 800334a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800334e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f005 fd2b 	bl	8008dac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <PCD_EP_OutSetupPacket_int+0x88>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d90c      	bls.n	8003378 <PCD_EP_OutSetupPacket_int+0x7c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d108      	bne.n	8003378 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003370:	461a      	mov	r2, r3
 8003372:	2101      	movs	r1, #1
 8003374:	f003 fa02 	bl	800677c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	4f54300a 	.word	0x4f54300a

08003388 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	70fb      	strb	r3, [r7, #3]
 8003394:	4613      	mov	r3, r2
 8003396:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d107      	bne.n	80033b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033a6:	883b      	ldrh	r3, [r7, #0]
 80033a8:	0419      	lsls	r1, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	629a      	str	r2, [r3, #40]	; 0x28
 80033b4:	e028      	b.n	8003408 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	4413      	add	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e00d      	b.n	80033e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	3340      	adds	r3, #64	; 0x40
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	0c1b      	lsrs	r3, r3, #16
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	4413      	add	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	3301      	adds	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
 80033e6:	7bfa      	ldrb	r2, [r7, #15]
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d3ec      	bcc.n	80033ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033f0:	883b      	ldrh	r3, [r7, #0]
 80033f2:	0418      	lsls	r0, r3, #16
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6819      	ldr	r1, [r3, #0]
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	4302      	orrs	r2, r0
 8003400:	3340      	adds	r3, #64	; 0x40
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	887a      	ldrh	r2, [r7, #2]
 8003428:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_PCDEx_ActivateLPM+0x44>)
 8003468:	4313      	orrs	r3, r2
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	10000003 	.word	0x10000003

08003480 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a04      	ldr	r2, [pc, #16]	; (800349c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800348a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348e:	6013      	str	r3, [r2, #0]
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40007000 	.word	0x40007000

080034a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	4b23      	ldr	r3, [pc, #140]	; (8003538 <HAL_PWREx_EnableOverDrive+0x98>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	4a22      	ldr	r2, [pc, #136]	; (8003538 <HAL_PWREx_EnableOverDrive+0x98>)
 80034b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b4:	6413      	str	r3, [r2, #64]	; 0x40
 80034b6:	4b20      	ldr	r3, [pc, #128]	; (8003538 <HAL_PWREx_EnableOverDrive+0x98>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <HAL_PWREx_EnableOverDrive+0x9c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1d      	ldr	r2, [pc, #116]	; (800353c <HAL_PWREx_EnableOverDrive+0x9c>)
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034ce:	f7fd fd25 	bl	8000f1c <HAL_GetTick>
 80034d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034d4:	e009      	b.n	80034ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034d6:	f7fd fd21 	bl	8000f1c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034e4:	d901      	bls.n	80034ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e022      	b.n	8003530 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034ea:	4b14      	ldr	r3, [pc, #80]	; (800353c <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f6:	d1ee      	bne.n	80034d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034f8:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_PWREx_EnableOverDrive+0x9c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0f      	ldr	r2, [pc, #60]	; (800353c <HAL_PWREx_EnableOverDrive+0x9c>)
 80034fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003502:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003504:	f7fd fd0a 	bl	8000f1c <HAL_GetTick>
 8003508:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800350a:	e009      	b.n	8003520 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800350c:	f7fd fd06 	bl	8000f1c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800351a:	d901      	bls.n	8003520 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e007      	b.n	8003530 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800352c:	d1ee      	bne.n	800350c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40023800 	.word	0x40023800
 800353c:	40007000 	.word	0x40007000

08003540 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003548:	2300      	movs	r3, #0
 800354a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e29b      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 8087 	beq.w	8003672 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003564:	4b96      	ldr	r3, [pc, #600]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b04      	cmp	r3, #4
 800356e:	d00c      	beq.n	800358a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003570:	4b93      	ldr	r3, [pc, #588]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b08      	cmp	r3, #8
 800357a:	d112      	bne.n	80035a2 <HAL_RCC_OscConfig+0x62>
 800357c:	4b90      	ldr	r3, [pc, #576]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003588:	d10b      	bne.n	80035a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358a:	4b8d      	ldr	r3, [pc, #564]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d06c      	beq.n	8003670 <HAL_RCC_OscConfig+0x130>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d168      	bne.n	8003670 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e275      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035aa:	d106      	bne.n	80035ba <HAL_RCC_OscConfig+0x7a>
 80035ac:	4b84      	ldr	r3, [pc, #528]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a83      	ldr	r2, [pc, #524]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80035b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	e02e      	b.n	8003618 <HAL_RCC_OscConfig+0xd8>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x9c>
 80035c2:	4b7f      	ldr	r3, [pc, #508]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a7e      	ldr	r2, [pc, #504]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80035c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4b7c      	ldr	r3, [pc, #496]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a7b      	ldr	r2, [pc, #492]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80035d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e01d      	b.n	8003618 <HAL_RCC_OscConfig+0xd8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0xc0>
 80035e6:	4b76      	ldr	r3, [pc, #472]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a75      	ldr	r2, [pc, #468]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80035ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	4b73      	ldr	r3, [pc, #460]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a72      	ldr	r2, [pc, #456]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e00b      	b.n	8003618 <HAL_RCC_OscConfig+0xd8>
 8003600:	4b6f      	ldr	r3, [pc, #444]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a6e      	ldr	r2, [pc, #440]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 8003606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b6c      	ldr	r3, [pc, #432]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a6b      	ldr	r2, [pc, #428]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 8003612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d013      	beq.n	8003648 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fd fc7c 	bl	8000f1c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003628:	f7fd fc78 	bl	8000f1c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e229      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	4b61      	ldr	r3, [pc, #388]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0xe8>
 8003646:	e014      	b.n	8003672 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fd fc68 	bl	8000f1c <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003650:	f7fd fc64 	bl	8000f1c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e215      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	4b57      	ldr	r3, [pc, #348]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x110>
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d069      	beq.n	8003752 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800367e:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368a:	4b4d      	ldr	r3, [pc, #308]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b08      	cmp	r3, #8
 8003694:	d11c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x190>
 8003696:	4b4a      	ldr	r3, [pc, #296]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d116      	bne.n	80036d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_RCC_OscConfig+0x17a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e1e9      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ba:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	493d      	ldr	r1, [pc, #244]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ce:	e040      	b.n	8003752 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d023      	beq.n	8003720 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d8:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a38      	ldr	r2, [pc, #224]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fd fc1a 	bl	8000f1c <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ec:	f7fd fc16 	bl	8000f1c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e1c7      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fe:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370a:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4929      	ldr	r1, [pc, #164]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]
 800371e:	e018      	b.n	8003752 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003720:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a26      	ldr	r2, [pc, #152]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fd fbf6 	bl	8000f1c <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003734:	f7fd fbf2 	bl	8000f1c <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e1a3      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003746:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d038      	beq.n	80037d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d019      	beq.n	800379a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003766:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 8003768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376a:	4a15      	ldr	r2, [pc, #84]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fd fbd3 	bl	8000f1c <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377a:	f7fd fbcf 	bl	8000f1c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e180      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 800378e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x23a>
 8003798:	e01a      	b.n	80037d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 800379c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379e:	4a08      	ldr	r2, [pc, #32]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a6:	f7fd fbb9 	bl	8000f1c <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ae:	f7fd fbb5 	bl	8000f1c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d903      	bls.n	80037c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e166      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
 80037c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c4:	4b92      	ldr	r3, [pc, #584]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80037c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1ee      	bne.n	80037ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80a4 	beq.w	8003926 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037de:	4b8c      	ldr	r3, [pc, #560]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10d      	bne.n	8003806 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ea:	4b89      	ldr	r3, [pc, #548]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a88      	ldr	r2, [pc, #544]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 80037f6:	4b86      	ldr	r3, [pc, #536]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003806:	4b83      	ldr	r3, [pc, #524]	; (8003a14 <HAL_RCC_OscConfig+0x4d4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d118      	bne.n	8003844 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003812:	4b80      	ldr	r3, [pc, #512]	; (8003a14 <HAL_RCC_OscConfig+0x4d4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a7f      	ldr	r2, [pc, #508]	; (8003a14 <HAL_RCC_OscConfig+0x4d4>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381e:	f7fd fb7d 	bl	8000f1c <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003826:	f7fd fb79 	bl	8000f1c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b64      	cmp	r3, #100	; 0x64
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e12a      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003838:	4b76      	ldr	r3, [pc, #472]	; (8003a14 <HAL_RCC_OscConfig+0x4d4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x31a>
 800384c:	4b70      	ldr	r3, [pc, #448]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	4a6f      	ldr	r2, [pc, #444]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6713      	str	r3, [r2, #112]	; 0x70
 8003858:	e02d      	b.n	80038b6 <HAL_RCC_OscConfig+0x376>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x33c>
 8003862:	4b6b      	ldr	r3, [pc, #428]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	4a6a      	ldr	r2, [pc, #424]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	6713      	str	r3, [r2, #112]	; 0x70
 800386e:	4b68      	ldr	r3, [pc, #416]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	4a67      	ldr	r2, [pc, #412]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 8003874:	f023 0304 	bic.w	r3, r3, #4
 8003878:	6713      	str	r3, [r2, #112]	; 0x70
 800387a:	e01c      	b.n	80038b6 <HAL_RCC_OscConfig+0x376>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b05      	cmp	r3, #5
 8003882:	d10c      	bne.n	800389e <HAL_RCC_OscConfig+0x35e>
 8003884:	4b62      	ldr	r3, [pc, #392]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	4a61      	ldr	r2, [pc, #388]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 800388a:	f043 0304 	orr.w	r3, r3, #4
 800388e:	6713      	str	r3, [r2, #112]	; 0x70
 8003890:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003894:	4a5e      	ldr	r2, [pc, #376]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	6713      	str	r3, [r2, #112]	; 0x70
 800389c:	e00b      	b.n	80038b6 <HAL_RCC_OscConfig+0x376>
 800389e:	4b5c      	ldr	r3, [pc, #368]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	4a5b      	ldr	r2, [pc, #364]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	6713      	str	r3, [r2, #112]	; 0x70
 80038aa:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4a58      	ldr	r2, [pc, #352]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80038b0:	f023 0304 	bic.w	r3, r3, #4
 80038b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d015      	beq.n	80038ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038be:	f7fd fb2d 	bl	8000f1c <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7fd fb29 	bl	8000f1c <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e0d8      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038dc:	4b4c      	ldr	r3, [pc, #304]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ee      	beq.n	80038c6 <HAL_RCC_OscConfig+0x386>
 80038e8:	e014      	b.n	8003914 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ea:	f7fd fb17 	bl	8000f1c <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f0:	e00a      	b.n	8003908 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f2:	f7fd fb13 	bl	8000f1c <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003900:	4293      	cmp	r3, r2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e0c2      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003908:	4b41      	ldr	r3, [pc, #260]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1ee      	bne.n	80038f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391a:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	4a3c      	ldr	r2, [pc, #240]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 8003920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003924:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80ae 	beq.w	8003a8c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003930:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b08      	cmp	r3, #8
 800393a:	d06d      	beq.n	8003a18 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d14b      	bne.n	80039dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003944:	4b32      	ldr	r3, [pc, #200]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a31      	ldr	r2, [pc, #196]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 800394a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800394e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fd fae4 	bl	8000f1c <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003958:	f7fd fae0 	bl	8000f1c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e091      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	4b29      	ldr	r3, [pc, #164]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	019b      	lsls	r3, r3, #6
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	3b01      	subs	r3, #1
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	061b      	lsls	r3, r3, #24
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	071b      	lsls	r3, r3, #28
 80039a2:	491b      	ldr	r1, [pc, #108]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80039ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd fab2 	bl	8000f1c <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fd faae 	bl	8000f1c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e05f      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x47c>
 80039da:	e057      	b.n	8003a8c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039dc:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a0b      	ldr	r2, [pc, #44]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 80039e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd fa98 	bl	8000f1c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd fa94 	bl	8000f1c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e045      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a02:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <HAL_RCC_OscConfig+0x4d0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x4b0>
 8003a0e:	e03d      	b.n	8003a8c <HAL_RCC_OscConfig+0x54c>
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a18:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <HAL_RCC_OscConfig+0x558>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d030      	beq.n	8003a88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d129      	bne.n	8003a88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d122      	bne.n	8003a88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a48:	4013      	ands	r3, r2
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d119      	bne.n	8003a88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	3b01      	subs	r3, #1
 8003a62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d10f      	bne.n	8003a88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d107      	bne.n	8003a88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800

08003a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0d0      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d910      	bls.n	8003ae4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b67      	ldr	r3, [pc, #412]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 020f 	bic.w	r2, r3, #15
 8003aca:	4965      	ldr	r1, [pc, #404]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b63      	ldr	r3, [pc, #396]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0b8      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d020      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003afc:	4b59      	ldr	r3, [pc, #356]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4a58      	ldr	r2, [pc, #352]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b14:	4b53      	ldr	r3, [pc, #332]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a52      	ldr	r2, [pc, #328]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b20:	4b50      	ldr	r3, [pc, #320]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	494d      	ldr	r1, [pc, #308]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d040      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d107      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	4b47      	ldr	r3, [pc, #284]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d115      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e07f      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5e:	4b41      	ldr	r3, [pc, #260]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e073      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6e:	4b3d      	ldr	r3, [pc, #244]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e06b      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b7e:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f023 0203 	bic.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4936      	ldr	r1, [pc, #216]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b90:	f7fd f9c4 	bl	8000f1c <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b98:	f7fd f9c0 	bl	8000f1c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e053      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bae:	4b2d      	ldr	r3, [pc, #180]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 020c 	and.w	r2, r3, #12
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d1eb      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d210      	bcs.n	8003bf0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 020f 	bic.w	r2, r3, #15
 8003bd6:	4922      	ldr	r1, [pc, #136]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e032      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bfc:	4b19      	ldr	r3, [pc, #100]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4916      	ldr	r1, [pc, #88]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c1a:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	490e      	ldr	r1, [pc, #56]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c2e:	f000 f821 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8003c32:	4602      	mov	r2, r0
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	490a      	ldr	r1, [pc, #40]	; (8003c68 <HAL_RCC_ClockConfig+0x1cc>)
 8003c40:	5ccb      	ldrb	r3, [r1, r3]
 8003c42:	fa22 f303 	lsr.w	r3, r2, r3
 8003c46:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <HAL_RCC_ClockConfig+0x1d0>)
 8003c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <HAL_RCC_ClockConfig+0x1d4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd f920 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023c00 	.word	0x40023c00
 8003c64:	40023800 	.word	0x40023800
 8003c68:	08009d8c 	.word	0x08009d8c
 8003c6c:	20000000 	.word	0x20000000
 8003c70:	20000004 	.word	0x20000004

08003c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c78:	b094      	sub	sp, #80	; 0x50
 8003c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c80:	2300      	movs	r3, #0
 8003c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c84:	2300      	movs	r3, #0
 8003c86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c8c:	4b79      	ldr	r3, [pc, #484]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 030c 	and.w	r3, r3, #12
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d00d      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	f200 80e1 	bhi.w	8003e60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d003      	beq.n	8003cae <HAL_RCC_GetSysClockFreq+0x3a>
 8003ca6:	e0db      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ca8:	4b73      	ldr	r3, [pc, #460]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003caa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cac:	e0db      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cae:	4b73      	ldr	r3, [pc, #460]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x208>)
 8003cb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cb2:	e0d8      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cb4:	4b6f      	ldr	r3, [pc, #444]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cbc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cbe:	4b6d      	ldr	r3, [pc, #436]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d063      	beq.n	8003d92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cca:	4b6a      	ldr	r3, [pc, #424]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	099b      	lsrs	r3, r3, #6
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cde:	2300      	movs	r3, #0
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	462b      	mov	r3, r5
 8003cea:	f04f 0000 	mov.w	r0, #0
 8003cee:	f04f 0100 	mov.w	r1, #0
 8003cf2:	0159      	lsls	r1, r3, #5
 8003cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf8:	0150      	lsls	r0, r2, #5
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4621      	mov	r1, r4
 8003d00:	1a51      	subs	r1, r2, r1
 8003d02:	6139      	str	r1, [r7, #16]
 8003d04:	4629      	mov	r1, r5
 8003d06:	eb63 0301 	sbc.w	r3, r3, r1
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d18:	4659      	mov	r1, fp
 8003d1a:	018b      	lsls	r3, r1, #6
 8003d1c:	4651      	mov	r1, sl
 8003d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d22:	4651      	mov	r1, sl
 8003d24:	018a      	lsls	r2, r1, #6
 8003d26:	4651      	mov	r1, sl
 8003d28:	ebb2 0801 	subs.w	r8, r2, r1
 8003d2c:	4659      	mov	r1, fp
 8003d2e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d46:	4690      	mov	r8, r2
 8003d48:	4699      	mov	r9, r3
 8003d4a:	4623      	mov	r3, r4
 8003d4c:	eb18 0303 	adds.w	r3, r8, r3
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	462b      	mov	r3, r5
 8003d54:	eb49 0303 	adc.w	r3, r9, r3
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d66:	4629      	mov	r1, r5
 8003d68:	024b      	lsls	r3, r1, #9
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d70:	4621      	mov	r1, r4
 8003d72:	024a      	lsls	r2, r1, #9
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d84:	f7fc fab4 	bl	80002f0 <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d90:	e058      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d92:	4b38      	ldr	r3, [pc, #224]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	099b      	lsrs	r3, r3, #6
 8003d98:	2200      	movs	r2, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003da2:	623b      	str	r3, [r7, #32]
 8003da4:	2300      	movs	r3, #0
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
 8003da8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dac:	4642      	mov	r2, r8
 8003dae:	464b      	mov	r3, r9
 8003db0:	f04f 0000 	mov.w	r0, #0
 8003db4:	f04f 0100 	mov.w	r1, #0
 8003db8:	0159      	lsls	r1, r3, #5
 8003dba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dbe:	0150      	lsls	r0, r2, #5
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dca:	4649      	mov	r1, r9
 8003dcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ddc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003de0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003de4:	ebb2 040a 	subs.w	r4, r2, sl
 8003de8:	eb63 050b 	sbc.w	r5, r3, fp
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	00eb      	lsls	r3, r5, #3
 8003df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dfa:	00e2      	lsls	r2, r4, #3
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	461d      	mov	r5, r3
 8003e00:	4643      	mov	r3, r8
 8003e02:	18e3      	adds	r3, r4, r3
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	464b      	mov	r3, r9
 8003e08:	eb45 0303 	adc.w	r3, r5, r3
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	028b      	lsls	r3, r1, #10
 8003e1e:	4621      	mov	r1, r4
 8003e20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e24:	4621      	mov	r1, r4
 8003e26:	028a      	lsls	r2, r1, #10
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2e:	2200      	movs	r2, #0
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	61fa      	str	r2, [r7, #28]
 8003e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e38:	f7fc fa5a 	bl	80002f0 <__aeabi_uldivmod>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4613      	mov	r3, r2
 8003e42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003e54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e5e:	e002      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3750      	adds	r7, #80	; 0x50
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800
 8003e78:	00f42400 	.word	0x00f42400
 8003e7c:	007a1200 	.word	0x007a1200

08003e80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e86:	681b      	ldr	r3, [r3, #0]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000000 	.word	0x20000000

08003e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e9c:	f7ff fff0 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	0a9b      	lsrs	r3, r3, #10
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4903      	ldr	r1, [pc, #12]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	08009d9c 	.word	0x08009d9c

08003ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ec4:	f7ff ffdc 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	0b5b      	lsrs	r3, r3, #13
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	4903      	ldr	r1, [pc, #12]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ed6:	5ccb      	ldrb	r3, [r1, r3]
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	08009d9c 	.word	0x08009d9c

08003ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d012      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f10:	4b69      	ldr	r3, [pc, #420]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a68      	ldr	r2, [pc, #416]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f1a:	6093      	str	r3, [r2, #8]
 8003f1c:	4b66      	ldr	r3, [pc, #408]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	4964      	ldr	r1, [pc, #400]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f32:	2301      	movs	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d017      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f42:	4b5d      	ldr	r3, [pc, #372]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f50:	4959      	ldr	r1, [pc, #356]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f60:	d101      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f62:	2301      	movs	r3, #1
 8003f64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d017      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f7e:	4b4e      	ldr	r3, [pc, #312]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	494a      	ldr	r1, [pc, #296]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003faa:	2301      	movs	r3, #1
 8003fac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 808b 	beq.w	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fcc:	4b3a      	ldr	r3, [pc, #232]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	4a39      	ldr	r2, [pc, #228]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd8:	4b37      	ldr	r3, [pc, #220]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fe4:	4b35      	ldr	r3, [pc, #212]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a34      	ldr	r2, [pc, #208]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff0:	f7fc ff94 	bl	8000f1c <HAL_GetTick>
 8003ff4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff8:	f7fc ff90 	bl	8000f1c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e38f      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800400a:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004016:	4b28      	ldr	r3, [pc, #160]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d035      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	429a      	cmp	r2, r3
 8004032:	d02e      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004034:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800403e:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800404a:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a1a      	ldr	r2, [pc, #104]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004054:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004056:	4a18      	ldr	r2, [pc, #96]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800405c:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b01      	cmp	r3, #1
 8004066:	d114      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fc ff58 	bl	8000f1c <HAL_GetTick>
 800406c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406e:	e00a      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fc ff54 	bl	8000f1c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e351      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004086:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0ee      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800409e:	d111      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040ae:	400b      	ands	r3, r1
 80040b0:	4901      	ldr	r1, [pc, #4]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
 80040b6:	e00b      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40007000 	.word	0x40007000
 80040c0:	0ffffcff 	.word	0x0ffffcff
 80040c4:	4bac      	ldr	r3, [pc, #688]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4aab      	ldr	r2, [pc, #684]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040ce:	6093      	str	r3, [r2, #8]
 80040d0:	4ba9      	ldr	r3, [pc, #676]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040dc:	49a6      	ldr	r1, [pc, #664]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d010      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040ee:	4ba2      	ldr	r3, [pc, #648]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f4:	4aa0      	ldr	r2, [pc, #640]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040fe:	4b9e      	ldr	r3, [pc, #632]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004100:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	499b      	ldr	r1, [pc, #620]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800411c:	4b96      	ldr	r3, [pc, #600]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412a:	4993      	ldr	r1, [pc, #588]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800413e:	4b8e      	ldr	r3, [pc, #568]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414c:	498a      	ldr	r1, [pc, #552]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004160:	4b85      	ldr	r3, [pc, #532]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004166:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416e:	4982      	ldr	r1, [pc, #520]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004182:	4b7d      	ldr	r3, [pc, #500]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004188:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	4979      	ldr	r1, [pc, #484]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a4:	4b74      	ldr	r3, [pc, #464]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f023 0203 	bic.w	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	4971      	ldr	r1, [pc, #452]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041c6:	4b6c      	ldr	r3, [pc, #432]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041cc:	f023 020c 	bic.w	r2, r3, #12
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d4:	4968      	ldr	r1, [pc, #416]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041e8:	4b63      	ldr	r3, [pc, #396]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f6:	4960      	ldr	r1, [pc, #384]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800420a:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004210:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004218:	4957      	ldr	r1, [pc, #348]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800422c:	4b52      	ldr	r3, [pc, #328]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	494f      	ldr	r1, [pc, #316]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800424e:	4b4a      	ldr	r3, [pc, #296]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004254:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	4946      	ldr	r1, [pc, #280]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004270:	4b41      	ldr	r3, [pc, #260]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427e:	493e      	ldr	r1, [pc, #248]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004292:	4b39      	ldr	r3, [pc, #228]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a0:	4935      	ldr	r1, [pc, #212]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042b4:	4b30      	ldr	r3, [pc, #192]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c2:	492d      	ldr	r1, [pc, #180]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d011      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042d6:	4b28      	ldr	r3, [pc, #160]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e4:	4924      	ldr	r1, [pc, #144]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f4:	d101      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042f6:	2301      	movs	r3, #1
 80042f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004306:	2301      	movs	r3, #1
 8004308:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004324:	4914      	ldr	r1, [pc, #80]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00b      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004338:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004348:	490b      	ldr	r1, [pc, #44]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00f      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004362:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436c:	4902      	ldr	r1, [pc, #8]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004374:	e002      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00b      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004388:	4b8a      	ldr	r3, [pc, #552]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800438e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004398:	4986      	ldr	r1, [pc, #536]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00b      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043ac:	4b81      	ldr	r3, [pc, #516]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043bc:	497d      	ldr	r1, [pc, #500]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d006      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80d6 	beq.w	8004584 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043d8:	4b76      	ldr	r3, [pc, #472]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a75      	ldr	r2, [pc, #468]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e4:	f7fc fd9a 	bl	8000f1c <HAL_GetTick>
 80043e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043ec:	f7fc fd96 	bl	8000f1c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	; 0x64
 80043f8:	d901      	bls.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e195      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043fe:	4b6d      	ldr	r3, [pc, #436]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d021      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	2b00      	cmp	r3, #0
 800441c:	d11d      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800441e:	4b65      	ldr	r3, [pc, #404]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004424:	0c1b      	lsrs	r3, r3, #16
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800442c:	4b61      	ldr	r3, [pc, #388]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800442e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004432:	0e1b      	lsrs	r3, r3, #24
 8004434:	f003 030f 	and.w	r3, r3, #15
 8004438:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	019a      	lsls	r2, r3, #6
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	041b      	lsls	r3, r3, #16
 8004444:	431a      	orrs	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	071b      	lsls	r3, r3, #28
 8004452:	4958      	ldr	r1, [pc, #352]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d004      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004478:	2b00      	cmp	r3, #0
 800447a:	d02e      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004484:	d129      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004486:	4b4b      	ldr	r3, [pc, #300]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004494:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449a:	0f1b      	lsrs	r3, r3, #28
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	019a      	lsls	r2, r3, #6
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	061b      	lsls	r3, r3, #24
 80044b4:	431a      	orrs	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	071b      	lsls	r3, r3, #28
 80044ba:	493e      	ldr	r1, [pc, #248]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044c2:	4b3c      	ldr	r3, [pc, #240]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c8:	f023 021f 	bic.w	r2, r3, #31
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	3b01      	subs	r3, #1
 80044d2:	4938      	ldr	r1, [pc, #224]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01d      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044e6:	4b33      	ldr	r3, [pc, #204]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ec:	0e1b      	lsrs	r3, r3, #24
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044f4:	4b2f      	ldr	r3, [pc, #188]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fa:	0f1b      	lsrs	r3, r3, #28
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	019a      	lsls	r2, r3, #6
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	041b      	lsls	r3, r3, #16
 800450e:	431a      	orrs	r2, r3
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	061b      	lsls	r3, r3, #24
 8004514:	431a      	orrs	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	071b      	lsls	r3, r3, #28
 800451a:	4926      	ldr	r1, [pc, #152]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d011      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	019a      	lsls	r2, r3, #6
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	071b      	lsls	r3, r3, #28
 800454a:	491a      	ldr	r1, [pc, #104]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004552:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a17      	ldr	r2, [pc, #92]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004558:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800455c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800455e:	f7fc fcdd 	bl	8000f1c <HAL_GetTick>
 8004562:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004566:	f7fc fcd9 	bl	8000f1c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b64      	cmp	r3, #100	; 0x64
 8004572:	d901      	bls.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0d8      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004578:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b01      	cmp	r3, #1
 8004588:	f040 80ce 	bne.w	8004728 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004598:	f7fc fcc0 	bl	8000f1c <HAL_GetTick>
 800459c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800459e:	e00b      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045a0:	f7fc fcbc 	bl	8000f1c <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	; 0x64
 80045ac:	d904      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e0bb      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045b8:	4b5e      	ldr	r3, [pc, #376]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c4:	d0ec      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d02e      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d12a      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045ee:	4b51      	ldr	r3, [pc, #324]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	0c1b      	lsrs	r3, r3, #16
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045fc:	4b4d      	ldr	r3, [pc, #308]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	0f1b      	lsrs	r3, r3, #28
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	019a      	lsls	r2, r3, #6
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	041b      	lsls	r3, r3, #16
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	431a      	orrs	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	071b      	lsls	r3, r3, #28
 8004622:	4944      	ldr	r1, [pc, #272]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800462a:	4b42      	ldr	r3, [pc, #264]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800462c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004630:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	3b01      	subs	r3, #1
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	493d      	ldr	r1, [pc, #244]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d022      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004658:	d11d      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800465a:	4b36      	ldr	r3, [pc, #216]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	0e1b      	lsrs	r3, r3, #24
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004668:	4b32      	ldr	r3, [pc, #200]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466e:	0f1b      	lsrs	r3, r3, #28
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	019a      	lsls	r2, r3, #6
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	431a      	orrs	r2, r3
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	061b      	lsls	r3, r3, #24
 8004688:	431a      	orrs	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	071b      	lsls	r3, r3, #28
 800468e:	4929      	ldr	r1, [pc, #164]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d028      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046a2:	4b24      	ldr	r3, [pc, #144]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	0e1b      	lsrs	r3, r3, #24
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	0c1b      	lsrs	r3, r3, #16
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	019a      	lsls	r2, r3, #6
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	041b      	lsls	r3, r3, #16
 80046c8:	431a      	orrs	r2, r3
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	061b      	lsls	r3, r3, #24
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	071b      	lsls	r3, r3, #28
 80046d6:	4917      	ldr	r1, [pc, #92]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046de:	4b15      	ldr	r3, [pc, #84]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	4911      	ldr	r1, [pc, #68]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046f4:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a0e      	ldr	r2, [pc, #56]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004700:	f7fc fc0c 	bl	8000f1c <HAL_GetTick>
 8004704:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004706:	e008      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004708:	f7fc fc08 	bl	8000f1c <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	; 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e007      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004726:	d1ef      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40023800 	.word	0x40023800

08004738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e040      	b.n	80047cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fc fa88 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2224      	movs	r2, #36	; 0x24
 8004764:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0201 	bic.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f82c 	bl	80047d4 <UART_SetConfig>
 800477c:	4603      	mov	r3, r0
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e022      	b.n	80047cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa84 	bl	8004c9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fb0b 	bl	8004de0 <UART_CheckIdleState>
 80047ca:	4603      	mov	r3, r0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4ba6      	ldr	r3, [pc, #664]	; (8004a98 <UART_SetConfig+0x2c4>)
 8004800:	4013      	ands	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	6979      	ldr	r1, [r7, #20]
 8004808:	430b      	orrs	r3, r1
 800480a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a94      	ldr	r2, [pc, #592]	; (8004a9c <UART_SetConfig+0x2c8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d120      	bne.n	8004892 <UART_SetConfig+0xbe>
 8004850:	4b93      	ldr	r3, [pc, #588]	; (8004aa0 <UART_SetConfig+0x2cc>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	2b03      	cmp	r3, #3
 800485c:	d816      	bhi.n	800488c <UART_SetConfig+0xb8>
 800485e:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <UART_SetConfig+0x90>)
 8004860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004864:	08004875 	.word	0x08004875
 8004868:	08004881 	.word	0x08004881
 800486c:	0800487b 	.word	0x0800487b
 8004870:	08004887 	.word	0x08004887
 8004874:	2301      	movs	r3, #1
 8004876:	77fb      	strb	r3, [r7, #31]
 8004878:	e150      	b.n	8004b1c <UART_SetConfig+0x348>
 800487a:	2302      	movs	r3, #2
 800487c:	77fb      	strb	r3, [r7, #31]
 800487e:	e14d      	b.n	8004b1c <UART_SetConfig+0x348>
 8004880:	2304      	movs	r3, #4
 8004882:	77fb      	strb	r3, [r7, #31]
 8004884:	e14a      	b.n	8004b1c <UART_SetConfig+0x348>
 8004886:	2308      	movs	r3, #8
 8004888:	77fb      	strb	r3, [r7, #31]
 800488a:	e147      	b.n	8004b1c <UART_SetConfig+0x348>
 800488c:	2310      	movs	r3, #16
 800488e:	77fb      	strb	r3, [r7, #31]
 8004890:	e144      	b.n	8004b1c <UART_SetConfig+0x348>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a83      	ldr	r2, [pc, #524]	; (8004aa4 <UART_SetConfig+0x2d0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d132      	bne.n	8004902 <UART_SetConfig+0x12e>
 800489c:	4b80      	ldr	r3, [pc, #512]	; (8004aa0 <UART_SetConfig+0x2cc>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b0c      	cmp	r3, #12
 80048a8:	d828      	bhi.n	80048fc <UART_SetConfig+0x128>
 80048aa:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <UART_SetConfig+0xdc>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	080048e5 	.word	0x080048e5
 80048b4:	080048fd 	.word	0x080048fd
 80048b8:	080048fd 	.word	0x080048fd
 80048bc:	080048fd 	.word	0x080048fd
 80048c0:	080048f1 	.word	0x080048f1
 80048c4:	080048fd 	.word	0x080048fd
 80048c8:	080048fd 	.word	0x080048fd
 80048cc:	080048fd 	.word	0x080048fd
 80048d0:	080048eb 	.word	0x080048eb
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	080048fd 	.word	0x080048fd
 80048dc:	080048fd 	.word	0x080048fd
 80048e0:	080048f7 	.word	0x080048f7
 80048e4:	2300      	movs	r3, #0
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e118      	b.n	8004b1c <UART_SetConfig+0x348>
 80048ea:	2302      	movs	r3, #2
 80048ec:	77fb      	strb	r3, [r7, #31]
 80048ee:	e115      	b.n	8004b1c <UART_SetConfig+0x348>
 80048f0:	2304      	movs	r3, #4
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	e112      	b.n	8004b1c <UART_SetConfig+0x348>
 80048f6:	2308      	movs	r3, #8
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e10f      	b.n	8004b1c <UART_SetConfig+0x348>
 80048fc:	2310      	movs	r3, #16
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e10c      	b.n	8004b1c <UART_SetConfig+0x348>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a68      	ldr	r2, [pc, #416]	; (8004aa8 <UART_SetConfig+0x2d4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d120      	bne.n	800494e <UART_SetConfig+0x17a>
 800490c:	4b64      	ldr	r3, [pc, #400]	; (8004aa0 <UART_SetConfig+0x2cc>)
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004912:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004916:	2b30      	cmp	r3, #48	; 0x30
 8004918:	d013      	beq.n	8004942 <UART_SetConfig+0x16e>
 800491a:	2b30      	cmp	r3, #48	; 0x30
 800491c:	d814      	bhi.n	8004948 <UART_SetConfig+0x174>
 800491e:	2b20      	cmp	r3, #32
 8004920:	d009      	beq.n	8004936 <UART_SetConfig+0x162>
 8004922:	2b20      	cmp	r3, #32
 8004924:	d810      	bhi.n	8004948 <UART_SetConfig+0x174>
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <UART_SetConfig+0x15c>
 800492a:	2b10      	cmp	r3, #16
 800492c:	d006      	beq.n	800493c <UART_SetConfig+0x168>
 800492e:	e00b      	b.n	8004948 <UART_SetConfig+0x174>
 8004930:	2300      	movs	r3, #0
 8004932:	77fb      	strb	r3, [r7, #31]
 8004934:	e0f2      	b.n	8004b1c <UART_SetConfig+0x348>
 8004936:	2302      	movs	r3, #2
 8004938:	77fb      	strb	r3, [r7, #31]
 800493a:	e0ef      	b.n	8004b1c <UART_SetConfig+0x348>
 800493c:	2304      	movs	r3, #4
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e0ec      	b.n	8004b1c <UART_SetConfig+0x348>
 8004942:	2308      	movs	r3, #8
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e0e9      	b.n	8004b1c <UART_SetConfig+0x348>
 8004948:	2310      	movs	r3, #16
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e0e6      	b.n	8004b1c <UART_SetConfig+0x348>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a56      	ldr	r2, [pc, #344]	; (8004aac <UART_SetConfig+0x2d8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d120      	bne.n	800499a <UART_SetConfig+0x1c6>
 8004958:	4b51      	ldr	r3, [pc, #324]	; (8004aa0 <UART_SetConfig+0x2cc>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004962:	2bc0      	cmp	r3, #192	; 0xc0
 8004964:	d013      	beq.n	800498e <UART_SetConfig+0x1ba>
 8004966:	2bc0      	cmp	r3, #192	; 0xc0
 8004968:	d814      	bhi.n	8004994 <UART_SetConfig+0x1c0>
 800496a:	2b80      	cmp	r3, #128	; 0x80
 800496c:	d009      	beq.n	8004982 <UART_SetConfig+0x1ae>
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d810      	bhi.n	8004994 <UART_SetConfig+0x1c0>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <UART_SetConfig+0x1a8>
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d006      	beq.n	8004988 <UART_SetConfig+0x1b4>
 800497a:	e00b      	b.n	8004994 <UART_SetConfig+0x1c0>
 800497c:	2300      	movs	r3, #0
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e0cc      	b.n	8004b1c <UART_SetConfig+0x348>
 8004982:	2302      	movs	r3, #2
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e0c9      	b.n	8004b1c <UART_SetConfig+0x348>
 8004988:	2304      	movs	r3, #4
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e0c6      	b.n	8004b1c <UART_SetConfig+0x348>
 800498e:	2308      	movs	r3, #8
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e0c3      	b.n	8004b1c <UART_SetConfig+0x348>
 8004994:	2310      	movs	r3, #16
 8004996:	77fb      	strb	r3, [r7, #31]
 8004998:	e0c0      	b.n	8004b1c <UART_SetConfig+0x348>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a44      	ldr	r2, [pc, #272]	; (8004ab0 <UART_SetConfig+0x2dc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d125      	bne.n	80049f0 <UART_SetConfig+0x21c>
 80049a4:	4b3e      	ldr	r3, [pc, #248]	; (8004aa0 <UART_SetConfig+0x2cc>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b2:	d017      	beq.n	80049e4 <UART_SetConfig+0x210>
 80049b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b8:	d817      	bhi.n	80049ea <UART_SetConfig+0x216>
 80049ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049be:	d00b      	beq.n	80049d8 <UART_SetConfig+0x204>
 80049c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c4:	d811      	bhi.n	80049ea <UART_SetConfig+0x216>
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <UART_SetConfig+0x1fe>
 80049ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ce:	d006      	beq.n	80049de <UART_SetConfig+0x20a>
 80049d0:	e00b      	b.n	80049ea <UART_SetConfig+0x216>
 80049d2:	2300      	movs	r3, #0
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e0a1      	b.n	8004b1c <UART_SetConfig+0x348>
 80049d8:	2302      	movs	r3, #2
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e09e      	b.n	8004b1c <UART_SetConfig+0x348>
 80049de:	2304      	movs	r3, #4
 80049e0:	77fb      	strb	r3, [r7, #31]
 80049e2:	e09b      	b.n	8004b1c <UART_SetConfig+0x348>
 80049e4:	2308      	movs	r3, #8
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e098      	b.n	8004b1c <UART_SetConfig+0x348>
 80049ea:	2310      	movs	r3, #16
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e095      	b.n	8004b1c <UART_SetConfig+0x348>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a2f      	ldr	r2, [pc, #188]	; (8004ab4 <UART_SetConfig+0x2e0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d125      	bne.n	8004a46 <UART_SetConfig+0x272>
 80049fa:	4b29      	ldr	r3, [pc, #164]	; (8004aa0 <UART_SetConfig+0x2cc>)
 80049fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a08:	d017      	beq.n	8004a3a <UART_SetConfig+0x266>
 8004a0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a0e:	d817      	bhi.n	8004a40 <UART_SetConfig+0x26c>
 8004a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a14:	d00b      	beq.n	8004a2e <UART_SetConfig+0x25a>
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1a:	d811      	bhi.n	8004a40 <UART_SetConfig+0x26c>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <UART_SetConfig+0x254>
 8004a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a24:	d006      	beq.n	8004a34 <UART_SetConfig+0x260>
 8004a26:	e00b      	b.n	8004a40 <UART_SetConfig+0x26c>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e076      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e073      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a34:	2304      	movs	r3, #4
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e070      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	77fb      	strb	r3, [r7, #31]
 8004a3e:	e06d      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a40:	2310      	movs	r3, #16
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e06a      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1b      	ldr	r2, [pc, #108]	; (8004ab8 <UART_SetConfig+0x2e4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d138      	bne.n	8004ac2 <UART_SetConfig+0x2ee>
 8004a50:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <UART_SetConfig+0x2cc>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a5e:	d017      	beq.n	8004a90 <UART_SetConfig+0x2bc>
 8004a60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a64:	d82a      	bhi.n	8004abc <UART_SetConfig+0x2e8>
 8004a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6a:	d00b      	beq.n	8004a84 <UART_SetConfig+0x2b0>
 8004a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a70:	d824      	bhi.n	8004abc <UART_SetConfig+0x2e8>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <UART_SetConfig+0x2aa>
 8004a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7a:	d006      	beq.n	8004a8a <UART_SetConfig+0x2b6>
 8004a7c:	e01e      	b.n	8004abc <UART_SetConfig+0x2e8>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	77fb      	strb	r3, [r7, #31]
 8004a82:	e04b      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a84:	2302      	movs	r3, #2
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e048      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e045      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a90:	2308      	movs	r3, #8
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e042      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a96:	bf00      	nop
 8004a98:	efff69f3 	.word	0xefff69f3
 8004a9c:	40011000 	.word	0x40011000
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	40004400 	.word	0x40004400
 8004aa8:	40004800 	.word	0x40004800
 8004aac:	40004c00 	.word	0x40004c00
 8004ab0:	40005000 	.word	0x40005000
 8004ab4:	40011400 	.word	0x40011400
 8004ab8:	40007800 	.word	0x40007800
 8004abc:	2310      	movs	r3, #16
 8004abe:	77fb      	strb	r3, [r7, #31]
 8004ac0:	e02c      	b.n	8004b1c <UART_SetConfig+0x348>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a72      	ldr	r2, [pc, #456]	; (8004c90 <UART_SetConfig+0x4bc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d125      	bne.n	8004b18 <UART_SetConfig+0x344>
 8004acc:	4b71      	ldr	r3, [pc, #452]	; (8004c94 <UART_SetConfig+0x4c0>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ad6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ada:	d017      	beq.n	8004b0c <UART_SetConfig+0x338>
 8004adc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ae0:	d817      	bhi.n	8004b12 <UART_SetConfig+0x33e>
 8004ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae6:	d00b      	beq.n	8004b00 <UART_SetConfig+0x32c>
 8004ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aec:	d811      	bhi.n	8004b12 <UART_SetConfig+0x33e>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <UART_SetConfig+0x326>
 8004af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af6:	d006      	beq.n	8004b06 <UART_SetConfig+0x332>
 8004af8:	e00b      	b.n	8004b12 <UART_SetConfig+0x33e>
 8004afa:	2300      	movs	r3, #0
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e00d      	b.n	8004b1c <UART_SetConfig+0x348>
 8004b00:	2302      	movs	r3, #2
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e00a      	b.n	8004b1c <UART_SetConfig+0x348>
 8004b06:	2304      	movs	r3, #4
 8004b08:	77fb      	strb	r3, [r7, #31]
 8004b0a:	e007      	b.n	8004b1c <UART_SetConfig+0x348>
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	e004      	b.n	8004b1c <UART_SetConfig+0x348>
 8004b12:	2310      	movs	r3, #16
 8004b14:	77fb      	strb	r3, [r7, #31]
 8004b16:	e001      	b.n	8004b1c <UART_SetConfig+0x348>
 8004b18:	2310      	movs	r3, #16
 8004b1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b24:	d15b      	bne.n	8004bde <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b26:	7ffb      	ldrb	r3, [r7, #31]
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d828      	bhi.n	8004b7e <UART_SetConfig+0x3aa>
 8004b2c:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0x360>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b61 	.word	0x08004b61
 8004b3c:	08004b69 	.word	0x08004b69
 8004b40:	08004b7f 	.word	0x08004b7f
 8004b44:	08004b6f 	.word	0x08004b6f
 8004b48:	08004b7f 	.word	0x08004b7f
 8004b4c:	08004b7f 	.word	0x08004b7f
 8004b50:	08004b7f 	.word	0x08004b7f
 8004b54:	08004b77 	.word	0x08004b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b58:	f7ff f99e 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8004b5c:	61b8      	str	r0, [r7, #24]
        break;
 8004b5e:	e013      	b.n	8004b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b60:	f7ff f9ae 	bl	8003ec0 <HAL_RCC_GetPCLK2Freq>
 8004b64:	61b8      	str	r0, [r7, #24]
        break;
 8004b66:	e00f      	b.n	8004b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b68:	4b4b      	ldr	r3, [pc, #300]	; (8004c98 <UART_SetConfig+0x4c4>)
 8004b6a:	61bb      	str	r3, [r7, #24]
        break;
 8004b6c:	e00c      	b.n	8004b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6e:	f7ff f881 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8004b72:	61b8      	str	r0, [r7, #24]
        break;
 8004b74:	e008      	b.n	8004b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7a:	61bb      	str	r3, [r7, #24]
        break;
 8004b7c:	e004      	b.n	8004b88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	77bb      	strb	r3, [r7, #30]
        break;
 8004b86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d074      	beq.n	8004c78 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	005a      	lsls	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	441a      	add	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b0f      	cmp	r3, #15
 8004ba8:	d916      	bls.n	8004bd8 <UART_SetConfig+0x404>
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb0:	d212      	bcs.n	8004bd8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f023 030f 	bic.w	r3, r3, #15
 8004bba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	89fb      	ldrh	r3, [r7, #14]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	89fa      	ldrh	r2, [r7, #14]
 8004bd4:	60da      	str	r2, [r3, #12]
 8004bd6:	e04f      	b.n	8004c78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	77bb      	strb	r3, [r7, #30]
 8004bdc:	e04c      	b.n	8004c78 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bde:	7ffb      	ldrb	r3, [r7, #31]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d828      	bhi.n	8004c36 <UART_SetConfig+0x462>
 8004be4:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <UART_SetConfig+0x418>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004c11 	.word	0x08004c11
 8004bf0:	08004c19 	.word	0x08004c19
 8004bf4:	08004c21 	.word	0x08004c21
 8004bf8:	08004c37 	.word	0x08004c37
 8004bfc:	08004c27 	.word	0x08004c27
 8004c00:	08004c37 	.word	0x08004c37
 8004c04:	08004c37 	.word	0x08004c37
 8004c08:	08004c37 	.word	0x08004c37
 8004c0c:	08004c2f 	.word	0x08004c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c10:	f7ff f942 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8004c14:	61b8      	str	r0, [r7, #24]
        break;
 8004c16:	e013      	b.n	8004c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c18:	f7ff f952 	bl	8003ec0 <HAL_RCC_GetPCLK2Freq>
 8004c1c:	61b8      	str	r0, [r7, #24]
        break;
 8004c1e:	e00f      	b.n	8004c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c20:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <UART_SetConfig+0x4c4>)
 8004c22:	61bb      	str	r3, [r7, #24]
        break;
 8004c24:	e00c      	b.n	8004c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c26:	f7ff f825 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8004c2a:	61b8      	str	r0, [r7, #24]
        break;
 8004c2c:	e008      	b.n	8004c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c32:	61bb      	str	r3, [r7, #24]
        break;
 8004c34:	e004      	b.n	8004c40 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c3e:	bf00      	nop
    }

    if (pclk != 0U)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d018      	beq.n	8004c78 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	085a      	lsrs	r2, r3, #1
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	441a      	add	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b0f      	cmp	r3, #15
 8004c5e:	d909      	bls.n	8004c74 <UART_SetConfig+0x4a0>
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c66:	d205      	bcs.n	8004c74 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60da      	str	r2, [r3, #12]
 8004c72:	e001      	b.n	8004c78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c84:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40007c00 	.word	0x40007c00
 8004c94:	40023800 	.word	0x40023800
 8004c98:	00f42400 	.word	0x00f42400

08004c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	f003 0310 	and.w	r3, r3, #16
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01a      	beq.n	8004db2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d9a:	d10a      	bne.n	8004db2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	605a      	str	r2, [r3, #4]
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004df0:	f7fc f894 	bl	8000f1c <HAL_GetTick>
 8004df4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d10e      	bne.n	8004e22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f831 	bl	8004e7a <UART_WaitOnFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e027      	b.n	8004e72 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d10e      	bne.n	8004e4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f81b 	bl	8004e7a <UART_WaitOnFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e011      	b.n	8004e72 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b09c      	sub	sp, #112	; 0x70
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	4613      	mov	r3, r2
 8004e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8a:	e0a7      	b.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e92:	f000 80a3 	beq.w	8004fdc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e96:	f7fc f841 	bl	8000f1c <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d302      	bcc.n	8004eac <UART_WaitOnFlagUntilTimeout+0x32>
 8004ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d13f      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ebc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ec0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ecc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ed0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e6      	bne.n	8004eac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3308      	adds	r3, #8
 8004efc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004efe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e5      	bne.n	8004ede <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e068      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d050      	beq.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f48:	d148      	bne.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f72:	637b      	str	r3, [r7, #52]	; 0x34
 8004f74:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e6      	bne.n	8004f54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	e853 3f00 	ldrex	r3, [r3]
 8004f94:	613b      	str	r3, [r7, #16]
   return(result);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fa6:	623a      	str	r2, [r7, #32]
 8004fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	69f9      	ldr	r1, [r7, #28]
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e5      	bne.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e010      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69da      	ldr	r2, [r3, #28]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	f43f af48 	beq.w	8004e8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3770      	adds	r7, #112	; 0x70
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005008:	b084      	sub	sp, #16
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	f107 001c 	add.w	r0, r7, #28
 8005016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	2b01      	cmp	r3, #1
 800501e:	d120      	bne.n	8005062 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	4b20      	ldr	r3, [pc, #128]	; (80050b4 <USB_CoreInit+0xac>)
 8005032:	4013      	ands	r3, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005046:	2b01      	cmp	r3, #1
 8005048:	d105      	bne.n	8005056 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f001 fbee 	bl	8006838 <USB_CoreReset>
 800505c:	4603      	mov	r3, r0
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	e010      	b.n	8005084 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f001 fbe2 	bl	8006838 <USB_CoreReset>
 8005074:	4603      	mov	r3, r0
 8005076:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	2b01      	cmp	r3, #1
 8005088:	d10b      	bne.n	80050a2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f043 0206 	orr.w	r2, r3, #6
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f043 0220 	orr.w	r2, r3, #32
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050ae:	b004      	add	sp, #16
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	ffbdffbf 	.word	0xffbdffbf

080050b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d165      	bne.n	8005198 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4a41      	ldr	r2, [pc, #260]	; (80051d4 <USB_SetTurnaroundTime+0x11c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d906      	bls.n	80050e2 <USB_SetTurnaroundTime+0x2a>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4a40      	ldr	r2, [pc, #256]	; (80051d8 <USB_SetTurnaroundTime+0x120>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d202      	bcs.n	80050e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80050dc:	230f      	movs	r3, #15
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	e062      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4a3c      	ldr	r2, [pc, #240]	; (80051d8 <USB_SetTurnaroundTime+0x120>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d306      	bcc.n	80050f8 <USB_SetTurnaroundTime+0x40>
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4a3b      	ldr	r2, [pc, #236]	; (80051dc <USB_SetTurnaroundTime+0x124>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d202      	bcs.n	80050f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050f2:	230e      	movs	r3, #14
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	e057      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4a38      	ldr	r2, [pc, #224]	; (80051dc <USB_SetTurnaroundTime+0x124>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d306      	bcc.n	800510e <USB_SetTurnaroundTime+0x56>
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4a37      	ldr	r2, [pc, #220]	; (80051e0 <USB_SetTurnaroundTime+0x128>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d202      	bcs.n	800510e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005108:	230d      	movs	r3, #13
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	e04c      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	4a33      	ldr	r2, [pc, #204]	; (80051e0 <USB_SetTurnaroundTime+0x128>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d306      	bcc.n	8005124 <USB_SetTurnaroundTime+0x6c>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	4a32      	ldr	r2, [pc, #200]	; (80051e4 <USB_SetTurnaroundTime+0x12c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d802      	bhi.n	8005124 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800511e:	230c      	movs	r3, #12
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	e041      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4a2f      	ldr	r2, [pc, #188]	; (80051e4 <USB_SetTurnaroundTime+0x12c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d906      	bls.n	800513a <USB_SetTurnaroundTime+0x82>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4a2e      	ldr	r2, [pc, #184]	; (80051e8 <USB_SetTurnaroundTime+0x130>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d802      	bhi.n	800513a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005134:	230b      	movs	r3, #11
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	e036      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4a2a      	ldr	r2, [pc, #168]	; (80051e8 <USB_SetTurnaroundTime+0x130>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d906      	bls.n	8005150 <USB_SetTurnaroundTime+0x98>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	4a29      	ldr	r2, [pc, #164]	; (80051ec <USB_SetTurnaroundTime+0x134>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d802      	bhi.n	8005150 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800514a:	230a      	movs	r3, #10
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	e02b      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4a26      	ldr	r2, [pc, #152]	; (80051ec <USB_SetTurnaroundTime+0x134>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d906      	bls.n	8005166 <USB_SetTurnaroundTime+0xae>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4a25      	ldr	r2, [pc, #148]	; (80051f0 <USB_SetTurnaroundTime+0x138>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d202      	bcs.n	8005166 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005160:	2309      	movs	r3, #9
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	e020      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	4a21      	ldr	r2, [pc, #132]	; (80051f0 <USB_SetTurnaroundTime+0x138>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d306      	bcc.n	800517c <USB_SetTurnaroundTime+0xc4>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4a20      	ldr	r2, [pc, #128]	; (80051f4 <USB_SetTurnaroundTime+0x13c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d802      	bhi.n	800517c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005176:	2308      	movs	r3, #8
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	e015      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <USB_SetTurnaroundTime+0x13c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d906      	bls.n	8005192 <USB_SetTurnaroundTime+0xda>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4a1c      	ldr	r2, [pc, #112]	; (80051f8 <USB_SetTurnaroundTime+0x140>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d202      	bcs.n	8005192 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800518c:	2307      	movs	r3, #7
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	e00a      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005192:	2306      	movs	r3, #6
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	e007      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800519e:	2309      	movs	r3, #9
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	e001      	b.n	80051a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80051a4:	2309      	movs	r3, #9
 80051a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	029b      	lsls	r3, r3, #10
 80051bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80051c0:	431a      	orrs	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	00d8acbf 	.word	0x00d8acbf
 80051d8:	00e4e1c0 	.word	0x00e4e1c0
 80051dc:	00f42400 	.word	0x00f42400
 80051e0:	01067380 	.word	0x01067380
 80051e4:	011a499f 	.word	0x011a499f
 80051e8:	01312cff 	.word	0x01312cff
 80051ec:	014ca43f 	.word	0x014ca43f
 80051f0:	016e3600 	.word	0x016e3600
 80051f4:	01a6ab1f 	.word	0x01a6ab1f
 80051f8:	01e84800 	.word	0x01e84800

080051fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f043 0201 	orr.w	r2, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f023 0201 	bic.w	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d115      	bne.n	800528e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800526e:	2001      	movs	r0, #1
 8005270:	f7fb fe60 	bl	8000f34 <HAL_Delay>
      ms++;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3301      	adds	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 fa4b 	bl	8006716 <USB_GetMode>
 8005280:	4603      	mov	r3, r0
 8005282:	2b01      	cmp	r3, #1
 8005284:	d01e      	beq.n	80052c4 <USB_SetCurrentMode+0x84>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b31      	cmp	r3, #49	; 0x31
 800528a:	d9f0      	bls.n	800526e <USB_SetCurrentMode+0x2e>
 800528c:	e01a      	b.n	80052c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800528e:	78fb      	ldrb	r3, [r7, #3]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d115      	bne.n	80052c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052a0:	2001      	movs	r0, #1
 80052a2:	f7fb fe47 	bl	8000f34 <HAL_Delay>
      ms++;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3301      	adds	r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f001 fa32 	bl	8006716 <USB_GetMode>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <USB_SetCurrentMode+0x84>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b31      	cmp	r3, #49	; 0x31
 80052bc:	d9f0      	bls.n	80052a0 <USB_SetCurrentMode+0x60>
 80052be:	e001      	b.n	80052c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e005      	b.n	80052d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b32      	cmp	r3, #50	; 0x32
 80052c8:	d101      	bne.n	80052ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052d8:	b084      	sub	sp, #16
 80052da:	b580      	push	{r7, lr}
 80052dc:	b086      	sub	sp, #24
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052f2:	2300      	movs	r3, #0
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	e009      	b.n	800530c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	3340      	adds	r3, #64	; 0x40
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	2200      	movs	r2, #0
 8005304:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	3301      	adds	r3, #1
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b0e      	cmp	r3, #14
 8005310:	d9f2      	bls.n	80052f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d11c      	bne.n	8005352 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005326:	f043 0302 	orr.w	r3, r3, #2
 800532a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	e005      	b.n	800535e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005364:	461a      	mov	r2, r3
 8005366:	2300      	movs	r3, #0
 8005368:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005370:	4619      	mov	r1, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005378:	461a      	mov	r2, r3
 800537a:	680b      	ldr	r3, [r1, #0]
 800537c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	2b01      	cmp	r3, #1
 8005382:	d10c      	bne.n	800539e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005386:	2b00      	cmp	r3, #0
 8005388:	d104      	bne.n	8005394 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800538a:	2100      	movs	r1, #0
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f965 	bl	800565c <USB_SetDevSpeed>
 8005392:	e008      	b.n	80053a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005394:	2101      	movs	r1, #1
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f960 	bl	800565c <USB_SetDevSpeed>
 800539c:	e003      	b.n	80053a6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800539e:	2103      	movs	r1, #3
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f95b 	bl	800565c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053a6:	2110      	movs	r1, #16
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f8f3 	bl	8005594 <USB_FlushTxFifo>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f91f 	bl	80055fc <USB_FlushRxFifo>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ce:	461a      	mov	r2, r3
 80053d0:	2300      	movs	r3, #0
 80053d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053da:	461a      	mov	r2, r3
 80053dc:	2300      	movs	r3, #0
 80053de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	461a      	mov	r2, r3
 80053e8:	2300      	movs	r3, #0
 80053ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	e043      	b.n	800547a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005408:	d118      	bne.n	800543c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	461a      	mov	r2, r3
 800541e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	e013      	b.n	800544e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005432:	461a      	mov	r2, r3
 8005434:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e008      	b.n	800544e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005448:	461a      	mov	r2, r3
 800544a:	2300      	movs	r3, #0
 800544c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545a:	461a      	mov	r2, r3
 800545c:	2300      	movs	r3, #0
 800545e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546c:	461a      	mov	r2, r3
 800546e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005472:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	3301      	adds	r3, #1
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	429a      	cmp	r2, r3
 8005480:	d3b7      	bcc.n	80053f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005482:	2300      	movs	r3, #0
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	e043      	b.n	8005510 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800549a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800549e:	d118      	bne.n	80054d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b2:	461a      	mov	r2, r3
 80054b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e013      	b.n	80054e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c8:	461a      	mov	r2, r3
 80054ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	e008      	b.n	80054e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054de:	461a      	mov	r2, r3
 80054e0:	2300      	movs	r3, #0
 80054e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	461a      	mov	r2, r3
 80054f2:	2300      	movs	r3, #0
 80054f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005502:	461a      	mov	r2, r3
 8005504:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005508:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	3301      	adds	r3, #1
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	429a      	cmp	r2, r3
 8005516:	d3b7      	bcc.n	8005488 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800552a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005538:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	2b00      	cmp	r3, #0
 800553e:	d105      	bne.n	800554c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	f043 0210 	orr.w	r2, r3, #16
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699a      	ldr	r2, [r3, #24]
 8005550:	4b0e      	ldr	r3, [pc, #56]	; (800558c <USB_DevInit+0x2b4>)
 8005552:	4313      	orrs	r3, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d005      	beq.n	800556a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f043 0208 	orr.w	r2, r3, #8
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800556a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556c:	2b01      	cmp	r3, #1
 800556e:	d105      	bne.n	800557c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699a      	ldr	r2, [r3, #24]
 8005574:	4b06      	ldr	r3, [pc, #24]	; (8005590 <USB_DevInit+0x2b8>)
 8005576:	4313      	orrs	r3, r2
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800557c:	7dfb      	ldrb	r3, [r7, #23]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005588:	b004      	add	sp, #16
 800558a:	4770      	bx	lr
 800558c:	803c3800 	.word	0x803c3800
 8005590:	40000004 	.word	0x40000004

08005594 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3301      	adds	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4a13      	ldr	r2, [pc, #76]	; (80055f8 <USB_FlushTxFifo+0x64>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d901      	bls.n	80055b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e01b      	b.n	80055ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	daf2      	bge.n	80055a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	019b      	lsls	r3, r3, #6
 80055c4:	f043 0220 	orr.w	r2, r3, #32
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3301      	adds	r3, #1
 80055d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4a08      	ldr	r2, [pc, #32]	; (80055f8 <USB_FlushTxFifo+0x64>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d901      	bls.n	80055de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e006      	b.n	80055ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d0f0      	beq.n	80055cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	00030d40 	.word	0x00030d40

080055fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3301      	adds	r3, #1
 800560c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4a11      	ldr	r2, [pc, #68]	; (8005658 <USB_FlushRxFifo+0x5c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e018      	b.n	800564c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	daf2      	bge.n	8005608 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2210      	movs	r2, #16
 800562a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3301      	adds	r3, #1
 8005630:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4a08      	ldr	r2, [pc, #32]	; (8005658 <USB_FlushRxFifo+0x5c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d901      	bls.n	800563e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e006      	b.n	800564c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0310 	and.w	r3, r3, #16
 8005646:	2b10      	cmp	r3, #16
 8005648:	d0f0      	beq.n	800562c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	00030d40 	.word	0x00030d40

0800565c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800567c:	4313      	orrs	r3, r2
 800567e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800568e:	b480      	push	{r7}
 8005690:	b087      	sub	sp, #28
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 0306 	and.w	r3, r3, #6
 80056a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80056ae:	2300      	movs	r3, #0
 80056b0:	75fb      	strb	r3, [r7, #23]
 80056b2:	e00a      	b.n	80056ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d002      	beq.n	80056c0 <USB_GetDevSpeed+0x32>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b06      	cmp	r3, #6
 80056be:	d102      	bne.n	80056c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056c0:	2302      	movs	r3, #2
 80056c2:	75fb      	strb	r3, [r7, #23]
 80056c4:	e001      	b.n	80056ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80056c6:	230f      	movs	r3, #15
 80056c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d139      	bne.n	8005768 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	2101      	movs	r1, #1
 8005706:	fa01 f303 	lsl.w	r3, r1, r3
 800570a:	b29b      	uxth	r3, r3
 800570c:	68f9      	ldr	r1, [r7, #12]
 800570e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005712:	4313      	orrs	r3, r2
 8005714:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d153      	bne.n	80057d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	791b      	ldrb	r3, [r3, #4]
 8005746:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005748:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	059b      	lsls	r3, r3, #22
 800574e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005750:	431a      	orrs	r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	0159      	lsls	r1, r3, #5
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	440b      	add	r3, r1
 800575a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575e:	4619      	mov	r1, r3
 8005760:	4b20      	ldr	r3, [pc, #128]	; (80057e4 <USB_ActivateEndpoint+0x10c>)
 8005762:	4313      	orrs	r3, r2
 8005764:	600b      	str	r3, [r1, #0]
 8005766:	e035      	b.n	80057d4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	2101      	movs	r1, #1
 800577a:	fa01 f303 	lsl.w	r3, r1, r3
 800577e:	041b      	lsls	r3, r3, #16
 8005780:	68f9      	ldr	r1, [r7, #12]
 8005782:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005786:	4313      	orrs	r3, r2
 8005788:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d119      	bne.n	80057d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	791b      	ldrb	r3, [r3, #4]
 80057ba:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057bc:	430b      	orrs	r3, r1
 80057be:	431a      	orrs	r2, r3
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	0159      	lsls	r1, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	440b      	add	r3, r1
 80057c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057cc:	4619      	mov	r1, r3
 80057ce:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <USB_ActivateEndpoint+0x10c>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	10008000 	.word	0x10008000

080057e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d161      	bne.n	80058c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800581a:	d11f      	bne.n	800585c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005836:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800583a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	440a      	add	r2, r1
 8005852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005856:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800585a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	2101      	movs	r1, #1
 800586e:	fa01 f303 	lsl.w	r3, r1, r3
 8005872:	b29b      	uxth	r3, r3
 8005874:	43db      	mvns	r3, r3
 8005876:	68f9      	ldr	r1, [r7, #12]
 8005878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800587c:	4013      	ands	r3, r2
 800587e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005886:	69da      	ldr	r2, [r3, #28]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	2101      	movs	r1, #1
 8005892:	fa01 f303 	lsl.w	r3, r1, r3
 8005896:	b29b      	uxth	r3, r3
 8005898:	43db      	mvns	r3, r3
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a0:	4013      	ands	r3, r2
 80058a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	0159      	lsls	r1, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	440b      	add	r3, r1
 80058ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058be:	4619      	mov	r1, r3
 80058c0:	4b35      	ldr	r3, [pc, #212]	; (8005998 <USB_DeactivateEndpoint+0x1b0>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	600b      	str	r3, [r1, #0]
 80058c6:	e060      	b.n	800598a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058de:	d11f      	bne.n	8005920 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800591e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	2101      	movs	r1, #1
 8005932:	fa01 f303 	lsl.w	r3, r1, r3
 8005936:	041b      	lsls	r3, r3, #16
 8005938:	43db      	mvns	r3, r3
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005940:	4013      	ands	r3, r2
 8005942:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	69da      	ldr	r2, [r3, #28]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	2101      	movs	r1, #1
 8005956:	fa01 f303 	lsl.w	r3, r1, r3
 800595a:	041b      	lsls	r3, r3, #16
 800595c:	43db      	mvns	r3, r3
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005964:	4013      	ands	r3, r2
 8005966:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	0159      	lsls	r1, r3, #5
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	440b      	add	r3, r1
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	4619      	mov	r1, r3
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <USB_DeactivateEndpoint+0x1b4>)
 8005986:	4013      	ands	r3, r2
 8005988:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	ec337800 	.word	0xec337800
 800599c:	eff37800 	.word	0xeff37800

080059a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	; 0x28
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	4613      	mov	r3, r2
 80059ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	f040 8163 	bne.w	8005c88 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d132      	bne.n	8005a30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	0159      	lsls	r1, r3, #5
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	440b      	add	r3, r1
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	4619      	mov	r1, r3
 80059e6:	4ba5      	ldr	r3, [pc, #660]	; (8005c7c <USB_EPStartXfer+0x2dc>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	0159      	lsls	r1, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	440b      	add	r3, r1
 8005a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a26:	4619      	mov	r1, r3
 8005a28:	4b95      	ldr	r3, [pc, #596]	; (8005c80 <USB_EPStartXfer+0x2e0>)
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	610b      	str	r3, [r1, #16]
 8005a2e:	e074      	b.n	8005b1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	0159      	lsls	r1, r3, #5
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	440b      	add	r3, r1
 8005a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4b8c      	ldr	r3, [pc, #560]	; (8005c80 <USB_EPStartXfer+0x2e0>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	0159      	lsls	r1, r3, #5
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	440b      	add	r3, r1
 8005a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4b83      	ldr	r3, [pc, #524]	; (8005c7c <USB_EPStartXfer+0x2dc>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a80:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	6999      	ldr	r1, [r3, #24]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	440b      	add	r3, r1
 8005a8c:	1e59      	subs	r1, r3, #1
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a96:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a98:	4b7a      	ldr	r3, [pc, #488]	; (8005c84 <USB_EPStartXfer+0x2e4>)
 8005a9a:	400b      	ands	r3, r1
 8005a9c:	69b9      	ldr	r1, [r7, #24]
 8005a9e:	0148      	lsls	r0, r1, #5
 8005aa0:	69f9      	ldr	r1, [r7, #28]
 8005aa2:	4401      	add	r1, r0
 8005aa4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac2:	69b9      	ldr	r1, [r7, #24]
 8005ac4:	0148      	lsls	r0, r1, #5
 8005ac6:	69f9      	ldr	r1, [r7, #28]
 8005ac8:	4401      	add	r1, r0
 8005aca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	791b      	ldrb	r3, [r3, #4]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d11f      	bne.n	8005b1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	0151      	lsls	r1, r2, #5
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	440a      	add	r2, r1
 8005af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005af8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d14b      	bne.n	8005bb8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d009      	beq.n	8005b3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	461a      	mov	r2, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	791b      	ldrb	r3, [r3, #4]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d128      	bne.n	8005b96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d110      	bne.n	8005b76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	e00f      	b.n	8005b96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	69fa      	ldr	r2, [r7, #28]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e137      	b.n	8005e28 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bd6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	791b      	ldrb	r3, [r3, #4]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d015      	beq.n	8005c0c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 811f 	beq.w	8005e28 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005c00:	69f9      	ldr	r1, [r7, #28]
 8005c02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c06:	4313      	orrs	r3, r2
 8005c08:	634b      	str	r3, [r1, #52]	; 0x34
 8005c0a:	e10d      	b.n	8005e28 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d110      	bne.n	8005c3e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	e00f      	b.n	8005c5e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	6919      	ldr	r1, [r3, #16]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	781a      	ldrb	r2, [r3, #0]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	b298      	uxth	r0, r3
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	4603      	mov	r3, r0
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 faea 	bl	800624c <USB_WritePacket>
 8005c78:	e0d6      	b.n	8005e28 <USB_EPStartXfer+0x488>
 8005c7a:	bf00      	nop
 8005c7c:	e007ffff 	.word	0xe007ffff
 8005c80:	fff80000 	.word	0xfff80000
 8005c84:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	0159      	lsls	r1, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	440b      	add	r3, r1
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4b63      	ldr	r3, [pc, #396]	; (8005e34 <USB_EPStartXfer+0x494>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	0159      	lsls	r1, r3, #5
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	440b      	add	r3, r1
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4b5c      	ldr	r3, [pc, #368]	; (8005e38 <USB_EPStartXfer+0x498>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d123      	bne.n	8005d1c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cea:	69b9      	ldr	r1, [r7, #24]
 8005cec:	0148      	lsls	r0, r1, #5
 8005cee:	69f9      	ldr	r1, [r7, #28]
 8005cf0:	4401      	add	r1, r0
 8005cf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d18:	6113      	str	r3, [r2, #16]
 8005d1a:	e037      	b.n	8005d8c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	699a      	ldr	r2, [r3, #24]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4413      	add	r3, r2
 8005d26:	1e5a      	subs	r2, r3, #1
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	8afa      	ldrh	r2, [r7, #22]
 8005d38:	fb03 f202 	mul.w	r2, r3, r2
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	8afb      	ldrh	r3, [r7, #22]
 8005d50:	04d9      	lsls	r1, r3, #19
 8005d52:	4b3a      	ldr	r3, [pc, #232]	; (8005e3c <USB_EPStartXfer+0x49c>)
 8005d54:	400b      	ands	r3, r1
 8005d56:	69b9      	ldr	r1, [r7, #24]
 8005d58:	0148      	lsls	r0, r1, #5
 8005d5a:	69f9      	ldr	r1, [r7, #28]
 8005d5c:	4401      	add	r1, r0
 8005d5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d62:	4313      	orrs	r3, r2
 8005d64:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d7c:	69b9      	ldr	r1, [r7, #24]
 8005d7e:	0148      	lsls	r0, r1, #5
 8005d80:	69f9      	ldr	r1, [r7, #28]
 8005d82:	4401      	add	r1, r0
 8005d84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d10d      	bne.n	8005dae <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	6919      	ldr	r1, [r3, #16]
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005daa:	460a      	mov	r2, r1
 8005dac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	791b      	ldrb	r3, [r3, #4]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d128      	bne.n	8005e08 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d110      	bne.n	8005de8 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	e00f      	b.n	8005e08 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3720      	adds	r7, #32
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	fff80000 	.word	0xfff80000
 8005e38:	e007ffff 	.word	0xe007ffff
 8005e3c:	1ff80000 	.word	0x1ff80000

08005e40 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	f040 80ce 	bne.w	8005ffe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d132      	bne.n	8005ed0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	0159      	lsls	r1, r3, #5
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	440b      	add	r3, r1
 8005e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e84:	4619      	mov	r1, r3
 8005e86:	4b9a      	ldr	r3, [pc, #616]	; (80060f0 <USB_EP0StartXfer+0x2b0>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	691a      	ldr	r2, [r3, #16]
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	0159      	lsls	r1, r3, #5
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	440b      	add	r3, r1
 8005ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4b8a      	ldr	r3, [pc, #552]	; (80060f4 <USB_EP0StartXfer+0x2b4>)
 8005eca:	4013      	ands	r3, r2
 8005ecc:	610b      	str	r3, [r1, #16]
 8005ece:	e04e      	b.n	8005f6e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005edc:	691a      	ldr	r2, [r3, #16]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	0159      	lsls	r1, r3, #5
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	440b      	add	r3, r1
 8005ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eea:	4619      	mov	r1, r3
 8005eec:	4b81      	ldr	r3, [pc, #516]	; (80060f4 <USB_EP0StartXfer+0x2b4>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	0159      	lsls	r1, r3, #5
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	440b      	add	r3, r1
 8005f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4b78      	ldr	r3, [pc, #480]	; (80060f0 <USB_EP0StartXfer+0x2b0>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	699a      	ldr	r2, [r3, #24]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d903      	bls.n	8005f28 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	0151      	lsls	r1, r2, #5
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	440a      	add	r2, r1
 8005f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f5e:	6939      	ldr	r1, [r7, #16]
 8005f60:	0148      	lsls	r0, r1, #5
 8005f62:	6979      	ldr	r1, [r7, #20]
 8005f64:	4401      	add	r1, r0
 8005f66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d11e      	bne.n	8005fb2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d009      	beq.n	8005f90 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f88:	461a      	mov	r2, r3
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005faa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	e097      	b.n	80060e2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fd0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 8083 	beq.w	80060e2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	f003 030f 	and.w	r3, r3, #15
 8005fec:	2101      	movs	r1, #1
 8005fee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff2:	6979      	ldr	r1, [r7, #20]
 8005ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	634b      	str	r3, [r1, #52]	; 0x34
 8005ffc:	e071      	b.n	80060e2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	0159      	lsls	r1, r3, #5
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	440b      	add	r3, r1
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	4619      	mov	r1, r3
 800601a:	4b36      	ldr	r3, [pc, #216]	; (80060f4 <USB_EP0StartXfer+0x2b4>)
 800601c:	4013      	ands	r3, r2
 800601e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	0159      	lsls	r1, r3, #5
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	440b      	add	r3, r1
 8006036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603a:	4619      	mov	r1, r3
 800603c:	4b2c      	ldr	r3, [pc, #176]	; (80060f0 <USB_EP0StartXfer+0x2b0>)
 800603e:	4013      	ands	r3, r2
 8006040:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006074:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006078:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006090:	6939      	ldr	r1, [r7, #16]
 8006092:	0148      	lsls	r0, r1, #5
 8006094:	6979      	ldr	r1, [r7, #20]
 8006096:	4401      	add	r1, r0
 8006098:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800609c:	4313      	orrs	r3, r2
 800609e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d10d      	bne.n	80060c2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	6919      	ldr	r1, [r3, #16]
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	460a      	mov	r2, r1
 80060c0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	e007ffff 	.word	0xe007ffff
 80060f4:	fff80000 	.word	0xfff80000

080060f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	785b      	ldrb	r3, [r3, #1]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d14a      	bne.n	80061ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800612a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800612e:	f040 8086 	bne.w	800623e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	7812      	ldrb	r2, [r2, #0]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	440a      	add	r2, r1
 800614c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006150:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006154:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	7812      	ldrb	r2, [r2, #0]
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	440a      	add	r2, r1
 8006170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006174:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006178:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3301      	adds	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f242 7210 	movw	r2, #10000	; 0x2710
 8006186:	4293      	cmp	r3, r2
 8006188:	d902      	bls.n	8006190 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	75fb      	strb	r3, [r7, #23]
          break;
 800618e:	e056      	b.n	800623e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061a8:	d0e7      	beq.n	800617a <USB_EPStopXfer+0x82>
 80061aa:	e048      	b.n	800623e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061c4:	d13b      	bne.n	800623e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	7812      	ldrb	r2, [r2, #0]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	7812      	ldrb	r2, [r2, #0]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	440a      	add	r2, r1
 8006204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006208:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800620c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3301      	adds	r3, #1
 8006212:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f242 7210 	movw	r2, #10000	; 0x2710
 800621a:	4293      	cmp	r3, r2
 800621c:	d902      	bls.n	8006224 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	75fb      	strb	r3, [r7, #23]
          break;
 8006222:	e00c      	b.n	800623e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800623c:	d0e7      	beq.n	800620e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800623e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006240:	4618      	mov	r0, r3
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800624c:	b480      	push	{r7}
 800624e:	b089      	sub	sp, #36	; 0x24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	4611      	mov	r1, r2
 8006258:	461a      	mov	r2, r3
 800625a:	460b      	mov	r3, r1
 800625c:	71fb      	strb	r3, [r7, #7]
 800625e:	4613      	mov	r3, r2
 8006260:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800626a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800626e:	2b00      	cmp	r3, #0
 8006270:	d123      	bne.n	80062ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006272:	88bb      	ldrh	r3, [r7, #4]
 8006274:	3303      	adds	r3, #3
 8006276:	089b      	lsrs	r3, r3, #2
 8006278:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800627a:	2300      	movs	r3, #0
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	e018      	b.n	80062b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	031a      	lsls	r2, r3, #12
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	4413      	add	r3, r2
 8006288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800628c:	461a      	mov	r2, r3
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	3301      	adds	r3, #1
 8006298:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	3301      	adds	r3, #1
 800629e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	3301      	adds	r3, #1
 80062a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	3301      	adds	r3, #1
 80062aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	3301      	adds	r3, #1
 80062b0:	61bb      	str	r3, [r7, #24]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d3e2      	bcc.n	8006280 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3724      	adds	r7, #36	; 0x24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b08b      	sub	sp, #44	; 0x2c
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062de:	88fb      	ldrh	r3, [r7, #6]
 80062e0:	089b      	lsrs	r3, r3, #2
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	f003 0303 	and.w	r3, r3, #3
 80062ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062ee:	2300      	movs	r3, #0
 80062f0:	623b      	str	r3, [r7, #32]
 80062f2:	e014      	b.n	800631e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	3301      	adds	r3, #1
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	3301      	adds	r3, #1
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	3301      	adds	r3, #1
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	3301      	adds	r3, #1
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	3301      	adds	r3, #1
 800631c:	623b      	str	r3, [r7, #32]
 800631e:	6a3a      	ldr	r2, [r7, #32]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	429a      	cmp	r2, r3
 8006324:	d3e6      	bcc.n	80062f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006326:	8bfb      	ldrh	r3, [r7, #30]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01e      	beq.n	800636a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006336:	461a      	mov	r2, r3
 8006338:	f107 0310 	add.w	r3, r7, #16
 800633c:	6812      	ldr	r2, [r2, #0]
 800633e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	fa22 f303 	lsr.w	r3, r2, r3
 800634c:	b2da      	uxtb	r2, r3
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	701a      	strb	r2, [r3, #0]
      i++;
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	3301      	adds	r3, #1
 8006356:	623b      	str	r3, [r7, #32]
      pDest++;
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	3301      	adds	r3, #1
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800635e:	8bfb      	ldrh	r3, [r7, #30]
 8006360:	3b01      	subs	r3, #1
 8006362:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006364:	8bfb      	ldrh	r3, [r7, #30]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1ea      	bne.n	8006340 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800636c:	4618      	mov	r0, r3
 800636e:	372c      	adds	r7, #44	; 0x2c
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	785b      	ldrb	r3, [r3, #1]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d12c      	bne.n	80063ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	db12      	blt.n	80063cc <USB_EPSetStall+0x54>
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00f      	beq.n	80063cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	e02b      	b.n	8006446 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	db12      	blt.n	8006426 <USB_EPSetStall+0xae>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00f      	beq.n	8006426 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	0151      	lsls	r1, r2, #5
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	440a      	add	r2, r1
 800641c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006420:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006424:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	0151      	lsls	r1, r2, #5
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	440a      	add	r2, r1
 800643c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006440:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006444:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d128      	bne.n	80064c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	440a      	add	r2, r1
 8006486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800648e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	791b      	ldrb	r3, [r3, #4]
 8006494:	2b03      	cmp	r3, #3
 8006496:	d003      	beq.n	80064a0 <USB_EPClearStall+0x4c>
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	791b      	ldrb	r3, [r3, #4]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d138      	bne.n	8006512 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	e027      	b.n	8006512 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	0151      	lsls	r1, r2, #5
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	440a      	add	r2, r1
 80064d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	791b      	ldrb	r3, [r3, #4]
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d003      	beq.n	80064f2 <USB_EPClearStall+0x9e>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	791b      	ldrb	r3, [r3, #4]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d10f      	bne.n	8006512 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	440a      	add	r2, r1
 8006508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800650c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006510:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800653e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006542:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006554:	68f9      	ldr	r1, [r7, #12]
 8006556:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800655a:	4313      	orrs	r3, r2
 800655c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800659a:	f023 0302 	bic.w	r3, r3, #2
 800659e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b085      	sub	sp, #20
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065c8:	f023 0303 	bic.w	r3, r3, #3
 80065cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065dc:	f043 0302 	orr.w	r3, r3, #2
 80065e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4013      	ands	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006608:	68fb      	ldr	r3, [r7, #12]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	4013      	ands	r3, r2
 8006638:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	0c1b      	lsrs	r3, r3, #16
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800664a:	b480      	push	{r7}
 800664c:	b085      	sub	sp, #20
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	4013      	ands	r3, r2
 800666c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	b29b      	uxth	r3, r3
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800667e:	b480      	push	{r7}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	4013      	ands	r3, r2
 80066aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066ac:	68bb      	ldr	r3, [r7, #8]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b087      	sub	sp, #28
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	460b      	mov	r3, r1
 80066c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ea:	01db      	lsls	r3, r3, #7
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4013      	ands	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006708:	68bb      	ldr	r3, [r7, #8]
}
 800670a:	4618      	mov	r0, r3
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	f003 0301 	and.w	r3, r3, #1
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
	...

08006734 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674e:	4619      	mov	r1, r3
 8006750:	4b09      	ldr	r3, [pc, #36]	; (8006778 <USB_ActivateSetup+0x44>)
 8006752:	4013      	ands	r3, r2
 8006754:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006768:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	fffff800 	.word	0xfffff800

0800677c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	460b      	mov	r3, r1
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	333c      	adds	r3, #60	; 0x3c
 8006792:	3304      	adds	r3, #4
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	4a26      	ldr	r2, [pc, #152]	; (8006834 <USB_EP0_OutStart+0xb8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d90a      	bls.n	80067b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b0:	d101      	bne.n	80067b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e037      	b.n	8006826 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067bc:	461a      	mov	r2, r3
 80067be:	2300      	movs	r3, #0
 80067c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e4:	f043 0318 	orr.w	r3, r3, #24
 80067e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80067fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80067fe:	7afb      	ldrb	r3, [r7, #11]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d10f      	bne.n	8006824 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680a:	461a      	mov	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800681e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006822:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	4f54300a 	.word	0x4f54300a

08006838 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3301      	adds	r3, #1
 8006848:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4a13      	ldr	r2, [pc, #76]	; (800689c <USB_CoreReset+0x64>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d901      	bls.n	8006856 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e01b      	b.n	800688e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	daf2      	bge.n	8006844 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f043 0201 	orr.w	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3301      	adds	r3, #1
 8006872:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4a09      	ldr	r2, [pc, #36]	; (800689c <USB_CoreReset+0x64>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d901      	bls.n	8006880 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e006      	b.n	800688e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b01      	cmp	r3, #1
 800688a:	d0f0      	beq.n	800686e <USB_CoreReset+0x36>

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	00030d40 	.word	0x00030d40

080068a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80068b0:	f002 fd78 	bl	80093a4 <malloc>
 80068b4:	4603      	mov	r3, r0
 80068b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d109      	bne.n	80068d2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	32b0      	adds	r2, #176	; 0xb0
 80068c8:	2100      	movs	r1, #0
 80068ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80068ce:	2302      	movs	r3, #2
 80068d0:	e0d4      	b.n	8006a7c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80068d2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80068d6:	2100      	movs	r1, #0
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f002 fe3f 	bl	800955c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	32b0      	adds	r2, #176	; 0xb0
 80068e8:	68f9      	ldr	r1, [r7, #12]
 80068ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	32b0      	adds	r2, #176	; 0xb0
 80068f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	7c1b      	ldrb	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d138      	bne.n	800697c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800690a:	4b5e      	ldr	r3, [pc, #376]	; (8006a84 <USBD_CDC_Init+0x1e4>)
 800690c:	7819      	ldrb	r1, [r3, #0]
 800690e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006912:	2202      	movs	r2, #2
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f002 fba2 	bl	800905e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800691a:	4b5a      	ldr	r3, [pc, #360]	; (8006a84 <USBD_CDC_Init+0x1e4>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	f003 020f 	and.w	r2, r3, #15
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	440b      	add	r3, r1
 800692e:	3324      	adds	r3, #36	; 0x24
 8006930:	2201      	movs	r2, #1
 8006932:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006934:	4b54      	ldr	r3, [pc, #336]	; (8006a88 <USBD_CDC_Init+0x1e8>)
 8006936:	7819      	ldrb	r1, [r3, #0]
 8006938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800693c:	2202      	movs	r2, #2
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f002 fb8d 	bl	800905e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006944:	4b50      	ldr	r3, [pc, #320]	; (8006a88 <USBD_CDC_Init+0x1e8>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	f003 020f 	and.w	r2, r3, #15
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	440b      	add	r3, r1
 8006958:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800695c:	2201      	movs	r2, #1
 800695e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006960:	4b4a      	ldr	r3, [pc, #296]	; (8006a8c <USBD_CDC_Init+0x1ec>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	f003 020f 	and.w	r2, r3, #15
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	440b      	add	r3, r1
 8006974:	3326      	adds	r3, #38	; 0x26
 8006976:	2210      	movs	r2, #16
 8006978:	801a      	strh	r2, [r3, #0]
 800697a:	e035      	b.n	80069e8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800697c:	4b41      	ldr	r3, [pc, #260]	; (8006a84 <USBD_CDC_Init+0x1e4>)
 800697e:	7819      	ldrb	r1, [r3, #0]
 8006980:	2340      	movs	r3, #64	; 0x40
 8006982:	2202      	movs	r2, #2
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f002 fb6a 	bl	800905e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800698a:	4b3e      	ldr	r3, [pc, #248]	; (8006a84 <USBD_CDC_Init+0x1e4>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	f003 020f 	and.w	r2, r3, #15
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	440b      	add	r3, r1
 800699e:	3324      	adds	r3, #36	; 0x24
 80069a0:	2201      	movs	r2, #1
 80069a2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069a4:	4b38      	ldr	r3, [pc, #224]	; (8006a88 <USBD_CDC_Init+0x1e8>)
 80069a6:	7819      	ldrb	r1, [r3, #0]
 80069a8:	2340      	movs	r3, #64	; 0x40
 80069aa:	2202      	movs	r2, #2
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f002 fb56 	bl	800905e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80069b2:	4b35      	ldr	r3, [pc, #212]	; (8006a88 <USBD_CDC_Init+0x1e8>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	f003 020f 	and.w	r2, r3, #15
 80069ba:	6879      	ldr	r1, [r7, #4]
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	440b      	add	r3, r1
 80069c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069ca:	2201      	movs	r2, #1
 80069cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80069ce:	4b2f      	ldr	r3, [pc, #188]	; (8006a8c <USBD_CDC_Init+0x1ec>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f003 020f 	and.w	r2, r3, #15
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	440b      	add	r3, r1
 80069e2:	3326      	adds	r3, #38	; 0x26
 80069e4:	2210      	movs	r2, #16
 80069e6:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069e8:	4b28      	ldr	r3, [pc, #160]	; (8006a8c <USBD_CDC_Init+0x1ec>)
 80069ea:	7819      	ldrb	r1, [r3, #0]
 80069ec:	2308      	movs	r3, #8
 80069ee:	2203      	movs	r2, #3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f002 fb34 	bl	800905e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80069f6:	4b25      	ldr	r3, [pc, #148]	; (8006a8c <USBD_CDC_Init+0x1ec>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f003 020f 	and.w	r2, r3, #15
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	4613      	mov	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	440b      	add	r3, r1
 8006a0a:	3324      	adds	r3, #36	; 0x24
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	33b0      	adds	r3, #176	; 0xb0
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8006a46:	2302      	movs	r3, #2
 8006a48:	e018      	b.n	8006a7c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	7c1b      	ldrb	r3, [r3, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a52:	4b0d      	ldr	r3, [pc, #52]	; (8006a88 <USBD_CDC_Init+0x1e8>)
 8006a54:	7819      	ldrb	r1, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f002 fbeb 	bl	800923c <USBD_LL_PrepareReceive>
 8006a66:	e008      	b.n	8006a7a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a68:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <USBD_CDC_Init+0x1e8>)
 8006a6a:	7819      	ldrb	r1, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a72:	2340      	movs	r3, #64	; 0x40
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f002 fbe1 	bl	800923c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20000093 	.word	0x20000093
 8006a88:	20000094 	.word	0x20000094
 8006a8c:	20000095 	.word	0x20000095

08006a90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006a9c:	4b3a      	ldr	r3, [pc, #232]	; (8006b88 <USBD_CDC_DeInit+0xf8>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f002 fb01 	bl	80090aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006aa8:	4b37      	ldr	r3, [pc, #220]	; (8006b88 <USBD_CDC_DeInit+0xf8>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	f003 020f 	and.w	r2, r3, #15
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	440b      	add	r3, r1
 8006abc:	3324      	adds	r3, #36	; 0x24
 8006abe:	2200      	movs	r2, #0
 8006ac0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006ac2:	4b32      	ldr	r3, [pc, #200]	; (8006b8c <USBD_CDC_DeInit+0xfc>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f002 faee 	bl	80090aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ace:	4b2f      	ldr	r3, [pc, #188]	; (8006b8c <USBD_CDC_DeInit+0xfc>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	f003 020f 	and.w	r2, r3, #15
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006aea:	4b29      	ldr	r3, [pc, #164]	; (8006b90 <USBD_CDC_DeInit+0x100>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f002 fada 	bl	80090aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006af6:	4b26      	ldr	r3, [pc, #152]	; (8006b90 <USBD_CDC_DeInit+0x100>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f003 020f 	and.w	r2, r3, #15
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	440b      	add	r3, r1
 8006b0a:	3324      	adds	r3, #36	; 0x24
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006b10:	4b1f      	ldr	r3, [pc, #124]	; (8006b90 <USBD_CDC_DeInit+0x100>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f003 020f 	and.w	r2, r3, #15
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	440b      	add	r3, r1
 8006b24:	3326      	adds	r3, #38	; 0x26
 8006b26:	2200      	movs	r2, #0
 8006b28:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	32b0      	adds	r2, #176	; 0xb0
 8006b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01f      	beq.n	8006b7c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	33b0      	adds	r3, #176	; 0xb0
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	32b0      	adds	r2, #176	; 0xb0
 8006b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f002 fc28 	bl	80093b4 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	32b0      	adds	r2, #176	; 0xb0
 8006b6e:	2100      	movs	r1, #0
 8006b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000093 	.word	0x20000093
 8006b8c:	20000094 	.word	0x20000094
 8006b90:	20000095 	.word	0x20000095

08006b94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	32b0      	adds	r2, #176	; 0xb0
 8006ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e0bf      	b.n	8006d44 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d050      	beq.n	8006c72 <USBD_CDC_Setup+0xde>
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	f040 80af 	bne.w	8006d34 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	88db      	ldrh	r3, [r3, #6]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d03a      	beq.n	8006c54 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	b25b      	sxtb	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	da1b      	bge.n	8006c20 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	33b0      	adds	r3, #176	; 0xb0
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006bfe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	88d2      	ldrh	r2, [r2, #6]
 8006c04:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	88db      	ldrh	r3, [r3, #6]
 8006c0a:	2b07      	cmp	r3, #7
 8006c0c:	bf28      	it	cs
 8006c0e:	2307      	movcs	r3, #7
 8006c10:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	89fa      	ldrh	r2, [r7, #14]
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f001 fdad 	bl	8008778 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006c1e:	e090      	b.n	8006d42 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	785a      	ldrb	r2, [r3, #1]
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	88db      	ldrh	r3, [r3, #6]
 8006c2e:	2b3f      	cmp	r3, #63	; 0x3f
 8006c30:	d803      	bhi.n	8006c3a <USBD_CDC_Setup+0xa6>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	88db      	ldrh	r3, [r3, #6]
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	e000      	b.n	8006c3c <USBD_CDC_Setup+0xa8>
 8006c3a:	2240      	movs	r2, #64	; 0x40
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006c42:	6939      	ldr	r1, [r7, #16]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 fdbf 	bl	80087d0 <USBD_CtlPrepareRx>
      break;
 8006c52:	e076      	b.n	8006d42 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	33b0      	adds	r3, #176	; 0xb0
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	7850      	ldrb	r0, [r2, #1]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	4798      	blx	r3
      break;
 8006c70:	e067      	b.n	8006d42 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	2b0b      	cmp	r3, #11
 8006c78:	d851      	bhi.n	8006d1e <USBD_CDC_Setup+0x18a>
 8006c7a:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <USBD_CDC_Setup+0xec>)
 8006c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c80:	08006cb1 	.word	0x08006cb1
 8006c84:	08006d2d 	.word	0x08006d2d
 8006c88:	08006d1f 	.word	0x08006d1f
 8006c8c:	08006d1f 	.word	0x08006d1f
 8006c90:	08006d1f 	.word	0x08006d1f
 8006c94:	08006d1f 	.word	0x08006d1f
 8006c98:	08006d1f 	.word	0x08006d1f
 8006c9c:	08006d1f 	.word	0x08006d1f
 8006ca0:	08006d1f 	.word	0x08006d1f
 8006ca4:	08006d1f 	.word	0x08006d1f
 8006ca8:	08006cdb 	.word	0x08006cdb
 8006cac:	08006d05 	.word	0x08006d05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d107      	bne.n	8006ccc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006cbc:	f107 030a 	add.w	r3, r7, #10
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 fd57 	bl	8008778 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cca:	e032      	b.n	8006d32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 fce1 	bl	8008696 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	75fb      	strb	r3, [r7, #23]
          break;
 8006cd8:	e02b      	b.n	8006d32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d107      	bne.n	8006cf6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ce6:	f107 030d 	add.w	r3, r7, #13
 8006cea:	2201      	movs	r2, #1
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 fd42 	bl	8008778 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cf4:	e01d      	b.n	8006d32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fccc 	bl	8008696 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	75fb      	strb	r3, [r7, #23]
          break;
 8006d02:	e016      	b.n	8006d32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d00f      	beq.n	8006d30 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 fcbf 	bl	8008696 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d1c:	e008      	b.n	8006d30 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fcb8 	bl	8008696 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d26:	2303      	movs	r3, #3
 8006d28:	75fb      	strb	r3, [r7, #23]
          break;
 8006d2a:	e002      	b.n	8006d32 <USBD_CDC_Setup+0x19e>
          break;
 8006d2c:	bf00      	nop
 8006d2e:	e008      	b.n	8006d42 <USBD_CDC_Setup+0x1ae>
          break;
 8006d30:	bf00      	nop
      }
      break;
 8006d32:	e006      	b.n	8006d42 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 fcad 	bl	8008696 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d40:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	32b0      	adds	r2, #176	; 0xb0
 8006d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e065      	b.n	8006e42 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	32b0      	adds	r2, #176	; 0xb0
 8006d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	f003 020f 	and.w	r2, r3, #15
 8006d8c:	6879      	ldr	r1, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	440b      	add	r3, r1
 8006d98:	3318      	adds	r3, #24
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d02f      	beq.n	8006e00 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006da0:	78fb      	ldrb	r3, [r7, #3]
 8006da2:	f003 020f 	and.w	r2, r3, #15
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	4613      	mov	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	440b      	add	r3, r1
 8006db2:	3318      	adds	r3, #24
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	f003 010f 	and.w	r1, r3, #15
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	440b      	add	r3, r1
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4403      	add	r3, r0
 8006dc8:	3348      	adds	r3, #72	; 0x48
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006dd0:	fb01 f303 	mul.w	r3, r1, r3
 8006dd4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d112      	bne.n	8006e00 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006dda:	78fb      	ldrb	r3, [r7, #3]
 8006ddc:	f003 020f 	and.w	r2, r3, #15
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	3318      	adds	r3, #24
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006df2:	78f9      	ldrb	r1, [r7, #3]
 8006df4:	2300      	movs	r3, #0
 8006df6:	2200      	movs	r2, #0
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f002 f9fe 	bl	80091fa <USBD_LL_Transmit>
 8006dfe:	e01f      	b.n	8006e40 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	33b0      	adds	r3, #176	; 0xb0
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d010      	beq.n	8006e40 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	33b0      	adds	r3, #176	; 0xb0
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	460b      	mov	r3, r1
 8006e54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	32b0      	adds	r2, #176	; 0xb0
 8006e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	32b0      	adds	r2, #176	; 0xb0
 8006e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e01a      	b.n	8006eb2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e7c:	78fb      	ldrb	r3, [r7, #3]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f002 f9fc 	bl	800927e <USBD_LL_GetRxDataSize>
 8006e86:	4602      	mov	r2, r0
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	33b0      	adds	r3, #176	; 0xb0
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006eac:	4611      	mov	r1, r2
 8006eae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	32b0      	adds	r2, #176	; 0xb0
 8006ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e025      	b.n	8006f28 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	33b0      	adds	r3, #176	; 0xb0
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01a      	beq.n	8006f26 <USBD_CDC_EP0_RxReady+0x6c>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ef6:	2bff      	cmp	r3, #255	; 0xff
 8006ef8:	d015      	beq.n	8006f26 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	33b0      	adds	r3, #176	; 0xb0
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006f12:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f1a:	b292      	uxth	r2, r2
 8006f1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	22ff      	movs	r2, #255	; 0xff
 8006f22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f38:	2182      	movs	r1, #130	; 0x82
 8006f3a:	4818      	ldr	r0, [pc, #96]	; (8006f9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f3c:	f000 fd49 	bl	80079d2 <USBD_GetEpDesc>
 8006f40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f42:	2101      	movs	r1, #1
 8006f44:	4815      	ldr	r0, [pc, #84]	; (8006f9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f46:	f000 fd44 	bl	80079d2 <USBD_GetEpDesc>
 8006f4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f4c:	2181      	movs	r1, #129	; 0x81
 8006f4e:	4813      	ldr	r0, [pc, #76]	; (8006f9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f50:	f000 fd3f 	bl	80079d2 <USBD_GetEpDesc>
 8006f54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2210      	movs	r2, #16
 8006f60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d006      	beq.n	8006f76 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f70:	711a      	strb	r2, [r3, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d006      	beq.n	8006f8a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f84:	711a      	strb	r2, [r3, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2243      	movs	r2, #67	; 0x43
 8006f8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f90:	4b02      	ldr	r3, [pc, #8]	; (8006f9c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000050 	.word	0x20000050

08006fa0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fa8:	2182      	movs	r1, #130	; 0x82
 8006faa:	4818      	ldr	r0, [pc, #96]	; (800700c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fac:	f000 fd11 	bl	80079d2 <USBD_GetEpDesc>
 8006fb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	4815      	ldr	r0, [pc, #84]	; (800700c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fb6:	f000 fd0c 	bl	80079d2 <USBD_GetEpDesc>
 8006fba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fbc:	2181      	movs	r1, #129	; 0x81
 8006fbe:	4813      	ldr	r0, [pc, #76]	; (800700c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fc0:	f000 fd07 	bl	80079d2 <USBD_GetEpDesc>
 8006fc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2210      	movs	r2, #16
 8006fd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d006      	beq.n	8006fe6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	711a      	strb	r2, [r3, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f042 0202 	orr.w	r2, r2, #2
 8006fe4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d006      	beq.n	8006ffa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	711a      	strb	r2, [r3, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f042 0202 	orr.w	r2, r2, #2
 8006ff8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2243      	movs	r2, #67	; 0x43
 8006ffe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007000:	4b02      	ldr	r3, [pc, #8]	; (800700c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20000050 	.word	0x20000050

08007010 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007018:	2182      	movs	r1, #130	; 0x82
 800701a:	4818      	ldr	r0, [pc, #96]	; (800707c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800701c:	f000 fcd9 	bl	80079d2 <USBD_GetEpDesc>
 8007020:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007022:	2101      	movs	r1, #1
 8007024:	4815      	ldr	r0, [pc, #84]	; (800707c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007026:	f000 fcd4 	bl	80079d2 <USBD_GetEpDesc>
 800702a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800702c:	2181      	movs	r1, #129	; 0x81
 800702e:	4813      	ldr	r0, [pc, #76]	; (800707c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007030:	f000 fccf 	bl	80079d2 <USBD_GetEpDesc>
 8007034:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2210      	movs	r2, #16
 8007040:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d006      	beq.n	8007056 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	2200      	movs	r2, #0
 800704c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007050:	711a      	strb	r2, [r3, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d006      	beq.n	800706a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007064:	711a      	strb	r2, [r3, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2243      	movs	r2, #67	; 0x43
 800706e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007070:	4b02      	ldr	r3, [pc, #8]	; (800707c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20000050 	.word	0x20000050

08007080 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	220a      	movs	r2, #10
 800708c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800708e:	4b03      	ldr	r3, [pc, #12]	; (800709c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	2000000c 	.word	0x2000000c

080070a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e009      	b.n	80070c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	33b0      	adds	r3, #176	; 0xb0
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	32b0      	adds	r2, #176	; 0xb0
 80070ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e008      	b.n	800710c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	32b0      	adds	r2, #176	; 0xb0
 800712c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007130:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007138:	2303      	movs	r3, #3
 800713a:	e004      	b.n	8007146 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
	...

08007154 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	32b0      	adds	r2, #176	; 0xb0
 8007166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800716c:	2301      	movs	r3, #1
 800716e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007176:	2303      	movs	r3, #3
 8007178:	e025      	b.n	80071c6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007180:	2b00      	cmp	r3, #0
 8007182:	d11f      	bne.n	80071c4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2201      	movs	r2, #1
 8007188:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800718c:	4b10      	ldr	r3, [pc, #64]	; (80071d0 <USBD_CDC_TransmitPacket+0x7c>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	f003 020f 	and.w	r2, r3, #15
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	4613      	mov	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4403      	add	r3, r0
 80071a6:	3318      	adds	r3, #24
 80071a8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80071aa:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <USBD_CDC_TransmitPacket+0x7c>)
 80071ac:	7819      	ldrb	r1, [r3, #0]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f002 f81d 	bl	80091fa <USBD_LL_Transmit>

    ret = USBD_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20000093 	.word	0x20000093

080071d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	32b0      	adds	r2, #176	; 0xb0
 80071e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	32b0      	adds	r2, #176	; 0xb0
 80071f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80071fe:	2303      	movs	r3, #3
 8007200:	e018      	b.n	8007234 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	7c1b      	ldrb	r3, [r3, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10a      	bne.n	8007220 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800720a:	4b0c      	ldr	r3, [pc, #48]	; (800723c <USBD_CDC_ReceivePacket+0x68>)
 800720c:	7819      	ldrb	r1, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f002 f80f 	bl	800923c <USBD_LL_PrepareReceive>
 800721e:	e008      	b.n	8007232 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007220:	4b06      	ldr	r3, [pc, #24]	; (800723c <USBD_CDC_ReceivePacket+0x68>)
 8007222:	7819      	ldrb	r1, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800722a:	2340      	movs	r3, #64	; 0x40
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f002 f805 	bl	800923c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	20000094 	.word	0x20000094

08007240 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	4613      	mov	r3, r2
 800724c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007254:	2303      	movs	r3, #3
 8007256:	e01f      	b.n	8007298 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	79fa      	ldrb	r2, [r7, #7]
 800728a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f001 fe7f 	bl	8008f90 <USBD_LL_Init>
 8007292:	4603      	mov	r3, r0
 8007294:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007296:	7dfb      	ldrb	r3, [r7, #23]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e025      	b.n	8007304 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	32ae      	adds	r2, #174	; 0xae
 80072ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00f      	beq.n	80072f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	32ae      	adds	r2, #174	; 0xae
 80072de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e4:	f107 020e 	add.w	r2, r7, #14
 80072e8:	4610      	mov	r0, r2
 80072ea:	4798      	blx	r3
 80072ec:	4602      	mov	r2, r0
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 fe87 	bl	8009028 <USBD_LL_Start>
 800731a:	4603      	mov	r3, r0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800732c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800732e:	4618      	mov	r0, r3
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007350:	2b00      	cmp	r3, #0
 8007352:	d009      	beq.n	8007368 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	78fa      	ldrb	r2, [r7, #3]
 800735e:	4611      	mov	r1, r2
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007368:	7bfb      	ldrb	r3, [r7, #15]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b084      	sub	sp, #16
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	460b      	mov	r3, r1
 800737c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	78fa      	ldrb	r2, [r7, #3]
 800738c:	4611      	mov	r1, r2
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	4798      	blx	r3
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007398:	2303      	movs	r3, #3
 800739a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800739c:	7bfb      	ldrb	r3, [r7, #15]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f001 f932 	bl	8008622 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80073cc:	461a      	mov	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073da:	f003 031f 	and.w	r3, r3, #31
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d01a      	beq.n	8007418 <USBD_LL_SetupStage+0x72>
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d822      	bhi.n	800742c <USBD_LL_SetupStage+0x86>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <USBD_LL_SetupStage+0x4a>
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d00a      	beq.n	8007404 <USBD_LL_SetupStage+0x5e>
 80073ee:	e01d      	b.n	800742c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fb5f 	bl	8007abc <USBD_StdDevReq>
 80073fe:	4603      	mov	r3, r0
 8007400:	73fb      	strb	r3, [r7, #15]
      break;
 8007402:	e020      	b.n	8007446 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fbc7 	bl	8007ba0 <USBD_StdItfReq>
 8007412:	4603      	mov	r3, r0
 8007414:	73fb      	strb	r3, [r7, #15]
      break;
 8007416:	e016      	b.n	8007446 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fc29 	bl	8007c78 <USBD_StdEPReq>
 8007426:	4603      	mov	r3, r0
 8007428:	73fb      	strb	r3, [r7, #15]
      break;
 800742a:	e00c      	b.n	8007446 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007432:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007436:	b2db      	uxtb	r3, r3
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 fe54 	bl	80090e8 <USBD_LL_StallEP>
 8007440:	4603      	mov	r3, r0
 8007442:	73fb      	strb	r3, [r7, #15]
      break;
 8007444:	bf00      	nop
  }

  return ret;
 8007446:	7bfb      	ldrb	r3, [r7, #15]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	460b      	mov	r3, r1
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007462:	7afb      	ldrb	r3, [r7, #11]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d16e      	bne.n	8007546 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800746e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007476:	2b03      	cmp	r3, #3
 8007478:	f040 8098 	bne.w	80075ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	429a      	cmp	r2, r3
 8007486:	d913      	bls.n	80074b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	1ad2      	subs	r2, r2, r3
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	4293      	cmp	r3, r2
 80074a0:	bf28      	it	cs
 80074a2:	4613      	movcs	r3, r2
 80074a4:	461a      	mov	r2, r3
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f001 f9ae 	bl	800880a <USBD_CtlContinueRx>
 80074ae:	e07d      	b.n	80075ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074b6:	f003 031f 	and.w	r3, r3, #31
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d014      	beq.n	80074e8 <USBD_LL_DataOutStage+0x98>
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d81d      	bhi.n	80074fe <USBD_LL_DataOutStage+0xae>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <USBD_LL_DataOutStage+0x7c>
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d003      	beq.n	80074d2 <USBD_LL_DataOutStage+0x82>
 80074ca:	e018      	b.n	80074fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	75bb      	strb	r3, [r7, #22]
            break;
 80074d0:	e018      	b.n	8007504 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	4619      	mov	r1, r3
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 fa5e 	bl	800799e <USBD_CoreFindIF>
 80074e2:	4603      	mov	r3, r0
 80074e4:	75bb      	strb	r3, [r7, #22]
            break;
 80074e6:	e00d      	b.n	8007504 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	4619      	mov	r1, r3
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 fa60 	bl	80079b8 <USBD_CoreFindEP>
 80074f8:	4603      	mov	r3, r0
 80074fa:	75bb      	strb	r3, [r7, #22]
            break;
 80074fc:	e002      	b.n	8007504 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	75bb      	strb	r3, [r7, #22]
            break;
 8007502:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007504:	7dbb      	ldrb	r3, [r7, #22]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d119      	bne.n	800753e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b03      	cmp	r3, #3
 8007514:	d113      	bne.n	800753e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007516:	7dba      	ldrb	r2, [r7, #22]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	32ae      	adds	r2, #174	; 0xae
 800751c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00b      	beq.n	800753e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007526:	7dba      	ldrb	r2, [r7, #22]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800752e:	7dba      	ldrb	r2, [r7, #22]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	32ae      	adds	r2, #174	; 0xae
 8007534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f001 f974 	bl	800882c <USBD_CtlSendStatus>
 8007544:	e032      	b.n	80075ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007546:	7afb      	ldrb	r3, [r7, #11]
 8007548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800754c:	b2db      	uxtb	r3, r3
 800754e:	4619      	mov	r1, r3
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fa31 	bl	80079b8 <USBD_CoreFindEP>
 8007556:	4603      	mov	r3, r0
 8007558:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800755a:	7dbb      	ldrb	r3, [r7, #22]
 800755c:	2bff      	cmp	r3, #255	; 0xff
 800755e:	d025      	beq.n	80075ac <USBD_LL_DataOutStage+0x15c>
 8007560:	7dbb      	ldrb	r3, [r7, #22]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d122      	bne.n	80075ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b03      	cmp	r3, #3
 8007570:	d117      	bne.n	80075a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007572:	7dba      	ldrb	r2, [r7, #22]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	32ae      	adds	r2, #174	; 0xae
 8007578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00f      	beq.n	80075a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007582:	7dba      	ldrb	r2, [r7, #22]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800758a:	7dba      	ldrb	r2, [r7, #22]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	32ae      	adds	r2, #174	; 0xae
 8007590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	7afa      	ldrb	r2, [r7, #11]
 8007598:	4611      	mov	r1, r2
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	4798      	blx	r3
 800759e:	4603      	mov	r3, r0
 80075a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80075a8:	7dfb      	ldrb	r3, [r7, #23]
 80075aa:	e000      	b.n	80075ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b086      	sub	sp, #24
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	460b      	mov	r3, r1
 80075c0:	607a      	str	r2, [r7, #4]
 80075c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80075c4:	7afb      	ldrb	r3, [r7, #11]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d16f      	bne.n	80076aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3314      	adds	r3, #20
 80075ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d15a      	bne.n	8007690 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d914      	bls.n	8007610 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	1ad2      	subs	r2, r2, r3
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	461a      	mov	r2, r3
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f001 f8d6 	bl	80087ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007602:	2300      	movs	r3, #0
 8007604:	2200      	movs	r2, #0
 8007606:	2100      	movs	r1, #0
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f001 fe17 	bl	800923c <USBD_LL_PrepareReceive>
 800760e:	e03f      	b.n	8007690 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	429a      	cmp	r2, r3
 800761a:	d11c      	bne.n	8007656 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007624:	429a      	cmp	r2, r3
 8007626:	d316      	bcc.n	8007656 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007632:	429a      	cmp	r2, r3
 8007634:	d20f      	bcs.n	8007656 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007636:	2200      	movs	r2, #0
 8007638:	2100      	movs	r1, #0
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f001 f8b7 	bl	80087ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007648:	2300      	movs	r3, #0
 800764a:	2200      	movs	r2, #0
 800764c:	2100      	movs	r1, #0
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f001 fdf4 	bl	800923c <USBD_LL_PrepareReceive>
 8007654:	e01c      	b.n	8007690 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b03      	cmp	r3, #3
 8007660:	d10f      	bne.n	8007682 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d009      	beq.n	8007682 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007682:	2180      	movs	r1, #128	; 0x80
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f001 fd2f 	bl	80090e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f001 f8e1 	bl	8008852 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d03a      	beq.n	8007710 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7ff fe42 	bl	8007324 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80076a8:	e032      	b.n	8007710 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80076aa:	7afb      	ldrb	r3, [r7, #11]
 80076ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	4619      	mov	r1, r3
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f97f 	bl	80079b8 <USBD_CoreFindEP>
 80076ba:	4603      	mov	r3, r0
 80076bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076be:	7dfb      	ldrb	r3, [r7, #23]
 80076c0:	2bff      	cmp	r3, #255	; 0xff
 80076c2:	d025      	beq.n	8007710 <USBD_LL_DataInStage+0x15a>
 80076c4:	7dfb      	ldrb	r3, [r7, #23]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d122      	bne.n	8007710 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d11c      	bne.n	8007710 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80076d6:	7dfa      	ldrb	r2, [r7, #23]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	32ae      	adds	r2, #174	; 0xae
 80076dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d014      	beq.n	8007710 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80076e6:	7dfa      	ldrb	r2, [r7, #23]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80076ee:	7dfa      	ldrb	r2, [r7, #23]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	32ae      	adds	r2, #174	; 0xae
 80076f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	7afa      	ldrb	r2, [r7, #11]
 80076fc:	4611      	mov	r1, r2
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	4798      	blx	r3
 8007702:	4603      	mov	r3, r0
 8007704:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007706:	7dbb      	ldrb	r3, [r7, #22]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800770c:	7dbb      	ldrb	r3, [r7, #22]
 800770e:	e000      	b.n	8007712 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007752:	2b00      	cmp	r3, #0
 8007754:	d014      	beq.n	8007780 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00e      	beq.n	8007780 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6852      	ldr	r2, [r2, #4]
 800776e:	b2d2      	uxtb	r2, r2
 8007770:	4611      	mov	r1, r2
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	4798      	blx	r3
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800777c:	2303      	movs	r3, #3
 800777e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007780:	2340      	movs	r3, #64	; 0x40
 8007782:	2200      	movs	r2, #0
 8007784:	2100      	movs	r1, #0
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 fc69 	bl	800905e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2240      	movs	r2, #64	; 0x40
 8007798:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800779c:	2340      	movs	r3, #64	; 0x40
 800779e:	2200      	movs	r2, #0
 80077a0:	2180      	movs	r1, #128	; 0x80
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 fc5b 	bl	800905e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2240      	movs	r2, #64	; 0x40
 80077b2:	621a      	str	r2, [r3, #32]

  return ret;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	460b      	mov	r3, r1
 80077c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	78fa      	ldrb	r2, [r7, #3]
 80077ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2204      	movs	r2, #4
 80077f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b04      	cmp	r3, #4
 800781c:	d106      	bne.n	800782c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007824:	b2da      	uxtb	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b03      	cmp	r3, #3
 800784c:	d110      	bne.n	8007870 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d005      	beq.n	8007870 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	32ae      	adds	r2, #174	; 0xae
 8007890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007898:	2303      	movs	r3, #3
 800789a:	e01c      	b.n	80078d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d115      	bne.n	80078d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	32ae      	adds	r2, #174	; 0xae
 80078b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00b      	beq.n	80078d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	32ae      	adds	r2, #174	; 0xae
 80078c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	78fa      	ldrb	r2, [r7, #3]
 80078ce:	4611      	mov	r1, r2
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	460b      	mov	r3, r1
 80078e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	32ae      	adds	r2, #174	; 0xae
 80078f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e01c      	b.n	800793a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b03      	cmp	r3, #3
 800790a:	d115      	bne.n	8007938 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	32ae      	adds	r2, #174	; 0xae
 8007916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00b      	beq.n	8007938 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	32ae      	adds	r2, #174	; 0xae
 800792a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	78fa      	ldrb	r2, [r7, #3]
 8007932:	4611      	mov	r1, r2
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00e      	beq.n	8007994 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6852      	ldr	r2, [r2, #4]
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	4611      	mov	r1, r2
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	4798      	blx	r3
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007990:	2303      	movs	r3, #3
 8007992:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007994:	7bfb      	ldrb	r3, [r7, #15]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	460b      	mov	r3, r1
 80079a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b086      	sub	sp, #24
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	885b      	ldrh	r3, [r3, #2]
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d920      	bls.n	8007a3c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a02:	e013      	b.n	8007a2c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a04:	f107 030a 	add.w	r3, r7, #10
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6978      	ldr	r0, [r7, #20]
 8007a0c:	f000 f81b 	bl	8007a46 <USBD_GetNextDesc>
 8007a10:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	2b05      	cmp	r3, #5
 8007a18:	d108      	bne.n	8007a2c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	789b      	ldrb	r3, [r3, #2]
 8007a22:	78fa      	ldrb	r2, [r7, #3]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d008      	beq.n	8007a3a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	885b      	ldrh	r3, [r3, #2]
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	897b      	ldrh	r3, [r7, #10]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d8e5      	bhi.n	8007a04 <USBD_GetEpDesc+0x32>
 8007a38:	e000      	b.n	8007a3c <USBD_GetEpDesc+0x6a>
          break;
 8007a3a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007a3c:	693b      	ldr	r3, [r7, #16]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	881a      	ldrh	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	4413      	add	r3, r2
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4413      	add	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a72:	68fb      	ldr	r3, [r7, #12]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	3301      	adds	r3, #1
 8007a96:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a9e:	8a3b      	ldrh	r3, [r7, #16]
 8007aa0:	021b      	lsls	r3, r3, #8
 8007aa2:	b21a      	sxth	r2, r3
 8007aa4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	b21b      	sxth	r3, r3
 8007aac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007aae:	89fb      	ldrh	r3, [r7, #14]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	371c      	adds	r7, #28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ad2:	2b40      	cmp	r3, #64	; 0x40
 8007ad4:	d005      	beq.n	8007ae2 <USBD_StdDevReq+0x26>
 8007ad6:	2b40      	cmp	r3, #64	; 0x40
 8007ad8:	d857      	bhi.n	8007b8a <USBD_StdDevReq+0xce>
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00f      	beq.n	8007afe <USBD_StdDevReq+0x42>
 8007ade:	2b20      	cmp	r3, #32
 8007ae0:	d153      	bne.n	8007b8a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	32ae      	adds	r2, #174	; 0xae
 8007aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	4798      	blx	r3
 8007af8:	4603      	mov	r3, r0
 8007afa:	73fb      	strb	r3, [r7, #15]
      break;
 8007afc:	e04a      	b.n	8007b94 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b09      	cmp	r3, #9
 8007b04:	d83b      	bhi.n	8007b7e <USBD_StdDevReq+0xc2>
 8007b06:	a201      	add	r2, pc, #4	; (adr r2, 8007b0c <USBD_StdDevReq+0x50>)
 8007b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0c:	08007b61 	.word	0x08007b61
 8007b10:	08007b75 	.word	0x08007b75
 8007b14:	08007b7f 	.word	0x08007b7f
 8007b18:	08007b6b 	.word	0x08007b6b
 8007b1c:	08007b7f 	.word	0x08007b7f
 8007b20:	08007b3f 	.word	0x08007b3f
 8007b24:	08007b35 	.word	0x08007b35
 8007b28:	08007b7f 	.word	0x08007b7f
 8007b2c:	08007b57 	.word	0x08007b57
 8007b30:	08007b49 	.word	0x08007b49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fa3c 	bl	8007fb4 <USBD_GetDescriptor>
          break;
 8007b3c:	e024      	b.n	8007b88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fbcb 	bl	80082dc <USBD_SetAddress>
          break;
 8007b46:	e01f      	b.n	8007b88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fc0a 	bl	8008364 <USBD_SetConfig>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]
          break;
 8007b54:	e018      	b.n	8007b88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fcad 	bl	80084b8 <USBD_GetConfig>
          break;
 8007b5e:	e013      	b.n	8007b88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fcde 	bl	8008524 <USBD_GetStatus>
          break;
 8007b68:	e00e      	b.n	8007b88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fd0d 	bl	800858c <USBD_SetFeature>
          break;
 8007b72:	e009      	b.n	8007b88 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fd31 	bl	80085de <USBD_ClrFeature>
          break;
 8007b7c:	e004      	b.n	8007b88 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fd88 	bl	8008696 <USBD_CtlError>
          break;
 8007b86:	bf00      	nop
      }
      break;
 8007b88:	e004      	b.n	8007b94 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fd82 	bl	8008696 <USBD_CtlError>
      break;
 8007b92:	bf00      	nop
  }

  return ret;
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop

08007ba0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bb6:	2b40      	cmp	r3, #64	; 0x40
 8007bb8:	d005      	beq.n	8007bc6 <USBD_StdItfReq+0x26>
 8007bba:	2b40      	cmp	r3, #64	; 0x40
 8007bbc:	d852      	bhi.n	8007c64 <USBD_StdItfReq+0xc4>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <USBD_StdItfReq+0x26>
 8007bc2:	2b20      	cmp	r3, #32
 8007bc4:	d14e      	bne.n	8007c64 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d840      	bhi.n	8007c56 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	889b      	ldrh	r3, [r3, #4]
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d836      	bhi.n	8007c4c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	889b      	ldrh	r3, [r3, #4]
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff fed9 	bl	800799e <USBD_CoreFindIF>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	2bff      	cmp	r3, #255	; 0xff
 8007bf4:	d01d      	beq.n	8007c32 <USBD_StdItfReq+0x92>
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d11a      	bne.n	8007c32 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007bfc:	7bba      	ldrb	r2, [r7, #14]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	32ae      	adds	r2, #174	; 0xae
 8007c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00f      	beq.n	8007c2c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c0c:	7bba      	ldrb	r2, [r7, #14]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c14:	7bba      	ldrb	r2, [r7, #14]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	32ae      	adds	r2, #174	; 0xae
 8007c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	4798      	blx	r3
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c2a:	e004      	b.n	8007c36 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c30:	e001      	b.n	8007c36 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007c32:	2303      	movs	r3, #3
 8007c34:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	88db      	ldrh	r3, [r3, #6]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d110      	bne.n	8007c60 <USBD_StdItfReq+0xc0>
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10d      	bne.n	8007c60 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fdf1 	bl	800882c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c4a:	e009      	b.n	8007c60 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fd21 	bl	8008696 <USBD_CtlError>
          break;
 8007c54:	e004      	b.n	8007c60 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fd1c 	bl	8008696 <USBD_CtlError>
          break;
 8007c5e:	e000      	b.n	8007c62 <USBD_StdItfReq+0xc2>
          break;
 8007c60:	bf00      	nop
      }
      break;
 8007c62:	e004      	b.n	8007c6e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fd15 	bl	8008696 <USBD_CtlError>
      break;
 8007c6c:	bf00      	nop
  }

  return ret;
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	889b      	ldrh	r3, [r3, #4]
 8007c8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c94:	2b40      	cmp	r3, #64	; 0x40
 8007c96:	d007      	beq.n	8007ca8 <USBD_StdEPReq+0x30>
 8007c98:	2b40      	cmp	r3, #64	; 0x40
 8007c9a:	f200 817f 	bhi.w	8007f9c <USBD_StdEPReq+0x324>
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d02a      	beq.n	8007cf8 <USBD_StdEPReq+0x80>
 8007ca2:	2b20      	cmp	r3, #32
 8007ca4:	f040 817a 	bne.w	8007f9c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7ff fe83 	bl	80079b8 <USBD_CoreFindEP>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cb6:	7b7b      	ldrb	r3, [r7, #13]
 8007cb8:	2bff      	cmp	r3, #255	; 0xff
 8007cba:	f000 8174 	beq.w	8007fa6 <USBD_StdEPReq+0x32e>
 8007cbe:	7b7b      	ldrb	r3, [r7, #13]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f040 8170 	bne.w	8007fa6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007cc6:	7b7a      	ldrb	r2, [r7, #13]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007cce:	7b7a      	ldrb	r2, [r7, #13]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	32ae      	adds	r2, #174	; 0xae
 8007cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 8163 	beq.w	8007fa6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007ce0:	7b7a      	ldrb	r2, [r7, #13]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	32ae      	adds	r2, #174	; 0xae
 8007ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	4798      	blx	r3
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007cf6:	e156      	b.n	8007fa6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d008      	beq.n	8007d12 <USBD_StdEPReq+0x9a>
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	f300 8145 	bgt.w	8007f90 <USBD_StdEPReq+0x318>
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 809b 	beq.w	8007e42 <USBD_StdEPReq+0x1ca>
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d03c      	beq.n	8007d8a <USBD_StdEPReq+0x112>
 8007d10:	e13e      	b.n	8007f90 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d002      	beq.n	8007d24 <USBD_StdEPReq+0xac>
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d016      	beq.n	8007d50 <USBD_StdEPReq+0xd8>
 8007d22:	e02c      	b.n	8007d7e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00d      	beq.n	8007d46 <USBD_StdEPReq+0xce>
 8007d2a:	7bbb      	ldrb	r3, [r7, #14]
 8007d2c:	2b80      	cmp	r3, #128	; 0x80
 8007d2e:	d00a      	beq.n	8007d46 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d30:	7bbb      	ldrb	r3, [r7, #14]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 f9d7 	bl	80090e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d3a:	2180      	movs	r1, #128	; 0x80
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 f9d3 	bl	80090e8 <USBD_LL_StallEP>
 8007d42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d44:	e020      	b.n	8007d88 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fca4 	bl	8008696 <USBD_CtlError>
              break;
 8007d4e:	e01b      	b.n	8007d88 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	885b      	ldrh	r3, [r3, #2]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10e      	bne.n	8007d76 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00b      	beq.n	8007d76 <USBD_StdEPReq+0xfe>
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	2b80      	cmp	r3, #128	; 0x80
 8007d62:	d008      	beq.n	8007d76 <USBD_StdEPReq+0xfe>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	88db      	ldrh	r3, [r3, #6]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d104      	bne.n	8007d76 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 f9b9 	bl	80090e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fd58 	bl	800882c <USBD_CtlSendStatus>

              break;
 8007d7c:	e004      	b.n	8007d88 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fc88 	bl	8008696 <USBD_CtlError>
              break;
 8007d86:	bf00      	nop
          }
          break;
 8007d88:	e107      	b.n	8007f9a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d002      	beq.n	8007d9c <USBD_StdEPReq+0x124>
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d016      	beq.n	8007dc8 <USBD_StdEPReq+0x150>
 8007d9a:	e04b      	b.n	8007e34 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d9c:	7bbb      	ldrb	r3, [r7, #14]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00d      	beq.n	8007dbe <USBD_StdEPReq+0x146>
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	2b80      	cmp	r3, #128	; 0x80
 8007da6:	d00a      	beq.n	8007dbe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	4619      	mov	r1, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 f99b 	bl	80090e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007db2:	2180      	movs	r1, #128	; 0x80
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f001 f997 	bl	80090e8 <USBD_LL_StallEP>
 8007dba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dbc:	e040      	b.n	8007e40 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fc68 	bl	8008696 <USBD_CtlError>
              break;
 8007dc6:	e03b      	b.n	8007e40 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	885b      	ldrh	r3, [r3, #2]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d136      	bne.n	8007e3e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d004      	beq.n	8007de4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f001 f9a1 	bl	8009126 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fd21 	bl	800882c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff fde2 	bl	80079b8 <USBD_CoreFindEP>
 8007df4:	4603      	mov	r3, r0
 8007df6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007df8:	7b7b      	ldrb	r3, [r7, #13]
 8007dfa:	2bff      	cmp	r3, #255	; 0xff
 8007dfc:	d01f      	beq.n	8007e3e <USBD_StdEPReq+0x1c6>
 8007dfe:	7b7b      	ldrb	r3, [r7, #13]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d11c      	bne.n	8007e3e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e04:	7b7a      	ldrb	r2, [r7, #13]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e0c:	7b7a      	ldrb	r2, [r7, #13]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	32ae      	adds	r2, #174	; 0xae
 8007e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d010      	beq.n	8007e3e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e1c:	7b7a      	ldrb	r2, [r7, #13]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	32ae      	adds	r2, #174	; 0xae
 8007e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	4798      	blx	r3
 8007e2e:	4603      	mov	r3, r0
 8007e30:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007e32:	e004      	b.n	8007e3e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fc2d 	bl	8008696 <USBD_CtlError>
              break;
 8007e3c:	e000      	b.n	8007e40 <USBD_StdEPReq+0x1c8>
              break;
 8007e3e:	bf00      	nop
          }
          break;
 8007e40:	e0ab      	b.n	8007f9a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d002      	beq.n	8007e54 <USBD_StdEPReq+0x1dc>
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d032      	beq.n	8007eb8 <USBD_StdEPReq+0x240>
 8007e52:	e097      	b.n	8007f84 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d007      	beq.n	8007e6a <USBD_StdEPReq+0x1f2>
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	2b80      	cmp	r3, #128	; 0x80
 8007e5e:	d004      	beq.n	8007e6a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fc17 	bl	8008696 <USBD_CtlError>
                break;
 8007e68:	e091      	b.n	8007f8e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	da0b      	bge.n	8007e8a <USBD_StdEPReq+0x212>
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e78:	4613      	mov	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	3310      	adds	r3, #16
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	4413      	add	r3, r2
 8007e86:	3304      	adds	r3, #4
 8007e88:	e00b      	b.n	8007ea2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e90:	4613      	mov	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2202      	movs	r2, #2
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fc61 	bl	8008778 <USBD_CtlSendData>
              break;
 8007eb6:	e06a      	b.n	8007f8e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	da11      	bge.n	8007ee4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	f003 020f 	and.w	r2, r3, #15
 8007ec6:	6879      	ldr	r1, [r7, #4]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	440b      	add	r3, r1
 8007ed2:	3324      	adds	r3, #36	; 0x24
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d117      	bne.n	8007f0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fbda 	bl	8008696 <USBD_CtlError>
                  break;
 8007ee2:	e054      	b.n	8007f8e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	f003 020f 	and.w	r2, r3, #15
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	4613      	mov	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	440b      	add	r3, r1
 8007ef6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d104      	bne.n	8007f0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fbc7 	bl	8008696 <USBD_CtlError>
                  break;
 8007f08:	e041      	b.n	8007f8e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	da0b      	bge.n	8007f2a <USBD_StdEPReq+0x2b2>
 8007f12:	7bbb      	ldrb	r3, [r7, #14]
 8007f14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f18:	4613      	mov	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	3310      	adds	r3, #16
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	4413      	add	r3, r2
 8007f26:	3304      	adds	r3, #4
 8007f28:	e00b      	b.n	8007f42 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f30:	4613      	mov	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	4413      	add	r3, r2
 8007f40:	3304      	adds	r3, #4
 8007f42:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <USBD_StdEPReq+0x2d8>
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	2b80      	cmp	r3, #128	; 0x80
 8007f4e:	d103      	bne.n	8007f58 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2200      	movs	r2, #0
 8007f54:	601a      	str	r2, [r3, #0]
 8007f56:	e00e      	b.n	8007f76 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 f901 	bl	8009164 <USBD_LL_IsStallEP>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	e002      	b.n	8007f76 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2202      	movs	r2, #2
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fbfb 	bl	8008778 <USBD_CtlSendData>
              break;
 8007f82:	e004      	b.n	8007f8e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fb85 	bl	8008696 <USBD_CtlError>
              break;
 8007f8c:	bf00      	nop
          }
          break;
 8007f8e:	e004      	b.n	8007f9a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fb7f 	bl	8008696 <USBD_CtlError>
          break;
 8007f98:	bf00      	nop
      }
      break;
 8007f9a:	e005      	b.n	8007fa8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fb79 	bl	8008696 <USBD_CtlError>
      break;
 8007fa4:	e000      	b.n	8007fa8 <USBD_StdEPReq+0x330>
      break;
 8007fa6:	bf00      	nop
  }

  return ret;
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	885b      	ldrh	r3, [r3, #2]
 8007fce:	0a1b      	lsrs	r3, r3, #8
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	2b0e      	cmp	r3, #14
 8007fd6:	f200 8152 	bhi.w	800827e <USBD_GetDescriptor+0x2ca>
 8007fda:	a201      	add	r2, pc, #4	; (adr r2, 8007fe0 <USBD_GetDescriptor+0x2c>)
 8007fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe0:	08008051 	.word	0x08008051
 8007fe4:	08008069 	.word	0x08008069
 8007fe8:	080080a9 	.word	0x080080a9
 8007fec:	0800827f 	.word	0x0800827f
 8007ff0:	0800827f 	.word	0x0800827f
 8007ff4:	0800821f 	.word	0x0800821f
 8007ff8:	0800824b 	.word	0x0800824b
 8007ffc:	0800827f 	.word	0x0800827f
 8008000:	0800827f 	.word	0x0800827f
 8008004:	0800827f 	.word	0x0800827f
 8008008:	0800827f 	.word	0x0800827f
 800800c:	0800827f 	.word	0x0800827f
 8008010:	0800827f 	.word	0x0800827f
 8008014:	0800827f 	.word	0x0800827f
 8008018:	0800801d 	.word	0x0800801d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00b      	beq.n	8008040 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	7c12      	ldrb	r2, [r2, #16]
 8008034:	f107 0108 	add.w	r1, r7, #8
 8008038:	4610      	mov	r0, r2
 800803a:	4798      	blx	r3
 800803c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800803e:	e126      	b.n	800828e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fb27 	bl	8008696 <USBD_CtlError>
        err++;
 8008048:	7afb      	ldrb	r3, [r7, #11]
 800804a:	3301      	adds	r3, #1
 800804c:	72fb      	strb	r3, [r7, #11]
      break;
 800804e:	e11e      	b.n	800828e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	7c12      	ldrb	r2, [r2, #16]
 800805c:	f107 0108 	add.w	r1, r7, #8
 8008060:	4610      	mov	r0, r2
 8008062:	4798      	blx	r3
 8008064:	60f8      	str	r0, [r7, #12]
      break;
 8008066:	e112      	b.n	800828e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	7c1b      	ldrb	r3, [r3, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10d      	bne.n	800808c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	f107 0208 	add.w	r2, r7, #8
 800807c:	4610      	mov	r0, r2
 800807e:	4798      	blx	r3
 8008080:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3301      	adds	r3, #1
 8008086:	2202      	movs	r2, #2
 8008088:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800808a:	e100      	b.n	800828e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	f107 0208 	add.w	r2, r7, #8
 8008098:	4610      	mov	r0, r2
 800809a:	4798      	blx	r3
 800809c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3301      	adds	r3, #1
 80080a2:	2202      	movs	r2, #2
 80080a4:	701a      	strb	r2, [r3, #0]
      break;
 80080a6:	e0f2      	b.n	800828e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	885b      	ldrh	r3, [r3, #2]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b05      	cmp	r3, #5
 80080b0:	f200 80ac 	bhi.w	800820c <USBD_GetDescriptor+0x258>
 80080b4:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <USBD_GetDescriptor+0x108>)
 80080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ba:	bf00      	nop
 80080bc:	080080d5 	.word	0x080080d5
 80080c0:	08008109 	.word	0x08008109
 80080c4:	0800813d 	.word	0x0800813d
 80080c8:	08008171 	.word	0x08008171
 80080cc:	080081a5 	.word	0x080081a5
 80080d0:	080081d9 	.word	0x080081d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00b      	beq.n	80080f8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	7c12      	ldrb	r2, [r2, #16]
 80080ec:	f107 0108 	add.w	r1, r7, #8
 80080f0:	4610      	mov	r0, r2
 80080f2:	4798      	blx	r3
 80080f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080f6:	e091      	b.n	800821c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 facb 	bl	8008696 <USBD_CtlError>
            err++;
 8008100:	7afb      	ldrb	r3, [r7, #11]
 8008102:	3301      	adds	r3, #1
 8008104:	72fb      	strb	r3, [r7, #11]
          break;
 8008106:	e089      	b.n	800821c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00b      	beq.n	800812c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	7c12      	ldrb	r2, [r2, #16]
 8008120:	f107 0108 	add.w	r1, r7, #8
 8008124:	4610      	mov	r0, r2
 8008126:	4798      	blx	r3
 8008128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800812a:	e077      	b.n	800821c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fab1 	bl	8008696 <USBD_CtlError>
            err++;
 8008134:	7afb      	ldrb	r3, [r7, #11]
 8008136:	3301      	adds	r3, #1
 8008138:	72fb      	strb	r3, [r7, #11]
          break;
 800813a:	e06f      	b.n	800821c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00b      	beq.n	8008160 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	7c12      	ldrb	r2, [r2, #16]
 8008154:	f107 0108 	add.w	r1, r7, #8
 8008158:	4610      	mov	r0, r2
 800815a:	4798      	blx	r3
 800815c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800815e:	e05d      	b.n	800821c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fa97 	bl	8008696 <USBD_CtlError>
            err++;
 8008168:	7afb      	ldrb	r3, [r7, #11]
 800816a:	3301      	adds	r3, #1
 800816c:	72fb      	strb	r3, [r7, #11]
          break;
 800816e:	e055      	b.n	800821c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	7c12      	ldrb	r2, [r2, #16]
 8008188:	f107 0108 	add.w	r1, r7, #8
 800818c:	4610      	mov	r0, r2
 800818e:	4798      	blx	r3
 8008190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008192:	e043      	b.n	800821c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fa7d 	bl	8008696 <USBD_CtlError>
            err++;
 800819c:	7afb      	ldrb	r3, [r7, #11]
 800819e:	3301      	adds	r3, #1
 80081a0:	72fb      	strb	r3, [r7, #11]
          break;
 80081a2:	e03b      	b.n	800821c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081aa:	695b      	ldr	r3, [r3, #20]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	7c12      	ldrb	r2, [r2, #16]
 80081bc:	f107 0108 	add.w	r1, r7, #8
 80081c0:	4610      	mov	r0, r2
 80081c2:	4798      	blx	r3
 80081c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081c6:	e029      	b.n	800821c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa63 	bl	8008696 <USBD_CtlError>
            err++;
 80081d0:	7afb      	ldrb	r3, [r7, #11]
 80081d2:	3301      	adds	r3, #1
 80081d4:	72fb      	strb	r3, [r7, #11]
          break;
 80081d6:	e021      	b.n	800821c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	7c12      	ldrb	r2, [r2, #16]
 80081f0:	f107 0108 	add.w	r1, r7, #8
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081fa:	e00f      	b.n	800821c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fa49 	bl	8008696 <USBD_CtlError>
            err++;
 8008204:	7afb      	ldrb	r3, [r7, #11]
 8008206:	3301      	adds	r3, #1
 8008208:	72fb      	strb	r3, [r7, #11]
          break;
 800820a:	e007      	b.n	800821c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fa41 	bl	8008696 <USBD_CtlError>
          err++;
 8008214:	7afb      	ldrb	r3, [r7, #11]
 8008216:	3301      	adds	r3, #1
 8008218:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800821a:	bf00      	nop
      }
      break;
 800821c:	e037      	b.n	800828e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	7c1b      	ldrb	r3, [r3, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d109      	bne.n	800823a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822e:	f107 0208 	add.w	r2, r7, #8
 8008232:	4610      	mov	r0, r2
 8008234:	4798      	blx	r3
 8008236:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008238:	e029      	b.n	800828e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fa2a 	bl	8008696 <USBD_CtlError>
        err++;
 8008242:	7afb      	ldrb	r3, [r7, #11]
 8008244:	3301      	adds	r3, #1
 8008246:	72fb      	strb	r3, [r7, #11]
      break;
 8008248:	e021      	b.n	800828e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	7c1b      	ldrb	r3, [r3, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10d      	bne.n	800826e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825a:	f107 0208 	add.w	r2, r7, #8
 800825e:	4610      	mov	r0, r2
 8008260:	4798      	blx	r3
 8008262:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	3301      	adds	r3, #1
 8008268:	2207      	movs	r2, #7
 800826a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800826c:	e00f      	b.n	800828e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fa10 	bl	8008696 <USBD_CtlError>
        err++;
 8008276:	7afb      	ldrb	r3, [r7, #11]
 8008278:	3301      	adds	r3, #1
 800827a:	72fb      	strb	r3, [r7, #11]
      break;
 800827c:	e007      	b.n	800828e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fa08 	bl	8008696 <USBD_CtlError>
      err++;
 8008286:	7afb      	ldrb	r3, [r7, #11]
 8008288:	3301      	adds	r3, #1
 800828a:	72fb      	strb	r3, [r7, #11]
      break;
 800828c:	bf00      	nop
  }

  if (err != 0U)
 800828e:	7afb      	ldrb	r3, [r7, #11]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d11e      	bne.n	80082d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	88db      	ldrh	r3, [r3, #6]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d016      	beq.n	80082ca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800829c:	893b      	ldrh	r3, [r7, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00e      	beq.n	80082c0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	88da      	ldrh	r2, [r3, #6]
 80082a6:	893b      	ldrh	r3, [r7, #8]
 80082a8:	4293      	cmp	r3, r2
 80082aa:	bf28      	it	cs
 80082ac:	4613      	movcs	r3, r2
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082b2:	893b      	ldrh	r3, [r7, #8]
 80082b4:	461a      	mov	r2, r3
 80082b6:	68f9      	ldr	r1, [r7, #12]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fa5d 	bl	8008778 <USBD_CtlSendData>
 80082be:	e009      	b.n	80082d4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f9e7 	bl	8008696 <USBD_CtlError>
 80082c8:	e004      	b.n	80082d4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 faae 	bl	800882c <USBD_CtlSendStatus>
 80082d0:	e000      	b.n	80082d4 <USBD_GetDescriptor+0x320>
    return;
 80082d2:	bf00      	nop
  }
}
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop

080082dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	889b      	ldrh	r3, [r3, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d131      	bne.n	8008352 <USBD_SetAddress+0x76>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	88db      	ldrh	r3, [r3, #6]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d12d      	bne.n	8008352 <USBD_SetAddress+0x76>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	885b      	ldrh	r3, [r3, #2]
 80082fa:	2b7f      	cmp	r3, #127	; 0x7f
 80082fc:	d829      	bhi.n	8008352 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	885b      	ldrh	r3, [r3, #2]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008308:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b03      	cmp	r3, #3
 8008314:	d104      	bne.n	8008320 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f9bc 	bl	8008696 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831e:	e01d      	b.n	800835c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	7bfa      	ldrb	r2, [r7, #15]
 8008324:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008328:	7bfb      	ldrb	r3, [r7, #15]
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 ff45 	bl	80091bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fa7a 	bl	800882c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d004      	beq.n	8008348 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2202      	movs	r2, #2
 8008342:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008346:	e009      	b.n	800835c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008350:	e004      	b.n	800835c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f99e 	bl	8008696 <USBD_CtlError>
  }
}
 800835a:	bf00      	nop
 800835c:	bf00      	nop
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	885b      	ldrh	r3, [r3, #2]
 8008376:	b2da      	uxtb	r2, r3
 8008378:	4b4e      	ldr	r3, [pc, #312]	; (80084b4 <USBD_SetConfig+0x150>)
 800837a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800837c:	4b4d      	ldr	r3, [pc, #308]	; (80084b4 <USBD_SetConfig+0x150>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d905      	bls.n	8008390 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f985 	bl	8008696 <USBD_CtlError>
    return USBD_FAIL;
 800838c:	2303      	movs	r3, #3
 800838e:	e08c      	b.n	80084aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b02      	cmp	r3, #2
 800839a:	d002      	beq.n	80083a2 <USBD_SetConfig+0x3e>
 800839c:	2b03      	cmp	r3, #3
 800839e:	d029      	beq.n	80083f4 <USBD_SetConfig+0x90>
 80083a0:	e075      	b.n	800848e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80083a2:	4b44      	ldr	r3, [pc, #272]	; (80084b4 <USBD_SetConfig+0x150>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d020      	beq.n	80083ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80083aa:	4b42      	ldr	r3, [pc, #264]	; (80084b4 <USBD_SetConfig+0x150>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083b4:	4b3f      	ldr	r3, [pc, #252]	; (80084b4 <USBD_SetConfig+0x150>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7fe ffbd 	bl	800733a <USBD_SetClassConfig>
 80083c0:	4603      	mov	r3, r0
 80083c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d008      	beq.n	80083dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f962 	bl	8008696 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2202      	movs	r2, #2
 80083d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083da:	e065      	b.n	80084a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fa25 	bl	800882c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2203      	movs	r2, #3
 80083e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80083ea:	e05d      	b.n	80084a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fa1d 	bl	800882c <USBD_CtlSendStatus>
      break;
 80083f2:	e059      	b.n	80084a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80083f4:	4b2f      	ldr	r3, [pc, #188]	; (80084b4 <USBD_SetConfig+0x150>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d112      	bne.n	8008422 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008404:	4b2b      	ldr	r3, [pc, #172]	; (80084b4 <USBD_SetConfig+0x150>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800840e:	4b29      	ldr	r3, [pc, #164]	; (80084b4 <USBD_SetConfig+0x150>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7fe ffac 	bl	8007372 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fa06 	bl	800882c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008420:	e042      	b.n	80084a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008422:	4b24      	ldr	r3, [pc, #144]	; (80084b4 <USBD_SetConfig+0x150>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	429a      	cmp	r2, r3
 800842e:	d02a      	beq.n	8008486 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7fe ff9a 	bl	8007372 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800843e:	4b1d      	ldr	r3, [pc, #116]	; (80084b4 <USBD_SetConfig+0x150>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008448:	4b1a      	ldr	r3, [pc, #104]	; (80084b4 <USBD_SetConfig+0x150>)
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7fe ff73 	bl	800733a <USBD_SetClassConfig>
 8008454:	4603      	mov	r3, r0
 8008456:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00f      	beq.n	800847e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f918 	bl	8008696 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	b2db      	uxtb	r3, r3
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7fe ff7f 	bl	8007372 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2202      	movs	r2, #2
 8008478:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800847c:	e014      	b.n	80084a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f9d4 	bl	800882c <USBD_CtlSendStatus>
      break;
 8008484:	e010      	b.n	80084a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f9d0 	bl	800882c <USBD_CtlSendStatus>
      break;
 800848c:	e00c      	b.n	80084a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f900 	bl	8008696 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008496:	4b07      	ldr	r3, [pc, #28]	; (80084b4 <USBD_SetConfig+0x150>)
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7fe ff68 	bl	8007372 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80084a2:	2303      	movs	r3, #3
 80084a4:	73fb      	strb	r3, [r7, #15]
      break;
 80084a6:	bf00      	nop
  }

  return ret;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	20000460 	.word	0x20000460

080084b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	88db      	ldrh	r3, [r3, #6]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d004      	beq.n	80084d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f8e2 	bl	8008696 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084d2:	e023      	b.n	800851c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	dc02      	bgt.n	80084e6 <USBD_GetConfig+0x2e>
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	dc03      	bgt.n	80084ec <USBD_GetConfig+0x34>
 80084e4:	e015      	b.n	8008512 <USBD_GetConfig+0x5a>
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d00b      	beq.n	8008502 <USBD_GetConfig+0x4a>
 80084ea:	e012      	b.n	8008512 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3308      	adds	r3, #8
 80084f6:	2201      	movs	r2, #1
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f93c 	bl	8008778 <USBD_CtlSendData>
        break;
 8008500:	e00c      	b.n	800851c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	3304      	adds	r3, #4
 8008506:	2201      	movs	r2, #1
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f934 	bl	8008778 <USBD_CtlSendData>
        break;
 8008510:	e004      	b.n	800851c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f8be 	bl	8008696 <USBD_CtlError>
        break;
 800851a:	bf00      	nop
}
 800851c:	bf00      	nop
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008534:	b2db      	uxtb	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	2b02      	cmp	r3, #2
 800853a:	d81e      	bhi.n	800857a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	88db      	ldrh	r3, [r3, #6]
 8008540:	2b02      	cmp	r3, #2
 8008542:	d004      	beq.n	800854e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f8a5 	bl	8008696 <USBD_CtlError>
        break;
 800854c:	e01a      	b.n	8008584 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800855a:	2b00      	cmp	r3, #0
 800855c:	d005      	beq.n	800856a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	f043 0202 	orr.w	r2, r3, #2
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	330c      	adds	r3, #12
 800856e:	2202      	movs	r2, #2
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f900 	bl	8008778 <USBD_CtlSendData>
      break;
 8008578:	e004      	b.n	8008584 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f88a 	bl	8008696 <USBD_CtlError>
      break;
 8008582:	bf00      	nop
  }
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	885b      	ldrh	r3, [r3, #2]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d107      	bne.n	80085ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f940 	bl	800882c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80085ac:	e013      	b.n	80085d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	885b      	ldrh	r3, [r3, #2]
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d10b      	bne.n	80085ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	889b      	ldrh	r3, [r3, #4]
 80085ba:	0a1b      	lsrs	r3, r3, #8
 80085bc:	b29b      	uxth	r3, r3
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f930 	bl	800882c <USBD_CtlSendStatus>
}
 80085cc:	e003      	b.n	80085d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f860 	bl	8008696 <USBD_CtlError>
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b082      	sub	sp, #8
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	3b01      	subs	r3, #1
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d80b      	bhi.n	800860e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	885b      	ldrh	r3, [r3, #2]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d10c      	bne.n	8008618 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f910 	bl	800882c <USBD_CtlSendStatus>
      }
      break;
 800860c:	e004      	b.n	8008618 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f840 	bl	8008696 <USBD_CtlError>
      break;
 8008616:	e000      	b.n	800861a <USBD_ClrFeature+0x3c>
      break;
 8008618:	bf00      	nop
  }
}
 800861a:	bf00      	nop
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	781a      	ldrb	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3301      	adds	r3, #1
 800863c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	781a      	ldrb	r2, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3301      	adds	r3, #1
 800864a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f7ff fa17 	bl	8007a80 <SWAPBYTE>
 8008652:	4603      	mov	r3, r0
 8008654:	461a      	mov	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3301      	adds	r3, #1
 800865e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	3301      	adds	r3, #1
 8008664:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f7ff fa0a 	bl	8007a80 <SWAPBYTE>
 800866c:	4603      	mov	r3, r0
 800866e:	461a      	mov	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	3301      	adds	r3, #1
 8008678:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3301      	adds	r3, #1
 800867e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f7ff f9fd 	bl	8007a80 <SWAPBYTE>
 8008686:	4603      	mov	r3, r0
 8008688:	461a      	mov	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	80da      	strh	r2, [r3, #6]
}
 800868e:	bf00      	nop
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b082      	sub	sp, #8
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086a0:	2180      	movs	r1, #128	; 0x80
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fd20 	bl	80090e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086a8:	2100      	movs	r1, #0
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fd1c 	bl	80090e8 <USBD_LL_StallEP>
}
 80086b0:	bf00      	nop
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086c4:	2300      	movs	r3, #0
 80086c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d036      	beq.n	800873c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80086d2:	6938      	ldr	r0, [r7, #16]
 80086d4:	f000 f836 	bl	8008744 <USBD_GetLen>
 80086d8:	4603      	mov	r3, r0
 80086da:	3301      	adds	r3, #1
 80086dc:	b29b      	uxth	r3, r3
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	4413      	add	r3, r2
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	7812      	ldrb	r2, [r2, #0]
 80086f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	3301      	adds	r3, #1
 80086f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	4413      	add	r3, r2
 80086fe:	2203      	movs	r2, #3
 8008700:	701a      	strb	r2, [r3, #0]
  idx++;
 8008702:	7dfb      	ldrb	r3, [r7, #23]
 8008704:	3301      	adds	r3, #1
 8008706:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008708:	e013      	b.n	8008732 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800870a:	7dfb      	ldrb	r3, [r7, #23]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	4413      	add	r3, r2
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	7812      	ldrb	r2, [r2, #0]
 8008714:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	3301      	adds	r3, #1
 800871a:	613b      	str	r3, [r7, #16]
    idx++;
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	3301      	adds	r3, #1
 8008720:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	4413      	add	r3, r2
 8008728:	2200      	movs	r2, #0
 800872a:	701a      	strb	r2, [r3, #0]
    idx++;
 800872c:	7dfb      	ldrb	r3, [r7, #23]
 800872e:	3301      	adds	r3, #1
 8008730:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e7      	bne.n	800870a <USBD_GetString+0x52>
 800873a:	e000      	b.n	800873e <USBD_GetString+0x86>
    return;
 800873c:	bf00      	nop
  }
}
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008754:	e005      	b.n	8008762 <USBD_GetLen+0x1e>
  {
    len++;
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	3301      	adds	r3, #1
 800875a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	3301      	adds	r3, #1
 8008760:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f5      	bne.n	8008756 <USBD_GetLen+0x12>
  }

  return len;
 800876a:	7bfb      	ldrb	r3, [r7, #15]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2202      	movs	r2, #2
 8008788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	2100      	movs	r1, #0
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 fd2b 	bl	80091fa <USBD_LL_Transmit>

  return USBD_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	60f8      	str	r0, [r7, #12]
 80087b6:	60b9      	str	r1, [r7, #8]
 80087b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	2100      	movs	r1, #0
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 fd1a 	bl	80091fa <USBD_LL_Transmit>

  return USBD_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2203      	movs	r2, #3
 80087e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	2100      	movs	r1, #0
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f000 fd1e 	bl	800923c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	60f8      	str	r0, [r7, #12]
 8008812:	60b9      	str	r1, [r7, #8]
 8008814:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	2100      	movs	r1, #0
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 fd0d 	bl	800923c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2204      	movs	r2, #4
 8008838:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800883c:	2300      	movs	r3, #0
 800883e:	2200      	movs	r2, #0
 8008840:	2100      	movs	r1, #0
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fcd9 	bl	80091fa <USBD_LL_Transmit>

  return USBD_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2205      	movs	r2, #5
 800885e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008862:	2300      	movs	r3, #0
 8008864:	2200      	movs	r2, #0
 8008866:	2100      	movs	r1, #0
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fce7 	bl	800923c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800887c:	2200      	movs	r2, #0
 800887e:	4912      	ldr	r1, [pc, #72]	; (80088c8 <MX_USB_DEVICE_Init+0x50>)
 8008880:	4812      	ldr	r0, [pc, #72]	; (80088cc <MX_USB_DEVICE_Init+0x54>)
 8008882:	f7fe fcdd 	bl	8007240 <USBD_Init>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800888c:	f7f8 f8be 	bl	8000a0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008890:	490f      	ldr	r1, [pc, #60]	; (80088d0 <MX_USB_DEVICE_Init+0x58>)
 8008892:	480e      	ldr	r0, [pc, #56]	; (80088cc <MX_USB_DEVICE_Init+0x54>)
 8008894:	f7fe fd04 	bl	80072a0 <USBD_RegisterClass>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800889e:	f7f8 f8b5 	bl	8000a0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80088a2:	490c      	ldr	r1, [pc, #48]	; (80088d4 <MX_USB_DEVICE_Init+0x5c>)
 80088a4:	4809      	ldr	r0, [pc, #36]	; (80088cc <MX_USB_DEVICE_Init+0x54>)
 80088a6:	f7fe fbfb 	bl	80070a0 <USBD_CDC_RegisterInterface>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088b0:	f7f8 f8ac 	bl	8000a0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088b4:	4805      	ldr	r0, [pc, #20]	; (80088cc <MX_USB_DEVICE_Init+0x54>)
 80088b6:	f7fe fd29 	bl	800730c <USBD_Start>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80088c0:	f7f8 f8a4 	bl	8000a0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088c4:	bf00      	nop
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	200000ac 	.word	0x200000ac
 80088cc:	20000464 	.word	0x20000464
 80088d0:	20000018 	.word	0x20000018
 80088d4:	20000098 	.word	0x20000098

080088d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80088dc:	2200      	movs	r2, #0
 80088de:	4905      	ldr	r1, [pc, #20]	; (80088f4 <CDC_Init_FS+0x1c>)
 80088e0:	4805      	ldr	r0, [pc, #20]	; (80088f8 <CDC_Init_FS+0x20>)
 80088e2:	f7fe fbf7 	bl	80070d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80088e6:	4905      	ldr	r1, [pc, #20]	; (80088fc <CDC_Init_FS+0x24>)
 80088e8:	4803      	ldr	r0, [pc, #12]	; (80088f8 <CDC_Init_FS+0x20>)
 80088ea:	f7fe fc15 	bl	8007118 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80088ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	20000f40 	.word	0x20000f40
 80088f8:	20000464 	.word	0x20000464
 80088fc:	20000740 	.word	0x20000740

08008900 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008904:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008906:	4618      	mov	r0, r3
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	6039      	str	r1, [r7, #0]
 800891a:	71fb      	strb	r3, [r7, #7]
 800891c:	4613      	mov	r3, r2
 800891e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008920:	79fb      	ldrb	r3, [r7, #7]
 8008922:	2b23      	cmp	r3, #35	; 0x23
 8008924:	d84a      	bhi.n	80089bc <CDC_Control_FS+0xac>
 8008926:	a201      	add	r2, pc, #4	; (adr r2, 800892c <CDC_Control_FS+0x1c>)
 8008928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892c:	080089bd 	.word	0x080089bd
 8008930:	080089bd 	.word	0x080089bd
 8008934:	080089bd 	.word	0x080089bd
 8008938:	080089bd 	.word	0x080089bd
 800893c:	080089bd 	.word	0x080089bd
 8008940:	080089bd 	.word	0x080089bd
 8008944:	080089bd 	.word	0x080089bd
 8008948:	080089bd 	.word	0x080089bd
 800894c:	080089bd 	.word	0x080089bd
 8008950:	080089bd 	.word	0x080089bd
 8008954:	080089bd 	.word	0x080089bd
 8008958:	080089bd 	.word	0x080089bd
 800895c:	080089bd 	.word	0x080089bd
 8008960:	080089bd 	.word	0x080089bd
 8008964:	080089bd 	.word	0x080089bd
 8008968:	080089bd 	.word	0x080089bd
 800896c:	080089bd 	.word	0x080089bd
 8008970:	080089bd 	.word	0x080089bd
 8008974:	080089bd 	.word	0x080089bd
 8008978:	080089bd 	.word	0x080089bd
 800897c:	080089bd 	.word	0x080089bd
 8008980:	080089bd 	.word	0x080089bd
 8008984:	080089bd 	.word	0x080089bd
 8008988:	080089bd 	.word	0x080089bd
 800898c:	080089bd 	.word	0x080089bd
 8008990:	080089bd 	.word	0x080089bd
 8008994:	080089bd 	.word	0x080089bd
 8008998:	080089bd 	.word	0x080089bd
 800899c:	080089bd 	.word	0x080089bd
 80089a0:	080089bd 	.word	0x080089bd
 80089a4:	080089bd 	.word	0x080089bd
 80089a8:	080089bd 	.word	0x080089bd
 80089ac:	080089bd 	.word	0x080089bd
 80089b0:	080089bd 	.word	0x080089bd
 80089b4:	080089bd 	.word	0x080089bd
 80089b8:	080089bd 	.word	0x080089bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80089bc:	bf00      	nop
  }

  return (USBD_OK);
 80089be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	4805      	ldr	r0, [pc, #20]	; (80089f0 <CDC_Receive_FS+0x24>)
 80089da:	f7fe fb9d 	bl	8007118 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80089de:	4804      	ldr	r0, [pc, #16]	; (80089f0 <CDC_Receive_FS+0x24>)
 80089e0:	f7fe fbf8 	bl	80071d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80089e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20000464 	.word	0x20000464

080089f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a04:	4b0d      	ldr	r3, [pc, #52]	; (8008a3c <CDC_Transmit_FS+0x48>)
 8008a06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e00b      	b.n	8008a32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a1a:	887b      	ldrh	r3, [r7, #2]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	6879      	ldr	r1, [r7, #4]
 8008a20:	4806      	ldr	r0, [pc, #24]	; (8008a3c <CDC_Transmit_FS+0x48>)
 8008a22:	f7fe fb57 	bl	80070d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a26:	4805      	ldr	r0, [pc, #20]	; (8008a3c <CDC_Transmit_FS+0x48>)
 8008a28:	f7fe fb94 	bl	8007154 <USBD_CDC_TransmitPacket>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20000464 	.word	0x20000464

08008a40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	371c      	adds	r7, #28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
	...

08008a64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	6039      	str	r1, [r7, #0]
 8008a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2212      	movs	r2, #18
 8008a74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a76:	4b03      	ldr	r3, [pc, #12]	; (8008a84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	200000cc 	.word	0x200000cc

08008a88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	6039      	str	r1, [r7, #0]
 8008a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	2204      	movs	r2, #4
 8008a98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a9a:	4b03      	ldr	r3, [pc, #12]	; (8008aa8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	200000ec 	.word	0x200000ec

08008aac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	6039      	str	r1, [r7, #0]
 8008ab6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ab8:	79fb      	ldrb	r3, [r7, #7]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d105      	bne.n	8008aca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	4907      	ldr	r1, [pc, #28]	; (8008ae0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ac2:	4808      	ldr	r0, [pc, #32]	; (8008ae4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ac4:	f7ff fdf8 	bl	80086b8 <USBD_GetString>
 8008ac8:	e004      	b.n	8008ad4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	4904      	ldr	r1, [pc, #16]	; (8008ae0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ace:	4805      	ldr	r0, [pc, #20]	; (8008ae4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ad0:	f7ff fdf2 	bl	80086b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ad4:	4b02      	ldr	r3, [pc, #8]	; (8008ae0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	20001740 	.word	0x20001740
 8008ae4:	08009d44 	.word	0x08009d44

08008ae8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	6039      	str	r1, [r7, #0]
 8008af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	4904      	ldr	r1, [pc, #16]	; (8008b08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008af8:	4804      	ldr	r0, [pc, #16]	; (8008b0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008afa:	f7ff fddd 	bl	80086b8 <USBD_GetString>
  return USBD_StrDesc;
 8008afe:	4b02      	ldr	r3, [pc, #8]	; (8008b08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20001740 	.word	0x20001740
 8008b0c:	08009d5c 	.word	0x08009d5c

08008b10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	6039      	str	r1, [r7, #0]
 8008b1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	221a      	movs	r2, #26
 8008b20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b22:	f000 f855 	bl	8008bd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b26:	4b02      	ldr	r3, [pc, #8]	; (8008b30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	200000f0 	.word	0x200000f0

08008b34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d105      	bne.n	8008b52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	4907      	ldr	r1, [pc, #28]	; (8008b68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b4a:	4808      	ldr	r0, [pc, #32]	; (8008b6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b4c:	f7ff fdb4 	bl	80086b8 <USBD_GetString>
 8008b50:	e004      	b.n	8008b5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	4904      	ldr	r1, [pc, #16]	; (8008b68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b56:	4805      	ldr	r0, [pc, #20]	; (8008b6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b58:	f7ff fdae 	bl	80086b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b5c:	4b02      	ldr	r3, [pc, #8]	; (8008b68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20001740 	.word	0x20001740
 8008b6c:	08009d70 	.word	0x08009d70

08008b70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	4603      	mov	r3, r0
 8008b78:	6039      	str	r1, [r7, #0]
 8008b7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d105      	bne.n	8008b8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	4907      	ldr	r1, [pc, #28]	; (8008ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b86:	4808      	ldr	r0, [pc, #32]	; (8008ba8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b88:	f7ff fd96 	bl	80086b8 <USBD_GetString>
 8008b8c:	e004      	b.n	8008b98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	4904      	ldr	r1, [pc, #16]	; (8008ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b92:	4805      	ldr	r0, [pc, #20]	; (8008ba8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b94:	f7ff fd90 	bl	80086b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b98:	4b02      	ldr	r3, [pc, #8]	; (8008ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20001740 	.word	0x20001740
 8008ba8:	08009d7c 	.word	0x08009d7c

08008bac <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	6039      	str	r1, [r7, #0]
 8008bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	220c      	movs	r2, #12
 8008bbc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008bbe:	4b03      	ldr	r3, [pc, #12]	; (8008bcc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	200000e0 	.word	0x200000e0

08008bd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bd6:	4b0f      	ldr	r3, [pc, #60]	; (8008c14 <Get_SerialNum+0x44>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bdc:	4b0e      	ldr	r3, [pc, #56]	; (8008c18 <Get_SerialNum+0x48>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008be2:	4b0e      	ldr	r3, [pc, #56]	; (8008c1c <Get_SerialNum+0x4c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4413      	add	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d009      	beq.n	8008c0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bf6:	2208      	movs	r2, #8
 8008bf8:	4909      	ldr	r1, [pc, #36]	; (8008c20 <Get_SerialNum+0x50>)
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 f814 	bl	8008c28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c00:	2204      	movs	r2, #4
 8008c02:	4908      	ldr	r1, [pc, #32]	; (8008c24 <Get_SerialNum+0x54>)
 8008c04:	68b8      	ldr	r0, [r7, #8]
 8008c06:	f000 f80f 	bl	8008c28 <IntToUnicode>
  }
}
 8008c0a:	bf00      	nop
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	1ff0f420 	.word	0x1ff0f420
 8008c18:	1ff0f424 	.word	0x1ff0f424
 8008c1c:	1ff0f428 	.word	0x1ff0f428
 8008c20:	200000f2 	.word	0x200000f2
 8008c24:	20000102 	.word	0x20000102

08008c28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b087      	sub	sp, #28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	4613      	mov	r3, r2
 8008c34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c36:	2300      	movs	r3, #0
 8008c38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	75fb      	strb	r3, [r7, #23]
 8008c3e:	e027      	b.n	8008c90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	0f1b      	lsrs	r3, r3, #28
 8008c44:	2b09      	cmp	r3, #9
 8008c46:	d80b      	bhi.n	8008c60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	0f1b      	lsrs	r3, r3, #28
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	005b      	lsls	r3, r3, #1
 8008c52:	4619      	mov	r1, r3
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	440b      	add	r3, r1
 8008c58:	3230      	adds	r2, #48	; 0x30
 8008c5a:	b2d2      	uxtb	r2, r2
 8008c5c:	701a      	strb	r2, [r3, #0]
 8008c5e:	e00a      	b.n	8008c76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	0f1b      	lsrs	r3, r3, #28
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	440b      	add	r3, r1
 8008c70:	3237      	adds	r2, #55	; 0x37
 8008c72:	b2d2      	uxtb	r2, r2
 8008c74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	011b      	lsls	r3, r3, #4
 8008c7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	3301      	adds	r3, #1
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	4413      	add	r3, r2
 8008c86:	2200      	movs	r2, #0
 8008c88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	75fb      	strb	r3, [r7, #23]
 8008c90:	7dfa      	ldrb	r2, [r7, #23]
 8008c92:	79fb      	ldrb	r3, [r7, #7]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d3d3      	bcc.n	8008c40 <IntToUnicode+0x18>
  }
}
 8008c98:	bf00      	nop
 8008c9a:	bf00      	nop
 8008c9c:	371c      	adds	r7, #28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
	...

08008ca8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b0ae      	sub	sp, #184	; 0xb8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	605a      	str	r2, [r3, #4]
 8008cba:	609a      	str	r2, [r3, #8]
 8008cbc:	60da      	str	r2, [r3, #12]
 8008cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008cc0:	f107 0314 	add.w	r3, r7, #20
 8008cc4:	2290      	movs	r2, #144	; 0x90
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 fc47 	bl	800955c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cd6:	d161      	bne.n	8008d9c <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008cd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008cdc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008ce4:	f107 0314 	add.w	r3, r7, #20
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fb f8fd 	bl	8003ee8 <HAL_RCCEx_PeriphCLKConfig>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8008cf4:	f7f7 fe8a 	bl	8000a0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cf8:	4b2a      	ldr	r3, [pc, #168]	; (8008da4 <HAL_PCD_MspInit+0xfc>)
 8008cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfc:	4a29      	ldr	r2, [pc, #164]	; (8008da4 <HAL_PCD_MspInit+0xfc>)
 8008cfe:	f043 0301 	orr.w	r3, r3, #1
 8008d02:	6313      	str	r3, [r2, #48]	; 0x30
 8008d04:	4b27      	ldr	r3, [pc, #156]	; (8008da4 <HAL_PCD_MspInit+0xfc>)
 8008d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	613b      	str	r3, [r7, #16]
 8008d0e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008d10:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8008d14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d24:	2303      	movs	r3, #3
 8008d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d2a:	230a      	movs	r3, #10
 8008d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008d34:	4619      	mov	r1, r3
 8008d36:	481c      	ldr	r0, [pc, #112]	; (8008da8 <HAL_PCD_MspInit+0x100>)
 8008d38:	f7f8 ff24 	bl	8001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d44:	2300      	movs	r3, #0
 8008d46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008d50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008d54:	4619      	mov	r1, r3
 8008d56:	4814      	ldr	r0, [pc, #80]	; (8008da8 <HAL_PCD_MspInit+0x100>)
 8008d58:	f7f8 ff14 	bl	8001b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d5c:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <HAL_PCD_MspInit+0xfc>)
 8008d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d60:	4a10      	ldr	r2, [pc, #64]	; (8008da4 <HAL_PCD_MspInit+0xfc>)
 8008d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d66:	6353      	str	r3, [r2, #52]	; 0x34
 8008d68:	4b0e      	ldr	r3, [pc, #56]	; (8008da4 <HAL_PCD_MspInit+0xfc>)
 8008d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d70:	60fb      	str	r3, [r7, #12]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	4b0b      	ldr	r3, [pc, #44]	; (8008da4 <HAL_PCD_MspInit+0xfc>)
 8008d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d78:	4a0a      	ldr	r2, [pc, #40]	; (8008da4 <HAL_PCD_MspInit+0xfc>)
 8008d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8008d80:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <HAL_PCD_MspInit+0xfc>)
 8008d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d88:	60bb      	str	r3, [r7, #8]
 8008d8a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	2100      	movs	r1, #0
 8008d90:	2043      	movs	r0, #67	; 0x43
 8008d92:	f7f8 fb9a 	bl	80014ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d96:	2043      	movs	r0, #67	; 0x43
 8008d98:	f7f8 fbb3 	bl	8001502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d9c:	bf00      	nop
 8008d9e:	37b8      	adds	r7, #184	; 0xb8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	40023800 	.word	0x40023800
 8008da8:	40020000 	.word	0x40020000

08008dac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	f7fe faef 	bl	80073a6 <USBD_LL_SetupStage>
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8008de2:	78fa      	ldrb	r2, [r7, #3]
 8008de4:	6879      	ldr	r1, [r7, #4]
 8008de6:	4613      	mov	r3, r2
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	4413      	add	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	440b      	add	r3, r1
 8008df0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	78fb      	ldrb	r3, [r7, #3]
 8008df8:	4619      	mov	r1, r3
 8008dfa:	f7fe fb29 	bl	8007450 <USBD_LL_DataOutStage>
}
 8008dfe:	bf00      	nop
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b082      	sub	sp, #8
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8008e18:	78fa      	ldrb	r2, [r7, #3]
 8008e1a:	6879      	ldr	r1, [r7, #4]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	440b      	add	r3, r1
 8008e26:	334c      	adds	r3, #76	; 0x4c
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	78fb      	ldrb	r3, [r7, #3]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	f7fe fbc2 	bl	80075b6 <USBD_LL_DataInStage>
}
 8008e32:	bf00      	nop
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b082      	sub	sp, #8
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fe fcf6 	bl	800783a <USBD_LL_SOF>
}
 8008e4e:	bf00      	nop
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b084      	sub	sp, #16
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d102      	bne.n	8008e70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73fb      	strb	r3, [r7, #15]
 8008e6e:	e008      	b.n	8008e82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d102      	bne.n	8008e7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	73fb      	strb	r3, [r7, #15]
 8008e7c:	e001      	b.n	8008e82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008e7e:	f7f7 fdc5 	bl	8000a0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008e88:	7bfa      	ldrb	r2, [r7, #15]
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fe fc96 	bl	80077be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fe fc3e 	bl	800771a <USBD_LL_Reset>
}
 8008e9e:	bf00      	nop
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe fc91 	bl	80077de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	6812      	ldr	r2, [r2, #0]
 8008eca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ece:	f043 0301 	orr.w	r3, r3, #1
 8008ed2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a1b      	ldr	r3, [r3, #32]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d005      	beq.n	8008ee8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008edc:	4b04      	ldr	r3, [pc, #16]	; (8008ef0 <HAL_PCD_SuspendCallback+0x48>)
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	4a03      	ldr	r2, [pc, #12]	; (8008ef0 <HAL_PCD_SuspendCallback+0x48>)
 8008ee2:	f043 0306 	orr.w	r3, r3, #6
 8008ee6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	e000ed00 	.word	0xe000ed00

08008ef4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fe fc81 	bl	800780a <USBD_LL_Resume>
}
 8008f08:	bf00      	nop
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	4611      	mov	r1, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe fcd9 	bl	80078de <USBD_LL_IsoOUTIncomplete>
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008f46:	78fa      	ldrb	r2, [r7, #3]
 8008f48:	4611      	mov	r1, r2
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe fc95 	bl	800787a <USBD_LL_IsoINIncomplete>
}
 8008f50:	bf00      	nop
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fe fceb 	bl	8007942 <USBD_LL_DevConnected>
}
 8008f6c:	bf00      	nop
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fe fce8 	bl	8007958 <USBD_LL_DevDisconnected>
}
 8008f88:	bf00      	nop
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d13c      	bne.n	800901a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008fa0:	4a20      	ldr	r2, [pc, #128]	; (8009024 <USBD_LL_Init+0x94>)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a1e      	ldr	r2, [pc, #120]	; (8009024 <USBD_LL_Init+0x94>)
 8008fac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008fb0:	4b1c      	ldr	r3, [pc, #112]	; (8009024 <USBD_LL_Init+0x94>)
 8008fb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008fb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008fb8:	4b1a      	ldr	r3, [pc, #104]	; (8009024 <USBD_LL_Init+0x94>)
 8008fba:	2206      	movs	r2, #6
 8008fbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008fbe:	4b19      	ldr	r3, [pc, #100]	; (8009024 <USBD_LL_Init+0x94>)
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fc4:	4b17      	ldr	r3, [pc, #92]	; (8009024 <USBD_LL_Init+0x94>)
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fca:	4b16      	ldr	r3, [pc, #88]	; (8009024 <USBD_LL_Init+0x94>)
 8008fcc:	2202      	movs	r2, #2
 8008fce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008fd0:	4b14      	ldr	r3, [pc, #80]	; (8009024 <USBD_LL_Init+0x94>)
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008fd6:	4b13      	ldr	r3, [pc, #76]	; (8009024 <USBD_LL_Init+0x94>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008fdc:	4b11      	ldr	r3, [pc, #68]	; (8009024 <USBD_LL_Init+0x94>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008fe2:	4b10      	ldr	r3, [pc, #64]	; (8009024 <USBD_LL_Init+0x94>)
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fe8:	4b0e      	ldr	r3, [pc, #56]	; (8009024 <USBD_LL_Init+0x94>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fee:	480d      	ldr	r0, [pc, #52]	; (8009024 <USBD_LL_Init+0x94>)
 8008ff0:	f7f8 ff8d 	bl	8001f0e <HAL_PCD_Init>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ffa:	f7f7 fd07 	bl	8000a0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ffe:	2180      	movs	r1, #128	; 0x80
 8009000:	4808      	ldr	r0, [pc, #32]	; (8009024 <USBD_LL_Init+0x94>)
 8009002:	f7fa fa08 	bl	8003416 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009006:	2240      	movs	r2, #64	; 0x40
 8009008:	2100      	movs	r1, #0
 800900a:	4806      	ldr	r0, [pc, #24]	; (8009024 <USBD_LL_Init+0x94>)
 800900c:	f7fa f9bc 	bl	8003388 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009010:	2280      	movs	r2, #128	; 0x80
 8009012:	2101      	movs	r1, #1
 8009014:	4803      	ldr	r0, [pc, #12]	; (8009024 <USBD_LL_Init+0x94>)
 8009016:	f7fa f9b7 	bl	8003388 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	20001940 	.word	0x20001940

08009028 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800903e:	4618      	mov	r0, r3
 8009040:	f7f9 f889 	bl	8002156 <HAL_PCD_Start>
 8009044:	4603      	mov	r3, r0
 8009046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	4618      	mov	r0, r3
 800904c:	f000 f97e 	bl	800934c <USBD_Get_USB_Status>
 8009050:	4603      	mov	r3, r0
 8009052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009054:	7bbb      	ldrb	r3, [r7, #14]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	4608      	mov	r0, r1
 8009068:	4611      	mov	r1, r2
 800906a:	461a      	mov	r2, r3
 800906c:	4603      	mov	r3, r0
 800906e:	70fb      	strb	r3, [r7, #3]
 8009070:	460b      	mov	r3, r1
 8009072:	70bb      	strb	r3, [r7, #2]
 8009074:	4613      	mov	r3, r2
 8009076:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009086:	78bb      	ldrb	r3, [r7, #2]
 8009088:	883a      	ldrh	r2, [r7, #0]
 800908a:	78f9      	ldrb	r1, [r7, #3]
 800908c:	f7f9 fd76 	bl	8002b7c <HAL_PCD_EP_Open>
 8009090:	4603      	mov	r3, r0
 8009092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009094:	7bfb      	ldrb	r3, [r7, #15]
 8009096:	4618      	mov	r0, r3
 8009098:	f000 f958 	bl	800934c <USBD_Get_USB_Status>
 800909c:	4603      	mov	r3, r0
 800909e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	460b      	mov	r3, r1
 80090b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090c4:	78fa      	ldrb	r2, [r7, #3]
 80090c6:	4611      	mov	r1, r2
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7f9 fdbf 	bl	8002c4c <HAL_PCD_EP_Close>
 80090ce:	4603      	mov	r3, r0
 80090d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f939 	bl	800934c <USBD_Get_USB_Status>
 80090da:	4603      	mov	r3, r0
 80090dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090de:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f7f9 fe97 	bl	8002e3a <HAL_PCD_EP_SetStall>
 800910c:	4603      	mov	r3, r0
 800910e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	4618      	mov	r0, r3
 8009114:	f000 f91a 	bl	800934c <USBD_Get_USB_Status>
 8009118:	4603      	mov	r3, r0
 800911a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800911c:	7bbb      	ldrb	r3, [r7, #14]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b084      	sub	sp, #16
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	460b      	mov	r3, r1
 8009130:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009140:	78fa      	ldrb	r2, [r7, #3]
 8009142:	4611      	mov	r1, r2
 8009144:	4618      	mov	r0, r3
 8009146:	f7f9 fedc 	bl	8002f02 <HAL_PCD_EP_ClrStall>
 800914a:	4603      	mov	r3, r0
 800914c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800914e:	7bfb      	ldrb	r3, [r7, #15]
 8009150:	4618      	mov	r0, r3
 8009152:	f000 f8fb 	bl	800934c <USBD_Get_USB_Status>
 8009156:	4603      	mov	r3, r0
 8009158:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800915a:	7bbb      	ldrb	r3, [r7, #14]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009176:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800917c:	2b00      	cmp	r3, #0
 800917e:	da0b      	bge.n	8009198 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009186:	68f9      	ldr	r1, [r7, #12]
 8009188:	4613      	mov	r3, r2
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	440b      	add	r3, r1
 8009192:	333e      	adds	r3, #62	; 0x3e
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	e00b      	b.n	80091b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009198:	78fb      	ldrb	r3, [r7, #3]
 800919a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800919e:	68f9      	ldr	r1, [r7, #12]
 80091a0:	4613      	mov	r3, r2
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	4413      	add	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	440b      	add	r3, r1
 80091aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80091ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091d6:	78fa      	ldrb	r2, [r7, #3]
 80091d8:	4611      	mov	r1, r2
 80091da:	4618      	mov	r0, r3
 80091dc:	f7f9 fca9 	bl	8002b32 <HAL_PCD_SetAddress>
 80091e0:	4603      	mov	r3, r0
 80091e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 f8b0 	bl	800934c <USBD_Get_USB_Status>
 80091ec:	4603      	mov	r3, r0
 80091ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b086      	sub	sp, #24
 80091fe:	af00      	add	r7, sp, #0
 8009200:	60f8      	str	r0, [r7, #12]
 8009202:	607a      	str	r2, [r7, #4]
 8009204:	603b      	str	r3, [r7, #0]
 8009206:	460b      	mov	r3, r1
 8009208:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009218:	7af9      	ldrb	r1, [r7, #11]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	f7f9 fdc2 	bl	8002da6 <HAL_PCD_EP_Transmit>
 8009222:	4603      	mov	r3, r0
 8009224:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	4618      	mov	r0, r3
 800922a:	f000 f88f 	bl	800934c <USBD_Get_USB_Status>
 800922e:	4603      	mov	r3, r0
 8009230:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009232:	7dbb      	ldrb	r3, [r7, #22]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	607a      	str	r2, [r7, #4]
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	460b      	mov	r3, r1
 800924a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800925a:	7af9      	ldrb	r1, [r7, #11]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	f7f9 fd3e 	bl	8002ce0 <HAL_PCD_EP_Receive>
 8009264:	4603      	mov	r3, r0
 8009266:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	4618      	mov	r0, r3
 800926c:	f000 f86e 	bl	800934c <USBD_Get_USB_Status>
 8009270:	4603      	mov	r3, r0
 8009272:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009274:	7dbb      	ldrb	r3, [r7, #22]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3718      	adds	r7, #24
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009290:	78fa      	ldrb	r2, [r7, #3]
 8009292:	4611      	mov	r1, r2
 8009294:	4618      	mov	r0, r3
 8009296:	f7f9 fd6e 	bl	8002d76 <HAL_PCD_EP_GetRxCount>
 800929a:	4603      	mov	r3, r0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d002      	beq.n	80092bc <HAL_PCDEx_LPM_Callback+0x18>
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d01f      	beq.n	80092fa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80092ba:	e03b      	b.n	8009334 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d007      	beq.n	80092d4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80092c4:	f000 f83c 	bl	8009340 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092c8:	4b1c      	ldr	r3, [pc, #112]	; (800933c <HAL_PCDEx_LPM_Callback+0x98>)
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	4a1b      	ldr	r2, [pc, #108]	; (800933c <HAL_PCDEx_LPM_Callback+0x98>)
 80092ce:	f023 0306 	bic.w	r3, r3, #6
 80092d2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	6812      	ldr	r2, [r2, #0]
 80092e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092e6:	f023 0301 	bic.w	r3, r3, #1
 80092ea:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fe fa89 	bl	800780a <USBD_LL_Resume>
    break;
 80092f8:	e01c      	b.n	8009334 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	6812      	ldr	r2, [r2, #0]
 8009308:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800930c:	f043 0301 	orr.w	r3, r3, #1
 8009310:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009318:	4618      	mov	r0, r3
 800931a:	f7fe fa60 	bl	80077de <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d005      	beq.n	8009332 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009326:	4b05      	ldr	r3, [pc, #20]	; (800933c <HAL_PCDEx_LPM_Callback+0x98>)
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	4a04      	ldr	r2, [pc, #16]	; (800933c <HAL_PCDEx_LPM_Callback+0x98>)
 800932c:	f043 0306 	orr.w	r3, r3, #6
 8009330:	6113      	str	r3, [r2, #16]
    break;
 8009332:	bf00      	nop
}
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	e000ed00 	.word	0xe000ed00

08009340 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009344:	f7f7 f99a 	bl	800067c <SystemClock_Config>
}
 8009348:	bf00      	nop
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800935a:	79fb      	ldrb	r3, [r7, #7]
 800935c:	2b03      	cmp	r3, #3
 800935e:	d817      	bhi.n	8009390 <USBD_Get_USB_Status+0x44>
 8009360:	a201      	add	r2, pc, #4	; (adr r2, 8009368 <USBD_Get_USB_Status+0x1c>)
 8009362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009366:	bf00      	nop
 8009368:	08009379 	.word	0x08009379
 800936c:	0800937f 	.word	0x0800937f
 8009370:	08009385 	.word	0x08009385
 8009374:	0800938b 	.word	0x0800938b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	73fb      	strb	r3, [r7, #15]
    break;
 800937c:	e00b      	b.n	8009396 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800937e:	2303      	movs	r3, #3
 8009380:	73fb      	strb	r3, [r7, #15]
    break;
 8009382:	e008      	b.n	8009396 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009384:	2301      	movs	r3, #1
 8009386:	73fb      	strb	r3, [r7, #15]
    break;
 8009388:	e005      	b.n	8009396 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800938a:	2303      	movs	r3, #3
 800938c:	73fb      	strb	r3, [r7, #15]
    break;
 800938e:	e002      	b.n	8009396 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009390:	2303      	movs	r3, #3
 8009392:	73fb      	strb	r3, [r7, #15]
    break;
 8009394:	bf00      	nop
  }
  return usb_status;
 8009396:	7bfb      	ldrb	r3, [r7, #15]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <malloc>:
 80093a4:	4b02      	ldr	r3, [pc, #8]	; (80093b0 <malloc+0xc>)
 80093a6:	4601      	mov	r1, r0
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	f000 b82b 	b.w	8009404 <_malloc_r>
 80093ae:	bf00      	nop
 80093b0:	20000158 	.word	0x20000158

080093b4 <free>:
 80093b4:	4b02      	ldr	r3, [pc, #8]	; (80093c0 <free+0xc>)
 80093b6:	4601      	mov	r1, r0
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	f000 b913 	b.w	80095e4 <_free_r>
 80093be:	bf00      	nop
 80093c0:	20000158 	.word	0x20000158

080093c4 <sbrk_aligned>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	4e0e      	ldr	r6, [pc, #56]	; (8009400 <sbrk_aligned+0x3c>)
 80093c8:	460c      	mov	r4, r1
 80093ca:	6831      	ldr	r1, [r6, #0]
 80093cc:	4605      	mov	r5, r0
 80093ce:	b911      	cbnz	r1, 80093d6 <sbrk_aligned+0x12>
 80093d0:	f000 f8cc 	bl	800956c <_sbrk_r>
 80093d4:	6030      	str	r0, [r6, #0]
 80093d6:	4621      	mov	r1, r4
 80093d8:	4628      	mov	r0, r5
 80093da:	f000 f8c7 	bl	800956c <_sbrk_r>
 80093de:	1c43      	adds	r3, r0, #1
 80093e0:	d00a      	beq.n	80093f8 <sbrk_aligned+0x34>
 80093e2:	1cc4      	adds	r4, r0, #3
 80093e4:	f024 0403 	bic.w	r4, r4, #3
 80093e8:	42a0      	cmp	r0, r4
 80093ea:	d007      	beq.n	80093fc <sbrk_aligned+0x38>
 80093ec:	1a21      	subs	r1, r4, r0
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 f8bc 	bl	800956c <_sbrk_r>
 80093f4:	3001      	adds	r0, #1
 80093f6:	d101      	bne.n	80093fc <sbrk_aligned+0x38>
 80093f8:	f04f 34ff 	mov.w	r4, #4294967295
 80093fc:	4620      	mov	r0, r4
 80093fe:	bd70      	pop	{r4, r5, r6, pc}
 8009400:	20001e4c 	.word	0x20001e4c

08009404 <_malloc_r>:
 8009404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009408:	1ccd      	adds	r5, r1, #3
 800940a:	f025 0503 	bic.w	r5, r5, #3
 800940e:	3508      	adds	r5, #8
 8009410:	2d0c      	cmp	r5, #12
 8009412:	bf38      	it	cc
 8009414:	250c      	movcc	r5, #12
 8009416:	2d00      	cmp	r5, #0
 8009418:	4607      	mov	r7, r0
 800941a:	db01      	blt.n	8009420 <_malloc_r+0x1c>
 800941c:	42a9      	cmp	r1, r5
 800941e:	d905      	bls.n	800942c <_malloc_r+0x28>
 8009420:	230c      	movs	r3, #12
 8009422:	603b      	str	r3, [r7, #0]
 8009424:	2600      	movs	r6, #0
 8009426:	4630      	mov	r0, r6
 8009428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800942c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009500 <_malloc_r+0xfc>
 8009430:	f000 f868 	bl	8009504 <__malloc_lock>
 8009434:	f8d8 3000 	ldr.w	r3, [r8]
 8009438:	461c      	mov	r4, r3
 800943a:	bb5c      	cbnz	r4, 8009494 <_malloc_r+0x90>
 800943c:	4629      	mov	r1, r5
 800943e:	4638      	mov	r0, r7
 8009440:	f7ff ffc0 	bl	80093c4 <sbrk_aligned>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	4604      	mov	r4, r0
 8009448:	d155      	bne.n	80094f6 <_malloc_r+0xf2>
 800944a:	f8d8 4000 	ldr.w	r4, [r8]
 800944e:	4626      	mov	r6, r4
 8009450:	2e00      	cmp	r6, #0
 8009452:	d145      	bne.n	80094e0 <_malloc_r+0xdc>
 8009454:	2c00      	cmp	r4, #0
 8009456:	d048      	beq.n	80094ea <_malloc_r+0xe6>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	4631      	mov	r1, r6
 800945c:	4638      	mov	r0, r7
 800945e:	eb04 0903 	add.w	r9, r4, r3
 8009462:	f000 f883 	bl	800956c <_sbrk_r>
 8009466:	4581      	cmp	r9, r0
 8009468:	d13f      	bne.n	80094ea <_malloc_r+0xe6>
 800946a:	6821      	ldr	r1, [r4, #0]
 800946c:	1a6d      	subs	r5, r5, r1
 800946e:	4629      	mov	r1, r5
 8009470:	4638      	mov	r0, r7
 8009472:	f7ff ffa7 	bl	80093c4 <sbrk_aligned>
 8009476:	3001      	adds	r0, #1
 8009478:	d037      	beq.n	80094ea <_malloc_r+0xe6>
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	442b      	add	r3, r5
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	f8d8 3000 	ldr.w	r3, [r8]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d038      	beq.n	80094fa <_malloc_r+0xf6>
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	42a2      	cmp	r2, r4
 800948c:	d12b      	bne.n	80094e6 <_malloc_r+0xe2>
 800948e:	2200      	movs	r2, #0
 8009490:	605a      	str	r2, [r3, #4]
 8009492:	e00f      	b.n	80094b4 <_malloc_r+0xb0>
 8009494:	6822      	ldr	r2, [r4, #0]
 8009496:	1b52      	subs	r2, r2, r5
 8009498:	d41f      	bmi.n	80094da <_malloc_r+0xd6>
 800949a:	2a0b      	cmp	r2, #11
 800949c:	d917      	bls.n	80094ce <_malloc_r+0xca>
 800949e:	1961      	adds	r1, r4, r5
 80094a0:	42a3      	cmp	r3, r4
 80094a2:	6025      	str	r5, [r4, #0]
 80094a4:	bf18      	it	ne
 80094a6:	6059      	strne	r1, [r3, #4]
 80094a8:	6863      	ldr	r3, [r4, #4]
 80094aa:	bf08      	it	eq
 80094ac:	f8c8 1000 	streq.w	r1, [r8]
 80094b0:	5162      	str	r2, [r4, r5]
 80094b2:	604b      	str	r3, [r1, #4]
 80094b4:	4638      	mov	r0, r7
 80094b6:	f104 060b 	add.w	r6, r4, #11
 80094ba:	f000 f829 	bl	8009510 <__malloc_unlock>
 80094be:	f026 0607 	bic.w	r6, r6, #7
 80094c2:	1d23      	adds	r3, r4, #4
 80094c4:	1af2      	subs	r2, r6, r3
 80094c6:	d0ae      	beq.n	8009426 <_malloc_r+0x22>
 80094c8:	1b9b      	subs	r3, r3, r6
 80094ca:	50a3      	str	r3, [r4, r2]
 80094cc:	e7ab      	b.n	8009426 <_malloc_r+0x22>
 80094ce:	42a3      	cmp	r3, r4
 80094d0:	6862      	ldr	r2, [r4, #4]
 80094d2:	d1dd      	bne.n	8009490 <_malloc_r+0x8c>
 80094d4:	f8c8 2000 	str.w	r2, [r8]
 80094d8:	e7ec      	b.n	80094b4 <_malloc_r+0xb0>
 80094da:	4623      	mov	r3, r4
 80094dc:	6864      	ldr	r4, [r4, #4]
 80094de:	e7ac      	b.n	800943a <_malloc_r+0x36>
 80094e0:	4634      	mov	r4, r6
 80094e2:	6876      	ldr	r6, [r6, #4]
 80094e4:	e7b4      	b.n	8009450 <_malloc_r+0x4c>
 80094e6:	4613      	mov	r3, r2
 80094e8:	e7cc      	b.n	8009484 <_malloc_r+0x80>
 80094ea:	230c      	movs	r3, #12
 80094ec:	603b      	str	r3, [r7, #0]
 80094ee:	4638      	mov	r0, r7
 80094f0:	f000 f80e 	bl	8009510 <__malloc_unlock>
 80094f4:	e797      	b.n	8009426 <_malloc_r+0x22>
 80094f6:	6025      	str	r5, [r4, #0]
 80094f8:	e7dc      	b.n	80094b4 <_malloc_r+0xb0>
 80094fa:	605b      	str	r3, [r3, #4]
 80094fc:	deff      	udf	#255	; 0xff
 80094fe:	bf00      	nop
 8009500:	20001e48 	.word	0x20001e48

08009504 <__malloc_lock>:
 8009504:	4801      	ldr	r0, [pc, #4]	; (800950c <__malloc_lock+0x8>)
 8009506:	f000 b86b 	b.w	80095e0 <__retarget_lock_acquire_recursive>
 800950a:	bf00      	nop
 800950c:	20001f8c 	.word	0x20001f8c

08009510 <__malloc_unlock>:
 8009510:	4801      	ldr	r0, [pc, #4]	; (8009518 <__malloc_unlock+0x8>)
 8009512:	f000 b866 	b.w	80095e2 <__retarget_lock_release_recursive>
 8009516:	bf00      	nop
 8009518:	20001f8c 	.word	0x20001f8c

0800951c <siprintf>:
 800951c:	b40e      	push	{r1, r2, r3}
 800951e:	b500      	push	{lr}
 8009520:	b09c      	sub	sp, #112	; 0x70
 8009522:	ab1d      	add	r3, sp, #116	; 0x74
 8009524:	9002      	str	r0, [sp, #8]
 8009526:	9006      	str	r0, [sp, #24]
 8009528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800952c:	4809      	ldr	r0, [pc, #36]	; (8009554 <siprintf+0x38>)
 800952e:	9107      	str	r1, [sp, #28]
 8009530:	9104      	str	r1, [sp, #16]
 8009532:	4909      	ldr	r1, [pc, #36]	; (8009558 <siprintf+0x3c>)
 8009534:	f853 2b04 	ldr.w	r2, [r3], #4
 8009538:	9105      	str	r1, [sp, #20]
 800953a:	6800      	ldr	r0, [r0, #0]
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	a902      	add	r1, sp, #8
 8009540:	f000 f8f6 	bl	8009730 <_svfiprintf_r>
 8009544:	9b02      	ldr	r3, [sp, #8]
 8009546:	2200      	movs	r2, #0
 8009548:	701a      	strb	r2, [r3, #0]
 800954a:	b01c      	add	sp, #112	; 0x70
 800954c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009550:	b003      	add	sp, #12
 8009552:	4770      	bx	lr
 8009554:	20000158 	.word	0x20000158
 8009558:	ffff0208 	.word	0xffff0208

0800955c <memset>:
 800955c:	4402      	add	r2, r0
 800955e:	4603      	mov	r3, r0
 8009560:	4293      	cmp	r3, r2
 8009562:	d100      	bne.n	8009566 <memset+0xa>
 8009564:	4770      	bx	lr
 8009566:	f803 1b01 	strb.w	r1, [r3], #1
 800956a:	e7f9      	b.n	8009560 <memset+0x4>

0800956c <_sbrk_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4d06      	ldr	r5, [pc, #24]	; (8009588 <_sbrk_r+0x1c>)
 8009570:	2300      	movs	r3, #0
 8009572:	4604      	mov	r4, r0
 8009574:	4608      	mov	r0, r1
 8009576:	602b      	str	r3, [r5, #0]
 8009578:	f7f7 fc0e 	bl	8000d98 <_sbrk>
 800957c:	1c43      	adds	r3, r0, #1
 800957e:	d102      	bne.n	8009586 <_sbrk_r+0x1a>
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	b103      	cbz	r3, 8009586 <_sbrk_r+0x1a>
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	bd38      	pop	{r3, r4, r5, pc}
 8009588:	20001f88 	.word	0x20001f88

0800958c <__errno>:
 800958c:	4b01      	ldr	r3, [pc, #4]	; (8009594 <__errno+0x8>)
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	20000158 	.word	0x20000158

08009598 <__libc_init_array>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	4d0d      	ldr	r5, [pc, #52]	; (80095d0 <__libc_init_array+0x38>)
 800959c:	4c0d      	ldr	r4, [pc, #52]	; (80095d4 <__libc_init_array+0x3c>)
 800959e:	1b64      	subs	r4, r4, r5
 80095a0:	10a4      	asrs	r4, r4, #2
 80095a2:	2600      	movs	r6, #0
 80095a4:	42a6      	cmp	r6, r4
 80095a6:	d109      	bne.n	80095bc <__libc_init_array+0x24>
 80095a8:	4d0b      	ldr	r5, [pc, #44]	; (80095d8 <__libc_init_array+0x40>)
 80095aa:	4c0c      	ldr	r4, [pc, #48]	; (80095dc <__libc_init_array+0x44>)
 80095ac:	f000 fbae 	bl	8009d0c <_init>
 80095b0:	1b64      	subs	r4, r4, r5
 80095b2:	10a4      	asrs	r4, r4, #2
 80095b4:	2600      	movs	r6, #0
 80095b6:	42a6      	cmp	r6, r4
 80095b8:	d105      	bne.n	80095c6 <__libc_init_array+0x2e>
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
 80095bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c0:	4798      	blx	r3
 80095c2:	3601      	adds	r6, #1
 80095c4:	e7ee      	b.n	80095a4 <__libc_init_array+0xc>
 80095c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ca:	4798      	blx	r3
 80095cc:	3601      	adds	r6, #1
 80095ce:	e7f2      	b.n	80095b6 <__libc_init_array+0x1e>
 80095d0:	08009de0 	.word	0x08009de0
 80095d4:	08009de0 	.word	0x08009de0
 80095d8:	08009de0 	.word	0x08009de0
 80095dc:	08009de4 	.word	0x08009de4

080095e0 <__retarget_lock_acquire_recursive>:
 80095e0:	4770      	bx	lr

080095e2 <__retarget_lock_release_recursive>:
 80095e2:	4770      	bx	lr

080095e4 <_free_r>:
 80095e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095e6:	2900      	cmp	r1, #0
 80095e8:	d044      	beq.n	8009674 <_free_r+0x90>
 80095ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ee:	9001      	str	r0, [sp, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f1a1 0404 	sub.w	r4, r1, #4
 80095f6:	bfb8      	it	lt
 80095f8:	18e4      	addlt	r4, r4, r3
 80095fa:	f7ff ff83 	bl	8009504 <__malloc_lock>
 80095fe:	4a1e      	ldr	r2, [pc, #120]	; (8009678 <_free_r+0x94>)
 8009600:	9801      	ldr	r0, [sp, #4]
 8009602:	6813      	ldr	r3, [r2, #0]
 8009604:	b933      	cbnz	r3, 8009614 <_free_r+0x30>
 8009606:	6063      	str	r3, [r4, #4]
 8009608:	6014      	str	r4, [r2, #0]
 800960a:	b003      	add	sp, #12
 800960c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009610:	f7ff bf7e 	b.w	8009510 <__malloc_unlock>
 8009614:	42a3      	cmp	r3, r4
 8009616:	d908      	bls.n	800962a <_free_r+0x46>
 8009618:	6825      	ldr	r5, [r4, #0]
 800961a:	1961      	adds	r1, r4, r5
 800961c:	428b      	cmp	r3, r1
 800961e:	bf01      	itttt	eq
 8009620:	6819      	ldreq	r1, [r3, #0]
 8009622:	685b      	ldreq	r3, [r3, #4]
 8009624:	1949      	addeq	r1, r1, r5
 8009626:	6021      	streq	r1, [r4, #0]
 8009628:	e7ed      	b.n	8009606 <_free_r+0x22>
 800962a:	461a      	mov	r2, r3
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	b10b      	cbz	r3, 8009634 <_free_r+0x50>
 8009630:	42a3      	cmp	r3, r4
 8009632:	d9fa      	bls.n	800962a <_free_r+0x46>
 8009634:	6811      	ldr	r1, [r2, #0]
 8009636:	1855      	adds	r5, r2, r1
 8009638:	42a5      	cmp	r5, r4
 800963a:	d10b      	bne.n	8009654 <_free_r+0x70>
 800963c:	6824      	ldr	r4, [r4, #0]
 800963e:	4421      	add	r1, r4
 8009640:	1854      	adds	r4, r2, r1
 8009642:	42a3      	cmp	r3, r4
 8009644:	6011      	str	r1, [r2, #0]
 8009646:	d1e0      	bne.n	800960a <_free_r+0x26>
 8009648:	681c      	ldr	r4, [r3, #0]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	6053      	str	r3, [r2, #4]
 800964e:	440c      	add	r4, r1
 8009650:	6014      	str	r4, [r2, #0]
 8009652:	e7da      	b.n	800960a <_free_r+0x26>
 8009654:	d902      	bls.n	800965c <_free_r+0x78>
 8009656:	230c      	movs	r3, #12
 8009658:	6003      	str	r3, [r0, #0]
 800965a:	e7d6      	b.n	800960a <_free_r+0x26>
 800965c:	6825      	ldr	r5, [r4, #0]
 800965e:	1961      	adds	r1, r4, r5
 8009660:	428b      	cmp	r3, r1
 8009662:	bf04      	itt	eq
 8009664:	6819      	ldreq	r1, [r3, #0]
 8009666:	685b      	ldreq	r3, [r3, #4]
 8009668:	6063      	str	r3, [r4, #4]
 800966a:	bf04      	itt	eq
 800966c:	1949      	addeq	r1, r1, r5
 800966e:	6021      	streq	r1, [r4, #0]
 8009670:	6054      	str	r4, [r2, #4]
 8009672:	e7ca      	b.n	800960a <_free_r+0x26>
 8009674:	b003      	add	sp, #12
 8009676:	bd30      	pop	{r4, r5, pc}
 8009678:	20001e48 	.word	0x20001e48

0800967c <__ssputs_r>:
 800967c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009680:	688e      	ldr	r6, [r1, #8]
 8009682:	461f      	mov	r7, r3
 8009684:	42be      	cmp	r6, r7
 8009686:	680b      	ldr	r3, [r1, #0]
 8009688:	4682      	mov	sl, r0
 800968a:	460c      	mov	r4, r1
 800968c:	4690      	mov	r8, r2
 800968e:	d82c      	bhi.n	80096ea <__ssputs_r+0x6e>
 8009690:	898a      	ldrh	r2, [r1, #12]
 8009692:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009696:	d026      	beq.n	80096e6 <__ssputs_r+0x6a>
 8009698:	6965      	ldr	r5, [r4, #20]
 800969a:	6909      	ldr	r1, [r1, #16]
 800969c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096a0:	eba3 0901 	sub.w	r9, r3, r1
 80096a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096a8:	1c7b      	adds	r3, r7, #1
 80096aa:	444b      	add	r3, r9
 80096ac:	106d      	asrs	r5, r5, #1
 80096ae:	429d      	cmp	r5, r3
 80096b0:	bf38      	it	cc
 80096b2:	461d      	movcc	r5, r3
 80096b4:	0553      	lsls	r3, r2, #21
 80096b6:	d527      	bpl.n	8009708 <__ssputs_r+0x8c>
 80096b8:	4629      	mov	r1, r5
 80096ba:	f7ff fea3 	bl	8009404 <_malloc_r>
 80096be:	4606      	mov	r6, r0
 80096c0:	b360      	cbz	r0, 800971c <__ssputs_r+0xa0>
 80096c2:	6921      	ldr	r1, [r4, #16]
 80096c4:	464a      	mov	r2, r9
 80096c6:	f000 fadb 	bl	8009c80 <memcpy>
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096d4:	81a3      	strh	r3, [r4, #12]
 80096d6:	6126      	str	r6, [r4, #16]
 80096d8:	6165      	str	r5, [r4, #20]
 80096da:	444e      	add	r6, r9
 80096dc:	eba5 0509 	sub.w	r5, r5, r9
 80096e0:	6026      	str	r6, [r4, #0]
 80096e2:	60a5      	str	r5, [r4, #8]
 80096e4:	463e      	mov	r6, r7
 80096e6:	42be      	cmp	r6, r7
 80096e8:	d900      	bls.n	80096ec <__ssputs_r+0x70>
 80096ea:	463e      	mov	r6, r7
 80096ec:	6820      	ldr	r0, [r4, #0]
 80096ee:	4632      	mov	r2, r6
 80096f0:	4641      	mov	r1, r8
 80096f2:	f000 faab 	bl	8009c4c <memmove>
 80096f6:	68a3      	ldr	r3, [r4, #8]
 80096f8:	1b9b      	subs	r3, r3, r6
 80096fa:	60a3      	str	r3, [r4, #8]
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	4433      	add	r3, r6
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	2000      	movs	r0, #0
 8009704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009708:	462a      	mov	r2, r5
 800970a:	f000 fac7 	bl	8009c9c <_realloc_r>
 800970e:	4606      	mov	r6, r0
 8009710:	2800      	cmp	r0, #0
 8009712:	d1e0      	bne.n	80096d6 <__ssputs_r+0x5a>
 8009714:	6921      	ldr	r1, [r4, #16]
 8009716:	4650      	mov	r0, sl
 8009718:	f7ff ff64 	bl	80095e4 <_free_r>
 800971c:	230c      	movs	r3, #12
 800971e:	f8ca 3000 	str.w	r3, [sl]
 8009722:	89a3      	ldrh	r3, [r4, #12]
 8009724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009728:	81a3      	strh	r3, [r4, #12]
 800972a:	f04f 30ff 	mov.w	r0, #4294967295
 800972e:	e7e9      	b.n	8009704 <__ssputs_r+0x88>

08009730 <_svfiprintf_r>:
 8009730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009734:	4698      	mov	r8, r3
 8009736:	898b      	ldrh	r3, [r1, #12]
 8009738:	061b      	lsls	r3, r3, #24
 800973a:	b09d      	sub	sp, #116	; 0x74
 800973c:	4607      	mov	r7, r0
 800973e:	460d      	mov	r5, r1
 8009740:	4614      	mov	r4, r2
 8009742:	d50e      	bpl.n	8009762 <_svfiprintf_r+0x32>
 8009744:	690b      	ldr	r3, [r1, #16]
 8009746:	b963      	cbnz	r3, 8009762 <_svfiprintf_r+0x32>
 8009748:	2140      	movs	r1, #64	; 0x40
 800974a:	f7ff fe5b 	bl	8009404 <_malloc_r>
 800974e:	6028      	str	r0, [r5, #0]
 8009750:	6128      	str	r0, [r5, #16]
 8009752:	b920      	cbnz	r0, 800975e <_svfiprintf_r+0x2e>
 8009754:	230c      	movs	r3, #12
 8009756:	603b      	str	r3, [r7, #0]
 8009758:	f04f 30ff 	mov.w	r0, #4294967295
 800975c:	e0d0      	b.n	8009900 <_svfiprintf_r+0x1d0>
 800975e:	2340      	movs	r3, #64	; 0x40
 8009760:	616b      	str	r3, [r5, #20]
 8009762:	2300      	movs	r3, #0
 8009764:	9309      	str	r3, [sp, #36]	; 0x24
 8009766:	2320      	movs	r3, #32
 8009768:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800976c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009770:	2330      	movs	r3, #48	; 0x30
 8009772:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009918 <_svfiprintf_r+0x1e8>
 8009776:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800977a:	f04f 0901 	mov.w	r9, #1
 800977e:	4623      	mov	r3, r4
 8009780:	469a      	mov	sl, r3
 8009782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009786:	b10a      	cbz	r2, 800978c <_svfiprintf_r+0x5c>
 8009788:	2a25      	cmp	r2, #37	; 0x25
 800978a:	d1f9      	bne.n	8009780 <_svfiprintf_r+0x50>
 800978c:	ebba 0b04 	subs.w	fp, sl, r4
 8009790:	d00b      	beq.n	80097aa <_svfiprintf_r+0x7a>
 8009792:	465b      	mov	r3, fp
 8009794:	4622      	mov	r2, r4
 8009796:	4629      	mov	r1, r5
 8009798:	4638      	mov	r0, r7
 800979a:	f7ff ff6f 	bl	800967c <__ssputs_r>
 800979e:	3001      	adds	r0, #1
 80097a0:	f000 80a9 	beq.w	80098f6 <_svfiprintf_r+0x1c6>
 80097a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097a6:	445a      	add	r2, fp
 80097a8:	9209      	str	r2, [sp, #36]	; 0x24
 80097aa:	f89a 3000 	ldrb.w	r3, [sl]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 80a1 	beq.w	80098f6 <_svfiprintf_r+0x1c6>
 80097b4:	2300      	movs	r3, #0
 80097b6:	f04f 32ff 	mov.w	r2, #4294967295
 80097ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097be:	f10a 0a01 	add.w	sl, sl, #1
 80097c2:	9304      	str	r3, [sp, #16]
 80097c4:	9307      	str	r3, [sp, #28]
 80097c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097ca:	931a      	str	r3, [sp, #104]	; 0x68
 80097cc:	4654      	mov	r4, sl
 80097ce:	2205      	movs	r2, #5
 80097d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d4:	4850      	ldr	r0, [pc, #320]	; (8009918 <_svfiprintf_r+0x1e8>)
 80097d6:	f7f6 fd3b 	bl	8000250 <memchr>
 80097da:	9a04      	ldr	r2, [sp, #16]
 80097dc:	b9d8      	cbnz	r0, 8009816 <_svfiprintf_r+0xe6>
 80097de:	06d0      	lsls	r0, r2, #27
 80097e0:	bf44      	itt	mi
 80097e2:	2320      	movmi	r3, #32
 80097e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097e8:	0711      	lsls	r1, r2, #28
 80097ea:	bf44      	itt	mi
 80097ec:	232b      	movmi	r3, #43	; 0x2b
 80097ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097f2:	f89a 3000 	ldrb.w	r3, [sl]
 80097f6:	2b2a      	cmp	r3, #42	; 0x2a
 80097f8:	d015      	beq.n	8009826 <_svfiprintf_r+0xf6>
 80097fa:	9a07      	ldr	r2, [sp, #28]
 80097fc:	4654      	mov	r4, sl
 80097fe:	2000      	movs	r0, #0
 8009800:	f04f 0c0a 	mov.w	ip, #10
 8009804:	4621      	mov	r1, r4
 8009806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800980a:	3b30      	subs	r3, #48	; 0x30
 800980c:	2b09      	cmp	r3, #9
 800980e:	d94d      	bls.n	80098ac <_svfiprintf_r+0x17c>
 8009810:	b1b0      	cbz	r0, 8009840 <_svfiprintf_r+0x110>
 8009812:	9207      	str	r2, [sp, #28]
 8009814:	e014      	b.n	8009840 <_svfiprintf_r+0x110>
 8009816:	eba0 0308 	sub.w	r3, r0, r8
 800981a:	fa09 f303 	lsl.w	r3, r9, r3
 800981e:	4313      	orrs	r3, r2
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	46a2      	mov	sl, r4
 8009824:	e7d2      	b.n	80097cc <_svfiprintf_r+0x9c>
 8009826:	9b03      	ldr	r3, [sp, #12]
 8009828:	1d19      	adds	r1, r3, #4
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	9103      	str	r1, [sp, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	bfbb      	ittet	lt
 8009832:	425b      	neglt	r3, r3
 8009834:	f042 0202 	orrlt.w	r2, r2, #2
 8009838:	9307      	strge	r3, [sp, #28]
 800983a:	9307      	strlt	r3, [sp, #28]
 800983c:	bfb8      	it	lt
 800983e:	9204      	strlt	r2, [sp, #16]
 8009840:	7823      	ldrb	r3, [r4, #0]
 8009842:	2b2e      	cmp	r3, #46	; 0x2e
 8009844:	d10c      	bne.n	8009860 <_svfiprintf_r+0x130>
 8009846:	7863      	ldrb	r3, [r4, #1]
 8009848:	2b2a      	cmp	r3, #42	; 0x2a
 800984a:	d134      	bne.n	80098b6 <_svfiprintf_r+0x186>
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	1d1a      	adds	r2, r3, #4
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	9203      	str	r2, [sp, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	bfb8      	it	lt
 8009858:	f04f 33ff 	movlt.w	r3, #4294967295
 800985c:	3402      	adds	r4, #2
 800985e:	9305      	str	r3, [sp, #20]
 8009860:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009928 <_svfiprintf_r+0x1f8>
 8009864:	7821      	ldrb	r1, [r4, #0]
 8009866:	2203      	movs	r2, #3
 8009868:	4650      	mov	r0, sl
 800986a:	f7f6 fcf1 	bl	8000250 <memchr>
 800986e:	b138      	cbz	r0, 8009880 <_svfiprintf_r+0x150>
 8009870:	9b04      	ldr	r3, [sp, #16]
 8009872:	eba0 000a 	sub.w	r0, r0, sl
 8009876:	2240      	movs	r2, #64	; 0x40
 8009878:	4082      	lsls	r2, r0
 800987a:	4313      	orrs	r3, r2
 800987c:	3401      	adds	r4, #1
 800987e:	9304      	str	r3, [sp, #16]
 8009880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009884:	4825      	ldr	r0, [pc, #148]	; (800991c <_svfiprintf_r+0x1ec>)
 8009886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800988a:	2206      	movs	r2, #6
 800988c:	f7f6 fce0 	bl	8000250 <memchr>
 8009890:	2800      	cmp	r0, #0
 8009892:	d038      	beq.n	8009906 <_svfiprintf_r+0x1d6>
 8009894:	4b22      	ldr	r3, [pc, #136]	; (8009920 <_svfiprintf_r+0x1f0>)
 8009896:	bb1b      	cbnz	r3, 80098e0 <_svfiprintf_r+0x1b0>
 8009898:	9b03      	ldr	r3, [sp, #12]
 800989a:	3307      	adds	r3, #7
 800989c:	f023 0307 	bic.w	r3, r3, #7
 80098a0:	3308      	adds	r3, #8
 80098a2:	9303      	str	r3, [sp, #12]
 80098a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a6:	4433      	add	r3, r6
 80098a8:	9309      	str	r3, [sp, #36]	; 0x24
 80098aa:	e768      	b.n	800977e <_svfiprintf_r+0x4e>
 80098ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80098b0:	460c      	mov	r4, r1
 80098b2:	2001      	movs	r0, #1
 80098b4:	e7a6      	b.n	8009804 <_svfiprintf_r+0xd4>
 80098b6:	2300      	movs	r3, #0
 80098b8:	3401      	adds	r4, #1
 80098ba:	9305      	str	r3, [sp, #20]
 80098bc:	4619      	mov	r1, r3
 80098be:	f04f 0c0a 	mov.w	ip, #10
 80098c2:	4620      	mov	r0, r4
 80098c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098c8:	3a30      	subs	r2, #48	; 0x30
 80098ca:	2a09      	cmp	r2, #9
 80098cc:	d903      	bls.n	80098d6 <_svfiprintf_r+0x1a6>
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d0c6      	beq.n	8009860 <_svfiprintf_r+0x130>
 80098d2:	9105      	str	r1, [sp, #20]
 80098d4:	e7c4      	b.n	8009860 <_svfiprintf_r+0x130>
 80098d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80098da:	4604      	mov	r4, r0
 80098dc:	2301      	movs	r3, #1
 80098de:	e7f0      	b.n	80098c2 <_svfiprintf_r+0x192>
 80098e0:	ab03      	add	r3, sp, #12
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	462a      	mov	r2, r5
 80098e6:	4b0f      	ldr	r3, [pc, #60]	; (8009924 <_svfiprintf_r+0x1f4>)
 80098e8:	a904      	add	r1, sp, #16
 80098ea:	4638      	mov	r0, r7
 80098ec:	f3af 8000 	nop.w
 80098f0:	1c42      	adds	r2, r0, #1
 80098f2:	4606      	mov	r6, r0
 80098f4:	d1d6      	bne.n	80098a4 <_svfiprintf_r+0x174>
 80098f6:	89ab      	ldrh	r3, [r5, #12]
 80098f8:	065b      	lsls	r3, r3, #25
 80098fa:	f53f af2d 	bmi.w	8009758 <_svfiprintf_r+0x28>
 80098fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009900:	b01d      	add	sp, #116	; 0x74
 8009902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009906:	ab03      	add	r3, sp, #12
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	462a      	mov	r2, r5
 800990c:	4b05      	ldr	r3, [pc, #20]	; (8009924 <_svfiprintf_r+0x1f4>)
 800990e:	a904      	add	r1, sp, #16
 8009910:	4638      	mov	r0, r7
 8009912:	f000 f879 	bl	8009a08 <_printf_i>
 8009916:	e7eb      	b.n	80098f0 <_svfiprintf_r+0x1c0>
 8009918:	08009da4 	.word	0x08009da4
 800991c:	08009dae 	.word	0x08009dae
 8009920:	00000000 	.word	0x00000000
 8009924:	0800967d 	.word	0x0800967d
 8009928:	08009daa 	.word	0x08009daa

0800992c <_printf_common>:
 800992c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009930:	4616      	mov	r6, r2
 8009932:	4699      	mov	r9, r3
 8009934:	688a      	ldr	r2, [r1, #8]
 8009936:	690b      	ldr	r3, [r1, #16]
 8009938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800993c:	4293      	cmp	r3, r2
 800993e:	bfb8      	it	lt
 8009940:	4613      	movlt	r3, r2
 8009942:	6033      	str	r3, [r6, #0]
 8009944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009948:	4607      	mov	r7, r0
 800994a:	460c      	mov	r4, r1
 800994c:	b10a      	cbz	r2, 8009952 <_printf_common+0x26>
 800994e:	3301      	adds	r3, #1
 8009950:	6033      	str	r3, [r6, #0]
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	0699      	lsls	r1, r3, #26
 8009956:	bf42      	ittt	mi
 8009958:	6833      	ldrmi	r3, [r6, #0]
 800995a:	3302      	addmi	r3, #2
 800995c:	6033      	strmi	r3, [r6, #0]
 800995e:	6825      	ldr	r5, [r4, #0]
 8009960:	f015 0506 	ands.w	r5, r5, #6
 8009964:	d106      	bne.n	8009974 <_printf_common+0x48>
 8009966:	f104 0a19 	add.w	sl, r4, #25
 800996a:	68e3      	ldr	r3, [r4, #12]
 800996c:	6832      	ldr	r2, [r6, #0]
 800996e:	1a9b      	subs	r3, r3, r2
 8009970:	42ab      	cmp	r3, r5
 8009972:	dc26      	bgt.n	80099c2 <_printf_common+0x96>
 8009974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009978:	1e13      	subs	r3, r2, #0
 800997a:	6822      	ldr	r2, [r4, #0]
 800997c:	bf18      	it	ne
 800997e:	2301      	movne	r3, #1
 8009980:	0692      	lsls	r2, r2, #26
 8009982:	d42b      	bmi.n	80099dc <_printf_common+0xb0>
 8009984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009988:	4649      	mov	r1, r9
 800998a:	4638      	mov	r0, r7
 800998c:	47c0      	blx	r8
 800998e:	3001      	adds	r0, #1
 8009990:	d01e      	beq.n	80099d0 <_printf_common+0xa4>
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	6922      	ldr	r2, [r4, #16]
 8009996:	f003 0306 	and.w	r3, r3, #6
 800999a:	2b04      	cmp	r3, #4
 800999c:	bf02      	ittt	eq
 800999e:	68e5      	ldreq	r5, [r4, #12]
 80099a0:	6833      	ldreq	r3, [r6, #0]
 80099a2:	1aed      	subeq	r5, r5, r3
 80099a4:	68a3      	ldr	r3, [r4, #8]
 80099a6:	bf0c      	ite	eq
 80099a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099ac:	2500      	movne	r5, #0
 80099ae:	4293      	cmp	r3, r2
 80099b0:	bfc4      	itt	gt
 80099b2:	1a9b      	subgt	r3, r3, r2
 80099b4:	18ed      	addgt	r5, r5, r3
 80099b6:	2600      	movs	r6, #0
 80099b8:	341a      	adds	r4, #26
 80099ba:	42b5      	cmp	r5, r6
 80099bc:	d11a      	bne.n	80099f4 <_printf_common+0xc8>
 80099be:	2000      	movs	r0, #0
 80099c0:	e008      	b.n	80099d4 <_printf_common+0xa8>
 80099c2:	2301      	movs	r3, #1
 80099c4:	4652      	mov	r2, sl
 80099c6:	4649      	mov	r1, r9
 80099c8:	4638      	mov	r0, r7
 80099ca:	47c0      	blx	r8
 80099cc:	3001      	adds	r0, #1
 80099ce:	d103      	bne.n	80099d8 <_printf_common+0xac>
 80099d0:	f04f 30ff 	mov.w	r0, #4294967295
 80099d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d8:	3501      	adds	r5, #1
 80099da:	e7c6      	b.n	800996a <_printf_common+0x3e>
 80099dc:	18e1      	adds	r1, r4, r3
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	2030      	movs	r0, #48	; 0x30
 80099e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099e6:	4422      	add	r2, r4
 80099e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099f0:	3302      	adds	r3, #2
 80099f2:	e7c7      	b.n	8009984 <_printf_common+0x58>
 80099f4:	2301      	movs	r3, #1
 80099f6:	4622      	mov	r2, r4
 80099f8:	4649      	mov	r1, r9
 80099fa:	4638      	mov	r0, r7
 80099fc:	47c0      	blx	r8
 80099fe:	3001      	adds	r0, #1
 8009a00:	d0e6      	beq.n	80099d0 <_printf_common+0xa4>
 8009a02:	3601      	adds	r6, #1
 8009a04:	e7d9      	b.n	80099ba <_printf_common+0x8e>
	...

08009a08 <_printf_i>:
 8009a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a0c:	7e0f      	ldrb	r7, [r1, #24]
 8009a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a10:	2f78      	cmp	r7, #120	; 0x78
 8009a12:	4691      	mov	r9, r2
 8009a14:	4680      	mov	r8, r0
 8009a16:	460c      	mov	r4, r1
 8009a18:	469a      	mov	sl, r3
 8009a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a1e:	d807      	bhi.n	8009a30 <_printf_i+0x28>
 8009a20:	2f62      	cmp	r7, #98	; 0x62
 8009a22:	d80a      	bhi.n	8009a3a <_printf_i+0x32>
 8009a24:	2f00      	cmp	r7, #0
 8009a26:	f000 80d4 	beq.w	8009bd2 <_printf_i+0x1ca>
 8009a2a:	2f58      	cmp	r7, #88	; 0x58
 8009a2c:	f000 80c0 	beq.w	8009bb0 <_printf_i+0x1a8>
 8009a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a38:	e03a      	b.n	8009ab0 <_printf_i+0xa8>
 8009a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a3e:	2b15      	cmp	r3, #21
 8009a40:	d8f6      	bhi.n	8009a30 <_printf_i+0x28>
 8009a42:	a101      	add	r1, pc, #4	; (adr r1, 8009a48 <_printf_i+0x40>)
 8009a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a48:	08009aa1 	.word	0x08009aa1
 8009a4c:	08009ab5 	.word	0x08009ab5
 8009a50:	08009a31 	.word	0x08009a31
 8009a54:	08009a31 	.word	0x08009a31
 8009a58:	08009a31 	.word	0x08009a31
 8009a5c:	08009a31 	.word	0x08009a31
 8009a60:	08009ab5 	.word	0x08009ab5
 8009a64:	08009a31 	.word	0x08009a31
 8009a68:	08009a31 	.word	0x08009a31
 8009a6c:	08009a31 	.word	0x08009a31
 8009a70:	08009a31 	.word	0x08009a31
 8009a74:	08009bb9 	.word	0x08009bb9
 8009a78:	08009ae1 	.word	0x08009ae1
 8009a7c:	08009b73 	.word	0x08009b73
 8009a80:	08009a31 	.word	0x08009a31
 8009a84:	08009a31 	.word	0x08009a31
 8009a88:	08009bdb 	.word	0x08009bdb
 8009a8c:	08009a31 	.word	0x08009a31
 8009a90:	08009ae1 	.word	0x08009ae1
 8009a94:	08009a31 	.word	0x08009a31
 8009a98:	08009a31 	.word	0x08009a31
 8009a9c:	08009b7b 	.word	0x08009b7b
 8009aa0:	682b      	ldr	r3, [r5, #0]
 8009aa2:	1d1a      	adds	r2, r3, #4
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	602a      	str	r2, [r5, #0]
 8009aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e09f      	b.n	8009bf4 <_printf_i+0x1ec>
 8009ab4:	6820      	ldr	r0, [r4, #0]
 8009ab6:	682b      	ldr	r3, [r5, #0]
 8009ab8:	0607      	lsls	r7, r0, #24
 8009aba:	f103 0104 	add.w	r1, r3, #4
 8009abe:	6029      	str	r1, [r5, #0]
 8009ac0:	d501      	bpl.n	8009ac6 <_printf_i+0xbe>
 8009ac2:	681e      	ldr	r6, [r3, #0]
 8009ac4:	e003      	b.n	8009ace <_printf_i+0xc6>
 8009ac6:	0646      	lsls	r6, r0, #25
 8009ac8:	d5fb      	bpl.n	8009ac2 <_printf_i+0xba>
 8009aca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009ace:	2e00      	cmp	r6, #0
 8009ad0:	da03      	bge.n	8009ada <_printf_i+0xd2>
 8009ad2:	232d      	movs	r3, #45	; 0x2d
 8009ad4:	4276      	negs	r6, r6
 8009ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ada:	485a      	ldr	r0, [pc, #360]	; (8009c44 <_printf_i+0x23c>)
 8009adc:	230a      	movs	r3, #10
 8009ade:	e012      	b.n	8009b06 <_printf_i+0xfe>
 8009ae0:	682b      	ldr	r3, [r5, #0]
 8009ae2:	6820      	ldr	r0, [r4, #0]
 8009ae4:	1d19      	adds	r1, r3, #4
 8009ae6:	6029      	str	r1, [r5, #0]
 8009ae8:	0605      	lsls	r5, r0, #24
 8009aea:	d501      	bpl.n	8009af0 <_printf_i+0xe8>
 8009aec:	681e      	ldr	r6, [r3, #0]
 8009aee:	e002      	b.n	8009af6 <_printf_i+0xee>
 8009af0:	0641      	lsls	r1, r0, #25
 8009af2:	d5fb      	bpl.n	8009aec <_printf_i+0xe4>
 8009af4:	881e      	ldrh	r6, [r3, #0]
 8009af6:	4853      	ldr	r0, [pc, #332]	; (8009c44 <_printf_i+0x23c>)
 8009af8:	2f6f      	cmp	r7, #111	; 0x6f
 8009afa:	bf0c      	ite	eq
 8009afc:	2308      	moveq	r3, #8
 8009afe:	230a      	movne	r3, #10
 8009b00:	2100      	movs	r1, #0
 8009b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b06:	6865      	ldr	r5, [r4, #4]
 8009b08:	60a5      	str	r5, [r4, #8]
 8009b0a:	2d00      	cmp	r5, #0
 8009b0c:	bfa2      	ittt	ge
 8009b0e:	6821      	ldrge	r1, [r4, #0]
 8009b10:	f021 0104 	bicge.w	r1, r1, #4
 8009b14:	6021      	strge	r1, [r4, #0]
 8009b16:	b90e      	cbnz	r6, 8009b1c <_printf_i+0x114>
 8009b18:	2d00      	cmp	r5, #0
 8009b1a:	d04b      	beq.n	8009bb4 <_printf_i+0x1ac>
 8009b1c:	4615      	mov	r5, r2
 8009b1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b22:	fb03 6711 	mls	r7, r3, r1, r6
 8009b26:	5dc7      	ldrb	r7, [r0, r7]
 8009b28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b2c:	4637      	mov	r7, r6
 8009b2e:	42bb      	cmp	r3, r7
 8009b30:	460e      	mov	r6, r1
 8009b32:	d9f4      	bls.n	8009b1e <_printf_i+0x116>
 8009b34:	2b08      	cmp	r3, #8
 8009b36:	d10b      	bne.n	8009b50 <_printf_i+0x148>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	07de      	lsls	r6, r3, #31
 8009b3c:	d508      	bpl.n	8009b50 <_printf_i+0x148>
 8009b3e:	6923      	ldr	r3, [r4, #16]
 8009b40:	6861      	ldr	r1, [r4, #4]
 8009b42:	4299      	cmp	r1, r3
 8009b44:	bfde      	ittt	le
 8009b46:	2330      	movle	r3, #48	; 0x30
 8009b48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b50:	1b52      	subs	r2, r2, r5
 8009b52:	6122      	str	r2, [r4, #16]
 8009b54:	f8cd a000 	str.w	sl, [sp]
 8009b58:	464b      	mov	r3, r9
 8009b5a:	aa03      	add	r2, sp, #12
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	4640      	mov	r0, r8
 8009b60:	f7ff fee4 	bl	800992c <_printf_common>
 8009b64:	3001      	adds	r0, #1
 8009b66:	d14a      	bne.n	8009bfe <_printf_i+0x1f6>
 8009b68:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6c:	b004      	add	sp, #16
 8009b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	f043 0320 	orr.w	r3, r3, #32
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	4833      	ldr	r0, [pc, #204]	; (8009c48 <_printf_i+0x240>)
 8009b7c:	2778      	movs	r7, #120	; 0x78
 8009b7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	6829      	ldr	r1, [r5, #0]
 8009b86:	061f      	lsls	r7, r3, #24
 8009b88:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b8c:	d402      	bmi.n	8009b94 <_printf_i+0x18c>
 8009b8e:	065f      	lsls	r7, r3, #25
 8009b90:	bf48      	it	mi
 8009b92:	b2b6      	uxthmi	r6, r6
 8009b94:	07df      	lsls	r7, r3, #31
 8009b96:	bf48      	it	mi
 8009b98:	f043 0320 	orrmi.w	r3, r3, #32
 8009b9c:	6029      	str	r1, [r5, #0]
 8009b9e:	bf48      	it	mi
 8009ba0:	6023      	strmi	r3, [r4, #0]
 8009ba2:	b91e      	cbnz	r6, 8009bac <_printf_i+0x1a4>
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	f023 0320 	bic.w	r3, r3, #32
 8009baa:	6023      	str	r3, [r4, #0]
 8009bac:	2310      	movs	r3, #16
 8009bae:	e7a7      	b.n	8009b00 <_printf_i+0xf8>
 8009bb0:	4824      	ldr	r0, [pc, #144]	; (8009c44 <_printf_i+0x23c>)
 8009bb2:	e7e4      	b.n	8009b7e <_printf_i+0x176>
 8009bb4:	4615      	mov	r5, r2
 8009bb6:	e7bd      	b.n	8009b34 <_printf_i+0x12c>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	6826      	ldr	r6, [r4, #0]
 8009bbc:	6961      	ldr	r1, [r4, #20]
 8009bbe:	1d18      	adds	r0, r3, #4
 8009bc0:	6028      	str	r0, [r5, #0]
 8009bc2:	0635      	lsls	r5, r6, #24
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	d501      	bpl.n	8009bcc <_printf_i+0x1c4>
 8009bc8:	6019      	str	r1, [r3, #0]
 8009bca:	e002      	b.n	8009bd2 <_printf_i+0x1ca>
 8009bcc:	0670      	lsls	r0, r6, #25
 8009bce:	d5fb      	bpl.n	8009bc8 <_printf_i+0x1c0>
 8009bd0:	8019      	strh	r1, [r3, #0]
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	6123      	str	r3, [r4, #16]
 8009bd6:	4615      	mov	r5, r2
 8009bd8:	e7bc      	b.n	8009b54 <_printf_i+0x14c>
 8009bda:	682b      	ldr	r3, [r5, #0]
 8009bdc:	1d1a      	adds	r2, r3, #4
 8009bde:	602a      	str	r2, [r5, #0]
 8009be0:	681d      	ldr	r5, [r3, #0]
 8009be2:	6862      	ldr	r2, [r4, #4]
 8009be4:	2100      	movs	r1, #0
 8009be6:	4628      	mov	r0, r5
 8009be8:	f7f6 fb32 	bl	8000250 <memchr>
 8009bec:	b108      	cbz	r0, 8009bf2 <_printf_i+0x1ea>
 8009bee:	1b40      	subs	r0, r0, r5
 8009bf0:	6060      	str	r0, [r4, #4]
 8009bf2:	6863      	ldr	r3, [r4, #4]
 8009bf4:	6123      	str	r3, [r4, #16]
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bfc:	e7aa      	b.n	8009b54 <_printf_i+0x14c>
 8009bfe:	6923      	ldr	r3, [r4, #16]
 8009c00:	462a      	mov	r2, r5
 8009c02:	4649      	mov	r1, r9
 8009c04:	4640      	mov	r0, r8
 8009c06:	47d0      	blx	sl
 8009c08:	3001      	adds	r0, #1
 8009c0a:	d0ad      	beq.n	8009b68 <_printf_i+0x160>
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	079b      	lsls	r3, r3, #30
 8009c10:	d413      	bmi.n	8009c3a <_printf_i+0x232>
 8009c12:	68e0      	ldr	r0, [r4, #12]
 8009c14:	9b03      	ldr	r3, [sp, #12]
 8009c16:	4298      	cmp	r0, r3
 8009c18:	bfb8      	it	lt
 8009c1a:	4618      	movlt	r0, r3
 8009c1c:	e7a6      	b.n	8009b6c <_printf_i+0x164>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	4632      	mov	r2, r6
 8009c22:	4649      	mov	r1, r9
 8009c24:	4640      	mov	r0, r8
 8009c26:	47d0      	blx	sl
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d09d      	beq.n	8009b68 <_printf_i+0x160>
 8009c2c:	3501      	adds	r5, #1
 8009c2e:	68e3      	ldr	r3, [r4, #12]
 8009c30:	9903      	ldr	r1, [sp, #12]
 8009c32:	1a5b      	subs	r3, r3, r1
 8009c34:	42ab      	cmp	r3, r5
 8009c36:	dcf2      	bgt.n	8009c1e <_printf_i+0x216>
 8009c38:	e7eb      	b.n	8009c12 <_printf_i+0x20a>
 8009c3a:	2500      	movs	r5, #0
 8009c3c:	f104 0619 	add.w	r6, r4, #25
 8009c40:	e7f5      	b.n	8009c2e <_printf_i+0x226>
 8009c42:	bf00      	nop
 8009c44:	08009db5 	.word	0x08009db5
 8009c48:	08009dc6 	.word	0x08009dc6

08009c4c <memmove>:
 8009c4c:	4288      	cmp	r0, r1
 8009c4e:	b510      	push	{r4, lr}
 8009c50:	eb01 0402 	add.w	r4, r1, r2
 8009c54:	d902      	bls.n	8009c5c <memmove+0x10>
 8009c56:	4284      	cmp	r4, r0
 8009c58:	4623      	mov	r3, r4
 8009c5a:	d807      	bhi.n	8009c6c <memmove+0x20>
 8009c5c:	1e43      	subs	r3, r0, #1
 8009c5e:	42a1      	cmp	r1, r4
 8009c60:	d008      	beq.n	8009c74 <memmove+0x28>
 8009c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c6a:	e7f8      	b.n	8009c5e <memmove+0x12>
 8009c6c:	4402      	add	r2, r0
 8009c6e:	4601      	mov	r1, r0
 8009c70:	428a      	cmp	r2, r1
 8009c72:	d100      	bne.n	8009c76 <memmove+0x2a>
 8009c74:	bd10      	pop	{r4, pc}
 8009c76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c7e:	e7f7      	b.n	8009c70 <memmove+0x24>

08009c80 <memcpy>:
 8009c80:	440a      	add	r2, r1
 8009c82:	4291      	cmp	r1, r2
 8009c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c88:	d100      	bne.n	8009c8c <memcpy+0xc>
 8009c8a:	4770      	bx	lr
 8009c8c:	b510      	push	{r4, lr}
 8009c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c96:	4291      	cmp	r1, r2
 8009c98:	d1f9      	bne.n	8009c8e <memcpy+0xe>
 8009c9a:	bd10      	pop	{r4, pc}

08009c9c <_realloc_r>:
 8009c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca0:	4680      	mov	r8, r0
 8009ca2:	4614      	mov	r4, r2
 8009ca4:	460e      	mov	r6, r1
 8009ca6:	b921      	cbnz	r1, 8009cb2 <_realloc_r+0x16>
 8009ca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cac:	4611      	mov	r1, r2
 8009cae:	f7ff bba9 	b.w	8009404 <_malloc_r>
 8009cb2:	b92a      	cbnz	r2, 8009cc0 <_realloc_r+0x24>
 8009cb4:	f7ff fc96 	bl	80095e4 <_free_r>
 8009cb8:	4625      	mov	r5, r4
 8009cba:	4628      	mov	r0, r5
 8009cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc0:	f000 f81b 	bl	8009cfa <_malloc_usable_size_r>
 8009cc4:	4284      	cmp	r4, r0
 8009cc6:	4607      	mov	r7, r0
 8009cc8:	d802      	bhi.n	8009cd0 <_realloc_r+0x34>
 8009cca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cce:	d812      	bhi.n	8009cf6 <_realloc_r+0x5a>
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	4640      	mov	r0, r8
 8009cd4:	f7ff fb96 	bl	8009404 <_malloc_r>
 8009cd8:	4605      	mov	r5, r0
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d0ed      	beq.n	8009cba <_realloc_r+0x1e>
 8009cde:	42bc      	cmp	r4, r7
 8009ce0:	4622      	mov	r2, r4
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	bf28      	it	cs
 8009ce6:	463a      	movcs	r2, r7
 8009ce8:	f7ff ffca 	bl	8009c80 <memcpy>
 8009cec:	4631      	mov	r1, r6
 8009cee:	4640      	mov	r0, r8
 8009cf0:	f7ff fc78 	bl	80095e4 <_free_r>
 8009cf4:	e7e1      	b.n	8009cba <_realloc_r+0x1e>
 8009cf6:	4635      	mov	r5, r6
 8009cf8:	e7df      	b.n	8009cba <_realloc_r+0x1e>

08009cfa <_malloc_usable_size_r>:
 8009cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cfe:	1f18      	subs	r0, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	bfbc      	itt	lt
 8009d04:	580b      	ldrlt	r3, [r1, r0]
 8009d06:	18c0      	addlt	r0, r0, r3
 8009d08:	4770      	bx	lr
	...

08009d0c <_init>:
 8009d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0e:	bf00      	nop
 8009d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d12:	bc08      	pop	{r3}
 8009d14:	469e      	mov	lr, r3
 8009d16:	4770      	bx	lr

08009d18 <_fini>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	bf00      	nop
 8009d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1e:	bc08      	pop	{r3}
 8009d20:	469e      	mov	lr, r3
 8009d22:	4770      	bx	lr
