
spi_f103_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b94  08003b94  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b94  08003b94  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b94  08003b94  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b94  08003b94  00013b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000005c  08003bf8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08003bf8  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000928d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000195b  00000000  00000000  00029355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a0  00000000  00000000  0002acb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069e  00000000  00000000  0002b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016660  00000000  00000000  0002bbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a516  00000000  00000000  0004224e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081f3d  00000000  00000000  0004c764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002794  00000000  00000000  000ce6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d0e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b18 	.word	0x08003b18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003b18 	.word	0x08003b18

0800014c <HAL_SPI_RxCpltCallback>:
#define SPI_DMA_BUFFER_LENGTH 20
uint8_t SPI_DMA_RX_BUFFER[SPI_DMA_BUFFER_LENGTH] = {0};
uint8_t newline_buffer[2] = {0};
uint8_t uart_transmit = 0;

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_DMA(&hspi1, SPI_DMA_RX_BUFFER, SPI_DMA_BUFFER_LENGTH);
 8000154:	2214      	movs	r2, #20
 8000156:	4908      	ldr	r1, [pc, #32]	; (8000178 <HAL_SPI_RxCpltCallback+0x2c>)
 8000158:	4808      	ldr	r0, [pc, #32]	; (800017c <HAL_SPI_RxCpltCallback+0x30>)
 800015a:	f001 fd65 	bl	8001c28 <HAL_SPI_Receive_DMA>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800015e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000162:	4807      	ldr	r0, [pc, #28]	; (8000180 <HAL_SPI_RxCpltCallback+0x34>)
 8000164:	f001 f8b2 	bl	80012cc <HAL_GPIO_TogglePin>
	uart_transmit = 1;
 8000168:	4b06      	ldr	r3, [pc, #24]	; (8000184 <HAL_SPI_RxCpltCallback+0x38>)
 800016a:	2201      	movs	r2, #1
 800016c:	701a      	strb	r2, [r3, #0]
}
 800016e:	bf00      	nop
 8000170:	3708      	adds	r7, #8
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	2000015c 	.word	0x2000015c
 800017c:	20000078 	.word	0x20000078
 8000180:	40011000 	.word	0x40011000
 8000184:	20000172 	.word	0x20000172

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 faf0 	bl	8000770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f832 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f8f0 	bl	8000378 <MX_GPIO_Init>
  MX_DMA_Init();
 8000198:	f000 f8d0 	bl	800033c <MX_DMA_Init>
  MX_SPI1_Init();
 800019c:	f000 f872 	bl	8000284 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001a0:	f000 f8a2 	bl	80002e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_SPI_Receive_DMA(&hspi1, SPI_DMA_RX_BUFFER, SPI_DMA_BUFFER_LENGTH);
 80001a4:	2214      	movs	r2, #20
 80001a6:	490e      	ldr	r1, [pc, #56]	; (80001e0 <main+0x58>)
 80001a8:	480e      	ldr	r0, [pc, #56]	; (80001e4 <main+0x5c>)
 80001aa:	f001 fd3d 	bl	8001c28 <HAL_SPI_Receive_DMA>
  sprintf(newline_buffer, "\r\n");
 80001ae:	490e      	ldr	r1, [pc, #56]	; (80001e8 <main+0x60>)
 80001b0:	480e      	ldr	r0, [pc, #56]	; (80001ec <main+0x64>)
 80001b2:	f002 ffff 	bl	80031b4 <siprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (uart_transmit == 1){
 80001b6:	4b0e      	ldr	r3, [pc, #56]	; (80001f0 <main+0x68>)
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	2b01      	cmp	r3, #1
 80001bc:	d1fb      	bne.n	80001b6 <main+0x2e>

		HAL_UART_Transmit(&huart1, &newline_buffer, 2, 100);
 80001be:	2364      	movs	r3, #100	; 0x64
 80001c0:	2202      	movs	r2, #2
 80001c2:	490a      	ldr	r1, [pc, #40]	; (80001ec <main+0x64>)
 80001c4:	480b      	ldr	r0, [pc, #44]	; (80001f4 <main+0x6c>)
 80001c6:	f002 fa21 	bl	800260c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, &SPI_DMA_RX_BUFFER, SPI_DMA_BUFFER_LENGTH, 100);
 80001ca:	2364      	movs	r3, #100	; 0x64
 80001cc:	2214      	movs	r2, #20
 80001ce:	4904      	ldr	r1, [pc, #16]	; (80001e0 <main+0x58>)
 80001d0:	4808      	ldr	r0, [pc, #32]	; (80001f4 <main+0x6c>)
 80001d2:	f002 fa1b 	bl	800260c <HAL_UART_Transmit>
		uart_transmit = 0;
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <main+0x68>)
 80001d8:	2200      	movs	r2, #0
 80001da:	701a      	strb	r2, [r3, #0]
	if (uart_transmit == 1){
 80001dc:	e7eb      	b.n	80001b6 <main+0x2e>
 80001de:	bf00      	nop
 80001e0:	2000015c 	.word	0x2000015c
 80001e4:	20000078 	.word	0x20000078
 80001e8:	08003b30 	.word	0x08003b30
 80001ec:	20000170 	.word	0x20000170
 80001f0:	20000172 	.word	0x20000172
 80001f4:	20000114 	.word	0x20000114

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b090      	sub	sp, #64	; 0x40
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 fff4 	bl	80031f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021a:	2301      	movs	r3, #1
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000222:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022c:	2302      	movs	r3, #2
 800022e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000236:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800023a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0318 	add.w	r3, r7, #24
 8000240:	4618      	mov	r0, r3
 8000242:	f001 f85d 	bl	8001300 <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800024c:	f000 f8e0 	bl	8000410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000254:	2302      	movs	r3, #2
 8000256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2102      	movs	r1, #2
 800026a:	4618      	mov	r0, r3
 800026c:	f001 faca 	bl	8001804 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000276:	f000 f8cb 	bl	8000410 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	; 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_SPI1_Init+0x5c>)
 800028a:	4a16      	ldr	r2, [pc, #88]	; (80002e4 <MX_SPI1_Init+0x60>)
 800028c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_SPI1_Init+0x5c>)
 8000290:	2200      	movs	r2, #0
 8000292:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_SPI1_Init+0x5c>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800029a:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <MX_SPI1_Init+0x5c>)
 800029c:	2200      	movs	r2, #0
 800029e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_SPI1_Init+0x5c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MX_SPI1_Init+0x5c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <MX_SPI1_Init+0x5c>)
 80002ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <MX_SPI1_Init+0x5c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <MX_SPI1_Init+0x5c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <MX_SPI1_Init+0x5c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <MX_SPI1_Init+0x5c>)
 80002c8:	220a      	movs	r2, #10
 80002ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002cc:	4804      	ldr	r0, [pc, #16]	; (80002e0 <MX_SPI1_Init+0x5c>)
 80002ce:	f001 fc27 	bl	8001b20 <HAL_SPI_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80002d8:	f000 f89a 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000078 	.word	0x20000078
 80002e4:	40013000 	.word	0x40013000

080002e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 80002ee:	4a12      	ldr	r2, [pc, #72]	; (8000338 <MX_USART1_UART_Init+0x50>)
 80002f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 80002f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 800030e:	220c      	movs	r2, #12
 8000310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 8000320:	f002 f924 	bl	800256c <HAL_UART_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800032a:	f000 f871 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000114 	.word	0x20000114
 8000338:	40013800 	.word	0x40013800

0800033c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_DMA_Init+0x38>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	4a0b      	ldr	r2, [pc, #44]	; (8000374 <MX_DMA_Init+0x38>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6153      	str	r3, [r2, #20]
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_DMA_Init+0x38>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	2100      	movs	r1, #0
 800035e:	200c      	movs	r0, #12
 8000360:	f000 fb3f 	bl	80009e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000364:	200c      	movs	r0, #12
 8000366:	f000 fb58 	bl	8000a1a <HAL_NVIC_EnableIRQ>

}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038c:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a1d      	ldr	r2, [pc, #116]	; (8000408 <MX_GPIO_Init+0x90>)
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <MX_GPIO_Init+0x90>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0310 	and.w	r3, r3, #16
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <MX_GPIO_Init+0x90>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a17      	ldr	r2, [pc, #92]	; (8000408 <MX_GPIO_Init+0x90>)
 80003aa:	f043 0320 	orr.w	r3, r3, #32
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <MX_GPIO_Init+0x90>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0320 	and.w	r3, r3, #32
 80003b8:	60bb      	str	r3, [r7, #8]
 80003ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <MX_GPIO_Init+0x90>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a11      	ldr	r2, [pc, #68]	; (8000408 <MX_GPIO_Init+0x90>)
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_GPIO_Init+0x90>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003da:	480c      	ldr	r0, [pc, #48]	; (800040c <MX_GPIO_Init+0x94>)
 80003dc:	f000 ff5e 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e6:	2301      	movs	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ee:	2302      	movs	r3, #2
 80003f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	4619      	mov	r1, r3
 80003f8:	4804      	ldr	r0, [pc, #16]	; (800040c <MX_GPIO_Init+0x94>)
 80003fa:	f000 fdcb 	bl	8000f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003fe:	bf00      	nop
 8000400:	3720      	adds	r7, #32
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000
 800040c:	40011000 	.word	0x40011000

08000410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000414:	b672      	cpsid	i
}
 8000416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000418:	e7fe      	b.n	8000418 <Error_Handler+0x8>
	...

0800041c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <HAL_MspInit+0x5c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a14      	ldr	r2, [pc, #80]	; (8000478 <HAL_MspInit+0x5c>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <HAL_MspInit+0x5c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <HAL_MspInit+0x5c>)
 8000440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000444:	61d3      	str	r3, [r2, #28]
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <HAL_MspInit+0x60>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <HAL_MspInit+0x60>)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000
 800047c:	40010000 	.word	0x40010000

08000480 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a32      	ldr	r2, [pc, #200]	; (8000564 <HAL_SPI_MspInit+0xe4>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d15d      	bne.n	800055c <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004a0:	4b31      	ldr	r3, [pc, #196]	; (8000568 <HAL_SPI_MspInit+0xe8>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a30      	ldr	r2, [pc, #192]	; (8000568 <HAL_SPI_MspInit+0xe8>)
 80004a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b2e      	ldr	r3, [pc, #184]	; (8000568 <HAL_SPI_MspInit+0xe8>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b2b      	ldr	r3, [pc, #172]	; (8000568 <HAL_SPI_MspInit+0xe8>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a2a      	ldr	r2, [pc, #168]	; (8000568 <HAL_SPI_MspInit+0xe8>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b28      	ldr	r3, [pc, #160]	; (8000568 <HAL_SPI_MspInit+0xe8>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004d0:	23a0      	movs	r3, #160	; 0xa0
 80004d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	4619      	mov	r1, r3
 80004e2:	4822      	ldr	r0, [pc, #136]	; (800056c <HAL_SPI_MspInit+0xec>)
 80004e4:	f000 fd56 	bl	8000f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004e8:	2340      	movs	r3, #64	; 0x40
 80004ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ec:	2302      	movs	r3, #2
 80004ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f0:	2303      	movs	r3, #3
 80004f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	4619      	mov	r1, r3
 80004fa:	481c      	ldr	r0, [pc, #112]	; (800056c <HAL_SPI_MspInit+0xec>)
 80004fc:	f000 fd4a 	bl	8000f94 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <HAL_SPI_MspInit+0xf0>)
 8000502:	4a1c      	ldr	r2, [pc, #112]	; (8000574 <HAL_SPI_MspInit+0xf4>)
 8000504:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <HAL_SPI_MspInit+0xf0>)
 8000508:	2200      	movs	r2, #0
 800050a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <HAL_SPI_MspInit+0xf0>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <HAL_SPI_MspInit+0xf0>)
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <HAL_SPI_MspInit+0xf0>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <HAL_SPI_MspInit+0xf0>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_SPI_MspInit+0xf0>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <HAL_SPI_MspInit+0xf0>)
 800052c:	2200      	movs	r2, #0
 800052e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000530:	480f      	ldr	r0, [pc, #60]	; (8000570 <HAL_SPI_MspInit+0xf0>)
 8000532:	f000 fa8d 	bl	8000a50 <HAL_DMA_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 800053c:	f7ff ff68 	bl	8000410 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <HAL_SPI_MspInit+0xf0>)
 8000544:	64da      	str	r2, [r3, #76]	; 0x4c
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <HAL_SPI_MspInit+0xf0>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	2023      	movs	r0, #35	; 0x23
 8000552:	f000 fa46 	bl	80009e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000556:	2023      	movs	r0, #35	; 0x23
 8000558:	f000 fa5f 	bl	8000a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40013000 	.word	0x40013000
 8000568:	40021000 	.word	0x40021000
 800056c:	40010800 	.word	0x40010800
 8000570:	200000d0 	.word	0x200000d0
 8000574:	4002001c 	.word	0x4002001c

08000578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a20      	ldr	r2, [pc, #128]	; (8000614 <HAL_UART_MspInit+0x9c>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d139      	bne.n	800060c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <HAL_UART_MspInit+0xa0>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a1e      	ldr	r2, [pc, #120]	; (8000618 <HAL_UART_MspInit+0xa0>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <HAL_UART_MspInit+0xa0>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <HAL_UART_MspInit+0xa0>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a18      	ldr	r2, [pc, #96]	; (8000618 <HAL_UART_MspInit+0xa0>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_UART_MspInit+0xa0>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0304 	and.w	r3, r3, #4
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ce:	2302      	movs	r3, #2
 80005d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d2:	2303      	movs	r3, #3
 80005d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	4619      	mov	r1, r3
 80005dc:	480f      	ldr	r0, [pc, #60]	; (800061c <HAL_UART_MspInit+0xa4>)
 80005de:	f000 fcd9 	bl	8000f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	4619      	mov	r1, r3
 80005f6:	4809      	ldr	r0, [pc, #36]	; (800061c <HAL_UART_MspInit+0xa4>)
 80005f8:	f000 fccc 	bl	8000f94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	2025      	movs	r0, #37	; 0x25
 8000602:	f000 f9ee 	bl	80009e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000606:	2025      	movs	r0, #37	; 0x25
 8000608:	f000 fa07 	bl	8000a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40013800 	.word	0x40013800
 8000618:	40021000 	.word	0x40021000
 800061c:	40010800 	.word	0x40010800

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000624:	e7fe      	b.n	8000624 <NMI_Handler+0x4>

08000626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <MemManage_Handler+0x4>

08000632 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000636:	e7fe      	b.n	8000636 <BusFault_Handler+0x4>

08000638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <UsageFault_Handler+0x4>

0800063e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr

0800064a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr

08000656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000666:	f000 f8c9 	bl	80007fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <DMA1_Channel2_IRQHandler+0x10>)
 8000676:	f000 fb59 	bl	8000d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000d0 	.word	0x200000d0

08000684 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000688:	4802      	ldr	r0, [pc, #8]	; (8000694 <SPI1_IRQHandler+0x10>)
 800068a:	f001 fc8b 	bl	8001fa4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000078 	.word	0x20000078

08000698 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800069c:	4802      	ldr	r0, [pc, #8]	; (80006a8 <USART1_IRQHandler+0x10>)
 800069e:	f002 f839 	bl	8002714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000114 	.word	0x20000114

080006ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b4:	4a14      	ldr	r2, [pc, #80]	; (8000708 <_sbrk+0x5c>)
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <_sbrk+0x60>)
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <_sbrk+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d102      	bne.n	80006ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <_sbrk+0x64>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <_sbrk+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <_sbrk+0x64>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	693a      	ldr	r2, [r7, #16]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d207      	bcs.n	80006ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006dc:	f002 fd92 	bl	8003204 <__errno>
 80006e0:	4603      	mov	r3, r0
 80006e2:	220c      	movs	r2, #12
 80006e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	e009      	b.n	8000700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <_sbrk+0x64>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <_sbrk+0x64>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	4a05      	ldr	r2, [pc, #20]	; (8000710 <_sbrk+0x64>)
 80006fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006fe:	68fb      	ldr	r3, [r7, #12]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20005000 	.word	0x20005000
 800070c:	00000400 	.word	0x00000400
 8000710:	20000174 	.word	0x20000174
 8000714:	200002c8 	.word	0x200002c8

08000718 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000724:	f7ff fff8 	bl	8000718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800072a:	490c      	ldr	r1, [pc, #48]	; (800075c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <LoopFillZerobss+0x16>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000730:	e002      	b.n	8000738 <LoopCopyDataInit>

08000732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000736:	3304      	adds	r3, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800073c:	d3f9      	bcc.n	8000732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073e:	4a09      	ldr	r2, [pc, #36]	; (8000764 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000740:	4c09      	ldr	r4, [pc, #36]	; (8000768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000744:	e001      	b.n	800074a <LoopFillZerobss>

08000746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000748:	3204      	adds	r2, #4

0800074a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800074c:	d3fb      	bcc.n	8000746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800074e:	f002 fd5f 	bl	8003210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000752:	f7ff fd19 	bl	8000188 <main>
  bx lr
 8000756:	4770      	bx	lr
  ldr r0, =_sdata
 8000758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800075c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000760:	08003b9c 	.word	0x08003b9c
  ldr r2, =_sbss
 8000764:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000768:	200002c4 	.word	0x200002c4

0800076c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800076c:	e7fe      	b.n	800076c <ADC1_2_IRQHandler>
	...

08000770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_Init+0x28>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_Init+0x28>)
 800077a:	f043 0310 	orr.w	r3, r3, #16
 800077e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000780:	2003      	movs	r0, #3
 8000782:	f000 f923 	bl	80009cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000786:	200f      	movs	r0, #15
 8000788:	f000 f808 	bl	800079c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800078c:	f7ff fe46 	bl	800041c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40022000 	.word	0x40022000

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_InitTick+0x54>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_InitTick+0x58>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f93b 	bl	8000a36 <HAL_SYSTICK_Config>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00e      	b.n	80007e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d80a      	bhi.n	80007e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d0:	2200      	movs	r2, #0
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f000 f903 	bl	80009e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <HAL_InitTick+0x5c>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e000      	b.n	80007e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000008 	.word	0x20000008
 80007f8:	20000004 	.word	0x20000004

080007fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_IncTick+0x1c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_IncTick+0x20>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4a03      	ldr	r2, [pc, #12]	; (800081c <HAL_IncTick+0x20>)
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000008 	.word	0x20000008
 800081c:	20000178 	.word	0x20000178

08000820 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;
 8000824:	4b02      	ldr	r3, [pc, #8]	; (8000830 <HAL_GetTick+0x10>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	20000178 	.word	0x20000178

08000834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000850:	4013      	ands	r3, r2
 8000852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800085c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000866:	4a04      	ldr	r2, [pc, #16]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	60d3      	str	r3, [r2, #12]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <__NVIC_GetPriorityGrouping+0x18>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	f003 0307 	and.w	r3, r3, #7
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	db0b      	blt.n	80008c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f003 021f 	and.w	r2, r3, #31
 80008b0:	4906      	ldr	r1, [pc, #24]	; (80008cc <__NVIC_EnableIRQ+0x34>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	095b      	lsrs	r3, r3, #5
 80008b8:	2001      	movs	r0, #1
 80008ba:	fa00 f202 	lsl.w	r2, r0, r2
 80008be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	e000e100 	.word	0xe000e100

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f1c3 0307 	rsb	r3, r3, #7
 800093e:	2b04      	cmp	r3, #4
 8000940:	bf28      	it	cs
 8000942:	2304      	movcs	r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3304      	adds	r3, #4
 800094a:	2b06      	cmp	r3, #6
 800094c:	d902      	bls.n	8000954 <NVIC_EncodePriority+0x30>
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3b03      	subs	r3, #3
 8000952:	e000      	b.n	8000956 <NVIC_EncodePriority+0x32>
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	401a      	ands	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	43d9      	mvns	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	4313      	orrs	r3, r2
         );
}
 800097e:	4618      	mov	r0, r3
 8000980:	3724      	adds	r7, #36	; 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000998:	d301      	bcc.n	800099e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099a:	2301      	movs	r3, #1
 800099c:	e00f      	b.n	80009be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <SysTick_Config+0x40>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a6:	210f      	movs	r1, #15
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f7ff ff90 	bl	80008d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <SysTick_Config+0x40>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <SysTick_Config+0x40>)
 80009b8:	2207      	movs	r2, #7
 80009ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	e000e010 	.word	0xe000e010

080009cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ff2d 	bl	8000834 <__NVIC_SetPriorityGrouping>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f4:	f7ff ff42 	bl	800087c <__NVIC_GetPriorityGrouping>
 80009f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	6978      	ldr	r0, [r7, #20]
 8000a00:	f7ff ff90 	bl	8000924 <NVIC_EncodePriority>
 8000a04:	4602      	mov	r2, r0
 8000a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff5f 	bl	80008d0 <__NVIC_SetPriority>
}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff35 	bl	8000898 <__NVIC_EnableIRQ>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ffa2 	bl	8000988 <SysTick_Config>
 8000a44:	4603      	mov	r3, r0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e043      	b.n	8000aee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <HAL_DMA_Init+0xa8>)
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a22      	ldr	r2, [pc, #136]	; (8000afc <HAL_DMA_Init+0xac>)
 8000a72:	fba2 2303 	umull	r2, r3, r2, r3
 8000a76:	091b      	lsrs	r3, r3, #4
 8000a78:	009a      	lsls	r2, r3, #2
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a1f      	ldr	r2, [pc, #124]	; (8000b00 <HAL_DMA_Init+0xb0>)
 8000a82:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2202      	movs	r2, #2
 8000a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ac0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	bffdfff8 	.word	0xbffdfff8
 8000afc:	cccccccd 	.word	0xcccccccd
 8000b00:	40020000 	.word	0x40020000

08000b04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d101      	bne.n	8000b24 <HAL_DMA_Start_IT+0x20>
 8000b20:	2302      	movs	r3, #2
 8000b22:	e04b      	b.n	8000bbc <HAL_DMA_Start_IT+0xb8>
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2201      	movs	r2, #1
 8000b28:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d13a      	bne.n	8000bae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2200      	movs	r2, #0
 8000b44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f022 0201 	bic.w	r2, r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	68b9      	ldr	r1, [r7, #8]
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f000 f9eb 	bl	8000f38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d008      	beq.n	8000b7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f042 020e 	orr.w	r2, r2, #14
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	e00f      	b.n	8000b9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f022 0204 	bic.w	r2, r2, #4
 8000b8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f042 020a 	orr.w	r2, r2, #10
 8000b9a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f042 0201 	orr.w	r2, r2, #1
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e005      	b.n	8000bba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d008      	beq.n	8000bee <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2204      	movs	r2, #4
 8000be0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e020      	b.n	8000c30 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 020e 	bic.w	r2, r2, #14
 8000bfc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 0201 	bic.w	r2, r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c16:	2101      	movs	r1, #1
 8000c18:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
	...

08000c3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d005      	beq.n	8000c60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2204      	movs	r2, #4
 8000c58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e051      	b.n	8000d04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 020e 	bic.w	r2, r2, #14
 8000c6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0201 	bic.w	r2, r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a22      	ldr	r2, [pc, #136]	; (8000d10 <HAL_DMA_Abort_IT+0xd4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d029      	beq.n	8000cde <HAL_DMA_Abort_IT+0xa2>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <HAL_DMA_Abort_IT+0xd8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d022      	beq.n	8000cda <HAL_DMA_Abort_IT+0x9e>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <HAL_DMA_Abort_IT+0xdc>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d01a      	beq.n	8000cd4 <HAL_DMA_Abort_IT+0x98>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <HAL_DMA_Abort_IT+0xe0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d012      	beq.n	8000cce <HAL_DMA_Abort_IT+0x92>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <HAL_DMA_Abort_IT+0xe4>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d00a      	beq.n	8000cc8 <HAL_DMA_Abort_IT+0x8c>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <HAL_DMA_Abort_IT+0xe8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d102      	bne.n	8000cc2 <HAL_DMA_Abort_IT+0x86>
 8000cbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cc0:	e00e      	b.n	8000ce0 <HAL_DMA_Abort_IT+0xa4>
 8000cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cc6:	e00b      	b.n	8000ce0 <HAL_DMA_Abort_IT+0xa4>
 8000cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ccc:	e008      	b.n	8000ce0 <HAL_DMA_Abort_IT+0xa4>
 8000cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd2:	e005      	b.n	8000ce0 <HAL_DMA_Abort_IT+0xa4>
 8000cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd8:	e002      	b.n	8000ce0 <HAL_DMA_Abort_IT+0xa4>
 8000cda:	2310      	movs	r3, #16
 8000cdc:	e000      	b.n	8000ce0 <HAL_DMA_Abort_IT+0xa4>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <HAL_DMA_Abort_IT+0xec>)
 8000ce2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	4798      	blx	r3
    } 
  }
  return status;
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40020008 	.word	0x40020008
 8000d14:	4002001c 	.word	0x4002001c
 8000d18:	40020030 	.word	0x40020030
 8000d1c:	40020044 	.word	0x40020044
 8000d20:	40020058 	.word	0x40020058
 8000d24:	4002006c 	.word	0x4002006c
 8000d28:	40020000 	.word	0x40020000

08000d2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	2204      	movs	r2, #4
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d04f      	beq.n	8000df4 <HAL_DMA_IRQHandler+0xc8>
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d04a      	beq.n	8000df4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0320 	and.w	r3, r3, #32
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d107      	bne.n	8000d7c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0204 	bic.w	r2, r2, #4
 8000d7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a66      	ldr	r2, [pc, #408]	; (8000f1c <HAL_DMA_IRQHandler+0x1f0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d029      	beq.n	8000dda <HAL_DMA_IRQHandler+0xae>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a65      	ldr	r2, [pc, #404]	; (8000f20 <HAL_DMA_IRQHandler+0x1f4>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d022      	beq.n	8000dd6 <HAL_DMA_IRQHandler+0xaa>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a63      	ldr	r2, [pc, #396]	; (8000f24 <HAL_DMA_IRQHandler+0x1f8>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d01a      	beq.n	8000dd0 <HAL_DMA_IRQHandler+0xa4>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a62      	ldr	r2, [pc, #392]	; (8000f28 <HAL_DMA_IRQHandler+0x1fc>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d012      	beq.n	8000dca <HAL_DMA_IRQHandler+0x9e>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a60      	ldr	r2, [pc, #384]	; (8000f2c <HAL_DMA_IRQHandler+0x200>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d00a      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0x98>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a5f      	ldr	r2, [pc, #380]	; (8000f30 <HAL_DMA_IRQHandler+0x204>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d102      	bne.n	8000dbe <HAL_DMA_IRQHandler+0x92>
 8000db8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dbc:	e00e      	b.n	8000ddc <HAL_DMA_IRQHandler+0xb0>
 8000dbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000dc2:	e00b      	b.n	8000ddc <HAL_DMA_IRQHandler+0xb0>
 8000dc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000dc8:	e008      	b.n	8000ddc <HAL_DMA_IRQHandler+0xb0>
 8000dca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dce:	e005      	b.n	8000ddc <HAL_DMA_IRQHandler+0xb0>
 8000dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd4:	e002      	b.n	8000ddc <HAL_DMA_IRQHandler+0xb0>
 8000dd6:	2340      	movs	r3, #64	; 0x40
 8000dd8:	e000      	b.n	8000ddc <HAL_DMA_IRQHandler+0xb0>
 8000dda:	2304      	movs	r3, #4
 8000ddc:	4a55      	ldr	r2, [pc, #340]	; (8000f34 <HAL_DMA_IRQHandler+0x208>)
 8000dde:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 8094 	beq.w	8000f12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000df2:	e08e      	b.n	8000f12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	2202      	movs	r2, #2
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d056      	beq.n	8000eb2 <HAL_DMA_IRQHandler+0x186>
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d051      	beq.n	8000eb2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0320 	and.w	r3, r3, #32
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d10b      	bne.n	8000e34 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 020a 	bic.w	r2, r2, #10
 8000e2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a38      	ldr	r2, [pc, #224]	; (8000f1c <HAL_DMA_IRQHandler+0x1f0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d029      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x166>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a37      	ldr	r2, [pc, #220]	; (8000f20 <HAL_DMA_IRQHandler+0x1f4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d022      	beq.n	8000e8e <HAL_DMA_IRQHandler+0x162>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a35      	ldr	r2, [pc, #212]	; (8000f24 <HAL_DMA_IRQHandler+0x1f8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d01a      	beq.n	8000e88 <HAL_DMA_IRQHandler+0x15c>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a34      	ldr	r2, [pc, #208]	; (8000f28 <HAL_DMA_IRQHandler+0x1fc>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d012      	beq.n	8000e82 <HAL_DMA_IRQHandler+0x156>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a32      	ldr	r2, [pc, #200]	; (8000f2c <HAL_DMA_IRQHandler+0x200>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d00a      	beq.n	8000e7c <HAL_DMA_IRQHandler+0x150>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a31      	ldr	r2, [pc, #196]	; (8000f30 <HAL_DMA_IRQHandler+0x204>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d102      	bne.n	8000e76 <HAL_DMA_IRQHandler+0x14a>
 8000e70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e74:	e00e      	b.n	8000e94 <HAL_DMA_IRQHandler+0x168>
 8000e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e7a:	e00b      	b.n	8000e94 <HAL_DMA_IRQHandler+0x168>
 8000e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e80:	e008      	b.n	8000e94 <HAL_DMA_IRQHandler+0x168>
 8000e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e86:	e005      	b.n	8000e94 <HAL_DMA_IRQHandler+0x168>
 8000e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8c:	e002      	b.n	8000e94 <HAL_DMA_IRQHandler+0x168>
 8000e8e:	2320      	movs	r3, #32
 8000e90:	e000      	b.n	8000e94 <HAL_DMA_IRQHandler+0x168>
 8000e92:	2302      	movs	r3, #2
 8000e94:	4a27      	ldr	r2, [pc, #156]	; (8000f34 <HAL_DMA_IRQHandler+0x208>)
 8000e96:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d034      	beq.n	8000f12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000eb0:	e02f      	b.n	8000f12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	409a      	lsls	r2, r3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d028      	beq.n	8000f14 <HAL_DMA_IRQHandler+0x1e8>
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d023      	beq.n	8000f14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 020e 	bic.w	r2, r2, #14
 8000eda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	4798      	blx	r3
    }
  }
  return;
 8000f12:	bf00      	nop
 8000f14:	bf00      	nop
}
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40020008 	.word	0x40020008
 8000f20:	4002001c 	.word	0x4002001c
 8000f24:	40020030 	.word	0x40020030
 8000f28:	40020044 	.word	0x40020044
 8000f2c:	40020058 	.word	0x40020058
 8000f30:	4002006c 	.word	0x4002006c
 8000f34:	40020000 	.word	0x40020000

08000f38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4e:	2101      	movs	r1, #1
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b10      	cmp	r3, #16
 8000f64:	d108      	bne.n	8000f78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f76:	e007      	b.n	8000f88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	60da      	str	r2, [r3, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b08b      	sub	sp, #44	; 0x2c
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa6:	e169      	b.n	800127c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 8158 	bne.w	8001276 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	4a9a      	ldr	r2, [pc, #616]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d05e      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fd0:	4a98      	ldr	r2, [pc, #608]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d875      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fd6:	4a98      	ldr	r2, [pc, #608]	; (8001238 <HAL_GPIO_Init+0x2a4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d058      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fdc:	4a96      	ldr	r2, [pc, #600]	; (8001238 <HAL_GPIO_Init+0x2a4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d86f      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fe2:	4a96      	ldr	r2, [pc, #600]	; (800123c <HAL_GPIO_Init+0x2a8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d052      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fe8:	4a94      	ldr	r2, [pc, #592]	; (800123c <HAL_GPIO_Init+0x2a8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d869      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fee:	4a94      	ldr	r2, [pc, #592]	; (8001240 <HAL_GPIO_Init+0x2ac>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d04c      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000ff4:	4a92      	ldr	r2, [pc, #584]	; (8001240 <HAL_GPIO_Init+0x2ac>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d863      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000ffa:	4a92      	ldr	r2, [pc, #584]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d046      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8001000:	4a90      	ldr	r2, [pc, #576]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d85d      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8001006:	2b12      	cmp	r3, #18
 8001008:	d82a      	bhi.n	8001060 <HAL_GPIO_Init+0xcc>
 800100a:	2b12      	cmp	r3, #18
 800100c:	d859      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 800100e:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <HAL_GPIO_Init+0x80>)
 8001010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001014:	0800108f 	.word	0x0800108f
 8001018:	08001069 	.word	0x08001069
 800101c:	0800107b 	.word	0x0800107b
 8001020:	080010bd 	.word	0x080010bd
 8001024:	080010c3 	.word	0x080010c3
 8001028:	080010c3 	.word	0x080010c3
 800102c:	080010c3 	.word	0x080010c3
 8001030:	080010c3 	.word	0x080010c3
 8001034:	080010c3 	.word	0x080010c3
 8001038:	080010c3 	.word	0x080010c3
 800103c:	080010c3 	.word	0x080010c3
 8001040:	080010c3 	.word	0x080010c3
 8001044:	080010c3 	.word	0x080010c3
 8001048:	080010c3 	.word	0x080010c3
 800104c:	080010c3 	.word	0x080010c3
 8001050:	080010c3 	.word	0x080010c3
 8001054:	080010c3 	.word	0x080010c3
 8001058:	08001071 	.word	0x08001071
 800105c:	08001085 	.word	0x08001085
 8001060:	4a79      	ldr	r2, [pc, #484]	; (8001248 <HAL_GPIO_Init+0x2b4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d013      	beq.n	800108e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001066:	e02c      	b.n	80010c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	623b      	str	r3, [r7, #32]
          break;
 800106e:	e029      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	3304      	adds	r3, #4
 8001076:	623b      	str	r3, [r7, #32]
          break;
 8001078:	e024      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	3308      	adds	r3, #8
 8001080:	623b      	str	r3, [r7, #32]
          break;
 8001082:	e01f      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	330c      	adds	r3, #12
 800108a:	623b      	str	r3, [r7, #32]
          break;
 800108c:	e01a      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001096:	2304      	movs	r3, #4
 8001098:	623b      	str	r3, [r7, #32]
          break;
 800109a:	e013      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d105      	bne.n	80010b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a4:	2308      	movs	r3, #8
 80010a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	611a      	str	r2, [r3, #16]
          break;
 80010ae:	e009      	b.n	80010c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b0:	2308      	movs	r3, #8
 80010b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	615a      	str	r2, [r3, #20]
          break;
 80010ba:	e003      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
          break;
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          break;
 80010c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2bff      	cmp	r3, #255	; 0xff
 80010c8:	d801      	bhi.n	80010ce <HAL_GPIO_Init+0x13a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	e001      	b.n	80010d2 <HAL_GPIO_Init+0x13e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3304      	adds	r3, #4
 80010d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	2bff      	cmp	r3, #255	; 0xff
 80010d8:	d802      	bhi.n	80010e0 <HAL_GPIO_Init+0x14c>
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	e002      	b.n	80010e6 <HAL_GPIO_Init+0x152>
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	3b08      	subs	r3, #8
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	210f      	movs	r1, #15
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	401a      	ands	r2, r3
 80010f8:	6a39      	ldr	r1, [r7, #32]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	431a      	orrs	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 80b1 	beq.w	8001276 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001114:	4b4d      	ldr	r3, [pc, #308]	; (800124c <HAL_GPIO_Init+0x2b8>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a4c      	ldr	r2, [pc, #304]	; (800124c <HAL_GPIO_Init+0x2b8>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b4a      	ldr	r3, [pc, #296]	; (800124c <HAL_GPIO_Init+0x2b8>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800112c:	4a48      	ldr	r2, [pc, #288]	; (8001250 <HAL_GPIO_Init+0x2bc>)
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001138:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a40      	ldr	r2, [pc, #256]	; (8001254 <HAL_GPIO_Init+0x2c0>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d013      	beq.n	8001180 <HAL_GPIO_Init+0x1ec>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a3f      	ldr	r2, [pc, #252]	; (8001258 <HAL_GPIO_Init+0x2c4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d00d      	beq.n	800117c <HAL_GPIO_Init+0x1e8>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a3e      	ldr	r2, [pc, #248]	; (800125c <HAL_GPIO_Init+0x2c8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d007      	beq.n	8001178 <HAL_GPIO_Init+0x1e4>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a3d      	ldr	r2, [pc, #244]	; (8001260 <HAL_GPIO_Init+0x2cc>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d101      	bne.n	8001174 <HAL_GPIO_Init+0x1e0>
 8001170:	2303      	movs	r3, #3
 8001172:	e006      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001174:	2304      	movs	r3, #4
 8001176:	e004      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001178:	2302      	movs	r3, #2
 800117a:	e002      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001180:	2300      	movs	r3, #0
 8001182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001184:	f002 0203 	and.w	r2, r2, #3
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	4093      	lsls	r3, r2
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001192:	492f      	ldr	r1, [pc, #188]	; (8001250 <HAL_GPIO_Init+0x2bc>)
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d006      	beq.n	80011ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	492c      	ldr	r1, [pc, #176]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	608b      	str	r3, [r1, #8]
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	4928      	ldr	r1, [pc, #160]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	4922      	ldr	r1, [pc, #136]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	60cb      	str	r3, [r1, #12]
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	491e      	ldr	r1, [pc, #120]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4918      	ldr	r1, [pc, #96]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	604b      	str	r3, [r1, #4]
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	43db      	mvns	r3, r3
 8001212:	4914      	ldr	r1, [pc, #80]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 8001214:	4013      	ands	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d021      	beq.n	8001268 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	490e      	ldr	r1, [pc, #56]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
 8001230:	e021      	b.n	8001276 <HAL_GPIO_Init+0x2e2>
 8001232:	bf00      	nop
 8001234:	10320000 	.word	0x10320000
 8001238:	10310000 	.word	0x10310000
 800123c:	10220000 	.word	0x10220000
 8001240:	10210000 	.word	0x10210000
 8001244:	10120000 	.word	0x10120000
 8001248:	10110000 	.word	0x10110000
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000
 8001254:	40010800 	.word	0x40010800
 8001258:	40010c00 	.word	0x40010c00
 800125c:	40011000 	.word	0x40011000
 8001260:	40011400 	.word	0x40011400
 8001264:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_GPIO_Init+0x304>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	43db      	mvns	r3, r3
 8001270:	4909      	ldr	r1, [pc, #36]	; (8001298 <HAL_GPIO_Init+0x304>)
 8001272:	4013      	ands	r3, r2
 8001274:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	3301      	adds	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	fa22 f303 	lsr.w	r3, r2, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	f47f ae8e 	bne.w	8000fa8 <HAL_GPIO_Init+0x14>
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	372c      	adds	r7, #44	; 0x2c
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40010400 	.word	0x40010400

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	611a      	str	r2, [r3, #16]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4013      	ands	r3, r2
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43d9      	mvns	r1, r3
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	400b      	ands	r3, r1
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	611a      	str	r2, [r3, #16]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e272      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 8087 	beq.w	800142e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001320:	4b92      	ldr	r3, [pc, #584]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b04      	cmp	r3, #4
 800132a:	d00c      	beq.n	8001346 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800132c:	4b8f      	ldr	r3, [pc, #572]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	2b08      	cmp	r3, #8
 8001336:	d112      	bne.n	800135e <HAL_RCC_OscConfig+0x5e>
 8001338:	4b8c      	ldr	r3, [pc, #560]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d10b      	bne.n	800135e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001346:	4b89      	ldr	r3, [pc, #548]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d06c      	beq.n	800142c <HAL_RCC_OscConfig+0x12c>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d168      	bne.n	800142c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e24c      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001366:	d106      	bne.n	8001376 <HAL_RCC_OscConfig+0x76>
 8001368:	4b80      	ldr	r3, [pc, #512]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a7f      	ldr	r2, [pc, #508]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 800136e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	e02e      	b.n	80013d4 <HAL_RCC_OscConfig+0xd4>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10c      	bne.n	8001398 <HAL_RCC_OscConfig+0x98>
 800137e:	4b7b      	ldr	r3, [pc, #492]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a7a      	ldr	r2, [pc, #488]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b78      	ldr	r3, [pc, #480]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a77      	ldr	r2, [pc, #476]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e01d      	b.n	80013d4 <HAL_RCC_OscConfig+0xd4>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0xbc>
 80013a2:	4b72      	ldr	r3, [pc, #456]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a71      	ldr	r2, [pc, #452]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b6f      	ldr	r3, [pc, #444]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a6e      	ldr	r2, [pc, #440]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e00b      	b.n	80013d4 <HAL_RCC_OscConfig+0xd4>
 80013bc:	4b6b      	ldr	r3, [pc, #428]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a6a      	ldr	r2, [pc, #424]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b68      	ldr	r3, [pc, #416]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a67      	ldr	r2, [pc, #412]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d013      	beq.n	8001404 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fa20 	bl	8000820 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fa1c 	bl	8000820 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e200      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f6:	4b5d      	ldr	r3, [pc, #372]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0xe4>
 8001402:	e014      	b.n	800142e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fa0c 	bl	8000820 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800140c:	f7ff fa08 	bl	8000820 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e1ec      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141e:	4b53      	ldr	r3, [pc, #332]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x10c>
 800142a:	e000      	b.n	800142e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d063      	beq.n	8001502 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800143a:	4b4c      	ldr	r3, [pc, #304]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00b      	beq.n	800145e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001446:	4b49      	ldr	r3, [pc, #292]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b08      	cmp	r3, #8
 8001450:	d11c      	bne.n	800148c <HAL_RCC_OscConfig+0x18c>
 8001452:	4b46      	ldr	r3, [pc, #280]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d116      	bne.n	800148c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145e:	4b43      	ldr	r3, [pc, #268]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d005      	beq.n	8001476 <HAL_RCC_OscConfig+0x176>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d001      	beq.n	8001476 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e1c0      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001476:	4b3d      	ldr	r3, [pc, #244]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4939      	ldr	r1, [pc, #228]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148a:	e03a      	b.n	8001502 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d020      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_RCC_OscConfig+0x270>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff f9c1 	bl	8000820 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a2:	f7ff f9bd 	bl	8000820 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e1a1      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4927      	ldr	r1, [pc, #156]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]
 80014d4:	e015      	b.n	8001502 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <HAL_RCC_OscConfig+0x270>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff f9a0 	bl	8000820 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e4:	f7ff f99c 	bl	8000820 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e180      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b00      	cmp	r3, #0
 800150c:	d03a      	beq.n	8001584 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d019      	beq.n	800154a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HAL_RCC_OscConfig+0x274>)
 8001518:	2201      	movs	r2, #1
 800151a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151c:	f7ff f980 	bl	8000820 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001524:	f7ff f97c 	bl	8000820 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e160      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_RCC_OscConfig+0x26c>)
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001542:	2001      	movs	r0, #1
 8001544:	f000 face 	bl	8001ae4 <RCC_Delay>
 8001548:	e01c      	b.n	8001584 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_RCC_OscConfig+0x274>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7ff f966 	bl	8000820 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001556:	e00f      	b.n	8001578 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff f962 	bl	8000820 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d908      	bls.n	8001578 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e146      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	42420000 	.word	0x42420000
 8001574:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001578:	4b92      	ldr	r3, [pc, #584]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e9      	bne.n	8001558 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80a6 	beq.w	80016de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001596:	4b8b      	ldr	r3, [pc, #556]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10d      	bne.n	80015be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a87      	ldr	r2, [pc, #540]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	61d3      	str	r3, [r2, #28]
 80015ae:	4b85      	ldr	r3, [pc, #532]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ba:	2301      	movs	r3, #1
 80015bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015be:	4b82      	ldr	r3, [pc, #520]	; (80017c8 <HAL_RCC_OscConfig+0x4c8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d118      	bne.n	80015fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ca:	4b7f      	ldr	r3, [pc, #508]	; (80017c8 <HAL_RCC_OscConfig+0x4c8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a7e      	ldr	r2, [pc, #504]	; (80017c8 <HAL_RCC_OscConfig+0x4c8>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d6:	f7ff f923 	bl	8000820 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015de:	f7ff f91f 	bl	8000820 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b64      	cmp	r3, #100	; 0x64
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e103      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f0:	4b75      	ldr	r3, [pc, #468]	; (80017c8 <HAL_RCC_OscConfig+0x4c8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d106      	bne.n	8001612 <HAL_RCC_OscConfig+0x312>
 8001604:	4b6f      	ldr	r3, [pc, #444]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4a6e      	ldr	r2, [pc, #440]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6213      	str	r3, [r2, #32]
 8001610:	e02d      	b.n	800166e <HAL_RCC_OscConfig+0x36e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x334>
 800161a:	4b6a      	ldr	r3, [pc, #424]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4a69      	ldr	r2, [pc, #420]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	6213      	str	r3, [r2, #32]
 8001626:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a66      	ldr	r2, [pc, #408]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	f023 0304 	bic.w	r3, r3, #4
 8001630:	6213      	str	r3, [r2, #32]
 8001632:	e01c      	b.n	800166e <HAL_RCC_OscConfig+0x36e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b05      	cmp	r3, #5
 800163a:	d10c      	bne.n	8001656 <HAL_RCC_OscConfig+0x356>
 800163c:	4b61      	ldr	r3, [pc, #388]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a60      	ldr	r2, [pc, #384]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6213      	str	r3, [r2, #32]
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4a5d      	ldr	r2, [pc, #372]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6213      	str	r3, [r2, #32]
 8001654:	e00b      	b.n	800166e <HAL_RCC_OscConfig+0x36e>
 8001656:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4a5a      	ldr	r2, [pc, #360]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6213      	str	r3, [r2, #32]
 8001662:	4b58      	ldr	r3, [pc, #352]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4a57      	ldr	r2, [pc, #348]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	f023 0304 	bic.w	r3, r3, #4
 800166c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d015      	beq.n	80016a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001676:	f7ff f8d3 	bl	8000820 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167c:	e00a      	b.n	8001694 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f7ff f8cf 	bl	8000820 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f241 3288 	movw	r2, #5000	; 0x1388
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e0b1      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001694:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0ee      	beq.n	800167e <HAL_RCC_OscConfig+0x37e>
 80016a0:	e014      	b.n	80016cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a2:	f7ff f8bd 	bl	8000820 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016aa:	f7ff f8b9 	bl	8000820 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e09b      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c0:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ee      	bne.n	80016aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d105      	bne.n	80016de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d2:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a3b      	ldr	r2, [pc, #236]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8087 	beq.w	80017f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e8:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d061      	beq.n	80017b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d146      	bne.n	800178a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <HAL_RCC_OscConfig+0x4cc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff f88d 	bl	8000820 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff f889 	bl	8000820 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e06d      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171c:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f0      	bne.n	800170a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001730:	d108      	bne.n	8001744 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	4921      	ldr	r1, [pc, #132]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a19      	ldr	r1, [r3, #32]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	430b      	orrs	r3, r1
 8001756:	491b      	ldr	r1, [pc, #108]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_RCC_OscConfig+0x4cc>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7ff f85d 	bl	8000820 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff f859 	bl	8000820 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e03d      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x46a>
 8001788:	e035      	b.n	80017f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_RCC_OscConfig+0x4cc>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff f846 	bl	8000820 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff f842 	bl	8000820 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e026      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x498>
 80017b6:	e01e      	b.n	80017f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e019      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40007000 	.word	0x40007000
 80017cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_OscConfig+0x500>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000

08001804 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0d0      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001818:	4b6a      	ldr	r3, [pc, #424]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d910      	bls.n	8001848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b67      	ldr	r3, [pc, #412]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 0207 	bic.w	r2, r3, #7
 800182e:	4965      	ldr	r1, [pc, #404]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001836:	4b63      	ldr	r3, [pc, #396]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0b8      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d020      	beq.n	8001896 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001860:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800186a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001878:	4b53      	ldr	r3, [pc, #332]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001882:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001884:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	494d      	ldr	r1, [pc, #308]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d040      	beq.n	8001924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d115      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e07f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e073      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d2:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e06b      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f023 0203 	bic.w	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4936      	ldr	r1, [pc, #216]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f4:	f7fe ff94 	bl	8000820 <HAL_GetTick>
 80018f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fc:	f7fe ff90 	bl	8000820 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e053      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 020c 	and.w	r2, r3, #12
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	429a      	cmp	r2, r3
 8001922:	d1eb      	bne.n	80018fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001924:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d210      	bcs.n	8001954 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 0207 	bic.w	r2, r3, #7
 800193a:	4922      	ldr	r1, [pc, #136]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e032      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4916      	ldr	r1, [pc, #88]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d009      	beq.n	8001992 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	490e      	ldr	r1, [pc, #56]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001992:	f000 f821 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8001996:	4602      	mov	r2, r0
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	490a      	ldr	r1, [pc, #40]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80019a4:	5ccb      	ldrb	r3, [r1, r3]
 80019a6:	fa22 f303 	lsr.w	r3, r2, r3
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1cc>)
 80019ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_RCC_ClockConfig+0x1d0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fef2 	bl	800079c <HAL_InitTick>

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40022000 	.word	0x40022000
 80019c8:	40021000 	.word	0x40021000
 80019cc:	08003b34 	.word	0x08003b34
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000004 	.word	0x20000004

080019d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x94>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d002      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x30>
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d003      	beq.n	8001a0e <HAL_RCC_GetSysClockFreq+0x36>
 8001a06:	e027      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a0a:	613b      	str	r3, [r7, #16]
      break;
 8001a0c:	e027      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	0c9b      	lsrs	r3, r3, #18
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a18:	5cd3      	ldrb	r3, [r2, r3]
 8001a1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d010      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	0c5b      	lsrs	r3, r3, #17
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a32:	5cd3      	ldrb	r3, [r2, r3]
 8001a34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a3a:	fb03 f202 	mul.w	r2, r3, r2
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e004      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a4c:	fb02 f303 	mul.w	r3, r2, r3
 8001a50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	613b      	str	r3, [r7, #16]
      break;
 8001a56:	e002      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a5a:	613b      	str	r3, [r7, #16]
      break;
 8001a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a5e:	693b      	ldr	r3, [r7, #16]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	371c      	adds	r7, #28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	007a1200 	.word	0x007a1200
 8001a74:	08003b4c 	.word	0x08003b4c
 8001a78:	08003b5c 	.word	0x08003b5c
 8001a7c:	003d0900 	.word	0x003d0900

08001a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	20000000 	.word	0x20000000

08001a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a98:	f7ff fff2 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	08003b44 	.word	0x08003b44

08001abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	0adb      	lsrs	r3, r3, #11
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	4903      	ldr	r1, [pc, #12]	; (8001ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad2:	5ccb      	ldrb	r3, [r1, r3]
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	08003b44 	.word	0x08003b44

08001ae4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <RCC_Delay+0x34>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <RCC_Delay+0x38>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0a5b      	lsrs	r3, r3, #9
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b00:	bf00      	nop
  }
  while (Delay --);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1e5a      	subs	r2, r3, #1
 8001b06:	60fa      	str	r2, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f9      	bne.n	8001b00 <RCC_Delay+0x1c>
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	10624dd3 	.word	0x10624dd3

08001b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e076      	b.n	8001c20 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d108      	bne.n	8001b4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b42:	d009      	beq.n	8001b58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
 8001b4a:	e005      	b.n	8001b58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7fe fc84 	bl	8000480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bdc:	ea42 0103 	orr.w	r1, r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	0c1a      	lsrs	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f002 0204 	and.w	r2, r2, #4
 8001bfe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	69da      	ldr	r2, [r3, #28]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	4613      	mov	r3, r2
 8001c34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
  
  if (hspi->State != HAL_SPI_STATE_READY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d002      	beq.n	8001c4c <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8001c46:	2302      	movs	r3, #2
 8001c48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c4a:	e0a2      	b.n	8001d92 <HAL_SPI_Receive_DMA+0x16a>
  }
  
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d110      	bne.n	8001c76 <HAL_SPI_Receive_DMA+0x4e>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c5c:	d10b      	bne.n	8001c76 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2204      	movs	r2, #4
 8001c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f89f 	bl	8001db0 <HAL_SPI_TransmitReceive_DMA>
 8001c72:	4603      	mov	r3, r0
 8001c74:	e092      	b.n	8001d9c <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_SPI_Receive_DMA+0x5c>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e08b      	b.n	8001d9c <HAL_SPI_Receive_DMA+0x174>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_SPI_Receive_DMA+0x70>
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c9c:	e079      	b.n	8001d92 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	88fa      	ldrh	r2, [r7, #6]
 8001cb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	88fa      	ldrh	r2, [r7, #6]
 8001cbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cde:	d10f      	bne.n	8001d00 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cfe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d04:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_SPI_Receive_DMA+0x17c>)
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	4a26      	ldr	r2, [pc, #152]	; (8001da8 <HAL_SPI_Receive_DMA+0x180>)
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	4a25      	ldr	r2, [pc, #148]	; (8001dac <HAL_SPI_Receive_DMA+0x184>)
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	330c      	adds	r3, #12
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d30:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d36:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001d38:	f7fe fee4 	bl	8000b04 <HAL_DMA_Start_IT>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d008      	beq.n	8001d54 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d46:	f043 0210 	orr.w	r2, r3, #16
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]

    goto error;
 8001d52:	e01e      	b.n	8001d92 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5e:	2b40      	cmp	r3, #64	; 0x40
 8001d60:	d007      	beq.n	8001d72 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d70:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0220 	orr.w	r2, r2, #32
 8001d80:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	080022dd 	.word	0x080022dd
 8001da8:	080021a9 	.word	0x080021a9
 8001dac:	08002315 	.word	0x08002315

08001db0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e0db      	b.n	8001f88 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dde:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001de6:	7dbb      	ldrb	r3, [r7, #22]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d00d      	beq.n	8001e08 <HAL_SPI_TransmitReceive_DMA+0x58>
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001df2:	d106      	bne.n	8001e02 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <HAL_SPI_TransmitReceive_DMA+0x52>
 8001dfc:	7dbb      	ldrb	r3, [r7, #22]
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d002      	beq.n	8001e08 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8001e02:	2302      	movs	r3, #2
 8001e04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e06:	e0ba      	b.n	8001f7e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e1e:	e0ae      	b.n	8001f7e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d003      	beq.n	8001e34 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2205      	movs	r2, #5
 8001e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	887a      	ldrh	r2, [r7, #2]
 8001e4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	887a      	ldrh	r2, [r7, #2]
 8001e56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d108      	bne.n	8001e88 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	4a45      	ldr	r2, [pc, #276]	; (8001f90 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	4a44      	ldr	r2, [pc, #272]	; (8001f94 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28
 8001e86:	e007      	b.n	8001e98 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8c:	4a42      	ldr	r2, [pc, #264]	; (8001f98 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	4a41      	ldr	r2, [pc, #260]	; (8001f9c <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9c:	4a40      	ldr	r2, [pc, #256]	; (8001fa0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	330c      	adds	r3, #12
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ebe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001ec0:	f7fe fe20 	bl	8000b04 <HAL_DMA_Start_IT>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ece:	f043 0210 	orr.w	r2, r3, #16
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	75fb      	strb	r3, [r7, #23]

    goto error;
 8001eda:	e050      	b.n	8001f7e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef8:	2200      	movs	r2, #0
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f00:	2200      	movs	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f08:	2200      	movs	r2, #0
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	4619      	mov	r1, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	330c      	adds	r3, #12
 8001f1c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f22:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001f24:	f7fe fdee 	bl	8000b04 <HAL_DMA_Start_IT>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	f043 0210 	orr.w	r2, r3, #16
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	75fb      	strb	r3, [r7, #23]

    goto error;
 8001f3e:	e01e      	b.n	8001f7e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	2b40      	cmp	r3, #64	; 0x40
 8001f4c:	d007      	beq.n	8001f5e <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f5c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0220 	orr.w	r2, r2, #32
 8001f6c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0202 	orr.w	r2, r2, #2
 8001f7c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	080022dd 	.word	0x080022dd
 8001f94:	080021a9 	.word	0x080021a9
 8001f98:	080022f9 	.word	0x080022f9
 8001f9c:	0800224f 	.word	0x0800224f
 8001fa0:	08002315 	.word	0x08002315

08001fa4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d009      	beq.n	8001fe4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d004      	beq.n	8001fe4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
    return;
 8001fe2:	e0b7      	b.n	8002154 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <HAL_SPI_IRQHandler+0x5e>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d004      	beq.n	8002002 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4798      	blx	r3
    return;
 8002000:	e0a8      	b.n	8002154 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <HAL_SPI_IRQHandler+0x74>
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 809e 	beq.w	8002154 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8098 	beq.w	8002154 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202a:	2b00      	cmp	r3, #0
 800202c:	d023      	beq.n	8002076 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b03      	cmp	r3, #3
 8002038:	d011      	beq.n	800205e <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203e:	f043 0204 	orr.w	r2, r3, #4
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	e00b      	b.n	8002076 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	693b      	ldr	r3, [r7, #16]
        return;
 8002074:	e06e      	b.n	8002154 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b00      	cmp	r3, #0
 800207e:	d014      	beq.n	80020aa <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d04f      	beq.n	8002152 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80020c0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d104      	bne.n	80020de <HAL_SPI_IRQHandler+0x13a>
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d034      	beq.n	8002148 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0203 	bic.w	r2, r2, #3
 80020ec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d011      	beq.n	800211a <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <HAL_SPI_IRQHandler+0x1b8>)
 80020fc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fd9a 	bl	8000c3c <HAL_DMA_Abort_IT>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211e:	2b00      	cmp	r3, #0
 8002120:	d016      	beq.n	8002150 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002126:	4a0d      	ldr	r2, [pc, #52]	; (800215c <HAL_SPI_IRQHandler+0x1b8>)
 8002128:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fd84 	bl	8000c3c <HAL_DMA_Abort_IT>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002146:	e003      	b.n	8002150 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f824 	bl	8002196 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800214e:	e000      	b.n	8002152 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8002150:	bf00      	nop
    return;
 8002152:	bf00      	nop
  }
}
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	08002355 	.word	0x08002355

08002160 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021b6:	f7fe fb33 	bl	8000820 <HAL_GetTick>
 80021ba:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d03b      	beq.n	8002242 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0220 	bic.w	r2, r2, #32
 80021d8:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10d      	bne.n	80021fe <SPI_DMAReceiveCplt+0x56>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ea:	d108      	bne.n	80021fe <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0203 	bic.w	r2, r2, #3
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	e007      	b.n	800220e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	2164      	movs	r1, #100	; 0x64
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f93a 	bl	800248c <SPI_EndRxTransaction>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f7ff ffab 	bl	8002196 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002240:	e002      	b.n	8002248 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f7fd ff82 	bl	800014c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800225c:	f7fe fae0 	bl	8000820 <HAL_GetTick>
 8002260:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	2b20      	cmp	r3, #32
 800226e:	d02f      	beq.n	80022d0 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0220 	bic.w	r2, r2, #32
 800227e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	2164      	movs	r1, #100	; 0x64
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f953 	bl	8002530 <SPI_EndRxTxTransaction>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0203 	bic.w	r2, r2, #3
 80022aa:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f7ff ff64 	bl	8002196 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80022ce:	e002      	b.n	80022d6 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f7ff ff45 	bl	8002160 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f7ff ff41 	bl	8002172 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff ff3c 	bl	8002184 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0203 	bic.w	r2, r2, #3
 8002330:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	f043 0210 	orr.w	r2, r3, #16
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f7ff ff25 	bl	8002196 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f7ff ff11 	bl	8002196 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800238c:	f7fe fa48 	bl	8000820 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	4413      	add	r3, r2
 800239a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800239c:	f7fe fa40 	bl	8000820 <HAL_GetTick>
 80023a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023a2:	4b39      	ldr	r3, [pc, #228]	; (8002488 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	015b      	lsls	r3, r3, #5
 80023a8:	0d1b      	lsrs	r3, r3, #20
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023b2:	e054      	b.n	800245e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ba:	d050      	beq.n	800245e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023bc:	f7fe fa30 	bl	8000820 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d902      	bls.n	80023d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d13d      	bne.n	800244e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ea:	d111      	bne.n	8002410 <SPI_WaitFlagStateUntilTimeout+0x94>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f4:	d004      	beq.n	8002400 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fe:	d107      	bne.n	8002410 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800240e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002418:	d10f      	bne.n	800243a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002438:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e017      	b.n	800247e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	3b01      	subs	r3, #1
 800245c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4013      	ands	r3, r2
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	429a      	cmp	r2, r3
 800246c:	bf0c      	ite	eq
 800246e:	2301      	moveq	r3, #1
 8002470:	2300      	movne	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	429a      	cmp	r2, r3
 800247a:	d19b      	bne.n	80023b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000000 	.word	0x20000000

0800248c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024a0:	d111      	bne.n	80024c6 <SPI_EndRxTransaction+0x3a>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024aa:	d004      	beq.n	80024b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b4:	d107      	bne.n	80024c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ce:	d117      	bne.n	8002500 <SPI_EndRxTransaction+0x74>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d8:	d112      	bne.n	8002500 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2200      	movs	r2, #0
 80024e2:	2101      	movs	r1, #1
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f7ff ff49 	bl	800237c <SPI_WaitFlagStateUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01a      	beq.n	8002526 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f4:	f043 0220 	orr.w	r2, r3, #32
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e013      	b.n	8002528 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2200      	movs	r2, #0
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f7ff ff36 	bl	800237c <SPI_WaitFlagStateUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	f043 0220 	orr.w	r2, r3, #32
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e000      	b.n	8002528 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2200      	movs	r2, #0
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f7ff ff18 	bl	800237c <SPI_WaitFlagStateUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f043 0220 	orr.w	r2, r3, #32
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e000      	b.n	8002564 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e042      	b.n	8002604 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fd fff0 	bl	8000578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2224      	movs	r2, #36	; 0x24
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 fd71 	bl	8003098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	4613      	mov	r3, r2
 800261a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b20      	cmp	r3, #32
 800262a:	d16d      	bne.n	8002708 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_UART_Transmit+0x2c>
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e066      	b.n	800270a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2221      	movs	r2, #33	; 0x21
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800264a:	f7fe f8e9 	bl	8000820 <HAL_GetTick>
 800264e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	88fa      	ldrh	r2, [r7, #6]
 800265a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002664:	d108      	bne.n	8002678 <HAL_UART_Transmit+0x6c>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d104      	bne.n	8002678 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	e003      	b.n	8002680 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002680:	e02a      	b.n	80026d8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2200      	movs	r2, #0
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 faf9 	bl	8002c84 <UART_WaitOnFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e036      	b.n	800270a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10b      	bne.n	80026ba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	3302      	adds	r3, #2
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	e007      	b.n	80026ca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	3301      	adds	r3, #1
 80026c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1cf      	bne.n	8002682 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2200      	movs	r2, #0
 80026ea:	2140      	movs	r1, #64	; 0x40
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fac9 	bl	8002c84 <UART_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e006      	b.n	800270a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e000      	b.n	800270a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
  }
}
 800270a:	4618      	mov	r0, r3
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b0ba      	sub	sp, #232	; 0xe8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10f      	bne.n	800277a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800275a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_UART_IRQHandler+0x66>
 8002766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fbd1 	bl	8002f1a <UART_Receive_IT>
      return;
 8002778:	e25b      	b.n	8002c32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800277a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80de 	beq.w	8002940 <HAL_UART_IRQHandler+0x22c>
 8002784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d106      	bne.n	800279e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002794:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80d1 	beq.w	8002940 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800279e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_UART_IRQHandler+0xae>
 80027aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f043 0201 	orr.w	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <HAL_UART_IRQHandler+0xd2>
 80027ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f043 0202 	orr.w	r2, r3, #2
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <HAL_UART_IRQHandler+0xf6>
 80027f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f043 0204 	orr.w	r2, r3, #4
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800280a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d011      	beq.n	800283a <HAL_UART_IRQHandler+0x126>
 8002816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d105      	bne.n	800282e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f043 0208 	orr.w	r2, r3, #8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 81f2 	beq.w	8002c28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_UART_IRQHandler+0x14e>
 8002850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fb5c 	bl	8002f1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf14      	ite	ne
 8002870:	2301      	movne	r3, #1
 8002872:	2300      	moveq	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <HAL_UART_IRQHandler+0x17a>
 8002886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800288a:	2b00      	cmp	r3, #0
 800288c:	d04f      	beq.n	800292e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa66 	bl	8002d60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d041      	beq.n	8002926 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3314      	adds	r3, #20
 80028a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028b0:	e853 3f00 	ldrex	r3, [r3]
 80028b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3314      	adds	r3, #20
 80028ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028de:	e841 2300 	strex	r3, r2, [r1]
 80028e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1d9      	bne.n	80028a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d013      	beq.n	800291e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	4a7e      	ldr	r2, [pc, #504]	; (8002af4 <HAL_UART_IRQHandler+0x3e0>)
 80028fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe f99a 	bl	8000c3c <HAL_DMA_Abort_IT>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d016      	beq.n	800293c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002918:	4610      	mov	r0, r2
 800291a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	e00e      	b.n	800293c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f99c 	bl	8002c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002924:	e00a      	b.n	800293c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f998 	bl	8002c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292c:	e006      	b.n	800293c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f994 	bl	8002c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800293a:	e175      	b.n	8002c28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800293c:	bf00      	nop
    return;
 800293e:	e173      	b.n	8002c28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	2b01      	cmp	r3, #1
 8002946:	f040 814f 	bne.w	8002be8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800294a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8148 	beq.w	8002be8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8141 	beq.w	8002be8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80b6 	beq.w	8002af8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002998:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8145 	beq.w	8002c2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029aa:	429a      	cmp	r2, r3
 80029ac:	f080 813e 	bcs.w	8002c2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b20      	cmp	r3, #32
 80029c0:	f000 8088 	beq.w	8002ad4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	330c      	adds	r3, #12
 80029ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	330c      	adds	r3, #12
 80029ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029f0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a00:	e841 2300 	strex	r3, r2, [r1]
 8002a04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1d9      	bne.n	80029c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3314      	adds	r3, #20
 8002a16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a1a:	e853 3f00 	ldrex	r3, [r3]
 8002a1e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3314      	adds	r3, #20
 8002a30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a40:	e841 2300 	strex	r3, r2, [r1]
 8002a44:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e1      	bne.n	8002a10 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3314      	adds	r3, #20
 8002a52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a56:	e853 3f00 	ldrex	r3, [r3]
 8002a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3314      	adds	r3, #20
 8002a6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a78:	e841 2300 	strex	r3, r2, [r1]
 8002a7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e3      	bne.n	8002a4c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a9c:	e853 3f00 	ldrex	r3, [r3]
 8002aa0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa4:	f023 0310 	bic.w	r3, r3, #16
 8002aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	330c      	adds	r3, #12
 8002ab2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ab6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ab8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002abc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002abe:	e841 2300 	strex	r3, r2, [r1]
 8002ac2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1e3      	bne.n	8002a92 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe f878 	bl	8000bc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8bf 	bl	8002c6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002af0:	e09c      	b.n	8002c2c <HAL_UART_IRQHandler+0x518>
 8002af2:	bf00      	nop
 8002af4:	08002e25 	.word	0x08002e25
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 808e 	beq.w	8002c30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8089 	beq.w	8002c30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	330c      	adds	r3, #12
 8002b24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b42:	647a      	str	r2, [r7, #68]	; 0x44
 8002b44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e3      	bne.n	8002b1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3314      	adds	r3, #20
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	e853 3f00 	ldrex	r3, [r3]
 8002b64:	623b      	str	r3, [r7, #32]
   return(result);
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3314      	adds	r3, #20
 8002b76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b7a:	633a      	str	r2, [r7, #48]	; 0x30
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b82:	e841 2300 	strex	r3, r2, [r1]
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e3      	bne.n	8002b56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	e853 3f00 	ldrex	r3, [r3]
 8002baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0310 	bic.w	r3, r3, #16
 8002bb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	330c      	adds	r3, #12
 8002bbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002bc0:	61fa      	str	r2, [r7, #28]
 8002bc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc4:	69b9      	ldr	r1, [r7, #24]
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	e841 2300 	strex	r3, r2, [r1]
 8002bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e3      	bne.n	8002b9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f844 	bl	8002c6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002be6:	e023      	b.n	8002c30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d009      	beq.n	8002c08 <HAL_UART_IRQHandler+0x4f4>
 8002bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f923 	bl	8002e4c <UART_Transmit_IT>
    return;
 8002c06:	e014      	b.n	8002c32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00e      	beq.n	8002c32 <HAL_UART_IRQHandler+0x51e>
 8002c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f962 	bl	8002eea <UART_EndTransmit_IT>
    return;
 8002c26:	e004      	b.n	8002c32 <HAL_UART_IRQHandler+0x51e>
    return;
 8002c28:	bf00      	nop
 8002c2a:	e002      	b.n	8002c32 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c2c:	bf00      	nop
 8002c2e:	e000      	b.n	8002c32 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c30:	bf00      	nop
  }
}
 8002c32:	37e8      	adds	r7, #232	; 0xe8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b090      	sub	sp, #64	; 0x40
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c94:	e050      	b.n	8002d38 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d04c      	beq.n	8002d38 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ca4:	f7fd fdbc 	bl	8000820 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d241      	bcs.n	8002d38 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	330c      	adds	r3, #12
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	e853 3f00 	ldrex	r3, [r3]
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	330c      	adds	r3, #12
 8002cd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cd4:	637a      	str	r2, [r7, #52]	; 0x34
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cdc:	e841 2300 	strex	r3, r2, [r1]
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e5      	bne.n	8002cb4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3314      	adds	r3, #20
 8002cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	e853 3f00 	ldrex	r3, [r3]
 8002cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3314      	adds	r3, #20
 8002d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d08:	623a      	str	r2, [r7, #32]
 8002d0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0c:	69f9      	ldr	r1, [r7, #28]
 8002d0e:	6a3a      	ldr	r2, [r7, #32]
 8002d10:	e841 2300 	strex	r3, r2, [r1]
 8002d14:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e5      	bne.n	8002ce8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e00f      	b.n	8002d58 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4013      	ands	r3, r2
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d09f      	beq.n	8002c96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3740      	adds	r7, #64	; 0x40
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b095      	sub	sp, #84	; 0x54
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	330c      	adds	r3, #12
 8002d86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d88:	643a      	str	r2, [r7, #64]	; 0x40
 8002d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e5      	bne.n	8002d68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3314      	adds	r3, #20
 8002da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3314      	adds	r3, #20
 8002dba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e5      	bne.n	8002d9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d119      	bne.n	8002e0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	e853 3f00 	ldrex	r3, [r3]
 8002de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f023 0310 	bic.w	r3, r3, #16
 8002dee:	647b      	str	r3, [r7, #68]	; 0x44
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002df8:	61ba      	str	r2, [r7, #24]
 8002dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	6979      	ldr	r1, [r7, #20]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	e841 2300 	strex	r3, r2, [r1]
 8002e04:	613b      	str	r3, [r7, #16]
   return(result);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e5      	bne.n	8002dd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e1a:	bf00      	nop
 8002e1c:	3754      	adds	r7, #84	; 0x54
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f7ff ff0c 	bl	8002c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b21      	cmp	r3, #33	; 0x21
 8002e5e:	d13e      	bne.n	8002ede <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e68:	d114      	bne.n	8002e94 <UART_Transmit_IT+0x48>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d110      	bne.n	8002e94 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	1c9a      	adds	r2, r3, #2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	621a      	str	r2, [r3, #32]
 8002e92:	e008      	b.n	8002ea6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	1c59      	adds	r1, r3, #1
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6211      	str	r1, [r2, #32]
 8002e9e:	781a      	ldrb	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10f      	bne.n	8002eda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
  }
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff fe94 	bl	8002c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b08c      	sub	sp, #48	; 0x30
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b22      	cmp	r3, #34	; 0x22
 8002f2c:	f040 80ae 	bne.w	800308c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f38:	d117      	bne.n	8002f6a <UART_Receive_IT+0x50>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d113      	bne.n	8002f6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	1c9a      	adds	r2, r3, #2
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28
 8002f68:	e026      	b.n	8002fb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7c:	d007      	beq.n	8002f8e <UART_Receive_IT+0x74>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <UART_Receive_IT+0x82>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	701a      	strb	r2, [r3, #0]
 8002f9a:	e008      	b.n	8002fae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d15d      	bne.n	8003088 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0220 	bic.w	r2, r2, #32
 8002fda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	2b01      	cmp	r3, #1
 8003010:	d135      	bne.n	800307e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	330c      	adds	r3, #12
 800301e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	e853 3f00 	ldrex	r3, [r3]
 8003026:	613b      	str	r3, [r7, #16]
   return(result);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f023 0310 	bic.w	r3, r3, #16
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	330c      	adds	r3, #12
 8003036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003038:	623a      	str	r2, [r7, #32]
 800303a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303c:	69f9      	ldr	r1, [r7, #28]
 800303e:	6a3a      	ldr	r2, [r7, #32]
 8003040:	e841 2300 	strex	r3, r2, [r1]
 8003044:	61bb      	str	r3, [r7, #24]
   return(result);
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e5      	bne.n	8003018 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b10      	cmp	r3, #16
 8003058:	d10a      	bne.n	8003070 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003074:	4619      	mov	r1, r3
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fdf9 	bl	8002c6e <HAL_UARTEx_RxEventCallback>
 800307c:	e002      	b.n	8003084 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff fde3 	bl	8002c4a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	e002      	b.n	800308e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	3730      	adds	r7, #48	; 0x30
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030d2:	f023 030c 	bic.w	r3, r3, #12
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	430b      	orrs	r3, r1
 80030de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <UART_SetConfig+0x114>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d103      	bne.n	8003108 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003100:	f7fe fcdc 	bl	8001abc <HAL_RCC_GetPCLK2Freq>
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	e002      	b.n	800310e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003108:	f7fe fcc4 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 800310c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009a      	lsls	r2, r3, #2
 8003118:	441a      	add	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	4a22      	ldr	r2, [pc, #136]	; (80031b0 <UART_SetConfig+0x118>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	0119      	lsls	r1, r3, #4
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	009a      	lsls	r2, r3, #2
 8003138:	441a      	add	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	fbb2 f2f3 	udiv	r2, r2, r3
 8003144:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <UART_SetConfig+0x118>)
 8003146:	fba3 0302 	umull	r0, r3, r3, r2
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	2064      	movs	r0, #100	; 0x64
 800314e:	fb00 f303 	mul.w	r3, r0, r3
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	3332      	adds	r3, #50	; 0x32
 8003158:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <UART_SetConfig+0x118>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003164:	4419      	add	r1, r3
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	009a      	lsls	r2, r3, #2
 8003170:	441a      	add	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fbb2 f2f3 	udiv	r2, r2, r3
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <UART_SetConfig+0x118>)
 800317e:	fba3 0302 	umull	r0, r3, r3, r2
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	2064      	movs	r0, #100	; 0x64
 8003186:	fb00 f303 	mul.w	r3, r0, r3
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	3332      	adds	r3, #50	; 0x32
 8003190:	4a07      	ldr	r2, [pc, #28]	; (80031b0 <UART_SetConfig+0x118>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	f003 020f 	and.w	r2, r3, #15
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	440a      	add	r2, r1
 80031a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40013800 	.word	0x40013800
 80031b0:	51eb851f 	.word	0x51eb851f

080031b4 <siprintf>:
 80031b4:	b40e      	push	{r1, r2, r3}
 80031b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031ba:	b500      	push	{lr}
 80031bc:	b09c      	sub	sp, #112	; 0x70
 80031be:	ab1d      	add	r3, sp, #116	; 0x74
 80031c0:	9002      	str	r0, [sp, #8]
 80031c2:	9006      	str	r0, [sp, #24]
 80031c4:	9107      	str	r1, [sp, #28]
 80031c6:	9104      	str	r1, [sp, #16]
 80031c8:	4808      	ldr	r0, [pc, #32]	; (80031ec <siprintf+0x38>)
 80031ca:	4909      	ldr	r1, [pc, #36]	; (80031f0 <siprintf+0x3c>)
 80031cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80031d0:	9105      	str	r1, [sp, #20]
 80031d2:	6800      	ldr	r0, [r0, #0]
 80031d4:	a902      	add	r1, sp, #8
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	f000 f98e 	bl	80034f8 <_svfiprintf_r>
 80031dc:	2200      	movs	r2, #0
 80031de:	9b02      	ldr	r3, [sp, #8]
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	b01c      	add	sp, #112	; 0x70
 80031e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80031e8:	b003      	add	sp, #12
 80031ea:	4770      	bx	lr
 80031ec:	20000058 	.word	0x20000058
 80031f0:	ffff0208 	.word	0xffff0208

080031f4 <memset>:
 80031f4:	4603      	mov	r3, r0
 80031f6:	4402      	add	r2, r0
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d100      	bne.n	80031fe <memset+0xa>
 80031fc:	4770      	bx	lr
 80031fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003202:	e7f9      	b.n	80031f8 <memset+0x4>

08003204 <__errno>:
 8003204:	4b01      	ldr	r3, [pc, #4]	; (800320c <__errno+0x8>)
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000058 	.word	0x20000058

08003210 <__libc_init_array>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	2600      	movs	r6, #0
 8003214:	4d0c      	ldr	r5, [pc, #48]	; (8003248 <__libc_init_array+0x38>)
 8003216:	4c0d      	ldr	r4, [pc, #52]	; (800324c <__libc_init_array+0x3c>)
 8003218:	1b64      	subs	r4, r4, r5
 800321a:	10a4      	asrs	r4, r4, #2
 800321c:	42a6      	cmp	r6, r4
 800321e:	d109      	bne.n	8003234 <__libc_init_array+0x24>
 8003220:	f000 fc7a 	bl	8003b18 <_init>
 8003224:	2600      	movs	r6, #0
 8003226:	4d0a      	ldr	r5, [pc, #40]	; (8003250 <__libc_init_array+0x40>)
 8003228:	4c0a      	ldr	r4, [pc, #40]	; (8003254 <__libc_init_array+0x44>)
 800322a:	1b64      	subs	r4, r4, r5
 800322c:	10a4      	asrs	r4, r4, #2
 800322e:	42a6      	cmp	r6, r4
 8003230:	d105      	bne.n	800323e <__libc_init_array+0x2e>
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	f855 3b04 	ldr.w	r3, [r5], #4
 8003238:	4798      	blx	r3
 800323a:	3601      	adds	r6, #1
 800323c:	e7ee      	b.n	800321c <__libc_init_array+0xc>
 800323e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003242:	4798      	blx	r3
 8003244:	3601      	adds	r6, #1
 8003246:	e7f2      	b.n	800322e <__libc_init_array+0x1e>
 8003248:	08003b94 	.word	0x08003b94
 800324c:	08003b94 	.word	0x08003b94
 8003250:	08003b94 	.word	0x08003b94
 8003254:	08003b98 	.word	0x08003b98

08003258 <__retarget_lock_acquire_recursive>:
 8003258:	4770      	bx	lr

0800325a <__retarget_lock_release_recursive>:
 800325a:	4770      	bx	lr

0800325c <_free_r>:
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	4605      	mov	r5, r0
 8003260:	2900      	cmp	r1, #0
 8003262:	d040      	beq.n	80032e6 <_free_r+0x8a>
 8003264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003268:	1f0c      	subs	r4, r1, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	bfb8      	it	lt
 800326e:	18e4      	addlt	r4, r4, r3
 8003270:	f000 f8dc 	bl	800342c <__malloc_lock>
 8003274:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <_free_r+0x8c>)
 8003276:	6813      	ldr	r3, [r2, #0]
 8003278:	b933      	cbnz	r3, 8003288 <_free_r+0x2c>
 800327a:	6063      	str	r3, [r4, #4]
 800327c:	6014      	str	r4, [r2, #0]
 800327e:	4628      	mov	r0, r5
 8003280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003284:	f000 b8d8 	b.w	8003438 <__malloc_unlock>
 8003288:	42a3      	cmp	r3, r4
 800328a:	d908      	bls.n	800329e <_free_r+0x42>
 800328c:	6820      	ldr	r0, [r4, #0]
 800328e:	1821      	adds	r1, r4, r0
 8003290:	428b      	cmp	r3, r1
 8003292:	bf01      	itttt	eq
 8003294:	6819      	ldreq	r1, [r3, #0]
 8003296:	685b      	ldreq	r3, [r3, #4]
 8003298:	1809      	addeq	r1, r1, r0
 800329a:	6021      	streq	r1, [r4, #0]
 800329c:	e7ed      	b.n	800327a <_free_r+0x1e>
 800329e:	461a      	mov	r2, r3
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	b10b      	cbz	r3, 80032a8 <_free_r+0x4c>
 80032a4:	42a3      	cmp	r3, r4
 80032a6:	d9fa      	bls.n	800329e <_free_r+0x42>
 80032a8:	6811      	ldr	r1, [r2, #0]
 80032aa:	1850      	adds	r0, r2, r1
 80032ac:	42a0      	cmp	r0, r4
 80032ae:	d10b      	bne.n	80032c8 <_free_r+0x6c>
 80032b0:	6820      	ldr	r0, [r4, #0]
 80032b2:	4401      	add	r1, r0
 80032b4:	1850      	adds	r0, r2, r1
 80032b6:	4283      	cmp	r3, r0
 80032b8:	6011      	str	r1, [r2, #0]
 80032ba:	d1e0      	bne.n	800327e <_free_r+0x22>
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4408      	add	r0, r1
 80032c2:	6010      	str	r0, [r2, #0]
 80032c4:	6053      	str	r3, [r2, #4]
 80032c6:	e7da      	b.n	800327e <_free_r+0x22>
 80032c8:	d902      	bls.n	80032d0 <_free_r+0x74>
 80032ca:	230c      	movs	r3, #12
 80032cc:	602b      	str	r3, [r5, #0]
 80032ce:	e7d6      	b.n	800327e <_free_r+0x22>
 80032d0:	6820      	ldr	r0, [r4, #0]
 80032d2:	1821      	adds	r1, r4, r0
 80032d4:	428b      	cmp	r3, r1
 80032d6:	bf01      	itttt	eq
 80032d8:	6819      	ldreq	r1, [r3, #0]
 80032da:	685b      	ldreq	r3, [r3, #4]
 80032dc:	1809      	addeq	r1, r1, r0
 80032de:	6021      	streq	r1, [r4, #0]
 80032e0:	6063      	str	r3, [r4, #4]
 80032e2:	6054      	str	r4, [r2, #4]
 80032e4:	e7cb      	b.n	800327e <_free_r+0x22>
 80032e6:	bd38      	pop	{r3, r4, r5, pc}
 80032e8:	200002bc 	.word	0x200002bc

080032ec <sbrk_aligned>:
 80032ec:	b570      	push	{r4, r5, r6, lr}
 80032ee:	4e0e      	ldr	r6, [pc, #56]	; (8003328 <sbrk_aligned+0x3c>)
 80032f0:	460c      	mov	r4, r1
 80032f2:	6831      	ldr	r1, [r6, #0]
 80032f4:	4605      	mov	r5, r0
 80032f6:	b911      	cbnz	r1, 80032fe <sbrk_aligned+0x12>
 80032f8:	f000 fbaa 	bl	8003a50 <_sbrk_r>
 80032fc:	6030      	str	r0, [r6, #0]
 80032fe:	4621      	mov	r1, r4
 8003300:	4628      	mov	r0, r5
 8003302:	f000 fba5 	bl	8003a50 <_sbrk_r>
 8003306:	1c43      	adds	r3, r0, #1
 8003308:	d00a      	beq.n	8003320 <sbrk_aligned+0x34>
 800330a:	1cc4      	adds	r4, r0, #3
 800330c:	f024 0403 	bic.w	r4, r4, #3
 8003310:	42a0      	cmp	r0, r4
 8003312:	d007      	beq.n	8003324 <sbrk_aligned+0x38>
 8003314:	1a21      	subs	r1, r4, r0
 8003316:	4628      	mov	r0, r5
 8003318:	f000 fb9a 	bl	8003a50 <_sbrk_r>
 800331c:	3001      	adds	r0, #1
 800331e:	d101      	bne.n	8003324 <sbrk_aligned+0x38>
 8003320:	f04f 34ff 	mov.w	r4, #4294967295
 8003324:	4620      	mov	r0, r4
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	200002c0 	.word	0x200002c0

0800332c <_malloc_r>:
 800332c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003330:	1ccd      	adds	r5, r1, #3
 8003332:	f025 0503 	bic.w	r5, r5, #3
 8003336:	3508      	adds	r5, #8
 8003338:	2d0c      	cmp	r5, #12
 800333a:	bf38      	it	cc
 800333c:	250c      	movcc	r5, #12
 800333e:	2d00      	cmp	r5, #0
 8003340:	4607      	mov	r7, r0
 8003342:	db01      	blt.n	8003348 <_malloc_r+0x1c>
 8003344:	42a9      	cmp	r1, r5
 8003346:	d905      	bls.n	8003354 <_malloc_r+0x28>
 8003348:	230c      	movs	r3, #12
 800334a:	2600      	movs	r6, #0
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	4630      	mov	r0, r6
 8003350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003354:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003428 <_malloc_r+0xfc>
 8003358:	f000 f868 	bl	800342c <__malloc_lock>
 800335c:	f8d8 3000 	ldr.w	r3, [r8]
 8003360:	461c      	mov	r4, r3
 8003362:	bb5c      	cbnz	r4, 80033bc <_malloc_r+0x90>
 8003364:	4629      	mov	r1, r5
 8003366:	4638      	mov	r0, r7
 8003368:	f7ff ffc0 	bl	80032ec <sbrk_aligned>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	4604      	mov	r4, r0
 8003370:	d155      	bne.n	800341e <_malloc_r+0xf2>
 8003372:	f8d8 4000 	ldr.w	r4, [r8]
 8003376:	4626      	mov	r6, r4
 8003378:	2e00      	cmp	r6, #0
 800337a:	d145      	bne.n	8003408 <_malloc_r+0xdc>
 800337c:	2c00      	cmp	r4, #0
 800337e:	d048      	beq.n	8003412 <_malloc_r+0xe6>
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	4631      	mov	r1, r6
 8003384:	4638      	mov	r0, r7
 8003386:	eb04 0903 	add.w	r9, r4, r3
 800338a:	f000 fb61 	bl	8003a50 <_sbrk_r>
 800338e:	4581      	cmp	r9, r0
 8003390:	d13f      	bne.n	8003412 <_malloc_r+0xe6>
 8003392:	6821      	ldr	r1, [r4, #0]
 8003394:	4638      	mov	r0, r7
 8003396:	1a6d      	subs	r5, r5, r1
 8003398:	4629      	mov	r1, r5
 800339a:	f7ff ffa7 	bl	80032ec <sbrk_aligned>
 800339e:	3001      	adds	r0, #1
 80033a0:	d037      	beq.n	8003412 <_malloc_r+0xe6>
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	442b      	add	r3, r5
 80033a6:	6023      	str	r3, [r4, #0]
 80033a8:	f8d8 3000 	ldr.w	r3, [r8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d038      	beq.n	8003422 <_malloc_r+0xf6>
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	42a2      	cmp	r2, r4
 80033b4:	d12b      	bne.n	800340e <_malloc_r+0xe2>
 80033b6:	2200      	movs	r2, #0
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	e00f      	b.n	80033dc <_malloc_r+0xb0>
 80033bc:	6822      	ldr	r2, [r4, #0]
 80033be:	1b52      	subs	r2, r2, r5
 80033c0:	d41f      	bmi.n	8003402 <_malloc_r+0xd6>
 80033c2:	2a0b      	cmp	r2, #11
 80033c4:	d917      	bls.n	80033f6 <_malloc_r+0xca>
 80033c6:	1961      	adds	r1, r4, r5
 80033c8:	42a3      	cmp	r3, r4
 80033ca:	6025      	str	r5, [r4, #0]
 80033cc:	bf18      	it	ne
 80033ce:	6059      	strne	r1, [r3, #4]
 80033d0:	6863      	ldr	r3, [r4, #4]
 80033d2:	bf08      	it	eq
 80033d4:	f8c8 1000 	streq.w	r1, [r8]
 80033d8:	5162      	str	r2, [r4, r5]
 80033da:	604b      	str	r3, [r1, #4]
 80033dc:	4638      	mov	r0, r7
 80033de:	f104 060b 	add.w	r6, r4, #11
 80033e2:	f000 f829 	bl	8003438 <__malloc_unlock>
 80033e6:	f026 0607 	bic.w	r6, r6, #7
 80033ea:	1d23      	adds	r3, r4, #4
 80033ec:	1af2      	subs	r2, r6, r3
 80033ee:	d0ae      	beq.n	800334e <_malloc_r+0x22>
 80033f0:	1b9b      	subs	r3, r3, r6
 80033f2:	50a3      	str	r3, [r4, r2]
 80033f4:	e7ab      	b.n	800334e <_malloc_r+0x22>
 80033f6:	42a3      	cmp	r3, r4
 80033f8:	6862      	ldr	r2, [r4, #4]
 80033fa:	d1dd      	bne.n	80033b8 <_malloc_r+0x8c>
 80033fc:	f8c8 2000 	str.w	r2, [r8]
 8003400:	e7ec      	b.n	80033dc <_malloc_r+0xb0>
 8003402:	4623      	mov	r3, r4
 8003404:	6864      	ldr	r4, [r4, #4]
 8003406:	e7ac      	b.n	8003362 <_malloc_r+0x36>
 8003408:	4634      	mov	r4, r6
 800340a:	6876      	ldr	r6, [r6, #4]
 800340c:	e7b4      	b.n	8003378 <_malloc_r+0x4c>
 800340e:	4613      	mov	r3, r2
 8003410:	e7cc      	b.n	80033ac <_malloc_r+0x80>
 8003412:	230c      	movs	r3, #12
 8003414:	4638      	mov	r0, r7
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	f000 f80e 	bl	8003438 <__malloc_unlock>
 800341c:	e797      	b.n	800334e <_malloc_r+0x22>
 800341e:	6025      	str	r5, [r4, #0]
 8003420:	e7dc      	b.n	80033dc <_malloc_r+0xb0>
 8003422:	605b      	str	r3, [r3, #4]
 8003424:	deff      	udf	#255	; 0xff
 8003426:	bf00      	nop
 8003428:	200002bc 	.word	0x200002bc

0800342c <__malloc_lock>:
 800342c:	4801      	ldr	r0, [pc, #4]	; (8003434 <__malloc_lock+0x8>)
 800342e:	f7ff bf13 	b.w	8003258 <__retarget_lock_acquire_recursive>
 8003432:	bf00      	nop
 8003434:	200002b8 	.word	0x200002b8

08003438 <__malloc_unlock>:
 8003438:	4801      	ldr	r0, [pc, #4]	; (8003440 <__malloc_unlock+0x8>)
 800343a:	f7ff bf0e 	b.w	800325a <__retarget_lock_release_recursive>
 800343e:	bf00      	nop
 8003440:	200002b8 	.word	0x200002b8

08003444 <__ssputs_r>:
 8003444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003448:	461f      	mov	r7, r3
 800344a:	688e      	ldr	r6, [r1, #8]
 800344c:	4682      	mov	sl, r0
 800344e:	42be      	cmp	r6, r7
 8003450:	460c      	mov	r4, r1
 8003452:	4690      	mov	r8, r2
 8003454:	680b      	ldr	r3, [r1, #0]
 8003456:	d82c      	bhi.n	80034b2 <__ssputs_r+0x6e>
 8003458:	898a      	ldrh	r2, [r1, #12]
 800345a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800345e:	d026      	beq.n	80034ae <__ssputs_r+0x6a>
 8003460:	6965      	ldr	r5, [r4, #20]
 8003462:	6909      	ldr	r1, [r1, #16]
 8003464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003468:	eba3 0901 	sub.w	r9, r3, r1
 800346c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003470:	1c7b      	adds	r3, r7, #1
 8003472:	444b      	add	r3, r9
 8003474:	106d      	asrs	r5, r5, #1
 8003476:	429d      	cmp	r5, r3
 8003478:	bf38      	it	cc
 800347a:	461d      	movcc	r5, r3
 800347c:	0553      	lsls	r3, r2, #21
 800347e:	d527      	bpl.n	80034d0 <__ssputs_r+0x8c>
 8003480:	4629      	mov	r1, r5
 8003482:	f7ff ff53 	bl	800332c <_malloc_r>
 8003486:	4606      	mov	r6, r0
 8003488:	b360      	cbz	r0, 80034e4 <__ssputs_r+0xa0>
 800348a:	464a      	mov	r2, r9
 800348c:	6921      	ldr	r1, [r4, #16]
 800348e:	f000 fafd 	bl	8003a8c <memcpy>
 8003492:	89a3      	ldrh	r3, [r4, #12]
 8003494:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349c:	81a3      	strh	r3, [r4, #12]
 800349e:	6126      	str	r6, [r4, #16]
 80034a0:	444e      	add	r6, r9
 80034a2:	6026      	str	r6, [r4, #0]
 80034a4:	463e      	mov	r6, r7
 80034a6:	6165      	str	r5, [r4, #20]
 80034a8:	eba5 0509 	sub.w	r5, r5, r9
 80034ac:	60a5      	str	r5, [r4, #8]
 80034ae:	42be      	cmp	r6, r7
 80034b0:	d900      	bls.n	80034b4 <__ssputs_r+0x70>
 80034b2:	463e      	mov	r6, r7
 80034b4:	4632      	mov	r2, r6
 80034b6:	4641      	mov	r1, r8
 80034b8:	6820      	ldr	r0, [r4, #0]
 80034ba:	f000 faaf 	bl	8003a1c <memmove>
 80034be:	2000      	movs	r0, #0
 80034c0:	68a3      	ldr	r3, [r4, #8]
 80034c2:	1b9b      	subs	r3, r3, r6
 80034c4:	60a3      	str	r3, [r4, #8]
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	4433      	add	r3, r6
 80034ca:	6023      	str	r3, [r4, #0]
 80034cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d0:	462a      	mov	r2, r5
 80034d2:	f000 fae9 	bl	8003aa8 <_realloc_r>
 80034d6:	4606      	mov	r6, r0
 80034d8:	2800      	cmp	r0, #0
 80034da:	d1e0      	bne.n	800349e <__ssputs_r+0x5a>
 80034dc:	4650      	mov	r0, sl
 80034de:	6921      	ldr	r1, [r4, #16]
 80034e0:	f7ff febc 	bl	800325c <_free_r>
 80034e4:	230c      	movs	r3, #12
 80034e6:	f8ca 3000 	str.w	r3, [sl]
 80034ea:	89a3      	ldrh	r3, [r4, #12]
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295
 80034f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f4:	81a3      	strh	r3, [r4, #12]
 80034f6:	e7e9      	b.n	80034cc <__ssputs_r+0x88>

080034f8 <_svfiprintf_r>:
 80034f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034fc:	4698      	mov	r8, r3
 80034fe:	898b      	ldrh	r3, [r1, #12]
 8003500:	4607      	mov	r7, r0
 8003502:	061b      	lsls	r3, r3, #24
 8003504:	460d      	mov	r5, r1
 8003506:	4614      	mov	r4, r2
 8003508:	b09d      	sub	sp, #116	; 0x74
 800350a:	d50e      	bpl.n	800352a <_svfiprintf_r+0x32>
 800350c:	690b      	ldr	r3, [r1, #16]
 800350e:	b963      	cbnz	r3, 800352a <_svfiprintf_r+0x32>
 8003510:	2140      	movs	r1, #64	; 0x40
 8003512:	f7ff ff0b 	bl	800332c <_malloc_r>
 8003516:	6028      	str	r0, [r5, #0]
 8003518:	6128      	str	r0, [r5, #16]
 800351a:	b920      	cbnz	r0, 8003526 <_svfiprintf_r+0x2e>
 800351c:	230c      	movs	r3, #12
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	e0d0      	b.n	80036c8 <_svfiprintf_r+0x1d0>
 8003526:	2340      	movs	r3, #64	; 0x40
 8003528:	616b      	str	r3, [r5, #20]
 800352a:	2300      	movs	r3, #0
 800352c:	9309      	str	r3, [sp, #36]	; 0x24
 800352e:	2320      	movs	r3, #32
 8003530:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003534:	2330      	movs	r3, #48	; 0x30
 8003536:	f04f 0901 	mov.w	r9, #1
 800353a:	f8cd 800c 	str.w	r8, [sp, #12]
 800353e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80036e0 <_svfiprintf_r+0x1e8>
 8003542:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003546:	4623      	mov	r3, r4
 8003548:	469a      	mov	sl, r3
 800354a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800354e:	b10a      	cbz	r2, 8003554 <_svfiprintf_r+0x5c>
 8003550:	2a25      	cmp	r2, #37	; 0x25
 8003552:	d1f9      	bne.n	8003548 <_svfiprintf_r+0x50>
 8003554:	ebba 0b04 	subs.w	fp, sl, r4
 8003558:	d00b      	beq.n	8003572 <_svfiprintf_r+0x7a>
 800355a:	465b      	mov	r3, fp
 800355c:	4622      	mov	r2, r4
 800355e:	4629      	mov	r1, r5
 8003560:	4638      	mov	r0, r7
 8003562:	f7ff ff6f 	bl	8003444 <__ssputs_r>
 8003566:	3001      	adds	r0, #1
 8003568:	f000 80a9 	beq.w	80036be <_svfiprintf_r+0x1c6>
 800356c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800356e:	445a      	add	r2, fp
 8003570:	9209      	str	r2, [sp, #36]	; 0x24
 8003572:	f89a 3000 	ldrb.w	r3, [sl]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 80a1 	beq.w	80036be <_svfiprintf_r+0x1c6>
 800357c:	2300      	movs	r3, #0
 800357e:	f04f 32ff 	mov.w	r2, #4294967295
 8003582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003586:	f10a 0a01 	add.w	sl, sl, #1
 800358a:	9304      	str	r3, [sp, #16]
 800358c:	9307      	str	r3, [sp, #28]
 800358e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003592:	931a      	str	r3, [sp, #104]	; 0x68
 8003594:	4654      	mov	r4, sl
 8003596:	2205      	movs	r2, #5
 8003598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800359c:	4850      	ldr	r0, [pc, #320]	; (80036e0 <_svfiprintf_r+0x1e8>)
 800359e:	f000 fa67 	bl	8003a70 <memchr>
 80035a2:	9a04      	ldr	r2, [sp, #16]
 80035a4:	b9d8      	cbnz	r0, 80035de <_svfiprintf_r+0xe6>
 80035a6:	06d0      	lsls	r0, r2, #27
 80035a8:	bf44      	itt	mi
 80035aa:	2320      	movmi	r3, #32
 80035ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035b0:	0711      	lsls	r1, r2, #28
 80035b2:	bf44      	itt	mi
 80035b4:	232b      	movmi	r3, #43	; 0x2b
 80035b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035ba:	f89a 3000 	ldrb.w	r3, [sl]
 80035be:	2b2a      	cmp	r3, #42	; 0x2a
 80035c0:	d015      	beq.n	80035ee <_svfiprintf_r+0xf6>
 80035c2:	4654      	mov	r4, sl
 80035c4:	2000      	movs	r0, #0
 80035c6:	f04f 0c0a 	mov.w	ip, #10
 80035ca:	9a07      	ldr	r2, [sp, #28]
 80035cc:	4621      	mov	r1, r4
 80035ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035d2:	3b30      	subs	r3, #48	; 0x30
 80035d4:	2b09      	cmp	r3, #9
 80035d6:	d94d      	bls.n	8003674 <_svfiprintf_r+0x17c>
 80035d8:	b1b0      	cbz	r0, 8003608 <_svfiprintf_r+0x110>
 80035da:	9207      	str	r2, [sp, #28]
 80035dc:	e014      	b.n	8003608 <_svfiprintf_r+0x110>
 80035de:	eba0 0308 	sub.w	r3, r0, r8
 80035e2:	fa09 f303 	lsl.w	r3, r9, r3
 80035e6:	4313      	orrs	r3, r2
 80035e8:	46a2      	mov	sl, r4
 80035ea:	9304      	str	r3, [sp, #16]
 80035ec:	e7d2      	b.n	8003594 <_svfiprintf_r+0x9c>
 80035ee:	9b03      	ldr	r3, [sp, #12]
 80035f0:	1d19      	adds	r1, r3, #4
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	9103      	str	r1, [sp, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bfbb      	ittet	lt
 80035fa:	425b      	neglt	r3, r3
 80035fc:	f042 0202 	orrlt.w	r2, r2, #2
 8003600:	9307      	strge	r3, [sp, #28]
 8003602:	9307      	strlt	r3, [sp, #28]
 8003604:	bfb8      	it	lt
 8003606:	9204      	strlt	r2, [sp, #16]
 8003608:	7823      	ldrb	r3, [r4, #0]
 800360a:	2b2e      	cmp	r3, #46	; 0x2e
 800360c:	d10c      	bne.n	8003628 <_svfiprintf_r+0x130>
 800360e:	7863      	ldrb	r3, [r4, #1]
 8003610:	2b2a      	cmp	r3, #42	; 0x2a
 8003612:	d134      	bne.n	800367e <_svfiprintf_r+0x186>
 8003614:	9b03      	ldr	r3, [sp, #12]
 8003616:	3402      	adds	r4, #2
 8003618:	1d1a      	adds	r2, r3, #4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	9203      	str	r2, [sp, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	bfb8      	it	lt
 8003622:	f04f 33ff 	movlt.w	r3, #4294967295
 8003626:	9305      	str	r3, [sp, #20]
 8003628:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80036e4 <_svfiprintf_r+0x1ec>
 800362c:	2203      	movs	r2, #3
 800362e:	4650      	mov	r0, sl
 8003630:	7821      	ldrb	r1, [r4, #0]
 8003632:	f000 fa1d 	bl	8003a70 <memchr>
 8003636:	b138      	cbz	r0, 8003648 <_svfiprintf_r+0x150>
 8003638:	2240      	movs	r2, #64	; 0x40
 800363a:	9b04      	ldr	r3, [sp, #16]
 800363c:	eba0 000a 	sub.w	r0, r0, sl
 8003640:	4082      	lsls	r2, r0
 8003642:	4313      	orrs	r3, r2
 8003644:	3401      	adds	r4, #1
 8003646:	9304      	str	r3, [sp, #16]
 8003648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800364c:	2206      	movs	r2, #6
 800364e:	4826      	ldr	r0, [pc, #152]	; (80036e8 <_svfiprintf_r+0x1f0>)
 8003650:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003654:	f000 fa0c 	bl	8003a70 <memchr>
 8003658:	2800      	cmp	r0, #0
 800365a:	d038      	beq.n	80036ce <_svfiprintf_r+0x1d6>
 800365c:	4b23      	ldr	r3, [pc, #140]	; (80036ec <_svfiprintf_r+0x1f4>)
 800365e:	bb1b      	cbnz	r3, 80036a8 <_svfiprintf_r+0x1b0>
 8003660:	9b03      	ldr	r3, [sp, #12]
 8003662:	3307      	adds	r3, #7
 8003664:	f023 0307 	bic.w	r3, r3, #7
 8003668:	3308      	adds	r3, #8
 800366a:	9303      	str	r3, [sp, #12]
 800366c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800366e:	4433      	add	r3, r6
 8003670:	9309      	str	r3, [sp, #36]	; 0x24
 8003672:	e768      	b.n	8003546 <_svfiprintf_r+0x4e>
 8003674:	460c      	mov	r4, r1
 8003676:	2001      	movs	r0, #1
 8003678:	fb0c 3202 	mla	r2, ip, r2, r3
 800367c:	e7a6      	b.n	80035cc <_svfiprintf_r+0xd4>
 800367e:	2300      	movs	r3, #0
 8003680:	f04f 0c0a 	mov.w	ip, #10
 8003684:	4619      	mov	r1, r3
 8003686:	3401      	adds	r4, #1
 8003688:	9305      	str	r3, [sp, #20]
 800368a:	4620      	mov	r0, r4
 800368c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003690:	3a30      	subs	r2, #48	; 0x30
 8003692:	2a09      	cmp	r2, #9
 8003694:	d903      	bls.n	800369e <_svfiprintf_r+0x1a6>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0c6      	beq.n	8003628 <_svfiprintf_r+0x130>
 800369a:	9105      	str	r1, [sp, #20]
 800369c:	e7c4      	b.n	8003628 <_svfiprintf_r+0x130>
 800369e:	4604      	mov	r4, r0
 80036a0:	2301      	movs	r3, #1
 80036a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80036a6:	e7f0      	b.n	800368a <_svfiprintf_r+0x192>
 80036a8:	ab03      	add	r3, sp, #12
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	462a      	mov	r2, r5
 80036ae:	4638      	mov	r0, r7
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <_svfiprintf_r+0x1f8>)
 80036b2:	a904      	add	r1, sp, #16
 80036b4:	f3af 8000 	nop.w
 80036b8:	1c42      	adds	r2, r0, #1
 80036ba:	4606      	mov	r6, r0
 80036bc:	d1d6      	bne.n	800366c <_svfiprintf_r+0x174>
 80036be:	89ab      	ldrh	r3, [r5, #12]
 80036c0:	065b      	lsls	r3, r3, #25
 80036c2:	f53f af2d 	bmi.w	8003520 <_svfiprintf_r+0x28>
 80036c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036c8:	b01d      	add	sp, #116	; 0x74
 80036ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ce:	ab03      	add	r3, sp, #12
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	462a      	mov	r2, r5
 80036d4:	4638      	mov	r0, r7
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <_svfiprintf_r+0x1f8>)
 80036d8:	a904      	add	r1, sp, #16
 80036da:	f000 f87d 	bl	80037d8 <_printf_i>
 80036de:	e7eb      	b.n	80036b8 <_svfiprintf_r+0x1c0>
 80036e0:	08003b5e 	.word	0x08003b5e
 80036e4:	08003b64 	.word	0x08003b64
 80036e8:	08003b68 	.word	0x08003b68
 80036ec:	00000000 	.word	0x00000000
 80036f0:	08003445 	.word	0x08003445

080036f4 <_printf_common>:
 80036f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036f8:	4616      	mov	r6, r2
 80036fa:	4699      	mov	r9, r3
 80036fc:	688a      	ldr	r2, [r1, #8]
 80036fe:	690b      	ldr	r3, [r1, #16]
 8003700:	4607      	mov	r7, r0
 8003702:	4293      	cmp	r3, r2
 8003704:	bfb8      	it	lt
 8003706:	4613      	movlt	r3, r2
 8003708:	6033      	str	r3, [r6, #0]
 800370a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800370e:	460c      	mov	r4, r1
 8003710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003714:	b10a      	cbz	r2, 800371a <_printf_common+0x26>
 8003716:	3301      	adds	r3, #1
 8003718:	6033      	str	r3, [r6, #0]
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	0699      	lsls	r1, r3, #26
 800371e:	bf42      	ittt	mi
 8003720:	6833      	ldrmi	r3, [r6, #0]
 8003722:	3302      	addmi	r3, #2
 8003724:	6033      	strmi	r3, [r6, #0]
 8003726:	6825      	ldr	r5, [r4, #0]
 8003728:	f015 0506 	ands.w	r5, r5, #6
 800372c:	d106      	bne.n	800373c <_printf_common+0x48>
 800372e:	f104 0a19 	add.w	sl, r4, #25
 8003732:	68e3      	ldr	r3, [r4, #12]
 8003734:	6832      	ldr	r2, [r6, #0]
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	42ab      	cmp	r3, r5
 800373a:	dc2b      	bgt.n	8003794 <_printf_common+0xa0>
 800373c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003740:	1e13      	subs	r3, r2, #0
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	bf18      	it	ne
 8003746:	2301      	movne	r3, #1
 8003748:	0692      	lsls	r2, r2, #26
 800374a:	d430      	bmi.n	80037ae <_printf_common+0xba>
 800374c:	4649      	mov	r1, r9
 800374e:	4638      	mov	r0, r7
 8003750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003754:	47c0      	blx	r8
 8003756:	3001      	adds	r0, #1
 8003758:	d023      	beq.n	80037a2 <_printf_common+0xae>
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	6922      	ldr	r2, [r4, #16]
 800375e:	f003 0306 	and.w	r3, r3, #6
 8003762:	2b04      	cmp	r3, #4
 8003764:	bf14      	ite	ne
 8003766:	2500      	movne	r5, #0
 8003768:	6833      	ldreq	r3, [r6, #0]
 800376a:	f04f 0600 	mov.w	r6, #0
 800376e:	bf08      	it	eq
 8003770:	68e5      	ldreq	r5, [r4, #12]
 8003772:	f104 041a 	add.w	r4, r4, #26
 8003776:	bf08      	it	eq
 8003778:	1aed      	subeq	r5, r5, r3
 800377a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800377e:	bf08      	it	eq
 8003780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003784:	4293      	cmp	r3, r2
 8003786:	bfc4      	itt	gt
 8003788:	1a9b      	subgt	r3, r3, r2
 800378a:	18ed      	addgt	r5, r5, r3
 800378c:	42b5      	cmp	r5, r6
 800378e:	d11a      	bne.n	80037c6 <_printf_common+0xd2>
 8003790:	2000      	movs	r0, #0
 8003792:	e008      	b.n	80037a6 <_printf_common+0xb2>
 8003794:	2301      	movs	r3, #1
 8003796:	4652      	mov	r2, sl
 8003798:	4649      	mov	r1, r9
 800379a:	4638      	mov	r0, r7
 800379c:	47c0      	blx	r8
 800379e:	3001      	adds	r0, #1
 80037a0:	d103      	bne.n	80037aa <_printf_common+0xb6>
 80037a2:	f04f 30ff 	mov.w	r0, #4294967295
 80037a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037aa:	3501      	adds	r5, #1
 80037ac:	e7c1      	b.n	8003732 <_printf_common+0x3e>
 80037ae:	2030      	movs	r0, #48	; 0x30
 80037b0:	18e1      	adds	r1, r4, r3
 80037b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037bc:	4422      	add	r2, r4
 80037be:	3302      	adds	r3, #2
 80037c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037c4:	e7c2      	b.n	800374c <_printf_common+0x58>
 80037c6:	2301      	movs	r3, #1
 80037c8:	4622      	mov	r2, r4
 80037ca:	4649      	mov	r1, r9
 80037cc:	4638      	mov	r0, r7
 80037ce:	47c0      	blx	r8
 80037d0:	3001      	adds	r0, #1
 80037d2:	d0e6      	beq.n	80037a2 <_printf_common+0xae>
 80037d4:	3601      	adds	r6, #1
 80037d6:	e7d9      	b.n	800378c <_printf_common+0x98>

080037d8 <_printf_i>:
 80037d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037dc:	7e0f      	ldrb	r7, [r1, #24]
 80037de:	4691      	mov	r9, r2
 80037e0:	2f78      	cmp	r7, #120	; 0x78
 80037e2:	4680      	mov	r8, r0
 80037e4:	460c      	mov	r4, r1
 80037e6:	469a      	mov	sl, r3
 80037e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037ee:	d807      	bhi.n	8003800 <_printf_i+0x28>
 80037f0:	2f62      	cmp	r7, #98	; 0x62
 80037f2:	d80a      	bhi.n	800380a <_printf_i+0x32>
 80037f4:	2f00      	cmp	r7, #0
 80037f6:	f000 80d5 	beq.w	80039a4 <_printf_i+0x1cc>
 80037fa:	2f58      	cmp	r7, #88	; 0x58
 80037fc:	f000 80c1 	beq.w	8003982 <_printf_i+0x1aa>
 8003800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003808:	e03a      	b.n	8003880 <_printf_i+0xa8>
 800380a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800380e:	2b15      	cmp	r3, #21
 8003810:	d8f6      	bhi.n	8003800 <_printf_i+0x28>
 8003812:	a101      	add	r1, pc, #4	; (adr r1, 8003818 <_printf_i+0x40>)
 8003814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003818:	08003871 	.word	0x08003871
 800381c:	08003885 	.word	0x08003885
 8003820:	08003801 	.word	0x08003801
 8003824:	08003801 	.word	0x08003801
 8003828:	08003801 	.word	0x08003801
 800382c:	08003801 	.word	0x08003801
 8003830:	08003885 	.word	0x08003885
 8003834:	08003801 	.word	0x08003801
 8003838:	08003801 	.word	0x08003801
 800383c:	08003801 	.word	0x08003801
 8003840:	08003801 	.word	0x08003801
 8003844:	0800398b 	.word	0x0800398b
 8003848:	080038b1 	.word	0x080038b1
 800384c:	08003945 	.word	0x08003945
 8003850:	08003801 	.word	0x08003801
 8003854:	08003801 	.word	0x08003801
 8003858:	080039ad 	.word	0x080039ad
 800385c:	08003801 	.word	0x08003801
 8003860:	080038b1 	.word	0x080038b1
 8003864:	08003801 	.word	0x08003801
 8003868:	08003801 	.word	0x08003801
 800386c:	0800394d 	.word	0x0800394d
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	1d1a      	adds	r2, r3, #4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	602a      	str	r2, [r5, #0]
 8003878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800387c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003880:	2301      	movs	r3, #1
 8003882:	e0a0      	b.n	80039c6 <_printf_i+0x1ee>
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	682b      	ldr	r3, [r5, #0]
 8003888:	0607      	lsls	r7, r0, #24
 800388a:	f103 0104 	add.w	r1, r3, #4
 800388e:	6029      	str	r1, [r5, #0]
 8003890:	d501      	bpl.n	8003896 <_printf_i+0xbe>
 8003892:	681e      	ldr	r6, [r3, #0]
 8003894:	e003      	b.n	800389e <_printf_i+0xc6>
 8003896:	0646      	lsls	r6, r0, #25
 8003898:	d5fb      	bpl.n	8003892 <_printf_i+0xba>
 800389a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800389e:	2e00      	cmp	r6, #0
 80038a0:	da03      	bge.n	80038aa <_printf_i+0xd2>
 80038a2:	232d      	movs	r3, #45	; 0x2d
 80038a4:	4276      	negs	r6, r6
 80038a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038aa:	230a      	movs	r3, #10
 80038ac:	4859      	ldr	r0, [pc, #356]	; (8003a14 <_printf_i+0x23c>)
 80038ae:	e012      	b.n	80038d6 <_printf_i+0xfe>
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	6820      	ldr	r0, [r4, #0]
 80038b4:	1d19      	adds	r1, r3, #4
 80038b6:	6029      	str	r1, [r5, #0]
 80038b8:	0605      	lsls	r5, r0, #24
 80038ba:	d501      	bpl.n	80038c0 <_printf_i+0xe8>
 80038bc:	681e      	ldr	r6, [r3, #0]
 80038be:	e002      	b.n	80038c6 <_printf_i+0xee>
 80038c0:	0641      	lsls	r1, r0, #25
 80038c2:	d5fb      	bpl.n	80038bc <_printf_i+0xe4>
 80038c4:	881e      	ldrh	r6, [r3, #0]
 80038c6:	2f6f      	cmp	r7, #111	; 0x6f
 80038c8:	bf0c      	ite	eq
 80038ca:	2308      	moveq	r3, #8
 80038cc:	230a      	movne	r3, #10
 80038ce:	4851      	ldr	r0, [pc, #324]	; (8003a14 <_printf_i+0x23c>)
 80038d0:	2100      	movs	r1, #0
 80038d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038d6:	6865      	ldr	r5, [r4, #4]
 80038d8:	2d00      	cmp	r5, #0
 80038da:	bfa8      	it	ge
 80038dc:	6821      	ldrge	r1, [r4, #0]
 80038de:	60a5      	str	r5, [r4, #8]
 80038e0:	bfa4      	itt	ge
 80038e2:	f021 0104 	bicge.w	r1, r1, #4
 80038e6:	6021      	strge	r1, [r4, #0]
 80038e8:	b90e      	cbnz	r6, 80038ee <_printf_i+0x116>
 80038ea:	2d00      	cmp	r5, #0
 80038ec:	d04b      	beq.n	8003986 <_printf_i+0x1ae>
 80038ee:	4615      	mov	r5, r2
 80038f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80038f4:	fb03 6711 	mls	r7, r3, r1, r6
 80038f8:	5dc7      	ldrb	r7, [r0, r7]
 80038fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038fe:	4637      	mov	r7, r6
 8003900:	42bb      	cmp	r3, r7
 8003902:	460e      	mov	r6, r1
 8003904:	d9f4      	bls.n	80038f0 <_printf_i+0x118>
 8003906:	2b08      	cmp	r3, #8
 8003908:	d10b      	bne.n	8003922 <_printf_i+0x14a>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	07de      	lsls	r6, r3, #31
 800390e:	d508      	bpl.n	8003922 <_printf_i+0x14a>
 8003910:	6923      	ldr	r3, [r4, #16]
 8003912:	6861      	ldr	r1, [r4, #4]
 8003914:	4299      	cmp	r1, r3
 8003916:	bfde      	ittt	le
 8003918:	2330      	movle	r3, #48	; 0x30
 800391a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800391e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003922:	1b52      	subs	r2, r2, r5
 8003924:	6122      	str	r2, [r4, #16]
 8003926:	464b      	mov	r3, r9
 8003928:	4621      	mov	r1, r4
 800392a:	4640      	mov	r0, r8
 800392c:	f8cd a000 	str.w	sl, [sp]
 8003930:	aa03      	add	r2, sp, #12
 8003932:	f7ff fedf 	bl	80036f4 <_printf_common>
 8003936:	3001      	adds	r0, #1
 8003938:	d14a      	bne.n	80039d0 <_printf_i+0x1f8>
 800393a:	f04f 30ff 	mov.w	r0, #4294967295
 800393e:	b004      	add	sp, #16
 8003940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	f043 0320 	orr.w	r3, r3, #32
 800394a:	6023      	str	r3, [r4, #0]
 800394c:	2778      	movs	r7, #120	; 0x78
 800394e:	4832      	ldr	r0, [pc, #200]	; (8003a18 <_printf_i+0x240>)
 8003950:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	6829      	ldr	r1, [r5, #0]
 8003958:	061f      	lsls	r7, r3, #24
 800395a:	f851 6b04 	ldr.w	r6, [r1], #4
 800395e:	d402      	bmi.n	8003966 <_printf_i+0x18e>
 8003960:	065f      	lsls	r7, r3, #25
 8003962:	bf48      	it	mi
 8003964:	b2b6      	uxthmi	r6, r6
 8003966:	07df      	lsls	r7, r3, #31
 8003968:	bf48      	it	mi
 800396a:	f043 0320 	orrmi.w	r3, r3, #32
 800396e:	6029      	str	r1, [r5, #0]
 8003970:	bf48      	it	mi
 8003972:	6023      	strmi	r3, [r4, #0]
 8003974:	b91e      	cbnz	r6, 800397e <_printf_i+0x1a6>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	f023 0320 	bic.w	r3, r3, #32
 800397c:	6023      	str	r3, [r4, #0]
 800397e:	2310      	movs	r3, #16
 8003980:	e7a6      	b.n	80038d0 <_printf_i+0xf8>
 8003982:	4824      	ldr	r0, [pc, #144]	; (8003a14 <_printf_i+0x23c>)
 8003984:	e7e4      	b.n	8003950 <_printf_i+0x178>
 8003986:	4615      	mov	r5, r2
 8003988:	e7bd      	b.n	8003906 <_printf_i+0x12e>
 800398a:	682b      	ldr	r3, [r5, #0]
 800398c:	6826      	ldr	r6, [r4, #0]
 800398e:	1d18      	adds	r0, r3, #4
 8003990:	6961      	ldr	r1, [r4, #20]
 8003992:	6028      	str	r0, [r5, #0]
 8003994:	0635      	lsls	r5, r6, #24
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	d501      	bpl.n	800399e <_printf_i+0x1c6>
 800399a:	6019      	str	r1, [r3, #0]
 800399c:	e002      	b.n	80039a4 <_printf_i+0x1cc>
 800399e:	0670      	lsls	r0, r6, #25
 80039a0:	d5fb      	bpl.n	800399a <_printf_i+0x1c2>
 80039a2:	8019      	strh	r1, [r3, #0]
 80039a4:	2300      	movs	r3, #0
 80039a6:	4615      	mov	r5, r2
 80039a8:	6123      	str	r3, [r4, #16]
 80039aa:	e7bc      	b.n	8003926 <_printf_i+0x14e>
 80039ac:	682b      	ldr	r3, [r5, #0]
 80039ae:	2100      	movs	r1, #0
 80039b0:	1d1a      	adds	r2, r3, #4
 80039b2:	602a      	str	r2, [r5, #0]
 80039b4:	681d      	ldr	r5, [r3, #0]
 80039b6:	6862      	ldr	r2, [r4, #4]
 80039b8:	4628      	mov	r0, r5
 80039ba:	f000 f859 	bl	8003a70 <memchr>
 80039be:	b108      	cbz	r0, 80039c4 <_printf_i+0x1ec>
 80039c0:	1b40      	subs	r0, r0, r5
 80039c2:	6060      	str	r0, [r4, #4]
 80039c4:	6863      	ldr	r3, [r4, #4]
 80039c6:	6123      	str	r3, [r4, #16]
 80039c8:	2300      	movs	r3, #0
 80039ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039ce:	e7aa      	b.n	8003926 <_printf_i+0x14e>
 80039d0:	462a      	mov	r2, r5
 80039d2:	4649      	mov	r1, r9
 80039d4:	4640      	mov	r0, r8
 80039d6:	6923      	ldr	r3, [r4, #16]
 80039d8:	47d0      	blx	sl
 80039da:	3001      	adds	r0, #1
 80039dc:	d0ad      	beq.n	800393a <_printf_i+0x162>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	079b      	lsls	r3, r3, #30
 80039e2:	d413      	bmi.n	8003a0c <_printf_i+0x234>
 80039e4:	68e0      	ldr	r0, [r4, #12]
 80039e6:	9b03      	ldr	r3, [sp, #12]
 80039e8:	4298      	cmp	r0, r3
 80039ea:	bfb8      	it	lt
 80039ec:	4618      	movlt	r0, r3
 80039ee:	e7a6      	b.n	800393e <_printf_i+0x166>
 80039f0:	2301      	movs	r3, #1
 80039f2:	4632      	mov	r2, r6
 80039f4:	4649      	mov	r1, r9
 80039f6:	4640      	mov	r0, r8
 80039f8:	47d0      	blx	sl
 80039fa:	3001      	adds	r0, #1
 80039fc:	d09d      	beq.n	800393a <_printf_i+0x162>
 80039fe:	3501      	adds	r5, #1
 8003a00:	68e3      	ldr	r3, [r4, #12]
 8003a02:	9903      	ldr	r1, [sp, #12]
 8003a04:	1a5b      	subs	r3, r3, r1
 8003a06:	42ab      	cmp	r3, r5
 8003a08:	dcf2      	bgt.n	80039f0 <_printf_i+0x218>
 8003a0a:	e7eb      	b.n	80039e4 <_printf_i+0x20c>
 8003a0c:	2500      	movs	r5, #0
 8003a0e:	f104 0619 	add.w	r6, r4, #25
 8003a12:	e7f5      	b.n	8003a00 <_printf_i+0x228>
 8003a14:	08003b6f 	.word	0x08003b6f
 8003a18:	08003b80 	.word	0x08003b80

08003a1c <memmove>:
 8003a1c:	4288      	cmp	r0, r1
 8003a1e:	b510      	push	{r4, lr}
 8003a20:	eb01 0402 	add.w	r4, r1, r2
 8003a24:	d902      	bls.n	8003a2c <memmove+0x10>
 8003a26:	4284      	cmp	r4, r0
 8003a28:	4623      	mov	r3, r4
 8003a2a:	d807      	bhi.n	8003a3c <memmove+0x20>
 8003a2c:	1e43      	subs	r3, r0, #1
 8003a2e:	42a1      	cmp	r1, r4
 8003a30:	d008      	beq.n	8003a44 <memmove+0x28>
 8003a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a3a:	e7f8      	b.n	8003a2e <memmove+0x12>
 8003a3c:	4601      	mov	r1, r0
 8003a3e:	4402      	add	r2, r0
 8003a40:	428a      	cmp	r2, r1
 8003a42:	d100      	bne.n	8003a46 <memmove+0x2a>
 8003a44:	bd10      	pop	{r4, pc}
 8003a46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a4e:	e7f7      	b.n	8003a40 <memmove+0x24>

08003a50 <_sbrk_r>:
 8003a50:	b538      	push	{r3, r4, r5, lr}
 8003a52:	2300      	movs	r3, #0
 8003a54:	4d05      	ldr	r5, [pc, #20]	; (8003a6c <_sbrk_r+0x1c>)
 8003a56:	4604      	mov	r4, r0
 8003a58:	4608      	mov	r0, r1
 8003a5a:	602b      	str	r3, [r5, #0]
 8003a5c:	f7fc fe26 	bl	80006ac <_sbrk>
 8003a60:	1c43      	adds	r3, r0, #1
 8003a62:	d102      	bne.n	8003a6a <_sbrk_r+0x1a>
 8003a64:	682b      	ldr	r3, [r5, #0]
 8003a66:	b103      	cbz	r3, 8003a6a <_sbrk_r+0x1a>
 8003a68:	6023      	str	r3, [r4, #0]
 8003a6a:	bd38      	pop	{r3, r4, r5, pc}
 8003a6c:	200002b4 	.word	0x200002b4

08003a70 <memchr>:
 8003a70:	4603      	mov	r3, r0
 8003a72:	b510      	push	{r4, lr}
 8003a74:	b2c9      	uxtb	r1, r1
 8003a76:	4402      	add	r2, r0
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	d101      	bne.n	8003a82 <memchr+0x12>
 8003a7e:	2000      	movs	r0, #0
 8003a80:	e003      	b.n	8003a8a <memchr+0x1a>
 8003a82:	7804      	ldrb	r4, [r0, #0]
 8003a84:	3301      	adds	r3, #1
 8003a86:	428c      	cmp	r4, r1
 8003a88:	d1f6      	bne.n	8003a78 <memchr+0x8>
 8003a8a:	bd10      	pop	{r4, pc}

08003a8c <memcpy>:
 8003a8c:	440a      	add	r2, r1
 8003a8e:	4291      	cmp	r1, r2
 8003a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a94:	d100      	bne.n	8003a98 <memcpy+0xc>
 8003a96:	4770      	bx	lr
 8003a98:	b510      	push	{r4, lr}
 8003a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a9e:	4291      	cmp	r1, r2
 8003aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003aa4:	d1f9      	bne.n	8003a9a <memcpy+0xe>
 8003aa6:	bd10      	pop	{r4, pc}

08003aa8 <_realloc_r>:
 8003aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aac:	4680      	mov	r8, r0
 8003aae:	4614      	mov	r4, r2
 8003ab0:	460e      	mov	r6, r1
 8003ab2:	b921      	cbnz	r1, 8003abe <_realloc_r+0x16>
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aba:	f7ff bc37 	b.w	800332c <_malloc_r>
 8003abe:	b92a      	cbnz	r2, 8003acc <_realloc_r+0x24>
 8003ac0:	f7ff fbcc 	bl	800325c <_free_r>
 8003ac4:	4625      	mov	r5, r4
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003acc:	f000 f81b 	bl	8003b06 <_malloc_usable_size_r>
 8003ad0:	4284      	cmp	r4, r0
 8003ad2:	4607      	mov	r7, r0
 8003ad4:	d802      	bhi.n	8003adc <_realloc_r+0x34>
 8003ad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ada:	d812      	bhi.n	8003b02 <_realloc_r+0x5a>
 8003adc:	4621      	mov	r1, r4
 8003ade:	4640      	mov	r0, r8
 8003ae0:	f7ff fc24 	bl	800332c <_malloc_r>
 8003ae4:	4605      	mov	r5, r0
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	d0ed      	beq.n	8003ac6 <_realloc_r+0x1e>
 8003aea:	42bc      	cmp	r4, r7
 8003aec:	4622      	mov	r2, r4
 8003aee:	4631      	mov	r1, r6
 8003af0:	bf28      	it	cs
 8003af2:	463a      	movcs	r2, r7
 8003af4:	f7ff ffca 	bl	8003a8c <memcpy>
 8003af8:	4631      	mov	r1, r6
 8003afa:	4640      	mov	r0, r8
 8003afc:	f7ff fbae 	bl	800325c <_free_r>
 8003b00:	e7e1      	b.n	8003ac6 <_realloc_r+0x1e>
 8003b02:	4635      	mov	r5, r6
 8003b04:	e7df      	b.n	8003ac6 <_realloc_r+0x1e>

08003b06 <_malloc_usable_size_r>:
 8003b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b0a:	1f18      	subs	r0, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bfbc      	itt	lt
 8003b10:	580b      	ldrlt	r3, [r1, r0]
 8003b12:	18c0      	addlt	r0, r0, r3
 8003b14:	4770      	bx	lr
	...

08003b18 <_init>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	bf00      	nop
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr

08003b24 <_fini>:
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	bf00      	nop
 8003b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2a:	bc08      	pop	{r3}
 8003b2c:	469e      	mov	lr, r3
 8003b2e:	4770      	bx	lr
